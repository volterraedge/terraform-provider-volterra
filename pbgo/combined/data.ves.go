//
// Copyright (c) 2019 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.
//

package combined

import (
	"gopkg.volterra.us/stdlib/svcfw"
	// all schemas used by service
)

// GetSchemaData populates mdr with details scraped from all the .protos in this service
func GetSchemaData(mdr *svcfw.MDRegistry) {
	var (
		pInfo   *svcfw.PkgInfo
		fInfo   *svcfw.FileInfo
		cInfo   *svcfw.ConfInfo
		fldInfo *svcfw.FldInfo
		oInfo   *svcfw.ObjInfo
		aInfo   *svcfw.APIInfo
		rpcInfo *svcfw.RPCInfo
		keyInfo *svcfw.KeyInfo
		mInfo   *svcfw.MsgInfo
	)
	_ = pInfo
	_ = fInfo
	_ = cInfo
	_ = fldInfo
	_ = oInfo
	_ = aInfo
	_ = rpcInfo
	_ = keyInfo
	_ = mInfo

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/errors.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/errors.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/errors.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ErrorType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.ErrorType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/net.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/net.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/net.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "IpAddressType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.IpAddressType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "IpSubnetType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.IpSubnetType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "Ipv4AddressType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.Ipv4AddressType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "Ipv4SubnetType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.Ipv4SubnetType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "Ipv6AddressType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.Ipv6AddressType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "Ipv6SubnetType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.Ipv6SubnetType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "MacAddressType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.MacAddressType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "PrefixListType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.PrefixListType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/options.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/options.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/options.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "Dependencies",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.Dependencies"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "Key",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.Key"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "Keys",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.Keys"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "MetricDef",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.MetricDef"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "On",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.On"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "Via",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.Via"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/pvt_types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/pvt_types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/pvt_types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "DaemonEnvironmentType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.DaemonEnvironmentType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DaemonTLSParamsType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.DaemonTLSParamsType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DaemonTlsCertificateType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.DaemonTlsCertificateType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DaemonTlsParametersType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.DaemonTlsParametersType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "OperMetaType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.OperMetaType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ServiceParameters",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.ServiceParameters"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SyncServerParamsType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.SyncServerParamsType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "UseragentType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.UseragentType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "AppFirewallRefType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.AppFirewallRefType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AppRoleAuthInfoType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.AppRoleAuthInfoType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AuthnTypeBasicAuth",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.AuthnTypeBasicAuth"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AuthnTypeHeaders",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.AuthnTypeHeaders"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AuthnTypeQueryParams",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.AuthnTypeQueryParams"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "BlindfoldSecretInfoType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.BlindfoldSecretInfoType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "BufferConfigType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.BufferConfigType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ClearSecretInfoType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.ClearSecretInfoType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ConditionType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.ConditionType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CorsPolicy",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.CorsPolicy"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DomainType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.DomainType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DownstreamTlsParamsType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.DownstreamTlsParamsType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "Empty",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.Empty"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ForwardProxyConfigType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.ForwardProxyConfigType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "FractionalPercent",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.FractionalPercent"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "HeaderManipulationOptionType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.HeaderManipulationOptionType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "HeaderMatcherType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.HeaderMatcherType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "HostAccessInfoType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.HostAccessInfoType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "HostIdentifier",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.HostIdentifier"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "InitializerType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.InitializerType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "InitializersType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.InitializersType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "InterfaceIdentifier",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.InterfaceIdentifier"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "InterfaceOrNetwork",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.InterfaceOrNetwork"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "IpPrefixSetRefType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.IpPrefixSetRefType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "KubeRefType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.KubeRefType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "L4DestType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.L4DestType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "LabelMatcherType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.LabelMatcherType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "LabelSelectorType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.LabelSelectorType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListMetaType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.ListMetaType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "MessageMetaType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.MessageMetaType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "MetricValue",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.MetricValue"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "NetworkRefType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.NetworkRefType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "NetworkSiteRefSelector",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.NetworkSiteRefSelector"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "NextHopType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.NextHopType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateMetaType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.ObjectCreateMetaType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetMetaType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.ObjectGetMetaType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectMetaType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.ObjectMetaType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectRefType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.ObjectRefType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceMetaType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.ObjectReplaceMetaType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "PathMatcherType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.PathMatcherType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "PolicerRefType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.PolicerRefType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "PortValueType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.PortValueType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ProtocolPolicerRefType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.ProtocolPolicerRefType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "QueryParameterMatcherType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.QueryParameterMatcherType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "RestAuthInfoType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.RestAuthInfoType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "RetryBackOff",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.RetryBackOff"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "RetryPolicyType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.RetryPolicyType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "RouteMatch",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.RouteMatch"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "RouteTarget",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.RouteTarget"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "RouteTarget2ByteAsn",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.RouteTarget2ByteAsn"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "RouteTarget4ByteAsn",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.RouteTarget4ByteAsn"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "RouteTargetIPv4Addr",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.RouteTargetIPv4Addr"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SecretType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.SecretType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SiteRefType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.SiteRefType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SiteVirtualSiteRefSelector",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.SiteVirtualSiteRefSelector"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "StaticRouteType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.StaticRouteType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "StatusMetaType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.StatusMetaType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "StatusType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.StatusType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SystemObjectGetMetaType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.SystemObjectGetMetaType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SystemObjectMetaType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.SystemObjectMetaType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "TlsCertificateType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.TlsCertificateType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "TlsInterceptionPolicy",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.TlsInterceptionPolicy"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "TlsInterceptionRule",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.TlsInterceptionRule"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "TlsInterceptionType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.TlsInterceptionType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "TlsParamsType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.TlsParamsType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "TlsValidationParamsType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.TlsValidationParamsType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "UpstreamTlsParamsType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.UpstreamTlsParamsType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "VSiteRefType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.VSiteRefType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "VaultAccessInfoType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.VaultAccessInfoType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "VaultAuthInfoType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.VaultAuthInfoType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "VaultSecretInfoType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.VaultSecretInfoType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "VaultSecretType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.VaultSecretType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ViewRefType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.ViewRefType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "VirtualNetworkReferenceType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.VirtualNetworkReferenceType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "VirtualNetworkSelectorType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.VirtualNetworkSelectorType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "VolterraSecretType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.VolterraSecretType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "WafRefType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.WafRefType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "WafRulesRefType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.WafRulesRefType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "WafType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.WafType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "WingmanSecretInfoType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.WingmanSecretInfoType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/validate.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/validate.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/validate.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "AnyRules",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.AnyRules"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "BoolRules",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.BoolRules"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "BytesRules",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.BytesRules"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DoubleRules",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.DoubleRules"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DurationRules",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.DurationRules"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "EnumRules",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.EnumRules"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "FieldRules",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.FieldRules"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "Fixed32Rules",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.Fixed32Rules"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "Fixed64Rules",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.Fixed64Rules"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "FloatRules",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.FloatRules"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "Int32Rules",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.Int32Rules"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "Int64Rules",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.Int64Rules"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "MapRules",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.MapRules"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "MessageRules",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.MessageRules"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "RepeatedRules",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.RepeatedRules"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SFixed32Rules",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.SFixed32Rules"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SFixed64Rules",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.SFixed64Rules"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SInt32Rules",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.SInt32Rules"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SInt64Rules",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.SInt64Rules"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "StringRules",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.StringRules"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "TimestampRules",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.TimestampRules"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "UInt32Rules",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.UInt32Rules"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "UInt64Rules",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.UInt64Rules"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/view_options.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/view_options.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/view_options.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ChoiceItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.ChoiceItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ChoiceItemList",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.ChoiceItemList"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "Choices",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.Choices"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "FieldViewOptions",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.FieldViewOptions"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "HiddenConditions",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.HiddenConditions"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "LabelKeyClassList",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.LabelKeyClassList"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "MapOptions",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.MapOptions"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "RepeatedOptions",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.RepeatedOptions"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "Tile",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.Tile"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "Tiles",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.Tiles"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.address_allocator"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/address_allocator",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.address_allocator"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/address_allocator/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/address_allocator/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/address_allocator/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.address_allocator.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.address_allocator.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.address_allocator.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.address_allocator.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/address_allocator/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/address_allocator/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/address_allocator/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.address_allocator.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.address_allocator.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.address_allocator.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/address_allocators"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.address_allocator.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.address_allocator.DeleteRequest",
		InStreaming:  false,
		OutMsgType:   "google.protobuf.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/address_allocators/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.address_allocator.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.address_allocator.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.address_allocator.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/address_allocators/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.address_allocator.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.address_allocator.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.address_allocator.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/address_allocators"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.address_allocator.API.List"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.address_allocator.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.address_allocator.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.address_allocator.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.address_allocator.DeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.address_allocator.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.address_allocator.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.address_allocator.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.address_allocator.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.address_allocator.ListResponseItem"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/address_allocator/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/address_allocator/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/address_allocator/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "AllocationScheme",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.address_allocator.AllocationScheme"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.address_allocator.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.address_allocator.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.address_allocator.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "NodePrefixMapType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.address_allocator.NodePrefixMapType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "NodePrefixType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.address_allocator.NodePrefixType"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.address_allocator.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/address_allocator/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.address_allocator.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/address_allocator/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/address_allocator/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/address_allocator/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.address_allocator.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.address_allocator.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.address_allocator.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.address_allocator/Objects", "/ves.io.schema.address_allocator/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.address_allocator.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.address_allocator.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.address_allocator.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.address_allocator/Object/{object_uid}", "/ves.io.schema.address_allocator/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.address_allocator.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.address_allocator.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.address_allocator.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.address_allocator/Object/{object_uid}", "/ves.io.schema.address_allocator/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.address_allocator.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.address_allocator.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.address_allocator.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.address_allocator/Objects", "/ves.io.schema.address_allocator/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.address_allocator.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.address_allocator.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.address_allocator.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.address_allocator/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.address_allocator.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.address_allocator.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.address_allocator.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.address_allocator/Object/{object_uid}", "/ves.io.schema.address_allocator/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.address_allocator.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.address_allocator.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.address_allocator.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.address_allocator.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.address_allocator.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.address_allocator.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.address_allocator.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.address_allocator.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.address_allocator.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.address_allocator.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.address_allocator.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.address_allocator.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.address_allocator.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.advertise_policy"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/advertise_policy",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.advertise_policy"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/advertise_policy/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/advertise_policy/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/advertise_policy/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.advertise_policy.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.advertise_policy.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.advertise_policy.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.advertise_policy.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/advertise_policy/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/advertise_policy/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/advertise_policy/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.advertise_policy.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.advertise_policy.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.advertise_policy.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/advertise_policys"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.advertise_policy.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.advertise_policy.DeleteRequest",
		InStreaming:  false,
		OutMsgType:   "google.protobuf.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/advertise_policys/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.advertise_policy.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.advertise_policy.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.advertise_policy.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/advertise_policys/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.advertise_policy.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.advertise_policy.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.advertise_policy.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/advertise_policys"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.advertise_policy.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.advertise_policy.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.advertise_policy.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/advertise_policys/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.advertise_policy.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.advertise_policy.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.advertise_policy.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.advertise_policy.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.advertise_policy.DeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.advertise_policy.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.advertise_policy.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.advertise_policy.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.advertise_policy.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.advertise_policy.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.advertise_policy.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.advertise_policy.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/advertise_policy/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/advertise_policy/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/advertise_policy/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.advertise_policy.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.advertise_policy.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.advertise_policy.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.advertise_policy.ReplaceSpecType"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.advertise_policy.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/advertise_policy/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.advertise_policy.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/advertise_policy/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/advertise_policy/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/advertise_policy/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.advertise_policy.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.advertise_policy.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.advertise_policy.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.advertise_policy/Objects", "/ves.io.schema.advertise_policy/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.advertise_policy.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.advertise_policy.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.advertise_policy.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.advertise_policy/Object/{object_uid}", "/ves.io.schema.advertise_policy/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.advertise_policy.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.advertise_policy.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.advertise_policy.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.advertise_policy/Object/{object_uid}", "/ves.io.schema.advertise_policy/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.advertise_policy.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.advertise_policy.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.advertise_policy.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.advertise_policy/Objects", "/ves.io.schema.advertise_policy/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.advertise_policy.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.advertise_policy.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.advertise_policy.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.advertise_policy/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.advertise_policy.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.advertise_policy.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.advertise_policy.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.advertise_policy/Object/{object_uid}", "/ves.io.schema.advertise_policy/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.advertise_policy.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.advertise_policy.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.advertise_policy.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.advertise_policy.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.advertise_policy.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.advertise_policy.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.advertise_policy.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.advertise_policy.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.advertise_policy.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.advertise_policy.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.advertise_policy.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.advertise_policy.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.advertise_policy.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.alert_policy"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/alert_policy",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.alert_policy"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/alert_policy/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/alert_policy/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/alert_policy/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.alert_policy.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.alert_policy.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.alert_policy.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_policy.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/alert_policy/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/alert_policy/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/alert_policy/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.alert_policy.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.alert_policy.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.alert_policy.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/alert_policys"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.alert_policy.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.alert_policy.DeleteRequest",
		InStreaming:  false,
		OutMsgType:   "google.protobuf.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/alert_policys/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.alert_policy.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.alert_policy.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.alert_policy.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/alert_policys/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.alert_policy.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.alert_policy.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.alert_policy.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/alert_policys"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.alert_policy.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.alert_policy.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.alert_policy.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/alert_policys/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.alert_policy.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.alert_policy.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_policy.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_policy.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_policy.DeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_policy.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_policy.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_policy.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_policy.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_policy.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_policy.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_policy.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/alert_policy/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/alert_policy/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/alert_policy/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_policy.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CustomGroupBy",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_policy.CustomGroupBy"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CustomMatcher",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_policy.CustomMatcher"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_policy.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_policy.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GroupMatcher",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_policy.GroupMatcher"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "LabelMatcher",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_policy.LabelMatcher"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "NotificationParameters",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_policy.NotificationParameters"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_policy.ReplaceSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "Route",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_policy.Route"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SeverityMatcher",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_policy.SeverityMatcher"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.alert_policy.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/alert_policy/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.alert_policy.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/alert_policy/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/alert_policy/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/alert_policy/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.alert_policy.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.alert_policy.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.alert_policy.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.alert_policy/Objects", "/ves.io.schema.alert_policy/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.alert_policy.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.alert_policy.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.alert_policy.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.alert_policy/Object/{object_uid}", "/ves.io.schema.alert_policy/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.alert_policy.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.alert_policy.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.alert_policy.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.alert_policy/Object/{object_uid}", "/ves.io.schema.alert_policy/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.alert_policy.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.alert_policy.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.alert_policy.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.alert_policy/Objects", "/ves.io.schema.alert_policy/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.alert_policy.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.alert_policy.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.alert_policy.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.alert_policy/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.alert_policy.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.alert_policy.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.alert_policy.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.alert_policy/Object/{object_uid}", "/ves.io.schema.alert_policy/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.alert_policy.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.alert_policy.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_policy.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_policy.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_policy.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_policy.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_policy.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_policy.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_policy.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_policy.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_policy.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_policy.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_policy.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.alert_receiver"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/alert_receiver",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.alert_receiver"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/alert_receiver/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/alert_receiver/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/alert_receiver/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	oInfo.ReEncryptSecrets["ves.io.schema.alert_receiver.Object.spec.gc_spec.receiver.slack.url"] = uint64(1000002)
	oInfo.ReEncryptSecrets["ves.io.schema.alert_receiver.Object.spec.gc_spec.receiver.pagerduty.routing_key"] = uint64(1000003)
	oInfo.ReEncryptSecrets["ves.io.schema.alert_receiver.Object.spec.gc_spec.receiver.opsgenie.api_key"] = uint64(1000004)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.alert_receiver.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.alert_receiver.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.alert_receiver.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_receiver.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/alert_receiver/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/alert_receiver/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/alert_receiver/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.alert_receiver.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.alert_receiver.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.alert_receiver.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/alert_receivers"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.alert_receiver.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.alert_receiver.DeleteRequest",
		InStreaming:  false,
		OutMsgType:   "google.protobuf.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/alert_receivers/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.alert_receiver.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.alert_receiver.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.alert_receiver.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/alert_receivers/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.alert_receiver.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.alert_receiver.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.alert_receiver.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/alert_receivers"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.alert_receiver.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.alert_receiver.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.alert_receiver.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/alert_receivers/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.alert_receiver.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.alert_receiver.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_receiver.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_receiver.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_receiver.DeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_receiver.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_receiver.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_receiver.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_receiver.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_receiver.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_receiver.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_receiver.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/alert_receiver/public_customapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/alert_receiver/public_customapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/alert_receiver/public_customapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "CustomAPI",
		ServiceType: "CUSTOM_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.alert_receiver.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "ConfirmAlertReceiver",
		InMsgType:    "ves.io.schema.alert_receiver.ConfirmAlertReceiverRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.alert_receiver.ConfirmAlertReceiverResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/alert_receivers/{name}/confirm"}}
	aInfo.RPCsInfo[svcfw.RPCName("ConfirmAlertReceiver")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.alert_receiver.CustomAPI.ConfirmAlertReceiver"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "TestAlertReceiver",
		InMsgType:    "ves.io.schema.alert_receiver.TestAlertReceiverRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.alert_receiver.TestAlertReceiverResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/alert_receivers/{name}/test"}}
	aInfo.RPCsInfo[svcfw.RPCName("TestAlertReceiver")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.alert_receiver.CustomAPI.TestAlertReceiver"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "VerifyAlertReceiver",
		InMsgType:    "ves.io.schema.alert_receiver.VerifyAlertReceiverRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.alert_receiver.VerifyAlertReceiverResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/alert_receivers/{name}/verify"}}
	aInfo.RPCsInfo[svcfw.RPCName("VerifyAlertReceiver")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.alert_receiver.CustomAPI.VerifyAlertReceiver"] = rpcInfo
	}

	fInfo.APIsInfo["CustomAPI"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.alert_receiver.CustomAPI"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ConfirmAlertReceiverRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_receiver.ConfirmAlertReceiverRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ConfirmAlertReceiverResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_receiver.ConfirmAlertReceiverResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "TestAlertReceiverRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_receiver.TestAlertReceiverRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "TestAlertReceiverResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_receiver.TestAlertReceiverResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "VerifyAlertReceiverRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_receiver.VerifyAlertReceiverRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "VerifyAlertReceiverResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_receiver.VerifyAlertReceiverResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/alert_receiver/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/alert_receiver/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/alert_receiver/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_receiver.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "EmailConfig",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_receiver.EmailConfig"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_receiver.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_receiver.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "OpsGenieConfig",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_receiver.OpsGenieConfig"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "PagerDutyConfig",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_receiver.PagerDutyConfig"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_receiver.ReplaceSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SMSConfig",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_receiver.SMSConfig"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SlackConfig",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_receiver.SlackConfig"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.alert_receiver.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/alert_receiver/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.alert_receiver.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/alert_receiver/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/alert_receiver/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/alert_receiver/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.alert_receiver.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.alert_receiver.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.alert_receiver.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.alert_receiver/Objects", "/ves.io.schema.alert_receiver/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.alert_receiver.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.alert_receiver.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.alert_receiver.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.alert_receiver/Object/{object_uid}", "/ves.io.schema.alert_receiver/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.alert_receiver.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.alert_receiver.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.alert_receiver.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.alert_receiver/Object/{object_uid}", "/ves.io.schema.alert_receiver/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.alert_receiver.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.alert_receiver.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.alert_receiver.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.alert_receiver/Objects", "/ves.io.schema.alert_receiver/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.alert_receiver.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.alert_receiver.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.alert_receiver.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.alert_receiver/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.alert_receiver.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.alert_receiver.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.alert_receiver.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.alert_receiver/Object/{object_uid}", "/ves.io.schema.alert_receiver/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.alert_receiver.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.alert_receiver.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_receiver.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_receiver.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_receiver.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_receiver.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_receiver.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_receiver.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_receiver.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_receiver.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_receiver.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_receiver.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.alert_receiver.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.api_credential"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/api_credential",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.api_credential"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/api_credential/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/api_credential/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/api_credential/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.api_credential.Object"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(4),
	}
	oInfo.KeysInfo[svcfw.FldName("spec.gc_spec.digest")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.api_credential.Object.spec.gc_spec.digest"] = keyInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.api_credential.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.api_credential.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.api_credential.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/api_credential/private_customapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/api_credential/private_customapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/api_credential/private_customapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "CustomPrivateAPI",
		ServiceType: "CUSTOM_PRIVATE",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.api_credential.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "ValidateToken",
		InMsgType:    "ves.io.schema.api_credential.ValidateTokenRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.api_credential.ValidateTokenResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/private/custom/namespaces/{namespace}/validate/api_credentials", "/ves.io.schema/introspect/read/private/custom/namespaces/{namespace}/validate/api_credentials"}}
	aInfo.RPCsInfo[svcfw.RPCName("ValidateToken")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.api_credential.CustomPrivateAPI.ValidateToken"] = rpcInfo
	}

	fInfo.APIsInfo["CustomPrivateAPI"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.api_credential.CustomPrivateAPI"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ValidateTokenRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.api_credential.ValidateTokenRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ValidateTokenResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.api_credential.ValidateTokenResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/api_credential/public_customapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/api_credential/public_customapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/api_credential/public_customapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "CustomAPI",
		ServiceType: "CUSTOM_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.api_credential.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Activate",
		InMsgType:    "ves.io.schema.api_credential.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.api_credential.StatusResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/activate/api_credentials"}}
	aInfo.RPCsInfo[svcfw.RPCName("Activate")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.api_credential.CustomAPI.Activate"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ActivateServiceCredentials",
		InMsgType:    "ves.io.schema.api_credential.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.api_credential.StatusResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/activate/service_credentials"}}
	aInfo.RPCsInfo[svcfw.RPCName("ActivateServiceCredentials")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.api_credential.CustomAPI.ActivateServiceCredentials"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.api_credential.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.api_credential.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/api_credentials"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.api_credential.CustomAPI.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "CreateServiceCredentials",
		InMsgType:    "ves.io.schema.api_credential.CreateServiceCredentialsRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.api_credential.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/service_credentials"}}
	aInfo.RPCsInfo[svcfw.RPCName("CreateServiceCredentials")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.api_credential.CustomAPI.CreateServiceCredentials"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.api_credential.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.api_credential.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/api_credentials/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.api_credential.CustomAPI.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.api_credential.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.api_credential.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/api_credentials"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.api_credential.CustomAPI.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListServiceCredentials",
		InMsgType:    "ves.io.schema.api_credential.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.api_credential.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/service_credentials"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListServiceCredentials")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.api_credential.CustomAPI.ListServiceCredentials"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Renew",
		InMsgType:    "ves.io.schema.api_credential.RenewRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.api_credential.StatusResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/renew/api_credentials"}}
	aInfo.RPCsInfo[svcfw.RPCName("Renew")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.api_credential.CustomAPI.Renew"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "RenewServiceCredentials",
		InMsgType:    "ves.io.schema.api_credential.RenewRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.api_credential.StatusResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/renew/service_credentials"}}
	aInfo.RPCsInfo[svcfw.RPCName("RenewServiceCredentials")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.api_credential.CustomAPI.RenewServiceCredentials"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Revoke",
		InMsgType:    "ves.io.schema.api_credential.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.api_credential.StatusResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/revoke/api_credentials"}}
	aInfo.RPCsInfo[svcfw.RPCName("Revoke")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.api_credential.CustomAPI.Revoke"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "RevokeServiceCredentials",
		InMsgType:    "ves.io.schema.api_credential.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.api_credential.StatusResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/revoke/service_credentials"}}
	aInfo.RPCsInfo[svcfw.RPCName("RevokeServiceCredentials")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.api_credential.CustomAPI.RevokeServiceCredentials"] = rpcInfo
	}

	fInfo.APIsInfo["CustomAPI"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.api_credential.CustomAPI"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.api_credential.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.api_credential.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateServiceCredentialsRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.api_credential.CreateServiceCredentialsRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CustomCreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.api_credential.CustomCreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.api_credential.DeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.api_credential.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.api_credential.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.api_credential.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.api_credential.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.api_credential.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "RenewRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.api_credential.RenewRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "StatusResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.api_credential.StatusResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/api_credential/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/api_credential/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/api_credential/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.api_credential.GlobalSpecType"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.api_credential.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/api_credential/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.api_credential.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/api_credential/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/api_credential/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/api_credential/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.api_credential.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.api_credential.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.api_credential.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.api_credential/Objects", "/ves.io.schema.api_credential/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.api_credential.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.api_credential.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.api_credential.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.api_credential/Object/{object_uid}", "/ves.io.schema.api_credential/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.api_credential.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.api_credential.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.api_credential.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.api_credential/Object/{object_uid}", "/ves.io.schema.api_credential/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.api_credential.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.api_credential.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.api_credential.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.api_credential/Objects", "/ves.io.schema.api_credential/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.api_credential.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.api_credential.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.api_credential.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.api_credential/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.api_credential.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.api_credential.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.api_credential.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.api_credential/Object/{object_uid}", "/ves.io.schema.api_credential/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.api_credential.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.api_credential.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.api_credential.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.api_credential.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.api_credential.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.api_credential.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.api_credential.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.api_credential.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.api_credential.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.api_credential.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.api_credential.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.api_credential.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.api_credential.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.app_firewall"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/app_firewall",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.app_firewall"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/app_firewall/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/app_firewall/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/app_firewall/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.app_firewall.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.app_firewall.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.app_firewall.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_firewall.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/app_firewall/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/app_firewall/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/app_firewall/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.app_firewall.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.app_firewall.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.app_firewall.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/app_firewalls"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.app_firewall.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.app_firewall.DeleteRequest",
		InStreaming:  false,
		OutMsgType:   "google.protobuf.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/app_firewalls/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.app_firewall.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.app_firewall.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.app_firewall.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/app_firewalls/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.app_firewall.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.app_firewall.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.app_firewall.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/app_firewalls"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.app_firewall.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.app_firewall.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.app_firewall.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/app_firewalls/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.app_firewall.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.app_firewall.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_firewall.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_firewall.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_firewall.DeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_firewall.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_firewall.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_firewall.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_firewall.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_firewall.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_firewall.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_firewall.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/app_firewall/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/app_firewall/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/app_firewall/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "BotProtectionSetting",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_firewall.BotProtectionSetting"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_firewall.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DetectionSetting",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_firewall.DetectionSetting"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "EnabledAttackTypes",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_firewall.EnabledAttackTypes"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_firewall.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_firewall.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_firewall.ReplaceSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SignatureSelectionSetting",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_firewall.SignatureSelectionSetting"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ViolationSetting",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_firewall.ViolationSetting"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.app_firewall.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/app_firewall/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.app_firewall.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/app_firewall/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/app_firewall/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/app_firewall/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.app_firewall.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.app_firewall.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.app_firewall.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.app_firewall/Objects", "/ves.io.schema.app_firewall/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.app_firewall.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.app_firewall.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.app_firewall.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.app_firewall/Object/{object_uid}", "/ves.io.schema.app_firewall/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.app_firewall.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.app_firewall.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.app_firewall.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.app_firewall/Object/{object_uid}", "/ves.io.schema.app_firewall/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.app_firewall.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.app_firewall.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.app_firewall.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.app_firewall/Objects", "/ves.io.schema.app_firewall/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.app_firewall.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.app_firewall.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.app_firewall.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.app_firewall/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.app_firewall.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.app_firewall.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.app_firewall.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.app_firewall/Object/{object_uid}", "/ves.io.schema.app_firewall/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.app_firewall.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.app_firewall.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_firewall.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_firewall.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_firewall.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_firewall.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_firewall.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_firewall.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_firewall.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_firewall.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_firewall.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_firewall.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_firewall.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.app_setting"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/app_setting",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.app_setting"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/app_setting/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/app_setting/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/app_setting/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.app_setting.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.app_setting.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.app_setting.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_setting.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/app_setting/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/app_setting/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/app_setting/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.app_setting.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.app_setting.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.app_setting.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/app_settings"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.app_setting.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.app_setting.DeleteRequest",
		InStreaming:  false,
		OutMsgType:   "google.protobuf.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/app_settings/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.app_setting.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.app_setting.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.app_setting.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/app_settings/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.app_setting.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.app_setting.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.app_setting.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/app_settings"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.app_setting.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.app_setting.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.app_setting.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/app_settings/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.app_setting.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.app_setting.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_setting.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_setting.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_setting.DeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_setting.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_setting.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_setting.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_setting.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_setting.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_setting.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_setting.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/app_setting/public_customapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/app_setting/public_customapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/app_setting/public_customapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "CustomAPI",
		ServiceType: "CUSTOM_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.app_setting.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "SuspiciousUserStatus",
		InMsgType:    "ves.io.schema.app_setting.SuspiciousUserStatusReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.app_setting.SuspiciousUserStatusRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/app_settings/{name}/suspicious_users"}}
	aInfo.RPCsInfo[svcfw.RPCName("SuspiciousUserStatus")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.app_setting.CustomAPI.SuspiciousUserStatus"] = rpcInfo
	}

	fInfo.APIsInfo["CustomAPI"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.app_setting.CustomAPI"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SuspiciousUser",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_setting.SuspiciousUser"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SuspiciousUserStatusReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_setting.SuspiciousUserStatusReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SuspiciousUserStatusRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_setting.SuspiciousUserStatusRsp"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/app_setting/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/app_setting/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/app_setting/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "AppTypeSettings",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_setting.AppTypeSettings"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "BusinessLogicMarkupSetting",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_setting.BusinessLogicMarkupSetting"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_setting.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "FailedLoginActivitySetting",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_setting.FailedLoginActivitySetting"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ForbiddenActivitySetting",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_setting.ForbiddenActivitySetting"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_setting.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_setting.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "MaliciousUserDetectionSetting",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_setting.MaliciousUserDetectionSetting"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "MetricSelector",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_setting.MetricSelector"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_setting.ReplaceSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "TimeseriesAnalysesSetting",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_setting.TimeseriesAnalysesSetting"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "UserBehaviorAnalysisSetting",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_setting.UserBehaviorAnalysisSetting"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.app_setting.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/app_setting/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.app_setting.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/app_setting/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/app_setting/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/app_setting/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.app_setting.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.app_setting.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.app_setting.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.app_setting/Objects", "/ves.io.schema.app_setting/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.app_setting.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.app_setting.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.app_setting.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.app_setting/Object/{object_uid}", "/ves.io.schema.app_setting/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.app_setting.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.app_setting.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.app_setting.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.app_setting/Object/{object_uid}", "/ves.io.schema.app_setting/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.app_setting.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.app_setting.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.app_setting.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.app_setting/Objects", "/ves.io.schema.app_setting/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.app_setting.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.app_setting.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.app_setting.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.app_setting/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.app_setting.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.app_setting.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.app_setting.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.app_setting/Object/{object_uid}", "/ves.io.schema.app_setting/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.app_setting.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.app_setting.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_setting.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_setting.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_setting.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_setting.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_setting.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_setting.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_setting.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_setting.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_setting.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_setting.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_setting.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.app_type"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/app_type",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.app_type"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/app_type/custom_api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/app_type/custom_api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/app_type/custom_api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "CustomAPI",
		ServiceType: "CUSTOM_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.app_type.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "APIEndpointPDF",
		InMsgType:    "ves.io.schema.app_type.APIEndpointPDFReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.app_type.APIEndpointPDFRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/app_types/{app_type_name}/api_endpoint/pdf"}}
	aInfo.RPCsInfo[svcfw.RPCName("APIEndpointPDF")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.app_type.CustomAPI.APIEndpointPDF"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "APIEndpoints",
		InMsgType:    "ves.io.schema.app_type.APIEndpointsReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.app_type.APIEndpointsRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/app_types/{app_type_name}/api_endpoints"}}
	aInfo.RPCsInfo[svcfw.RPCName("APIEndpoints")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.app_type.CustomAPI.APIEndpoints"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "GetAPIEndpointLearntSchema",
		InMsgType:    "ves.io.schema.app_type.APIEndpointLearntSchemaReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.app_type.APIEndpointLearntSchemaRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/app_types/{app_type_name}/api_endpoint/learnt_schema"}}
	aInfo.RPCsInfo[svcfw.RPCName("GetAPIEndpointLearntSchema")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.app_type.CustomAPI.GetAPIEndpointLearntSchema"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "GetServiceAPIEndpointPDF",
		InMsgType:    "ves.io.schema.app_type.ServiceAPIEndpointPDFReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.app_type.APIEndpointPDFRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/app_types/{app_type_name}/services/{service_name}/api_endpoint/pdf"}}
	aInfo.RPCsInfo[svcfw.RPCName("GetServiceAPIEndpointPDF")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.app_type.CustomAPI.GetServiceAPIEndpointPDF"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "GetServiceAPIEndpoints",
		InMsgType:    "ves.io.schema.app_type.ServiceAPIEndpointsReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.app_type.APIEndpointsRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/app_types/{app_type_name}/services/{service_name}/api_endpoints"}}
	aInfo.RPCsInfo[svcfw.RPCName("GetServiceAPIEndpoints")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.app_type.CustomAPI.GetServiceAPIEndpoints"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "GetSwaggerSpec",
		InMsgType:    "ves.io.schema.app_type.SwaggerSpecReq",
		InStreaming:  false,
		OutMsgType:   "google.api.HttpBody",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/app_types/{app_type_name}/api_endpoints/swagger_spec"}}
	aInfo.RPCsInfo[svcfw.RPCName("GetSwaggerSpec")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.app_type.CustomAPI.GetSwaggerSpec"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "OverridePop",
		InMsgType:    "ves.io.schema.app_type.OverridePopReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.app_type.OverridePopRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/app_types/{app_type_name}/override/pop"}}
	aInfo.RPCsInfo[svcfw.RPCName("OverridePop")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.app_type.CustomAPI.OverridePop"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "OverridePush",
		InMsgType:    "ves.io.schema.app_type.OverridePushReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.app_type.OverridePushRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/app_types/{app_type_name}/override/push"}}
	aInfo.RPCsInfo[svcfw.RPCName("OverridePush")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.app_type.CustomAPI.OverridePush"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Overrides",
		InMsgType:    "ves.io.schema.app_type.OverridesReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.app_type.OverridesRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/app_types/{app_type_name}/overrides"}}
	aInfo.RPCsInfo[svcfw.RPCName("Overrides")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.app_type.CustomAPI.Overrides"] = rpcInfo
	}

	fInfo.APIsInfo["CustomAPI"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.app_type.CustomAPI"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "APIEndpointLearntSchemaReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_type.APIEndpointLearntSchemaReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "APIEndpointLearntSchemaRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_type.APIEndpointLearntSchemaRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "APIEndpointPDFReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_type.APIEndpointPDFReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "APIEndpointPDFRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_type.APIEndpointPDFRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "APIEndpointsReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_type.APIEndpointsReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "APIEndpointsRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_type.APIEndpointsRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "OverridePopReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_type.OverridePopReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "OverridePopRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_type.OverridePopRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "OverridePushReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_type.OverridePushReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "OverridePushRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_type.OverridePushRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "OverridesReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_type.OverridesReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "OverridesRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_type.OverridesRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ServiceAPIEndpointPDFReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_type.ServiceAPIEndpointPDFReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ServiceAPIEndpointsReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_type.ServiceAPIEndpointsReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SwaggerSpecReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_type.SwaggerSpecReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SwaggerSpecRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_type.SwaggerSpecRsp"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/app_type/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/app_type/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/app_type/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.app_type.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.app_type.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.app_type.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_type.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/app_type/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/app_type/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/app_type/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.app_type.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.app_type.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.app_type.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/app_types"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.app_type.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.app_type.DeleteRequest",
		InStreaming:  false,
		OutMsgType:   "google.protobuf.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/app_types/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.app_type.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.app_type.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.app_type.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/app_types/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.app_type.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.app_type.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.app_type.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/app_types"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.app_type.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.app_type.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.app_type.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/app_types/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.app_type.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.app_type.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_type.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_type.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_type.DeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_type.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_type.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_type.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_type.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_type.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_type.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_type.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/app_type/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/app_type/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/app_type/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "APIEPDynExample",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_type.APIEPDynExample"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "APIEPInfo",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_type.APIEPInfo"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "APIEPPDFInfo",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_type.APIEPPDFInfo"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "BusinessLogicMarkupSetting",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_type.BusinessLogicMarkupSetting"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_type.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "Feature",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_type.Feature"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_type.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_type.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "OverrideInfo",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_type.OverrideInfo"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "PDFSpec",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_type.PDFSpec"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "PDFStat",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_type.PDFStat"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_type.ReplaceSpecType"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.app_type.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/app_type/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.app_type.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/app_type/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/app_type/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/app_type/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.app_type.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.app_type.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.app_type.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.app_type/Objects", "/ves.io.schema.app_type/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.app_type.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.app_type.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.app_type.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.app_type/Object/{object_uid}", "/ves.io.schema.app_type/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.app_type.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.app_type.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.app_type.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.app_type/Object/{object_uid}", "/ves.io.schema.app_type/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.app_type.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.app_type.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.app_type.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.app_type/Objects", "/ves.io.schema.app_type/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.app_type.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.app_type.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.app_type.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.app_type/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.app_type.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.app_type.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.app_type.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.app_type/Object/{object_uid}", "/ves.io.schema.app_type/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.app_type.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.app_type.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_type.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_type.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_type.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_type.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_type.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_type.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_type.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_type.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_type.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_type.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.app_type.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.authentication"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/authentication",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.authentication"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/authentication/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/authentication/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/authentication/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.authentication.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.authentication.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.authentication.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.authentication.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/authentication/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/authentication/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/authentication/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.authentication.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.authentication.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.authentication.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/authentications"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.authentication.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.authentication.DeleteRequest",
		InStreaming:  false,
		OutMsgType:   "google.protobuf.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/authentications/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.authentication.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.authentication.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.authentication.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/authentications/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.authentication.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.authentication.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.authentication.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/authentications"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.authentication.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.authentication.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.authentication.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/authentications/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.authentication.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.authentication.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.authentication.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.authentication.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.authentication.DeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.authentication.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.authentication.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.authentication.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.authentication.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.authentication.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.authentication.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.authentication.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/authentication/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/authentication/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/authentication/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CookieParams",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.authentication.CookieParams"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.authentication.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.authentication.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.authentication.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "HMACKeyPair",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.authentication.HMACKeyPair"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "KMSKeyRefType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.authentication.KMSKeyRefType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "OIDCAuthParams",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.authentication.OIDCAuthParams"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "OIDCAuthType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.authentication.OIDCAuthType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.authentication.ReplaceSpecType"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.authentication.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/authentication/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.authentication.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/authentication/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/authentication/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/authentication/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.authentication.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.authentication.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.authentication.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.authentication/Objects", "/ves.io.schema.authentication/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.authentication.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.authentication.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.authentication.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.authentication/Object/{object_uid}", "/ves.io.schema.authentication/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.authentication.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.authentication.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.authentication.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.authentication/Object/{object_uid}", "/ves.io.schema.authentication/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.authentication.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.authentication.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.authentication.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.authentication/Objects", "/ves.io.schema.authentication/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.authentication.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.authentication.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.authentication.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.authentication/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.authentication.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.authentication.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.authentication.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.authentication/Object/{object_uid}", "/ves.io.schema.authentication/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.authentication.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.authentication.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.authentication.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.authentication.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.authentication.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.authentication.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.authentication.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.authentication.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.authentication.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.authentication.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.authentication.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.authentication.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.authentication.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.bgp"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/bgp",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.bgp"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/bgp/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/bgp/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/bgp/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.bgp.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.bgp.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.bgp.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.bgp.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/bgp/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/bgp/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/bgp/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.bgp.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.bgp.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.bgp.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/bgps"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.bgp.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.bgp.DeleteRequest",
		InStreaming:  false,
		OutMsgType:   "google.protobuf.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/bgps/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.bgp.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.bgp.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.bgp.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/bgps/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.bgp.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.bgp.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.bgp.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/bgps"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.bgp.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.bgp.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.bgp.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/bgps/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.bgp.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.bgp.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.bgp.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.bgp.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.bgp.DeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.bgp.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.bgp.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.bgp.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.bgp.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.bgp.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.bgp.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.bgp.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/bgp/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/bgp/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/bgp/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "BgpParameters",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.bgp.BgpParameters"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "BgpPeer",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.bgp.BgpPeer"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "BgpPeerStatusType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.bgp.BgpPeerStatusType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "BgpStatusType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.bgp.BgpStatusType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.bgp.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "FamilyInet",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.bgp.FamilyInet"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "FamilyInet6vpn",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.bgp.FamilyInet6vpn"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "FamilyInetvpn",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.bgp.FamilyInetvpn"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "FamilyInetvpnParameters",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.bgp.FamilyInetvpnParameters"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "FamilyRtarget",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.bgp.FamilyRtarget"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.bgp.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.bgp.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "InterfaceList",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.bgp.InterfaceList"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "Peer",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.bgp.Peer"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "PeerExternal",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.bgp.PeerExternal"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "PeerFamilyParameters",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.bgp.PeerFamilyParameters"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "PeerInternal",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.bgp.PeerInternal"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.bgp.ReplaceSpecType"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.bgp.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/bgp/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.bgp.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/bgp/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/bgp/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/bgp/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.bgp.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.bgp.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.bgp.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.bgp/Objects", "/ves.io.schema.bgp/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.bgp.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.bgp.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.bgp.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.bgp/Object/{object_uid}", "/ves.io.schema.bgp/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.bgp.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.bgp.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.bgp.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.bgp/Object/{object_uid}", "/ves.io.schema.bgp/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.bgp.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.bgp.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.bgp.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.bgp/Objects", "/ves.io.schema.bgp/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.bgp.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.bgp.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.bgp.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.bgp/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.bgp.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.bgp.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.bgp.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.bgp/Object/{object_uid}", "/ves.io.schema.bgp/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.bgp.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.bgp.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.bgp.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.bgp.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.bgp.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.bgp.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.bgp.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.bgp.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.bgp.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.bgp.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.bgp.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.bgp.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.bgp.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.bgp_asn_set"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/bgp_asn_set",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.bgp_asn_set"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/bgp_asn_set/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/bgp_asn_set/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/bgp_asn_set/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.bgp_asn_set.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.bgp_asn_set.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.bgp_asn_set.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.bgp_asn_set.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/bgp_asn_set/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/bgp_asn_set/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/bgp_asn_set/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.bgp_asn_set.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.bgp_asn_set.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.bgp_asn_set.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/bgp_asn_sets"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.bgp_asn_set.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.bgp_asn_set.DeleteRequest",
		InStreaming:  false,
		OutMsgType:   "google.protobuf.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/bgp_asn_sets/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.bgp_asn_set.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.bgp_asn_set.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.bgp_asn_set.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/bgp_asn_sets/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.bgp_asn_set.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.bgp_asn_set.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.bgp_asn_set.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/bgp_asn_sets"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.bgp_asn_set.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.bgp_asn_set.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.bgp_asn_set.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/bgp_asn_sets/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.bgp_asn_set.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.bgp_asn_set.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.bgp_asn_set.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.bgp_asn_set.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.bgp_asn_set.DeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.bgp_asn_set.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.bgp_asn_set.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.bgp_asn_set.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.bgp_asn_set.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.bgp_asn_set.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.bgp_asn_set.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.bgp_asn_set.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/bgp_asn_set/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/bgp_asn_set/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/bgp_asn_set/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.bgp_asn_set.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.bgp_asn_set.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.bgp_asn_set.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.bgp_asn_set.ReplaceSpecType"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.bgp_asn_set.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/bgp_asn_set/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.bgp_asn_set.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/bgp_asn_set/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/bgp_asn_set/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/bgp_asn_set/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.bgp_asn_set.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.bgp_asn_set.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.bgp_asn_set.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.bgp_asn_set/Objects", "/ves.io.schema.bgp_asn_set/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.bgp_asn_set.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.bgp_asn_set.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.bgp_asn_set.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.bgp_asn_set/Object/{object_uid}", "/ves.io.schema.bgp_asn_set/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.bgp_asn_set.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.bgp_asn_set.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.bgp_asn_set.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.bgp_asn_set/Object/{object_uid}", "/ves.io.schema.bgp_asn_set/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.bgp_asn_set.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.bgp_asn_set.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.bgp_asn_set.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.bgp_asn_set/Objects", "/ves.io.schema.bgp_asn_set/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.bgp_asn_set.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.bgp_asn_set.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.bgp_asn_set.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.bgp_asn_set/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.bgp_asn_set.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.bgp_asn_set.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.bgp_asn_set.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.bgp_asn_set/Object/{object_uid}", "/ves.io.schema.bgp_asn_set/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.bgp_asn_set.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.bgp_asn_set.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.bgp_asn_set.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.bgp_asn_set.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.bgp_asn_set.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.bgp_asn_set.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.bgp_asn_set.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.bgp_asn_set.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.bgp_asn_set.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.bgp_asn_set.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.bgp_asn_set.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.bgp_asn_set.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.bgp_asn_set.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.certified_hardware"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/certified_hardware",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.certified_hardware"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/certified_hardware/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/certified_hardware/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/certified_hardware/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.certified_hardware.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.certified_hardware.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.certified_hardware.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.certified_hardware.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/certified_hardware/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/certified_hardware/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/certified_hardware/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.certified_hardware.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.certified_hardware.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.certified_hardware.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/certified_hardwares/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.certified_hardware.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.certified_hardware.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.certified_hardware.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/certified_hardwares"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.certified_hardware.API.List"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.certified_hardware.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.certified_hardware.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.certified_hardware.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.certified_hardware.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.certified_hardware.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.certified_hardware.ListResponseItem"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/certified_hardware/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/certified_hardware/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/certified_hardware/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "Aws",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.certified_hardware.Aws"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AwsImage",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.certified_hardware.AwsImage"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "Azure",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.certified_hardware.Azure"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AzureImage",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.certified_hardware.AzureImage"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CertifiedHardwareStatus",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.certified_hardware.CertifiedHardwareStatus"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeviceType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.certified_hardware.DeviceType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "Gcp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.certified_hardware.Gcp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GcpImage",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.certified_hardware.GcpImage"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.certified_hardware.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.certified_hardware.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "HardwareVendorModel",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.certified_hardware.HardwareVendorModel"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ImageType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.certified_hardware.ImageType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "Marketplace",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.certified_hardware.Marketplace"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "NumaMem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.certified_hardware.NumaMem"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.certified_hardware.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/certified_hardware/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.certified_hardware.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/certified_hardware/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/certified_hardware/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/certified_hardware/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.certified_hardware.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.certified_hardware.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.certified_hardware.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.certified_hardware/Objects", "/ves.io.schema.certified_hardware/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.certified_hardware.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.certified_hardware.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.certified_hardware.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.certified_hardware/Object/{object_uid}", "/ves.io.schema.certified_hardware/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.certified_hardware.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.certified_hardware.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.certified_hardware.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.certified_hardware/Object/{object_uid}", "/ves.io.schema.certified_hardware/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.certified_hardware.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.certified_hardware.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.certified_hardware.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.certified_hardware/Objects", "/ves.io.schema.certified_hardware/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.certified_hardware.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.certified_hardware.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.certified_hardware.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.certified_hardware/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.certified_hardware.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.certified_hardware.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.certified_hardware.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.certified_hardware/Object/{object_uid}", "/ves.io.schema.certified_hardware/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.certified_hardware.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.certified_hardware.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.certified_hardware.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.certified_hardware.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.certified_hardware.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.certified_hardware.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.certified_hardware.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.certified_hardware.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.certified_hardware.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.certified_hardware.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.certified_hardware.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.certified_hardware.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.certified_hardware.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.cloud_credentials"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/cloud_credentials",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.cloud_credentials"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/cloud_credentials/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/cloud_credentials/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/cloud_credentials/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	oInfo.ReEncryptSecrets["ves.io.schema.cloud_credentials.Object.spec.gc_spec.cloud.aws_secret_key.secret_key"] = uint64(1000005)
	oInfo.ReEncryptSecrets["ves.io.schema.cloud_credentials.Object.spec.gc_spec.cloud.azure_pfx_certificate.password"] = uint64(1000005)
	oInfo.ReEncryptSecrets["ves.io.schema.cloud_credentials.Object.spec.gc_spec.cloud.azure_client_secret.client_secret"] = uint64(1000005)
	oInfo.ReEncryptSecrets["ves.io.schema.cloud_credentials.Object.spec.gc_spec.cloud.gcp_cred_file.credential_file"] = uint64(1000005)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.cloud_credentials.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.cloud_credentials.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.cloud_credentials.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.cloud_credentials.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/cloud_credentials/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/cloud_credentials/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/cloud_credentials/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.cloud_credentials.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.cloud_credentials.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.cloud_credentials.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/cloud_credentialss"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.cloud_credentials.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.cloud_credentials.DeleteRequest",
		InStreaming:  false,
		OutMsgType:   "google.protobuf.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/cloud_credentialss/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.cloud_credentials.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.cloud_credentials.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.cloud_credentials.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/cloud_credentialss/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.cloud_credentials.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.cloud_credentials.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.cloud_credentials.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/cloud_credentialss"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.cloud_credentials.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.cloud_credentials.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.cloud_credentials.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/cloud_credentialss/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.cloud_credentials.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.cloud_credentials.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.cloud_credentials.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.cloud_credentials.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.cloud_credentials.DeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.cloud_credentials.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.cloud_credentials.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.cloud_credentials.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.cloud_credentials.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.cloud_credentials.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.cloud_credentials.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.cloud_credentials.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/cloud_credentials/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/cloud_credentials/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/cloud_credentials/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "AWSSecretType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.cloud_credentials.AWSSecretType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AzurePfxType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.cloud_credentials.AzurePfxType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AzureSecretType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.cloud_credentials.AzureSecretType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.cloud_credentials.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GCPCredFileType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.cloud_credentials.GCPCredFileType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.cloud_credentials.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.cloud_credentials.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.cloud_credentials.ReplaceSpecType"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.cloud_credentials.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/cloud_credentials/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.cloud_credentials.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/cloud_credentials/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/cloud_credentials/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/cloud_credentials/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.cloud_credentials.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.cloud_credentials.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.cloud_credentials.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.cloud_credentials/Objects", "/ves.io.schema.cloud_credentials/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.cloud_credentials.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.cloud_credentials.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.cloud_credentials.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.cloud_credentials/Object/{object_uid}", "/ves.io.schema.cloud_credentials/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.cloud_credentials.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.cloud_credentials.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.cloud_credentials.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.cloud_credentials/Object/{object_uid}", "/ves.io.schema.cloud_credentials/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.cloud_credentials.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.cloud_credentials.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.cloud_credentials.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.cloud_credentials/Objects", "/ves.io.schema.cloud_credentials/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.cloud_credentials.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.cloud_credentials.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.cloud_credentials.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.cloud_credentials/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.cloud_credentials.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.cloud_credentials.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.cloud_credentials.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.cloud_credentials/Object/{object_uid}", "/ves.io.schema.cloud_credentials/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.cloud_credentials.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.cloud_credentials.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.cloud_credentials.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.cloud_credentials.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.cloud_credentials.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.cloud_credentials.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.cloud_credentials.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.cloud_credentials.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.cloud_credentials.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.cloud_credentials.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.cloud_credentials.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.cloud_credentials.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.cloud_credentials.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.cluster"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/cluster",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.cluster"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/cluster/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/cluster/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/cluster/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.cluster.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.cluster.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.cluster.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.cluster.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/cluster/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/cluster/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/cluster/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.cluster.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.cluster.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.cluster.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/clusters"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.cluster.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.cluster.DeleteRequest",
		InStreaming:  false,
		OutMsgType:   "google.protobuf.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/clusters/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.cluster.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.cluster.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.cluster.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/clusters/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.cluster.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.cluster.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.cluster.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/clusters"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.cluster.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.cluster.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.cluster.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/clusters/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.cluster.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.cluster.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.cluster.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.cluster.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.cluster.DeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.cluster.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.cluster.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.cluster.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.cluster.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.cluster.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.cluster.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.cluster.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/cluster/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/cluster/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/cluster/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CircuitBreaker",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.cluster.CircuitBreaker"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.cluster.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "EndpointSubsetSelectorType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.cluster.EndpointSubsetSelectorType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.cluster.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.cluster.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "Http2ProtocolOptions",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.cluster.Http2ProtocolOptions"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "OutlierDetectionType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.cluster.OutlierDetectionType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.cluster.ReplaceSpecType"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.cluster.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/cluster/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.cluster.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/cluster/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/cluster/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/cluster/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.cluster.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.cluster.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.cluster.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.cluster/Objects", "/ves.io.schema.cluster/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.cluster.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.cluster.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.cluster.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.cluster/Object/{object_uid}", "/ves.io.schema.cluster/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.cluster.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.cluster.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.cluster.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.cluster/Object/{object_uid}", "/ves.io.schema.cluster/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.cluster.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.cluster.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.cluster.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.cluster/Objects", "/ves.io.schema.cluster/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.cluster.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.cluster.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.cluster.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.cluster/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.cluster.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.cluster.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.cluster.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.cluster/Object/{object_uid}", "/ves.io.schema.cluster/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.cluster.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.cluster.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.cluster.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.cluster.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.cluster.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.cluster.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.cluster.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.cluster.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.cluster.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.cluster.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.cluster.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.cluster.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.cluster.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.container_registry"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/container_registry",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.container_registry"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/container_registry/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/container_registry/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/container_registry/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	oInfo.ReEncryptSecrets["ves.io.schema.container_registry.Object.spec.gc_spec.password"] = uint64(1000001)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.container_registry.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.container_registry.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.container_registry.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.container_registry.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/container_registry/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/container_registry/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/container_registry/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.container_registry.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.container_registry.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.container_registry.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/container_registrys"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.container_registry.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.container_registry.DeleteRequest",
		InStreaming:  false,
		OutMsgType:   "google.protobuf.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/container_registrys/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.container_registry.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.container_registry.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.container_registry.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/container_registrys/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.container_registry.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.container_registry.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.container_registry.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/container_registrys"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.container_registry.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.container_registry.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.container_registry.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/container_registrys/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.container_registry.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.container_registry.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.container_registry.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.container_registry.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.container_registry.DeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.container_registry.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.container_registry.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.container_registry.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.container_registry.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.container_registry.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.container_registry.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.container_registry.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/container_registry/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/container_registry/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/container_registry/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.container_registry.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.container_registry.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.container_registry.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.container_registry.ReplaceSpecType"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.container_registry.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/container_registry/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.container_registry.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/container_registry/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/container_registry/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/container_registry/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.container_registry.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.container_registry.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.container_registry.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.container_registry/Objects", "/ves.io.schema.container_registry/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.container_registry.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.container_registry.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.container_registry.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.container_registry/Object/{object_uid}", "/ves.io.schema.container_registry/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.container_registry.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.container_registry.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.container_registry.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.container_registry/Object/{object_uid}", "/ves.io.schema.container_registry/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.container_registry.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.container_registry.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.container_registry.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.container_registry/Objects", "/ves.io.schema.container_registry/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.container_registry.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.container_registry.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.container_registry.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.container_registry/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.container_registry.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.container_registry.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.container_registry.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.container_registry/Object/{object_uid}", "/ves.io.schema.container_registry/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.container_registry.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.container_registry.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.container_registry.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.container_registry.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.container_registry.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.container_registry.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.container_registry.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.container_registry.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.container_registry.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.container_registry.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.container_registry.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.container_registry.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.container_registry.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.dc_cluster_group"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/dc_cluster_group",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.dc_cluster_group"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/dc_cluster_group/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/dc_cluster_group/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/dc_cluster_group/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.dc_cluster_group.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.dc_cluster_group.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.dc_cluster_group.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.dc_cluster_group.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/dc_cluster_group/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/dc_cluster_group/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/dc_cluster_group/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.dc_cluster_group.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.dc_cluster_group.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.dc_cluster_group.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/dc_cluster_groups"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.dc_cluster_group.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.dc_cluster_group.DeleteRequest",
		InStreaming:  false,
		OutMsgType:   "google.protobuf.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/dc_cluster_groups/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.dc_cluster_group.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.dc_cluster_group.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.dc_cluster_group.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/dc_cluster_groups/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.dc_cluster_group.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.dc_cluster_group.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.dc_cluster_group.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/dc_cluster_groups"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.dc_cluster_group.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.dc_cluster_group.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.dc_cluster_group.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/dc_cluster_groups/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.dc_cluster_group.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.dc_cluster_group.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.dc_cluster_group.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.dc_cluster_group.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.dc_cluster_group.DeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.dc_cluster_group.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.dc_cluster_group.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.dc_cluster_group.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.dc_cluster_group.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.dc_cluster_group.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.dc_cluster_group.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.dc_cluster_group.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/dc_cluster_group/public_custom_data_api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/dc_cluster_group/public_custom_data_api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/dc_cluster_group/public_custom_data_api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "CustomDataAPI",
		ServiceType: "CUSTOM_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.dc_cluster_group.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Metrics",
		InMsgType:    "ves.io.schema.dc_cluster_group.MetricsRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.dc_cluster_group.MetricsResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/dc_cluster_groups/metrics"}}
	aInfo.RPCsInfo[svcfw.RPCName("Metrics")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.dc_cluster_group.CustomDataAPI.Metrics"] = rpcInfo
	}

	fInfo.APIsInfo["CustomDataAPI"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.dc_cluster_group.CustomDataAPI"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "MetricData",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.dc_cluster_group.MetricData"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "MetricTypeData",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.dc_cluster_group.MetricTypeData"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "MetricsRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.dc_cluster_group.MetricsRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "MetricsResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.dc_cluster_group.MetricsResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/dc_cluster_group/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/dc_cluster_group/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/dc_cluster_group/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.dc_cluster_group.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.dc_cluster_group.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.dc_cluster_group.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.dc_cluster_group.ReplaceSpecType"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.dc_cluster_group.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/dc_cluster_group/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.dc_cluster_group.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/dc_cluster_group/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/dc_cluster_group/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/dc_cluster_group/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.dc_cluster_group.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.dc_cluster_group.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.dc_cluster_group.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.dc_cluster_group/Objects", "/ves.io.schema.dc_cluster_group/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.dc_cluster_group.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.dc_cluster_group.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.dc_cluster_group.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.dc_cluster_group/Object/{object_uid}", "/ves.io.schema.dc_cluster_group/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.dc_cluster_group.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.dc_cluster_group.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.dc_cluster_group.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.dc_cluster_group/Object/{object_uid}", "/ves.io.schema.dc_cluster_group/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.dc_cluster_group.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.dc_cluster_group.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.dc_cluster_group.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.dc_cluster_group/Objects", "/ves.io.schema.dc_cluster_group/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.dc_cluster_group.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.dc_cluster_group.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.dc_cluster_group.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.dc_cluster_group/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.dc_cluster_group.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.dc_cluster_group.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.dc_cluster_group.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.dc_cluster_group/Object/{object_uid}", "/ves.io.schema.dc_cluster_group/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.dc_cluster_group.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.dc_cluster_group.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.dc_cluster_group.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.dc_cluster_group.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.dc_cluster_group.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.dc_cluster_group.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.dc_cluster_group.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.dc_cluster_group.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.dc_cluster_group.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.dc_cluster_group.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.dc_cluster_group.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.dc_cluster_group.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.dc_cluster_group.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.discovery"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/discovery",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.discovery"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/discovery/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/discovery/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/discovery/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.discovery.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.discovery.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.discovery.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.discovery.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/discovery/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/discovery/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/discovery/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.discovery.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.discovery.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.discovery.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/discoverys"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.discovery.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.discovery.DeleteRequest",
		InStreaming:  false,
		OutMsgType:   "google.protobuf.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/discoverys/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.discovery.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.discovery.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.discovery.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/discoverys/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.discovery.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.discovery.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.discovery.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/discoverys"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.discovery.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.discovery.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.discovery.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/discoverys/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.discovery.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.discovery.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.discovery.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.discovery.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.discovery.DeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.discovery.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.discovery.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.discovery.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.discovery.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.discovery.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.discovery.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.discovery.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/discovery/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/discovery/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/discovery/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ConsulAccessInfo",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.discovery.ConsulAccessInfo"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ConsulDiscoveryType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.discovery.ConsulDiscoveryType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ConsulHttpBasicAuthInfoType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.discovery.ConsulHttpBasicAuthInfoType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ConsulVipDiscoveryInfoType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.discovery.ConsulVipDiscoveryInfoType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.discovery.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DiscoveredServiceType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.discovery.DiscoveredServiceType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.discovery.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.discovery.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "K8SAccessInfo",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.discovery.K8SAccessInfo"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "K8SDelegationType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.discovery.K8SDelegationType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "K8SDiscoveryType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.discovery.K8SDiscoveryType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "K8SPublishType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.discovery.K8SPublishType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "K8SVipDiscoveryInfoType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.discovery.K8SVipDiscoveryInfoType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "PodInfoType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.discovery.PodInfoType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "PortInfoType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.discovery.PortInfoType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.discovery.ReplaceSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "RestConfigType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.discovery.RestConfigType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "TLSClientConfigType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.discovery.TLSClientConfigType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "VerStatusType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.discovery.VerStatusType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "VipDiscoveryInfoType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.discovery.VipDiscoveryInfoType"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.discovery.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/discovery/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.discovery.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/discovery/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/discovery/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/discovery/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.discovery.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.discovery.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.discovery.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.discovery/Objects", "/ves.io.schema.discovery/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.discovery.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.discovery.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.discovery.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.discovery/Object/{object_uid}", "/ves.io.schema.discovery/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.discovery.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.discovery.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.discovery.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.discovery/Object/{object_uid}", "/ves.io.schema.discovery/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.discovery.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.discovery.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.discovery.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.discovery/Objects", "/ves.io.schema.discovery/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.discovery.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.discovery.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.discovery.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.discovery/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.discovery.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.discovery.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.discovery.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.discovery/Object/{object_uid}", "/ves.io.schema.discovery/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.discovery.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.discovery.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.discovery.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.discovery.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.discovery.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.discovery.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.discovery.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.discovery.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.discovery.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.discovery.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.discovery.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.discovery.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.discovery.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.dns_domain"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/dns_domain",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.dns_domain"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/dns_domain/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/dns_domain/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/dns_domain/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.dns_domain.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.dns_domain.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.dns_domain.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "DNSDomainStatus",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.dns_domain.DNSDomainStatus"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DNSSECStatus",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.dns_domain.DNSSECStatus"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.dns_domain.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/dns_domain/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/dns_domain/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/dns_domain/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.dns_domain.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.dns_domain.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.dns_domain.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/dns_domains"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.dns_domain.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.dns_domain.DeleteRequest",
		InStreaming:  false,
		OutMsgType:   "google.protobuf.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/dns_domains/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.dns_domain.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.dns_domain.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.dns_domain.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/dns_domains/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.dns_domain.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.dns_domain.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.dns_domain.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/dns_domains"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.dns_domain.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.dns_domain.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.dns_domain.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/dns_domains/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.dns_domain.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.dns_domain.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.dns_domain.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.dns_domain.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.dns_domain.DeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.dns_domain.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.dns_domain.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.dns_domain.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.dns_domain.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.dns_domain.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.dns_domain.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.dns_domain.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/dns_domain/public_customapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/dns_domain/public_customapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/dns_domain/public_customapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "CustomAPI",
		ServiceType: "CUSTOM_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.dns_domain.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "VerifyDnsDomain",
		InMsgType:    "ves.io.schema.dns_domain.VerifyDnsDomainRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.dns_domain.VerifyDnsDomainResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/dns_domain/{name}/verify"}}
	aInfo.RPCsInfo[svcfw.RPCName("VerifyDnsDomain")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.dns_domain.CustomAPI.VerifyDnsDomain"] = rpcInfo
	}

	fInfo.APIsInfo["CustomAPI"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.dns_domain.CustomAPI"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "VerifyDnsDomainRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.dns_domain.VerifyDnsDomainRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "VerifyDnsDomainResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.dns_domain.VerifyDnsDomainResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/dns_domain/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/dns_domain/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/dns_domain/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "AWSRoute53Type",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.dns_domain.AWSRoute53Type"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.dns_domain.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.dns_domain.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.dns_domain.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.dns_domain.ReplaceSpecType"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.dns_domain.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/dns_domain/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.dns_domain.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/dns_domain/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/dns_domain/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/dns_domain/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.dns_domain.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.dns_domain.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.dns_domain.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.dns_domain/Objects", "/ves.io.schema.dns_domain/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.dns_domain.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.dns_domain.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.dns_domain.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.dns_domain/Object/{object_uid}", "/ves.io.schema.dns_domain/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.dns_domain.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.dns_domain.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.dns_domain.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.dns_domain/Object/{object_uid}", "/ves.io.schema.dns_domain/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.dns_domain.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.dns_domain.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.dns_domain.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.dns_domain/Objects", "/ves.io.schema.dns_domain/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.dns_domain.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.dns_domain.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.dns_domain.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.dns_domain/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.dns_domain.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.dns_domain.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.dns_domain.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.dns_domain/Object/{object_uid}", "/ves.io.schema.dns_domain/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.dns_domain.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.dns_domain.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.dns_domain.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.dns_domain.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.dns_domain.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.dns_domain.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.dns_domain.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.dns_domain.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.dns_domain.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.dns_domain.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.dns_domain.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.dns_domain.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.dns_domain.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.endpoint"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/endpoint",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.endpoint"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/endpoint/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/endpoint/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/endpoint/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.endpoint.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.endpoint.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.endpoint.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.endpoint.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/endpoint/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/endpoint/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/endpoint/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.endpoint.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.endpoint.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.endpoint.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/endpoints"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.endpoint.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.endpoint.DeleteRequest",
		InStreaming:  false,
		OutMsgType:   "google.protobuf.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/endpoints/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.endpoint.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.endpoint.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.endpoint.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/endpoints/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.endpoint.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.endpoint.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.endpoint.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/endpoints"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.endpoint.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.endpoint.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.endpoint.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/endpoints/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.endpoint.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.endpoint.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.endpoint.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.endpoint.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.endpoint.DeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.endpoint.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.endpoint.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.endpoint.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.endpoint.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.endpoint.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.endpoint.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.endpoint.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/endpoint/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/endpoint/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/endpoint/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ConsulInfo",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.endpoint.ConsulInfo"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.endpoint.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DNSInfo",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.endpoint.DNSInfo"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DiscoveredInfoType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.endpoint.DiscoveredInfoType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DnsNameAdvancedType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.endpoint.DnsNameAdvancedType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.endpoint.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.endpoint.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "K8SInfo",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.endpoint.K8SInfo"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.endpoint.ReplaceSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ServiceInfoType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.endpoint.ServiceInfoType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "VerStatusType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.endpoint.VerStatusType"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.endpoint.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/endpoint/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.endpoint.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/endpoint/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/endpoint/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/endpoint/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.endpoint.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.endpoint.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.endpoint.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.endpoint/Objects", "/ves.io.schema.endpoint/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.endpoint.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.endpoint.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.endpoint.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.endpoint/Object/{object_uid}", "/ves.io.schema.endpoint/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.endpoint.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.endpoint.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.endpoint.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.endpoint/Object/{object_uid}", "/ves.io.schema.endpoint/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.endpoint.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.endpoint.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.endpoint.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.endpoint/Objects", "/ves.io.schema.endpoint/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.endpoint.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.endpoint.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.endpoint.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.endpoint/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.endpoint.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.endpoint.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.endpoint.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.endpoint/Object/{object_uid}", "/ves.io.schema.endpoint/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.endpoint.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.endpoint.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.endpoint.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.endpoint.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.endpoint.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.endpoint.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.endpoint.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.endpoint.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.endpoint.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.endpoint.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.endpoint.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.endpoint.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.endpoint.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.fast_acl"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/fast_acl",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.fast_acl"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/fast_acl/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/fast_acl/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/fast_acl/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.fast_acl.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.fast_acl.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.fast_acl.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fast_acl.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/fast_acl/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/fast_acl/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/fast_acl/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.fast_acl.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.fast_acl.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.fast_acl.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/fast_acls"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.fast_acl.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.fast_acl.DeleteRequest",
		InStreaming:  false,
		OutMsgType:   "google.protobuf.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/fast_acls/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.fast_acl.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.fast_acl.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.fast_acl.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/fast_acls/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.fast_acl.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.fast_acl.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.fast_acl.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/fast_acls"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.fast_acl.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.fast_acl.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.fast_acl.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/fast_acls/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.fast_acl.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.fast_acl.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fast_acl.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fast_acl.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fast_acl.DeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fast_acl.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fast_acl.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fast_acl.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fast_acl.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fast_acl.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fast_acl.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fast_acl.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/fast_acl/public_custom_data_api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/fast_acl/public_custom_data_api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/fast_acl/public_custom_data_api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "CustomDataAPI",
		ServiceType: "CUSTOM_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.fast_acl.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "FastACLHits",
		InMsgType:    "ves.io.schema.fast_acl.FastACLHitsRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.fast_acl.FastACLHitsResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/fast_acl/hits"}}
	aInfo.RPCsInfo[svcfw.RPCName("FastACLHits")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.fast_acl.CustomDataAPI.FastACLHits"] = rpcInfo
	}

	fInfo.APIsInfo["CustomDataAPI"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.fast_acl.CustomDataAPI"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "FastACLHits",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fast_acl.FastACLHits"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "FastACLHitsId",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fast_acl.FastACLHitsId"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "FastACLHitsRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fast_acl.FastACLHitsRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "FastACLHitsResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fast_acl.FastACLHitsResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "FastACLMetricLabelFilter",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fast_acl.FastACLMetricLabelFilter"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/fast_acl/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/fast_acl/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/fast_acl/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fast_acl.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DestinationIPAddressType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fast_acl.DestinationIPAddressType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DestinationType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fast_acl.DestinationType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "FastACLRuleType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fast_acl.FastACLRuleType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fast_acl.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fast_acl.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "LegacyACLType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fast_acl.LegacyACLType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReACLType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fast_acl.ReACLType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fast_acl.ReplaceSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SelectedTenantVIPsType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fast_acl.SelectedTenantVIPsType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SelectedVIPAddressType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fast_acl.SelectedVIPAddressType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SiteACLType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fast_acl.SiteACLType"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.fast_acl.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/fast_acl/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.fast_acl.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/fast_acl/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/fast_acl/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/fast_acl/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.fast_acl.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.fast_acl.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.fast_acl.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.fast_acl/Objects", "/ves.io.schema.fast_acl/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.fast_acl.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.fast_acl.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.fast_acl.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.fast_acl/Object/{object_uid}", "/ves.io.schema.fast_acl/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.fast_acl.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.fast_acl.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.fast_acl.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.fast_acl/Object/{object_uid}", "/ves.io.schema.fast_acl/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.fast_acl.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.fast_acl.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.fast_acl.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.fast_acl/Objects", "/ves.io.schema.fast_acl/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.fast_acl.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.fast_acl.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.fast_acl.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.fast_acl/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.fast_acl.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.fast_acl.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.fast_acl.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.fast_acl/Object/{object_uid}", "/ves.io.schema.fast_acl/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.fast_acl.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.fast_acl.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fast_acl.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fast_acl.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fast_acl.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fast_acl.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fast_acl.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fast_acl.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fast_acl.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fast_acl.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fast_acl.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fast_acl.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fast_acl.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.fast_acl_rule"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/fast_acl_rule",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.fast_acl_rule"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/fast_acl_rule/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/fast_acl_rule/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/fast_acl_rule/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.fast_acl_rule.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.fast_acl_rule.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.fast_acl_rule.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fast_acl_rule.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/fast_acl_rule/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/fast_acl_rule/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/fast_acl_rule/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.fast_acl_rule.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.fast_acl_rule.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.fast_acl_rule.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/fast_acl_rules"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.fast_acl_rule.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.fast_acl_rule.DeleteRequest",
		InStreaming:  false,
		OutMsgType:   "google.protobuf.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/fast_acl_rules/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.fast_acl_rule.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.fast_acl_rule.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.fast_acl_rule.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/fast_acl_rules/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.fast_acl_rule.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.fast_acl_rule.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.fast_acl_rule.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/fast_acl_rules"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.fast_acl_rule.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.fast_acl_rule.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.fast_acl_rule.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/fast_acl_rules/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.fast_acl_rule.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.fast_acl_rule.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fast_acl_rule.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fast_acl_rule.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fast_acl_rule.DeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fast_acl_rule.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fast_acl_rule.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fast_acl_rule.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fast_acl_rule.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fast_acl_rule.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fast_acl_rule.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fast_acl_rule.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/fast_acl_rule/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/fast_acl_rule/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/fast_acl_rule/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fast_acl_rule.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "FastAclRuleAction",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fast_acl_rule.FastAclRuleAction"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fast_acl_rule.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fast_acl_rule.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fast_acl_rule.ReplaceSpecType"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.fast_acl_rule.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/fast_acl_rule/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.fast_acl_rule.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/fast_acl_rule/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/fast_acl_rule/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/fast_acl_rule/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.fast_acl_rule.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.fast_acl_rule.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.fast_acl_rule.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.fast_acl_rule/Objects", "/ves.io.schema.fast_acl_rule/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.fast_acl_rule.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.fast_acl_rule.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.fast_acl_rule.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.fast_acl_rule/Object/{object_uid}", "/ves.io.schema.fast_acl_rule/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.fast_acl_rule.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.fast_acl_rule.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.fast_acl_rule.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.fast_acl_rule/Object/{object_uid}", "/ves.io.schema.fast_acl_rule/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.fast_acl_rule.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.fast_acl_rule.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.fast_acl_rule.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.fast_acl_rule/Objects", "/ves.io.schema.fast_acl_rule/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.fast_acl_rule.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.fast_acl_rule.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.fast_acl_rule.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.fast_acl_rule/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.fast_acl_rule.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.fast_acl_rule.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.fast_acl_rule.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.fast_acl_rule/Object/{object_uid}", "/ves.io.schema.fast_acl_rule/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.fast_acl_rule.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.fast_acl_rule.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fast_acl_rule.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fast_acl_rule.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fast_acl_rule.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fast_acl_rule.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fast_acl_rule.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fast_acl_rule.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fast_acl_rule.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fast_acl_rule.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fast_acl_rule.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fast_acl_rule.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fast_acl_rule.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.fleet"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/fleet",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.fleet"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/fleet/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/fleet/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/fleet/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.fleet.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.fleet.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.fleet.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fleet.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/fleet/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/fleet/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/fleet/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.fleet.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.fleet.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.fleet.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/fleets"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.fleet.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.fleet.DeleteRequest",
		InStreaming:  false,
		OutMsgType:   "google.protobuf.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/fleets/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.fleet.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.fleet.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.fleet.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/fleets/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.fleet.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.fleet.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.fleet.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/fleets"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.fleet.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.fleet.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.fleet.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/fleets/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.fleet.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.fleet.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fleet.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fleet.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fleet.DeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fleet.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fleet.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fleet.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fleet.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fleet.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fleet.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fleet.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/fleet/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/fleet/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/fleet/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "BGPConfiguration",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fleet.BGPConfiguration"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "BondLacpType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fleet.BondLacpType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fleet.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeviceInstanceType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fleet.DeviceInstanceType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeviceNetappBackendOntapSanChapType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fleet.DeviceNetappBackendOntapSanChapType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "FlashArrayEndpoint",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fleet.FlashArrayEndpoint"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "FlashArrayType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fleet.FlashArrayType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "FlashBladeEndpoint",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fleet.FlashBladeEndpoint"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "FlashBladeType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fleet.FlashBladeType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "FleetBondDeviceType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fleet.FleetBondDeviceType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "FleetBondDevicesListType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fleet.FleetBondDevicesListType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "FleetDeviceListType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fleet.FleetDeviceListType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "FleetInterfaceListType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fleet.FleetInterfaceListType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "FleetStatus",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fleet.FleetStatus"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "FleetStorageClassListType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fleet.FleetStorageClassListType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "FleetStorageClassType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fleet.FleetStorageClassType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "FleetStorageDeviceListType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fleet.FleetStorageDeviceListType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "FleetStorageDeviceType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fleet.FleetStorageDeviceType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "FleetStorageStaticRoutesListType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fleet.FleetStorageStaticRoutesListType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GenericDeviceInstanceType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fleet.GenericDeviceInstanceType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fleet.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fleet.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "LocalControlPlaneType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fleet.LocalControlPlaneType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "NetworkingDeviceInstanceType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fleet.NetworkingDeviceInstanceType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "OntapVirtualStoragePoolType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fleet.OntapVirtualStoragePoolType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "OntapVolumeDefaults",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fleet.OntapVolumeDefaults"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "OpenebsMayastorPoolType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fleet.OpenebsMayastorPoolType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "PsoArrayConfiguration",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fleet.PsoArrayConfiguration"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fleet.ReplaceSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "StorageClassCustomType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fleet.StorageClassCustomType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "StorageClassDellIsilonF800Type",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fleet.StorageClassDellIsilonF800Type"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "StorageClassHPENimbusStorageAf40Type",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fleet.StorageClassHPENimbusStorageAf40Type"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "StorageClassNetappTridentType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fleet.StorageClassNetappTridentType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "StorageClassOpenebsEnterpriseType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fleet.StorageClassOpenebsEnterpriseType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "StorageClassPureServiceOrchestratorType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fleet.StorageClassPureServiceOrchestratorType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "StorageDeviceDellIsilonF800Type",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fleet.StorageDeviceDellIsilonF800Type"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "StorageDeviceHPENimbusStorageAf40Type",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fleet.StorageDeviceHPENimbusStorageAf40Type"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "StorageDeviceNetappBackendOntapNasType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fleet.StorageDeviceNetappBackendOntapNasType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "StorageDeviceNetappBackendOntapSanType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fleet.StorageDeviceNetappBackendOntapSanType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "StorageDeviceNetappTridentType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fleet.StorageDeviceNetappTridentType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "StorageDeviceOpenebsEnterpriseType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fleet.StorageDeviceOpenebsEnterpriseType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "StorageDevicePureStorageServiceOrchestratorType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fleet.StorageDevicePureStorageServiceOrchestratorType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "VGPUConfiguration",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fleet.VGPUConfiguration"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.fleet.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/fleet/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.fleet.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/fleet/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/fleet/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/fleet/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.fleet.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.fleet.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.fleet.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.fleet/Objects", "/ves.io.schema.fleet/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.fleet.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.fleet.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.fleet.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.fleet/Object/{object_uid}", "/ves.io.schema.fleet/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.fleet.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.fleet.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.fleet.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.fleet/Object/{object_uid}", "/ves.io.schema.fleet/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.fleet.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.fleet.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.fleet.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.fleet/Objects", "/ves.io.schema.fleet/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.fleet.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.fleet.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.fleet.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.fleet/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.fleet.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.fleet.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.fleet.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.fleet/Object/{object_uid}", "/ves.io.schema.fleet/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.fleet.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.fleet.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fleet.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fleet.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fleet.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fleet.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fleet.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fleet.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fleet.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fleet.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fleet.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fleet.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.fleet.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.flow_exporter"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/flow_exporter",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.flow_exporter"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/flow_exporter/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/flow_exporter/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/flow_exporter/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.flow_exporter.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.flow_exporter.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.flow_exporter.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.flow_exporter.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/flow_exporter/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/flow_exporter/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/flow_exporter/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "FlowCollector",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.flow_exporter.FlowCollector"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "FlowCollectorEndPoint",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.flow_exporter.FlowCollectorEndPoint"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "FlowExportTimeout",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.flow_exporter.FlowExportTimeout"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "FlowSampler",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.flow_exporter.FlowSampler"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.flow_exporter.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "IpfixParameters",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.flow_exporter.IpfixParameters"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.flow_exporter.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/flow_exporter/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.flow_exporter.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/flow_exporter/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/flow_exporter/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/flow_exporter/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.flow_exporter.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.flow_exporter.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.flow_exporter.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.flow_exporter/Objects", "/ves.io.schema.flow_exporter/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.flow_exporter.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.flow_exporter.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.flow_exporter.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.flow_exporter/Object/{object_uid}", "/ves.io.schema.flow_exporter/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.flow_exporter.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.flow_exporter.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.flow_exporter.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.flow_exporter/Object/{object_uid}", "/ves.io.schema.flow_exporter/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.flow_exporter.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.flow_exporter.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.flow_exporter.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.flow_exporter/Objects", "/ves.io.schema.flow_exporter/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.flow_exporter.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.flow_exporter.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.flow_exporter.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.flow_exporter/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.flow_exporter.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.flow_exporter.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.flow_exporter.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.flow_exporter/Object/{object_uid}", "/ves.io.schema.flow_exporter/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.flow_exporter.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.flow_exporter.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.flow_exporter.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.flow_exporter.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.flow_exporter.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.flow_exporter.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.flow_exporter.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.flow_exporter.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.flow_exporter.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.flow_exporter.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.flow_exporter.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.flow_exporter.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.flow_exporter.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.healthcheck"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/healthcheck",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.healthcheck"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/healthcheck/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/healthcheck/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/healthcheck/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.healthcheck.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.healthcheck.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.healthcheck.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.healthcheck.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/healthcheck/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/healthcheck/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/healthcheck/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.healthcheck.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.healthcheck.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.healthcheck.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/healthchecks"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.healthcheck.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.healthcheck.DeleteRequest",
		InStreaming:  false,
		OutMsgType:   "google.protobuf.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/healthchecks/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.healthcheck.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.healthcheck.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.healthcheck.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/healthchecks/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.healthcheck.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.healthcheck.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.healthcheck.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/healthchecks"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.healthcheck.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.healthcheck.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.healthcheck.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/healthchecks/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.healthcheck.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.healthcheck.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.healthcheck.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.healthcheck.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.healthcheck.DeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.healthcheck.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.healthcheck.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.healthcheck.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.healthcheck.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.healthcheck.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.healthcheck.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.healthcheck.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/healthcheck/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/healthcheck/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/healthcheck/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.healthcheck.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.healthcheck.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.healthcheck.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "HttpHealthCheck",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.healthcheck.HttpHealthCheck"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.healthcheck.ReplaceSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "TcpHealthCheck",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.healthcheck.TcpHealthCheck"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.healthcheck.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/healthcheck/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.healthcheck.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/healthcheck/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/healthcheck/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/healthcheck/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.healthcheck.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.healthcheck.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.healthcheck.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.healthcheck/Objects", "/ves.io.schema.healthcheck/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.healthcheck.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.healthcheck.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.healthcheck.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.healthcheck/Object/{object_uid}", "/ves.io.schema.healthcheck/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.healthcheck.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.healthcheck.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.healthcheck.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.healthcheck/Object/{object_uid}", "/ves.io.schema.healthcheck/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.healthcheck.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.healthcheck.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.healthcheck.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.healthcheck/Objects", "/ves.io.schema.healthcheck/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.healthcheck.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.healthcheck.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.healthcheck.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.healthcheck/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.healthcheck.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.healthcheck.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.healthcheck.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.healthcheck/Object/{object_uid}", "/ves.io.schema.healthcheck/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.healthcheck.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.healthcheck.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.healthcheck.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.healthcheck.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.healthcheck.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.healthcheck.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.healthcheck.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.healthcheck.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.healthcheck.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.healthcheck.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.healthcheck.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.healthcheck.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.healthcheck.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.ip_prefix_set"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/ip_prefix_set",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.ip_prefix_set"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/ip_prefix_set/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/ip_prefix_set/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/ip_prefix_set/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.ip_prefix_set.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.ip_prefix_set.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.ip_prefix_set.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.ip_prefix_set.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/ip_prefix_set/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/ip_prefix_set/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/ip_prefix_set/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.ip_prefix_set.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.ip_prefix_set.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.ip_prefix_set.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/ip_prefix_sets"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.ip_prefix_set.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.ip_prefix_set.DeleteRequest",
		InStreaming:  false,
		OutMsgType:   "google.protobuf.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/ip_prefix_sets/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.ip_prefix_set.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.ip_prefix_set.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.ip_prefix_set.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/ip_prefix_sets/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.ip_prefix_set.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.ip_prefix_set.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.ip_prefix_set.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/ip_prefix_sets"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.ip_prefix_set.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.ip_prefix_set.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.ip_prefix_set.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/ip_prefix_sets/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.ip_prefix_set.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.ip_prefix_set.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.ip_prefix_set.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.ip_prefix_set.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.ip_prefix_set.DeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.ip_prefix_set.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.ip_prefix_set.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.ip_prefix_set.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.ip_prefix_set.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.ip_prefix_set.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.ip_prefix_set.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.ip_prefix_set.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/ip_prefix_set/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/ip_prefix_set/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/ip_prefix_set/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.ip_prefix_set.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.ip_prefix_set.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.ip_prefix_set.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.ip_prefix_set.ReplaceSpecType"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.ip_prefix_set.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/ip_prefix_set/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.ip_prefix_set.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/ip_prefix_set/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/ip_prefix_set/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/ip_prefix_set/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.ip_prefix_set.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.ip_prefix_set.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.ip_prefix_set.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.ip_prefix_set/Objects", "/ves.io.schema.ip_prefix_set/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.ip_prefix_set.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.ip_prefix_set.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.ip_prefix_set.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.ip_prefix_set/Object/{object_uid}", "/ves.io.schema.ip_prefix_set/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.ip_prefix_set.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.ip_prefix_set.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.ip_prefix_set.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.ip_prefix_set/Object/{object_uid}", "/ves.io.schema.ip_prefix_set/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.ip_prefix_set.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.ip_prefix_set.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.ip_prefix_set.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.ip_prefix_set/Objects", "/ves.io.schema.ip_prefix_set/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.ip_prefix_set.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.ip_prefix_set.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.ip_prefix_set.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.ip_prefix_set/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.ip_prefix_set.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.ip_prefix_set.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.ip_prefix_set.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.ip_prefix_set/Object/{object_uid}", "/ves.io.schema.ip_prefix_set/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.ip_prefix_set.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.ip_prefix_set.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.ip_prefix_set.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.ip_prefix_set.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.ip_prefix_set.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.ip_prefix_set.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.ip_prefix_set.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.ip_prefix_set.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.ip_prefix_set.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.ip_prefix_set.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.ip_prefix_set.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.ip_prefix_set.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.ip_prefix_set.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.k8s_cluster"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/k8s_cluster",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.k8s_cluster"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/k8s_cluster/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/k8s_cluster/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/k8s_cluster/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	oInfo.ReEncryptSecrets["ves.io.schema.k8s_cluster.Object.spec.gc_spec.apps_choice.cluster_wide_app_list.cluster_wide_apps.app_choice.argo_cd.local_domain.password"] = uint64(1000006)

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.k8s_cluster.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.k8s_cluster.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.k8s_cluster.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/k8s_cluster/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/k8s_cluster/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/k8s_cluster/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.k8s_cluster.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.k8s_cluster.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.k8s_cluster.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/k8s_clusters"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.k8s_cluster.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.k8s_cluster.DeleteRequest",
		InStreaming:  false,
		OutMsgType:   "google.protobuf.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/k8s_clusters/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.k8s_cluster.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.k8s_cluster.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.k8s_cluster.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/k8s_clusters/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.k8s_cluster.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.k8s_cluster.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.k8s_cluster.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/k8s_clusters"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.k8s_cluster.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.k8s_cluster.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.k8s_cluster.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/k8s_clusters/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.k8s_cluster.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.k8s_cluster.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster.DeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/k8s_cluster/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/k8s_cluster/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/k8s_cluster/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ApplicationArgoCDType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster.ApplicationArgoCDType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ApplicationDashboardType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster.ApplicationDashboardType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ApplicationMetricsServerType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster.ApplicationMetricsServerType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ClusterRoleBindingListType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster.ClusterRoleBindingListType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ClusterRoleListType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster.ClusterRoleListType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ClusterWideAppListType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster.ClusterWideAppListType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ClusterWideAppType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster.ClusterWideAppType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "InsecureRegistryListType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster.InsecureRegistryListType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "LocalAccessArgoCDType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster.LocalAccessArgoCDType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "LocalAccessConfigType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster.LocalAccessConfigType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "PodSecurityPolicyListType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster.PodSecurityPolicyListType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster.ReplaceSpecType"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.k8s_cluster.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/k8s_cluster/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.k8s_cluster.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/k8s_cluster/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/k8s_cluster/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/k8s_cluster/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.k8s_cluster.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.k8s_cluster.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.k8s_cluster.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.k8s_cluster/Objects", "/ves.io.schema.k8s_cluster/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.k8s_cluster.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.k8s_cluster.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.k8s_cluster.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.k8s_cluster/Object/{object_uid}", "/ves.io.schema.k8s_cluster/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.k8s_cluster.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.k8s_cluster.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.k8s_cluster.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.k8s_cluster/Object/{object_uid}", "/ves.io.schema.k8s_cluster/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.k8s_cluster.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.k8s_cluster.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.k8s_cluster.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.k8s_cluster/Objects", "/ves.io.schema.k8s_cluster/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.k8s_cluster.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.k8s_cluster.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.k8s_cluster.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.k8s_cluster/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.k8s_cluster.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.k8s_cluster.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.k8s_cluster.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.k8s_cluster/Object/{object_uid}", "/ves.io.schema.k8s_cluster/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.k8s_cluster.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.k8s_cluster.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.k8s_cluster_role"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/k8s_cluster_role",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.k8s_cluster_role"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/k8s_cluster_role/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/k8s_cluster_role/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/k8s_cluster_role/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.k8s_cluster_role.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.k8s_cluster_role.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.k8s_cluster_role.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster_role.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/k8s_cluster_role/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/k8s_cluster_role/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/k8s_cluster_role/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.k8s_cluster_role.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.k8s_cluster_role.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.k8s_cluster_role.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/k8s_cluster_roles"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.k8s_cluster_role.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.k8s_cluster_role.DeleteRequest",
		InStreaming:  false,
		OutMsgType:   "google.protobuf.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/k8s_cluster_roles/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.k8s_cluster_role.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.k8s_cluster_role.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.k8s_cluster_role.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/k8s_cluster_roles/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.k8s_cluster_role.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.k8s_cluster_role.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.k8s_cluster_role.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/k8s_cluster_roles"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.k8s_cluster_role.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.k8s_cluster_role.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.k8s_cluster_role.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/k8s_cluster_roles/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.k8s_cluster_role.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.k8s_cluster_role.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster_role.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster_role.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster_role.DeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster_role.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster_role.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster_role.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster_role.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster_role.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster_role.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster_role.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/k8s_cluster_role/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/k8s_cluster_role/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/k8s_cluster_role/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster_role.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster_role.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster_role.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "NonResourceURLListType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster_role.NonResourceURLListType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "PolicyRuleListType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster_role.PolicyRuleListType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "PolicyRuleType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster_role.PolicyRuleType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster_role.ReplaceSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ResourceListType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster_role.ResourceListType"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.k8s_cluster_role.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/k8s_cluster_role/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.k8s_cluster_role.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/k8s_cluster_role/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/k8s_cluster_role/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/k8s_cluster_role/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.k8s_cluster_role.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.k8s_cluster_role.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.k8s_cluster_role.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.k8s_cluster_role/Objects", "/ves.io.schema.k8s_cluster_role/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.k8s_cluster_role.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.k8s_cluster_role.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.k8s_cluster_role.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.k8s_cluster_role/Object/{object_uid}", "/ves.io.schema.k8s_cluster_role/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.k8s_cluster_role.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.k8s_cluster_role.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.k8s_cluster_role.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.k8s_cluster_role/Object/{object_uid}", "/ves.io.schema.k8s_cluster_role/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.k8s_cluster_role.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.k8s_cluster_role.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.k8s_cluster_role.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.k8s_cluster_role/Objects", "/ves.io.schema.k8s_cluster_role/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.k8s_cluster_role.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.k8s_cluster_role.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.k8s_cluster_role.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.k8s_cluster_role/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.k8s_cluster_role.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.k8s_cluster_role.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.k8s_cluster_role.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.k8s_cluster_role/Object/{object_uid}", "/ves.io.schema.k8s_cluster_role/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.k8s_cluster_role.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.k8s_cluster_role.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster_role.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster_role.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster_role.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster_role.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster_role.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster_role.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster_role.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster_role.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster_role.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster_role.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster_role.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.k8s_cluster_role_binding"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/k8s_cluster_role_binding",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.k8s_cluster_role_binding"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/k8s_cluster_role_binding/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/k8s_cluster_role_binding/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/k8s_cluster_role_binding/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.k8s_cluster_role_binding.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.k8s_cluster_role_binding.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.k8s_cluster_role_binding.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster_role_binding.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/k8s_cluster_role_binding/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/k8s_cluster_role_binding/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/k8s_cluster_role_binding/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.k8s_cluster_role_binding.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.k8s_cluster_role_binding.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.k8s_cluster_role_binding.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/k8s_cluster_role_bindings"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.k8s_cluster_role_binding.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.k8s_cluster_role_binding.DeleteRequest",
		InStreaming:  false,
		OutMsgType:   "google.protobuf.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/k8s_cluster_role_bindings/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.k8s_cluster_role_binding.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.k8s_cluster_role_binding.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.k8s_cluster_role_binding.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/k8s_cluster_role_bindings/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.k8s_cluster_role_binding.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.k8s_cluster_role_binding.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.k8s_cluster_role_binding.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/k8s_cluster_role_bindings"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.k8s_cluster_role_binding.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.k8s_cluster_role_binding.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.k8s_cluster_role_binding.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/k8s_cluster_role_bindings/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.k8s_cluster_role_binding.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.k8s_cluster_role_binding.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster_role_binding.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster_role_binding.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster_role_binding.DeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster_role_binding.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster_role_binding.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster_role_binding.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster_role_binding.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster_role_binding.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster_role_binding.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster_role_binding.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/k8s_cluster_role_binding/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/k8s_cluster_role_binding/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/k8s_cluster_role_binding/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster_role_binding.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster_role_binding.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster_role_binding.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster_role_binding.ReplaceSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ServiceAccountType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster_role_binding.ServiceAccountType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SubjectType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster_role_binding.SubjectType"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.k8s_cluster_role_binding.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/k8s_cluster_role_binding/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.k8s_cluster_role_binding.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/k8s_cluster_role_binding/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/k8s_cluster_role_binding/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/k8s_cluster_role_binding/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.k8s_cluster_role_binding.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.k8s_cluster_role_binding.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.k8s_cluster_role_binding.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.k8s_cluster_role_binding/Objects", "/ves.io.schema.k8s_cluster_role_binding/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.k8s_cluster_role_binding.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.k8s_cluster_role_binding.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.k8s_cluster_role_binding.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.k8s_cluster_role_binding/Object/{object_uid}", "/ves.io.schema.k8s_cluster_role_binding/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.k8s_cluster_role_binding.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.k8s_cluster_role_binding.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.k8s_cluster_role_binding.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.k8s_cluster_role_binding/Object/{object_uid}", "/ves.io.schema.k8s_cluster_role_binding/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.k8s_cluster_role_binding.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.k8s_cluster_role_binding.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.k8s_cluster_role_binding.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.k8s_cluster_role_binding/Objects", "/ves.io.schema.k8s_cluster_role_binding/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.k8s_cluster_role_binding.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.k8s_cluster_role_binding.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.k8s_cluster_role_binding.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.k8s_cluster_role_binding/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.k8s_cluster_role_binding.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.k8s_cluster_role_binding.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.k8s_cluster_role_binding.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.k8s_cluster_role_binding/Object/{object_uid}", "/ves.io.schema.k8s_cluster_role_binding/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.k8s_cluster_role_binding.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.k8s_cluster_role_binding.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster_role_binding.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster_role_binding.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster_role_binding.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster_role_binding.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster_role_binding.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster_role_binding.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster_role_binding.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster_role_binding.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster_role_binding.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster_role_binding.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_cluster_role_binding.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.k8s_pod_security_policy"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/k8s_pod_security_policy",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.k8s_pod_security_policy"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/k8s_pod_security_policy/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/k8s_pod_security_policy/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/k8s_pod_security_policy/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.k8s_pod_security_policy.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.k8s_pod_security_policy.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.k8s_pod_security_policy.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_pod_security_policy.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/k8s_pod_security_policy/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/k8s_pod_security_policy/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/k8s_pod_security_policy/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.k8s_pod_security_policy.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.k8s_pod_security_policy.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.k8s_pod_security_policy.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/k8s_pod_security_policys"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.k8s_pod_security_policy.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.k8s_pod_security_policy.DeleteRequest",
		InStreaming:  false,
		OutMsgType:   "google.protobuf.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/k8s_pod_security_policys/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.k8s_pod_security_policy.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.k8s_pod_security_policy.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.k8s_pod_security_policy.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/k8s_pod_security_policys/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.k8s_pod_security_policy.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.k8s_pod_security_policy.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.k8s_pod_security_policy.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/k8s_pod_security_policys"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.k8s_pod_security_policy.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.k8s_pod_security_policy.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.k8s_pod_security_policy.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/k8s_pod_security_policys/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.k8s_pod_security_policy.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.k8s_pod_security_policy.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_pod_security_policy.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_pod_security_policy.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_pod_security_policy.DeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_pod_security_policy.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_pod_security_policy.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_pod_security_policy.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_pod_security_policy.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_pod_security_policy.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_pod_security_policy.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_pod_security_policy.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/k8s_pod_security_policy/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/k8s_pod_security_policy/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/k8s_pod_security_policy/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CapabilityListType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_pod_security_policy.CapabilityListType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_pod_security_policy.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_pod_security_policy.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_pod_security_policy.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "HostPathType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_pod_security_policy.HostPathType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "IDRangeType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_pod_security_policy.IDRangeType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "IDStrategyOptionsType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_pod_security_policy.IDStrategyOptionsType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "PodSecurityPolicySpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_pod_security_policy.PodSecurityPolicySpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_pod_security_policy.ReplaceSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "RuntimeClassStrategyOptions",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_pod_security_policy.RuntimeClassStrategyOptions"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SELinuxStrategyOptions",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_pod_security_policy.SELinuxStrategyOptions"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.k8s_pod_security_policy.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/k8s_pod_security_policy/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.k8s_pod_security_policy.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/k8s_pod_security_policy/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/k8s_pod_security_policy/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/k8s_pod_security_policy/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.k8s_pod_security_policy.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.k8s_pod_security_policy.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.k8s_pod_security_policy.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.k8s_pod_security_policy/Objects", "/ves.io.schema.k8s_pod_security_policy/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.k8s_pod_security_policy.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.k8s_pod_security_policy.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.k8s_pod_security_policy.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.k8s_pod_security_policy/Object/{object_uid}", "/ves.io.schema.k8s_pod_security_policy/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.k8s_pod_security_policy.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.k8s_pod_security_policy.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.k8s_pod_security_policy.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.k8s_pod_security_policy/Object/{object_uid}", "/ves.io.schema.k8s_pod_security_policy/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.k8s_pod_security_policy.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.k8s_pod_security_policy.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.k8s_pod_security_policy.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.k8s_pod_security_policy/Objects", "/ves.io.schema.k8s_pod_security_policy/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.k8s_pod_security_policy.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.k8s_pod_security_policy.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.k8s_pod_security_policy.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.k8s_pod_security_policy/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.k8s_pod_security_policy.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.k8s_pod_security_policy.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.k8s_pod_security_policy.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.k8s_pod_security_policy/Object/{object_uid}", "/ves.io.schema.k8s_pod_security_policy/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.k8s_pod_security_policy.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.k8s_pod_security_policy.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_pod_security_policy.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_pod_security_policy.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_pod_security_policy.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_pod_security_policy.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_pod_security_policy.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_pod_security_policy.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_pod_security_policy.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_pod_security_policy.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_pod_security_policy.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_pod_security_policy.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.k8s_pod_security_policy.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.log"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/log",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.log"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/log/public_customapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/log/public_customapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/log/public_customapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "CustomAPI",
		ServiceType: "CUSTOM_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.log.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "AccessLogAggregationQuery",
		InMsgType:    "ves.io.schema.log.AccessLogAggregationRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.log.LogAggregationResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/access_logs/aggregation"}}
	aInfo.RPCsInfo[svcfw.RPCName("AccessLogAggregationQuery")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.log.CustomAPI.AccessLogAggregationQuery"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "AccessLogQueryV2",
		InMsgType:    "ves.io.schema.log.AccessLogRequestV2",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.log.LogResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/access_logs"}}
	aInfo.RPCsInfo[svcfw.RPCName("AccessLogQueryV2")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.log.CustomAPI.AccessLogQueryV2"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "AccessLogScrollQuery",
		InMsgType:    "ves.io.schema.log.LogScrollRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.log.LogResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/access_logs/scroll"}}
	aInfo.RPCsInfo[svcfw.RPCName("AccessLogScrollQuery")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.log.CustomAPI.AccessLogScrollQuery"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "AuditLogAggregationQuery",
		InMsgType:    "ves.io.schema.log.AuditLogAggregationRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.log.LogAggregationResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/audit_logs/aggregation"}}
	aInfo.RPCsInfo[svcfw.RPCName("AuditLogAggregationQuery")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.log.CustomAPI.AuditLogAggregationQuery"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "AuditLogQueryV2",
		InMsgType:    "ves.io.schema.log.AuditLogRequestV2",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.log.LogResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/audit_logs"}}
	aInfo.RPCsInfo[svcfw.RPCName("AuditLogQueryV2")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.log.CustomAPI.AuditLogQueryV2"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "AuditLogScrollQuery",
		InMsgType:    "ves.io.schema.log.LogScrollRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.log.LogResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/audit_logs/scroll"}}
	aInfo.RPCsInfo[svcfw.RPCName("AuditLogScrollQuery")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.log.CustomAPI.AuditLogScrollQuery"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "FirewallLogAggregationQuery",
		InMsgType:    "ves.io.schema.log.FirewallLogAggregationRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.log.LogAggregationResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/firewall_logs/aggregation"}}
	aInfo.RPCsInfo[svcfw.RPCName("FirewallLogAggregationQuery")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.log.CustomAPI.FirewallLogAggregationQuery"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "FirewallLogQuery",
		InMsgType:    "ves.io.schema.log.FirewallLogRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.log.LogResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/firewall_logs"}}
	aInfo.RPCsInfo[svcfw.RPCName("FirewallLogQuery")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.log.CustomAPI.FirewallLogQuery"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "FirewallLogScrollQuery",
		InMsgType:    "ves.io.schema.log.LogScrollRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.log.LogResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/firewall_logs/scroll"}}
	aInfo.RPCsInfo[svcfw.RPCName("FirewallLogScrollQuery")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.log.CustomAPI.FirewallLogScrollQuery"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "K8SAuditLogAggregationQuery",
		InMsgType:    "ves.io.schema.log.K8SAuditLogAggregationRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.log.LogAggregationResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/site/{site}/k8s_audit_logs/aggregation"}}
	aInfo.RPCsInfo[svcfw.RPCName("K8SAuditLogAggregationQuery")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.log.CustomAPI.K8SAuditLogAggregationQuery"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "K8SAuditLogQuery",
		InMsgType:    "ves.io.schema.log.K8SAuditLogRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.log.LogResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/site/{site}/k8s_audit_logs"}}
	aInfo.RPCsInfo[svcfw.RPCName("K8SAuditLogQuery")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.log.CustomAPI.K8SAuditLogQuery"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "K8SAuditLogScrollQuery",
		InMsgType:    "ves.io.schema.log.LogScrollRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.log.LogResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/k8s_audit_logs/scroll"}}
	aInfo.RPCsInfo[svcfw.RPCName("K8SAuditLogScrollQuery")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.log.CustomAPI.K8SAuditLogScrollQuery"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "K8SEventsAggregationQuery",
		InMsgType:    "ves.io.schema.log.K8SEventsAggregationRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.log.LogAggregationResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/site/{site}/k8s_events/aggregation"}}
	aInfo.RPCsInfo[svcfw.RPCName("K8SEventsAggregationQuery")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.log.CustomAPI.K8SEventsAggregationQuery"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "K8SEventsQuery",
		InMsgType:    "ves.io.schema.log.K8SEventsRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.log.LogResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/site/{site}/k8s_events"}}
	aInfo.RPCsInfo[svcfw.RPCName("K8SEventsQuery")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.log.CustomAPI.K8SEventsQuery"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "K8SEventsScrollQuery",
		InMsgType:    "ves.io.schema.log.LogScrollRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.log.LogResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/k8s_events/scroll"}}
	aInfo.RPCsInfo[svcfw.RPCName("K8SEventsScrollQuery")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.log.CustomAPI.K8SEventsScrollQuery"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "VK8SAuditLogAggregationQuery",
		InMsgType:    "ves.io.schema.log.VK8SAuditLogAggregationRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.log.LogAggregationResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/vk8s_audit_logs/aggregation"}}
	aInfo.RPCsInfo[svcfw.RPCName("VK8SAuditLogAggregationQuery")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.log.CustomAPI.VK8SAuditLogAggregationQuery"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "VK8SAuditLogQuery",
		InMsgType:    "ves.io.schema.log.VK8SAuditLogRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.log.LogResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/vk8s_audit_logs"}}
	aInfo.RPCsInfo[svcfw.RPCName("VK8SAuditLogQuery")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.log.CustomAPI.VK8SAuditLogQuery"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "VK8SAuditLogScrollQuery",
		InMsgType:    "ves.io.schema.log.LogScrollRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.log.LogResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/vk8s_audit_logs/scroll"}}
	aInfo.RPCsInfo[svcfw.RPCName("VK8SAuditLogScrollQuery")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.log.CustomAPI.VK8SAuditLogScrollQuery"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "VK8SEventsAggregationQuery",
		InMsgType:    "ves.io.schema.log.VK8SEventsAggregationRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.log.LogAggregationResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/vk8s_events/aggregation"}}
	aInfo.RPCsInfo[svcfw.RPCName("VK8SEventsAggregationQuery")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.log.CustomAPI.VK8SEventsAggregationQuery"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "VK8SEventsQuery",
		InMsgType:    "ves.io.schema.log.VK8SEventsRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.log.LogResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/vk8s_events"}}
	aInfo.RPCsInfo[svcfw.RPCName("VK8SEventsQuery")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.log.CustomAPI.VK8SEventsQuery"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "VK8SEventsScrollQuery",
		InMsgType:    "ves.io.schema.log.LogScrollRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.log.LogResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/vk8s_events/scroll"}}
	aInfo.RPCsInfo[svcfw.RPCName("VK8SEventsScrollQuery")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.log.CustomAPI.VK8SEventsScrollQuery"] = rpcInfo
	}

	fInfo.APIsInfo["CustomAPI"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.log.CustomAPI"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "AccessLogAggregationRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log.AccessLogAggregationRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AccessLogRequestV2",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log.AccessLogRequestV2"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AuditLogAggregationRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log.AuditLogAggregationRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AuditLogRequestV2",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log.AuditLogRequestV2"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "FirewallLogAggregationRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log.FirewallLogAggregationRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "FirewallLogRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log.FirewallLogRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "K8SAuditLogAggregationRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log.K8SAuditLogAggregationRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "K8SAuditLogRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log.K8SAuditLogRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "K8SEventsAggregationRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log.K8SEventsAggregationRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "K8SEventsRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log.K8SEventsRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "LogAggregationResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log.LogAggregationResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "LogResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log.LogResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "LogScrollRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log.LogScrollRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "VK8SAuditLogAggregationRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log.VK8SAuditLogAggregationRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "VK8SAuditLogRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log.VK8SAuditLogRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "VK8SEventsAggregationRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log.VK8SEventsAggregationRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "VK8SEventsRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log.VK8SEventsRequest"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/log/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/log/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/log/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CardinalityAggregationData",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log.CardinalityAggregationData"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DateAggregationBucket",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log.DateAggregationBucket"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DateAggregationData",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log.DateAggregationData"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DateSubAggregationData",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log.DateSubAggregationData"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "FieldAggregationBucket",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log.FieldAggregationBucket"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "FieldAggregationData",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log.FieldAggregationData"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "LogAggregationData",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log.LogAggregationData"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.log.access_log"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/log/access_log",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.log.access_log"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/log/access_log/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/log/access_log/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/log/access_log/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "AggregationRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log.access_log.AggregationRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CardinalityAggregation",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log.access_log.CardinalityAggregation"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DateAggregation",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log.access_log.DateAggregation"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DateSubAggregation",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log.access_log.DateSubAggregation"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "FieldAggregation",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log.access_log.FieldAggregation"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.log.audit_log"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/log/audit_log",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.log.audit_log"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/log/audit_log/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/log/audit_log/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/log/audit_log/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "AggregationRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log.audit_log.AggregationRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DateAggregation",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log.audit_log.DateAggregation"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "FieldAggregation",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log.audit_log.FieldAggregation"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.log.firewall_log"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/log/firewall_log",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.log.firewall_log"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/log/firewall_log/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/log/firewall_log/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/log/firewall_log/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "AggregationRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log.firewall_log.AggregationRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CardinalityAggregation",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log.firewall_log.CardinalityAggregation"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DateAggregation",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log.firewall_log.DateAggregation"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DateSubAggregation",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log.firewall_log.DateSubAggregation"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "FieldAggregation",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log.firewall_log.FieldAggregation"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.log.k8s_audit_log"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/log/k8s_audit_log",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.log.k8s_audit_log"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/log/k8s_audit_log/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/log/k8s_audit_log/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/log/k8s_audit_log/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "AggregationRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log.k8s_audit_log.AggregationRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DateAggregation",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log.k8s_audit_log.DateAggregation"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.log.k8s_events"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/log/k8s_events",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.log.k8s_events"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/log/k8s_events/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/log/k8s_events/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/log/k8s_events/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "AggregationRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log.k8s_events.AggregationRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DateAggregation",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log.k8s_events.DateAggregation"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "FieldAggregation",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log.k8s_events.FieldAggregation"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.log.vk8s_audit_log"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/log/vk8s_audit_log",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.log.vk8s_audit_log"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/log/vk8s_audit_log/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/log/vk8s_audit_log/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/log/vk8s_audit_log/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "AggregationRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log.vk8s_audit_log.AggregationRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DateAggregation",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log.vk8s_audit_log.DateAggregation"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.log.vk8s_events"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/log/vk8s_events",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.log.vk8s_events"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/log/vk8s_events/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/log/vk8s_events/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/log/vk8s_events/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "AggregationRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log.vk8s_events.AggregationRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DateAggregation",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log.vk8s_events.DateAggregation"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "FieldAggregation",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log.vk8s_events.FieldAggregation"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.log_receiver"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/log_receiver",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.log_receiver"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/log_receiver/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/log_receiver/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/log_receiver/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.log_receiver.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.log_receiver.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.log_receiver.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log_receiver.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/log_receiver/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/log_receiver/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/log_receiver/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.log_receiver.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.log_receiver.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.log_receiver.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/log_receivers"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.log_receiver.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.log_receiver.DeleteRequest",
		InStreaming:  false,
		OutMsgType:   "google.protobuf.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/log_receivers/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.log_receiver.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.log_receiver.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.log_receiver.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/log_receivers/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.log_receiver.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.log_receiver.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.log_receiver.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/log_receivers"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.log_receiver.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.log_receiver.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.log_receiver.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/log_receivers/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.log_receiver.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.log_receiver.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log_receiver.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log_receiver.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log_receiver.DeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log_receiver.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log_receiver.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log_receiver.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log_receiver.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log_receiver.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log_receiver.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log_receiver.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/log_receiver/public_customapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/log_receiver/public_customapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/log_receiver/public_customapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "CustomAPI",
		ServiceType: "CUSTOM_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.log_receiver.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "TestLogReceiver",
		InMsgType:    "ves.io.schema.log_receiver.TestLogReceiverRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.log_receiver.TestLogReceiverResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/log_receivers/{name}/test"}}
	aInfo.RPCsInfo[svcfw.RPCName("TestLogReceiver")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.log_receiver.CustomAPI.TestLogReceiver"] = rpcInfo
	}

	fInfo.APIsInfo["CustomAPI"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.log_receiver.CustomAPI"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "TestLogReceiverRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log_receiver.TestLogReceiverRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "TestLogReceiverResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log_receiver.TestLogReceiverResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/log_receiver/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/log_receiver/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/log_receiver/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log_receiver.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DataDogReceiver",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log_receiver.DataDogReceiver"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log_receiver.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log_receiver.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "HTTPServerConfigType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log_receiver.HTTPServerConfigType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "IPServerConfigType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log_receiver.IPServerConfigType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log_receiver.ReplaceSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SplunkReceiver",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log_receiver.SplunkReceiver"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SyslogReceiver",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log_receiver.SyslogReceiver"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "TCPServerConfigType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log_receiver.TCPServerConfigType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "TLSClientConfigType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log_receiver.TLSClientConfigType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "TLSConfigType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log_receiver.TLSConfigType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "UDPServerConfigType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log_receiver.UDPServerConfigType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "WhereSites",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log_receiver.WhereSites"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.log_receiver.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/log_receiver/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.log_receiver.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/log_receiver/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/log_receiver/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/log_receiver/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.log_receiver.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.log_receiver.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.log_receiver.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.log_receiver/Objects", "/ves.io.schema.log_receiver/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.log_receiver.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.log_receiver.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.log_receiver.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.log_receiver/Object/{object_uid}", "/ves.io.schema.log_receiver/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.log_receiver.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.log_receiver.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.log_receiver.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.log_receiver/Object/{object_uid}", "/ves.io.schema.log_receiver/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.log_receiver.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.log_receiver.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.log_receiver.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.log_receiver/Objects", "/ves.io.schema.log_receiver/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.log_receiver.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.log_receiver.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.log_receiver.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.log_receiver/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.log_receiver.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.log_receiver.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.log_receiver.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.log_receiver/Object/{object_uid}", "/ves.io.schema.log_receiver/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.log_receiver.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.log_receiver.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log_receiver.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log_receiver.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log_receiver.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log_receiver.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log_receiver.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log_receiver.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log_receiver.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log_receiver.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log_receiver.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log_receiver.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.log_receiver.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.malicious_user_mitigation"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/malicious_user_mitigation",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.malicious_user_mitigation"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/malicious_user_mitigation/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/malicious_user_mitigation/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/malicious_user_mitigation/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.malicious_user_mitigation.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.malicious_user_mitigation.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.malicious_user_mitigation.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.malicious_user_mitigation.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/malicious_user_mitigation/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/malicious_user_mitigation/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/malicious_user_mitigation/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.malicious_user_mitigation.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.malicious_user_mitigation.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.malicious_user_mitigation.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/malicious_user_mitigations"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.malicious_user_mitigation.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.malicious_user_mitigation.DeleteRequest",
		InStreaming:  false,
		OutMsgType:   "google.protobuf.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/malicious_user_mitigations/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.malicious_user_mitigation.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.malicious_user_mitigation.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.malicious_user_mitigation.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/malicious_user_mitigations/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.malicious_user_mitigation.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.malicious_user_mitigation.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.malicious_user_mitigation.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/malicious_user_mitigations"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.malicious_user_mitigation.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.malicious_user_mitigation.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.malicious_user_mitigation.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/malicious_user_mitigations/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.malicious_user_mitigation.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.malicious_user_mitigation.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.malicious_user_mitigation.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.malicious_user_mitigation.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.malicious_user_mitigation.DeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.malicious_user_mitigation.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.malicious_user_mitigation.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.malicious_user_mitigation.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.malicious_user_mitigation.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.malicious_user_mitigation.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.malicious_user_mitigation.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.malicious_user_mitigation.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/malicious_user_mitigation/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/malicious_user_mitigation/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/malicious_user_mitigation/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.malicious_user_mitigation.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.malicious_user_mitigation.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.malicious_user_mitigation.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "MaliciousUserMitigationAction",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.malicious_user_mitigation.MaliciousUserMitigationAction"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "MaliciousUserMitigationRule",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.malicious_user_mitigation.MaliciousUserMitigationRule"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "MaliciousUserMitigationType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.malicious_user_mitigation.MaliciousUserMitigationType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "MaliciousUserThreatLevel",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.malicious_user_mitigation.MaliciousUserThreatLevel"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.malicious_user_mitigation.ReplaceSpecType"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.malicious_user_mitigation.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/malicious_user_mitigation/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.malicious_user_mitigation.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/malicious_user_mitigation/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/malicious_user_mitigation/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/malicious_user_mitigation/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.malicious_user_mitigation.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.malicious_user_mitigation.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.malicious_user_mitigation.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.malicious_user_mitigation/Objects", "/ves.io.schema.malicious_user_mitigation/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.malicious_user_mitigation.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.malicious_user_mitigation.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.malicious_user_mitigation.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.malicious_user_mitigation/Object/{object_uid}", "/ves.io.schema.malicious_user_mitigation/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.malicious_user_mitigation.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.malicious_user_mitigation.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.malicious_user_mitigation.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.malicious_user_mitigation/Object/{object_uid}", "/ves.io.schema.malicious_user_mitigation/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.malicious_user_mitigation.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.malicious_user_mitigation.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.malicious_user_mitigation.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.malicious_user_mitigation/Objects", "/ves.io.schema.malicious_user_mitigation/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.malicious_user_mitigation.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.malicious_user_mitigation.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.malicious_user_mitigation.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.malicious_user_mitigation/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.malicious_user_mitigation.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.malicious_user_mitigation.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.malicious_user_mitigation.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.malicious_user_mitigation/Object/{object_uid}", "/ves.io.schema.malicious_user_mitigation/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.malicious_user_mitigation.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.malicious_user_mitigation.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.malicious_user_mitigation.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.malicious_user_mitigation.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.malicious_user_mitigation.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.malicious_user_mitigation.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.malicious_user_mitigation.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.malicious_user_mitigation.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.malicious_user_mitigation.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.malicious_user_mitigation.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.malicious_user_mitigation.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.malicious_user_mitigation.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.malicious_user_mitigation.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.namespace"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/namespace",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.namespace"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/namespace/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/namespace/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/namespace/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.namespace.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.namespace.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.namespace.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.namespace.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/namespace/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/namespace/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/namespace/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.namespace.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.namespace.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.namespace.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.namespace.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.namespace.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.namespace.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.namespace.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.namespace.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.namespace.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.namespace.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.namespace.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.namespace.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.namespace.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.namespace.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.namespace.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.namespace.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.namespace.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.namespace.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.namespace.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.namespace.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.namespace.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.namespace.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.namespace.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/namespace/public_customapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/namespace/public_customapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/namespace/public_customapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "CustomAPI",
		ServiceType: "CUSTOM_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.namespace.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "CascadeDelete",
		InMsgType:    "ves.io.schema.namespace.CascadeDeleteRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.namespace.CascadeDeleteResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{name}/cascade_delete"}}
	aInfo.RPCsInfo[svcfw.RPCName("CascadeDelete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.namespace.CustomAPI.CascadeDelete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "EvaluateAPIAccess",
		InMsgType:    "ves.io.schema.namespace.EvaluateAPIAccessReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.namespace.EvaluateAPIAccessResp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/system/evaluate-api-access"}}
	aInfo.RPCsInfo[svcfw.RPCName("EvaluateAPIAccess")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.namespace.CustomAPI.EvaluateAPIAccess"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "UpdateAllowAdvertiseOnPublic",
		InMsgType:    "ves.io.schema.namespace.UpdateAllowAdvertiseOnPublicReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.namespace.UpdateAllowAdvertiseOnPublicResp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/system/update_allow_advertise_on_public"}}
	aInfo.RPCsInfo[svcfw.RPCName("UpdateAllowAdvertiseOnPublic")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.namespace.CustomAPI.UpdateAllowAdvertiseOnPublic"] = rpcInfo
	}

	fInfo.APIsInfo["CustomAPI"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.namespace.CustomAPI"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "APIItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.namespace.APIItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "APIItemList",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.namespace.APIItemList"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CascadeDeleteItemType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.namespace.CascadeDeleteItemType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CascadeDeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.namespace.CascadeDeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CascadeDeleteResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.namespace.CascadeDeleteResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "EvaluateAPIAccessReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.namespace.EvaluateAPIAccessReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "EvaluateAPIAccessResp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.namespace.EvaluateAPIAccessResp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "UpdateAllowAdvertiseOnPublicReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.namespace.UpdateAllowAdvertiseOnPublicReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "UpdateAllowAdvertiseOnPublicResp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.namespace.UpdateAllowAdvertiseOnPublicResp"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/namespace/public_customapi_akar.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/namespace/public_customapi_akar.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/namespace/public_customapi_akar.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "NamespaceCustomAPI",
		ServiceType: "CUSTOM_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.namespace.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "GetActiveAlertPolicies",
		InMsgType:    "ves.io.schema.namespace.GetActiveAlertPoliciesRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.namespace.GetActiveAlertPoliciesResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/active_alert_policies"}}
	aInfo.RPCsInfo[svcfw.RPCName("GetActiveAlertPolicies")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.namespace.NamespaceCustomAPI.GetActiveAlertPolicies"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "GetActiveNetworkPolicies",
		InMsgType:    "ves.io.schema.namespace.GetActiveNetworkPoliciesRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.namespace.GetActiveNetworkPoliciesResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/active_network_policies"}}
	aInfo.RPCsInfo[svcfw.RPCName("GetActiveNetworkPolicies")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.namespace.NamespaceCustomAPI.GetActiveNetworkPolicies"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "GetActiveServicePolicies",
		InMsgType:    "ves.io.schema.namespace.GetActiveServicePoliciesRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.namespace.GetActiveServicePoliciesResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/active_service_policies"}}
	aInfo.RPCsInfo[svcfw.RPCName("GetActiveServicePolicies")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.namespace.NamespaceCustomAPI.GetActiveServicePolicies"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "GetFastACLsForInternetVIPs",
		InMsgType:    "ves.io.schema.namespace.GetFastACLsForInternetVIPsRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.namespace.GetFastACLsForInternetVIPsResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/fast_acls_for_internet_vips"}}
	aInfo.RPCsInfo[svcfw.RPCName("GetFastACLsForInternetVIPs")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.namespace.NamespaceCustomAPI.GetFastACLsForInternetVIPs"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "SetActiveAlertPolicies",
		InMsgType:    "ves.io.schema.namespace.SetActiveAlertPoliciesRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.namespace.SetActiveAlertPoliciesResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/active_alert_policies"}}
	aInfo.RPCsInfo[svcfw.RPCName("SetActiveAlertPolicies")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.namespace.NamespaceCustomAPI.SetActiveAlertPolicies"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "SetActiveNetworkPolicies",
		InMsgType:    "ves.io.schema.namespace.SetActiveNetworkPoliciesRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.namespace.SetActiveNetworkPoliciesResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/active_network_policies"}}
	aInfo.RPCsInfo[svcfw.RPCName("SetActiveNetworkPolicies")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.namespace.NamespaceCustomAPI.SetActiveNetworkPolicies"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "SetActiveServicePolicies",
		InMsgType:    "ves.io.schema.namespace.SetActiveServicePoliciesRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.namespace.SetActiveServicePoliciesResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/active_service_policies"}}
	aInfo.RPCsInfo[svcfw.RPCName("SetActiveServicePolicies")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.namespace.NamespaceCustomAPI.SetActiveServicePolicies"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "SetFastACLsForInternetVIPs",
		InMsgType:    "ves.io.schema.namespace.SetFastACLsForInternetVIPsRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.namespace.SetFastACLsForInternetVIPsResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/fast_acls_for_internet_vips"}}
	aInfo.RPCsInfo[svcfw.RPCName("SetFastACLsForInternetVIPs")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.namespace.NamespaceCustomAPI.SetFastACLsForInternetVIPs"] = rpcInfo
	}

	fInfo.APIsInfo["NamespaceCustomAPI"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.namespace.NamespaceCustomAPI"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "GetActiveAlertPoliciesRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.namespace.GetActiveAlertPoliciesRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetActiveAlertPoliciesResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.namespace.GetActiveAlertPoliciesResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetActiveNetworkPoliciesRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.namespace.GetActiveNetworkPoliciesRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetActiveNetworkPoliciesResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.namespace.GetActiveNetworkPoliciesResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetActiveServicePoliciesRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.namespace.GetActiveServicePoliciesRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetActiveServicePoliciesResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.namespace.GetActiveServicePoliciesResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetFastACLsForInternetVIPsRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.namespace.GetFastACLsForInternetVIPsRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetFastACLsForInternetVIPsResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.namespace.GetFastACLsForInternetVIPsResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SetActiveAlertPoliciesRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.namespace.SetActiveAlertPoliciesRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SetActiveAlertPoliciesResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.namespace.SetActiveAlertPoliciesResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SetActiveNetworkPoliciesRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.namespace.SetActiveNetworkPoliciesRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SetActiveNetworkPoliciesResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.namespace.SetActiveNetworkPoliciesResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SetActiveServicePoliciesRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.namespace.SetActiveServicePoliciesRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SetActiveServicePoliciesResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.namespace.SetActiveServicePoliciesResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SetFastACLsForInternetVIPsRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.namespace.SetFastACLsForInternetVIPsRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SetFastACLsForInternetVIPsResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.namespace.SetFastACLsForInternetVIPsResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/namespace/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/namespace/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/namespace/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.namespace.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.namespace.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.namespace.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.namespace.ReplaceSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SubCA",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.namespace.SubCA"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.namespace.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/namespace/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.namespace.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/namespace/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/namespace/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/namespace/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.namespace.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.namespace.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.namespace.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.namespace/Objects", "/ves.io.schema.namespace/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.namespace.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.namespace.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.namespace.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.namespace/Object/{object_uid}", "/ves.io.schema.namespace/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.namespace.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.namespace.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.namespace.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.namespace/Object/{object_uid}", "/ves.io.schema.namespace/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.namespace.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.namespace.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.namespace.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.namespace/Objects", "/ves.io.schema.namespace/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.namespace.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.namespace.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.namespace.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.namespace/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.namespace.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.namespace.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.namespace.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.namespace/Object/{object_uid}", "/ves.io.schema.namespace/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.namespace.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.namespace.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.namespace.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.namespace.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.namespace.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.namespace.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.namespace.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.namespace.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.namespace.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.namespace.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.namespace.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.namespace.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.namespace.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.network_connector"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/network_connector",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.network_connector"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/network_connector/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/network_connector/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/network_connector/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.network_connector.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.network_connector.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.network_connector.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_connector.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/network_connector/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/network_connector/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/network_connector/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.network_connector.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.network_connector.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.network_connector.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/network_connectors"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.network_connector.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.network_connector.DeleteRequest",
		InStreaming:  false,
		OutMsgType:   "google.protobuf.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/network_connectors/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.network_connector.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.network_connector.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.network_connector.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/network_connectors/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.network_connector.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.network_connector.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.network_connector.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/network_connectors"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.network_connector.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.network_connector.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.network_connector.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/network_connectors/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.network_connector.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.network_connector.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_connector.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_connector.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_connector.DeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_connector.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_connector.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_connector.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_connector.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_connector.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_connector.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_connector.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/network_connector/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/network_connector/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/network_connector/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_connector.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DynamicReverseProxyListType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_connector.DynamicReverseProxyListType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_connector.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSnatConnectorType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_connector.GlobalSnatConnectorType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_connector.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "NetworkConnectorStatus",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_connector.NetworkConnectorStatus"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_connector.ReplaceSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SnatConnectorType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_connector.SnatConnectorType"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.network_connector.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/network_connector/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.network_connector.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/network_connector/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/network_connector/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/network_connector/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.network_connector.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.network_connector.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.network_connector.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.network_connector/Objects", "/ves.io.schema.network_connector/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.network_connector.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.network_connector.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.network_connector.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.network_connector/Object/{object_uid}", "/ves.io.schema.network_connector/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.network_connector.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.network_connector.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.network_connector.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.network_connector/Object/{object_uid}", "/ves.io.schema.network_connector/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.network_connector.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.network_connector.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.network_connector.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.network_connector/Objects", "/ves.io.schema.network_connector/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.network_connector.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.network_connector.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.network_connector.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.network_connector/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.network_connector.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.network_connector.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.network_connector.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.network_connector/Object/{object_uid}", "/ves.io.schema.network_connector/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.network_connector.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.network_connector.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_connector.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_connector.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_connector.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_connector.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_connector.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_connector.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_connector.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_connector.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_connector.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_connector.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_connector.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.network_firewall"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/network_firewall",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.network_firewall"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/network_firewall/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/network_firewall/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/network_firewall/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.network_firewall.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.network_firewall.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.network_firewall.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_firewall.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/network_firewall/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/network_firewall/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/network_firewall/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.network_firewall.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.network_firewall.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.network_firewall.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/network_firewalls"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.network_firewall.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.network_firewall.DeleteRequest",
		InStreaming:  false,
		OutMsgType:   "google.protobuf.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/network_firewalls/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.network_firewall.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.network_firewall.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.network_firewall.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/network_firewalls/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.network_firewall.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.network_firewall.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.network_firewall.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/network_firewalls"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.network_firewall.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.network_firewall.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.network_firewall.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/network_firewalls/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.network_firewall.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.network_firewall.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_firewall.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_firewall.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_firewall.DeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_firewall.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_firewall.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_firewall.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_firewall.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_firewall.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_firewall.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_firewall.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/network_firewall/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/network_firewall/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/network_firewall/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ActiveFastACLsType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_firewall.ActiveFastACLsType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ActiveForwardProxyPoliciesType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_firewall.ActiveForwardProxyPoliciesType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ActiveNetworkPoliciesType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_firewall.ActiveNetworkPoliciesType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_firewall.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_firewall.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_firewall.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "NetworkFirewallStatus",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_firewall.NetworkFirewallStatus"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_firewall.ReplaceSpecType"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.network_firewall.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/network_firewall/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.network_firewall.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/network_firewall/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/network_firewall/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/network_firewall/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.network_firewall.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.network_firewall.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.network_firewall.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.network_firewall/Objects", "/ves.io.schema.network_firewall/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.network_firewall.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.network_firewall.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.network_firewall.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.network_firewall/Object/{object_uid}", "/ves.io.schema.network_firewall/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.network_firewall.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.network_firewall.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.network_firewall.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.network_firewall/Object/{object_uid}", "/ves.io.schema.network_firewall/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.network_firewall.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.network_firewall.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.network_firewall.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.network_firewall/Objects", "/ves.io.schema.network_firewall/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.network_firewall.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.network_firewall.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.network_firewall.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.network_firewall/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.network_firewall.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.network_firewall.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.network_firewall.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.network_firewall/Object/{object_uid}", "/ves.io.schema.network_firewall/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.network_firewall.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.network_firewall.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_firewall.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_firewall.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_firewall.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_firewall.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_firewall.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_firewall.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_firewall.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_firewall.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_firewall.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_firewall.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_firewall.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.network_interface"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/network_interface",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.network_interface"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/network_interface/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/network_interface/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/network_interface/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.network_interface.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.network_interface.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.network_interface.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_interface.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/network_interface/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/network_interface/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/network_interface/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.network_interface.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.network_interface.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.network_interface.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/network_interfaces"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.network_interface.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.network_interface.DeleteRequest",
		InStreaming:  false,
		OutMsgType:   "google.protobuf.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/network_interfaces/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.network_interface.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.network_interface.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.network_interface.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/network_interfaces/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.network_interface.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.network_interface.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.network_interface.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/network_interfaces"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.network_interface.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.network_interface.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.network_interface.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/network_interfaces/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.network_interface.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.network_interface.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_interface.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_interface.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_interface.DeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_interface.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_interface.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_interface.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_interface.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_interface.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_interface.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_interface.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/network_interface/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/network_interface/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/network_interface/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_interface.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DHCPInterfaceIPType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_interface.DHCPInterfaceIPType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DHCPNetworkType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_interface.DHCPNetworkType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DHCPPoolType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_interface.DHCPPoolType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DHCPServerParametersType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_interface.DHCPServerParametersType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DedicatedInterfaceType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_interface.DedicatedInterfaceType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DedicatedManagementInterfaceType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_interface.DedicatedManagementInterfaceType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "EthernetInterfaceType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_interface.EthernetInterfaceType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_interface.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_interface.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "LegacyInterfaceType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_interface.LegacyInterfaceType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "LinkQualityMonitorConfig",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_interface.LinkQualityMonitorConfig"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "NetworkInterfaceDFGW",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_interface.NetworkInterfaceDFGW"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "NetworkInterfaceDNS",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_interface.NetworkInterfaceDNS"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "NetworkInterfaceStatus",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_interface.NetworkInterfaceStatus"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "NetworkInterfaceTunnel",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_interface.NetworkInterfaceTunnel"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_interface.ReplaceSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "StaticIPParametersType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_interface.StaticIPParametersType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "StaticIpParametersClusterType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_interface.StaticIpParametersClusterType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "StaticIpParametersFleetType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_interface.StaticIpParametersFleetType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "StaticIpParametersNodeType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_interface.StaticIpParametersNodeType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "TunnelInterfaceType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_interface.TunnelInterfaceType"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.network_interface.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/network_interface/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.network_interface.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/network_interface/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/network_interface/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/network_interface/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.network_interface.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.network_interface.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.network_interface.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.network_interface/Objects", "/ves.io.schema.network_interface/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.network_interface.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.network_interface.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.network_interface.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.network_interface/Object/{object_uid}", "/ves.io.schema.network_interface/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.network_interface.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.network_interface.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.network_interface.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.network_interface/Object/{object_uid}", "/ves.io.schema.network_interface/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.network_interface.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.network_interface.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.network_interface.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.network_interface/Objects", "/ves.io.schema.network_interface/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.network_interface.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.network_interface.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.network_interface.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.network_interface/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.network_interface.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.network_interface.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.network_interface.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.network_interface/Object/{object_uid}", "/ves.io.schema.network_interface/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.network_interface.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.network_interface.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_interface.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_interface.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_interface.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_interface.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_interface.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_interface.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_interface.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_interface.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_interface.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_interface.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_interface.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.network_policy"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/network_policy",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.network_policy"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/network_policy/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/network_policy/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/network_policy/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.network_policy.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.network_policy.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.network_policy.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_policy.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/network_policy/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/network_policy/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/network_policy/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.network_policy.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.network_policy.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.network_policy.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/network_policys"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.network_policy.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.network_policy.DeleteRequest",
		InStreaming:  false,
		OutMsgType:   "google.protobuf.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/network_policys/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.network_policy.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.network_policy.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.network_policy.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/network_policys/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.network_policy.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.network_policy.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.network_policy.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/network_policys"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.network_policy.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.network_policy.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.network_policy.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/network_policys/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.network_policy.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.network_policy.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_policy.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_policy.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_policy.DeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_policy.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_policy.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_policy.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_policy.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_policy.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_policy.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_policy.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/network_policy/public_custom_data_api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/network_policy/public_custom_data_api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/network_policy/public_custom_data_api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "CustomDataAPI",
		ServiceType: "CUSTOM_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.network_policy.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "NetworkPolicyHits",
		InMsgType:    "ves.io.schema.network_policy.NetworkPolicyHitsRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.network_policy.NetworkPolicyHitsResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/network_policy/hits"}}
	aInfo.RPCsInfo[svcfw.RPCName("NetworkPolicyHits")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.network_policy.CustomDataAPI.NetworkPolicyHits"] = rpcInfo
	}

	fInfo.APIsInfo["CustomDataAPI"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.network_policy.CustomDataAPI"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "NetworkPolicyHits",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_policy.NetworkPolicyHits"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "NetworkPolicyHitsId",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_policy.NetworkPolicyHitsId"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "NetworkPolicyHitsRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_policy.NetworkPolicyHitsRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "NetworkPolicyHitsResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_policy.NetworkPolicyHitsResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "NetworkPolicyMetricLabelFilter",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_policy.NetworkPolicyMetricLabelFilter"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/network_policy/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/network_policy/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/network_policy/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ApplicationsType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_policy.ApplicationsType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_policy.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "EndpointChoiceType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_policy.EndpointChoiceType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_policy.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_policy.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "LegacyNetworkPolicyRuleChoice",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_policy.LegacyNetworkPolicyRuleChoice"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "NetworkPolicyRuleChoice",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_policy.NetworkPolicyRuleChoice"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "NetworkPolicyRuleType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_policy.NetworkPolicyRuleType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ProtocolPortType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_policy.ProtocolPortType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_policy.ReplaceSpecType"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.network_policy.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/network_policy/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.network_policy.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/network_policy/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/network_policy/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/network_policy/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.network_policy.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.network_policy.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.network_policy.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.network_policy/Objects", "/ves.io.schema.network_policy/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.network_policy.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.network_policy.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.network_policy.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.network_policy/Object/{object_uid}", "/ves.io.schema.network_policy/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.network_policy.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.network_policy.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.network_policy.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.network_policy/Object/{object_uid}", "/ves.io.schema.network_policy/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.network_policy.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.network_policy.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.network_policy.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.network_policy/Objects", "/ves.io.schema.network_policy/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.network_policy.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.network_policy.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.network_policy.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.network_policy/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.network_policy.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.network_policy.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.network_policy.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.network_policy/Object/{object_uid}", "/ves.io.schema.network_policy/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.network_policy.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.network_policy.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_policy.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_policy.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_policy.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_policy.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_policy.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_policy.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_policy.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_policy.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_policy.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_policy.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_policy.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.network_policy_rule"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/network_policy_rule",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.network_policy_rule"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/network_policy_rule/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/network_policy_rule/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/network_policy_rule/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.network_policy_rule.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.network_policy_rule.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.network_policy_rule.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_policy_rule.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/network_policy_rule/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/network_policy_rule/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/network_policy_rule/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.network_policy_rule.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.network_policy_rule.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.network_policy_rule.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/network_policy_rules"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.network_policy_rule.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.network_policy_rule.DeleteRequest",
		InStreaming:  false,
		OutMsgType:   "google.protobuf.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/network_policy_rules/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.network_policy_rule.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.network_policy_rule.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.network_policy_rule.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/network_policy_rules/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.network_policy_rule.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.network_policy_rule.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.network_policy_rule.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/network_policy_rules"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.network_policy_rule.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.network_policy_rule.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.network_policy_rule.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/network_policy_rules/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.network_policy_rule.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.network_policy_rule.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_policy_rule.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_policy_rule.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_policy_rule.DeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_policy_rule.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_policy_rule.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_policy_rule.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_policy_rule.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_policy_rule.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_policy_rule.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_policy_rule.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/network_policy_rule/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/network_policy_rule/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/network_policy_rule/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_policy_rule.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_policy_rule.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_policy_rule.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "NetworkPolicyPBRRuleAction",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_policy_rule.NetworkPolicyPBRRuleAction"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "NetworkPolicyRuleAdvancedAction",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_policy_rule.NetworkPolicyRuleAdvancedAction"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_policy_rule.ReplaceSpecType"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.network_policy_rule.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/network_policy_rule/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.network_policy_rule.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/network_policy_rule/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/network_policy_rule/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/network_policy_rule/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.network_policy_rule.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.network_policy_rule.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.network_policy_rule.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.network_policy_rule/Objects", "/ves.io.schema.network_policy_rule/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.network_policy_rule.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.network_policy_rule.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.network_policy_rule.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.network_policy_rule/Object/{object_uid}", "/ves.io.schema.network_policy_rule/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.network_policy_rule.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.network_policy_rule.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.network_policy_rule.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.network_policy_rule/Object/{object_uid}", "/ves.io.schema.network_policy_rule/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.network_policy_rule.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.network_policy_rule.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.network_policy_rule.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.network_policy_rule/Objects", "/ves.io.schema.network_policy_rule/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.network_policy_rule.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.network_policy_rule.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.network_policy_rule.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.network_policy_rule/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.network_policy_rule.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.network_policy_rule.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.network_policy_rule.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.network_policy_rule/Object/{object_uid}", "/ves.io.schema.network_policy_rule/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.network_policy_rule.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.network_policy_rule.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_policy_rule.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_policy_rule.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_policy_rule.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_policy_rule.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_policy_rule.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_policy_rule.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_policy_rule.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_policy_rule.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_policy_rule.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_policy_rule.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.network_policy_rule.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.policer"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/policer",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.policer"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/policer/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/policer/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/policer/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.policer.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.policer.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.policer.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.policer.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/policer/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/policer/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/policer/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.policer.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.policer.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.policer.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/policers"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.policer.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.policer.DeleteRequest",
		InStreaming:  false,
		OutMsgType:   "google.protobuf.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/policers/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.policer.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.policer.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.policer.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/policers/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.policer.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.policer.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.policer.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/policers"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.policer.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.policer.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.policer.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/policers/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.policer.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.policer.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.policer.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.policer.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.policer.DeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.policer.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.policer.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.policer.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.policer.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.policer.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.policer.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.policer.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/policer/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/policer/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/policer/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.policer.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.policer.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.policer.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.policer.ReplaceSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SingleRateTwoColorType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.policer.SingleRateTwoColorType"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.policer.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/policer/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.policer.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/policer/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/policer/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/policer/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.policer.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.policer.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.policer.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.policer/Objects", "/ves.io.schema.policer/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.policer.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.policer.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.policer.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.policer/Object/{object_uid}", "/ves.io.schema.policer/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.policer.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.policer.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.policer.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.policer/Object/{object_uid}", "/ves.io.schema.policer/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.policer.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.policer.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.policer.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.policer/Objects", "/ves.io.schema.policer/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.policer.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.policer.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.policer.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.policer/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.policer.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.policer.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.policer.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.policer/Object/{object_uid}", "/ves.io.schema.policer/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.policer.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.policer.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.policer.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.policer.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.policer.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.policer.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.policer.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.policer.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.policer.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.policer.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.policer.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.policer.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.policer.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.policy"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/policy",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.policy"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/policy/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/policy/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/policy/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "AppFirewallDetectionControl",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.policy.AppFirewallDetectionControl"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AppFirewallSignatureContext",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.policy.AppFirewallSignatureContext"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AppFirewallViolationContext",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.policy.AppFirewallViolationContext"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ArgMatcherType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.policy.ArgMatcherType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AsnMatchList",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.policy.AsnMatchList"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AsnMatcherType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.policy.AsnMatcherType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ContentRewriteAction",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.policy.ContentRewriteAction"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CookieMatcherType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.policy.CookieMatcherType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DenyInformation",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.policy.DenyInformation"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "HeaderMatcherType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.policy.HeaderMatcherType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "HttpMethodMatcherType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.policy.HttpMethodMatcherType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "IpMatcherType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.policy.IpMatcherType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "L4DestMatcherType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.policy.L4DestMatcherType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "MatcherType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.policy.MatcherType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "MatcherTypeBasic",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.policy.MatcherTypeBasic"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "PathMatcherType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.policy.PathMatcherType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "PortMatcherType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.policy.PortMatcherType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "PrefixMatchList",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.policy.PrefixMatchList"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "QueryParameterMatcherType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.policy.QueryParameterMatcherType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "RoleMatcherType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.policy.RoleMatcherType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ShapeBotBlockMitigationActionType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.policy.ShapeBotBlockMitigationActionType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ShapeBotMitigationAction",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.policy.ShapeBotMitigationAction"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ShapeBotRedirectMitigationActionType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.policy.ShapeBotRedirectMitigationActionType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ShapeProtectedEndpointAction",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.policy.ShapeProtectedEndpointAction"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SimpleWafExclusionRule",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.policy.SimpleWafExclusionRule"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "StringMatcherType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.policy.StringMatcherType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "TlsFingerprintMatcherType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.policy.TlsFingerprintMatcherType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "URLItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.policy.URLItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "URLMatcherType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.policy.URLMatcherType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "WafAction",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.policy.WafAction"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "WafInlineRuleControl",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.policy.WafInlineRuleControl"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "WafRuleControl",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.policy.WafRuleControl"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.protocol_policer"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/protocol_policer",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.protocol_policer"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/protocol_policer/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/protocol_policer/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/protocol_policer/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.protocol_policer.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.protocol_policer.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.protocol_policer.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.protocol_policer.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/protocol_policer/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/protocol_policer/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/protocol_policer/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.protocol_policer.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.protocol_policer.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.protocol_policer.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/protocol_policers"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.protocol_policer.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.protocol_policer.DeleteRequest",
		InStreaming:  false,
		OutMsgType:   "google.protobuf.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/protocol_policers/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.protocol_policer.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.protocol_policer.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.protocol_policer.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/protocol_policers/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.protocol_policer.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.protocol_policer.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.protocol_policer.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/protocol_policers"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.protocol_policer.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.protocol_policer.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.protocol_policer.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/protocol_policers/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.protocol_policer.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.protocol_policer.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.protocol_policer.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.protocol_policer.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.protocol_policer.DeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.protocol_policer.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.protocol_policer.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.protocol_policer.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.protocol_policer.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.protocol_policer.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.protocol_policer.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.protocol_policer.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/protocol_policer/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/protocol_policer/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/protocol_policer/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.protocol_policer.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DnsType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.protocol_policer.DnsType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.protocol_policer.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.protocol_policer.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "IcmpType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.protocol_policer.IcmpType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ProtocolPolicerType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.protocol_policer.ProtocolPolicerType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ProtocolType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.protocol_policer.ProtocolType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.protocol_policer.ReplaceSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "TcpType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.protocol_policer.TcpType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "UdpType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.protocol_policer.UdpType"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.protocol_policer.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/protocol_policer/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.protocol_policer.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/protocol_policer/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/protocol_policer/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/protocol_policer/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.protocol_policer.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.protocol_policer.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.protocol_policer.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.protocol_policer/Objects", "/ves.io.schema.protocol_policer/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.protocol_policer.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.protocol_policer.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.protocol_policer.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.protocol_policer/Object/{object_uid}", "/ves.io.schema.protocol_policer/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.protocol_policer.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.protocol_policer.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.protocol_policer.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.protocol_policer/Object/{object_uid}", "/ves.io.schema.protocol_policer/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.protocol_policer.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.protocol_policer.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.protocol_policer.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.protocol_policer/Objects", "/ves.io.schema.protocol_policer/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.protocol_policer.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.protocol_policer.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.protocol_policer.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.protocol_policer/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.protocol_policer.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.protocol_policer.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.protocol_policer.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.protocol_policer/Object/{object_uid}", "/ves.io.schema.protocol_policer/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.protocol_policer.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.protocol_policer.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.protocol_policer.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.protocol_policer.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.protocol_policer.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.protocol_policer.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.protocol_policer.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.protocol_policer.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.protocol_policer.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.protocol_policer.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.protocol_policer.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.protocol_policer.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.protocol_policer.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.public_ip"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/public_ip",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.public_ip"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/public_ip/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/public_ip/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/public_ip/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.public_ip.Object"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(3),
	}
	oInfo.KeysInfo[svcfw.FldName("spec.gc_spec.ip")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.public_ip.Object.spec.gc_spec.ip"] = keyInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.public_ip.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.public_ip.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.public_ip.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/public_ip/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/public_ip/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/public_ip/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.public_ip.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.public_ip.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.public_ip.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/public_ips/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.public_ip.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.public_ip.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.public_ip.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/public_ips"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.public_ip.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.public_ip.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.public_ip.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/public_ips/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.public_ip.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.public_ip.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.public_ip.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.public_ip.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.public_ip.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.public_ip.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.public_ip.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.public_ip.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.public_ip.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/public_ip/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/public_ip/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/public_ip/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.public_ip.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.public_ip.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.public_ip.ReplaceSpecType"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.public_ip.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/public_ip/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.public_ip.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/public_ip/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/public_ip/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/public_ip/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.public_ip.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.public_ip.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.public_ip.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.public_ip/Objects", "/ves.io.schema.public_ip/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.public_ip.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.public_ip.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.public_ip.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.public_ip/Object/{object_uid}", "/ves.io.schema.public_ip/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.public_ip.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.public_ip.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.public_ip.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.public_ip/Object/{object_uid}", "/ves.io.schema.public_ip/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.public_ip.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.public_ip.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.public_ip.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.public_ip/Objects", "/ves.io.schema.public_ip/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.public_ip.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.public_ip.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.public_ip.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.public_ip/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.public_ip.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.public_ip.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.public_ip.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.public_ip/Object/{object_uid}", "/ves.io.schema.public_ip/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.public_ip.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.public_ip.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.public_ip.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.public_ip.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.public_ip.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.public_ip.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.public_ip.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.public_ip.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.public_ip.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.public_ip.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.public_ip.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.public_ip.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.public_ip.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.rate_limiter"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/rate_limiter",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.rate_limiter"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/rate_limiter/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/rate_limiter/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/rate_limiter/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.rate_limiter.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.rate_limiter.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.rate_limiter.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.rate_limiter.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/rate_limiter/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/rate_limiter/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/rate_limiter/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.rate_limiter.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.rate_limiter.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.rate_limiter.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/rate_limiters"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.rate_limiter.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.rate_limiter.DeleteRequest",
		InStreaming:  false,
		OutMsgType:   "google.protobuf.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/rate_limiters/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.rate_limiter.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.rate_limiter.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.rate_limiter.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/rate_limiters/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.rate_limiter.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.rate_limiter.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.rate_limiter.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/rate_limiters"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.rate_limiter.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.rate_limiter.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.rate_limiter.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/rate_limiters/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.rate_limiter.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.rate_limiter.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.rate_limiter.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.rate_limiter.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.rate_limiter.DeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.rate_limiter.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.rate_limiter.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.rate_limiter.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.rate_limiter.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.rate_limiter.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.rate_limiter.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.rate_limiter.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/rate_limiter/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/rate_limiter/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/rate_limiter/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.rate_limiter.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.rate_limiter.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.rate_limiter.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "RateLimitValue",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.rate_limiter.RateLimitValue"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.rate_limiter.ReplaceSpecType"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.rate_limiter.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/rate_limiter/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.rate_limiter.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/rate_limiter/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/rate_limiter/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/rate_limiter/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.rate_limiter.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.rate_limiter.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.rate_limiter.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.rate_limiter/Objects", "/ves.io.schema.rate_limiter/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.rate_limiter.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.rate_limiter.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.rate_limiter.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.rate_limiter/Object/{object_uid}", "/ves.io.schema.rate_limiter/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.rate_limiter.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.rate_limiter.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.rate_limiter.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.rate_limiter/Object/{object_uid}", "/ves.io.schema.rate_limiter/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.rate_limiter.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.rate_limiter.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.rate_limiter.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.rate_limiter/Objects", "/ves.io.schema.rate_limiter/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.rate_limiter.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.rate_limiter.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.rate_limiter.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.rate_limiter/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.rate_limiter.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.rate_limiter.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.rate_limiter.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.rate_limiter/Object/{object_uid}", "/ves.io.schema.rate_limiter/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.rate_limiter.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.rate_limiter.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.rate_limiter.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.rate_limiter.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.rate_limiter.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.rate_limiter.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.rate_limiter.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.rate_limiter.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.rate_limiter.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.rate_limiter.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.rate_limiter.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.rate_limiter.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.rate_limiter.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.registration"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/registration",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.registration"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/registration/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/registration/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/registration/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.registration.Object"] = oInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.registration.SpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "StatusType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.registration.StatusType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/registration/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/registration/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/registration/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.registration.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.registration.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.registration.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/registrations"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.registration.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.registration.DeleteRequest",
		InStreaming:  false,
		OutMsgType:   "google.protobuf.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/registrations/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.registration.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.registration.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.registration.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/registrations/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.registration.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.registration.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.registration.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/registrations"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.registration.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.registration.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.registration.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/registrations/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.registration.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.registration.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.registration.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.registration.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.registration.DeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.registration.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.registration.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.registration.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.registration.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.registration.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.registration.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.registration.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/registration/public_customapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/registration/public_customapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/registration/public_customapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "CustomAPI",
		ServiceType: "CUSTOM_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.registration.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListRegistrationsBySite",
		InMsgType:    "ves.io.schema.registration.ListBySiteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.registration.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/registrations_by_site/{site_name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListRegistrationsBySite")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.registration.CustomAPI.ListRegistrationsBySite"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListRegistrationsByState",
		InMsgType:    "ves.io.schema.registration.ListStateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.registration.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/listregistrationsbystate"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListRegistrationsByState")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.registration.CustomAPI.ListRegistrationsByState"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "RegistrationApprove",
		InMsgType:    "ves.io.schema.registration.ApprovalReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.registration.ObjectChangeResp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/registration/{name}/approve"}}
	aInfo.RPCsInfo[svcfw.RPCName("RegistrationApprove")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.registration.CustomAPI.RegistrationApprove"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "RegistrationConfig",
		InMsgType:    "ves.io.schema.registration.ConfigReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.registration.ConfigResp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/requestConfig"}}
	aInfo.RPCsInfo[svcfw.RPCName("RegistrationConfig")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.registration.CustomAPI.RegistrationConfig"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "RegistrationCreate",
		InMsgType:    "ves.io.schema.registration.RegistrationCreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.registration.Object",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/registerBootstrap"}}
	aInfo.RPCsInfo[svcfw.RPCName("RegistrationCreate")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.registration.CustomAPI.RegistrationCreate"] = rpcInfo
	}

	fInfo.APIsInfo["CustomAPI"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.registration.CustomAPI"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ApprovalReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.registration.ApprovalReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ConfigReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.registration.ConfigReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ConfigResp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.registration.ConfigResp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListBySiteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.registration.ListBySiteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListStateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.registration.ListStateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectChangeResp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.registration.ObjectChangeResp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "RegistrationCreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.registration.RegistrationCreateRequest"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/registration/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/registration/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/registration/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.registration.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.registration.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.registration.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "Infra",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.registration.Infra"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "Interface",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.registration.Interface"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "InternetProxy",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.registration.InternetProxy"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "Passport",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.registration.Passport"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.registration.ReplaceSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "WorkloadContext",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.registration.WorkloadContext"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.registration.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/registration/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.registration.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/registration/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/registration/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/registration/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.registration.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.registration.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.registration.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.registration/Objects", "/ves.io.schema.registration/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.registration.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.registration.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.registration.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.registration/Object/{object_uid}", "/ves.io.schema.registration/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.registration.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.registration.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.registration.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.registration/Object/{object_uid}", "/ves.io.schema.registration/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.registration.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.registration.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.registration.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.registration/Objects", "/ves.io.schema.registration/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.registration.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.registration.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.registration.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.registration/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.registration.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.registration.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.registration.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.registration/Object/{object_uid}", "/ves.io.schema.registration/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.registration.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.registration.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.registration.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.registration.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.registration.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.registration.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.registration.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.registration.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.registration.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.registration.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.registration.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.registration.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.registration.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.role"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/role",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.role"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/role/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/role/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/role/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.role.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.role.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.role.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.role.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/role/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/role/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/role/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.role.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.role.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.role.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/roles"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.role.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.role.DeleteRequest",
		InStreaming:  false,
		OutMsgType:   "google.protobuf.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/roles/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.role.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.role.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.role.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/roles/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.role.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.role.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.role.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/roles"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.role.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.role.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.role.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/roles/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.role.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.role.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.role.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.role.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.role.DeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.role.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.role.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.role.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.role.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.role.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.role.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.role.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/role/public_customapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/role/public_customapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/role/public_customapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "CustomAPI",
		ServiceType: "CUSTOM_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.role.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "CustomCreate",
		InMsgType:    "ves.io.schema.role.CustomCreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.role.Object",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/custom/namespaces/{namespace}/roles"}}
	aInfo.RPCsInfo[svcfw.RPCName("CustomCreate")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.role.CustomAPI.CustomCreate"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "CustomGet",
		InMsgType:    "ves.io.schema.role.CustomGetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.role.CustomGetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/custom/namespaces/{namespace}/roles/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("CustomGet")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.role.CustomAPI.CustomGet"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "CustomList",
		InMsgType:    "ves.io.schema.role.CustomListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.role.CustomListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/custom/namespaces/{namespace}/roles"}}
	aInfo.RPCsInfo[svcfw.RPCName("CustomList")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.role.CustomAPI.CustomList"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "CustomReplace",
		InMsgType:    "ves.io.schema.role.CustomReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.role.Object",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/custom/namespaces/{namespace}/roles/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("CustomReplace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.role.CustomAPI.CustomReplace"] = rpcInfo
	}

	fInfo.APIsInfo["CustomAPI"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.role.CustomAPI"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CustomCreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.role.CustomCreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CustomGetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.role.CustomGetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CustomGetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.role.CustomGetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CustomListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.role.CustomListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CustomListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.role.CustomListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CustomReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.role.CustomReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "Role",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.role.Role"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/role/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/role/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/role/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.role.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.role.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.role.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.role.ReplaceSpecType"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.role.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/role/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.role.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/role/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/role/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/role/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.role.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.role.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.role.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.role/Objects", "/ves.io.schema.role/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.role.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.role.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.role.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.role/Object/{object_uid}", "/ves.io.schema.role/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.role.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.role.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.role.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.role/Object/{object_uid}", "/ves.io.schema.role/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.role.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.role.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.role.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.role/Objects", "/ves.io.schema.role/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.role.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.role.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.role.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.role/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.role.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.role.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.role.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.role/Object/{object_uid}", "/ves.io.schema.role/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.role.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.role.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.role.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.role.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.role.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.role.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.role.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.role.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.role.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.role.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.role.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.role.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.role.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.route"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/route",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.route"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/route/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/route/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/route/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.route.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.route.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.route.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.route.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/route/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/route/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/route/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.route.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.route.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.route.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/routes"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.route.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.route.DeleteRequest",
		InStreaming:  false,
		OutMsgType:   "google.protobuf.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/routes/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.route.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.route.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.route.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/routes/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.route.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.route.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.route.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/routes"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.route.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.route.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.route.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/routes/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.route.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.route.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.route.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.route.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.route.DeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.route.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.route.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.route.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.route.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.route.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.route.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.route.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/route/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/route/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/route/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CookieForHashing",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.route.CookieForHashing"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.route.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.route.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.route.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "HashPolicyType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.route.HashPolicyType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "MirrorPolicyType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.route.MirrorPolicyType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.route.ReplaceSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "RouteDestination",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.route.RouteDestination"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "RouteDestinationList",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.route.RouteDestinationList"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "RouteDirectResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.route.RouteDirectResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "RouteQueryParams",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.route.RouteQueryParams"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "RouteRedirect",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.route.RouteRedirect"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "RouteType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.route.RouteType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ServicePolicyInfo",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.route.ServicePolicyInfo"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SpdyConfigType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.route.SpdyConfigType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "WebsocketConfigType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.route.WebsocketConfigType"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.route.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/route/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.route.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/route/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/route/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/route/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.route.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.route.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.route.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.route/Objects", "/ves.io.schema.route/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.route.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.route.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.route.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.route/Object/{object_uid}", "/ves.io.schema.route/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.route.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.route.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.route.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.route/Object/{object_uid}", "/ves.io.schema.route/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.route.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.route.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.route.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.route/Objects", "/ves.io.schema.route/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.route.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.route.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.route.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.route/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.route.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.route.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.route.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.route/Object/{object_uid}", "/ves.io.schema.route/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.route.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.route.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.route.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.route.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.route.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.route.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.route.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.route.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.route.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.route.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.route.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.route.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.route.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.secret_policy"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/secret_policy",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.secret_policy"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/secret_policy/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/secret_policy/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/secret_policy/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.secret_policy.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.secret_policy.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.secret_policy.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.secret_policy.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/secret_policy/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/secret_policy/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/secret_policy/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.secret_policy.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.secret_policy.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.secret_policy.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/secret_policys"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.secret_policy.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.secret_policy.DeleteRequest",
		InStreaming:  false,
		OutMsgType:   "google.protobuf.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/secret_policys/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.secret_policy.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.secret_policy.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.secret_policy.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/secret_policys/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.secret_policy.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.secret_policy.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.secret_policy.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/secret_policys"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.secret_policy.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.secret_policy.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.secret_policy.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/secret_policys/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.secret_policy.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.secret_policy.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.secret_policy.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.secret_policy.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.secret_policy.DeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.secret_policy.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.secret_policy.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.secret_policy.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.secret_policy.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.secret_policy.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.secret_policy.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.secret_policy.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/secret_policy/public_custom_policy_api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/secret_policy/public_custom_policy_api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/secret_policy/public_custom_policy_api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "CustomAPI",
		ServiceType: "CUSTOM_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.secret_policy.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "DeletePolicy",
		InMsgType:    "ves.io.schema.secret_policy.SoftDeleteRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.secret_policy.SoftDeleteResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/secret_policys/{name}/softdelete"}}
	aInfo.RPCsInfo[svcfw.RPCName("DeletePolicy")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.secret_policy.CustomAPI.DeletePolicy"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "RecoverPolicy",
		InMsgType:    "ves.io.schema.secret_policy.RecoverRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.secret_policy.RecoverResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/secret_policys/{name}/recover"}}
	aInfo.RPCsInfo[svcfw.RPCName("RecoverPolicy")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.secret_policy.CustomAPI.RecoverPolicy"] = rpcInfo
	}

	fInfo.APIsInfo["CustomAPI"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.secret_policy.CustomAPI"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "RecoverRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.secret_policy.RecoverRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "RecoverResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.secret_policy.RecoverResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SoftDeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.secret_policy.SoftDeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SoftDeleteResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.secret_policy.SoftDeleteResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/secret_policy/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/secret_policy/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/secret_policy/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.secret_policy.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.secret_policy.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.secret_policy.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.secret_policy.ReplaceSpecType"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.secret_policy.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/secret_policy/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.secret_policy.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/secret_policy/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/secret_policy/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/secret_policy/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.secret_policy.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.secret_policy.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.secret_policy.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.secret_policy/Objects", "/ves.io.schema.secret_policy/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.secret_policy.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.secret_policy.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.secret_policy.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.secret_policy/Object/{object_uid}", "/ves.io.schema.secret_policy/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.secret_policy.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.secret_policy.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.secret_policy.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.secret_policy/Object/{object_uid}", "/ves.io.schema.secret_policy/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.secret_policy.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.secret_policy.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.secret_policy.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.secret_policy/Objects", "/ves.io.schema.secret_policy/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.secret_policy.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.secret_policy.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.secret_policy.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.secret_policy/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.secret_policy.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.secret_policy.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.secret_policy.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.secret_policy/Object/{object_uid}", "/ves.io.schema.secret_policy/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.secret_policy.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.secret_policy.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.secret_policy.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.secret_policy.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.secret_policy.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.secret_policy.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.secret_policy.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.secret_policy.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.secret_policy.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.secret_policy.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.secret_policy.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.secret_policy.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.secret_policy.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.secret_policy_rule"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/secret_policy_rule",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.secret_policy_rule"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/secret_policy_rule/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/secret_policy_rule/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/secret_policy_rule/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.secret_policy_rule.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.secret_policy_rule.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.secret_policy_rule.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.secret_policy_rule.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/secret_policy_rule/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/secret_policy_rule/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/secret_policy_rule/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.secret_policy_rule.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.secret_policy_rule.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.secret_policy_rule.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/secret_policy_rules"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.secret_policy_rule.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.secret_policy_rule.DeleteRequest",
		InStreaming:  false,
		OutMsgType:   "google.protobuf.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/secret_policy_rules/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.secret_policy_rule.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.secret_policy_rule.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.secret_policy_rule.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/secret_policy_rules/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.secret_policy_rule.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.secret_policy_rule.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.secret_policy_rule.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/secret_policy_rules"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.secret_policy_rule.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.secret_policy_rule.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.secret_policy_rule.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/secret_policy_rules/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.secret_policy_rule.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.secret_policy_rule.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.secret_policy_rule.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.secret_policy_rule.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.secret_policy_rule.DeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.secret_policy_rule.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.secret_policy_rule.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.secret_policy_rule.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.secret_policy_rule.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.secret_policy_rule.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.secret_policy_rule.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.secret_policy_rule.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/secret_policy_rule/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/secret_policy_rule/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/secret_policy_rule/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.secret_policy_rule.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.secret_policy_rule.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.secret_policy_rule.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.secret_policy_rule.ReplaceSpecType"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.secret_policy_rule.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/secret_policy_rule/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.secret_policy_rule.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/secret_policy_rule/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/secret_policy_rule/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/secret_policy_rule/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.secret_policy_rule.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.secret_policy_rule.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.secret_policy_rule.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.secret_policy_rule/Objects", "/ves.io.schema.secret_policy_rule/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.secret_policy_rule.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.secret_policy_rule.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.secret_policy_rule.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.secret_policy_rule/Object/{object_uid}", "/ves.io.schema.secret_policy_rule/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.secret_policy_rule.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.secret_policy_rule.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.secret_policy_rule.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.secret_policy_rule/Object/{object_uid}", "/ves.io.schema.secret_policy_rule/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.secret_policy_rule.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.secret_policy_rule.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.secret_policy_rule.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.secret_policy_rule/Objects", "/ves.io.schema.secret_policy_rule/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.secret_policy_rule.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.secret_policy_rule.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.secret_policy_rule.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.secret_policy_rule/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.secret_policy_rule.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.secret_policy_rule.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.secret_policy_rule.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.secret_policy_rule/Object/{object_uid}", "/ves.io.schema.secret_policy_rule/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.secret_policy_rule.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.secret_policy_rule.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.secret_policy_rule.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.secret_policy_rule.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.secret_policy_rule.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.secret_policy_rule.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.secret_policy_rule.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.secret_policy_rule.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.secret_policy_rule.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.secret_policy_rule.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.secret_policy_rule.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.secret_policy_rule.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.secret_policy_rule.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.service_policy"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/service_policy",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.service_policy"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/service_policy/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/service_policy/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/service_policy/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.service_policy.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.service_policy.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.service_policy.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.service_policy.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/service_policy/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/service_policy/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/service_policy/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.service_policy.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.service_policy.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.service_policy.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/service_policys"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.service_policy.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.service_policy.DeleteRequest",
		InStreaming:  false,
		OutMsgType:   "google.protobuf.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/service_policys/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.service_policy.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.service_policy.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.service_policy.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/service_policys/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.service_policy.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.service_policy.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.service_policy.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/service_policys"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.service_policy.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.service_policy.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.service_policy.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/service_policys/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.service_policy.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.service_policy.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.service_policy.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.service_policy.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.service_policy.DeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.service_policy.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.service_policy.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.service_policy.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.service_policy.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.service_policy.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.service_policy.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.service_policy.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/service_policy/public_custom_data_api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/service_policy/public_custom_data_api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/service_policy/public_custom_data_api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "CustomDataAPI",
		ServiceType: "CUSTOM_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.service_policy.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "ServicePolicyHits",
		InMsgType:    "ves.io.schema.service_policy.ServicePolicyHitsRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.service_policy.ServicePolicyHitsResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/service_policy/hits"}}
	aInfo.RPCsInfo[svcfw.RPCName("ServicePolicyHits")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.service_policy.CustomDataAPI.ServicePolicyHits"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ServicePolicyHitsLatency",
		InMsgType:    "ves.io.schema.service_policy.ServicePolicyHitsRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.service_policy.ServicePolicyHitsResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/service_policy/latency"}}
	aInfo.RPCsInfo[svcfw.RPCName("ServicePolicyHitsLatency")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.service_policy.CustomDataAPI.ServicePolicyHitsLatency"] = rpcInfo
	}

	fInfo.APIsInfo["CustomDataAPI"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.service_policy.CustomDataAPI"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ServicePolicyHits",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.service_policy.ServicePolicyHits"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ServicePolicyHitsId",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.service_policy.ServicePolicyHitsId"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ServicePolicyHitsRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.service_policy.ServicePolicyHitsRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ServicePolicyHitsResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.service_policy.ServicePolicyHitsResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ServicePolicyMetricLabelFilter",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.service_policy.ServicePolicyMetricLabelFilter"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/service_policy/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/service_policy/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/service_policy/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.service_policy.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.service_policy.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.service_policy.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "LegacyRuleList",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.service_policy.LegacyRuleList"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.service_policy.ReplaceSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "Rule",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.service_policy.Rule"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "RuleList",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.service_policy.RuleList"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SimpleRule",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.service_policy.SimpleRule"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SourceList",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.service_policy.SourceList"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.service_policy.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/service_policy/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.service_policy.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/service_policy/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/service_policy/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/service_policy/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.service_policy.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.service_policy.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.service_policy.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.service_policy/Objects", "/ves.io.schema.service_policy/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.service_policy.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.service_policy.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.service_policy.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.service_policy/Object/{object_uid}", "/ves.io.schema.service_policy/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.service_policy.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.service_policy.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.service_policy.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.service_policy/Object/{object_uid}", "/ves.io.schema.service_policy/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.service_policy.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.service_policy.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.service_policy.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.service_policy/Objects", "/ves.io.schema.service_policy/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.service_policy.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.service_policy.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.service_policy.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.service_policy/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.service_policy.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.service_policy.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.service_policy.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.service_policy/Object/{object_uid}", "/ves.io.schema.service_policy/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.service_policy.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.service_policy.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.service_policy.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.service_policy.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.service_policy.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.service_policy.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.service_policy.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.service_policy.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.service_policy.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.service_policy.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.service_policy.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.service_policy.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.service_policy.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.service_policy_rule"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/service_policy_rule",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.service_policy_rule"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/service_policy_rule/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/service_policy_rule/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/service_policy_rule/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.service_policy_rule.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.service_policy_rule.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.service_policy_rule.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.service_policy_rule.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/service_policy_rule/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/service_policy_rule/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/service_policy_rule/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.service_policy_rule.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.service_policy_rule.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.service_policy_rule.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/service_policy_rules"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.service_policy_rule.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.service_policy_rule.DeleteRequest",
		InStreaming:  false,
		OutMsgType:   "google.protobuf.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/service_policy_rules/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.service_policy_rule.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.service_policy_rule.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.service_policy_rule.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/service_policy_rules/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.service_policy_rule.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.service_policy_rule.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.service_policy_rule.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/service_policy_rules"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.service_policy_rule.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.service_policy_rule.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.service_policy_rule.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/service_policy_rules/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.service_policy_rule.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.service_policy_rule.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.service_policy_rule.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.service_policy_rule.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.service_policy_rule.DeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.service_policy_rule.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.service_policy_rule.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.service_policy_rule.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.service_policy_rule.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.service_policy_rule.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.service_policy_rule.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.service_policy_rule.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/service_policy_rule/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/service_policy_rule/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/service_policy_rule/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ChallengeRuleSpec",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.service_policy_rule.ChallengeRuleSpec"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.service_policy_rule.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.service_policy_rule.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.service_policy_rule.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "RateLimiterRuleSpec",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.service_policy_rule.RateLimiterRuleSpec"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.service_policy_rule.ReplaceSpecType"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.service_policy_rule.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/service_policy_rule/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.service_policy_rule.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/service_policy_rule/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/service_policy_rule/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/service_policy_rule/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.service_policy_rule.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.service_policy_rule.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.service_policy_rule.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.service_policy_rule/Objects", "/ves.io.schema.service_policy_rule/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.service_policy_rule.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.service_policy_rule.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.service_policy_rule.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.service_policy_rule/Object/{object_uid}", "/ves.io.schema.service_policy_rule/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.service_policy_rule.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.service_policy_rule.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.service_policy_rule.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.service_policy_rule/Object/{object_uid}", "/ves.io.schema.service_policy_rule/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.service_policy_rule.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.service_policy_rule.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.service_policy_rule.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.service_policy_rule/Objects", "/ves.io.schema.service_policy_rule/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.service_policy_rule.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.service_policy_rule.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.service_policy_rule.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.service_policy_rule/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.service_policy_rule.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.service_policy_rule.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.service_policy_rule.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.service_policy_rule/Object/{object_uid}", "/ves.io.schema.service_policy_rule/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.service_policy_rule.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.service_policy_rule.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.service_policy_rule.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.service_policy_rule.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.service_policy_rule.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.service_policy_rule.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.service_policy_rule.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.service_policy_rule.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.service_policy_rule.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.service_policy_rule.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.service_policy_rule.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.service_policy_rule.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.service_policy_rule.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.site"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/site",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.site"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/site/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/site/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/site/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.site.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.site.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.site.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/site/private_config_kubeconfig.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/site/private_config_kubeconfig.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/site/private_config_kubeconfig.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "PrivateConfigKubeConfigAPI",
		ServiceType: "CUSTOM_PRIVATE",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.site.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "GlobalAccessEnabled",
		InMsgType:    "ves.io.schema.site.GlobalAccessCheckRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.site.GlobalAccessCheckResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/private/namespaces/{namespace}/sites/{name}/global_access_check", "/ves.io.schema/introspect/read/private/namespaces/{namespace}/sites/{name}/global_access_check"}}
	aInfo.RPCsInfo[svcfw.RPCName("GlobalAccessEnabled")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.site.PrivateConfigKubeConfigAPI.GlobalAccessEnabled"] = rpcInfo
	}

	fInfo.APIsInfo["PrivateConfigKubeConfigAPI"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.site.PrivateConfigKubeConfigAPI"] = aInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/site/public_config_kubeconfig.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/site/public_config_kubeconfig.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/site/public_config_kubeconfig.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "ConfigKubeConfigAPI",
		ServiceType: "CUSTOM_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.site.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "CreateLocalKubeConfig",
		InMsgType:    "ves.io.schema.site.CreateKubeConfigReq",
		InStreaming:  false,
		OutMsgType:   "google.api.HttpBody",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/sites/{name}/local-kubeconfig"}}
	aInfo.RPCsInfo[svcfw.RPCName("CreateLocalKubeConfig")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.site.ConfigKubeConfigAPI.CreateLocalKubeConfig"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListLocalKubeConfig",
		InMsgType:    "ves.io.schema.site.ListKubeConfigReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.site.ListKubeConfigRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/sites/{name}/local-kubeconfigs"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListLocalKubeConfig")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.site.ConfigKubeConfigAPI.ListLocalKubeConfig"] = rpcInfo
	}

	fInfo.APIsInfo["ConfigKubeConfigAPI"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.site.ConfigKubeConfigAPI"] = aInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/site/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/site/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/site/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.site.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.site.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.site.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/sites/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.site.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.site.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.site.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/sites"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.site.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.site.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.site.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/sites/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.site.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.site.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/site/public_custom_data_k8s_api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/site/public_custom_data_k8s_api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/site/public_custom_data_k8s_api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "CustomDataK8SAPI",
		ServiceType: "CUSTOM_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.site.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "ConfigMapList",
		InMsgType:    "ves.io.schema.site.ConfigMapListRequest",
		InStreaming:  false,
		OutMsgType:   "k8s.io.api.core.v1.ConfigMapList",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/system/site/{site}/api/v1/configmaps", "/public/namespaces/system/site/{site}/api/v1/namespaces/{namespace}/configmaps"}}
	aInfo.RPCsInfo[svcfw.RPCName("ConfigMapList")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.site.CustomDataK8SAPI.ConfigMapList"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "CronJobList",
		InMsgType:    "ves.io.schema.site.CronJobListRequest",
		InStreaming:  false,
		OutMsgType:   "k8s.io.api.batch.v1beta1.CronJobList",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/system/site/{site}/apis/batch/v1beta1/cronjobs", "/public/namespaces/system/site/{site}/apis/batch/v1beta1/namespaces/{namespace}/cronjobs"}}
	aInfo.RPCsInfo[svcfw.RPCName("CronJobList")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.site.CustomDataK8SAPI.CronJobList"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "DaemonSetList",
		InMsgType:    "ves.io.schema.site.DaemonSetListRequest",
		InStreaming:  false,
		OutMsgType:   "k8s.io.api.apps.v1.DaemonSetList",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/system/site/{site}/apis/apps/v1/daemonsets", "/public/namespaces/system/site/{site}/apis/apps/v1/namespaces/{namespace}/daemonsets"}}
	aInfo.RPCsInfo[svcfw.RPCName("DaemonSetList")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.site.CustomDataK8SAPI.DaemonSetList"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "DeploymentList",
		InMsgType:    "ves.io.schema.site.DeploymentListRequest",
		InStreaming:  false,
		OutMsgType:   "k8s.io.api.apps.v1.DeploymentList",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/system/site/{site}/apis/apps/v1/deployments", "/public/namespaces/system/site/{site}/apis/apps/v1/namespaces/{namespace}/deployments"}}
	aInfo.RPCsInfo[svcfw.RPCName("DeploymentList")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.site.CustomDataK8SAPI.DeploymentList"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "EndpointsList",
		InMsgType:    "ves.io.schema.site.EndpointsListRequest",
		InStreaming:  false,
		OutMsgType:   "k8s.io.api.core.v1.EndpointsList",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/system/site/{site}/api/v1/endpoints", "/public/namespaces/system/site/{site}/api/v1/namespaces/{namespace}/endpoints"}}
	aInfo.RPCsInfo[svcfw.RPCName("EndpointsList")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.site.CustomDataK8SAPI.EndpointsList"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "JobList",
		InMsgType:    "ves.io.schema.site.JobListRequest",
		InStreaming:  false,
		OutMsgType:   "k8s.io.api.batch.v1.JobList",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/system/site/{site}/apis/batch/v1/jobs", "/public/namespaces/system/site/{site}/apis/batch/v1/namespaces/{namespace}/jobs"}}
	aInfo.RPCsInfo[svcfw.RPCName("JobList")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.site.CustomDataK8SAPI.JobList"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "NamespaceList",
		InMsgType:    "ves.io.schema.site.NamespaceListRequest",
		InStreaming:  false,
		OutMsgType:   "k8s.io.api.core.v1.NamespaceList",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/system/site/{site}/api/v1/namespaces"}}
	aInfo.RPCsInfo[svcfw.RPCName("NamespaceList")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.site.CustomDataK8SAPI.NamespaceList"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "NodeList",
		InMsgType:    "ves.io.schema.site.NodeListRequest",
		InStreaming:  false,
		OutMsgType:   "k8s.io.api.core.v1.NodeList",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/system/site/{site}/api/v1/nodes"}}
	aInfo.RPCsInfo[svcfw.RPCName("NodeList")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.site.CustomDataK8SAPI.NodeList"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "PersistentVolumeClaimList",
		InMsgType:    "ves.io.schema.site.PersistentVolumeClaimListRequest",
		InStreaming:  false,
		OutMsgType:   "k8s.io.api.core.v1.PersistentVolumeClaimList",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/system/site/{site}/api/v1/namespaces/{namespace}/persistentvolumeclaims", "/public/namespaces/system/site/{site}/api/v1/persistentvolumeclaims"}}
	aInfo.RPCsInfo[svcfw.RPCName("PersistentVolumeClaimList")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.site.CustomDataK8SAPI.PersistentVolumeClaimList"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "PersistentVolumeList",
		InMsgType:    "ves.io.schema.site.PersistentVolumeListRequest",
		InStreaming:  false,
		OutMsgType:   "k8s.io.api.core.v1.PersistentVolumeList",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/system/site/{site}/api/v1/persistentvolumes"}}
	aInfo.RPCsInfo[svcfw.RPCName("PersistentVolumeList")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.site.CustomDataK8SAPI.PersistentVolumeList"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "PodList",
		InMsgType:    "ves.io.schema.site.PodListRequest",
		InStreaming:  false,
		OutMsgType:   "k8s.io.api.core.v1.PodList",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/system/site/{site}/api/v1/namespaces/{namespace}/pods", "/public/namespaces/system/site/{site}/api/v1/pods"}}
	aInfo.RPCsInfo[svcfw.RPCName("PodList")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.site.CustomDataK8SAPI.PodList"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ReplicaSetList",
		InMsgType:    "ves.io.schema.site.ReplicaSetListRequest",
		InStreaming:  false,
		OutMsgType:   "k8s.io.api.apps.v1.ReplicaSetList",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/system/site/{site}/apis/apps/v1/namespaces/{namespace}/replicasets", "/public/namespaces/system/site/{site}/apis/apps/v1/replicasets"}}
	aInfo.RPCsInfo[svcfw.RPCName("ReplicaSetList")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.site.CustomDataK8SAPI.ReplicaSetList"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "SecretList",
		InMsgType:    "ves.io.schema.site.SecretListRequest",
		InStreaming:  false,
		OutMsgType:   "k8s.io.api.core.v1.SecretList",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/system/site/{site}/api/v1/namespaces/{namespace}/secrets", "/public/namespaces/system/site/{site}/api/v1/secrets"}}
	aInfo.RPCsInfo[svcfw.RPCName("SecretList")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.site.CustomDataK8SAPI.SecretList"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ServiceList",
		InMsgType:    "ves.io.schema.site.ServiceListRequest",
		InStreaming:  false,
		OutMsgType:   "k8s.io.api.core.v1.ServiceList",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/system/site/{site}/api/v1/namespaces/{namespace}/services", "/public/namespaces/system/site/{site}/api/v1/services"}}
	aInfo.RPCsInfo[svcfw.RPCName("ServiceList")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.site.CustomDataK8SAPI.ServiceList"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "StatefulSetList",
		InMsgType:    "ves.io.schema.site.StatefulSetListRequest",
		InStreaming:  false,
		OutMsgType:   "k8s.io.api.apps.v1.StatefulSetList",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/system/site/{site}/apis/apps/v1/namespaces/{namespace}/statefulsets", "/public/namespaces/system/site/{site}/apis/apps/v1/statefulsets"}}
	aInfo.RPCsInfo[svcfw.RPCName("StatefulSetList")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.site.CustomDataK8SAPI.StatefulSetList"] = rpcInfo
	}

	fInfo.APIsInfo["CustomDataK8SAPI"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.site.CustomDataK8SAPI"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ConfigMapListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.ConfigMapListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CronJobListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.CronJobListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DaemonSetListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.DaemonSetListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeploymentListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.DeploymentListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "EndpointsListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.EndpointsListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "JobListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.JobListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "NamespaceListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.NamespaceListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "NodeListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.NodeListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "PersistentVolumeClaimListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.PersistentVolumeClaimListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "PersistentVolumeListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.PersistentVolumeListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "PodListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.PodListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplicaSetListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.ReplicaSetListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SecretListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.SecretListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ServiceListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.ServiceListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "StatefulSetListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.StatefulSetListRequest"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/site/public_customapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/site/public_customapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/site/public_customapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "CustomStateAPI",
		ServiceType: "CUSTOM_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.site.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "SetState",
		InMsgType:    "ves.io.schema.site.SetStateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.site.SetStateResp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/site/{name}/state"}}
	aInfo.RPCsInfo[svcfw.RPCName("SetState")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.site.CustomStateAPI.SetState"] = rpcInfo
	}

	fInfo.APIsInfo["CustomStateAPI"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.site.CustomStateAPI"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SetStateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.SetStateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SetStateResp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.SetStateResp"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/site/public_uam_kubeconfig.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/site/public_uam_kubeconfig.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/site/public_uam_kubeconfig.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "UamKubeConfigAPI",
		ServiceType: "CUSTOM_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.site.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "CreateGlobalKubeConfig",
		InMsgType:    "ves.io.schema.site.CreateGlobalKubeConfigReq",
		InStreaming:  false,
		OutMsgType:   "google.api.HttpBody",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/system/sites/{site}/global-kubeconfigs"}}
	aInfo.RPCsInfo[svcfw.RPCName("CreateGlobalKubeConfig")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.site.UamKubeConfigAPI.CreateGlobalKubeConfig"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListGlobalKubeConfig",
		InMsgType:    "ves.io.schema.site.ListGlobalKubeConfigReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.site.ListKubeConfigRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/system/sites/{site}/global-kubeconfigs"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListGlobalKubeConfig")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.site.UamKubeConfigAPI.ListGlobalKubeConfig"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "RevokeGlobalKubeConfig",
		InMsgType:    "ves.io.schema.site.RevokeKubeConfigReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.site.KubeConfigStatusRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/system/revoke/global-kubeconfigs"}}
	aInfo.RPCsInfo[svcfw.RPCName("RevokeGlobalKubeConfig")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.site.UamKubeConfigAPI.RevokeGlobalKubeConfig"] = rpcInfo
	}

	fInfo.APIsInfo["UamKubeConfigAPI"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.site.UamKubeConfigAPI"] = aInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/site/public_upgradeapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/site/public_upgradeapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/site/public_upgradeapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "UpgradeAPI",
		ServiceType: "CUSTOM_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.site.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "UpgradeOS",
		InMsgType:    "ves.io.schema.site.UpgradeOSRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.site.UpgradeOSResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/sites/{name}/upgrade_os"}}
	aInfo.RPCsInfo[svcfw.RPCName("UpgradeOS")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.site.UpgradeAPI.UpgradeOS"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "UpgradeSW",
		InMsgType:    "ves.io.schema.site.UpgradeSWRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.site.UpgradeSWResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/sites/{name}/upgrade_sw"}}
	aInfo.RPCsInfo[svcfw.RPCName("UpgradeSW")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.site.UpgradeAPI.UpgradeSW"] = rpcInfo
	}

	fInfo.APIsInfo["UpgradeAPI"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.site.UpgradeAPI"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "UpgradeOSRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.UpgradeOSRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "UpgradeOSResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.UpgradeOSResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "UpgradeSWRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.UpgradeSWRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "UpgradeSWResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.UpgradeSWResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/site/site_status_info.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/site/site_status_info.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/site/site_status_info.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "CustomSiteStatusAPI",
		ServiceType: "CUSTOM_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.site.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "SiteStatusMetrics",
		InMsgType:    "ves.io.schema.site.SiteStatusMetricsRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.site.SiteStatusMetricsResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/site/{site}/status/metrics"}}
	aInfo.RPCsInfo[svcfw.RPCName("SiteStatusMetrics")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.site.CustomSiteStatusAPI.SiteStatusMetrics"] = rpcInfo
	}

	fInfo.APIsInfo["CustomSiteStatusAPI"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.site.CustomSiteStatusAPI"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SiteStatusMetricsRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.SiteStatusMetricsRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SiteStatusMetricsResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.SiteStatusMetricsResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/site/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/site/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/site/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "AresConnectionStatus",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.AresConnectionStatus"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "Bios",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.Bios"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "Board",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.Board"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "BondMembersType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.BondMembersType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "Chassis",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.Chassis"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "Coordinates",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.Coordinates"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "Cpu",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.Cpu"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateGlobalKubeConfigReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.CreateGlobalKubeConfigReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateKubeConfigReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.CreateKubeConfigReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DefaultUnderlayNetworkType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.DefaultUnderlayNetworkType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeploymentState",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.DeploymentState"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "FleetCondition",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.FleetCondition"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "FleetDeploymentState",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.FleetDeploymentState"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "FleetStatus",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.FleetStatus"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GPU",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.GPU"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GPUDevice",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.GPUDevice"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalAccessCheckRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.GlobalAccessCheckRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalAccessCheckResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.GlobalAccessCheckResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "InterfaceStatus",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.InterfaceStatus"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "IpsecConnectionStatus",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.IpsecConnectionStatus"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "K8SApiServerParameters",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.K8SApiServerParameters"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "Kernel",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.Kernel"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "KubeConfigStatusRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.KubeConfigStatusRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListGlobalKubeConfigReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.ListGlobalKubeConfigReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListKubeConfigReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.ListKubeConfigReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListKubeConfigRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.ListKubeConfigRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListKubeConfigRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.ListKubeConfigRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "Memory",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.Memory"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "NetworkDevice",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.NetworkDevice"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "NodeInfo",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.NodeInfo"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "OS",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.OS"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "OperatingSystemStatus",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.OperatingSystemStatus"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "OsInfo",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.OsInfo"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "Product",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.Product"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "PublishVIPParamsPerAz",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.PublishVIPParamsPerAz"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.ReplaceSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "RevokeKubeConfigReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.RevokeKubeConfigReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ScalingStatus",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.ScalingStatus"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SiteStatusMetricsData",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.SiteStatusMetricsData"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SiteStatusMetricsFieldData",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.SiteStatusMetricsFieldData"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "StorageDevice",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.StorageDevice"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "TunnelConnectionStatus",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.TunnelConnectionStatus"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "USBDevice",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.USBDevice"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "VerMasterStatusType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.VerMasterStatusType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "VerStatusType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.VerStatusType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "VolterraSoftwareStatus",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.VolterraSoftwareStatus"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.site.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/site/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.site.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/site/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/site/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/site/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.site.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.site.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.site.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.site/Objects", "/ves.io.schema.site/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.site.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.site.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.site.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.site/Object/{object_uid}", "/ves.io.schema.site/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.site.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.site.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.site.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.site/Object/{object_uid}", "/ves.io.schema.site/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.site.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.site.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.site.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.site/Objects", "/ves.io.schema.site/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.site.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.site.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.site.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.site/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.site.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.site.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.site.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.site/Object/{object_uid}", "/ves.io.schema.site/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.site.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.site.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.site_mesh_group"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/site_mesh_group",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.site_mesh_group"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/site_mesh_group/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/site_mesh_group/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/site_mesh_group/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.site_mesh_group.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.site_mesh_group.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.site_mesh_group.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site_mesh_group.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/site_mesh_group/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/site_mesh_group/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/site_mesh_group/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.site_mesh_group.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.site_mesh_group.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.site_mesh_group.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/site_mesh_groups"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.site_mesh_group.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.site_mesh_group.DeleteRequest",
		InStreaming:  false,
		OutMsgType:   "google.protobuf.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/site_mesh_groups/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.site_mesh_group.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.site_mesh_group.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.site_mesh_group.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/site_mesh_groups/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.site_mesh_group.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.site_mesh_group.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.site_mesh_group.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/site_mesh_groups"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.site_mesh_group.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.site_mesh_group.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.site_mesh_group.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/site_mesh_groups/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.site_mesh_group.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.site_mesh_group.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site_mesh_group.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site_mesh_group.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site_mesh_group.DeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site_mesh_group.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site_mesh_group.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site_mesh_group.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site_mesh_group.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site_mesh_group.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site_mesh_group.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site_mesh_group.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/site_mesh_group/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/site_mesh_group/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/site_mesh_group/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site_mesh_group.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site_mesh_group.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site_mesh_group.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site_mesh_group.ReplaceSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SiteMeshGroupStatus",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site_mesh_group.SiteMeshGroupStatus"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.site_mesh_group.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/site_mesh_group/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.site_mesh_group.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/site_mesh_group/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/site_mesh_group/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/site_mesh_group/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.site_mesh_group.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.site_mesh_group.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.site_mesh_group.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.site_mesh_group/Objects", "/ves.io.schema.site_mesh_group/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.site_mesh_group.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.site_mesh_group.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.site_mesh_group.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.site_mesh_group/Object/{object_uid}", "/ves.io.schema.site_mesh_group/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.site_mesh_group.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.site_mesh_group.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.site_mesh_group.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.site_mesh_group/Object/{object_uid}", "/ves.io.schema.site_mesh_group/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.site_mesh_group.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.site_mesh_group.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.site_mesh_group.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.site_mesh_group/Objects", "/ves.io.schema.site_mesh_group/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.site_mesh_group.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.site_mesh_group.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.site_mesh_group.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.site_mesh_group/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.site_mesh_group.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.site_mesh_group.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.site_mesh_group.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.site_mesh_group/Object/{object_uid}", "/ves.io.schema.site_mesh_group/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.site_mesh_group.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.site_mesh_group.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site_mesh_group.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site_mesh_group.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site_mesh_group.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site_mesh_group.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site_mesh_group.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site_mesh_group.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site_mesh_group.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site_mesh_group.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site_mesh_group.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site_mesh_group.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.site_mesh_group.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.token"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/token",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.token"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/token/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/token/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/token/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.token.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.token.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.token.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.token.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/token/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/token/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/token/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.token.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.token.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.token.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/tokens"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.token.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.token.DeleteRequest",
		InStreaming:  false,
		OutMsgType:   "google.protobuf.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/tokens/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.token.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.token.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.token.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/tokens/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.token.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.token.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.token.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/tokens"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.token.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.token.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.token.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/tokens/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.token.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.token.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.token.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.token.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.token.DeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.token.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.token.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.token.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.token.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.token.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.token.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.token.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/token/public_customapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/token/public_customapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/token/public_customapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "CustomAPI",
		ServiceType: "CUSTOM_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.token.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "TokenState",
		InMsgType:    "ves.io.schema.token.StateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.token.ObjectChangeResp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/tokens/{name}/state"}}
	aInfo.RPCsInfo[svcfw.RPCName("TokenState")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.token.CustomAPI.TokenState"] = rpcInfo
	}

	fInfo.APIsInfo["CustomAPI"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.token.CustomAPI"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectChangeResp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.token.ObjectChangeResp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "StateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.token.StateReq"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/token/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/token/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/token/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.token.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.token.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.token.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.token.ReplaceSpecType"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.token.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/token/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.token.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/token/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/token/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/token/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.token.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.token.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.token.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.token/Objects", "/ves.io.schema.token/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.token.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.token.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.token.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.token/Object/{object_uid}", "/ves.io.schema.token/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.token.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.token.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.token.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.token/Object/{object_uid}", "/ves.io.schema.token/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.token.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.token.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.token.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.token/Objects", "/ves.io.schema.token/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.token.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.token.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.token.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.token/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.token.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.token.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.token.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.token/Object/{object_uid}", "/ves.io.schema.token/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.token.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.token.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.token.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.token.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.token.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.token.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.token.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.token.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.token.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.token.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.token.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.token.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.token.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.tunnel"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/tunnel",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.tunnel"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/tunnel/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/tunnel/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/tunnel/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.tunnel.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.tunnel.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.tunnel.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.tunnel.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/tunnel/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/tunnel/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/tunnel/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.tunnel.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.tunnel.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.tunnel.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/tunnels"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.tunnel.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.tunnel.DeleteRequest",
		InStreaming:  false,
		OutMsgType:   "google.protobuf.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/tunnels/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.tunnel.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.tunnel.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.tunnel.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/tunnels/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.tunnel.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.tunnel.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.tunnel.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/tunnels"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.tunnel.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.tunnel.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.tunnel.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/tunnels/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.tunnel.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.tunnel.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.tunnel.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.tunnel.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.tunnel.DeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.tunnel.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.tunnel.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.tunnel.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.tunnel.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.tunnel.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.tunnel.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.tunnel.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/tunnel/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/tunnel/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/tunnel/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.tunnel.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.tunnel.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.tunnel.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "InterfaceType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.tunnel.InterfaceType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "IpsecTunnelParams",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.tunnel.IpsecTunnelParams"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "LocalIpAddressSelector",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.tunnel.LocalIpAddressSelector"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "LocalIpAddressType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.tunnel.LocalIpAddressType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "RemoteEndpointType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.tunnel.RemoteEndpointType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "RemoteIpAddressSelector",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.tunnel.RemoteIpAddressSelector"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "RemoteNodeAttributes",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.tunnel.RemoteNodeAttributes"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.tunnel.ReplaceSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "TunnelParams",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.tunnel.TunnelParams"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.tunnel.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/tunnel/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.tunnel.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/tunnel/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/tunnel/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/tunnel/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.tunnel.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.tunnel.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.tunnel.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.tunnel/Objects", "/ves.io.schema.tunnel/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.tunnel.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.tunnel.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.tunnel.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.tunnel/Object/{object_uid}", "/ves.io.schema.tunnel/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.tunnel.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.tunnel.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.tunnel.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.tunnel/Object/{object_uid}", "/ves.io.schema.tunnel/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.tunnel.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.tunnel.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.tunnel.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.tunnel/Objects", "/ves.io.schema.tunnel/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.tunnel.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.tunnel.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.tunnel.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.tunnel/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.tunnel.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.tunnel.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.tunnel.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.tunnel/Object/{object_uid}", "/ves.io.schema.tunnel/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.tunnel.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.tunnel.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.tunnel.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.tunnel.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.tunnel.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.tunnel.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.tunnel.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.tunnel.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.tunnel.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.tunnel.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.tunnel.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.tunnel.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.tunnel.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.usb_policy"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/usb_policy",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.usb_policy"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/usb_policy/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/usb_policy/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/usb_policy/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.usb_policy.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.usb_policy.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.usb_policy.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.usb_policy.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/usb_policy/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/usb_policy/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/usb_policy/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.usb_policy.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.usb_policy.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.usb_policy.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/usb_policys"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.usb_policy.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.usb_policy.DeleteRequest",
		InStreaming:  false,
		OutMsgType:   "google.protobuf.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/usb_policys/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.usb_policy.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.usb_policy.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.usb_policy.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/usb_policys/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.usb_policy.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.usb_policy.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.usb_policy.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/usb_policys"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.usb_policy.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.usb_policy.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.usb_policy.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/usb_policys/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.usb_policy.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.usb_policy.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.usb_policy.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.usb_policy.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.usb_policy.DeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.usb_policy.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.usb_policy.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.usb_policy.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.usb_policy.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.usb_policy.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.usb_policy.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.usb_policy.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/usb_policy/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/usb_policy/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/usb_policy/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.usb_policy.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.usb_policy.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.usb_policy.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.usb_policy.ReplaceSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "Rule",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.usb_policy.Rule"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.usb_policy.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/usb_policy/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.usb_policy.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/usb_policy/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/usb_policy/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/usb_policy/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.usb_policy.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.usb_policy.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.usb_policy.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.usb_policy/Objects", "/ves.io.schema.usb_policy/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.usb_policy.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.usb_policy.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.usb_policy.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.usb_policy/Object/{object_uid}", "/ves.io.schema.usb_policy/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.usb_policy.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.usb_policy.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.usb_policy.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.usb_policy/Object/{object_uid}", "/ves.io.schema.usb_policy/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.usb_policy.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.usb_policy.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.usb_policy.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.usb_policy/Objects", "/ves.io.schema.usb_policy/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.usb_policy.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.usb_policy.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.usb_policy.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.usb_policy/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.usb_policy.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.usb_policy.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.usb_policy.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.usb_policy/Object/{object_uid}", "/ves.io.schema.usb_policy/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.usb_policy.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.usb_policy.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.usb_policy.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.usb_policy.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.usb_policy.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.usb_policy.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.usb_policy.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.usb_policy.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.usb_policy.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.usb_policy.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.usb_policy.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.usb_policy.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.usb_policy.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.user"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/user",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.user"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/user/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/user/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/user/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.user.Object"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(4),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.name")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.user.Object.metadata.name"] = keyInfo
	}
	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(4),
	}
	oInfo.KeysInfo[svcfw.FldName("spec.gc_spec.email")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.user.Object.spec.gc_spec.email"] = keyInfo
	}
	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(4),
	}
	oInfo.KeysInfo[svcfw.FldName("system_metadata.tenant")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.user.Object.system_metadata.tenant"] = keyInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.user.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.user.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/user/private_customapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/user/private_customapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/user/private_customapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "CustomPrivateAPI",
		ServiceType: "CUSTOM_PRIVATE",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.user.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "CascadeDelete",
		InMsgType:    "ves.io.schema.user.PrivateCascadeDeleteRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.user.CascadeDeleteResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema/introspect/write/namespaces/{namespace}/users/cascade_delete"}}
	aInfo.RPCsInfo[svcfw.RPCName("CascadeDelete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.user.CustomPrivateAPI.CascadeDelete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "UpdateLastLogin",
		InMsgType:    "ves.io.schema.user.LastLoginUpdateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.user.LastLoginUpdateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/private/custom/namespaces/system/users/update_last_login", "/ves.io.schema/introspect/write/private/custom/namespaces/system/users/update_last_login"}}
	aInfo.RPCsInfo[svcfw.RPCName("UpdateLastLogin")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.user.CustomPrivateAPI.UpdateLastLogin"] = rpcInfo
	}

	fInfo.APIsInfo["CustomPrivateAPI"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.user.CustomPrivateAPI"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "LastLoginUpdateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user.LastLoginUpdateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "LastLoginUpdateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user.LastLoginUpdateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "PrivateCascadeDeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user.PrivateCascadeDeleteRequest"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/user/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/user/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/user/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.user.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.user.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.user.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/users"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.user.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.user.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.user.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/users/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.user.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.user.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.user.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/users"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.user.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.user.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.user.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/users/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.user.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.user.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/user/public_customapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/user/public_customapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/user/public_customapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "CustomAPI",
		ServiceType: "CUSTOM_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.user.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "AcceptTOS",
		InMsgType:    "ves.io.schema.user.AcceptTOSRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.user.AcceptTOSResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/custom/namespaces/{namespace}/accept_tos"}}
	aInfo.RPCsInfo[svcfw.RPCName("AcceptTOS")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.user.CustomAPI.AcceptTOS"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "AssignRole",
		InMsgType:    "ves.io.schema.user.AssignRoleRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.user.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/custom/namespaces/{namespace}/role_users"}}
	aInfo.RPCsInfo[svcfw.RPCName("AssignRole")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.user.CustomAPI.AssignRole"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "CascadeDelete",
		InMsgType:    "ves.io.schema.user.CascadeDeleteRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.user.CascadeDeleteResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/custom/namespaces/{namespace}/users/cascade_delete"}}
	aInfo.RPCsInfo[svcfw.RPCName("CascadeDelete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.user.CustomAPI.CascadeDelete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.user.UserRoleRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.user.Object",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/custom/namespaces/{namespace}/user_roles"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.user.CustomAPI.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.user.GetUserRoleRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.user.GetUserRoleResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/custom/namespaces/{namespace}/whoami"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.user.CustomAPI.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "GetTOS",
		InMsgType:    "ves.io.schema.user.GetTOSRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.user.GetTOSResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/custom/namespaces/{namespace}/tos"}}
	aInfo.RPCsInfo[svcfw.RPCName("GetTOS")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.user.CustomAPI.GetTOS"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.user.ListUserRoleRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.user.ListUserRoleResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/custom/namespaces/{namespace}/user_roles"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.user.CustomAPI.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.user.UserRoleRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.user.Object",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/custom/namespaces/{namespace}/user_roles/{name}"}, "PUT": []string{"/public/custom/namespaces/{namespace}/user_roles"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.user.CustomAPI.Replace"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ResetPassword",
		InMsgType:    "ves.io.schema.user.Empty",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.user.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/custom/password/reset"}}
	aInfo.RPCsInfo[svcfw.RPCName("ResetPassword")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.user.CustomAPI.ResetPassword"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ResetPasswordByAdmin",
		InMsgType:    "ves.io.schema.user.ResetPasswordByAdminRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.user.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/custom/password/admin_reset"}}
	aInfo.RPCsInfo[svcfw.RPCName("ResetPasswordByAdmin")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.user.CustomAPI.ResetPasswordByAdmin"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "SendPasswordEmail",
		InMsgType:    "ves.io.schema.user.SendPasswordEmailRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.user.SendPasswordEmailResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/custom/namespaces/{namespace}/send_password_email"}}
	aInfo.RPCsInfo[svcfw.RPCName("SendPasswordEmail")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.user.CustomAPI.SendPasswordEmail"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "SyncUser",
		InMsgType:    "ves.io.schema.user.Empty",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.user.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/custom/idm/user/sync"}}
	aInfo.RPCsInfo[svcfw.RPCName("SyncUser")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.user.CustomAPI.SyncUser"] = rpcInfo
	}

	fInfo.APIsInfo["CustomAPI"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.user.CustomAPI"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "AcceptTOSRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user.AcceptTOSRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AcceptTOSResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user.AcceptTOSResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AssignRoleRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user.AssignRoleRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "BillingFeatureIndicator",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user.BillingFeatureIndicator"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CascadeDeleteItemType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user.CascadeDeleteItemType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CascadeDeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user.CascadeDeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CascadeDeleteResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user.CascadeDeleteResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "Empty",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user.Empty"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "FeatureFlagType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user.FeatureFlagType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetTOSRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user.GetTOSRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetTOSResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user.GetTOSResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetUserRoleRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user.GetUserRoleRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetUserRoleResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user.GetUserRoleResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListUserRoleRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user.ListUserRoleRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListUserRoleResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user.ListUserRoleResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListUserRoleResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user.ListUserRoleResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "NamespaceRoleType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user.NamespaceRoleType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "NamespacesRoleType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user.NamespacesRoleType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ResetPasswordByAdminRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user.ResetPasswordByAdminRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SendPasswordEmailRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user.SendPasswordEmailRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SendPasswordEmailResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user.SendPasswordEmailResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "UserRoleRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user.UserRoleRequest"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/user/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/user/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/user/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user.ReplaceSpecType"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.user.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/user/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.user.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/user/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/user/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/user/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.user.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.user.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.user.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.user/Objects", "/ves.io.schema.user/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.user.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.user.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.user.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.user/Object/{object_uid}", "/ves.io.schema.user/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.user.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.user.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.user.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.user/Object/{object_uid}", "/ves.io.schema.user/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.user.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.user.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.user.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.user/Objects", "/ves.io.schema.user/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.user.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.user.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.user.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.user/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.user.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.user.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.user.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.user/Object/{object_uid}", "/ves.io.schema.user/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.user.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.user.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.user_identification"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/user_identification",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.user_identification"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/user_identification/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/user_identification/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/user_identification/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.user_identification.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.user_identification.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.user_identification.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user_identification.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/user_identification/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/user_identification/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/user_identification/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.user_identification.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.user_identification.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.user_identification.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/user_identifications"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.user_identification.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.user_identification.DeleteRequest",
		InStreaming:  false,
		OutMsgType:   "google.protobuf.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/user_identifications/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.user_identification.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.user_identification.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.user_identification.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/user_identifications/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.user_identification.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.user_identification.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.user_identification.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/user_identifications"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.user_identification.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.user_identification.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.user_identification.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/user_identifications/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.user_identification.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.user_identification.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user_identification.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user_identification.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user_identification.DeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user_identification.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user_identification.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user_identification.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user_identification.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user_identification.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user_identification.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user_identification.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/user_identification/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/user_identification/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/user_identification/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user_identification.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user_identification.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user_identification.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user_identification.ReplaceSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "UserIdentificationRule",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user_identification.UserIdentificationRule"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.user_identification.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/user_identification/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.user_identification.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/user_identification/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/user_identification/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/user_identification/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.user_identification.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.user_identification.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.user_identification.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.user_identification/Objects", "/ves.io.schema.user_identification/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.user_identification.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.user_identification.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.user_identification.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.user_identification/Object/{object_uid}", "/ves.io.schema.user_identification/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.user_identification.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.user_identification.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.user_identification.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.user_identification/Object/{object_uid}", "/ves.io.schema.user_identification/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.user_identification.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.user_identification.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.user_identification.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.user_identification/Objects", "/ves.io.schema.user_identification/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.user_identification.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.user_identification.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.user_identification.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.user_identification/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.user_identification.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.user_identification.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.user_identification.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.user_identification/Object/{object_uid}", "/ves.io.schema.user_identification/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.user_identification.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.user_identification.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user_identification.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user_identification.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user_identification.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user_identification.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user_identification.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user_identification.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user_identification.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user_identification.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user_identification.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user_identification.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.user_identification.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.vesenv"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.vesenv"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/vesenv/all_api_groups.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/vesenv/all_api_groups.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/vesenv/all_api_groups.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "APIGroupChoice",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.vesenv.APIGroupChoice"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/vesenv/all_route_targets.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/vesenv/all_route_targets.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/vesenv/all_route_targets.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "RouteTargetChoice",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.vesenv.RouteTargetChoice"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/vesenv/all_services.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/vesenv/all_services.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/vesenv/all_services.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ServiceChoice",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.vesenv.ServiceChoice"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/vesenv/options.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/vesenv/options.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/vesenv/options.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "APIGroupElementInfo",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.vesenv.APIGroupElementInfo"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "APIGroupElementItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.vesenv.APIGroupElementItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "APIGroupNameMap",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.vesenv.APIGroupNameMap"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "APIGroupNameMapItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.vesenv.APIGroupNameMapItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "BFSecretChoice",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.vesenv.BFSecretChoice"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "BFSecretInfo",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.vesenv.BFSecretInfo"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "NameToUid",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.vesenv.NameToUid"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "QuotaResourceKeyInfo",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.vesenv.QuotaResourceKeyInfo"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReEncryptSecretItemType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.vesenv.ReEncryptSecretItemType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReEncryptSecretsType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.vesenv.ReEncryptSecretsType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "RouteTargetInfo",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.vesenv.RouteTargetInfo"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ServiceInfo",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.vesenv.ServiceInfo"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ServiceSlugChoice",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.vesenv.ServiceSlugChoice"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ServiceSlugInfo",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.vesenv.ServiceSlugInfo"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/vesenv/quota_resource_keys.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/vesenv/quota_resource_keys.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/vesenv/quota_resource_keys.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "QuotaResourceKeyChoice",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.vesenv.QuotaResourceKeyChoice"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.views"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.views"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/views/site_types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/views/site_types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/views/site_types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "AWSVPCOneInterfaceNodeType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.AWSVPCOneInterfaceNodeType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AWSVPCParamsType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.AWSVPCParamsType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AWSVPCTwoInterfaceNodeType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.AWSVPCTwoInterfaceNodeType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AWSVPCchoiceType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.AWSVPCchoiceType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AllowedVIPPorts",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.AllowedVIPPorts"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AzureSubnetChoiceType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.AzureSubnetChoiceType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AzureSubnetType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.AzureSubnetType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AzureVnetChoiceType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.AzureVnetChoiceType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AzureVnetOneInterfaceNodeARType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.AzureVnetOneInterfaceNodeARType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AzureVnetOneInterfaceNodeType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.AzureVnetOneInterfaceNodeType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AzureVnetParamsType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.AzureVnetParamsType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AzureVnetTwoInterfaceNodeARType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.AzureVnetTwoInterfaceNodeARType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AzureVnetTwoInterfaceNodeType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.AzureVnetTwoInterfaceNodeType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AzureVnetType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.AzureVnetType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CloudSubnetParamType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.CloudSubnetParamType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CloudSubnetType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.CloudSubnetType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CustomPorts",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.CustomPorts"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GCPSubnetParamsType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.GCPSubnetParamsType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GCPSubnetType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.GCPSubnetType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GCPVPCNetworkAutogenerateParamsType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.GCPVPCNetworkAutogenerateParamsType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GCPVPCNetworkChoiceType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.GCPVPCNetworkChoiceType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GCPVPCNetworkParamsType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.GCPVPCNetworkParamsType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GCPVPCNetworkType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.GCPVPCNetworkType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GCPVPCSubnetChoiceType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.GCPVPCSubnetChoiceType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalNetworkConnectionListType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.GlobalNetworkConnectionListType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalNetworkConnectionType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.GlobalNetworkConnectionType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SiteStaticRoutesListType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.SiteStaticRoutesListType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SiteStaticRoutesType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.SiteStaticRoutesType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/views/storage_types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/views/storage_types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/views/storage_types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "StorageClassListType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.StorageClassListType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "StorageClassOpenebsEnterpriseType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.StorageClassOpenebsEnterpriseType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "StorageClassType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.StorageClassType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/views/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/views/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/views/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "AdvertiseCustom",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.AdvertiseCustom"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AdvertisePublic",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.AdvertisePublic"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AdvertiseSiteVsite",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.AdvertiseSiteVsite"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CustomCiphers",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.CustomCiphers"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalConnectorType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.GlobalConnectorType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectRefType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.ObjectRefType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "OperatingSystemType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.OperatingSystemType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "OriginPoolWithWeight",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.OriginPoolWithWeight"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "PrefixStringListType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.PrefixStringListType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SiteLocator",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.SiteLocator"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "TlsConfig",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.TlsConfig"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "VolterraSoftwareType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.VolterraSoftwareType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "WhereSite",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.WhereSite"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "WhereType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.WhereType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "WhereTypeSiteVsite",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.WhereTypeSiteVsite"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "WhereVK8SService",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.WhereVK8SService"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "WhereVirtualNetwork",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.WhereVirtualNetwork"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "WhereVirtualSite",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.WhereVirtualSite"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.views.aws_tgw_site"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/aws_tgw_site",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.views.aws_tgw_site"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/views/aws_tgw_site/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/views/aws_tgw_site/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/views/aws_tgw_site/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.views.aws_tgw_site.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.views.aws_tgw_site.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.views.aws_tgw_site.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_tgw_site.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/views/aws_tgw_site/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/views/aws_tgw_site/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/views/aws_tgw_site/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.views.aws_tgw_site.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.views.aws_tgw_site.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.aws_tgw_site.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/aws_tgw_sites"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.aws_tgw_site.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.views.aws_tgw_site.DeleteRequest",
		InStreaming:  false,
		OutMsgType:   "google.protobuf.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/aws_tgw_sites/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.aws_tgw_site.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.views.aws_tgw_site.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.aws_tgw_site.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/aws_tgw_sites/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.aws_tgw_site.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.views.aws_tgw_site.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.aws_tgw_site.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/aws_tgw_sites"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.aws_tgw_site.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.views.aws_tgw_site.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.aws_tgw_site.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/aws_tgw_sites/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.aws_tgw_site.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.views.aws_tgw_site.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_tgw_site.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_tgw_site.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_tgw_site.DeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_tgw_site.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_tgw_site.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_tgw_site.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_tgw_site.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_tgw_site.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_tgw_site.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_tgw_site.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/views/aws_tgw_site/public_customapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/views/aws_tgw_site/public_customapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/views/aws_tgw_site/public_customapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "CustomAPI",
		ServiceType: "CUSTOM_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.views.aws_tgw_site.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "SetTGWInfo",
		InMsgType:    "ves.io.schema.views.aws_tgw_site.SetTGWInfoRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.aws_tgw_site.SetTGWInfoResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/aws_tgw_site/{name}/set_tgw_info"}}
	aInfo.RPCsInfo[svcfw.RPCName("SetTGWInfo")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.aws_tgw_site.CustomAPI.SetTGWInfo"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "SetVIPInfo",
		InMsgType:    "ves.io.schema.views.aws_tgw_site.SetVIPInfoRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.aws_tgw_site.SetVIPInfoResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/aws_tgw_site/{name}/set_vip_info"}}
	aInfo.RPCsInfo[svcfw.RPCName("SetVIPInfo")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.aws_tgw_site.CustomAPI.SetVIPInfo"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "SetVPCIpPrefixes",
		InMsgType:    "ves.io.schema.views.aws_tgw_site.SetVPCIpPrefixesRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.aws_tgw_site.SetVPCIpPrefixesResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/aws_tgw_site/{name}/set_vpc_ip_prefixes"}}
	aInfo.RPCsInfo[svcfw.RPCName("SetVPCIpPrefixes")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.aws_tgw_site.CustomAPI.SetVPCIpPrefixes"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "SetVPNTunnels",
		InMsgType:    "ves.io.schema.views.aws_tgw_site.SetVPNTunnelsRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.aws_tgw_site.SetVPNTunnelsResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/aws_tgw_site/{name}/set_vpn_tunnels"}}
	aInfo.RPCsInfo[svcfw.RPCName("SetVPNTunnels")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.aws_tgw_site.CustomAPI.SetVPNTunnels"] = rpcInfo
	}

	fInfo.APIsInfo["CustomAPI"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.views.aws_tgw_site.CustomAPI"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SetTGWInfoRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_tgw_site.SetTGWInfoRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SetTGWInfoResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_tgw_site.SetTGWInfoResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SetVIPInfoRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_tgw_site.SetVIPInfoRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SetVIPInfoResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_tgw_site.SetVIPInfoResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SetVPCIpPrefixesRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_tgw_site.SetVPCIpPrefixesRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SetVPCIpPrefixesResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_tgw_site.SetVPCIpPrefixesResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SetVPNTunnelsRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_tgw_site.SetVPNTunnelsRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SetVPNTunnelsResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_tgw_site.SetVPNTunnelsResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/views/aws_tgw_site/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/views/aws_tgw_site/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/views/aws_tgw_site/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "AWSTGWInfoConfigType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_tgw_site.AWSTGWInfoConfigType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AWSVPNTunnelConfigType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_tgw_site.AWSVPNTunnelConfigType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ActiveServicePoliciesType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_tgw_site.ActiveServicePoliciesType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_tgw_site.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ExistingTGWType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_tgw_site.ExistingTGWType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_tgw_site.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_tgw_site.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_tgw_site.ReplaceSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SecurityConfigType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_tgw_site.SecurityConfigType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ServicesVPCType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_tgw_site.ServicesVPCType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "TGWAssignedASNType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_tgw_site.TGWAssignedASNType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "TGWParamsType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_tgw_site.TGWParamsType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "VPCAttachmentListType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_tgw_site.VPCAttachmentListType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "VPCAttachmentType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_tgw_site.VPCAttachmentType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "VPCIpPrefixesType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_tgw_site.VPCIpPrefixesType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "VnConfiguration",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_tgw_site.VnConfiguration"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.views.aws_tgw_site.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/aws_tgw_site/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.views.aws_tgw_site.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/views/aws_tgw_site/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/views/aws_tgw_site/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/views/aws_tgw_site/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.views.aws_tgw_site.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.views.aws_tgw_site.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.aws_tgw_site.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.views.aws_tgw_site/Objects", "/ves.io.schema.views.aws_tgw_site/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.aws_tgw_site.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.views.aws_tgw_site.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.aws_tgw_site.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.views.aws_tgw_site/Object/{object_uid}", "/ves.io.schema.views.aws_tgw_site/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.aws_tgw_site.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.views.aws_tgw_site.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.aws_tgw_site.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.aws_tgw_site/Object/{object_uid}", "/ves.io.schema.views.aws_tgw_site/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.aws_tgw_site.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.views.aws_tgw_site.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.aws_tgw_site.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.aws_tgw_site/Objects", "/ves.io.schema.views.aws_tgw_site/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.aws_tgw_site.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.views.aws_tgw_site.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.aws_tgw_site.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.aws_tgw_site/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.aws_tgw_site.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.views.aws_tgw_site.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.aws_tgw_site.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.views.aws_tgw_site/Object/{object_uid}", "/ves.io.schema.views.aws_tgw_site/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.aws_tgw_site.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.views.aws_tgw_site.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_tgw_site.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_tgw_site.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_tgw_site.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_tgw_site.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_tgw_site.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_tgw_site.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_tgw_site.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_tgw_site.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_tgw_site.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_tgw_site.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_tgw_site.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.views.aws_vpc_site"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/aws_vpc_site",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.views.aws_vpc_site"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/views/aws_vpc_site/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/views/aws_vpc_site/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/views/aws_vpc_site/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.views.aws_vpc_site.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.views.aws_vpc_site.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.views.aws_vpc_site.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_vpc_site.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/views/aws_vpc_site/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/views/aws_vpc_site/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/views/aws_vpc_site/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.views.aws_vpc_site.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.views.aws_vpc_site.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.aws_vpc_site.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/aws_vpc_sites"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.aws_vpc_site.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.views.aws_vpc_site.DeleteRequest",
		InStreaming:  false,
		OutMsgType:   "google.protobuf.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/aws_vpc_sites/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.aws_vpc_site.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.views.aws_vpc_site.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.aws_vpc_site.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/aws_vpc_sites/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.aws_vpc_site.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.views.aws_vpc_site.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.aws_vpc_site.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/aws_vpc_sites"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.aws_vpc_site.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.views.aws_vpc_site.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.aws_vpc_site.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/aws_vpc_sites/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.aws_vpc_site.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.views.aws_vpc_site.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_vpc_site.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_vpc_site.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_vpc_site.DeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_vpc_site.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_vpc_site.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_vpc_site.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_vpc_site.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_vpc_site.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_vpc_site.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_vpc_site.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/views/aws_vpc_site/public_customapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/views/aws_vpc_site/public_customapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/views/aws_vpc_site/public_customapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "CustomAPI",
		ServiceType: "CUSTOM_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.views.aws_vpc_site.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "SetVIPInfo",
		InMsgType:    "ves.io.schema.views.aws_vpc_site.SetVIPInfoRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.aws_vpc_site.SetVIPInfoResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/aws_vpc_site/{name}/set_vip_info"}}
	aInfo.RPCsInfo[svcfw.RPCName("SetVIPInfo")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.aws_vpc_site.CustomAPI.SetVIPInfo"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "SetVPCK8SHostnames",
		InMsgType:    "ves.io.schema.views.aws_vpc_site.SetVPCK8SHostnamesRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.aws_vpc_site.SetVPCK8SHostnamesResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/aws_vpc_site/{name}/storage/set_vpc_k8s_hostnames"}}
	aInfo.RPCsInfo[svcfw.RPCName("SetVPCK8SHostnames")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.aws_vpc_site.CustomAPI.SetVPCK8SHostnames"] = rpcInfo
	}

	fInfo.APIsInfo["CustomAPI"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.views.aws_vpc_site.CustomAPI"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SetVIPInfoRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_vpc_site.SetVIPInfoRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SetVIPInfoResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_vpc_site.SetVIPInfoResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SetVPCK8SHostnamesRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_vpc_site.SetVPCK8SHostnamesRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SetVPCK8SHostnamesResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_vpc_site.SetVPCK8SHostnamesResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/views/aws_vpc_site/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/views/aws_vpc_site/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/views/aws_vpc_site/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "AWSVPCIngressEgressGwReplaceType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_vpc_site.AWSVPCIngressEgressGwReplaceType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AWSVPCIngressEgressGwType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_vpc_site.AWSVPCIngressEgressGwType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AWSVPCIngressGwReplaceType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_vpc_site.AWSVPCIngressGwReplaceType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AWSVPCIngressGwType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_vpc_site.AWSVPCIngressGwType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AWSVPCVoltstackClusterReplaceType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_vpc_site.AWSVPCVoltstackClusterReplaceType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AWSVPCVoltstackClusterType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_vpc_site.AWSVPCVoltstackClusterType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_vpc_site.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_vpc_site.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_vpc_site.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_vpc_site.ReplaceSpecType"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.views.aws_vpc_site.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/aws_vpc_site/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.views.aws_vpc_site.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/views/aws_vpc_site/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/views/aws_vpc_site/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/views/aws_vpc_site/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.views.aws_vpc_site.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.views.aws_vpc_site.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.aws_vpc_site.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.views.aws_vpc_site/Objects", "/ves.io.schema.views.aws_vpc_site/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.aws_vpc_site.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.views.aws_vpc_site.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.aws_vpc_site.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.views.aws_vpc_site/Object/{object_uid}", "/ves.io.schema.views.aws_vpc_site/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.aws_vpc_site.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.views.aws_vpc_site.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.aws_vpc_site.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.aws_vpc_site/Object/{object_uid}", "/ves.io.schema.views.aws_vpc_site/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.aws_vpc_site.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.views.aws_vpc_site.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.aws_vpc_site.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.aws_vpc_site/Objects", "/ves.io.schema.views.aws_vpc_site/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.aws_vpc_site.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.views.aws_vpc_site.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.aws_vpc_site.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.aws_vpc_site/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.aws_vpc_site.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.views.aws_vpc_site.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.aws_vpc_site.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.views.aws_vpc_site/Object/{object_uid}", "/ves.io.schema.views.aws_vpc_site/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.aws_vpc_site.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.views.aws_vpc_site.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_vpc_site.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_vpc_site.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_vpc_site.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_vpc_site.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_vpc_site.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_vpc_site.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_vpc_site.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_vpc_site.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_vpc_site.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_vpc_site.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.aws_vpc_site.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.views.azure_vnet_site"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/azure_vnet_site",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.views.azure_vnet_site"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/views/azure_vnet_site/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/views/azure_vnet_site/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/views/azure_vnet_site/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.views.azure_vnet_site.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.views.azure_vnet_site.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.views.azure_vnet_site.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.azure_vnet_site.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/views/azure_vnet_site/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/views/azure_vnet_site/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/views/azure_vnet_site/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.views.azure_vnet_site.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.views.azure_vnet_site.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.azure_vnet_site.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/azure_vnet_sites"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.azure_vnet_site.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.views.azure_vnet_site.DeleteRequest",
		InStreaming:  false,
		OutMsgType:   "google.protobuf.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/azure_vnet_sites/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.azure_vnet_site.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.views.azure_vnet_site.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.azure_vnet_site.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/azure_vnet_sites/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.azure_vnet_site.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.views.azure_vnet_site.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.azure_vnet_site.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/azure_vnet_sites"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.azure_vnet_site.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.views.azure_vnet_site.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.azure_vnet_site.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/azure_vnet_sites/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.azure_vnet_site.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.views.azure_vnet_site.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.azure_vnet_site.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.azure_vnet_site.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.azure_vnet_site.DeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.azure_vnet_site.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.azure_vnet_site.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.azure_vnet_site.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.azure_vnet_site.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.azure_vnet_site.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.azure_vnet_site.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.azure_vnet_site.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/views/azure_vnet_site/public_customapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/views/azure_vnet_site/public_customapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/views/azure_vnet_site/public_customapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "CustomAPI",
		ServiceType: "CUSTOM_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.views.azure_vnet_site.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "SetVIPInfo",
		InMsgType:    "ves.io.schema.views.azure_vnet_site.SetVIPInfoRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.azure_vnet_site.SetVIPInfoResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/azure_vnet_site/{name}/set_vip_info"}}
	aInfo.RPCsInfo[svcfw.RPCName("SetVIPInfo")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.azure_vnet_site.CustomAPI.SetVIPInfo"] = rpcInfo
	}

	fInfo.APIsInfo["CustomAPI"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.views.azure_vnet_site.CustomAPI"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SetVIPInfoRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.azure_vnet_site.SetVIPInfoRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SetVIPInfoResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.azure_vnet_site.SetVIPInfoResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/views/azure_vnet_site/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/views/azure_vnet_site/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/views/azure_vnet_site/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "AzureVnetIngressEgressGwARReplaceType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.azure_vnet_site.AzureVnetIngressEgressGwARReplaceType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AzureVnetIngressEgressGwARType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.azure_vnet_site.AzureVnetIngressEgressGwARType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AzureVnetIngressEgressGwReplaceType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.azure_vnet_site.AzureVnetIngressEgressGwReplaceType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AzureVnetIngressEgressGwType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.azure_vnet_site.AzureVnetIngressEgressGwType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AzureVnetIngressGwARReplaceType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.azure_vnet_site.AzureVnetIngressGwARReplaceType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AzureVnetIngressGwARType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.azure_vnet_site.AzureVnetIngressGwARType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AzureVnetIngressGwReplaceType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.azure_vnet_site.AzureVnetIngressGwReplaceType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AzureVnetIngressGwType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.azure_vnet_site.AzureVnetIngressGwType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AzureVnetVoltstackClusterARReplaceType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.azure_vnet_site.AzureVnetVoltstackClusterARReplaceType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AzureVnetVoltstackClusterARType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.azure_vnet_site.AzureVnetVoltstackClusterARType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AzureVnetVoltstackClusterReplaceType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.azure_vnet_site.AzureVnetVoltstackClusterReplaceType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AzureVnetVoltstackClusterType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.azure_vnet_site.AzureVnetVoltstackClusterType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.azure_vnet_site.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.azure_vnet_site.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.azure_vnet_site.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.azure_vnet_site.ReplaceSpecType"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.views.azure_vnet_site.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/azure_vnet_site/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.views.azure_vnet_site.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/views/azure_vnet_site/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/views/azure_vnet_site/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/views/azure_vnet_site/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.views.azure_vnet_site.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.views.azure_vnet_site.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.azure_vnet_site.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.views.azure_vnet_site/Objects", "/ves.io.schema.views.azure_vnet_site/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.azure_vnet_site.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.views.azure_vnet_site.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.azure_vnet_site.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.views.azure_vnet_site/Object/{object_uid}", "/ves.io.schema.views.azure_vnet_site/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.azure_vnet_site.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.views.azure_vnet_site.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.azure_vnet_site.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.azure_vnet_site/Object/{object_uid}", "/ves.io.schema.views.azure_vnet_site/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.azure_vnet_site.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.views.azure_vnet_site.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.azure_vnet_site.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.azure_vnet_site/Objects", "/ves.io.schema.views.azure_vnet_site/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.azure_vnet_site.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.views.azure_vnet_site.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.azure_vnet_site.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.azure_vnet_site/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.azure_vnet_site.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.views.azure_vnet_site.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.azure_vnet_site.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.views.azure_vnet_site/Object/{object_uid}", "/ves.io.schema.views.azure_vnet_site/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.azure_vnet_site.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.views.azure_vnet_site.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.azure_vnet_site.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.azure_vnet_site.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.azure_vnet_site.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.azure_vnet_site.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.azure_vnet_site.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.azure_vnet_site.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.azure_vnet_site.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.azure_vnet_site.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.azure_vnet_site.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.azure_vnet_site.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.azure_vnet_site.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.views.forward_proxy_policy"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/forward_proxy_policy",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.views.forward_proxy_policy"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/views/forward_proxy_policy/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/views/forward_proxy_policy/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/views/forward_proxy_policy/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.views.forward_proxy_policy.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.views.forward_proxy_policy.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.views.forward_proxy_policy.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.forward_proxy_policy.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/views/forward_proxy_policy/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/views/forward_proxy_policy/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/views/forward_proxy_policy/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.views.forward_proxy_policy.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.views.forward_proxy_policy.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.forward_proxy_policy.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/forward_proxy_policys"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.forward_proxy_policy.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.views.forward_proxy_policy.DeleteRequest",
		InStreaming:  false,
		OutMsgType:   "google.protobuf.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/forward_proxy_policys/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.forward_proxy_policy.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.views.forward_proxy_policy.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.forward_proxy_policy.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/forward_proxy_policys/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.forward_proxy_policy.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.views.forward_proxy_policy.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.forward_proxy_policy.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/forward_proxy_policys"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.forward_proxy_policy.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.views.forward_proxy_policy.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.forward_proxy_policy.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/forward_proxy_policys/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.forward_proxy_policy.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.views.forward_proxy_policy.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.forward_proxy_policy.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.forward_proxy_policy.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.forward_proxy_policy.DeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.forward_proxy_policy.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.forward_proxy_policy.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.forward_proxy_policy.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.forward_proxy_policy.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.forward_proxy_policy.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.forward_proxy_policy.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.forward_proxy_policy.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/views/forward_proxy_policy/public_custom_data_api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/views/forward_proxy_policy/public_custom_data_api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/views/forward_proxy_policy/public_custom_data_api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "CustomDataAPI",
		ServiceType: "CUSTOM_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.views.forward_proxy_policy.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "ForwardProxyPolicyHits",
		InMsgType:    "ves.io.schema.views.forward_proxy_policy.ForwardProxyPolicyHitsRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.forward_proxy_policy.ForwardProxyPolicyHitsResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/forward_proxy_policy/hits"}}
	aInfo.RPCsInfo[svcfw.RPCName("ForwardProxyPolicyHits")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.forward_proxy_policy.CustomDataAPI.ForwardProxyPolicyHits"] = rpcInfo
	}

	fInfo.APIsInfo["CustomDataAPI"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.views.forward_proxy_policy.CustomDataAPI"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ForwardProxyPolicyHits",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.forward_proxy_policy.ForwardProxyPolicyHits"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ForwardProxyPolicyHitsId",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.forward_proxy_policy.ForwardProxyPolicyHitsId"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ForwardProxyPolicyHitsRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.forward_proxy_policy.ForwardProxyPolicyHitsRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ForwardProxyPolicyHitsResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.forward_proxy_policy.ForwardProxyPolicyHitsResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ForwardProxyPolicyMetricLabelFilter",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.forward_proxy_policy.ForwardProxyPolicyMetricLabelFilter"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/views/forward_proxy_policy/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/views/forward_proxy_policy/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/views/forward_proxy_policy/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.forward_proxy_policy.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DomainListType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.forward_proxy_policy.DomainListType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ForwardProxyAdvancedRuleType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.forward_proxy_policy.ForwardProxyAdvancedRuleType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ForwardProxyRuleListType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.forward_proxy_policy.ForwardProxyRuleListType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ForwardProxySimpleRuleType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.forward_proxy_policy.ForwardProxySimpleRuleType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.forward_proxy_policy.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.forward_proxy_policy.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.forward_proxy_policy.ReplaceSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "URLListType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.forward_proxy_policy.URLListType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "URLType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.forward_proxy_policy.URLType"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.views.forward_proxy_policy.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/forward_proxy_policy/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.views.forward_proxy_policy.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/views/forward_proxy_policy/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/views/forward_proxy_policy/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/views/forward_proxy_policy/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.views.forward_proxy_policy.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.views.forward_proxy_policy.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.forward_proxy_policy.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.views.forward_proxy_policy/Objects", "/ves.io.schema.views.forward_proxy_policy/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.forward_proxy_policy.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.views.forward_proxy_policy.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.forward_proxy_policy.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.views.forward_proxy_policy/Object/{object_uid}", "/ves.io.schema.views.forward_proxy_policy/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.forward_proxy_policy.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.views.forward_proxy_policy.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.forward_proxy_policy.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.forward_proxy_policy/Object/{object_uid}", "/ves.io.schema.views.forward_proxy_policy/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.forward_proxy_policy.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.views.forward_proxy_policy.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.forward_proxy_policy.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.forward_proxy_policy/Objects", "/ves.io.schema.views.forward_proxy_policy/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.forward_proxy_policy.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.views.forward_proxy_policy.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.forward_proxy_policy.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.forward_proxy_policy/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.forward_proxy_policy.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.views.forward_proxy_policy.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.forward_proxy_policy.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.views.forward_proxy_policy/Object/{object_uid}", "/ves.io.schema.views.forward_proxy_policy/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.forward_proxy_policy.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.views.forward_proxy_policy.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.forward_proxy_policy.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.forward_proxy_policy.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.forward_proxy_policy.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.forward_proxy_policy.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.forward_proxy_policy.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.forward_proxy_policy.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.forward_proxy_policy.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.forward_proxy_policy.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.forward_proxy_policy.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.forward_proxy_policy.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.forward_proxy_policy.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.views.gcp_vpc_site"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/gcp_vpc_site",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.views.gcp_vpc_site"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/views/gcp_vpc_site/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/views/gcp_vpc_site/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/views/gcp_vpc_site/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.views.gcp_vpc_site.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.views.gcp_vpc_site.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.views.gcp_vpc_site.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.gcp_vpc_site.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/views/gcp_vpc_site/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/views/gcp_vpc_site/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/views/gcp_vpc_site/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.views.gcp_vpc_site.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.views.gcp_vpc_site.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.gcp_vpc_site.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/gcp_vpc_sites"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.gcp_vpc_site.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.views.gcp_vpc_site.DeleteRequest",
		InStreaming:  false,
		OutMsgType:   "google.protobuf.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/gcp_vpc_sites/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.gcp_vpc_site.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.views.gcp_vpc_site.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.gcp_vpc_site.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/gcp_vpc_sites/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.gcp_vpc_site.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.views.gcp_vpc_site.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.gcp_vpc_site.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/gcp_vpc_sites"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.gcp_vpc_site.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.views.gcp_vpc_site.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.gcp_vpc_site.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/gcp_vpc_sites/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.gcp_vpc_site.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.views.gcp_vpc_site.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.gcp_vpc_site.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.gcp_vpc_site.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.gcp_vpc_site.DeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.gcp_vpc_site.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.gcp_vpc_site.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.gcp_vpc_site.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.gcp_vpc_site.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.gcp_vpc_site.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.gcp_vpc_site.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.gcp_vpc_site.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/views/gcp_vpc_site/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/views/gcp_vpc_site/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/views/gcp_vpc_site/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.gcp_vpc_site.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GCPVPCIngressEgressGwReplaceType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.gcp_vpc_site.GCPVPCIngressEgressGwReplaceType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GCPVPCIngressEgressGwType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.gcp_vpc_site.GCPVPCIngressEgressGwType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GCPVPCIngressGwReplaceType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.gcp_vpc_site.GCPVPCIngressGwReplaceType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GCPVPCIngressGwType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.gcp_vpc_site.GCPVPCIngressGwType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GCPVPCVoltstackClusterReplaceType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.gcp_vpc_site.GCPVPCVoltstackClusterReplaceType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GCPVPCVoltstackClusterType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.gcp_vpc_site.GCPVPCVoltstackClusterType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.gcp_vpc_site.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.gcp_vpc_site.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.gcp_vpc_site.ReplaceSpecType"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.views.gcp_vpc_site.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/gcp_vpc_site/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.views.gcp_vpc_site.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/views/gcp_vpc_site/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/views/gcp_vpc_site/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/views/gcp_vpc_site/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.views.gcp_vpc_site.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.views.gcp_vpc_site.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.gcp_vpc_site.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.views.gcp_vpc_site/Objects", "/ves.io.schema.views.gcp_vpc_site/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.gcp_vpc_site.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.views.gcp_vpc_site.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.gcp_vpc_site.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.views.gcp_vpc_site/Object/{object_uid}", "/ves.io.schema.views.gcp_vpc_site/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.gcp_vpc_site.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.views.gcp_vpc_site.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.gcp_vpc_site.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.gcp_vpc_site/Object/{object_uid}", "/ves.io.schema.views.gcp_vpc_site/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.gcp_vpc_site.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.views.gcp_vpc_site.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.gcp_vpc_site.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.gcp_vpc_site/Objects", "/ves.io.schema.views.gcp_vpc_site/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.gcp_vpc_site.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.views.gcp_vpc_site.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.gcp_vpc_site.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.gcp_vpc_site/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.gcp_vpc_site.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.views.gcp_vpc_site.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.gcp_vpc_site.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.views.gcp_vpc_site/Object/{object_uid}", "/ves.io.schema.views.gcp_vpc_site/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.gcp_vpc_site.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.views.gcp_vpc_site.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.gcp_vpc_site.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.gcp_vpc_site.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.gcp_vpc_site.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.gcp_vpc_site.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.gcp_vpc_site.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.gcp_vpc_site.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.gcp_vpc_site.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.gcp_vpc_site.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.gcp_vpc_site.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.gcp_vpc_site.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.gcp_vpc_site.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.views.http_loadbalancer"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/http_loadbalancer",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.views.http_loadbalancer"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/views/http_loadbalancer/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/views/http_loadbalancer/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/views/http_loadbalancer/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.views.http_loadbalancer.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.views.http_loadbalancer.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.views.http_loadbalancer.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.http_loadbalancer.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/views/http_loadbalancer/public_apiep_customapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/views/http_loadbalancer/public_apiep_customapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/views/http_loadbalancer/public_apiep_customapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "ApiepLBCustomAPI",
		ServiceType: "CUSTOM_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.views.http_loadbalancer.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "GetSwaggerSpec",
		InMsgType:    "ves.io.schema.views.http_loadbalancer.SwaggerSpecReq",
		InStreaming:  false,
		OutMsgType:   "google.api.HttpBody",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/http_loadbalancers/{name}/api_endpoints/swagger_spec"}}
	aInfo.RPCsInfo[svcfw.RPCName("GetSwaggerSpec")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.http_loadbalancer.ApiepLBCustomAPI.GetSwaggerSpec"] = rpcInfo
	}

	fInfo.APIsInfo["ApiepLBCustomAPI"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.views.http_loadbalancer.ApiepLBCustomAPI"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SwaggerSpecReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.http_loadbalancer.SwaggerSpecReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SwaggerSpecRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.http_loadbalancer.SwaggerSpecRsp"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/views/http_loadbalancer/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/views/http_loadbalancer/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/views/http_loadbalancer/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.views.http_loadbalancer.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.views.http_loadbalancer.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.http_loadbalancer.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/http_loadbalancers"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.http_loadbalancer.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.views.http_loadbalancer.DeleteRequest",
		InStreaming:  false,
		OutMsgType:   "google.protobuf.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/http_loadbalancers/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.http_loadbalancer.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.views.http_loadbalancer.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.http_loadbalancer.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/http_loadbalancers/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.http_loadbalancer.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.views.http_loadbalancer.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.http_loadbalancer.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/http_loadbalancers"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.http_loadbalancer.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.views.http_loadbalancer.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.http_loadbalancer.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/http_loadbalancers/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.http_loadbalancer.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.views.http_loadbalancer.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.http_loadbalancer.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.http_loadbalancer.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.http_loadbalancer.DeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.http_loadbalancer.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.http_loadbalancer.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.http_loadbalancer.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.http_loadbalancer.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.http_loadbalancer.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.http_loadbalancer.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.http_loadbalancer.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/views/http_loadbalancer/public_customapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/views/http_loadbalancer/public_customapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/views/http_loadbalancer/public_customapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "CustomAPI",
		ServiceType: "CUSTOM_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.views.http_loadbalancer.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "GetDnsInfo",
		InMsgType:    "ves.io.schema.views.http_loadbalancer.GetDnsInfoRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.http_loadbalancer.GetDnsInfoResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/http_loadbalancers/{name}/get-dns-info"}}
	aInfo.RPCsInfo[svcfw.RPCName("GetDnsInfo")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.http_loadbalancer.CustomAPI.GetDnsInfo"] = rpcInfo
	}

	fInfo.APIsInfo["CustomAPI"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.views.http_loadbalancer.CustomAPI"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "GetDnsInfoRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.http_loadbalancer.GetDnsInfoRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetDnsInfoResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.http_loadbalancer.GetDnsInfoResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/views/http_loadbalancer/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/views/http_loadbalancer/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/views/http_loadbalancer/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "AdvancedOptionsType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.http_loadbalancer.AdvancedOptionsType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ChallengeRule",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.http_loadbalancer.ChallengeRule"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ChallengeRuleList",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.http_loadbalancer.ChallengeRuleList"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.http_loadbalancer.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CustomIpAllowedList",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.http_loadbalancer.CustomIpAllowedList"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DDoSClientSource",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.http_loadbalancer.DDoSClientSource"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DDoSMitigationRule",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.http_loadbalancer.DDoSMitigationRule"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DownstreamTlsParamsType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.http_loadbalancer.DownstreamTlsParamsType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DownstreamTlsValidationContext",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.http_loadbalancer.DownstreamTlsValidationContext"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.http_loadbalancer.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.http_loadbalancer.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "HashPolicyListType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.http_loadbalancer.HashPolicyListType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "MirrorPolicyType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.http_loadbalancer.MirrorPolicyType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "PolicyBasedChallenge",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.http_loadbalancer.PolicyBasedChallenge"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ProxyTypeHttp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.http_loadbalancer.ProxyTypeHttp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ProxyTypeHttps",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.http_loadbalancer.ProxyTypeHttps"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ProxyTypeHttpsAutoCerts",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.http_loadbalancer.ProxyTypeHttpsAutoCerts"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "RateLimitConfigType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.http_loadbalancer.RateLimitConfigType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.http_loadbalancer.ReplaceSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "RouteSimpleAdvancedOptions",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.http_loadbalancer.RouteSimpleAdvancedOptions"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "RouteType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.http_loadbalancer.RouteType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "RouteTypeCustomRoute",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.http_loadbalancer.RouteTypeCustomRoute"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "RouteTypeDirectResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.http_loadbalancer.RouteTypeDirectResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "RouteTypeRedirect",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.http_loadbalancer.RouteTypeRedirect"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "RouteTypeSimple",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.http_loadbalancer.RouteTypeSimple"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "RouteTypeSimpleWithDefaultOriginPool",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.http_loadbalancer.RouteTypeSimpleWithDefaultOriginPool"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ServicePolicyList",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.http_loadbalancer.ServicePolicyList"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SimpleClientSrcRule",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.http_loadbalancer.SimpleClientSrcRule"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.views.http_loadbalancer.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/http_loadbalancer/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.views.http_loadbalancer.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/views/http_loadbalancer/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/views/http_loadbalancer/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/views/http_loadbalancer/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.views.http_loadbalancer.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.views.http_loadbalancer.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.http_loadbalancer.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.views.http_loadbalancer/Objects", "/ves.io.schema.views.http_loadbalancer/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.http_loadbalancer.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.views.http_loadbalancer.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.http_loadbalancer.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.views.http_loadbalancer/Object/{object_uid}", "/ves.io.schema.views.http_loadbalancer/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.http_loadbalancer.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.views.http_loadbalancer.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.http_loadbalancer.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.http_loadbalancer/Object/{object_uid}", "/ves.io.schema.views.http_loadbalancer/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.http_loadbalancer.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.views.http_loadbalancer.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.http_loadbalancer.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.http_loadbalancer/Objects", "/ves.io.schema.views.http_loadbalancer/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.http_loadbalancer.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.views.http_loadbalancer.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.http_loadbalancer.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.http_loadbalancer/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.http_loadbalancer.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.views.http_loadbalancer.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.http_loadbalancer.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.views.http_loadbalancer/Object/{object_uid}", "/ves.io.schema.views.http_loadbalancer/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.http_loadbalancer.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.views.http_loadbalancer.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.http_loadbalancer.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.http_loadbalancer.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.http_loadbalancer.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.http_loadbalancer.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.http_loadbalancer.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.http_loadbalancer.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.http_loadbalancer.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.http_loadbalancer.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.http_loadbalancer.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.http_loadbalancer.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.http_loadbalancer.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.views.network_policy_view"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/network_policy_view",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.views.network_policy_view"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/views/network_policy_view/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/views/network_policy_view/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/views/network_policy_view/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.views.network_policy_view.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.views.network_policy_view.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.views.network_policy_view.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.network_policy_view.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/views/network_policy_view/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/views/network_policy_view/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/views/network_policy_view/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.views.network_policy_view.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.views.network_policy_view.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.network_policy_view.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/network_policy_views"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.network_policy_view.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.views.network_policy_view.DeleteRequest",
		InStreaming:  false,
		OutMsgType:   "google.protobuf.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/network_policy_views/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.network_policy_view.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.views.network_policy_view.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.network_policy_view.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/network_policy_views/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.network_policy_view.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.views.network_policy_view.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.network_policy_view.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/network_policy_views"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.network_policy_view.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.views.network_policy_view.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.network_policy_view.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/network_policy_views/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.network_policy_view.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.views.network_policy_view.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.network_policy_view.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.network_policy_view.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.network_policy_view.DeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.network_policy_view.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.network_policy_view.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.network_policy_view.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.network_policy_view.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.network_policy_view.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.network_policy_view.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.network_policy_view.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/views/network_policy_view/public_custom_data_api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/views/network_policy_view/public_custom_data_api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/views/network_policy_view/public_custom_data_api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "CustomDataAPI",
		ServiceType: "CUSTOM_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.views.network_policy_view.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "NetworkPolicyHits",
		InMsgType:    "ves.io.schema.views.network_policy_view.NetworkPolicyHitsRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.network_policy_view.NetworkPolicyHitsResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/network_policy_view/hits"}}
	aInfo.RPCsInfo[svcfw.RPCName("NetworkPolicyHits")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.network_policy_view.CustomDataAPI.NetworkPolicyHits"] = rpcInfo
	}

	fInfo.APIsInfo["CustomDataAPI"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.views.network_policy_view.CustomDataAPI"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "NetworkPolicyHits",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.network_policy_view.NetworkPolicyHits"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "NetworkPolicyHitsId",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.network_policy_view.NetworkPolicyHitsId"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "NetworkPolicyHitsRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.network_policy_view.NetworkPolicyHitsRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "NetworkPolicyHitsResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.network_policy_view.NetworkPolicyHitsResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "NetworkPolicyMetricLabelFilter",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.network_policy_view.NetworkPolicyMetricLabelFilter"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/views/network_policy_view/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/views/network_policy_view/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/views/network_policy_view/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.network_policy_view.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.network_policy_view.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.network_policy_view.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.network_policy_view.ReplaceSpecType"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.views.network_policy_view.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/network_policy_view/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.views.network_policy_view.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/views/network_policy_view/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/views/network_policy_view/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/views/network_policy_view/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.views.network_policy_view.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.views.network_policy_view.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.network_policy_view.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.views.network_policy_view/Objects", "/ves.io.schema.views.network_policy_view/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.network_policy_view.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.views.network_policy_view.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.network_policy_view.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.views.network_policy_view/Object/{object_uid}", "/ves.io.schema.views.network_policy_view/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.network_policy_view.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.views.network_policy_view.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.network_policy_view.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.network_policy_view/Object/{object_uid}", "/ves.io.schema.views.network_policy_view/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.network_policy_view.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.views.network_policy_view.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.network_policy_view.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.network_policy_view/Objects", "/ves.io.schema.views.network_policy_view/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.network_policy_view.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.views.network_policy_view.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.network_policy_view.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.network_policy_view/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.network_policy_view.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.views.network_policy_view.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.network_policy_view.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.views.network_policy_view/Object/{object_uid}", "/ves.io.schema.views.network_policy_view/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.network_policy_view.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.views.network_policy_view.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.network_policy_view.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.network_policy_view.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.network_policy_view.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.network_policy_view.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.network_policy_view.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.network_policy_view.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.network_policy_view.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.network_policy_view.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.network_policy_view.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.network_policy_view.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.network_policy_view.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.views.origin_pool"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/origin_pool",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.views.origin_pool"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/views/origin_pool/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/views/origin_pool/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/views/origin_pool/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.views.origin_pool.Object"] = oInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.origin_pool.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/views/origin_pool/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/views/origin_pool/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/views/origin_pool/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.views.origin_pool.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.views.origin_pool.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.origin_pool.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/origin_pools"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.origin_pool.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.views.origin_pool.DeleteRequest",
		InStreaming:  false,
		OutMsgType:   "google.protobuf.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/origin_pools/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.origin_pool.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.views.origin_pool.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.origin_pool.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/origin_pools/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.origin_pool.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.views.origin_pool.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.origin_pool.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/origin_pools"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.origin_pool.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.views.origin_pool.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.origin_pool.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/origin_pools/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.origin_pool.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.views.origin_pool.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.origin_pool.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.origin_pool.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.origin_pool.DeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.origin_pool.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.origin_pool.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.origin_pool.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.origin_pool.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.origin_pool.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.origin_pool.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.origin_pool.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/views/origin_pool/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/views/origin_pool/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/views/origin_pool/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.origin_pool.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.origin_pool.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.origin_pool.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "OriginPoolAdvancedOptions",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.origin_pool.OriginPoolAdvancedOptions"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "OriginPoolDefaultSubset",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.origin_pool.OriginPoolDefaultSubset"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "OriginPoolSubsets",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.origin_pool.OriginPoolSubsets"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "OriginServerConsulService",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.origin_pool.OriginServerConsulService"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "OriginServerCustomEndpoint",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.origin_pool.OriginServerCustomEndpoint"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "OriginServerK8SService",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.origin_pool.OriginServerK8SService"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "OriginServerPrivateIP",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.origin_pool.OriginServerPrivateIP"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "OriginServerPrivateName",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.origin_pool.OriginServerPrivateName"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "OriginServerPublicIP",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.origin_pool.OriginServerPublicIP"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "OriginServerPublicName",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.origin_pool.OriginServerPublicName"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "OriginServerType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.origin_pool.OriginServerType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "OriginServerVirtualNetworkIP",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.origin_pool.OriginServerVirtualNetworkIP"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "OriginServerVirtualNetworkName",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.origin_pool.OriginServerVirtualNetworkName"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.origin_pool.ReplaceSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "TlsCertificatesType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.origin_pool.TlsCertificatesType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "UpstreamTlsParameters",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.origin_pool.UpstreamTlsParameters"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "UpstreamTlsValidationContext",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.origin_pool.UpstreamTlsValidationContext"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.views.origin_pool.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/origin_pool/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.views.origin_pool.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/views/origin_pool/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/views/origin_pool/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/views/origin_pool/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.views.origin_pool.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.views.origin_pool.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.origin_pool.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.views.origin_pool/Objects", "/ves.io.schema.views.origin_pool/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.origin_pool.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.views.origin_pool.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.origin_pool.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.views.origin_pool/Object/{object_uid}", "/ves.io.schema.views.origin_pool/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.origin_pool.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.views.origin_pool.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.origin_pool.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.origin_pool/Object/{object_uid}", "/ves.io.schema.views.origin_pool/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.origin_pool.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.views.origin_pool.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.origin_pool.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.origin_pool/Objects", "/ves.io.schema.views.origin_pool/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.origin_pool.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.views.origin_pool.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.origin_pool.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.origin_pool/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.origin_pool.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.views.origin_pool.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.origin_pool.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.views.origin_pool/Object/{object_uid}", "/ves.io.schema.views.origin_pool/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.origin_pool.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.views.origin_pool.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.origin_pool.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.origin_pool.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.origin_pool.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.origin_pool.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.origin_pool.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.origin_pool.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.origin_pool.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.origin_pool.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.origin_pool.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.origin_pool.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.origin_pool.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.views.rate_limiter_policy"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/rate_limiter_policy",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.views.rate_limiter_policy"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/views/rate_limiter_policy/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/views/rate_limiter_policy/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/views/rate_limiter_policy/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.views.rate_limiter_policy.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.views.rate_limiter_policy.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.views.rate_limiter_policy.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.rate_limiter_policy.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/views/rate_limiter_policy/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/views/rate_limiter_policy/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/views/rate_limiter_policy/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.views.rate_limiter_policy.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.views.rate_limiter_policy.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.rate_limiter_policy.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/rate_limiter_policys"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.rate_limiter_policy.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.views.rate_limiter_policy.DeleteRequest",
		InStreaming:  false,
		OutMsgType:   "google.protobuf.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/rate_limiter_policys/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.rate_limiter_policy.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.views.rate_limiter_policy.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.rate_limiter_policy.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/rate_limiter_policys/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.rate_limiter_policy.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.views.rate_limiter_policy.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.rate_limiter_policy.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/rate_limiter_policys"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.rate_limiter_policy.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.views.rate_limiter_policy.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.rate_limiter_policy.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/rate_limiter_policys/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.rate_limiter_policy.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.views.rate_limiter_policy.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.rate_limiter_policy.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.rate_limiter_policy.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.rate_limiter_policy.DeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.rate_limiter_policy.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.rate_limiter_policy.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.rate_limiter_policy.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.rate_limiter_policy.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.rate_limiter_policy.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.rate_limiter_policy.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.rate_limiter_policy.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/views/rate_limiter_policy/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/views/rate_limiter_policy/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/views/rate_limiter_policy/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.rate_limiter_policy.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.rate_limiter_policy.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.rate_limiter_policy.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "PolicyList",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.rate_limiter_policy.PolicyList"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "RateLimiterRule",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.rate_limiter_policy.RateLimiterRule"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.rate_limiter_policy.ReplaceSpecType"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.views.rate_limiter_policy.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/rate_limiter_policy/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.views.rate_limiter_policy.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/views/rate_limiter_policy/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/views/rate_limiter_policy/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/views/rate_limiter_policy/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.views.rate_limiter_policy.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.views.rate_limiter_policy.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.rate_limiter_policy.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.views.rate_limiter_policy/Objects", "/ves.io.schema.views.rate_limiter_policy/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.rate_limiter_policy.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.views.rate_limiter_policy.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.rate_limiter_policy.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.views.rate_limiter_policy/Object/{object_uid}", "/ves.io.schema.views.rate_limiter_policy/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.rate_limiter_policy.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.views.rate_limiter_policy.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.rate_limiter_policy.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.rate_limiter_policy/Object/{object_uid}", "/ves.io.schema.views.rate_limiter_policy/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.rate_limiter_policy.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.views.rate_limiter_policy.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.rate_limiter_policy.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.rate_limiter_policy/Objects", "/ves.io.schema.views.rate_limiter_policy/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.rate_limiter_policy.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.views.rate_limiter_policy.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.rate_limiter_policy.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.rate_limiter_policy/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.rate_limiter_policy.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.views.rate_limiter_policy.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.rate_limiter_policy.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.views.rate_limiter_policy/Object/{object_uid}", "/ves.io.schema.views.rate_limiter_policy/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.rate_limiter_policy.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.views.rate_limiter_policy.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.rate_limiter_policy.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.rate_limiter_policy.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.rate_limiter_policy.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.rate_limiter_policy.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.rate_limiter_policy.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.rate_limiter_policy.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.rate_limiter_policy.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.rate_limiter_policy.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.rate_limiter_policy.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.rate_limiter_policy.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.rate_limiter_policy.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.views.tcp_loadbalancer"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/tcp_loadbalancer",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.views.tcp_loadbalancer"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/views/tcp_loadbalancer/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/views/tcp_loadbalancer/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/views/tcp_loadbalancer/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.views.tcp_loadbalancer.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.views.tcp_loadbalancer.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.views.tcp_loadbalancer.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.tcp_loadbalancer.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/views/tcp_loadbalancer/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/views/tcp_loadbalancer/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/views/tcp_loadbalancer/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.views.tcp_loadbalancer.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.views.tcp_loadbalancer.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.tcp_loadbalancer.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/tcp_loadbalancers"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.tcp_loadbalancer.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.views.tcp_loadbalancer.DeleteRequest",
		InStreaming:  false,
		OutMsgType:   "google.protobuf.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/tcp_loadbalancers/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.tcp_loadbalancer.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.views.tcp_loadbalancer.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.tcp_loadbalancer.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/tcp_loadbalancers/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.tcp_loadbalancer.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.views.tcp_loadbalancer.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.tcp_loadbalancer.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/tcp_loadbalancers"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.tcp_loadbalancer.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.views.tcp_loadbalancer.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.tcp_loadbalancer.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/tcp_loadbalancers/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.tcp_loadbalancer.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.views.tcp_loadbalancer.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.tcp_loadbalancer.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.tcp_loadbalancer.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.tcp_loadbalancer.DeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.tcp_loadbalancer.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.tcp_loadbalancer.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.tcp_loadbalancer.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.tcp_loadbalancer.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.tcp_loadbalancer.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.tcp_loadbalancer.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.tcp_loadbalancer.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/views/tcp_loadbalancer/public_customapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/views/tcp_loadbalancer/public_customapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/views/tcp_loadbalancer/public_customapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "CustomAPI",
		ServiceType: "CUSTOM_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.views.tcp_loadbalancer.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "GetDnsInfo",
		InMsgType:    "ves.io.schema.views.tcp_loadbalancer.GetDnsInfoRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.tcp_loadbalancer.GetDnsInfoResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/tcp_loadbalancers/{name}/get-dns-info"}}
	aInfo.RPCsInfo[svcfw.RPCName("GetDnsInfo")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.tcp_loadbalancer.CustomAPI.GetDnsInfo"] = rpcInfo
	}

	fInfo.APIsInfo["CustomAPI"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.views.tcp_loadbalancer.CustomAPI"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "GetDnsInfoRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.tcp_loadbalancer.GetDnsInfoRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetDnsInfoResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.tcp_loadbalancer.GetDnsInfoResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/views/tcp_loadbalancer/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/views/tcp_loadbalancer/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/views/tcp_loadbalancer/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.tcp_loadbalancer.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.tcp_loadbalancer.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.tcp_loadbalancer.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.tcp_loadbalancer.ReplaceSpecType"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.views.tcp_loadbalancer.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/tcp_loadbalancer/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.views.tcp_loadbalancer.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/views/tcp_loadbalancer/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/views/tcp_loadbalancer/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/views/tcp_loadbalancer/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.views.tcp_loadbalancer.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.views.tcp_loadbalancer.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.tcp_loadbalancer.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.views.tcp_loadbalancer/Objects", "/ves.io.schema.views.tcp_loadbalancer/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.tcp_loadbalancer.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.views.tcp_loadbalancer.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.tcp_loadbalancer.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.views.tcp_loadbalancer/Object/{object_uid}", "/ves.io.schema.views.tcp_loadbalancer/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.tcp_loadbalancer.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.views.tcp_loadbalancer.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.tcp_loadbalancer.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.tcp_loadbalancer/Object/{object_uid}", "/ves.io.schema.views.tcp_loadbalancer/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.tcp_loadbalancer.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.views.tcp_loadbalancer.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.tcp_loadbalancer.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.tcp_loadbalancer/Objects", "/ves.io.schema.views.tcp_loadbalancer/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.tcp_loadbalancer.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.views.tcp_loadbalancer.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.tcp_loadbalancer.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.tcp_loadbalancer/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.tcp_loadbalancer.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.views.tcp_loadbalancer.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.tcp_loadbalancer.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.views.tcp_loadbalancer/Object/{object_uid}", "/ves.io.schema.views.tcp_loadbalancer/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.tcp_loadbalancer.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.views.tcp_loadbalancer.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.tcp_loadbalancer.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.tcp_loadbalancer.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.tcp_loadbalancer.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.tcp_loadbalancer.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.tcp_loadbalancer.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.tcp_loadbalancer.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.tcp_loadbalancer.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.tcp_loadbalancer.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.tcp_loadbalancer.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.tcp_loadbalancer.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.tcp_loadbalancer.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.views.terraform_parameters"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/terraform_parameters",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.views.terraform_parameters"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/views/terraform_parameters/aws_types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/views/terraform_parameters/aws_types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/views/terraform_parameters/aws_types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "AWSInstanceType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.terraform_parameters.AWSInstanceType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AWSTGWInfoType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.terraform_parameters.AWSTGWInfoType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AWSTGWTunnelInfoType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.terraform_parameters.AWSTGWTunnelInfoType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AWSTGWType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.terraform_parameters.AWSTGWType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AWSVPCInfoType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.terraform_parameters.AWSVPCInfoType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AWSVPCType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.terraform_parameters.AWSVPCType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CloudSubnetType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.terraform_parameters.CloudSubnetType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SubnetType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.terraform_parameters.SubnetType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/views/terraform_parameters/azure_types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/views/terraform_parameters/azure_types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/views/terraform_parameters/azure_types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "AvailabilitySetsInfoType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.terraform_parameters.AvailabilitySetsInfoType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AzureExistingSubnetParamType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.terraform_parameters.AzureExistingSubnetParamType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AzureInstanceType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.terraform_parameters.AzureInstanceType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AzureSubnetChoice",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.terraform_parameters.AzureSubnetChoice"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AzureSubnetParamType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.terraform_parameters.AzureSubnetParamType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AzureSubnetType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.terraform_parameters.AzureSubnetType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AzureVnetInfoType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.terraform_parameters.AzureVnetInfoType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AzureVnetParamsType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.terraform_parameters.AzureVnetParamsType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AzureVnetSiteType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.terraform_parameters.AzureVnetSiteType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/views/terraform_parameters/gcp_types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/views/terraform_parameters/gcp_types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/views/terraform_parameters/gcp_types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "GCPInstanceType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.terraform_parameters.GCPInstanceType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GCPSubnetChoice",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.terraform_parameters.GCPSubnetChoice"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GCPSubnetParamType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.terraform_parameters.GCPSubnetParamType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GCPVPCNetworkChoice",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.terraform_parameters.GCPVPCNetworkChoice"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GCPVpcSiteType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.terraform_parameters.GCPVpcSiteType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/views/terraform_parameters/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/views/terraform_parameters/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/views/terraform_parameters/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.views.terraform_parameters.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.views.terraform_parameters.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.views.terraform_parameters.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.terraform_parameters.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/views/terraform_parameters/public_customapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/views/terraform_parameters/public_customapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/views/terraform_parameters/public_customapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "CustomAPI",
		ServiceType: "CUSTOM_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.views.terraform_parameters.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.views.terraform_parameters.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.terraform_parameters.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/terraform_parameters/{view_kind}/{view_name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.terraform_parameters.CustomAPI.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "GetStatus",
		InMsgType:    "ves.io.schema.views.terraform_parameters.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.terraform_parameters.GetStatusResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/terraform_parameters/{view_kind}/{view_name}/status"}}
	aInfo.RPCsInfo[svcfw.RPCName("GetStatus")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.terraform_parameters.CustomAPI.GetStatus"] = rpcInfo
	}

	fInfo.APIsInfo["CustomAPI"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.views.terraform_parameters.CustomAPI"] = aInfo
	}
	aInfo = &svcfw.APIInfo{
		Name:        "CustomActionAPI",
		ServiceType: "CUSTOM_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.views.terraform_parameters.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "ForceDelete",
		InMsgType:    "ves.io.schema.views.terraform_parameters.ForceDeleteRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.terraform_parameters.ForceDeleteResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/terraform/{view_kind}/{view_name}/force-delete"}}
	aInfo.RPCsInfo[svcfw.RPCName("ForceDelete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.terraform_parameters.CustomActionAPI.ForceDelete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Run",
		InMsgType:    "ves.io.schema.views.terraform_parameters.RunRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.terraform_parameters.RunResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/terraform/{view_kind}/{view_name}/run"}}
	aInfo.RPCsInfo[svcfw.RPCName("Run")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.terraform_parameters.CustomActionAPI.Run"] = rpcInfo
	}

	fInfo.APIsInfo["CustomActionAPI"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.views.terraform_parameters.CustomActionAPI"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ForceDeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.terraform_parameters.ForceDeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ForceDeleteResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.terraform_parameters.ForceDeleteResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.terraform_parameters.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.terraform_parameters.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetStatusResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.terraform_parameters.GetStatusResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "RunRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.terraform_parameters.RunRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "RunResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.terraform_parameters.RunResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/views/terraform_parameters/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/views/terraform_parameters/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/views/terraform_parameters/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ApplyStatus",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.terraform_parameters.ApplyStatus"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.terraform_parameters.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "PlanStatus",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.terraform_parameters.PlanStatus"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "VIPPortConfig",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.terraform_parameters.VIPPortConfig"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.views.terraform_parameters.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/terraform_parameters/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.views.terraform_parameters.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/views/terraform_parameters/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/views/terraform_parameters/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/views/terraform_parameters/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.views.terraform_parameters.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.views.terraform_parameters.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.terraform_parameters.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.views.terraform_parameters/Objects", "/ves.io.schema.views.terraform_parameters/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.terraform_parameters.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.views.terraform_parameters.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.terraform_parameters.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.views.terraform_parameters/Object/{object_uid}", "/ves.io.schema.views.terraform_parameters/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.terraform_parameters.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.views.terraform_parameters.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.terraform_parameters.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.terraform_parameters/Object/{object_uid}", "/ves.io.schema.views.terraform_parameters/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.terraform_parameters.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.views.terraform_parameters.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.terraform_parameters.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.terraform_parameters/Objects", "/ves.io.schema.views.terraform_parameters/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.terraform_parameters.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.views.terraform_parameters.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.terraform_parameters.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.terraform_parameters/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.terraform_parameters.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.views.terraform_parameters.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.terraform_parameters.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.views.terraform_parameters/Object/{object_uid}", "/ves.io.schema.views.terraform_parameters/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.terraform_parameters.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.views.terraform_parameters.crudapi.API"] = aInfo
	}
	aInfo = &svcfw.APIInfo{
		Name:        "StatusAPI",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.views.terraform_parameters.StatusObject",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.views.terraform_parameters.crudapi.StatusObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.terraform_parameters.crudapi.StatusObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.terraform_parameters/StatusObjects", "/ves.io.schema.views.terraform_parameters/introspect/read/StatusObjects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.terraform_parameters.crudapi.StatusAPI.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.views.terraform_parameters.crudapi.StatusObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.terraform_parameters.crudapi.StatusObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.terraform_parameters/StatusObjects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.terraform_parameters.crudapi.StatusAPI.ListStream"] = rpcInfo
	}

	fInfo.APIsInfo["StatusAPI"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.views.terraform_parameters.crudapi.StatusAPI"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.terraform_parameters.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.terraform_parameters.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.terraform_parameters.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.terraform_parameters.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.terraform_parameters.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.terraform_parameters.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.terraform_parameters.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.terraform_parameters.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.terraform_parameters.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.terraform_parameters.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.terraform_parameters.crudapi.ObjectReplaceRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "StatusObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.terraform_parameters.crudapi.StatusObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "StatusObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.terraform_parameters.crudapi.StatusObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "StatusObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.terraform_parameters.crudapi.StatusObjectListRspItem"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.views.voltstack_site"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/voltstack_site",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.views.voltstack_site"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/views/voltstack_site/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/views/voltstack_site/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/views/voltstack_site/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.views.voltstack_site.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.views.voltstack_site.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.views.voltstack_site.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.voltstack_site.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/views/voltstack_site/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/views/voltstack_site/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/views/voltstack_site/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.views.voltstack_site.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.views.voltstack_site.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.voltstack_site.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/voltstack_sites"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.voltstack_site.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.views.voltstack_site.DeleteRequest",
		InStreaming:  false,
		OutMsgType:   "google.protobuf.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/voltstack_sites/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.voltstack_site.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.views.voltstack_site.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.voltstack_site.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/voltstack_sites/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.voltstack_site.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.views.voltstack_site.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.voltstack_site.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/voltstack_sites"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.voltstack_site.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.views.voltstack_site.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.voltstack_site.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/voltstack_sites/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.voltstack_site.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.views.voltstack_site.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.voltstack_site.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.voltstack_site.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.voltstack_site.DeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.voltstack_site.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.voltstack_site.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.voltstack_site.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.voltstack_site.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.voltstack_site.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.voltstack_site.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.voltstack_site.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/views/voltstack_site/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/views/voltstack_site/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/views/voltstack_site/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.voltstack_site.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.voltstack_site.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalNetworkConnectionListType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.voltstack_site.GlobalNetworkConnectionListType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalNetworkConnectionType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.voltstack_site.GlobalNetworkConnectionType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.voltstack_site.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "Interface",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.voltstack_site.Interface"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "InterfaceListType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.voltstack_site.InterfaceListType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.voltstack_site.ReplaceSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SliVnConfiguration",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.voltstack_site.SliVnConfiguration"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "StaticRoutesListType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.voltstack_site.StaticRoutesListType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "StorageInterfaceListType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.voltstack_site.StorageInterfaceListType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "StorageInterfaceType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.voltstack_site.StorageInterfaceType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "VnConfiguration",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.voltstack_site.VnConfiguration"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "VssNetworkConfiguration",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.voltstack_site.VssNetworkConfiguration"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "VssStorageConfiguration",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.voltstack_site.VssStorageConfiguration"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.views.voltstack_site.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/voltstack_site/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.views.voltstack_site.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/views/voltstack_site/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/views/voltstack_site/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/views/voltstack_site/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.views.voltstack_site.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.views.voltstack_site.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.voltstack_site.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.views.voltstack_site/Objects", "/ves.io.schema.views.voltstack_site/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.voltstack_site.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.views.voltstack_site.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.voltstack_site.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.views.voltstack_site/Object/{object_uid}", "/ves.io.schema.views.voltstack_site/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.voltstack_site.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.views.voltstack_site.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.voltstack_site.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.voltstack_site/Object/{object_uid}", "/ves.io.schema.views.voltstack_site/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.voltstack_site.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.views.voltstack_site.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.voltstack_site.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.voltstack_site/Objects", "/ves.io.schema.views.voltstack_site/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.voltstack_site.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.views.voltstack_site.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.voltstack_site.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.voltstack_site/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.voltstack_site.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.views.voltstack_site.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.voltstack_site.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.views.voltstack_site/Object/{object_uid}", "/ves.io.schema.views.voltstack_site/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.voltstack_site.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.views.voltstack_site.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.voltstack_site.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.voltstack_site.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.voltstack_site.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.voltstack_site.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.voltstack_site.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.voltstack_site.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.voltstack_site.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.voltstack_site.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.voltstack_site.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.voltstack_site.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.voltstack_site.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.views.workload"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/workload",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.views.workload"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/views/workload/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/views/workload/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/views/workload/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.views.workload.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.views.workload.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.views.workload.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/views/workload/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/views/workload/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/views/workload/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.views.workload.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.views.workload.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.workload.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/workloads"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.workload.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.views.workload.DeleteRequest",
		InStreaming:  false,
		OutMsgType:   "google.protobuf.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/workloads/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.workload.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.views.workload.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.workload.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/workloads/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.workload.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.views.workload.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.workload.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/workloads"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.workload.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.views.workload.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.workload.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/workloads/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.workload.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.views.workload.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.DeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/views/workload/public_custom_data_api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/views/workload/public_custom_data_api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/views/workload/public_custom_data_api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "CustomDataAPI",
		ServiceType: "CUSTOM_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.views.workload.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Usage",
		InMsgType:    "ves.io.schema.views.workload.UsageRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.workload.UsageResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/workloads/usage"}}
	aInfo.RPCsInfo[svcfw.RPCName("Usage")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.workload.CustomDataAPI.Usage"] = rpcInfo
	}

	fInfo.APIsInfo["CustomDataAPI"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.views.workload.CustomDataAPI"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "UsageData",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.UsageData"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "UsageRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.UsageRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "UsageResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.UsageResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "UsageTypeData",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.UsageTypeData"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/views/workload/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/views/workload/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/views/workload/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "AdvertiseCustomType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.AdvertiseCustomType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AdvertiseInClusterType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.AdvertiseInClusterType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AdvertiseMultiPortType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.AdvertiseMultiPortType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AdvertiseOptionsType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.AdvertiseOptionsType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AdvertisePortType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.AdvertisePortType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AdvertisePublicType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.AdvertisePublicType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AdvertiseSimpleServiceType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.AdvertiseSimpleServiceType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AdvertiseSinglePortType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.AdvertiseSinglePortType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AdvertiseWhereType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.AdvertiseWhereType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ConfigurationFileType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.ConfigurationFileType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ConfigurationParameterType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.ConfigurationParameterType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ConfigurationParametersType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.ConfigurationParametersType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ContainerType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.ContainerType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeployCESiteType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.DeployCESiteType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeployCEVirtualSiteType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.DeployCEVirtualSiteType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeployOptionsType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.DeployOptionsType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeployRESiteType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.DeployRESiteType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeployREVirtualSiteType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.DeployREVirtualSiteType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "EmptyDirectoryVolumeType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.EmptyDirectoryVolumeType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "EnvironmentVariableType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.EnvironmentVariableType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "EphemeralStorageVolumeType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.EphemeralStorageVolumeType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ExecHealthCheckType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.ExecHealthCheckType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "HTTPHealthCheckType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.HTTPHealthCheckType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "HTTPLoadBalancerType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.HTTPLoadBalancerType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "HealthCheckType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.HealthCheckType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "HostPathVolumeType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.HostPathVolumeType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ImageType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.ImageType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "JobType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.JobType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "MatchAllRouteType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.MatchAllRouteType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "MultiPortType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.MultiPortType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "PersistentStorageType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.PersistentStorageType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "PersistentStorageVolumeType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.PersistentStorageVolumeType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "PersistentVolumeType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.PersistentVolumeType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "PortChoiceType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.PortChoiceType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "PortInfoType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.PortInfoType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "PortType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.PortType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.ReplaceSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "RouteInfoType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.RouteInfoType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "RouteType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.RouteType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ServiceType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.ServiceType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SimpleServiceType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.SimpleServiceType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SinglePortType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.SinglePortType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "StatefulServiceType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.StatefulServiceType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "StorageVolumeType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.StorageVolumeType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "TCPHealthCheckType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.TCPHealthCheckType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "TCPLoadBalancerType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.TCPLoadBalancerType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "VolumeMountType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.VolumeMountType"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.views.workload.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/workload/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.views.workload.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/views/workload/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/views/workload/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/views/workload/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.views.workload.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.views.workload.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.workload.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.views.workload/Objects", "/ves.io.schema.views.workload/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.workload.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.views.workload.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.workload.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.views.workload/Object/{object_uid}", "/ves.io.schema.views.workload/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.workload.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.views.workload.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.workload.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.workload/Object/{object_uid}", "/ves.io.schema.views.workload/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.workload.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.views.workload.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.workload.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.workload/Objects", "/ves.io.schema.views.workload/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.workload.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.views.workload.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.workload.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.views.workload/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.workload.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.views.workload.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.views.workload.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.views.workload/Object/{object_uid}", "/ves.io.schema.views.workload/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.views.workload.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.views.workload.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.views.workload.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.virtual_host"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_host",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.virtual_host"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/virtual_host/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/virtual_host/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/virtual_host/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.virtual_host.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.virtual_host.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.virtual_host.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_host.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/virtual_host/public_apiep_customapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/virtual_host/public_apiep_customapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/virtual_host/public_apiep_customapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "ApiepCustomAPI",
		ServiceType: "CUSTOM_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.virtual_host.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "GetAPIEndpointLearntSchema",
		InMsgType:    "ves.io.schema.virtual_host.APIEndpointLearntSchemaReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.virtual_host.APIEndpointLearntSchemaRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/virtual_hosts/{name}/api_endpoint/learnt_schema"}}
	aInfo.RPCsInfo[svcfw.RPCName("GetAPIEndpointLearntSchema")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.virtual_host.ApiepCustomAPI.GetAPIEndpointLearntSchema"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "GetAPIEndpointPDF",
		InMsgType:    "ves.io.schema.virtual_host.APIEndpointPDFReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.virtual_host.APIEndpointPDFRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/virtual_hosts/{name}/api_endpoint/pdf"}}
	aInfo.RPCsInfo[svcfw.RPCName("GetAPIEndpointPDF")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.virtual_host.ApiepCustomAPI.GetAPIEndpointPDF"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "GetAPIEndpoints",
		InMsgType:    "ves.io.schema.virtual_host.APIEndpointsReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.virtual_host.APIEndpointsRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/virtual_hosts/{name}/api_endpoints"}}
	aInfo.RPCsInfo[svcfw.RPCName("GetAPIEndpoints")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.virtual_host.ApiepCustomAPI.GetAPIEndpoints"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "GetSwaggerSpec",
		InMsgType:    "ves.io.schema.virtual_host.SwaggerSpecReq",
		InStreaming:  false,
		OutMsgType:   "google.api.HttpBody",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/virtual_hosts/{name}/api_endpoints/swagger_spec"}}
	aInfo.RPCsInfo[svcfw.RPCName("GetSwaggerSpec")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.virtual_host.ApiepCustomAPI.GetSwaggerSpec"] = rpcInfo
	}

	fInfo.APIsInfo["ApiepCustomAPI"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.virtual_host.ApiepCustomAPI"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "APIEndpointLearntSchemaReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_host.APIEndpointLearntSchemaReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "APIEndpointLearntSchemaRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_host.APIEndpointLearntSchemaRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "APIEndpointPDFReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_host.APIEndpointPDFReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "APIEndpointPDFRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_host.APIEndpointPDFRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "APIEndpointsReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_host.APIEndpointsReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "APIEndpointsRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_host.APIEndpointsRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SwaggerSpecReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_host.SwaggerSpecReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SwaggerSpecRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_host.SwaggerSpecRsp"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/virtual_host/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/virtual_host/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/virtual_host/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.virtual_host.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.virtual_host.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.virtual_host.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/virtual_hosts"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.virtual_host.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.virtual_host.DeleteRequest",
		InStreaming:  false,
		OutMsgType:   "google.protobuf.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/virtual_hosts/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.virtual_host.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.virtual_host.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.virtual_host.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/virtual_hosts/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.virtual_host.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.virtual_host.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.virtual_host.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/virtual_hosts"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.virtual_host.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.virtual_host.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.virtual_host.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/virtual_hosts/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.virtual_host.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.virtual_host.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_host.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_host.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_host.DeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_host.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_host.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_host.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_host.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_host.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_host.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_host.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/virtual_host/public_customapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/virtual_host/public_customapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/virtual_host/public_customapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "CustomAPI",
		ServiceType: "CUSTOM_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.virtual_host.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "GetDnsInfo",
		InMsgType:    "ves.io.schema.virtual_host.GetDnsInfoRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.virtual_host.GetDnsInfoResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/virtual_hosts/{name}/get-dns-info"}}
	aInfo.RPCsInfo[svcfw.RPCName("GetDnsInfo")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.virtual_host.CustomAPI.GetDnsInfo"] = rpcInfo
	}

	fInfo.APIsInfo["CustomAPI"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.virtual_host.CustomAPI"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "GetDnsInfoRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_host.GetDnsInfoRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetDnsInfoResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_host.GetDnsInfoResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/virtual_host/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/virtual_host/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/virtual_host/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "AuthenticationDetails",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_host.AuthenticationDetails"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AutoCertInfoType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_host.AutoCertInfoType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CaptchaChallengeType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_host.CaptchaChallengeType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CompressionType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_host.CompressionType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_host.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DynamicReverseProxyType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_host.DynamicReverseProxyType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_host.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_host.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "JavaScriptConfigType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_host.JavaScriptConfigType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "JavascriptChallengeType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_host.JavascriptChallengeType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "PolicyBasedChallenge",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_host.PolicyBasedChallenge"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_host.ReplaceSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ShapeBotDefenseConfigType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_host.ShapeBotDefenseConfigType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "TemporaryUserBlockingType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_host.TemporaryUserBlockingType"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.virtual_host.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_host/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.virtual_host.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/virtual_host/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/virtual_host/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/virtual_host/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.virtual_host.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.virtual_host.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.virtual_host.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.virtual_host/Objects", "/ves.io.schema.virtual_host/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.virtual_host.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.virtual_host.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.virtual_host.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.virtual_host/Object/{object_uid}", "/ves.io.schema.virtual_host/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.virtual_host.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.virtual_host.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.virtual_host.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.virtual_host/Object/{object_uid}", "/ves.io.schema.virtual_host/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.virtual_host.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.virtual_host.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.virtual_host.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.virtual_host/Objects", "/ves.io.schema.virtual_host/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.virtual_host.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.virtual_host.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.virtual_host.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.virtual_host/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.virtual_host.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.virtual_host.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.virtual_host.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.virtual_host/Object/{object_uid}", "/ves.io.schema.virtual_host/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.virtual_host.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.virtual_host.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_host.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_host.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_host.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_host.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_host.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_host.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_host.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_host.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_host.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_host.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_host.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.virtual_host_dns_info"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_host_dns_info",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.virtual_host_dns_info"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/virtual_host_dns_info/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/virtual_host_dns_info/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/virtual_host_dns_info/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.virtual_host_dns_info.Object"] = oInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "DnsInfo",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_host_dns_info.DnsInfo"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_host_dns_info.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_host_dns_info.SpecType"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.virtual_host_dns_info.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_host_dns_info/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.virtual_host_dns_info.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/virtual_host_dns_info/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/virtual_host_dns_info/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/virtual_host_dns_info/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.virtual_host_dns_info.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.virtual_host_dns_info.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.virtual_host_dns_info.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.virtual_host_dns_info/Objects", "/ves.io.schema.virtual_host_dns_info/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.virtual_host_dns_info.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.virtual_host_dns_info.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.virtual_host_dns_info.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.virtual_host_dns_info/Object/{object_uid}", "/ves.io.schema.virtual_host_dns_info/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.virtual_host_dns_info.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.virtual_host_dns_info.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.virtual_host_dns_info.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.virtual_host_dns_info/Object/{object_uid}", "/ves.io.schema.virtual_host_dns_info/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.virtual_host_dns_info.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.virtual_host_dns_info.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.virtual_host_dns_info.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.virtual_host_dns_info/Objects", "/ves.io.schema.virtual_host_dns_info/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.virtual_host_dns_info.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.virtual_host_dns_info.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.virtual_host_dns_info.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.virtual_host_dns_info/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.virtual_host_dns_info.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.virtual_host_dns_info.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.virtual_host_dns_info.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.virtual_host_dns_info/Object/{object_uid}", "/ves.io.schema.virtual_host_dns_info/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.virtual_host_dns_info.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.virtual_host_dns_info.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_host_dns_info.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_host_dns_info.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_host_dns_info.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_host_dns_info.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_host_dns_info.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_host_dns_info.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_host_dns_info.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_host_dns_info.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_host_dns_info.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_host_dns_info.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_host_dns_info.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.virtual_k8s"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_k8s",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.virtual_k8s"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/virtual_k8s/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/virtual_k8s/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/virtual_k8s/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.virtual_k8s.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.virtual_k8s.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.virtual_k8s.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_k8s.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/virtual_k8s/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/virtual_k8s/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/virtual_k8s/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.virtual_k8s.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.virtual_k8s.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.virtual_k8s.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/virtual_k8ss"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.virtual_k8s.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.virtual_k8s.DeleteRequest",
		InStreaming:  false,
		OutMsgType:   "google.protobuf.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/virtual_k8ss/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.virtual_k8s.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.virtual_k8s.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.virtual_k8s.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/virtual_k8ss/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.virtual_k8s.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.virtual_k8s.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.virtual_k8s.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/virtual_k8ss"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.virtual_k8s.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.virtual_k8s.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.virtual_k8s.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/virtual_k8ss/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.virtual_k8s.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.virtual_k8s.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_k8s.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_k8s.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_k8s.DeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_k8s.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_k8s.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_k8s.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_k8s.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_k8s.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_k8s.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_k8s.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/virtual_k8s/public_custom_data_api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/virtual_k8s/public_custom_data_api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/virtual_k8s/public_custom_data_api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "CustomDataAPI",
		ServiceType: "CUSTOM_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.virtual_k8s.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "PVCMetrics",
		InMsgType:    "ves.io.schema.virtual_k8s.PVCMetricsRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.virtual_k8s.PVCMetricsResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/virtual_k8s/pvc/metrics"}}
	aInfo.RPCsInfo[svcfw.RPCName("PVCMetrics")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.virtual_k8s.CustomDataAPI.PVCMetrics"] = rpcInfo
	}

	fInfo.APIsInfo["CustomDataAPI"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.virtual_k8s.CustomDataAPI"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "PVCMetricData",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_k8s.PVCMetricData"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "PVCMetricTypeData",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_k8s.PVCMetricTypeData"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "PVCMetricsRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_k8s.PVCMetricsRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "PVCMetricsResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_k8s.PVCMetricsResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/virtual_k8s/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/virtual_k8s/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/virtual_k8s/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_k8s.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_k8s.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_k8s.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_k8s.ReplaceSpecType"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.virtual_k8s.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_k8s/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.virtual_k8s.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/virtual_k8s/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/virtual_k8s/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/virtual_k8s/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.virtual_k8s.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.virtual_k8s.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.virtual_k8s.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.virtual_k8s/Objects", "/ves.io.schema.virtual_k8s/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.virtual_k8s.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.virtual_k8s.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.virtual_k8s.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.virtual_k8s/Object/{object_uid}", "/ves.io.schema.virtual_k8s/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.virtual_k8s.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.virtual_k8s.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.virtual_k8s.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.virtual_k8s/Object/{object_uid}", "/ves.io.schema.virtual_k8s/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.virtual_k8s.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.virtual_k8s.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.virtual_k8s.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.virtual_k8s/Objects", "/ves.io.schema.virtual_k8s/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.virtual_k8s.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.virtual_k8s.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.virtual_k8s.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.virtual_k8s/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.virtual_k8s.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.virtual_k8s.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.virtual_k8s.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.virtual_k8s/Object/{object_uid}", "/ves.io.schema.virtual_k8s/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.virtual_k8s.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.virtual_k8s.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_k8s.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_k8s.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_k8s.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_k8s.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_k8s.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_k8s.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_k8s.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_k8s.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_k8s.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_k8s.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_k8s.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.virtual_network"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_network",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.virtual_network"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/virtual_network/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/virtual_network/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/virtual_network/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.virtual_network.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.virtual_network.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.virtual_network.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_network.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/virtual_network/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/virtual_network/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/virtual_network/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.virtual_network.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.virtual_network.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.virtual_network.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/virtual_networks"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.virtual_network.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.virtual_network.DeleteRequest",
		InStreaming:  false,
		OutMsgType:   "google.protobuf.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/virtual_networks/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.virtual_network.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.virtual_network.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.virtual_network.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/virtual_networks/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.virtual_network.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.virtual_network.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.virtual_network.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/virtual_networks"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.virtual_network.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.virtual_network.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.virtual_network.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/virtual_networks/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.virtual_network.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.virtual_network.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_network.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_network.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_network.DeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_network.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_network.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_network.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_network.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_network.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_network.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_network.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/virtual_network/public_custom_data_api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/virtual_network/public_custom_data_api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/virtual_network/public_custom_data_api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "CustomDataAPI",
		ServiceType: "CUSTOM_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.virtual_network.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "SIDCounters",
		InMsgType:    "ves.io.schema.virtual_network.SIDCounterRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.virtual_network.SIDCounterResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/virtual_network/sid_counters"}}
	aInfo.RPCsInfo[svcfw.RPCName("SIDCounters")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.virtual_network.CustomDataAPI.SIDCounters"] = rpcInfo
	}

	fInfo.APIsInfo["CustomDataAPI"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.virtual_network.CustomDataAPI"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SIDCounterData",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_network.SIDCounterData"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SIDCounterRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_network.SIDCounterRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SIDCounterResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_network.SIDCounterResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SIDCounterTypeData",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_network.SIDCounterTypeData"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/virtual_network/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/virtual_network/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/virtual_network/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ActivePBRPoliciesType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_network.ActivePBRPoliciesType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "AnyCastVIPFleetType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_network.AnyCastVIPFleetType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_network.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DNSServersList",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_network.DNSServersList"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_network.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_network.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "NextHopInterfaceList",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_network.NextHopInterfaceList"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "PerSiteSrv6NetworkType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_network.PerSiteSrv6NetworkType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "PerTenantVIPType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_network.PerTenantVIPType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_network.ReplaceSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SNATPoolFleetType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_network.SNATPoolFleetType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SNATPoolSiteType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_network.SNATPoolSiteType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SNATPoolType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_network.SNATPoolType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "Srv6NetworkNsParametersType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_network.Srv6NetworkNsParametersType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "StaticRouteViewType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_network.StaticRouteViewType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "VoltADNPrivateNetworkReInfoType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_network.VoltADNPrivateNetworkReInfoType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "VoltADNPrivateNetworkTenantInfoType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_network.VoltADNPrivateNetworkTenantInfoType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "VoltADNPrivateNetworkType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_network.VoltADNPrivateNetworkType"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.virtual_network.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_network/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.virtual_network.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/virtual_network/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/virtual_network/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/virtual_network/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.virtual_network.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.virtual_network.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.virtual_network.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.virtual_network/Objects", "/ves.io.schema.virtual_network/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.virtual_network.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.virtual_network.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.virtual_network.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.virtual_network/Object/{object_uid}", "/ves.io.schema.virtual_network/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.virtual_network.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.virtual_network.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.virtual_network.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.virtual_network/Object/{object_uid}", "/ves.io.schema.virtual_network/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.virtual_network.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.virtual_network.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.virtual_network.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.virtual_network/Objects", "/ves.io.schema.virtual_network/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.virtual_network.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.virtual_network.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.virtual_network.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.virtual_network/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.virtual_network.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.virtual_network.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.virtual_network.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.virtual_network/Object/{object_uid}", "/ves.io.schema.virtual_network/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.virtual_network.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.virtual_network.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_network.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_network.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_network.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_network.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_network.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_network.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_network.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_network.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_network.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_network.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_network.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.virtual_site"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_site",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.virtual_site"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/virtual_site/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/virtual_site/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/virtual_site/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.virtual_site.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.virtual_site.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.virtual_site.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_site.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/virtual_site/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/virtual_site/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/virtual_site/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.virtual_site.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.virtual_site.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.virtual_site.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/virtual_sites"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.virtual_site.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.virtual_site.DeleteRequest",
		InStreaming:  false,
		OutMsgType:   "google.protobuf.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/virtual_sites/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.virtual_site.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.virtual_site.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.virtual_site.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/virtual_sites/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.virtual_site.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.virtual_site.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.virtual_site.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/virtual_sites"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.virtual_site.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.virtual_site.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.virtual_site.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/virtual_sites/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.virtual_site.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.virtual_site.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_site.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_site.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_site.DeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_site.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_site.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_site.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_site.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_site.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_site.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_site.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/virtual_site/public_customapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/virtual_site/public_customapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/virtual_site/public_customapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "CustomAPI",
		ServiceType: "CUSTOM_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.virtual_site.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "GetSelectees",
		InMsgType:    "ves.io.schema.virtual_site.SelecteeRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.virtual_site.SelecteeResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/virtual_sites/{name}/selectees"}}
	aInfo.RPCsInfo[svcfw.RPCName("GetSelectees")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.virtual_site.CustomAPI.GetSelectees"] = rpcInfo
	}

	fInfo.APIsInfo["CustomAPI"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.virtual_site.CustomAPI"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SelecteeItemType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_site.SelecteeItemType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SelecteeRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_site.SelecteeRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SelecteeResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_site.SelecteeResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/virtual_site/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/virtual_site/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/virtual_site/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_site.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_site.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_site.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_site.ReplaceSpecType"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.virtual_site.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_site/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.virtual_site.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/virtual_site/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/virtual_site/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/virtual_site/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.virtual_site.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.virtual_site.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.virtual_site.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.virtual_site/Objects", "/ves.io.schema.virtual_site/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.virtual_site.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.virtual_site.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.virtual_site.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.virtual_site/Object/{object_uid}", "/ves.io.schema.virtual_site/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.virtual_site.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.virtual_site.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.virtual_site.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.virtual_site/Object/{object_uid}", "/ves.io.schema.virtual_site/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.virtual_site.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.virtual_site.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.virtual_site.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.virtual_site/Objects", "/ves.io.schema.virtual_site/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.virtual_site.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.virtual_site.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.virtual_site.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.virtual_site/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.virtual_site.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.virtual_site.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.virtual_site.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.virtual_site/Object/{object_uid}", "/ves.io.schema.virtual_site/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.virtual_site.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.virtual_site.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_site.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_site.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_site.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_site.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_site.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_site.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_site.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_site.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_site.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_site.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.virtual_site.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.waf"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/waf",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.waf"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/waf/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/waf/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/waf/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.waf.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.waf.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.waf.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/waf/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/waf/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/waf/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.waf.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.waf.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.waf.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/wafs"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.waf.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.waf.DeleteRequest",
		InStreaming:  false,
		OutMsgType:   "google.protobuf.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/wafs/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.waf.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.waf.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.waf.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/wafs/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.waf.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.waf.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.waf.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/wafs"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.waf.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.waf.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.waf.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/wafs/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.waf.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.waf.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf.DeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/waf/public_customapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/waf/public_customapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/waf/public_customapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "CustomAPI",
		ServiceType: "CUSTOM_PUBLIC",
		IsSDRO:      false,
		ObjType:     "",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "VirtualHostWafStatus",
		InMsgType:    "ves.io.schema.waf.VirtualHostWafStatusReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.waf.VirtualHostWafStatusRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/waf/virtual_host/status/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("VirtualHostWafStatus")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.waf.CustomAPI.VirtualHostWafStatus"] = rpcInfo
	}

	fInfo.APIsInfo["CustomAPI"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.waf.CustomAPI"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "VirtualHostWafStatusReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf.VirtualHostWafStatusReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "VirtualHostWafStatusRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf.VirtualHostWafStatusRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "WafStatus",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf.WafStatus"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/waf/public_waf_monitoring.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/waf/public_waf_monitoring.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/waf/public_waf_monitoring.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "WAFMonitoringAPI",
		ServiceType: "CUSTOM_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.waf.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "ClientRuleHitsMetrics",
		InMsgType:    "ves.io.schema.waf.RuleHitsCountRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.waf.RuleHitsCountResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/wafs/metrics/client/rule_hits"}}
	aInfo.RPCsInfo[svcfw.RPCName("ClientRuleHitsMetrics")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.waf.WAFMonitoringAPI.ClientRuleHitsMetrics"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ClientSecurityEventsMetrics",
		InMsgType:    "ves.io.schema.waf.SecurityEventsCountRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.waf.SecurityEventsCountResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/wafs/metrics/client/security_events"}}
	aInfo.RPCsInfo[svcfw.RPCName("ClientSecurityEventsMetrics")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.waf.WAFMonitoringAPI.ClientSecurityEventsMetrics"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ServerRuleHitsMetrics",
		InMsgType:    "ves.io.schema.waf.RuleHitsCountRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.waf.RuleHitsCountResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/wafs/metrics/server/rule_hits"}}
	aInfo.RPCsInfo[svcfw.RPCName("ServerRuleHitsMetrics")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.waf.WAFMonitoringAPI.ServerRuleHitsMetrics"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ServerSecurityEventsMetrics",
		InMsgType:    "ves.io.schema.waf.SecurityEventsCountRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.waf.SecurityEventsCountResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{namespace}/wafs/metrics/server/security_events"}}
	aInfo.RPCsInfo[svcfw.RPCName("ServerSecurityEventsMetrics")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.waf.WAFMonitoringAPI.ServerSecurityEventsMetrics"] = rpcInfo
	}

	fInfo.APIsInfo["WAFMonitoringAPI"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.waf.WAFMonitoringAPI"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "RuleHitsCountRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf.RuleHitsCountRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "RuleHitsCountResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf.RuleHitsCountResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SecurityEventsCountRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf.SecurityEventsCountRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SecurityEventsCountResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf.SecurityEventsCountResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/waf/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/waf/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/waf/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "AppProfile",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf.AppProfile"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DisabledDetectionTags",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf.DisabledDetectionTags"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "MetricLabelFilter",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf.MetricLabelFilter"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "MetricValue",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf.MetricValue"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf.ReplaceSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "RuleHitsCounter",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf.RuleHitsCounter"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "RuleHitsId",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf.RuleHitsId"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SecurityEventAggregation",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf.SecurityEventAggregation"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SecurityEventsCounter",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf.SecurityEventsCounter"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "SecurityEventsId",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf.SecurityEventsId"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.waf.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/waf/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.waf.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/waf/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/waf/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/waf/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.waf.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.waf.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.waf.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.waf/Objects", "/ves.io.schema.waf/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.waf.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.waf.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.waf.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.waf/Object/{object_uid}", "/ves.io.schema.waf/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.waf.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.waf.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.waf.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.waf/Object/{object_uid}", "/ves.io.schema.waf/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.waf.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.waf.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.waf.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.waf/Objects", "/ves.io.schema.waf/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.waf.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.waf.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.waf.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.waf/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.waf.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.waf.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.waf.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.waf/Object/{object_uid}", "/ves.io.schema.waf/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.waf.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.waf.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.waf_rule_list"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/waf_rule_list",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.waf_rule_list"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/waf_rule_list/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/waf_rule_list/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/waf_rule_list/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.waf_rule_list.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.waf_rule_list.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.waf_rule_list.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf_rule_list.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/waf_rule_list/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/waf_rule_list/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/waf_rule_list/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.waf_rule_list.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.waf_rule_list.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.waf_rule_list.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/waf_rule_lists"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.waf_rule_list.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.waf_rule_list.DeleteRequest",
		InStreaming:  false,
		OutMsgType:   "google.protobuf.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/waf_rule_lists/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.waf_rule_list.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.waf_rule_list.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.waf_rule_list.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/waf_rule_lists/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.waf_rule_list.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.waf_rule_list.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.waf_rule_list.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/waf_rule_lists"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.waf_rule_list.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.waf_rule_list.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.waf_rule_list.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/waf_rule_lists/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.waf_rule_list.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.waf_rule_list.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf_rule_list.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf_rule_list.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf_rule_list.DeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf_rule_list.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf_rule_list.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf_rule_list.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf_rule_list.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf_rule_list.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf_rule_list.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf_rule_list.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/waf_rule_list/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/waf_rule_list/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/waf_rule_list/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf_rule_list.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf_rule_list.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf_rule_list.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf_rule_list.ReplaceSpecType"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.waf_rule_list.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/waf_rule_list/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.waf_rule_list.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/waf_rule_list/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/waf_rule_list/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/waf_rule_list/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.waf_rule_list.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.waf_rule_list.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.waf_rule_list.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.waf_rule_list/Objects", "/ves.io.schema.waf_rule_list/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.waf_rule_list.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.waf_rule_list.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.waf_rule_list.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.waf_rule_list/Object/{object_uid}", "/ves.io.schema.waf_rule_list/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.waf_rule_list.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.waf_rule_list.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.waf_rule_list.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.waf_rule_list/Object/{object_uid}", "/ves.io.schema.waf_rule_list/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.waf_rule_list.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.waf_rule_list.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.waf_rule_list.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.waf_rule_list/Objects", "/ves.io.schema.waf_rule_list/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.waf_rule_list.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.waf_rule_list.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.waf_rule_list.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.waf_rule_list/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.waf_rule_list.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.waf_rule_list.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.waf_rule_list.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.waf_rule_list/Object/{object_uid}", "/ves.io.schema.waf_rule_list/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.waf_rule_list.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.waf_rule_list.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf_rule_list.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf_rule_list.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf_rule_list.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf_rule_list.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf_rule_list.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf_rule_list.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf_rule_list.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf_rule_list.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf_rule_list.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf_rule_list.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf_rule_list.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.waf_rules"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/waf_rules",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.waf_rules"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/waf_rules/object.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/waf_rules/object.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/waf_rules/object.proto"] = fInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("Object"),
		IsSDRO:           true,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("Object")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.waf_rules.Object"] = oInfo
	}

	oInfo = &svcfw.ObjInfo{
		Name:             svcfw.ObjType("StatusObject"),
		IsSDRO:           false,
		FldsInfo:         make(map[svcfw.FldName]*svcfw.FldInfo),
		FldTypesInfo:     make(map[svcfw.FldType][]*svcfw.FldInfo),
		KeysInfo:         make(map[svcfw.FldName]*svcfw.KeyInfo),
		ReEncryptSecrets: make(map[string]uint64),
	}

	fInfo.ObjsInfo[svcfw.ObjType("StatusObject")] = oInfo
	if mdr.ObjIdx != nil {
		mdr.ObjIdx["ves.io.schema.waf_rules.StatusObject"] = oInfo
	}

	keyInfo = &svcfw.KeyInfo{
		Type: svcfw.KeyType(2),
	}
	oInfo.KeysInfo[svcfw.FldName("metadata.uid")] = keyInfo
	if mdr.KeyIdx != nil {
		mdr.KeyIdx["ves.io.schema.waf_rules.StatusObject.metadata.uid"] = keyInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "SpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf_rules.SpecType"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/waf_rules/public_crudapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/waf_rules/public_crudapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/waf_rules/public_crudapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD_PUBLIC",
		IsSDRO:      false,
		ObjType:     "ves.io.schema.waf_rules.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.waf_rules.CreateRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.waf_rules.CreateResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/public/namespaces/{metadata.namespace}/waf_ruless"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.waf_rules.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.waf_rules.DeleteRequest",
		InStreaming:  false,
		OutMsgType:   "google.protobuf.Empty",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/public/namespaces/{namespace}/waf_ruless/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.waf_rules.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.waf_rules.GetRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.waf_rules.GetResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/waf_ruless/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.waf_rules.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.waf_rules.ListRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.waf_rules.ListResponse",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/waf_ruless"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.waf_rules.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.waf_rules.ReplaceRequest",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.waf_rules.ReplaceResponse",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/public/namespaces/{metadata.namespace}/waf_ruless/{metadata.name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.waf_rules.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.waf_rules.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf_rules.CreateRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "CreateResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf_rules.CreateResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "DeleteRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf_rules.DeleteRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf_rules.GetRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf_rules.GetResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf_rules.ListRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf_rules.ListResponse"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ListResponseItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf_rules.ListResponseItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceRequest",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf_rules.ReplaceRequest"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceResponse",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf_rules.ReplaceResponse"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/waf_rules/public_customapi.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/waf_rules/public_customapi.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/waf_rules/public_customapi.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "CustomAPI",
		ServiceType: "CUSTOM_PUBLIC",
		IsSDRO:      false,
		ObjType:     "",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Rules",
		InMsgType:    "ves.io.schema.waf_rules.RulesReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.waf_rules.RulesRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/waf_rules/rules"}}
	aInfo.RPCsInfo[svcfw.RPCName("Rules")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.waf_rules.CustomAPI.Rules"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "VirtualHostWafRulesStatus",
		InMsgType:    "ves.io.schema.waf_rules.VirtualHostWafRulesStatusReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.waf_rules.VirtualHostWafRulesStatusRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/waf_rules/virtual_host/status/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("VirtualHostWafRulesStatus")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.waf_rules.CustomAPI.VirtualHostWafRulesStatus"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "WafRulesStatus",
		InMsgType:    "ves.io.schema.waf_rules.WafRulesStatusReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.waf_rules.WafRulesStatusRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/public/namespaces/{namespace}/waf_rules/status/{name}"}}
	aInfo.RPCsInfo[svcfw.RPCName("WafRulesStatus")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.waf_rules.CustomAPI.WafRulesStatus"] = rpcInfo
	}

	fInfo.APIsInfo["CustomAPI"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.waf_rules.CustomAPI"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "RulesReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf_rules.RulesReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "RulesRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf_rules.RulesRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "VirtualHostWafRulesStatusReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf_rules.VirtualHostWafRulesStatusReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "VirtualHostWafRulesStatusRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf_rules.VirtualHostWafRulesStatusRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "WafRulesStatus",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf_rules.WafRulesStatus"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "WafRulesStatusReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf_rules.WafRulesStatusReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "WafRulesStatusRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf_rules.WafRulesStatusRsp"] = mInfo
	}

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/waf_rules/types.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/waf_rules/types.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/waf_rules/types.proto"] = fInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "CreateSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf_rules.CreateSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GetSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf_rules.GetSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "GlobalSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf_rules.GlobalSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ReplaceSpecType",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf_rules.ReplaceSpecType"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "Rules",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf_rules.Rules"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.schema.waf_rules.crudapi"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/waf_rules/crudapi",
		IsExtSch:  true,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.schema.waf_rules.crudapi"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/schema/waf_rules/crudapi/api.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/schema/waf_rules/crudapi/api.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/schema/waf_rules/crudapi/api.proto"] = fInfo
	}

	aInfo = &svcfw.APIInfo{
		Name:        "API",
		ServiceType: "AUTO_CRUD",
		IsSDRO:      true,
		ObjType:     "ves.io.schema.waf_rules.Object",
		RPCsInfo:    make(map[svcfw.RPCName]*svcfw.RPCInfo),
	}

	rpcInfo = &svcfw.RPCInfo{
		Name:         "Create",
		InMsgType:    "ves.io.schema.waf_rules.crudapi.ObjectCreateReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.waf_rules.crudapi.ObjectCreateRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"POST": []string{"/ves.io.schema.waf_rules/Objects", "/ves.io.schema.waf_rules/introspect/write/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("Create")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.waf_rules.crudapi.API.Create"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Delete",
		InMsgType:    "ves.io.schema.waf_rules.crudapi.ObjectDeleteReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.waf_rules.crudapi.ObjectDeleteRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"DELETE": []string{"/ves.io.schema.waf_rules/Object/{object_uid}", "/ves.io.schema.waf_rules/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Delete")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.waf_rules.crudapi.API.Delete"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Get",
		InMsgType:    "ves.io.schema.waf_rules.crudapi.ObjectGetReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.waf_rules.crudapi.ObjectGetRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.waf_rules/Object/{object_uid}", "/ves.io.schema.waf_rules/introspect/read/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Get")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.waf_rules.crudapi.API.Get"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "List",
		InMsgType:    "ves.io.schema.waf_rules.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.waf_rules.crudapi.ObjectListRsp",
		OutStreaming: false,
		IsImmutable:  true,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.waf_rules/Objects", "/ves.io.schema.waf_rules/introspect/read/Objects"}}
	aInfo.RPCsInfo[svcfw.RPCName("List")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.waf_rules.crudapi.API.List"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "ListStream",
		InMsgType:    "ves.io.schema.waf_rules.crudapi.ObjectListReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.waf_rules.crudapi.ObjectListRsp",
		OutStreaming: true,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"GET": []string{"/ves.io.schema.waf_rules/Objects/stream"}}
	aInfo.RPCsInfo[svcfw.RPCName("ListStream")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.waf_rules.crudapi.API.ListStream"] = rpcInfo
	}
	rpcInfo = &svcfw.RPCInfo{
		Name:         "Replace",
		InMsgType:    "ves.io.schema.waf_rules.crudapi.ObjectReplaceReq",
		InStreaming:  false,
		OutMsgType:   "ves.io.schema.waf_rules.crudapi.ObjectReplaceRsp",
		OutStreaming: false,
		IsImmutable:  false,
	}
	rpcInfo.RestMappings = map[string][]string{"PUT": []string{"/ves.io.schema.waf_rules/Object/{object_uid}", "/ves.io.schema.waf_rules/introspect/write/Object/{object_uid}"}}
	aInfo.RPCsInfo[svcfw.RPCName("Replace")] = rpcInfo
	if mdr.RPCIdx != nil {
		mdr.RPCIdx["ves.io.schema.waf_rules.crudapi.API.Replace"] = rpcInfo
	}

	fInfo.APIsInfo["API"] = aInfo
	if mdr.APIIdx != nil {
		mdr.APIIdx["ves.io.schema.waf_rules.crudapi.API"] = aInfo
	}

	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf_rules.crudapi.ObjectCreateReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectCreateRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf_rules.crudapi.ObjectCreateRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf_rules.crudapi.ObjectDeleteReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectDeleteRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf_rules.crudapi.ObjectDeleteRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf_rules.crudapi.ObjectGetReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectGetRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf_rules.crudapi.ObjectGetRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf_rules.crudapi.ObjectListReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf_rules.crudapi.ObjectListRsp"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectListRspItem",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf_rules.crudapi.ObjectListRspItem"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceReq",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf_rules.crudapi.ObjectReplaceReq"] = mInfo
	}
	mInfo = &svcfw.MsgInfo{
		Name:     "ObjectReplaceRsp",
		FldsInfo: make(map[svcfw.FldName]*svcfw.FldInfo),
	}
	if mdr.MsgIdx != nil {
		mdr.MsgIdx["ves.io.schema.waf_rules.crudapi.ObjectReplaceRsp"] = mInfo
	}

	pInfo = &svcfw.PkgInfo{
		Name:      svcfw.PkgName("ves.io.terraform_provider_volterra"),
		GoName:    "github.com/volterraedge/terraform-provider-volterra/pbgo",
		IsExtSch:  false,
		FilesInfo: make(map[string]*svcfw.FileInfo),
	}
	mdr.PkgsInfo["ves.io.terraform_provider_volterra"] = pInfo

	fInfo = &svcfw.FileInfo{
		Name:        "ves.io/terraform-provider-volterra/terraform-provider-volterra.proto",
		MetricsInfo: make(map[svcfw.MetricName]*svcfw.MetricInfo),
		ConfsInfo:   make(map[svcfw.ConfName]*svcfw.ConfInfo),
		ObjsInfo:    make(map[svcfw.ObjType]*svcfw.ObjInfo),
		APIsInfo:    make(map[svcfw.APIName]*svcfw.APIInfo),
		MsgsInfo:    make(map[string]*svcfw.MsgInfo),
	}
	pInfo.FilesInfo["ves.io/terraform-provider-volterra/terraform-provider-volterra.proto"] = fInfo
	if mdr.FileIdx != nil {
		mdr.FileIdx["ves.io/terraform-provider-volterra/terraform-provider-volterra.proto"] = fInfo
	}

}

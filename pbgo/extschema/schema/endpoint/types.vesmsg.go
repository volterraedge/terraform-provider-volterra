// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package endpoint

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *ConsulInfo) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ConsulInfo) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ConsulInfo) DeepCopy() *ConsulInfo {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ConsulInfo{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ConsulInfo) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ConsulInfo) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ConsulInfoValidator().Validate(ctx, m, opts...)
}

type ValidateConsulInfo struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateConsulInfo) LabelsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemKeyRules := db.GetMapStringKeyRules(rules)
	itemKeyFn, err := db.NewStringValidationRuleHandler(itemKeyRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item key ValidationRuleHandler for labels")
	}
	itemValRules := db.GetMapStringValueRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemValRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item value ValidationRuleHandler for labels")
	}
	itemsValidatorFn := func(ctx context.Context, kv map[string]string, opts ...db.ValidateOpt) error {
		for key, value := range kv {
			if err := itemKeyFn(ctx, key, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element with key %v", key))
			}
			if err := itemValFn(ctx, value, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("value for element with key %v", key))
			}
		}
		return nil
	}
	mapValFn, err := db.NewMapValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Map ValidationRuleHandler for labels")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.(map[string]string)
		if !ok {
			return fmt.Errorf("Map validation expected map[ string ]string, got %T", val)
		}
		if err := mapValFn(ctx, len(elems), opts...); err != nil {
			return errors.Wrap(err, "map labels")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items labels")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateConsulInfo) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ConsulInfo)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ConsulInfo got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["instance_name"]; exists {

		vOpts := append(opts, db.WithValidateField("instance_name"))
		for idx, item := range m.GetInstanceName() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["labels"]; exists {
		vOpts := append(opts, db.WithValidateField("labels"))
		if err := fv(ctx, m.GetLabels(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultConsulInfoValidator = func() *ValidateConsulInfo {
	v := &ValidateConsulInfo{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhLabels := v.LabelsValidationRuleHandler
	rulesLabels := map[string]string{
		"ves.io.schema.rules.map.max_pairs": "32",
	}
	vFn, err = vrhLabels(rulesLabels)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ConsulInfo.labels: %s", err)
		panic(errMsg)
	}
	v.FldValidators["labels"] = vFn

	return v
}()

func ConsulInfoValidator() db.Validator {
	return DefaultConsulInfoValidator
}

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *CreateSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetWhereDRefInfo()

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetWhereDRefInfo() ([]db.DRefInfo, error) {
	if m.GetWhere() == nil {
		return nil, nil
	}

	drInfos, err := m.GetWhere().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetWhere().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "where." + dri.DRField
	}
	return drInfos, err

}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) EndpointAddressIpValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_Ip, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ip")
	}
	return oValidatorFn_Ip, nil
}
func (v *ValidateCreateSpecType) EndpointAddressDnsNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_DnsName, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for dns_name")
	}
	return oValidatorFn_DnsName, nil
}

func (v *ValidateCreateSpecType) PortValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for port")
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) ProtocolValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for protocol")
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) HealthCheckPortValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for health_check_port")
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	switch m.GetEndpointAddress().(type) {
	case *CreateSpecType_Ip:
		if fv, exists := v.FldValidators["endpoint_address.ip"]; exists {
			val := m.GetEndpointAddress().(*CreateSpecType_Ip).Ip
			vOpts := append(opts,
				db.WithValidateField("endpoint_address"),
				db.WithValidateField("ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_DnsName:
		if fv, exists := v.FldValidators["endpoint_address.dns_name"]; exists {
			val := m.GetEndpointAddress().(*CreateSpecType_DnsName).DnsName
			vOpts := append(opts,
				db.WithValidateField("endpoint_address"),
				db.WithValidateField("dns_name"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_ServiceInfo:
		if fv, exists := v.FldValidators["endpoint_address.service_info"]; exists {
			val := m.GetEndpointAddress().(*CreateSpecType_ServiceInfo).ServiceInfo
			vOpts := append(opts,
				db.WithValidateField("endpoint_address"),
				db.WithValidateField("service_info"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_DnsNameAdvanced:
		if fv, exists := v.FldValidators["endpoint_address.dns_name_advanced"]; exists {
			val := m.GetEndpointAddress().(*CreateSpecType_DnsNameAdvanced).DnsNameAdvanced
			vOpts := append(opts,
				db.WithValidateField("endpoint_address"),
				db.WithValidateField("dns_name_advanced"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["health_check_port"]; exists {

		vOpts := append(opts, db.WithValidateField("health_check_port"))
		if err := fv(ctx, m.GetHealthCheckPort(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["port"]; exists {

		vOpts := append(opts, db.WithValidateField("port"))
		if err := fv(ctx, m.GetPort(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["protocol"]; exists {

		vOpts := append(opts, db.WithValidateField("protocol"))
		if err := fv(ctx, m.GetProtocol(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["snat_pool"]; exists {

		vOpts := append(opts, db.WithValidateField("snat_pool"))
		if err := fv(ctx, m.GetSnatPool(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["where"]; exists {

		vOpts := append(opts, db.WithValidateField("where"))
		if err := fv(ctx, m.GetWhere(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhEndpointAddressIp := v.EndpointAddressIpValidationRuleHandler
	rulesEndpointAddressIp := map[string]string{
		"ves.io.schema.rules.string.ip": "true",
	}
	vFnMap["endpoint_address.ip"], err = vrhEndpointAddressIp(rulesEndpointAddressIp)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field CreateSpecType.endpoint_address_ip: %s", err)
		panic(errMsg)
	}
	vrhEndpointAddressDnsName := v.EndpointAddressDnsNameValidationRuleHandler
	rulesEndpointAddressDnsName := map[string]string{
		"ves.io.schema.rules.string.hostname": "true",
		"ves.io.schema.rules.string.max_len":  "256",
	}
	vFnMap["endpoint_address.dns_name"], err = vrhEndpointAddressDnsName(rulesEndpointAddressDnsName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field CreateSpecType.endpoint_address_dns_name: %s", err)
		panic(errMsg)
	}

	v.FldValidators["endpoint_address.ip"] = vFnMap["endpoint_address.ip"]
	v.FldValidators["endpoint_address.dns_name"] = vFnMap["endpoint_address.dns_name"]

	vrhPort := v.PortValidationRuleHandler
	rulesPort := map[string]string{
		"ves.io.schema.rules.uint32.lte": "65535",
	}
	vFn, err = vrhPort(rulesPort)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.port: %s", err)
		panic(errMsg)
	}
	v.FldValidators["port"] = vFn

	vrhProtocol := v.ProtocolValidationRuleHandler
	rulesProtocol := map[string]string{
		"ves.io.schema.rules.string.in": "[\"TCP\",\"UDP\"]",
	}
	vFn, err = vrhProtocol(rulesProtocol)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.protocol: %s", err)
		panic(errMsg)
	}
	v.FldValidators["protocol"] = vFn

	vrhHealthCheckPort := v.HealthCheckPortValidationRuleHandler
	rulesHealthCheckPort := map[string]string{
		"ves.io.schema.rules.uint32.lte": "65535",
	}
	vFn, err = vrhHealthCheckPort(rulesHealthCheckPort)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.health_check_port: %s", err)
		panic(errMsg)
	}
	v.FldValidators["health_check_port"] = vFn

	v.FldValidators["endpoint_address.service_info"] = ServiceInfoTypeValidator().Validate
	v.FldValidators["endpoint_address.dns_name_advanced"] = DnsNameAdvancedTypeValidator().Validate

	v.FldValidators["where"] = ves_io_schema.NetworkSiteRefSelectorValidator().Validate

	v.FldValidators["snat_pool"] = ves_io_schema_views.SnatPoolConfigurationValidator().Validate

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *DNSInfo) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DNSInfo) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DNSInfo) DeepCopy() *DNSInfo {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DNSInfo{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DNSInfo) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DNSInfo) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DNSInfoValidator().Validate(ctx, m, opts...)
}

type ValidateDNSInfo struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDNSInfo) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DNSInfo)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DNSInfo got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["resolved_ips"]; exists {

		vOpts := append(opts, db.WithValidateField("resolved_ips"))
		for idx, item := range m.GetResolvedIps() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDNSInfoValidator = func() *ValidateDNSInfo {
	v := &ValidateDNSInfo{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func DNSInfoValidator() db.Validator {
	return DefaultDNSInfoValidator
}

// augmented methods on protoc/std generated struct

func (m *DiscoveredInfoType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DiscoveredInfoType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DiscoveredInfoType) DeepCopy() *DiscoveredInfoType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DiscoveredInfoType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DiscoveredInfoType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DiscoveredInfoType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DiscoveredInfoTypeValidator().Validate(ctx, m, opts...)
}

type ValidateDiscoveredInfoType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDiscoveredInfoType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DiscoveredInfoType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DiscoveredInfoType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	switch m.GetDiscoveredInfo().(type) {
	case *DiscoveredInfoType_K8SInfo:
		if fv, exists := v.FldValidators["discovered_info.k8s_info"]; exists {
			val := m.GetDiscoveredInfo().(*DiscoveredInfoType_K8SInfo).K8SInfo
			vOpts := append(opts,
				db.WithValidateField("discovered_info"),
				db.WithValidateField("k8s_info"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *DiscoveredInfoType_ConsulInfo:
		if fv, exists := v.FldValidators["discovered_info.consul_info"]; exists {
			val := m.GetDiscoveredInfo().(*DiscoveredInfoType_ConsulInfo).ConsulInfo
			vOpts := append(opts,
				db.WithValidateField("discovered_info"),
				db.WithValidateField("consul_info"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *DiscoveredInfoType_DnsInfo:
		if fv, exists := v.FldValidators["discovered_info.dns_info"]; exists {
			val := m.GetDiscoveredInfo().(*DiscoveredInfoType_DnsInfo).DnsInfo
			vOpts := append(opts,
				db.WithValidateField("discovered_info"),
				db.WithValidateField("dns_info"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDiscoveredInfoTypeValidator = func() *ValidateDiscoveredInfoType {
	v := &ValidateDiscoveredInfoType{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["discovered_info.k8s_info"] = K8SInfoValidator().Validate
	v.FldValidators["discovered_info.consul_info"] = ConsulInfoValidator().Validate

	return v
}()

func DiscoveredInfoTypeValidator() db.Validator {
	return DefaultDiscoveredInfoTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *DnsNameAdvancedType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DnsNameAdvancedType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DnsNameAdvancedType) DeepCopy() *DnsNameAdvancedType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DnsNameAdvancedType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DnsNameAdvancedType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DnsNameAdvancedType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DnsNameAdvancedTypeValidator().Validate(ctx, m, opts...)
}

type ValidateDnsNameAdvancedType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDnsNameAdvancedType) TtlChoiceRefreshIntervalValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_RefreshInterval, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for refresh_interval")
	}
	return oValidatorFn_RefreshInterval, nil
}

func (v *ValidateDnsNameAdvancedType) NameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for name")
	}

	return validatorFn, nil
}

func (v *ValidateDnsNameAdvancedType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DnsNameAdvancedType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DnsNameAdvancedType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetTtlChoice().(type) {
	case *DnsNameAdvancedType_StrictTtl:
		if fv, exists := v.FldValidators["ttl_choice.strict_ttl"]; exists {
			val := m.GetTtlChoice().(*DnsNameAdvancedType_StrictTtl).StrictTtl
			vOpts := append(opts,
				db.WithValidateField("ttl_choice"),
				db.WithValidateField("strict_ttl"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *DnsNameAdvancedType_RefreshInterval:
		if fv, exists := v.FldValidators["ttl_choice.refresh_interval"]; exists {
			val := m.GetTtlChoice().(*DnsNameAdvancedType_RefreshInterval).RefreshInterval
			vOpts := append(opts,
				db.WithValidateField("ttl_choice"),
				db.WithValidateField("refresh_interval"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDnsNameAdvancedTypeValidator = func() *ValidateDnsNameAdvancedType {
	v := &ValidateDnsNameAdvancedType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhTtlChoiceRefreshInterval := v.TtlChoiceRefreshIntervalValidationRuleHandler
	rulesTtlChoiceRefreshInterval := map[string]string{
		"ves.io.schema.rules.uint32.gte": "10",
		"ves.io.schema.rules.uint32.lte": "604800",
	}
	vFnMap["ttl_choice.refresh_interval"], err = vrhTtlChoiceRefreshInterval(rulesTtlChoiceRefreshInterval)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field DnsNameAdvancedType.ttl_choice_refresh_interval: %s", err)
		panic(errMsg)
	}

	v.FldValidators["ttl_choice.refresh_interval"] = vFnMap["ttl_choice.refresh_interval"]

	vrhName := v.NameValidationRuleHandler
	rulesName := map[string]string{
		"ves.io.schema.rules.string.hostname": "true",
		"ves.io.schema.rules.string.max_len":  "256",
	}
	vFn, err = vrhName(rulesName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DnsNameAdvancedType.name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["name"] = vFn

	return v
}()

func DnsNameAdvancedTypeValidator() db.Validator {
	return DefaultDnsNameAdvancedTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GetSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetWhereDRefInfo()

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetWhereDRefInfo() ([]db.DRefInfo, error) {
	if m.GetWhere() == nil {
		return nil, nil
	}

	drInfos, err := m.GetWhere().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetWhere().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "where." + dri.DRField
	}
	return drInfos, err

}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) EndpointAddressIpValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_Ip, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ip")
	}
	return oValidatorFn_Ip, nil
}
func (v *ValidateGetSpecType) EndpointAddressDnsNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_DnsName, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for dns_name")
	}
	return oValidatorFn_DnsName, nil
}

func (v *ValidateGetSpecType) PortValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for port")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) ProtocolValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for protocol")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) HealthCheckPortValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for health_check_port")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	switch m.GetEndpointAddress().(type) {
	case *GetSpecType_Ip:
		if fv, exists := v.FldValidators["endpoint_address.ip"]; exists {
			val := m.GetEndpointAddress().(*GetSpecType_Ip).Ip
			vOpts := append(opts,
				db.WithValidateField("endpoint_address"),
				db.WithValidateField("ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_DnsName:
		if fv, exists := v.FldValidators["endpoint_address.dns_name"]; exists {
			val := m.GetEndpointAddress().(*GetSpecType_DnsName).DnsName
			vOpts := append(opts,
				db.WithValidateField("endpoint_address"),
				db.WithValidateField("dns_name"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_ServiceInfo:
		if fv, exists := v.FldValidators["endpoint_address.service_info"]; exists {
			val := m.GetEndpointAddress().(*GetSpecType_ServiceInfo).ServiceInfo
			vOpts := append(opts,
				db.WithValidateField("endpoint_address"),
				db.WithValidateField("service_info"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_DnsNameAdvanced:
		if fv, exists := v.FldValidators["endpoint_address.dns_name_advanced"]; exists {
			val := m.GetEndpointAddress().(*GetSpecType_DnsNameAdvanced).DnsNameAdvanced
			vOpts := append(opts,
				db.WithValidateField("endpoint_address"),
				db.WithValidateField("dns_name_advanced"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["health_check_port"]; exists {

		vOpts := append(opts, db.WithValidateField("health_check_port"))
		if err := fv(ctx, m.GetHealthCheckPort(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["port"]; exists {

		vOpts := append(opts, db.WithValidateField("port"))
		if err := fv(ctx, m.GetPort(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["protocol"]; exists {

		vOpts := append(opts, db.WithValidateField("protocol"))
		if err := fv(ctx, m.GetProtocol(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["snat_pool"]; exists {

		vOpts := append(opts, db.WithValidateField("snat_pool"))
		if err := fv(ctx, m.GetSnatPool(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["where"]; exists {

		vOpts := append(opts, db.WithValidateField("where"))
		if err := fv(ctx, m.GetWhere(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhEndpointAddressIp := v.EndpointAddressIpValidationRuleHandler
	rulesEndpointAddressIp := map[string]string{
		"ves.io.schema.rules.string.ip": "true",
	}
	vFnMap["endpoint_address.ip"], err = vrhEndpointAddressIp(rulesEndpointAddressIp)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field GetSpecType.endpoint_address_ip: %s", err)
		panic(errMsg)
	}
	vrhEndpointAddressDnsName := v.EndpointAddressDnsNameValidationRuleHandler
	rulesEndpointAddressDnsName := map[string]string{
		"ves.io.schema.rules.string.hostname": "true",
		"ves.io.schema.rules.string.max_len":  "256",
	}
	vFnMap["endpoint_address.dns_name"], err = vrhEndpointAddressDnsName(rulesEndpointAddressDnsName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field GetSpecType.endpoint_address_dns_name: %s", err)
		panic(errMsg)
	}

	v.FldValidators["endpoint_address.ip"] = vFnMap["endpoint_address.ip"]
	v.FldValidators["endpoint_address.dns_name"] = vFnMap["endpoint_address.dns_name"]

	vrhPort := v.PortValidationRuleHandler
	rulesPort := map[string]string{
		"ves.io.schema.rules.uint32.lte": "65535",
	}
	vFn, err = vrhPort(rulesPort)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.port: %s", err)
		panic(errMsg)
	}
	v.FldValidators["port"] = vFn

	vrhProtocol := v.ProtocolValidationRuleHandler
	rulesProtocol := map[string]string{
		"ves.io.schema.rules.string.in": "[\"TCP\",\"UDP\"]",
	}
	vFn, err = vrhProtocol(rulesProtocol)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.protocol: %s", err)
		panic(errMsg)
	}
	v.FldValidators["protocol"] = vFn

	vrhHealthCheckPort := v.HealthCheckPortValidationRuleHandler
	rulesHealthCheckPort := map[string]string{
		"ves.io.schema.rules.uint32.lte": "65535",
	}
	vFn, err = vrhHealthCheckPort(rulesHealthCheckPort)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.health_check_port: %s", err)
		panic(errMsg)
	}
	v.FldValidators["health_check_port"] = vFn

	v.FldValidators["endpoint_address.service_info"] = ServiceInfoTypeValidator().Validate
	v.FldValidators["endpoint_address.dns_name_advanced"] = DnsNameAdvancedTypeValidator().Validate

	v.FldValidators["where"] = ves_io_schema.NetworkSiteRefSelectorValidator().Validate

	v.FldValidators["snat_pool"] = ves_io_schema_views.SnatPoolConfigurationValidator().Validate

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GlobalSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetProximityChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetProximityChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetWhereDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetWhereDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetProximityChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetProximityChoice() == nil {
		return nil, nil
	}
	switch m.GetProximityChoice().(type) {
	case *GlobalSpecType_NoPreference:

		return nil, nil

	case *GlobalSpecType_SitePreferences:

		drInfos, err := m.GetSitePreferences().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSitePreferences().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "site_preferences." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetWhereDRefInfo() ([]db.DRefInfo, error) {
	if m.GetWhere() == nil {
		return nil, nil
	}

	drInfos, err := m.GetWhere().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetWhere().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "where." + dri.DRField
	}
	return drInfos, err

}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) EndpointAddressIpValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_Ip, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ip")
	}
	return oValidatorFn_Ip, nil
}
func (v *ValidateGlobalSpecType) EndpointAddressDnsNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_DnsName, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for dns_name")
	}
	return oValidatorFn_DnsName, nil
}
func (v *ValidateGlobalSpecType) EndpointAddressServerlessServiceNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_ServerlessServiceName, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for serverless_service_name")
	}
	return oValidatorFn_ServerlessServiceName, nil
}

func (v *ValidateGlobalSpecType) PortValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for port")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) ProtocolValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for protocol")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) HealthCheckPortValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for health_check_port")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	switch m.GetEndpointAddress().(type) {
	case *GlobalSpecType_Ip:
		if fv, exists := v.FldValidators["endpoint_address.ip"]; exists {
			val := m.GetEndpointAddress().(*GlobalSpecType_Ip).Ip
			vOpts := append(opts,
				db.WithValidateField("endpoint_address"),
				db.WithValidateField("ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_DnsName:
		if fv, exists := v.FldValidators["endpoint_address.dns_name"]; exists {
			val := m.GetEndpointAddress().(*GlobalSpecType_DnsName).DnsName
			vOpts := append(opts,
				db.WithValidateField("endpoint_address"),
				db.WithValidateField("dns_name"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_ServerlessServiceName:
		if fv, exists := v.FldValidators["endpoint_address.serverless_service_name"]; exists {
			val := m.GetEndpointAddress().(*GlobalSpecType_ServerlessServiceName).ServerlessServiceName
			vOpts := append(opts,
				db.WithValidateField("endpoint_address"),
				db.WithValidateField("serverless_service_name"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_ServiceInfo:
		if fv, exists := v.FldValidators["endpoint_address.service_info"]; exists {
			val := m.GetEndpointAddress().(*GlobalSpecType_ServiceInfo).ServiceInfo
			vOpts := append(opts,
				db.WithValidateField("endpoint_address"),
				db.WithValidateField("service_info"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_DnsNameAdvanced:
		if fv, exists := v.FldValidators["endpoint_address.dns_name_advanced"]; exists {
			val := m.GetEndpointAddress().(*GlobalSpecType_DnsNameAdvanced).DnsNameAdvanced
			vOpts := append(opts,
				db.WithValidateField("endpoint_address"),
				db.WithValidateField("dns_name_advanced"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_K8SClusterApiServer:
		if fv, exists := v.FldValidators["endpoint_address.k8s_cluster_api_server"]; exists {
			val := m.GetEndpointAddress().(*GlobalSpecType_K8SClusterApiServer).K8SClusterApiServer
			vOpts := append(opts,
				db.WithValidateField("endpoint_address"),
				db.WithValidateField("k8s_cluster_api_server"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["health_check_port"]; exists {

		vOpts := append(opts, db.WithValidateField("health_check_port"))
		if err := fv(ctx, m.GetHealthCheckPort(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["port"]; exists {

		vOpts := append(opts, db.WithValidateField("port"))
		if err := fv(ctx, m.GetPort(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["protocol"]; exists {

		vOpts := append(opts, db.WithValidateField("protocol"))
		if err := fv(ctx, m.GetProtocol(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetProximityChoice().(type) {
	case *GlobalSpecType_NoPreference:
		if fv, exists := v.FldValidators["proximity_choice.no_preference"]; exists {
			val := m.GetProximityChoice().(*GlobalSpecType_NoPreference).NoPreference
			vOpts := append(opts,
				db.WithValidateField("proximity_choice"),
				db.WithValidateField("no_preference"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_SitePreferences:
		if fv, exists := v.FldValidators["proximity_choice.site_preferences"]; exists {
			val := m.GetProximityChoice().(*GlobalSpecType_SitePreferences).SitePreferences
			vOpts := append(opts,
				db.WithValidateField("proximity_choice"),
				db.WithValidateField("site_preferences"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["snat_pool"]; exists {

		vOpts := append(opts, db.WithValidateField("snat_pool"))
		if err := fv(ctx, m.GetSnatPool(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["where"]; exists {

		vOpts := append(opts, db.WithValidateField("where"))
		if err := fv(ctx, m.GetWhere(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhEndpointAddressIp := v.EndpointAddressIpValidationRuleHandler
	rulesEndpointAddressIp := map[string]string{
		"ves.io.schema.rules.string.ip": "true",
	}
	vFnMap["endpoint_address.ip"], err = vrhEndpointAddressIp(rulesEndpointAddressIp)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field GlobalSpecType.endpoint_address_ip: %s", err)
		panic(errMsg)
	}
	vrhEndpointAddressDnsName := v.EndpointAddressDnsNameValidationRuleHandler
	rulesEndpointAddressDnsName := map[string]string{
		"ves.io.schema.rules.string.hostname": "true",
		"ves.io.schema.rules.string.max_len":  "256",
	}
	vFnMap["endpoint_address.dns_name"], err = vrhEndpointAddressDnsName(rulesEndpointAddressDnsName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field GlobalSpecType.endpoint_address_dns_name: %s", err)
		panic(errMsg)
	}
	vrhEndpointAddressServerlessServiceName := v.EndpointAddressServerlessServiceNameValidationRuleHandler
	rulesEndpointAddressServerlessServiceName := map[string]string{
		"ves.io.schema.rules.string.max_len": "256",
	}
	vFnMap["endpoint_address.serverless_service_name"], err = vrhEndpointAddressServerlessServiceName(rulesEndpointAddressServerlessServiceName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field GlobalSpecType.endpoint_address_serverless_service_name: %s", err)
		panic(errMsg)
	}

	v.FldValidators["endpoint_address.ip"] = vFnMap["endpoint_address.ip"]
	v.FldValidators["endpoint_address.dns_name"] = vFnMap["endpoint_address.dns_name"]
	v.FldValidators["endpoint_address.serverless_service_name"] = vFnMap["endpoint_address.serverless_service_name"]

	vrhPort := v.PortValidationRuleHandler
	rulesPort := map[string]string{
		"ves.io.schema.rules.uint32.lte": "65535",
	}
	vFn, err = vrhPort(rulesPort)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.port: %s", err)
		panic(errMsg)
	}
	v.FldValidators["port"] = vFn

	vrhProtocol := v.ProtocolValidationRuleHandler
	rulesProtocol := map[string]string{
		"ves.io.schema.rules.string.in": "[\"TCP\",\"UDP\"]",
	}
	vFn, err = vrhProtocol(rulesProtocol)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.protocol: %s", err)
		panic(errMsg)
	}
	v.FldValidators["protocol"] = vFn

	vrhHealthCheckPort := v.HealthCheckPortValidationRuleHandler
	rulesHealthCheckPort := map[string]string{
		"ves.io.schema.rules.uint32.lte": "65535",
	}
	vFn, err = vrhHealthCheckPort(rulesHealthCheckPort)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.health_check_port: %s", err)
		panic(errMsg)
	}
	v.FldValidators["health_check_port"] = vFn

	v.FldValidators["endpoint_address.service_info"] = ServiceInfoTypeValidator().Validate
	v.FldValidators["endpoint_address.dns_name_advanced"] = DnsNameAdvancedTypeValidator().Validate

	v.FldValidators["proximity_choice.site_preferences"] = ves_io_schema.SiteReferenceListTypeValidator().Validate

	v.FldValidators["where"] = ves_io_schema.NetworkSiteRefSelectorValidator().Validate

	v.FldValidators["snat_pool"] = ves_io_schema_views.SnatPoolConfigurationValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *HealthCheckInfoType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *HealthCheckInfoType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *HealthCheckInfoType) DeepCopy() *HealthCheckInfoType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &HealthCheckInfoType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *HealthCheckInfoType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *HealthCheckInfoType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return HealthCheckInfoTypeValidator().Validate(ctx, m, opts...)
}

type ValidateHealthCheckInfoType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateHealthCheckInfoType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*HealthCheckInfoType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *HealthCheckInfoType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["health_check"]; exists {

		vOpts := append(opts, db.WithValidateField("health_check"))
		if err := fv(ctx, m.GetHealthCheck(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["health_status"]; exists {

		vOpts := append(opts, db.WithValidateField("health_status"))
		if err := fv(ctx, m.GetHealthStatus(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["health_status_failure_details"]; exists {

		vOpts := append(opts, db.WithValidateField("health_status_failure_details"))
		if err := fv(ctx, m.GetHealthStatusFailureDetails(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["health_status_failure_reason"]; exists {

		vOpts := append(opts, db.WithValidateField("health_status_failure_reason"))
		if err := fv(ctx, m.GetHealthStatusFailureReason(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["health_status_update_time"]; exists {

		vOpts := append(opts, db.WithValidateField("health_status_update_time"))
		if err := fv(ctx, m.GetHealthStatusUpdateTime(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["last_health_status_failure_details"]; exists {

		vOpts := append(opts, db.WithValidateField("last_health_status_failure_details"))
		if err := fv(ctx, m.GetLastHealthStatusFailureDetails(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["last_health_status_failure_reason"]; exists {

		vOpts := append(opts, db.WithValidateField("last_health_status_failure_reason"))
		if err := fv(ctx, m.GetLastHealthStatusFailureReason(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["last_health_status_update_time"]; exists {

		vOpts := append(opts, db.WithValidateField("last_health_status_update_time"))
		if err := fv(ctx, m.GetLastHealthStatusUpdateTime(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultHealthCheckInfoTypeValidator = func() *ValidateHealthCheckInfoType {
	v := &ValidateHealthCheckInfoType{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["health_check"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func HealthCheckInfoTypeValidator() db.Validator {
	return DefaultHealthCheckInfoTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *K8SInfo) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *K8SInfo) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *K8SInfo) DeepCopy() *K8SInfo {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &K8SInfo{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *K8SInfo) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *K8SInfo) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return K8SInfoValidator().Validate(ctx, m, opts...)
}

type ValidateK8SInfo struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateK8SInfo) LabelsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemKeyRules := db.GetMapStringKeyRules(rules)
	itemKeyFn, err := db.NewStringValidationRuleHandler(itemKeyRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item key ValidationRuleHandler for labels")
	}
	itemValRules := db.GetMapStringValueRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemValRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item value ValidationRuleHandler for labels")
	}
	itemsValidatorFn := func(ctx context.Context, kv map[string]string, opts ...db.ValidateOpt) error {
		for key, value := range kv {
			if err := itemKeyFn(ctx, key, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element with key %v", key))
			}
			if err := itemValFn(ctx, value, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("value for element with key %v", key))
			}
		}
		return nil
	}
	mapValFn, err := db.NewMapValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Map ValidationRuleHandler for labels")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.(map[string]string)
		if !ok {
			return fmt.Errorf("Map validation expected map[ string ]string, got %T", val)
		}
		if err := mapValFn(ctx, len(elems), opts...); err != nil {
			return errors.Wrap(err, "map labels")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items labels")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateK8SInfo) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*K8SInfo)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *K8SInfo got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["in_cluster_discovery"]; exists {

		vOpts := append(opts, db.WithValidateField("in_cluster_discovery"))
		if err := fv(ctx, m.GetInClusterDiscovery(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["labels"]; exists {
		vOpts := append(opts, db.WithValidateField("labels"))
		if err := fv(ctx, m.GetLabels(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["pod_name"]; exists {

		vOpts := append(opts, db.WithValidateField("pod_name"))
		for idx, item := range m.GetPodName() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultK8SInfoValidator = func() *ValidateK8SInfo {
	v := &ValidateK8SInfo{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhLabels := v.LabelsValidationRuleHandler
	rulesLabels := map[string]string{
		"ves.io.schema.rules.map.max_pairs": "32",
	}
	vFn, err = vrhLabels(rulesLabels)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for K8SInfo.labels: %s", err)
		panic(errMsg)
	}
	v.FldValidators["labels"] = vFn

	return v
}()

func K8SInfoValidator() db.Validator {
	return DefaultK8SInfoValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *ReplaceSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetWhereDRefInfo()

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetWhereDRefInfo() ([]db.DRefInfo, error) {
	if m.GetWhere() == nil {
		return nil, nil
	}

	drInfos, err := m.GetWhere().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetWhere().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "where." + dri.DRField
	}
	return drInfos, err

}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) EndpointAddressIpValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_Ip, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ip")
	}
	return oValidatorFn_Ip, nil
}
func (v *ValidateReplaceSpecType) EndpointAddressDnsNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_DnsName, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for dns_name")
	}
	return oValidatorFn_DnsName, nil
}

func (v *ValidateReplaceSpecType) PortValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for port")
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) ProtocolValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for protocol")
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) HealthCheckPortValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for health_check_port")
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	switch m.GetEndpointAddress().(type) {
	case *ReplaceSpecType_Ip:
		if fv, exists := v.FldValidators["endpoint_address.ip"]; exists {
			val := m.GetEndpointAddress().(*ReplaceSpecType_Ip).Ip
			vOpts := append(opts,
				db.WithValidateField("endpoint_address"),
				db.WithValidateField("ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_DnsName:
		if fv, exists := v.FldValidators["endpoint_address.dns_name"]; exists {
			val := m.GetEndpointAddress().(*ReplaceSpecType_DnsName).DnsName
			vOpts := append(opts,
				db.WithValidateField("endpoint_address"),
				db.WithValidateField("dns_name"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_ServiceInfo:
		if fv, exists := v.FldValidators["endpoint_address.service_info"]; exists {
			val := m.GetEndpointAddress().(*ReplaceSpecType_ServiceInfo).ServiceInfo
			vOpts := append(opts,
				db.WithValidateField("endpoint_address"),
				db.WithValidateField("service_info"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_DnsNameAdvanced:
		if fv, exists := v.FldValidators["endpoint_address.dns_name_advanced"]; exists {
			val := m.GetEndpointAddress().(*ReplaceSpecType_DnsNameAdvanced).DnsNameAdvanced
			vOpts := append(opts,
				db.WithValidateField("endpoint_address"),
				db.WithValidateField("dns_name_advanced"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["health_check_port"]; exists {

		vOpts := append(opts, db.WithValidateField("health_check_port"))
		if err := fv(ctx, m.GetHealthCheckPort(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["port"]; exists {

		vOpts := append(opts, db.WithValidateField("port"))
		if err := fv(ctx, m.GetPort(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["protocol"]; exists {

		vOpts := append(opts, db.WithValidateField("protocol"))
		if err := fv(ctx, m.GetProtocol(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["snat_pool"]; exists {

		vOpts := append(opts, db.WithValidateField("snat_pool"))
		if err := fv(ctx, m.GetSnatPool(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["where"]; exists {

		vOpts := append(opts, db.WithValidateField("where"))
		if err := fv(ctx, m.GetWhere(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhEndpointAddressIp := v.EndpointAddressIpValidationRuleHandler
	rulesEndpointAddressIp := map[string]string{
		"ves.io.schema.rules.string.ip": "true",
	}
	vFnMap["endpoint_address.ip"], err = vrhEndpointAddressIp(rulesEndpointAddressIp)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field ReplaceSpecType.endpoint_address_ip: %s", err)
		panic(errMsg)
	}
	vrhEndpointAddressDnsName := v.EndpointAddressDnsNameValidationRuleHandler
	rulesEndpointAddressDnsName := map[string]string{
		"ves.io.schema.rules.string.hostname": "true",
		"ves.io.schema.rules.string.max_len":  "256",
	}
	vFnMap["endpoint_address.dns_name"], err = vrhEndpointAddressDnsName(rulesEndpointAddressDnsName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field ReplaceSpecType.endpoint_address_dns_name: %s", err)
		panic(errMsg)
	}

	v.FldValidators["endpoint_address.ip"] = vFnMap["endpoint_address.ip"]
	v.FldValidators["endpoint_address.dns_name"] = vFnMap["endpoint_address.dns_name"]

	vrhPort := v.PortValidationRuleHandler
	rulesPort := map[string]string{
		"ves.io.schema.rules.uint32.lte": "65535",
	}
	vFn, err = vrhPort(rulesPort)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.port: %s", err)
		panic(errMsg)
	}
	v.FldValidators["port"] = vFn

	vrhProtocol := v.ProtocolValidationRuleHandler
	rulesProtocol := map[string]string{
		"ves.io.schema.rules.string.in": "[\"TCP\",\"UDP\"]",
	}
	vFn, err = vrhProtocol(rulesProtocol)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.protocol: %s", err)
		panic(errMsg)
	}
	v.FldValidators["protocol"] = vFn

	vrhHealthCheckPort := v.HealthCheckPortValidationRuleHandler
	rulesHealthCheckPort := map[string]string{
		"ves.io.schema.rules.uint32.lte": "65535",
	}
	vFn, err = vrhHealthCheckPort(rulesHealthCheckPort)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.health_check_port: %s", err)
		panic(errMsg)
	}
	v.FldValidators["health_check_port"] = vFn

	v.FldValidators["endpoint_address.service_info"] = ServiceInfoTypeValidator().Validate
	v.FldValidators["endpoint_address.dns_name_advanced"] = DnsNameAdvancedTypeValidator().Validate

	v.FldValidators["where"] = ves_io_schema.NetworkSiteRefSelectorValidator().Validate

	v.FldValidators["snat_pool"] = ves_io_schema_views.SnatPoolConfigurationValidator().Validate

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ServiceInfoType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ServiceInfoType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ServiceInfoType) DeepCopy() *ServiceInfoType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ServiceInfoType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ServiceInfoType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ServiceInfoType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ServiceInfoTypeValidator().Validate(ctx, m, opts...)
}

type ValidateServiceInfoType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateServiceInfoType) ServiceInfoServiceNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_ServiceName, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for service_name")
	}
	return oValidatorFn_ServiceName, nil
}

func (v *ValidateServiceInfoType) DiscoveryTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema.DiscoveryType)
		return int32(i)
	}
	// ves_io_schema.DiscoveryType_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, ves_io_schema.DiscoveryType_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for discovery_type")
	}

	return validatorFn, nil
}

func (v *ValidateServiceInfoType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ServiceInfoType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ServiceInfoType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["discovery_type"]; exists {

		vOpts := append(opts, db.WithValidateField("discovery_type"))
		if err := fv(ctx, m.GetDiscoveryType(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetServiceInfo().(type) {
	case *ServiceInfoType_ServiceName:
		if fv, exists := v.FldValidators["service_info.service_name"]; exists {
			val := m.GetServiceInfo().(*ServiceInfoType_ServiceName).ServiceName
			vOpts := append(opts,
				db.WithValidateField("service_info"),
				db.WithValidateField("service_name"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServiceInfoType_ServiceSelector:
		if fv, exists := v.FldValidators["service_info.service_selector"]; exists {
			val := m.GetServiceInfo().(*ServiceInfoType_ServiceSelector).ServiceSelector
			vOpts := append(opts,
				db.WithValidateField("service_info"),
				db.WithValidateField("service_selector"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultServiceInfoTypeValidator = func() *ValidateServiceInfoType {
	v := &ValidateServiceInfoType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhServiceInfoServiceName := v.ServiceInfoServiceNameValidationRuleHandler
	rulesServiceInfoServiceName := map[string]string{
		"ves.io.schema.rules.string.max_bytes": "256",
	}
	vFnMap["service_info.service_name"], err = vrhServiceInfoServiceName(rulesServiceInfoServiceName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field ServiceInfoType.service_info_service_name: %s", err)
		panic(errMsg)
	}

	v.FldValidators["service_info.service_name"] = vFnMap["service_info.service_name"]

	vrhDiscoveryType := v.DiscoveryTypeValidationRuleHandler
	rulesDiscoveryType := map[string]string{
		"ves.io.schema.rules.enum.not_in":      "0",
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhDiscoveryType(rulesDiscoveryType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ServiceInfoType.discovery_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["discovery_type"] = vFn

	v.FldValidators["service_info.service_selector"] = ves_io_schema.LabelSelectorTypeValidator().Validate

	return v
}()

func ServiceInfoTypeValidator() db.Validator {
	return DefaultServiceInfoTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *VerStatusType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *VerStatusType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *VerStatusType) DeepCopy() *VerStatusType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &VerStatusType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *VerStatusType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *VerStatusType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return VerStatusTypeValidator().Validate(ctx, m, opts...)
}

type ValidateVerStatusType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateVerStatusType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*VerStatusType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *VerStatusType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["allocated_ip"]; exists {

		vOpts := append(opts, db.WithValidateField("allocated_ip"))
		if err := fv(ctx, m.GetAllocatedIp(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["discovered_info"]; exists {

		vOpts := append(opts, db.WithValidateField("discovered_info"))
		if err := fv(ctx, m.GetDiscoveredInfo(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["discovered_ip"]; exists {

		vOpts := append(opts, db.WithValidateField("discovered_ip"))
		if err := fv(ctx, m.GetDiscoveredIp(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["discovered_port"]; exists {

		vOpts := append(opts, db.WithValidateField("discovered_port"))
		if err := fv(ctx, m.GetDiscoveredPort(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["health_check_details"]; exists {

		vOpts := append(opts, db.WithValidateField("health_check_details"))
		for idx, item := range m.GetHealthCheckDetails() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["health_status"]; exists {

		vOpts := append(opts, db.WithValidateField("health_status"))
		for key, value := range m.GetHealthStatus() {
			vOpts := append(vOpts, db.WithValidateMapKey(key))
			if err := fv(ctx, value, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["service_name"]; exists {

		vOpts := append(opts, db.WithValidateField("service_name"))
		if err := fv(ctx, m.GetServiceName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["site"]; exists {

		vOpts := append(opts, db.WithValidateField("site"))
		if err := fv(ctx, m.GetSite(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultVerStatusTypeValidator = func() *ValidateVerStatusType {
	v := &ValidateVerStatusType{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["discovered_ip"] = ves_io_schema.IpAddressTypeValidator().Validate

	v.FldValidators["allocated_ip"] = ves_io_schema.Ipv6AddressTypeValidator().Validate

	v.FldValidators["discovered_info"] = DiscoveredInfoTypeValidator().Validate

	v.FldValidators["health_check_details"] = HealthCheckInfoTypeValidator().Validate

	return v
}()

func VerStatusTypeValidator() db.Validator {
	return DefaultVerStatusTypeValidator
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetEndpointAddressToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.EndpointAddress.(type) {
	case nil:
		o.EndpointAddress = nil

	case *CreateSpecType_DnsName:
		o.EndpointAddress = &GlobalSpecType_DnsName{DnsName: of.DnsName}

	case *CreateSpecType_DnsNameAdvanced:
		o.EndpointAddress = &GlobalSpecType_DnsNameAdvanced{DnsNameAdvanced: of.DnsNameAdvanced}

	case *CreateSpecType_Ip:
		o.EndpointAddress = &GlobalSpecType_Ip{Ip: of.Ip}

	case *CreateSpecType_ServiceInfo:
		o.EndpointAddress = &GlobalSpecType_ServiceInfo{ServiceInfo: of.ServiceInfo}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetEndpointAddressFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.EndpointAddress.(type) {
	case nil:
		r.EndpointAddress = nil

	case *GlobalSpecType_DnsName:
		r.EndpointAddress = &CreateSpecType_DnsName{DnsName: of.DnsName}

	case *GlobalSpecType_DnsNameAdvanced:
		r.EndpointAddress = &CreateSpecType_DnsNameAdvanced{DnsNameAdvanced: of.DnsNameAdvanced}

	case *GlobalSpecType_Ip:
		r.EndpointAddress = &CreateSpecType_Ip{Ip: of.Ip}

	case *GlobalSpecType_ServiceInfo:
		r.EndpointAddress = &CreateSpecType_ServiceInfo{ServiceInfo: of.ServiceInfo}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *CreateSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetEndpointAddressFromGlobalSpecType(f)
	m.HealthCheckPort = f.GetHealthCheckPort()
	m.Port = f.GetPort()
	m.Protocol = f.GetProtocol()
	m.SnatPool = f.GetSnatPool()
	m.Where = f.GetWhere()
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *CreateSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *CreateSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetEndpointAddressToGlobalSpecType(f)
	f.HealthCheckPort = m1.HealthCheckPort
	f.Port = m1.Port
	f.Protocol = m1.Protocol
	f.SnatPool = m1.SnatPool
	f.Where = m1.Where
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *CreateSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetEndpointAddressToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.EndpointAddress.(type) {
	case nil:
		o.EndpointAddress = nil

	case *GetSpecType_DnsName:
		o.EndpointAddress = &GlobalSpecType_DnsName{DnsName: of.DnsName}

	case *GetSpecType_DnsNameAdvanced:
		o.EndpointAddress = &GlobalSpecType_DnsNameAdvanced{DnsNameAdvanced: of.DnsNameAdvanced}

	case *GetSpecType_Ip:
		o.EndpointAddress = &GlobalSpecType_Ip{Ip: of.Ip}

	case *GetSpecType_ServiceInfo:
		o.EndpointAddress = &GlobalSpecType_ServiceInfo{ServiceInfo: of.ServiceInfo}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetEndpointAddressFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.EndpointAddress.(type) {
	case nil:
		r.EndpointAddress = nil

	case *GlobalSpecType_DnsName:
		r.EndpointAddress = &GetSpecType_DnsName{DnsName: of.DnsName}

	case *GlobalSpecType_DnsNameAdvanced:
		r.EndpointAddress = &GetSpecType_DnsNameAdvanced{DnsNameAdvanced: of.DnsNameAdvanced}

	case *GlobalSpecType_Ip:
		r.EndpointAddress = &GetSpecType_Ip{Ip: of.Ip}

	case *GlobalSpecType_ServiceInfo:
		r.EndpointAddress = &GetSpecType_ServiceInfo{ServiceInfo: of.ServiceInfo}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetEndpointAddressFromGlobalSpecType(f)
	m.HealthCheckPort = f.GetHealthCheckPort()
	m.Port = f.GetPort()
	m.Protocol = f.GetProtocol()
	m.SnatPool = f.GetSnatPool()
	m.Where = f.GetWhere()
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetEndpointAddressToGlobalSpecType(f)
	f.HealthCheckPort = m1.HealthCheckPort
	f.Port = m1.Port
	f.Protocol = m1.Protocol
	f.SnatPool = m1.SnatPool
	f.Where = m1.Where
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetEndpointAddressToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.EndpointAddress.(type) {
	case nil:
		o.EndpointAddress = nil

	case *ReplaceSpecType_DnsName:
		o.EndpointAddress = &GlobalSpecType_DnsName{DnsName: of.DnsName}

	case *ReplaceSpecType_DnsNameAdvanced:
		o.EndpointAddress = &GlobalSpecType_DnsNameAdvanced{DnsNameAdvanced: of.DnsNameAdvanced}

	case *ReplaceSpecType_Ip:
		o.EndpointAddress = &GlobalSpecType_Ip{Ip: of.Ip}

	case *ReplaceSpecType_ServiceInfo:
		o.EndpointAddress = &GlobalSpecType_ServiceInfo{ServiceInfo: of.ServiceInfo}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetEndpointAddressFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.EndpointAddress.(type) {
	case nil:
		r.EndpointAddress = nil

	case *GlobalSpecType_DnsName:
		r.EndpointAddress = &ReplaceSpecType_DnsName{DnsName: of.DnsName}

	case *GlobalSpecType_DnsNameAdvanced:
		r.EndpointAddress = &ReplaceSpecType_DnsNameAdvanced{DnsNameAdvanced: of.DnsNameAdvanced}

	case *GlobalSpecType_Ip:
		r.EndpointAddress = &ReplaceSpecType_Ip{Ip: of.Ip}

	case *GlobalSpecType_ServiceInfo:
		r.EndpointAddress = &ReplaceSpecType_ServiceInfo{ServiceInfo: of.ServiceInfo}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *ReplaceSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetEndpointAddressFromGlobalSpecType(f)
	m.HealthCheckPort = f.GetHealthCheckPort()
	m.Port = f.GetPort()
	m.Protocol = f.GetProtocol()
	m.SnatPool = f.GetSnatPool()
	m.Where = f.GetWhere()
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetEndpointAddressToGlobalSpecType(f)
	f.HealthCheckPort = m1.HealthCheckPort
	f.Port = m1.Port
	f.Protocol = m1.Protocol
	f.SnatPool = m1.SnatPool
	f.Where = m1.Where
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

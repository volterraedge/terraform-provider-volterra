// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package tenant

import (
	"reflect"

	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/server"
	"gopkg.volterra.us/stdlib/store"
	"gopkg.volterra.us/stdlib/svcfw"
)

func initializeValidatorRegistry(vr map[string]db.Validator) {
	vr["ves.io.schema.tenant.AssignDomainOwnerRequest"] = AssignDomainOwnerRequestValidator()
	vr["ves.io.schema.tenant.DeleteTenantRequest"] = DeleteTenantRequestValidator()
	vr["ves.io.schema.tenant.DisableTenantResponse"] = DisableTenantResponseValidator()
	vr["ves.io.schema.tenant.EscalationDocResp"] = EscalationDocRespValidator()
	vr["ves.io.schema.tenant.GetLoginEventsInTimeFrameRequest"] = GetLoginEventsInTimeFrameRequestValidator()
	vr["ves.io.schema.tenant.GetLoginEventsRequest"] = GetLoginEventsRequestValidator()
	vr["ves.io.schema.tenant.GetPasswordPolicyRequest"] = GetPasswordPolicyRequestValidator()
	vr["ves.io.schema.tenant.LastLoginMap"] = LastLoginMapValidator()
	vr["ves.io.schema.tenant.LoginEvent"] = LoginEventValidator()
	vr["ves.io.schema.tenant.LoginEvents"] = LoginEventsValidator()
	vr["ves.io.schema.tenant.LoginEventsMap"] = LoginEventsMapValidator()
	vr["ves.io.schema.tenant.LookupCnameRequest"] = LookupCnameRequestValidator()
	vr["ves.io.schema.tenant.PasswordPolicyPublicAccess"] = PasswordPolicyPublicAccessValidator()
	vr["ves.io.schema.tenant.StatusResponse"] = StatusResponseValidator()
	vr["ves.io.schema.tenant.SupportInfo"] = SupportInfoValidator()
	vr["ves.io.schema.tenant.TenantSettingsResponse"] = TenantSettingsResponseValidator()
	vr["ves.io.schema.tenant.UnassignDomainOwnerRequest"] = UnassignDomainOwnerRequestValidator()
	vr["ves.io.schema.tenant.UpdateImageRequest"] = UpdateImageRequestValidator()
	vr["ves.io.schema.tenant.UpdateTenantSettingsRequest"] = UpdateTenantSettingsRequestValidator()
	vr["ves.io.schema.tenant.UpdateTenantSettingsResponse"] = UpdateTenantSettingsResponseValidator()
	vr["ves.io.schema.tenant.User"] = UserValidator()
	vr["ves.io.schema.tenant.UserList"] = UserListValidator()
	vr["ves.io.schema.tenant.ValidationErrorField"] = ValidationErrorFieldValidator()

	vr["ves.io.schema.tenant.SpecType"] = SpecTypeValidator()

	vr["ves.io.schema.tenant.Object"] = ObjectValidator()
	vr["ves.io.schema.tenant.StatusObject"] = StatusObjectValidator()

	vr["ves.io.schema.tenant.DeactivateTenantRequest"] = DeactivateTenantRequestValidator()
	vr["ves.io.schema.tenant.DeactivateTenantResponse"] = DeactivateTenantResponseValidator()

	vr["ves.io.schema.tenant.CA"] = CAValidator()
	vr["ves.io.schema.tenant.CredentialsExpiry"] = CredentialsExpiryValidator()
	vr["ves.io.schema.tenant.Empty"] = EmptyValidator()
	vr["ves.io.schema.tenant.EncryptedPassword"] = EncryptedPasswordValidator()
	vr["ves.io.schema.tenant.GlobalSpecType"] = GlobalSpecTypeValidator()
	vr["ves.io.schema.tenant.PrivateDeactivateTenantRequest"] = PrivateDeactivateTenantRequestValidator()
	vr["ves.io.schema.tenant.PrivateDeactivateTenantResponse"] = PrivateDeactivateTenantResponseValidator()
	vr["ves.io.schema.tenant.SubCA"] = SubCAValidator()
	vr["ves.io.schema.tenant.TenantControlConfig"] = TenantControlConfigValidator()

}

func initializeEntryRegistry(mdr *svcfw.MDRegistry) {

	mdr.EntryFactory["ves.io.schema.tenant.Object"] = NewEntryObject
	mdr.EntryStoreMap["ves.io.schema.tenant.Object"] = store.InMemory
	mdr.EntryRegistry["ves.io.schema.tenant.Object"] = reflect.TypeOf(&DBObject{})
	mdr.EntryIndexers["ves.io.schema.tenant.Object"] = GetObjectIndexers
	mdr.EntryFactory["ves.io.schema.tenant.StatusObject"] = NewEntryStatusObject
	mdr.EntryStoreMap["ves.io.schema.tenant.StatusObject"] = store.InMemory
	mdr.EntryRegistry["ves.io.schema.tenant.StatusObject"] = reflect.TypeOf(&DBStatusObject{})
	mdr.EntryIndexers["ves.io.schema.tenant.StatusObject"] = GetStatusObjectIndexers

}

func initializeRPCRegistry(mdr *svcfw.MDRegistry) {

	mdr.RPCConfidentialRequestRegistry["ves.io.schema.tenant.CustomAPI.UpdateImage"] = "ves.io.schema.tenant.UpdateImageRequest"

}

func initializeAPIGwServiceSlugsRegistry(sm map[string]string) {
	sm["ves.io.schema.tenant.CustomAPI"] = "web"
	sm["ves.io.schema.tenant.CustomAPIEywaprime"] = "saas"

}

func initializeP0PolicyRegistry(sm map[string]svcfw.P0PolicyInfo) {

}

func initializeCRUDServiceRegistry(mdr *svcfw.MDRegistry, isExternal bool) {
	var (
		csr       *svcfw.CRUDServiceRegistry
		customCSR *svcfw.CustomServiceRegistry
	)
	_, _ = csr, customCSR

	customCSR = mdr.PubCustomServiceRegistry

	func() {
		// set swagger jsons for our and external schemas
		customCSR.SwaggerRegistry["ves.io.schema.tenant.CustomAPI"] = CustomAPISwaggerJSON

		customCSR.GrpcClientRegistry["ves.io.schema.tenant.CustomAPI"] = NewCustomAPIGrpcClient
		customCSR.RestClientRegistry["ves.io.schema.tenant.CustomAPI"] = NewCustomAPIRestClient
		if isExternal {
			return
		}
		mdr.SvcRegisterHandlers["ves.io.schema.tenant.CustomAPI"] = RegisterCustomAPIServer
		mdr.SvcGwRegisterHandlers["ves.io.schema.tenant.CustomAPI"] = RegisterGwCustomAPIHandler
		customCSR.ServerRegistry["ves.io.schema.tenant.CustomAPI"] = func(svc svcfw.Service) server.APIHandler {
			return NewCustomAPIServer(svc)
		}

	}()

	customCSR = mdr.PvtCustomServiceRegistry

	func() {
		// set swagger jsons for our and external schemas
		customCSR.SwaggerRegistry["ves.io.schema.tenant.CustomPrivateAPIEywaprime"] = CustomPrivateAPIEywaprimeSwaggerJSON

		customCSR.GrpcClientRegistry["ves.io.schema.tenant.CustomPrivateAPIEywaprime"] = NewCustomPrivateAPIEywaprimeGrpcClient
		customCSR.RestClientRegistry["ves.io.schema.tenant.CustomPrivateAPIEywaprime"] = NewCustomPrivateAPIEywaprimeRestClient
		if isExternal {
			return
		}
		mdr.SvcRegisterHandlers["ves.io.schema.tenant.CustomPrivateAPIEywaprime"] = RegisterCustomPrivateAPIEywaprimeServer
		mdr.SvcGwRegisterHandlers["ves.io.schema.tenant.CustomPrivateAPIEywaprime"] = RegisterGwCustomPrivateAPIEywaprimeHandler
		customCSR.ServerRegistry["ves.io.schema.tenant.CustomPrivateAPIEywaprime"] = func(svc svcfw.Service) server.APIHandler {
			return NewCustomPrivateAPIEywaprimeServer(svc)
		}

	}()

	customCSR = mdr.PubCustomServiceRegistry

	func() {
		// set swagger jsons for our and external schemas
		customCSR.SwaggerRegistry["ves.io.schema.tenant.CustomAPIEywaprime"] = CustomAPIEywaprimeSwaggerJSON

		customCSR.GrpcClientRegistry["ves.io.schema.tenant.CustomAPIEywaprime"] = NewCustomAPIEywaprimeGrpcClient
		customCSR.RestClientRegistry["ves.io.schema.tenant.CustomAPIEywaprime"] = NewCustomAPIEywaprimeRestClient
		if isExternal {
			return
		}
		mdr.SvcRegisterHandlers["ves.io.schema.tenant.CustomAPIEywaprime"] = RegisterCustomAPIEywaprimeServer
		mdr.SvcGwRegisterHandlers["ves.io.schema.tenant.CustomAPIEywaprime"] = RegisterGwCustomAPIEywaprimeHandler
		customCSR.ServerRegistry["ves.io.schema.tenant.CustomAPIEywaprime"] = func(svc svcfw.Service) server.APIHandler {
			return NewCustomAPIEywaprimeServer(svc)
		}

	}()

}

func InitializeMDRegistry(mdr *svcfw.MDRegistry, isExternal bool) {
	initializeEntryRegistry(mdr)
	initializeValidatorRegistry(mdr.ValidatorRegistry)

	initializeCRUDServiceRegistry(mdr, isExternal)
	if isExternal {
		return
	}

	initializeRPCRegistry(mdr)
	initializeAPIGwServiceSlugsRegistry(mdr.APIGwServiceSlugs)
	initializeP0PolicyRegistry(mdr.P0PolicyRegistry)

}

// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package tenant

import (
	bytes "bytes"
	"context"
	"fmt"
	io "io"
	"net/http"
	"strings"

	"github.com/gogo/protobuf/proto"
	"github.com/grpc-ecosystem/grpc-gateway/runtime"
	"google.golang.org/grpc"

	"gopkg.volterra.us/stdlib/client"
	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/errors"
	"gopkg.volterra.us/stdlib/server"
	"gopkg.volterra.us/stdlib/svcfw"
)

var (
	_ = fmt.Sprintf("dummy for fmt import use")
)

// Create CustomPrivateAPIEywaprime GRPC Client satisfying server.CustomClient
type CustomPrivateAPIEywaprimeGrpcClient struct {
	conn       *grpc.ClientConn
	grpcClient CustomPrivateAPIEywaprimeClient
	// map of rpc name to its invocation
	rpcFns map[string]func(context.Context, string, ...grpc.CallOption) (proto.Message, error)
}

func (c *CustomPrivateAPIEywaprimeGrpcClient) doRPCDeactivateTenant(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &PrivateDeactivateTenantRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.tenant.PrivateDeactivateTenantRequest", yamlReq)
	}
	rsp, err := c.grpcClient.DeactivateTenant(ctx, req, opts...)
	return rsp, err
}

func (c *CustomPrivateAPIEywaprimeGrpcClient) doRPCRestrictedDeactivateTenant(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &PrivateDeactivateTenantRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.tenant.PrivateDeactivateTenantRequest", yamlReq)
	}
	rsp, err := c.grpcClient.RestrictedDeactivateTenant(ctx, req, opts...)
	return rsp, err
}

func (c *CustomPrivateAPIEywaprimeGrpcClient) DoRPC(ctx context.Context, rpc string, opts ...server.CustomCallOpt) (proto.Message, error) {
	rpcFn, exists := c.rpcFns[rpc]
	if !exists {
		return nil, fmt.Errorf("Error, no such rpc %s", rpc)
	}
	cco := server.NewCustomCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	if cco.YAMLReq == "" {
		return nil, fmt.Errorf("Error, empty request body")
	}
	ctx = client.AddHdrsToCtx(cco.Headers, ctx)

	rsp, err := rpcFn(ctx, cco.YAMLReq, cco.GrpcCallOpts...)
	if err != nil {
		return nil, errors.Wrap(err, "Doing custom RPC using GRPC")
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return rsp, nil
}

func NewCustomPrivateAPIEywaprimeGrpcClient(cc *grpc.ClientConn) server.CustomClient {
	ccl := &CustomPrivateAPIEywaprimeGrpcClient{
		conn:       cc,
		grpcClient: NewCustomPrivateAPIEywaprimeClient(cc),
	}
	rpcFns := make(map[string]func(context.Context, string, ...grpc.CallOption) (proto.Message, error))
	rpcFns["DeactivateTenant"] = ccl.doRPCDeactivateTenant

	rpcFns["RestrictedDeactivateTenant"] = ccl.doRPCRestrictedDeactivateTenant

	ccl.rpcFns = rpcFns

	return ccl
}

// Create CustomPrivateAPIEywaprime REST Client satisfying server.CustomClient
type CustomPrivateAPIEywaprimeRestClient struct {
	baseURL string
	client  http.Client
	// map of rpc name to its invocation
	rpcFns map[string]func(context.Context, *server.CustomCallOpts) (proto.Message, error)
}

func (c *CustomPrivateAPIEywaprimeRestClient) doRPCDeactivateTenant(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &PrivateDeactivateTenantRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.tenant.PrivateDeactivateTenantRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("feedback", fmt.Sprintf("%v", req.Feedback))
		q.Add("initiated_via", fmt.Sprintf("%v", req.InitiatedVia))
		q.Add("initiator", fmt.Sprintf("%v", req.Initiator))
		q.Add("reason", fmt.Sprintf("%v", req.Reason))
		q.Add("tenant_id", fmt.Sprintf("%v", req.TenantId))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &PrivateDeactivateTenantResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.tenant.PrivateDeactivateTenantResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomPrivateAPIEywaprimeRestClient) doRPCRestrictedDeactivateTenant(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &PrivateDeactivateTenantRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.tenant.PrivateDeactivateTenantRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("feedback", fmt.Sprintf("%v", req.Feedback))
		q.Add("initiated_via", fmt.Sprintf("%v", req.InitiatedVia))
		q.Add("initiator", fmt.Sprintf("%v", req.Initiator))
		q.Add("reason", fmt.Sprintf("%v", req.Reason))
		q.Add("tenant_id", fmt.Sprintf("%v", req.TenantId))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &PrivateDeactivateTenantResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.tenant.PrivateDeactivateTenantResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomPrivateAPIEywaprimeRestClient) DoRPC(ctx context.Context, rpc string, opts ...server.CustomCallOpt) (proto.Message, error) {
	rpcFn, exists := c.rpcFns[rpc]
	if !exists {
		return nil, fmt.Errorf("Error, no such rpc %s", rpc)
	}
	cco := server.NewCustomCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	rsp, err := rpcFn(ctx, cco)
	if err != nil {
		return nil, errors.Wrap(err, "Doing custom RPC using Rest")
	}
	return rsp, nil
}

func NewCustomPrivateAPIEywaprimeRestClient(baseURL string, hc http.Client) server.CustomClient {
	ccl := &CustomPrivateAPIEywaprimeRestClient{
		baseURL: baseURL,
		client:  hc,
	}

	rpcFns := make(map[string]func(context.Context, *server.CustomCallOpts) (proto.Message, error))
	rpcFns["DeactivateTenant"] = ccl.doRPCDeactivateTenant

	rpcFns["RestrictedDeactivateTenant"] = ccl.doRPCRestrictedDeactivateTenant

	ccl.rpcFns = rpcFns

	return ccl
}

// Create customPrivateAPIEywaprimeInprocClient

// INPROC Client (satisfying CustomPrivateAPIEywaprimeClient interface)
type customPrivateAPIEywaprimeInprocClient struct {
	CustomPrivateAPIEywaprimeServer
}

func (c *customPrivateAPIEywaprimeInprocClient) DeactivateTenant(ctx context.Context, in *PrivateDeactivateTenantRequest, opts ...grpc.CallOption) (*PrivateDeactivateTenantResponse, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.tenant.CustomPrivateAPIEywaprime.DeactivateTenant")
	return c.CustomPrivateAPIEywaprimeServer.DeactivateTenant(ctx, in)
}
func (c *customPrivateAPIEywaprimeInprocClient) RestrictedDeactivateTenant(ctx context.Context, in *PrivateDeactivateTenantRequest, opts ...grpc.CallOption) (*PrivateDeactivateTenantResponse, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.tenant.CustomPrivateAPIEywaprime.RestrictedDeactivateTenant")
	return c.CustomPrivateAPIEywaprimeServer.RestrictedDeactivateTenant(ctx, in)
}

func NewCustomPrivateAPIEywaprimeInprocClient(svc svcfw.Service) CustomPrivateAPIEywaprimeClient {
	return &customPrivateAPIEywaprimeInprocClient{CustomPrivateAPIEywaprimeServer: NewCustomPrivateAPIEywaprimeServer(svc)}
}

// RegisterGwCustomPrivateAPIEywaprimeHandler registers with grpc-gw with an inproc-client backing so that
// rest to grpc happens without a grpc.Dial (thus avoiding additional certs for mTLS)
func RegisterGwCustomPrivateAPIEywaprimeHandler(ctx context.Context, mux *runtime.ServeMux, svc interface{}) error {
	s, ok := svc.(svcfw.Service)
	if !ok {
		return fmt.Errorf("svc is not svcfw.Service")
	}
	return RegisterCustomPrivateAPIEywaprimeHandlerClient(ctx, mux, NewCustomPrivateAPIEywaprimeInprocClient(s))
}

// Create customPrivateAPIEywaprimeSrv

// SERVER (satisfying CustomPrivateAPIEywaprimeServer interface)
type customPrivateAPIEywaprimeSrv struct {
	svc svcfw.Service
}

func (s *customPrivateAPIEywaprimeSrv) DeactivateTenant(ctx context.Context, in *PrivateDeactivateTenantRequest) (*PrivateDeactivateTenantResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.tenant.CustomPrivateAPIEywaprime")
	cah, ok := ah.(CustomPrivateAPIEywaprimeServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomPrivateAPIEywaprimeServer", ah)
	}

	var (
		rsp *PrivateDeactivateTenantResponse
		err error
	)

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.tenant.CustomPrivateAPIEywaprime.DeactivateTenant"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.DeactivateTenant(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	return rsp, nil
}
func (s *customPrivateAPIEywaprimeSrv) RestrictedDeactivateTenant(ctx context.Context, in *PrivateDeactivateTenantRequest) (*PrivateDeactivateTenantResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.tenant.CustomPrivateAPIEywaprime")
	cah, ok := ah.(CustomPrivateAPIEywaprimeServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomPrivateAPIEywaprimeServer", ah)
	}

	var (
		rsp *PrivateDeactivateTenantResponse
		err error
	)

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.tenant.CustomPrivateAPIEywaprime.RestrictedDeactivateTenant"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.RestrictedDeactivateTenant(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	return rsp, nil
}

func NewCustomPrivateAPIEywaprimeServer(svc svcfw.Service) CustomPrivateAPIEywaprimeServer {
	return &customPrivateAPIEywaprimeSrv{svc: svc}
}

var CustomPrivateAPIEywaprimeSwaggerJSON string = `{
    "swagger": "2.0",
    "info": {
        "title": "Tenant",
        "description": "Package for working with Tenant representation.",
        "version": "version not set"
    },
    "schemes": [
        "http",
        "https"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "tags": [],
    "paths": {
        "/ves.io.schema/introspect/restricted/write/tenant/deactivate": {
            "post": {
                "summary": "Restricted Deactivate Tenant",
                "description": "This API mark tenant for deletion queue, after approve it will completely removed from the system. This API proxies the request to eywa’s tenant disable API and allowed on restricted access in all environments, users with access to restricted APIs can only trigger this.",
                "operationId": "ves.io.schema.tenant.CustomPrivateAPIEywaprime.RestrictedDeactivateTenant",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/tenantPrivateDeactivateTenantResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/tenantPrivateDeactivateTenantRequest"
                        }
                    }
                ],
                "tags": [
                    "CustomPrivateAPIEywaprime"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-tenant-customprivateapieywaprime-restricteddeactivatetenant"
                },
                "x-ves-proto-rpc": "ves.io.schema.tenant.CustomPrivateAPIEywaprime.RestrictedDeactivateTenant"
            },
            "x-displayname": "Custom Private API Eywaprime",
            "x-ves-proto-service": "ves.io.schema.tenant.CustomPrivateAPIEywaprime",
            "x-ves-proto-service-type": "CUSTOM_PRIVATE"
        },
        "/ves.io.schema/introspect/write/tenant/deactivate": {
            "post": {
                "summary": "Deactivate Tenant",
                "description": "This API mark tenant for deletion queue, after approve it will completely removed from the system. This API proxies the request to eywa’s tenant disable API and not allowed to be triggered in production, users with normal introspection access can trigger this.",
                "operationId": "ves.io.schema.tenant.CustomPrivateAPIEywaprime.DeactivateTenant",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/tenantPrivateDeactivateTenantResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/tenantPrivateDeactivateTenantRequest"
                        }
                    }
                ],
                "tags": [
                    "CustomPrivateAPIEywaprime"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-tenant-customprivateapieywaprime-deactivatetenant"
                },
                "x-ves-proto-rpc": "ves.io.schema.tenant.CustomPrivateAPIEywaprime.DeactivateTenant"
            },
            "x-displayname": "Custom Private API Eywaprime",
            "x-ves-proto-service": "ves.io.schema.tenant.CustomPrivateAPIEywaprime",
            "x-ves-proto-service-type": "CUSTOM_PRIVATE"
        }
    },
    "definitions": {
        "ioschemaEmpty": {
            "type": "object",
            "description": "This can be used for messages where no values are needed",
            "title": "Empty",
            "x-displayname": "Empty",
            "x-ves-proto-message": "ves.io.schema.Empty"
        },
        "tenantDeletionReason": {
            "type": "string",
            "description": "List of available reason for account deletion.\n\n - REASON_UNKNOWN: Unknown reason\n\nUnknown reason\n - REASON_SWITCH_TO_FREE_PLAN: Switch to free plan\n\nSwitch to free plan\n - REASON_NO_LONGER_NEEDED: No longer needed\n\nNo longer needed\n - REASON_NOT_JUSTIFY_COSTS: Too expensive\n\nToo expensive\n - REASON_DIFFICULT_TO_USE: Difficult to use\n\nDifficult to use",
            "title": "DeletionReason",
            "enum": [
                "REASON_UNKNOWN",
                "REASON_SWITCH_TO_FREE_PLAN",
                "REASON_NO_LONGER_NEEDED",
                "REASON_NOT_JUSTIFY_COSTS",
                "REASON_DIFFICULT_TO_USE"
            ],
            "default": "REASON_UNKNOWN",
            "x-displayname": "DeletionReason",
            "x-ves-proto-enum": "ves.io.schema.tenant.DeletionReason"
        },
        "tenantPrivateDeactivateTenantRequest": {
            "type": "object",
            "description": "Request to deactivate the tenant.",
            "title": "PrivateDeactivateTenantRequest",
            "x-displayname": "Private Deactivate Tenant Request",
            "x-ves-oneof-field-initiator": "[\"external_id\",\"internal\",\"user_email\"]",
            "x-ves-proto-message": "ves.io.schema.tenant.PrivateDeactivateTenantRequest",
            "properties": {
                "external_id": {
                    "type": "string",
                    "description": "Exclusive with [internal user_email]\n ExternalID is set when request initiated by external providers.",
                    "title": "ExternalID",
                    "x-displayname": "External ID"
                },
                "feedback": {
                    "type": "string",
                    "description": " Feedback from the customer related to reason of account deactivation.\n\nExample: - \"Customers feedback\"-",
                    "title": "Feedback",
                    "x-displayname": "Feedback",
                    "x-ves-example": "Customers feedback"
                },
                "initiated_via": {
                    "type": "string",
                    "description": " origin of the request, from which request is originated, example prism, ipp, tsahik etc\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Initiated Via",
                    "x-displayname": "Initiated Via",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "internal": {
                    "description": "Exclusive with [external_id user_email]\n Internal is set when request initiated by private APIs",
                    "title": "Internal",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Internal"
                },
                "reason": {
                    "description": " Reason for deactivation.",
                    "title": "Reason",
                    "$ref": "#/definitions/tenantDeletionReason",
                    "x-displayname": "Reason"
                },
                "tenant_id": {
                    "type": "string",
                    "description": " Tenant ID to be deactivated.\n\nExample: - \"tenant-1\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.min_len: 1\n",
                    "title": "Tenant ID",
                    "minLength": 1,
                    "x-displayname": "Tenant ID",
                    "x-ves-example": "tenant-1",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.min_len": "1"
                    }
                },
                "user_email": {
                    "type": "string",
                    "description": "Exclusive with [external_id internal]\n Email of the user initiating deactivation.\n\nExample: - \"test@test.com\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.email: true\n",
                    "title": "User Email",
                    "x-displayname": "User Email",
                    "x-ves-example": "test@test.com",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.email": "true"
                    }
                }
            }
        },
        "tenantPrivateDeactivateTenantResponse": {
            "type": "object",
            "title": "PrivateDeactivateTenantResponse",
            "x-displayname": "Private Deactivate Tenant Response",
            "x-ves-proto-message": "ves.io.schema.tenant.PrivateDeactivateTenantResponse",
            "properties": {
                "job_id": {
                    "type": "string",
                    "description": " Job id of the async job that triggered to process the tenant deactivation.",
                    "title": "Job Id",
                    "x-displayname": "Job Id"
                }
            }
        }
    },
    "x-displayname": "Tenant",
    "x-ves-proto-file": "ves.io/schema/tenant/private_custom_api_eywaprime.proto"
}`

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/tenant/custom_api.proto

// Tenant
//
// x-displayName: "Tenant"
// Package for working with Tenant representation.

package tenant

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	types "github.com/gogo/protobuf/types"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/contact"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/user"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	tenant_configuration "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/tenant_configuration"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// LookupCnameRequest
//
// x-displayName: "LookupCnameRequest"
// LookupCnameRequest is the request format to check if the specified cname is available.
type LookupCnameRequest struct {
	// Cname
	//
	// x-displayName: "Cname"
	// x-example: "domain1"
	// Cname to look-uo
	Cname string `protobuf:"bytes,1,opt,name=cname,proto3" json:"cname,omitempty"`
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "system"
	// Namespace to query
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (m *LookupCnameRequest) Reset()      { *m = LookupCnameRequest{} }
func (*LookupCnameRequest) ProtoMessage() {}
func (*LookupCnameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_72ab034bcacf2b1e, []int{0}
}
func (m *LookupCnameRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupCnameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LookupCnameRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LookupCnameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupCnameRequest.Merge(m, src)
}
func (m *LookupCnameRequest) XXX_Size() int {
	return m.Size()
}
func (m *LookupCnameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupCnameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LookupCnameRequest proto.InternalMessageInfo

func (m *LookupCnameRequest) GetCname() string {
	if m != nil {
		return m.Cname
	}
	return ""
}

func (m *LookupCnameRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

// DeleteTenantRequest
//
// x-displayName: "DeleteTenantRequest"
// Request for marking Tenant for deletion.
type DeleteTenantRequest struct {
	// Name
	//
	// x-displayName: "Name"
	// x-example: "tenant-1"
	// Tenant name marked for deletion.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Email
	//
	// x-displayName: "Email"
	// x-example: "test@test.com"
	// Email of freemium account which need to be deleted.
	Email string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	// Reason
	//
	// x-displayName: "Reason"
	// Predefined reason of account deletion.
	Reason DeletionReason `protobuf:"varint,3,opt,name=reason,proto3,enum=ves.io.schema.tenant.DeletionReason" json:"reason,omitempty"`
	// Feedback
	//
	// x-displayName: "Feedback"
	// x-example: "Customers feedback"
	// Feedback from the customer related to reason of account deletion.
	Feedback string `protobuf:"bytes,4,opt,name=feedback,proto3" json:"feedback,omitempty"`
}

func (m *DeleteTenantRequest) Reset()      { *m = DeleteTenantRequest{} }
func (*DeleteTenantRequest) ProtoMessage() {}
func (*DeleteTenantRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_72ab034bcacf2b1e, []int{1}
}
func (m *DeleteTenantRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteTenantRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteTenantRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteTenantRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteTenantRequest.Merge(m, src)
}
func (m *DeleteTenantRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteTenantRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteTenantRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteTenantRequest proto.InternalMessageInfo

func (m *DeleteTenantRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeleteTenantRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *DeleteTenantRequest) GetReason() DeletionReason {
	if m != nil {
		return m.Reason
	}
	return REASON_UNKNOWN
}

func (m *DeleteTenantRequest) GetFeedback() string {
	if m != nil {
		return m.Feedback
	}
	return ""
}

// Disable tenant response
//
// x-displayName: "Disable tenant response"
// Disable tenant response contains Job's ID by which you can track status of job.
type DisableTenantResponse struct {
	// JobID
	//
	// x-displayName: "JobID"
	// x-example: "b7b24a86-3b17-4a9b-b875-bcbb57f1deef"
	// Job's ID by which you can track status of job.
	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
}

func (m *DisableTenantResponse) Reset()      { *m = DisableTenantResponse{} }
func (*DisableTenantResponse) ProtoMessage() {}
func (*DisableTenantResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_72ab034bcacf2b1e, []int{2}
}
func (m *DisableTenantResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DisableTenantResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DisableTenantResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DisableTenantResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DisableTenantResponse.Merge(m, src)
}
func (m *DisableTenantResponse) XXX_Size() int {
	return m.Size()
}
func (m *DisableTenantResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DisableTenantResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DisableTenantResponse proto.InternalMessageInfo

func (m *DisableTenantResponse) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

// LookupCnameResponse sets the response format based on the availability of cname.
//
// x-displayName: "LookupCnameResponse"
// It can return any of these three types of errors.
// EEXISTS => cname exists.
// EOK => valid request. However, cname does not exist.
// EUNKNOWN => internal error in fetching tenants info.
type StatusResponse struct {
}

func (m *StatusResponse) Reset()      { *m = StatusResponse{} }
func (*StatusResponse) ProtoMessage() {}
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_72ab034bcacf2b1e, []int{3}
}
func (m *StatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusResponse.Merge(m, src)
}
func (m *StatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *StatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StatusResponse proto.InternalMessageInfo

// Escalation doc response
//
// x-displayName: "EscalationDocResp"
// Escalation doc response containing downloadable URL
type EscalationDocResp struct {
	// Escalation doc URL
	//
	// x-displayName: "Escalation doc URL"
	// x-example: "https://docs.f5.com/customer1/tandc"
	// Escalation doc URL
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (m *EscalationDocResp) Reset()      { *m = EscalationDocResp{} }
func (*EscalationDocResp) ProtoMessage() {}
func (*EscalationDocResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_72ab034bcacf2b1e, []int{4}
}
func (m *EscalationDocResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EscalationDocResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EscalationDocResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EscalationDocResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EscalationDocResp.Merge(m, src)
}
func (m *EscalationDocResp) XXX_Size() int {
	return m.Size()
}
func (m *EscalationDocResp) XXX_DiscardUnknown() {
	xxx_messageInfo_EscalationDocResp.DiscardUnknown(m)
}

var xxx_messageInfo_EscalationDocResp proto.InternalMessageInfo

func (m *EscalationDocResp) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

// TenantSettingsResponse
//
// x-displayName: "TenantSettingsResponse"
// Defines tenant specific settings.
type TenantSettingsResponse struct {
	// Name
	//
	// x-displayName: "Name"
	// x-example: "tenant1"
	// name will represent name of the tenant that is being accessed
	Name string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	// State
	//
	// x-displayName: "State"
	// Tenant state
	State FSMState `protobuf:"varint,10,opt,name=state,proto3,enum=ves.io.schema.tenant.FSMState" json:"state,omitempty"`
	// CompanyName
	//
	// x-displayName: "Company Name"
	// Company name of the tenant.
	CompanyName string `protobuf:"bytes,7,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"`
	// Domain
	//
	// x-displayName: "Domain"
	// Domain of the tenant.
	Domain string `protobuf:"bytes,8,opt,name=domain,proto3" json:"domain,omitempty"`
	// OTP Enabled
	//
	// x-displayName: "OTP Enabled"
	// OTP configuration for tenant scope.
	OtpEnabled bool `protobuf:"varint,2,opt,name=otp_enabled,json=otpEnabled,proto3" json:"otp_enabled,omitempty"`
	// SSO Enabled
	//
	// x-displayName: "SSO Enabled"
	// Flag to show SSO is enabled for specific tenant.
	SsoEnabled bool `protobuf:"varint,3,opt,name=sso_enabled,json=ssoEnabled,proto3" json:"sso_enabled,omitempty"`
	// OTP Status
	//
	// x-displayName: "OTP Status"
	// OTP Status contains information about otp's status. It can be enabled, disabled or processing.
	OtpStatus OtpStatus `protobuf:"varint,4,opt,name=otp_status,json=otpStatus,proto3,enum=ves.io.schema.tenant.OtpStatus" json:"otp_status,omitempty"`
	// Expiration configuration for credentials.
	//
	// x-displayName: "MaxCredentialsExpiry"
	// max expiration days setting for the different credentials.
	MaxCredentialsExpiry *CredentialsExpiry `protobuf:"bytes,5,opt,name=max_credentials_expiry,json=maxCredentialsExpiry,proto3" json:"max_credentials_expiry,omitempty"`
	// Active plan transition id.
	//
	// x-displayName: "ActivePlanTransitionId"
	// x-example: "7e1ba0f9-26dc-4397-97b3-b600df2097d3"
	// Id of the plan transition request which is currently in state CREATING.
	ActivePlanTransitionId string `protobuf:"bytes,9,opt,name=active_plan_transition_id,json=activePlanTransitionId,proto3" json:"active_plan_transition_id,omitempty"`
	// Original Tenant
	//
	// x-displayName: "Original Tenant"
	// x-example: "tenant1"
	// orginal_tenant represent tenant id where the user belongs to
	OriginalTenant string `protobuf:"bytes,12,opt,name=original_tenant,json=originalTenant,proto3" json:"original_tenant,omitempty"`
	// scim_enabled
	//
	// x-displayName: "SCIM Enabled"
	// Flag to show SCIM is enabled for specific tenant.
	ScimEnabled bool `protobuf:"varint,13,opt,name=scim_enabled,json=scimEnabled,proto3" json:"scim_enabled,omitempty"`
}

func (m *TenantSettingsResponse) Reset()      { *m = TenantSettingsResponse{} }
func (*TenantSettingsResponse) ProtoMessage() {}
func (*TenantSettingsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_72ab034bcacf2b1e, []int{5}
}
func (m *TenantSettingsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TenantSettingsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TenantSettingsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TenantSettingsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TenantSettingsResponse.Merge(m, src)
}
func (m *TenantSettingsResponse) XXX_Size() int {
	return m.Size()
}
func (m *TenantSettingsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TenantSettingsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TenantSettingsResponse proto.InternalMessageInfo

func (m *TenantSettingsResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TenantSettingsResponse) GetState() FSMState {
	if m != nil {
		return m.State
	}
	return StateUndefined
}

func (m *TenantSettingsResponse) GetCompanyName() string {
	if m != nil {
		return m.CompanyName
	}
	return ""
}

func (m *TenantSettingsResponse) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *TenantSettingsResponse) GetOtpEnabled() bool {
	if m != nil {
		return m.OtpEnabled
	}
	return false
}

func (m *TenantSettingsResponse) GetSsoEnabled() bool {
	if m != nil {
		return m.SsoEnabled
	}
	return false
}

func (m *TenantSettingsResponse) GetOtpStatus() OtpStatus {
	if m != nil {
		return m.OtpStatus
	}
	return OTP_DISABLED
}

func (m *TenantSettingsResponse) GetMaxCredentialsExpiry() *CredentialsExpiry {
	if m != nil {
		return m.MaxCredentialsExpiry
	}
	return nil
}

func (m *TenantSettingsResponse) GetActivePlanTransitionId() string {
	if m != nil {
		return m.ActivePlanTransitionId
	}
	return ""
}

func (m *TenantSettingsResponse) GetOriginalTenant() string {
	if m != nil {
		return m.OriginalTenant
	}
	return ""
}

func (m *TenantSettingsResponse) GetScimEnabled() bool {
	if m != nil {
		return m.ScimEnabled
	}
	return false
}

// TenantSettingsResponse
//
// x-displayName: "TenantSettingsResponse"
// Defines tenant specific settings.
type UpdateTenantSettingsResponse struct {
	// OTP Enabled
	//
	// x-displayName: "OTP Enabled"
	// OTP configuration for tenant scope.
	OtpEnabled bool `protobuf:"varint,2,opt,name=otp_enabled,json=otpEnabled,proto3" json:"otp_enabled,omitempty"`
	// SSO Enabled
	//
	// x-displayName: "SSO Enabled"
	// Flag to show SSO is enabled for specific tenant.
	SsoEnabled bool `protobuf:"varint,3,opt,name=sso_enabled,json=ssoEnabled,proto3" json:"sso_enabled,omitempty"`
	// OTP Status
	//
	// x-displayName: "OTP Status"
	// OTP Status contains information about otp's status. It can be enabled, disabled or processing.
	OtpStatus OtpStatus `protobuf:"varint,4,opt,name=otp_status,json=otpStatus,proto3,enum=ves.io.schema.tenant.OtpStatus" json:"otp_status,omitempty"`
	// Expiration configuration for credentials.
	//
	// x-displayName: "MaxCredentialsExpiry"
	// max expiration days setting for the different credentials.
	MaxCredentialsExpiry *CredentialsExpiry `protobuf:"bytes,5,opt,name=max_credentials_expiry,json=maxCredentialsExpiry,proto3" json:"max_credentials_expiry,omitempty"`
	// validation errors
	//
	// x-displayName : "Validation errors"
	// collection of validation errors
	ValidationErrors []*ValidationErrorField `protobuf:"bytes,7,rep,name=validation_errors,json=validationErrors,proto3" json:"validation_errors,omitempty"`
	// scim_enabled
	//
	// x-displayName: "SCIM Enabled"
	// Flag to show SCIM is enabled for specific tenant.
	ScimEnabled bool `protobuf:"varint,8,opt,name=scim_enabled,json=scimEnabled,proto3" json:"scim_enabled,omitempty"`
}

func (m *UpdateTenantSettingsResponse) Reset()      { *m = UpdateTenantSettingsResponse{} }
func (*UpdateTenantSettingsResponse) ProtoMessage() {}
func (*UpdateTenantSettingsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_72ab034bcacf2b1e, []int{6}
}
func (m *UpdateTenantSettingsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateTenantSettingsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateTenantSettingsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateTenantSettingsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateTenantSettingsResponse.Merge(m, src)
}
func (m *UpdateTenantSettingsResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateTenantSettingsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateTenantSettingsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateTenantSettingsResponse proto.InternalMessageInfo

func (m *UpdateTenantSettingsResponse) GetOtpEnabled() bool {
	if m != nil {
		return m.OtpEnabled
	}
	return false
}

func (m *UpdateTenantSettingsResponse) GetSsoEnabled() bool {
	if m != nil {
		return m.SsoEnabled
	}
	return false
}

func (m *UpdateTenantSettingsResponse) GetOtpStatus() OtpStatus {
	if m != nil {
		return m.OtpStatus
	}
	return OTP_DISABLED
}

func (m *UpdateTenantSettingsResponse) GetMaxCredentialsExpiry() *CredentialsExpiry {
	if m != nil {
		return m.MaxCredentialsExpiry
	}
	return nil
}

func (m *UpdateTenantSettingsResponse) GetValidationErrors() []*ValidationErrorField {
	if m != nil {
		return m.ValidationErrors
	}
	return nil
}

func (m *UpdateTenantSettingsResponse) GetScimEnabled() bool {
	if m != nil {
		return m.ScimEnabled
	}
	return false
}

// Validation error field
//
// x-displayName: "Validation error field"
// Contains information on a single validation error
type ValidationErrorField struct {
	// Error field
	//
	// x-displayName: "Error field"
	// x-example: "max_credentials_expiry"
	// path indicates the field that is not valid
	ErrorField string `protobuf:"bytes,1,opt,name=error_field,json=errorField,proto3" json:"error_field,omitempty"`
	// Error message
	//
	// x-displayName: "Error message"
	// x-example: "max_credentials_expiry code should be less < 0 "
	// more descriptive error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (m *ValidationErrorField) Reset()      { *m = ValidationErrorField{} }
func (*ValidationErrorField) ProtoMessage() {}
func (*ValidationErrorField) Descriptor() ([]byte, []int) {
	return fileDescriptor_72ab034bcacf2b1e, []int{7}
}
func (m *ValidationErrorField) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidationErrorField) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidationErrorField.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidationErrorField) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidationErrorField.Merge(m, src)
}
func (m *ValidationErrorField) XXX_Size() int {
	return m.Size()
}
func (m *ValidationErrorField) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidationErrorField.DiscardUnknown(m)
}

var xxx_messageInfo_ValidationErrorField proto.InternalMessageInfo

func (m *ValidationErrorField) GetErrorField() string {
	if m != nil {
		return m.ErrorField
	}
	return ""
}

func (m *ValidationErrorField) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

// UpdateTenantSettingsRequest
//
// x-displayName: "UpdateTenantSettingsRequest"
// Request to update tenant settings for specific tenant.
type UpdateTenantSettingsRequest struct {
	// OTP Enabled
	//
	// x-displayName: "OTP Enabled"
	// OTP configuration for tenant scope.
	OtpEnabled bool `protobuf:"varint,2,opt,name=otp_enabled,json=otpEnabled,proto3" json:"otp_enabled,omitempty"`
	// Expiration configuration for credentials.
	//
	// x-displayName: "MaxCredentialsExpiry"
	// max expiration days setting for the different credentials.
	MaxCredentialsExpiry *CredentialsExpiry `protobuf:"bytes,3,opt,name=max_credentials_expiry,json=maxCredentialsExpiry,proto3" json:"max_credentials_expiry,omitempty"`
}

func (m *UpdateTenantSettingsRequest) Reset()      { *m = UpdateTenantSettingsRequest{} }
func (*UpdateTenantSettingsRequest) ProtoMessage() {}
func (*UpdateTenantSettingsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_72ab034bcacf2b1e, []int{8}
}
func (m *UpdateTenantSettingsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateTenantSettingsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateTenantSettingsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateTenantSettingsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateTenantSettingsRequest.Merge(m, src)
}
func (m *UpdateTenantSettingsRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateTenantSettingsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateTenantSettingsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateTenantSettingsRequest proto.InternalMessageInfo

func (m *UpdateTenantSettingsRequest) GetOtpEnabled() bool {
	if m != nil {
		return m.OtpEnabled
	}
	return false
}

func (m *UpdateTenantSettingsRequest) GetMaxCredentialsExpiry() *CredentialsExpiry {
	if m != nil {
		return m.MaxCredentialsExpiry
	}
	return nil
}

// CreateDebugUserRequest
//
// x-displayName: "CreateDebugUserRequest"
// Request to create a debug user. Such user can help debugging issues.
type CreateDebugUserRequest struct {
	// Namespace roles
	//
	// x-displayName: "Namespace roles"
	// Namespace roles contains set of roles, with which debug user will be created.
	NsRoles []*schema.NamespaceRoleType `protobuf:"bytes,1,rep,name=ns_roles,json=nsRoles,proto3" json:"ns_roles,omitempty"`
}

func (m *CreateDebugUserRequest) Reset()      { *m = CreateDebugUserRequest{} }
func (*CreateDebugUserRequest) ProtoMessage() {}
func (*CreateDebugUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_72ab034bcacf2b1e, []int{9}
}
func (m *CreateDebugUserRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateDebugUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateDebugUserRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateDebugUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateDebugUserRequest.Merge(m, src)
}
func (m *CreateDebugUserRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateDebugUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateDebugUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateDebugUserRequest proto.InternalMessageInfo

func (m *CreateDebugUserRequest) GetNsRoles() []*schema.NamespaceRoleType {
	if m != nil {
		return m.NsRoles
	}
	return nil
}

type DebugUser struct {
	// Enabled
	//
	// x-displayName: "Enabled"
	// if set to true means that user enabled in IDM.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// first_name
	//
	// x-displayName: "First Name"
	// x-example: "Joe"
	// user's first name
	FirstName string `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	// last_name
	//
	// x-displayName: "Last Name"
	// x-example: "Doe"
	// user's last name
	LastName string `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	// email
	//
	// x-displayName: "Email"
	// x-example: "joe.doe@acme.com"
	// user's email
	Email string `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
}

func (m *DebugUser) Reset()      { *m = DebugUser{} }
func (*DebugUser) ProtoMessage() {}
func (*DebugUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_72ab034bcacf2b1e, []int{10}
}
func (m *DebugUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DebugUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DebugUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DebugUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DebugUser.Merge(m, src)
}
func (m *DebugUser) XXX_Size() int {
	return m.Size()
}
func (m *DebugUser) XXX_DiscardUnknown() {
	xxx_messageInfo_DebugUser.DiscardUnknown(m)
}

var xxx_messageInfo_DebugUser proto.InternalMessageInfo

func (m *DebugUser) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *DebugUser) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *DebugUser) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *DebugUser) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

// GetPasswordPolicyRequest
//
// x-displayName: "GetPasswordPolicyRequest"
// GetPasswordPolicyRequest contains realm's ID for which password policy is requested.
type GetPasswordPolicyRequest struct {
	// email
	//
	// x-displayName: "Email"
	// x-example: "3d05688b-f560-4f70-9af1-384a0ec0ff15"
	// user's email
	RealmId string `protobuf:"bytes,1,opt,name=realm_id,json=realmId,proto3" json:"realm_id,omitempty"`
}

func (m *GetPasswordPolicyRequest) Reset()      { *m = GetPasswordPolicyRequest{} }
func (*GetPasswordPolicyRequest) ProtoMessage() {}
func (*GetPasswordPolicyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_72ab034bcacf2b1e, []int{11}
}
func (m *GetPasswordPolicyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPasswordPolicyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPasswordPolicyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPasswordPolicyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPasswordPolicyRequest.Merge(m, src)
}
func (m *GetPasswordPolicyRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPasswordPolicyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPasswordPolicyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPasswordPolicyRequest proto.InternalMessageInfo

func (m *GetPasswordPolicyRequest) GetRealmId() string {
	if m != nil {
		return m.RealmId
	}
	return ""
}

// PasswordPolicyPublicAccess
//
// x-displayName: "PasswordPolicyPublicAccess"
// PasswordPolicyPublicAccess contains subset of password policy settings. This settings will be available publicly
// without authentication.
type PasswordPolicyPublicAccess struct {
	// Digits
	//
	// x-displayName: "Digits"
	// x-example: "1"
	// Number of digits
	Digits uint32 `protobuf:"varint,1,opt,name=digits,proto3" json:"digits,omitempty"`
	// lowercase_characters
	//
	// x-displayName: "lowercase_characters"
	// x-example: "1"
	// Number of lowercase characters
	LowercaseCharacters uint32 `protobuf:"varint,2,opt,name=lowercase_characters,json=lowercaseCharacters,proto3" json:"lowercase_characters,omitempty"`
	// uppercase_characters
	//
	// x-displayName: "uppercase_characters"
	// x-example: "1"
	// Number of uppercase characters
	UppercaseCharacters uint32 `protobuf:"varint,3,opt,name=uppercase_characters,json=uppercaseCharacters,proto3" json:"uppercase_characters,omitempty"`
	// special_characters
	//
	// x-displayName: "special_characters"
	// x-example: "1"
	// Number of special characters
	SpecialCharacters uint32 `protobuf:"varint,4,opt,name=special_characters,json=specialCharacters,proto3" json:"special_characters,omitempty"`
	// not_username
	//
	// x-displayName: "not_username"
	// If true then username must not appear in the password string
	NotUsername bool `protobuf:"varint,5,opt,name=not_username,json=notUsername,proto3" json:"not_username,omitempty"`
	// not_recently_used
	//
	// x-displayName: "not_recently_used"
	// x-example: "1"
	// Number of previous passwords to check for equality - if match found the password is rejected
	NotRecentlyUsed uint32 `protobuf:"varint,7,opt,name=not_recently_used,json=notRecentlyUsed,proto3" json:"not_recently_used,omitempty"`
	// minimum_length
	//
	// x-displayName: "minimum_length"
	// x-example: "1"
	// Minimum password length
	MinimumLength uint32 `protobuf:"varint,8,opt,name=minimum_length,json=minimumLength,proto3" json:"minimum_length,omitempty"`
}

func (m *PasswordPolicyPublicAccess) Reset()      { *m = PasswordPolicyPublicAccess{} }
func (*PasswordPolicyPublicAccess) ProtoMessage() {}
func (*PasswordPolicyPublicAccess) Descriptor() ([]byte, []int) {
	return fileDescriptor_72ab034bcacf2b1e, []int{12}
}
func (m *PasswordPolicyPublicAccess) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PasswordPolicyPublicAccess) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PasswordPolicyPublicAccess.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PasswordPolicyPublicAccess) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PasswordPolicyPublicAccess.Merge(m, src)
}
func (m *PasswordPolicyPublicAccess) XXX_Size() int {
	return m.Size()
}
func (m *PasswordPolicyPublicAccess) XXX_DiscardUnknown() {
	xxx_messageInfo_PasswordPolicyPublicAccess.DiscardUnknown(m)
}

var xxx_messageInfo_PasswordPolicyPublicAccess proto.InternalMessageInfo

func (m *PasswordPolicyPublicAccess) GetDigits() uint32 {
	if m != nil {
		return m.Digits
	}
	return 0
}

func (m *PasswordPolicyPublicAccess) GetLowercaseCharacters() uint32 {
	if m != nil {
		return m.LowercaseCharacters
	}
	return 0
}

func (m *PasswordPolicyPublicAccess) GetUppercaseCharacters() uint32 {
	if m != nil {
		return m.UppercaseCharacters
	}
	return 0
}

func (m *PasswordPolicyPublicAccess) GetSpecialCharacters() uint32 {
	if m != nil {
		return m.SpecialCharacters
	}
	return 0
}

func (m *PasswordPolicyPublicAccess) GetNotUsername() bool {
	if m != nil {
		return m.NotUsername
	}
	return false
}

func (m *PasswordPolicyPublicAccess) GetNotRecentlyUsed() uint32 {
	if m != nil {
		return m.NotRecentlyUsed
	}
	return 0
}

func (m *PasswordPolicyPublicAccess) GetMinimumLength() uint32 {
	if m != nil {
		return m.MinimumLength
	}
	return 0
}

// GetLoginEventsRequest
//
// x-displayName: "GetLoginEventsRequest"
// Contains fields which allows retrieve events step-by-step aka pagination.
type GetLoginEventsRequest struct {
	// First
	//
	// x-displayName: "First"
	// x-example: "100"
	// Start offset
	First uint32 `protobuf:"varint,1,opt,name=first,proto3" json:"first,omitempty"`
	// Max
	//
	// x-displayName: "Max"
	// x-example: "25"
	// Records per page
	Max uint32 `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
}

func (m *GetLoginEventsRequest) Reset()      { *m = GetLoginEventsRequest{} }
func (*GetLoginEventsRequest) ProtoMessage() {}
func (*GetLoginEventsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_72ab034bcacf2b1e, []int{13}
}
func (m *GetLoginEventsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLoginEventsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLoginEventsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLoginEventsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLoginEventsRequest.Merge(m, src)
}
func (m *GetLoginEventsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetLoginEventsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLoginEventsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetLoginEventsRequest proto.InternalMessageInfo

func (m *GetLoginEventsRequest) GetFirst() uint32 {
	if m != nil {
		return m.First
	}
	return 0
}

func (m *GetLoginEventsRequest) GetMax() uint32 {
	if m != nil {
		return m.Max
	}
	return 0
}

// GetLoginEventsInTimeFrameRequest
//
// x-displayName: "GetLoginEventsInTimeFrameRequest"
// Contains fields to retrieve events in timeframe
type GetLoginEventsInTimeFrameRequest struct {
	// Max
	//
	// x-displayName: "Max"
	// x-example: "25"
	// Records per page
	First uint32 `protobuf:"varint,1,opt,name=first,proto3" json:"first,omitempty"`
	// Max
	//
	// x-displayName: "Max"
	// x-example: "25"
	// Records per page
	Max uint32 `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
	// Start
	//
	// x-displayName: "Start"
	// x-example: "2020-04-20T12:32:51.341959216Z"
	// Start time
	Start *types.Timestamp `protobuf:"bytes,3,opt,name=start,proto3" json:"start,omitempty"`
	// End
	//
	// x-displayName: "End"
	// x-example: "2020-04-20T12:32:51.341959216Z"
	// End time
	End *types.Timestamp `protobuf:"bytes,4,opt,name=end,proto3" json:"end,omitempty"`
}

func (m *GetLoginEventsInTimeFrameRequest) Reset()      { *m = GetLoginEventsInTimeFrameRequest{} }
func (*GetLoginEventsInTimeFrameRequest) ProtoMessage() {}
func (*GetLoginEventsInTimeFrameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_72ab034bcacf2b1e, []int{14}
}
func (m *GetLoginEventsInTimeFrameRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLoginEventsInTimeFrameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLoginEventsInTimeFrameRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLoginEventsInTimeFrameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLoginEventsInTimeFrameRequest.Merge(m, src)
}
func (m *GetLoginEventsInTimeFrameRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetLoginEventsInTimeFrameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLoginEventsInTimeFrameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetLoginEventsInTimeFrameRequest proto.InternalMessageInfo

func (m *GetLoginEventsInTimeFrameRequest) GetFirst() uint32 {
	if m != nil {
		return m.First
	}
	return 0
}

func (m *GetLoginEventsInTimeFrameRequest) GetMax() uint32 {
	if m != nil {
		return m.Max
	}
	return 0
}

func (m *GetLoginEventsInTimeFrameRequest) GetStart() *types.Timestamp {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *GetLoginEventsInTimeFrameRequest) GetEnd() *types.Timestamp {
	if m != nil {
		return m.End
	}
	return nil
}

// LoginEvent
//
// x-displayName: "LoginEvent"
// Contains information about specific login event, like when exactly it happened, from which IP address, etc...
type LoginEvent struct {
	// Time
	//
	// x-displayName: "Time"
	// x-example: "2020-04-20T12:32:51.341959216Z"
	// Login event time
	Time *types.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	// Session
	//
	// x-displayName: "Session"
	// x-example: "55cabe9e-9e10-486f-97bf-05c655d6fea9"
	// Session
	SessionId string `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// IP address
	//
	// x-displayName: "IP address"
	// x-example: "127.0.0.1"
	// IP address the login accessed from
	IpAddress string `protobuf:"bytes,3,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	// Error
	//
	// x-displayName: "Error"
	// x-example: "OK"
	// Login error (if any)
	Error string `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	// Authentication method
	//
	// x-displayName: "Authentication method"
	// x-example: "SSO"
	// Authentication method
	AuthMethod string `protobuf:"bytes,5,opt,name=auth_method,json=authMethod,proto3" json:"auth_method,omitempty"`
	// Username
	//
	// x-displayName: "Username"
	// x-example: "joe.doe"
	// Username of the login
	Username string `protobuf:"bytes,6,opt,name=username,proto3" json:"username,omitempty"`
}

func (m *LoginEvent) Reset()      { *m = LoginEvent{} }
func (*LoginEvent) ProtoMessage() {}
func (*LoginEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_72ab034bcacf2b1e, []int{15}
}
func (m *LoginEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginEvent.Merge(m, src)
}
func (m *LoginEvent) XXX_Size() int {
	return m.Size()
}
func (m *LoginEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginEvent.DiscardUnknown(m)
}

var xxx_messageInfo_LoginEvent proto.InternalMessageInfo

func (m *LoginEvent) GetTime() *types.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *LoginEvent) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *LoginEvent) GetIpAddress() string {
	if m != nil {
		return m.IpAddress
	}
	return ""
}

func (m *LoginEvent) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *LoginEvent) GetAuthMethod() string {
	if m != nil {
		return m.AuthMethod
	}
	return ""
}

func (m *LoginEvent) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

// LoginEvents
//
// x-displayName: "LoginEvents"
// Contains list of login events.
type LoginEvents struct {
	// Login events
	//
	// x-displayName: "Login events"
	// Collection of login events based on input filter
	LoginEvents []*LoginEvent `protobuf:"bytes,1,rep,name=login_events,json=loginEvents,proto3" json:"login_events,omitempty"`
}

func (m *LoginEvents) Reset()      { *m = LoginEvents{} }
func (*LoginEvents) ProtoMessage() {}
func (*LoginEvents) Descriptor() ([]byte, []int) {
	return fileDescriptor_72ab034bcacf2b1e, []int{16}
}
func (m *LoginEvents) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginEvents) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginEvents.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginEvents) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginEvents.Merge(m, src)
}
func (m *LoginEvents) XXX_Size() int {
	return m.Size()
}
func (m *LoginEvents) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginEvents.DiscardUnknown(m)
}

var xxx_messageInfo_LoginEvents proto.InternalMessageInfo

func (m *LoginEvents) GetLoginEvents() []*LoginEvent {
	if m != nil {
		return m.LoginEvents
	}
	return nil
}

// LoginEventsMap
//
// x-displayName: "LoginEventsMap"
// LoginEventsMap is a map from username to list of login events. In can be useful have login events grouped by usernames.
type LoginEventsMap struct {
	// Login map
	//
	// x-displayName: "Login map"
	// Map of login events based on input filter group by username
	LoginEventsMap map[string]*LoginEvents `protobuf:"bytes,1,rep,name=login_events_map,json=loginEventsMap,proto3" json:"login_events_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *LoginEventsMap) Reset()      { *m = LoginEventsMap{} }
func (*LoginEventsMap) ProtoMessage() {}
func (*LoginEventsMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_72ab034bcacf2b1e, []int{17}
}
func (m *LoginEventsMap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginEventsMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginEventsMap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginEventsMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginEventsMap.Merge(m, src)
}
func (m *LoginEventsMap) XXX_Size() int {
	return m.Size()
}
func (m *LoginEventsMap) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginEventsMap.DiscardUnknown(m)
}

var xxx_messageInfo_LoginEventsMap proto.InternalMessageInfo

func (m *LoginEventsMap) GetLoginEventsMap() map[string]*LoginEvents {
	if m != nil {
		return m.LoginEventsMap
	}
	return nil
}

// User
//
// x-displayName: "User"
// Login user representation. Currently users are identified by their email.
type User struct {
	// email
	//
	// x-displayName: "Email"
	// x-example: "joe.doe@acme.com"
	// user's email
	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
}

func (m *User) Reset()      { *m = User{} }
func (*User) ProtoMessage() {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_72ab034bcacf2b1e, []int{18}
}
func (m *User) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return m.Size()
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

// User list
//
// x-displayName: "User list"
// Collection of users
type UserList struct {
	// Users
	//
	// x-displayName: "Users"
	// Collection of users
	Users []*User `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
}

func (m *UserList) Reset()      { *m = UserList{} }
func (*UserList) ProtoMessage() {}
func (*UserList) Descriptor() ([]byte, []int) {
	return fileDescriptor_72ab034bcacf2b1e, []int{19}
}
func (m *UserList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserList.Merge(m, src)
}
func (m *UserList) XXX_Size() int {
	return m.Size()
}
func (m *UserList) XXX_DiscardUnknown() {
	xxx_messageInfo_UserList.DiscardUnknown(m)
}

var xxx_messageInfo_UserList proto.InternalMessageInfo

func (m *UserList) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

// Domain owner assignment request
//
// x-displayName: "Domain owner assignment request"
// Domain owner assignment request
type AssignDomainOwnerRequest struct {
	// Email
	//
	// x-displayName: "Email"
	// x-example: "joe.doe@acme.com"
	// assign domain owner to user with this email
	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
}

func (m *AssignDomainOwnerRequest) Reset()      { *m = AssignDomainOwnerRequest{} }
func (*AssignDomainOwnerRequest) ProtoMessage() {}
func (*AssignDomainOwnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_72ab034bcacf2b1e, []int{20}
}
func (m *AssignDomainOwnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssignDomainOwnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssignDomainOwnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssignDomainOwnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssignDomainOwnerRequest.Merge(m, src)
}
func (m *AssignDomainOwnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *AssignDomainOwnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AssignDomainOwnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AssignDomainOwnerRequest proto.InternalMessageInfo

func (m *AssignDomainOwnerRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

// Domain owner un-assignment request
//
// x-displayName: "Domain owner un-assignment request"
// Domain owner assignment request
type UnassignDomainOwnerRequest struct {
	// Email
	//
	// x-displayName: "Email"
	// x-example: "joe.doe@acme.com"
	// remove domain owner privilege from user with this email
	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
}

func (m *UnassignDomainOwnerRequest) Reset()      { *m = UnassignDomainOwnerRequest{} }
func (*UnassignDomainOwnerRequest) ProtoMessage() {}
func (*UnassignDomainOwnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_72ab034bcacf2b1e, []int{21}
}
func (m *UnassignDomainOwnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnassignDomainOwnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnassignDomainOwnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnassignDomainOwnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnassignDomainOwnerRequest.Merge(m, src)
}
func (m *UnassignDomainOwnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *UnassignDomainOwnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UnassignDomainOwnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UnassignDomainOwnerRequest proto.InternalMessageInfo

func (m *UnassignDomainOwnerRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

// Update user image request
//
// x-displayName: "Update user image request"
// Update user image request
type UpdateImageRequest struct {
	// Image.
	//
	// x-displayName: "Image"
	// x-example: "dXNlci1pbWFnZS5qcGVn"
	// Blob of the tenant profile image.
	Image []byte `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	// ContentType.
	//
	// x-displayName: "ContentType"
	// x-example: "image/jpeg"
	// Type of uploading image.
	ContentType string `protobuf:"bytes,2,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
}

func (m *UpdateImageRequest) Reset()      { *m = UpdateImageRequest{} }
func (*UpdateImageRequest) ProtoMessage() {}
func (*UpdateImageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_72ab034bcacf2b1e, []int{22}
}
func (m *UpdateImageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateImageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateImageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateImageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateImageRequest.Merge(m, src)
}
func (m *UpdateImageRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateImageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateImageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateImageRequest proto.InternalMessageInfo

func (m *UpdateImageRequest) GetImage() []byte {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *UpdateImageRequest) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

// Last login map
//
// x-displayName: "Last login map"
// Last login map
type LastLoginMap struct {
	// Last login map
	//
	// x-displayName: "Last login map"
	// Login map username->timestamp
	LastLoginMap map[string]*types.Timestamp `protobuf:"bytes,1,rep,name=last_login_map,json=lastLoginMap,proto3" json:"last_login_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *LastLoginMap) Reset()      { *m = LastLoginMap{} }
func (*LastLoginMap) ProtoMessage() {}
func (*LastLoginMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_72ab034bcacf2b1e, []int{23}
}
func (m *LastLoginMap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LastLoginMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LastLoginMap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LastLoginMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LastLoginMap.Merge(m, src)
}
func (m *LastLoginMap) XXX_Size() int {
	return m.Size()
}
func (m *LastLoginMap) XXX_DiscardUnknown() {
	xxx_messageInfo_LastLoginMap.DiscardUnknown(m)
}

var xxx_messageInfo_LastLoginMap proto.InternalMessageInfo

func (m *LastLoginMap) GetLastLoginMap() map[string]*types.Timestamp {
	if m != nil {
		return m.LastLoginMap
	}
	return nil
}

// Support Info
//
// x-displayName: "Support Info"
// Support Info contains support information for tenant
type SupportInfo struct {
	// Support email address
	//
	// x-displayName: "Support email address"
	// Support Email address for tenant
	SupportEmailAddress string `protobuf:"bytes,1,opt,name=support_email_address,json=supportEmailAddress,proto3" json:"support_email_address,omitempty"`
}

func (m *SupportInfo) Reset()      { *m = SupportInfo{} }
func (*SupportInfo) ProtoMessage() {}
func (*SupportInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_72ab034bcacf2b1e, []int{24}
}
func (m *SupportInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SupportInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SupportInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SupportInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SupportInfo.Merge(m, src)
}
func (m *SupportInfo) XXX_Size() int {
	return m.Size()
}
func (m *SupportInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SupportInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SupportInfo proto.InternalMessageInfo

func (m *SupportInfo) GetSupportEmailAddress() string {
	if m != nil {
		return m.SupportEmailAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*LookupCnameRequest)(nil), "ves.io.schema.tenant.LookupCnameRequest")
	proto.RegisterType((*DeleteTenantRequest)(nil), "ves.io.schema.tenant.DeleteTenantRequest")
	proto.RegisterType((*DisableTenantResponse)(nil), "ves.io.schema.tenant.DisableTenantResponse")
	proto.RegisterType((*StatusResponse)(nil), "ves.io.schema.tenant.StatusResponse")
	proto.RegisterType((*EscalationDocResp)(nil), "ves.io.schema.tenant.EscalationDocResp")
	proto.RegisterType((*TenantSettingsResponse)(nil), "ves.io.schema.tenant.TenantSettingsResponse")
	proto.RegisterType((*UpdateTenantSettingsResponse)(nil), "ves.io.schema.tenant.UpdateTenantSettingsResponse")
	proto.RegisterType((*ValidationErrorField)(nil), "ves.io.schema.tenant.ValidationErrorField")
	proto.RegisterType((*UpdateTenantSettingsRequest)(nil), "ves.io.schema.tenant.UpdateTenantSettingsRequest")
	proto.RegisterType((*CreateDebugUserRequest)(nil), "ves.io.schema.tenant.CreateDebugUserRequest")
	proto.RegisterType((*DebugUser)(nil), "ves.io.schema.tenant.DebugUser")
	proto.RegisterType((*GetPasswordPolicyRequest)(nil), "ves.io.schema.tenant.GetPasswordPolicyRequest")
	proto.RegisterType((*PasswordPolicyPublicAccess)(nil), "ves.io.schema.tenant.PasswordPolicyPublicAccess")
	proto.RegisterType((*GetLoginEventsRequest)(nil), "ves.io.schema.tenant.GetLoginEventsRequest")
	proto.RegisterType((*GetLoginEventsInTimeFrameRequest)(nil), "ves.io.schema.tenant.GetLoginEventsInTimeFrameRequest")
	proto.RegisterType((*LoginEvent)(nil), "ves.io.schema.tenant.LoginEvent")
	proto.RegisterType((*LoginEvents)(nil), "ves.io.schema.tenant.LoginEvents")
	proto.RegisterType((*LoginEventsMap)(nil), "ves.io.schema.tenant.LoginEventsMap")
	proto.RegisterMapType((map[string]*LoginEvents)(nil), "ves.io.schema.tenant.LoginEventsMap.LoginEventsMapEntry")
	proto.RegisterType((*User)(nil), "ves.io.schema.tenant.User")
	proto.RegisterType((*UserList)(nil), "ves.io.schema.tenant.UserList")
	proto.RegisterType((*AssignDomainOwnerRequest)(nil), "ves.io.schema.tenant.AssignDomainOwnerRequest")
	proto.RegisterType((*UnassignDomainOwnerRequest)(nil), "ves.io.schema.tenant.UnassignDomainOwnerRequest")
	proto.RegisterType((*UpdateImageRequest)(nil), "ves.io.schema.tenant.UpdateImageRequest")
	proto.RegisterType((*LastLoginMap)(nil), "ves.io.schema.tenant.LastLoginMap")
	proto.RegisterMapType((map[string]*types.Timestamp)(nil), "ves.io.schema.tenant.LastLoginMap.LastLoginMapEntry")
	proto.RegisterType((*SupportInfo)(nil), "ves.io.schema.tenant.SupportInfo")
}

func init() {
	proto.RegisterFile("ves.io/schema/tenant/custom_api.proto", fileDescriptor_72ab034bcacf2b1e)
}

var fileDescriptor_72ab034bcacf2b1e = []byte{
	// 2776 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x1a, 0x5d, 0x6c, 0x1c, 0x47,
	0x39, 0xeb, 0x73, 0x12, 0xfb, 0x3b, 0xdb, 0x89, 0x27, 0x4e, 0xb8, 0x5c, 0xc2, 0xc5, 0x59, 0xa8,
	0xf2, 0x7b, 0x77, 0xa9, 0x9b, 0xa4, 0x69, 0xd2, 0x36, 0x4a, 0x6c, 0xc7, 0x35, 0x4a, 0xda, 0xe8,
	0x92, 0x80, 0x14, 0x7e, 0x56, 0x73, 0xbb, 0xe3, 0xf3, 0x36, 0xbb, 0x3b, 0xdb, 0x9d, 0xb9, 0xb3,
	0x0f, 0xa8, 0xa8, 0x8a, 0x78, 0x47, 0xe2, 0x09, 0x21, 0x1e, 0x78, 0x43, 0x45, 0xf0, 0x02, 0x42,
	0x02, 0x04, 0x14, 0x09, 0xe4, 0xa2, 0x02, 0x8a, 0x8a, 0x80, 0x0a, 0x84, 0x44, 0x5c, 0x1e, 0x50,
	0x78, 0x69, 0x9f, 0x79, 0x00, 0xcd, 0xcc, 0xee, 0xde, 0x9e, 0xbd, 0xf7, 0x1b, 0x3f, 0xf1, 0xe4,
	0x9b, 0x6f, 0xbe, 0xef, 0x9b, 0xef, 0x6f, 0xbe, 0xf9, 0xbe, 0x6f, 0x0d, 0x4f, 0x35, 0x08, 0x2b,
	0xd9, 0xb4, 0xcc, 0xcc, 0x55, 0xe2, 0xe2, 0x32, 0x27, 0x1e, 0xf6, 0x78, 0xd9, 0xac, 0x33, 0x4e,
	0x5d, 0x03, 0xfb, 0x76, 0xc9, 0x0f, 0x28, 0xa7, 0x68, 0x46, 0xa1, 0x95, 0x14, 0x5a, 0x49, 0xa1,
	0xe5, 0x8f, 0xd6, 0x28, 0xad, 0x39, 0xa4, 0x8c, 0x7d, 0xbb, 0x8c, 0x3d, 0x8f, 0x72, 0xcc, 0x6d,
	0xea, 0x31, 0x45, 0x93, 0x3f, 0x9c, 0xd8, 0x5d, 0xe5, 0xdc, 0xaf, 0x52, 0xab, 0x19, 0x6e, 0x1d,
	0x0b, 0xb7, 0xe4, 0xaa, 0x5a, 0x5f, 0x29, 0x73, 0xdb, 0x25, 0x8c, 0x63, 0xd7, 0x0f, 0x11, 0x8e,
	0xb7, 0x8b, 0x65, 0x52, 0x8f, 0x63, 0x93, 0x97, 0x79, 0xd3, 0x27, 0x11, 0xfb, 0x23, 0xed, 0x28,
	0xd4, 0x4f, 0x9e, 0x3d, 0x9b, 0xaa, 0x56, 0x92, 0xfc, 0xf0, 0x16, 0x8c, 0xc4, 0xd6, 0xa9, 0xf6,
	0xad, 0x3a, 0x23, 0x41, 0xd9, 0xaf, 0x57, 0x1d, 0xdb, 0x34, 0x94, 0x61, 0x62, 0xbb, 0xe4, 0x0b,
	0x29, 0xa8, 0x49, 0x56, 0x7a, 0xfb, 0x7e, 0x83, 0x30, 0xe2, 0x35, 0xb6, 0xc8, 0x7a, 0x7e, 0x0b,
	0x8e, 0x4d, 0xd6, 0x58, 0x28, 0xb1, 0x61, 0x52, 0x6f, 0xc5, 0xae, 0xd5, 0x03, 0x69, 0xd8, 0x24,
	0x67, 0xfd, 0x25, 0x40, 0x37, 0x29, 0x7d, 0x50, 0xf7, 0xe7, 0x3d, 0xec, 0x92, 0x0a, 0x79, 0xad,
	0x4e, 0x18, 0x47, 0x33, 0xb0, 0xdb, 0x14, 0xeb, 0x9c, 0x36, 0xab, 0x9d, 0x1c, 0xaf, 0xa8, 0x05,
	0x3a, 0x0a, 0xe3, 0xe2, 0x2f, 0xf3, 0xb1, 0x49, 0x72, 0x23, 0x72, 0xa7, 0x05, 0xd0, 0xbf, 0xa9,
	0xc1, 0x81, 0x05, 0xe2, 0x10, 0x4e, 0xee, 0xca, 0x43, 0x23, 0x5e, 0x08, 0x46, 0x13, 0xac, 0xe4,
	0x6f, 0xc1, 0x9f, 0xb8, 0xd8, 0x76, 0x42, 0x2e, 0x6a, 0x81, 0x9e, 0x87, 0x3d, 0x01, 0xc1, 0x8c,
	0x7a, 0xb9, 0xcc, 0xac, 0x76, 0x72, 0x6a, 0xee, 0x93, 0xa5, 0xb4, 0x70, 0x29, 0xc9, 0x43, 0x6c,
	0xea, 0x55, 0x24, 0x6e, 0x25, 0xa4, 0x41, 0x79, 0x18, 0x5b, 0x21, 0xc4, 0xaa, 0x62, 0xf3, 0x41,
	0x6e, 0x54, 0xb2, 0x8d, 0xd7, 0x7a, 0x09, 0x0e, 0x2e, 0xd8, 0x0c, 0x57, 0x9d, 0x58, 0x36, 0xe6,
	0x53, 0x8f, 0x11, 0x74, 0x10, 0xf6, 0xbc, 0x4a, 0xab, 0x86, 0x6d, 0x45, 0x9a, 0xbe, 0x4a, 0xab,
	0xcb, 0x96, 0xbe, 0x1f, 0xa6, 0xee, 0x70, 0xcc, 0xeb, 0x2c, 0x42, 0xd4, 0x9f, 0x82, 0xe9, 0x45,
	0x66, 0x62, 0x47, 0x5a, 0x70, 0x81, 0x9a, 0x62, 0x03, 0xed, 0x87, 0x4c, 0x3d, 0x70, 0x42, 0x52,
	0xf1, 0x53, 0xff, 0xda, 0x28, 0x1c, 0x52, 0x47, 0xdc, 0x21, 0x9c, 0xdb, 0x5e, 0x2d, 0xe6, 0x10,
	0xdb, 0x61, 0x4f, 0xc2, 0x0e, 0xe7, 0x61, 0x37, 0xe3, 0x98, 0x93, 0x1c, 0x48, 0x85, 0x0b, 0xe9,
	0x0a, 0xdf, 0xb8, 0x73, 0x4b, 0x48, 0x43, 0x2a, 0x0a, 0x19, 0x1d, 0x87, 0x09, 0x93, 0xba, 0x3e,
	0xf6, 0x9a, 0x86, 0xe4, 0xb8, 0x57, 0x72, 0xcc, 0x86, 0xb0, 0x97, 0x05, 0xe3, 0x43, 0xb0, 0xc7,
	0xa2, 0x2e, 0xb6, 0xbd, 0xdc, 0x98, 0xdc, 0x0c, 0x57, 0xe8, 0x18, 0x64, 0x29, 0xf7, 0x0d, 0xe2,
	0x09, 0x5b, 0x58, 0xd2, 0xfc, 0x63, 0x15, 0xa0, 0xdc, 0x5f, 0x54, 0x10, 0x81, 0xc0, 0x18, 0x8d,
	0x11, 0x32, 0x0a, 0x81, 0x31, 0x1a, 0x21, 0xbc, 0x08, 0x02, 0xdd, 0x60, 0xd2, 0x3c, 0xd2, 0xd0,
	0x53, 0x73, 0xc7, 0xd2, 0xe5, 0x7e, 0x85, 0xfb, 0xa1, 0x15, 0xc7, 0x69, 0xf4, 0x13, 0x7d, 0x1e,
	0x0e, 0xb9, 0x78, 0xdd, 0x30, 0x03, 0x62, 0x11, 0x8f, 0xdb, 0xd8, 0x61, 0x06, 0x59, 0xf7, 0xed,
	0xa0, 0x99, 0xdb, 0x3d, 0xab, 0x9d, 0xcc, 0xce, 0x9d, 0x48, 0xe7, 0x35, 0xdf, 0xc2, 0x5f, 0x94,
	0xe8, 0x95, 0x19, 0x17, 0xaf, 0x6f, 0x83, 0xa2, 0xe7, 0xe0, 0x30, 0x36, 0xb9, 0xdd, 0x20, 0x86,
	0xef, 0x60, 0xcf, 0xe0, 0x01, 0xf6, 0x98, 0x2d, 0x7c, 0x26, 0x7c, 0x3c, 0x2e, 0x6d, 0x71, 0x48,
	0x21, 0xdc, 0x76, 0xb0, 0x77, 0x37, 0xde, 0x5e, 0xb6, 0xd0, 0x09, 0xd8, 0x47, 0x03, 0xbb, 0x66,
	0x7b, 0xd8, 0x31, 0xd4, 0xa9, 0xb9, 0x09, 0x49, 0x30, 0x15, 0x81, 0x95, 0x67, 0x85, 0xfd, 0x99,
	0x69, 0xbb, 0xb1, 0x91, 0x26, 0xa5, 0x91, 0xb2, 0x02, 0x16, 0x5a, 0x49, 0xff, 0xcf, 0x08, 0x1c,
	0xbd, 0xe7, 0x5b, 0x38, 0xba, 0x0c, 0xdb, 0xa2, 0xe1, 0xff, 0xde, 0x11, 0x9f, 0x81, 0xe9, 0x06,
	0x76, 0x6c, 0x4b, 0x5e, 0x18, 0x83, 0x04, 0x01, 0x0d, 0x58, 0x6e, 0xef, 0x6c, 0xe6, 0x64, 0x76,
	0xee, 0x74, 0x3a, 0xe7, 0x4f, 0xc7, 0xe8, 0x8b, 0x02, 0xfb, 0x86, 0x4d, 0x1c, 0xab, 0xb2, 0xbf,
	0xd1, 0x0e, 0x65, 0xdb, 0xac, 0x3f, 0xb6, 0xdd, 0xfa, 0x9f, 0x83, 0x99, 0x34, 0x66, 0xc2, 0xa6,
	0x52, 0x10, 0x63, 0x45, 0x2c, 0xc3, 0x7b, 0x0b, 0xa4, 0x85, 0xf0, 0x09, 0x98, 0x54, 0x08, 0x2e,
	0x61, 0x0c, 0xd7, 0xa2, 0x2c, 0x37, 0x21, 0x81, 0xb7, 0x14, 0x4c, 0xff, 0xb6, 0x06, 0x47, 0xd2,
	0x7d, 0xab, 0x12, 0x5e, 0x4f, 0xd7, 0x76, 0xb6, 0x7c, 0x66, 0x07, 0x2c, 0xaf, 0xdf, 0x83, 0x43,
	0xf3, 0x01, 0xc1, 0x9c, 0x2c, 0x90, 0x6a, 0xbd, 0x76, 0x8f, 0x91, 0x20, 0x92, 0xec, 0x0a, 0x8c,
	0x79, 0xcc, 0x08, 0xa8, 0x43, 0x58, 0x4e, 0x93, 0xae, 0x98, 0xdd, 0x72, 0xd4, 0xcb, 0x51, 0x3a,
	0xaf, 0x50, 0x87, 0xdc, 0x6d, 0xfa, 0xa4, 0xb2, 0xd7, 0x63, 0xe2, 0x37, 0xd3, 0xd7, 0x60, 0x3c,
	0x66, 0x88, 0x72, 0xb0, 0x37, 0xd2, 0x4f, 0x93, 0xfa, 0x45, 0x4b, 0xf4, 0x71, 0x80, 0x15, 0x3b,
	0x60, 0x5c, 0xa5, 0xa6, 0xf0, 0x95, 0x90, 0x10, 0x99, 0x98, 0x8e, 0xc0, 0xb8, 0x83, 0xa3, 0xdd,
	0x8c, 0x4a, 0xd3, 0x02, 0xf0, 0x72, 0xdb, 0xb3, 0x30, 0x9a, 0x78, 0x16, 0xf4, 0x0b, 0x90, 0x5b,
	0x22, 0xfc, 0x36, 0x66, 0x6c, 0x8d, 0x06, 0xd6, 0x6d, 0xea, 0xd8, 0x66, 0x33, 0xd2, 0xe8, 0x30,
	0x8c, 0x05, 0x04, 0x3b, 0x6e, 0x2b, 0x83, 0xef, 0x95, 0xeb, 0x65, 0x4b, 0xff, 0xe5, 0x08, 0xe4,
	0xdb, 0x89, 0x6e, 0xcb, 0xc7, 0xf7, 0x9a, 0x69, 0x12, 0xc6, 0x64, 0x86, 0xb4, 0x6b, 0x36, 0x67,
	0x92, 0x6e, 0xb2, 0x12, 0xae, 0xd0, 0xd3, 0x30, 0xe3, 0xd0, 0x35, 0x12, 0x98, 0x98, 0x11, 0xc3,
	0x5c, 0xc5, 0x01, 0x36, 0x39, 0x09, 0x98, 0xd4, 0x64, 0xb2, 0x72, 0x20, 0xde, 0x9b, 0x8f, 0xb7,
	0x04, 0x49, 0xdd, 0xf7, 0xb7, 0x93, 0x64, 0x14, 0x49, 0xbc, 0x97, 0x20, 0x29, 0x02, 0x62, 0x3e,
	0x31, 0x6d, 0xec, 0x24, 0x09, 0x46, 0x25, 0xc1, 0x74, 0xb8, 0x93, 0x40, 0x3f, 0x0e, 0x13, 0x1e,
	0xe5, 0x86, 0xa8, 0x0b, 0xa4, 0xe1, 0x76, 0xab, 0x98, 0xf7, 0x28, 0xbf, 0x17, 0x82, 0xd0, 0x69,
	0x98, 0x16, 0x28, 0x01, 0x31, 0x89, 0xc7, 0x9d, 0xa6, 0xc0, 0xb5, 0xe4, 0xcb, 0x30, 0x59, 0xd9,
	0xe7, 0x51, 0x5e, 0x09, 0xe1, 0xf7, 0x18, 0xb1, 0xd0, 0x53, 0x30, 0xe5, 0xda, 0x9e, 0xed, 0xd6,
	0x5d, 0xc3, 0x21, 0x5e, 0x8d, 0xaf, 0xca, 0x4b, 0x34, 0x59, 0x99, 0x0c, 0xa1, 0x37, 0x25, 0x50,
	0xbf, 0x0a, 0x07, 0x97, 0x08, 0xbf, 0x49, 0x6b, 0xb6, 0xb7, 0xd8, 0x20, 0x1e, 0x67, 0x89, 0xf2,
	0x40, 0x7a, 0x34, 0x34, 0x9d, 0x5a, 0x88, 0xd7, 0xd0, 0xc5, 0xeb, 0xa1, 0xa1, 0xc4, 0x4f, 0xfd,
	0x2d, 0x0d, 0x66, 0xdb, 0x39, 0x2c, 0x7b, 0x77, 0x6d, 0x97, 0xdc, 0x08, 0xda, 0x6b, 0x8d, 0x7e,
	0x98, 0xa1, 0x73, 0xf2, 0xad, 0x0c, 0x78, 0x78, 0x49, 0xf2, 0x25, 0x55, 0xfc, 0x95, 0xa2, 0xe2,
	0xaf, 0x74, 0x37, 0x2a, 0xfe, 0x2a, 0x0a, 0x11, 0x9d, 0x85, 0x0c, 0xf1, 0x2c, 0x69, 0xd5, 0xee,
	0xf8, 0x02, 0x4d, 0xff, 0xbd, 0x06, 0xd0, 0x92, 0x14, 0x95, 0x60, 0x54, 0x54, 0x93, 0x52, 0xaa,
	0xee, 0xd4, 0x12, 0x4f, 0xc4, 0x3d, 0x23, 0x8c, 0x85, 0x2f, 0x4d, 0x18, 0xf7, 0x21, 0x64, 0x59,
	0x5e, 0x0b, 0xdb, 0x37, 0xb0, 0x65, 0x05, 0x84, 0xb1, 0x30, 0xf0, 0xc7, 0x6d, 0xff, 0x9a, 0x02,
	0xc8, 0xc8, 0x17, 0x39, 0x26, 0x8e, 0x7c, 0xb1, 0x10, 0x99, 0x04, 0xd7, 0xf9, 0xaa, 0xe1, 0x12,
	0xbe, 0x4a, 0x2d, 0xe9, 0xf5, 0xf1, 0x0a, 0x08, 0xd0, 0x2d, 0x09, 0x11, 0x35, 0x4f, 0x1c, 0x13,
	0xaa, 0xae, 0x88, 0xd7, 0x7a, 0x05, 0xb2, 0x09, 0xc3, 0xa3, 0x79, 0x98, 0x70, 0xc4, 0xd2, 0x20,
	0x72, 0xdd, 0xe1, 0xfe, 0x87, 0xa9, 0xa6, 0x45, 0x58, 0xc9, 0x3a, 0x2d, 0x26, 0xfa, 0x5f, 0x35,
	0x98, 0x4a, 0x30, 0xbd, 0x85, 0x7d, 0x54, 0x85, 0xfd, 0x49, 0xbe, 0x86, 0x8b, 0xfd, 0x90, 0xf7,
	0xa5, 0x5e, 0xbc, 0x05, 0xfd, 0x96, 0xe5, 0xa2, 0xc7, 0x83, 0x66, 0x65, 0xca, 0x69, 0x03, 0xe6,
	0x2d, 0x38, 0x90, 0x82, 0x26, 0x62, 0xe4, 0x01, 0x69, 0x46, 0xe5, 0xd7, 0x03, 0xd2, 0x44, 0xcf,
	0xc2, 0xee, 0x06, 0x76, 0xea, 0x2a, 0xef, 0x64, 0xe7, 0x8e, 0xf7, 0x94, 0xa0, 0xa2, 0xf0, 0x2f,
	0x8f, 0x5c, 0xd2, 0xf4, 0xa3, 0x30, 0x2a, 0x73, 0x5b, 0x9c, 0x85, 0xb4, 0x64, 0x16, 0x7a, 0x1e,
	0xc6, 0xc4, 0xee, 0x4d, 0x9b, 0x71, 0x11, 0x8a, 0xc2, 0xcc, 0x91, 0x11, 0xf3, 0xe9, 0xc7, 0xc8,
	0xcc, 0xab, 0x10, 0xf5, 0x73, 0x90, 0xbb, 0xc6, 0x98, 0x5d, 0xf3, 0x16, 0x64, 0x1d, 0xf6, 0xca,
	0x9a, 0xd7, 0xca, 0xca, 0xe9, 0xe7, 0xcd, 0x41, 0xfe, 0x9e, 0x87, 0x07, 0xa3, 0xa9, 0x00, 0x52,
	0x0f, 0xd3, 0xb2, 0x8b, 0x6b, 0xa4, 0x95, 0x23, 0x77, 0xdb, 0x62, 0x2d, 0x71, 0x27, 0xae, 0x67,
	0xde, 0x79, 0x5d, 0xab, 0x28, 0x88, 0xaa, 0x24, 0x3d, 0x4e, 0x3c, 0x6e, 0x88, 0xa6, 0x20, 0x0c,
	0xdb, 0x6c, 0x08, 0x13, 0xf9, 0x5f, 0xdf, 0xd0, 0x60, 0xe2, 0x26, 0x66, 0xea, 0x12, 0x0b, 0x87,
	0xdf, 0x87, 0x29, 0x99, 0xc1, 0x95, 0xd7, 0x5b, 0xee, 0x3e, 0xdf, 0xc1, 0xd8, 0x09, 0xda, 0xb6,
	0x85, 0x72, 0xf5, 0x84, 0x93, 0x00, 0xe5, 0x3f, 0x0b, 0xd3, 0xdb, 0x50, 0x52, 0xdc, 0x7c, 0xae,
	0xdd, 0xcd, 0x5d, 0x53, 0x41, 0xcb, 0xbf, 0xd7, 0x20, 0x7b, 0xa7, 0xee, 0xfb, 0x34, 0xe0, 0xcb,
	0xde, 0x0a, 0x45, 0x73, 0x70, 0x90, 0xa9, 0xa5, 0x21, 0xad, 0x17, 0x5f, 0x4e, 0x75, 0xd0, 0x81,
	0x70, 0x73, 0x51, 0xec, 0x85, 0xd7, 0x74, 0xee, 0x57, 0xe7, 0x60, 0x7c, 0x5e, 0xf6, 0x6e, 0xd7,
	0x6e, 0x2f, 0xa3, 0xef, 0x8d, 0x88, 0x2b, 0x16, 0x37, 0x4f, 0xe8, 0x64, 0xa7, 0x70, 0xdb, 0xda,
	0x5f, 0xe5, 0x3b, 0x74, 0x36, 0x5b, 0x7a, 0x8e, 0x77, 0xb5, 0xcd, 0x8d, 0x5c, 0x76, 0xe5, 0xc2,
	0xba, 0x59, 0xf4, 0xa8, 0xb8, 0xf5, 0x8f, 0x37, 0x72, 0x3e, 0x88, 0x9e, 0xb4, 0x68, 0xd3, 0xa2,
	0x22, 0x2d, 0x2a, 0xd2, 0xa2, 0x23, 0x0f, 0x51, 0x7d, 0x5a, 0x09, 0x32, 0x35, 0xc2, 0xd1, 0x89,
	0xb0, 0xdb, 0x2c, 0xc7, 0x3d, 0x1a, 0x2b, 0xb3, 0x26, 0xe3, 0xc4, 0x8d, 0x1a, 0x59, 0x45, 0x84,
	0x8e, 0x2a, 0xfc, 0x83, 0x65, 0x8f, 0x1a, 0xe2, 0x98, 0xb2, 0x64, 0x13, 0xee, 0xbe, 0xf9, 0xc7,
	0x7f, 0x7e, 0x63, 0xe4, 0x7a, 0xdf, 0xcc, 0xee, 0x7f, 0xac, 0x03, 0x1f, 0xf4, 0x37, 0x0d, 0xa6,
	0x97, 0x08, 0x6f, 0xaf, 0x99, 0xd0, 0x91, 0x74, 0x4b, 0x2c, 0xba, 0x3e, 0x6f, 0xe6, 0xcf, 0xa6,
	0x6f, 0xa6, 0x97, 0xd4, 0xfa, 0x97, 0x36, 0x37, 0x72, 0x37, 0xa4, 0xb5, 0x4c, 0xea, 0x31, 0xea,
	0x90, 0x62, 0x15, 0x33, 0x52, 0x74, 0xa9, 0x67, 0x73, 0x1a, 0x9c, 0x9d, 0x95, 0x5b, 0x16, 0x59,
	0xc1, 0x75, 0x87, 0x17, 0xb1, 0xac, 0x02, 0xce, 0x46, 0xc6, 0x5c, 0x23, 0xd5, 0x10, 0x54, 0x0c,
	0x08, 0xb6, 0xa4, 0xd2, 0x67, 0xd0, 0xa9, 0x9e, 0x4a, 0xb3, 0x48, 0x8f, 0x8f, 0x34, 0x98, 0x49,
	0x2b, 0x0a, 0xd1, 0xd3, 0x1d, 0x92, 0x43, 0xe7, 0x02, 0x32, 0x3f, 0x37, 0x08, 0x49, 0xa8, 0x7c,
	0xb0, 0xb9, 0x91, 0xbb, 0xbc, 0x5d, 0x79, 0x6c, 0xb9, 0xb6, 0x17, 0xaa, 0x2e, 0x00, 0xb1, 0xc2,
	0x75, 0xec, 0xaa, 0xcd, 0xe2, 0x5a, 0x60, 0x73, 0x22, 0x15, 0x2e, 0xe5, 0xfb, 0x57, 0xf8, 0xb2,
	0x76, 0x1a, 0xfd, 0x7a, 0x04, 0x66, 0x54, 0x4d, 0xab, 0x84, 0xba, 0x49, 0x1a, 0xc4, 0x79, 0xe5,
	0xee, 0xed, 0xee, 0x4e, 0xed, 0xb6, 0xa9, 0x7f, 0x24, 0x42, 0xfe, 0x4a, 0x9a, 0x1e, 0x0d, 0xec,
	0x99, 0xc4, 0x8a, 0x14, 0x0a, 0xb5, 0x08, 0x83, 0x9f, 0x8a, 0xd4, 0xa8, 0x14, 0x79, 0xbc, 0x91,
	0xa3, 0x70, 0x32, 0xf5, 0x8a, 0x44, 0xa2, 0x17, 0x29, 0xf7, 0x8b, 0xaa, 0x5c, 0x45, 0x57, 0x20,
	0xe3, 0xd7, 0x39, 0x3a, 0xdf, 0xb7, 0xde, 0x65, 0xca, 0xfd, 0xb2, 0x22, 0xce, 0xef, 0x51, 0x28,
	0xd2, 0x76, 0xcf, 0xe5, 0x87, 0xe2, 0x21, 0xcc, 0xf8, 0x9e, 0xb6, 0x65, 0x3a, 0xb1, 0x03, 0x76,
	0xfc, 0xca, 0x13, 0x9a, 0x51, 0xea, 0x74, 0x39, 0x7f, 0x61, 0x30, 0x9d, 0x2c, 0xa5, 0x85, 0x50,
	0xea, 0x5b, 0x23, 0x30, 0x91, 0x9c, 0x06, 0xa1, 0x53, 0x5d, 0x86, 0x39, 0xed, 0x13, 0xa3, 0x3e,
	0xb3, 0xe3, 0x4f, 0x44, 0xa8, 0x1c, 0xee, 0x16, 0x08, 0x5f, 0x80, 0x23, 0xa9, 0x81, 0x60, 0xc9,
	0x33, 0xd1, 0xb3, 0x30, 0xea, 0x53, 0xc6, 0x51, 0xb9, 0xa7, 0x92, 0x81, 0x12, 0x2c, 0x24, 0x6c,
	0xf3, 0xfb, 0x79, 0x7d, 0x50, 0x72, 0x61, 0x9d, 0xb7, 0x35, 0x98, 0x58, 0x22, 0xbc, 0xd5, 0x4f,
	0x75, 0xf5, 0xf4, 0xb1, 0x4e, 0xa6, 0x0b, 0xa9, 0xe5, 0xe5, 0xbf, 0xd2, 0x2b, 0xf3, 0x75, 0xb8,
	0xfe, 0x71, 0xba, 0x2b, 0xa2, 0x33, 0x3d, 0x35, 0xb1, 0xc4, 0x91, 0x72, 0x3c, 0x89, 0x7e, 0xa1,
	0xc1, 0x3e, 0xe5, 0xbc, 0x3e, 0xb5, 0xe8, 0x1a, 0xaf, 0xaf, 0xed, 0x40, 0xfa, 0x2a, 0x9e, 0x1e,
	0x48, 0x81, 0xf7, 0x34, 0xd8, 0xb7, 0xa5, 0x4f, 0x46, 0x67, 0x3b, 0x76, 0xde, 0x29, 0xed, 0x74,
	0x77, 0x8d, 0xf8, 0x0e, 0x68, 0x74, 0x4e, 0x1f, 0x44, 0x23, 0x11, 0x58, 0x7f, 0xd7, 0x60, 0x6a,
	0x89, 0xf0, 0xe5, 0x85, 0x5b, 0xfd, 0xbd, 0xb0, 0x5b, 0x6b, 0x74, 0x39, 0x35, 0x2e, 0xa5, 0x4d,
	0x8d, 0x4b, 0x4b, 0x0e, 0xad, 0x62, 0xe7, 0x8e, 0x4f, 0x4c, 0x59, 0x17, 0xf2, 0x9d, 0x88, 0xb9,
	0x32, 0x2a, 0xf6, 0x54, 0xd0, 0xb6, 0xdc, 0xd6, 0x33, 0xbb, 0xa9, 0xc1, 0x74, 0x58, 0xe2, 0x26,
	0x54, 0x1c, 0x5a, 0x8b, 0xee, 0x2e, 0x6c, 0xec, 0x80, 0x0b, 0xe7, 0xf2, 0x83, 0x69, 0x28, 0x9c,
	0xf8, 0x53, 0x55, 0x29, 0xb5, 0x0f, 0x2f, 0x50, 0x29, 0x5d, 0xd4, 0x4e, 0xa3, 0x91, 0xfc, 0xb9,
	0x74, 0xfc, 0xce, 0x23, 0x11, 0x7d, 0x7e, 0x4b, 0xb9, 0xa9, 0x8a, 0x02, 0x74, 0x36, 0xae, 0xe7,
	0x52, 0xe4, 0x2d, 0xfb, 0x21, 0x3f, 0xc3, 0x57, 0x62, 0xfe, 0x45, 0x45, 0x60, 0xb2, 0xf5, 0x3c,
	0xd3, 0x51, 0xf2, 0xed, 0xb3, 0x85, 0x4e, 0xc9, 0xbf, 0xbd, 0xff, 0x93, 0x19, 0xef, 0xc2, 0xc0,
	0xd1, 0x17, 0xc7, 0xdd, 0x33, 0xe8, 0xe9, 0xbe, 0xbc, 0xa2, 0x7a, 0xda, 0xb2, 0x6c, 0x75, 0xd0,
	0xbb, 0x1a, 0xec, 0x13, 0x32, 0x27, 0x9b, 0xa1, 0xae, 0x97, 0x4b, 0xef, 0xdd, 0x11, 0xe9, 0x6b,
	0x4f, 0xa6, 0xc8, 0x25, 0x74, 0x71, 0x20, 0x45, 0xe2, 0xc6, 0x0d, 0xfd, 0x57, 0x83, 0xc3, 0x1d,
	0x67, 0x33, 0xe8, 0x62, 0x3f, 0x2e, 0xdb, 0x3e, 0xcc, 0xe9, 0xd3, 0x7b, 0x5f, 0xd5, 0x76, 0x22,
	0x79, 0xbc, 0xa8, 0x3f, 0x37, 0xb0, 0x13, 0x0d, 0xdb, 0x33, 0xb8, 0xed, 0xca, 0x47, 0xf8, 0x77,
	0x1a, 0x4c, 0x8b, 0x76, 0x7e, 0xd9, 0x53, 0x1f, 0x04, 0x44, 0x6a, 0xef, 0x91, 0x2e, 0x0b, 0x9d,
	0x3b, 0x7d, 0xc1, 0x49, 0xff, 0xe2, 0x4e, 0xe8, 0x75, 0x01, 0x3d, 0xd3, 0x97, 0x5e, 0x72, 0xb2,
	0x50, 0xb6, 0x43, 0xe9, 0xd1, 0x6f, 0x35, 0x38, 0x14, 0xf7, 0x57, 0x6d, 0xdf, 0xaa, 0xba, 0xeb,
	0x34, 0x13, 0x75, 0xcf, 0xd8, 0xb7, 0x4b, 0x2f, 0x71, 0xee, 0x5f, 0xa7, 0x56, 0x53, 0xff, 0xf2,
	0x0e, 0xe4, 0xbe, 0x7e, 0x82, 0x33, 0x2c, 0xc9, 0x48, 0x2c, 0x6f, 0xd1, 0xa2, 0x26, 0xfa, 0xe1,
	0x08, 0x4c, 0x6f, 0x9b, 0x97, 0x74, 0xca, 0x80, 0x9d, 0x06, 0x2b, 0xdd, 0x93, 0xfb, 0xc3, 0x9e,
	0xe5, 0xa3, 0xdf, 0xa1, 0x8f, 0x50, 0x43, 0x99, 0xa2, 0xfa, 0xa2, 0xa6, 0x68, 0xd0, 0xf3, 0x61,
	0x2d, 0xd9, 0xbb, 0x09, 0x50, 0x64, 0x86, 0x24, 0x2b, 0x2b, 0x56, 0xed, 0x8d, 0x84, 0x3e, 0x14,
	0x0f, 0x11, 0xd0, 0x3f, 0x1f, 0x81, 0x03, 0x29, 0x33, 0x23, 0xd4, 0xe1, 0x25, 0xe8, 0x3c, 0x5e,
	0xea, 0x6e, 0xb9, 0x3f, 0xf7, 0xb4, 0x1c, 0x87, 0xd3, 0xa9, 0x96, 0xab, 0x7b, 0x69, 0xb6, 0x7b,
	0x31, 0xb4, 0xdd, 0xc5, 0xc1, 0xf4, 0x8e, 0x98, 0xb5, 0x59, 0xef, 0x8a, 0x3e, 0x24, 0x17, 0x61,
	0xbf, 0xef, 0x64, 0x60, 0x4c, 0x14, 0x4f, 0x72, 0x34, 0x36, 0xc4, 0x9d, 0x79, 0x34, 0xb2, 0xb9,
	0x91, 0x3b, 0x33, 0xc0, 0x98, 0xe1, 0xf1, 0x46, 0xee, 0x07, 0x1a, 0x9c, 0x48, 0xb5, 0x55, 0xfc,
	0x2f, 0x02, 0xc5, 0x1a, 0xe1, 0x6a, 0x5a, 0xf7, 0x82, 0x9a, 0xd3, 0x5c, 0xec, 0xbf, 0x29, 0x8b,
	0xb2, 0x85, 0x24, 0x5f, 0x50, 0xe4, 0x2f, 0x44, 0xe4, 0x8c, 0x63, 0x3e, 0x30, 0x17, 0x69, 0xe5,
	0xe6, 0xb0, 0x32, 0xdc, 0xbf, 0xfa, 0x84, 0xc7, 0xa3, 0xb7, 0x34, 0xd8, 0xab, 0x5e, 0x21, 0x3a,
	0x8c, 0x8b, 0x9c, 0x01, 0x3d, 0x24, 0xd5, 0x7d, 0x16, 0x5d, 0x18, 0x58, 0x5d, 0x47, 0x08, 0xf8,
	0xfd, 0x0c, 0xc0, 0x12, 0xe1, 0x37, 0x70, 0x63, 0xd9, 0xa4, 0xde, 0x30, 0xf2, 0xfe, 0x7b, 0x88,
	0x90, 0xfa, 0x91, 0x06, 0xa7, 0x7a, 0x87, 0xd4, 0x0a, 0x6e, 0xd8, 0x42, 0xa8, 0xab, 0x2a, 0x2a,
	0x2e, 0x0d, 0xac, 0x61, 0xc4, 0xe0, 0x86, 0x62, 0x70, 0x75, 0x58, 0xbf, 0x86, 0x7c, 0xa4, 0xa5,
	0x5f, 0x1f, 0x5e, 0x8e, 0xfb, 0xd7, 0x9e, 0x58, 0x04, 0xf4, 0x27, 0x0d, 0xb2, 0x89, 0x01, 0x7a,
	0xa7, 0x81, 0xee, 0xf6, 0x19, 0x7b, 0xef, 0x61, 0xcc, 0x93, 0xbe, 0xa5, 0x57, 0xf2, 0x43, 0x5e,
	0x39, 0x91, 0xd8, 0x7e, 0xa3, 0x41, 0x56, 0xf5, 0xea, 0x7d, 0xe4, 0xb6, 0xae, 0xaa, 0xec, 0x48,
	0x59, 0x70, 0x7a, 0xd8, 0x0c, 0xf6, 0x63, 0xd5, 0x5b, 0x24, 0xa7, 0xf8, 0x5d, 0x55, 0xe9, 0xf0,
	0xfd, 0x27, 0x41, 0xaf, 0x5b, 0xc3, 0x24, 0x84, 0x7e, 0xda, 0xd6, 0xf0, 0xf3, 0x41, 0xd1, 0xf6,
	0x56, 0x68, 0x1e, 0xde, 0xfe, 0x99, 0x96, 0x79, 0xf3, 0x0f, 0xb9, 0x91, 0x55, 0xed, 0xfa, 0x1b,
	0xda, 0xc3, 0x47, 0x85, 0x5d, 0xef, 0x3f, 0x2a, 0xec, 0xfa, 0xf0, 0x51, 0x41, 0x7b, 0x63, 0xb3,
	0xa0, 0x7d, 0x77, 0xb3, 0xa0, 0xbd, 0xb3, 0x59, 0xd0, 0x1e, 0x6e, 0x16, 0xb4, 0x7f, 0x6c, 0x16,
	0xb4, 0x7f, 0x6d, 0x16, 0x76, 0x7d, 0xb8, 0x59, 0xd0, 0xbe, 0xfe, 0x41, 0x61, 0xd7, 0xc3, 0x0f,
	0x0a, 0xbb, 0xde, 0xff, 0xa0, 0xb0, 0xeb, 0xfe, 0xa7, 0x6a, 0xd4, 0x7f, 0x50, 0x2b, 0x35, 0xa8,
	0xc3, 0x49, 0x10, 0xe0, 0x52, 0x5d, 0xd8, 0x26, 0x08, 0xf0, 0x0a, 0x0d, 0xdc, 0xa2, 0x1f, 0xd0,
	0x86, 0x6d, 0x91, 0xa0, 0x18, 0x6d, 0x97, 0xfd, 0x6a, 0x8d, 0x96, 0xc9, 0x3a, 0x0f, 0xff, 0x1b,
	0xac, 0xed, 0x1f, 0xd8, 0xaa, 0x7b, 0xe4, 0x87, 0x92, 0x67, 0xfe, 0x17, 0x00, 0x00, 0xff, 0xff,
	0xb0, 0xdc, 0x4c, 0xb2, 0xb6, 0x27, 0x00, 0x00,
}

func (this *LookupCnameRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupCnameRequest)
	if !ok {
		that2, ok := that.(LookupCnameRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Cname != that1.Cname {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	return true
}
func (this *DeleteTenantRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteTenantRequest)
	if !ok {
		that2, ok := that.(DeleteTenantRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	if this.Feedback != that1.Feedback {
		return false
	}
	return true
}
func (this *DisableTenantResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DisableTenantResponse)
	if !ok {
		that2, ok := that.(DisableTenantResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.JobId != that1.JobId {
		return false
	}
	return true
}
func (this *StatusResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StatusResponse)
	if !ok {
		that2, ok := that.(StatusResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *EscalationDocResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EscalationDocResp)
	if !ok {
		that2, ok := that.(EscalationDocResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Url != that1.Url {
		return false
	}
	return true
}
func (this *TenantSettingsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TenantSettingsResponse)
	if !ok {
		that2, ok := that.(TenantSettingsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.CompanyName != that1.CompanyName {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	if this.OtpEnabled != that1.OtpEnabled {
		return false
	}
	if this.SsoEnabled != that1.SsoEnabled {
		return false
	}
	if this.OtpStatus != that1.OtpStatus {
		return false
	}
	if !this.MaxCredentialsExpiry.Equal(that1.MaxCredentialsExpiry) {
		return false
	}
	if this.ActivePlanTransitionId != that1.ActivePlanTransitionId {
		return false
	}
	if this.OriginalTenant != that1.OriginalTenant {
		return false
	}
	if this.ScimEnabled != that1.ScimEnabled {
		return false
	}
	return true
}
func (this *UpdateTenantSettingsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateTenantSettingsResponse)
	if !ok {
		that2, ok := that.(UpdateTenantSettingsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OtpEnabled != that1.OtpEnabled {
		return false
	}
	if this.SsoEnabled != that1.SsoEnabled {
		return false
	}
	if this.OtpStatus != that1.OtpStatus {
		return false
	}
	if !this.MaxCredentialsExpiry.Equal(that1.MaxCredentialsExpiry) {
		return false
	}
	if len(this.ValidationErrors) != len(that1.ValidationErrors) {
		return false
	}
	for i := range this.ValidationErrors {
		if !this.ValidationErrors[i].Equal(that1.ValidationErrors[i]) {
			return false
		}
	}
	if this.ScimEnabled != that1.ScimEnabled {
		return false
	}
	return true
}
func (this *ValidationErrorField) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ValidationErrorField)
	if !ok {
		that2, ok := that.(ValidationErrorField)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ErrorField != that1.ErrorField {
		return false
	}
	if this.ErrorMessage != that1.ErrorMessage {
		return false
	}
	return true
}
func (this *UpdateTenantSettingsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateTenantSettingsRequest)
	if !ok {
		that2, ok := that.(UpdateTenantSettingsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OtpEnabled != that1.OtpEnabled {
		return false
	}
	if !this.MaxCredentialsExpiry.Equal(that1.MaxCredentialsExpiry) {
		return false
	}
	return true
}
func (this *CreateDebugUserRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateDebugUserRequest)
	if !ok {
		that2, ok := that.(CreateDebugUserRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.NsRoles) != len(that1.NsRoles) {
		return false
	}
	for i := range this.NsRoles {
		if !this.NsRoles[i].Equal(that1.NsRoles[i]) {
			return false
		}
	}
	return true
}
func (this *DebugUser) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DebugUser)
	if !ok {
		that2, ok := that.(DebugUser)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Enabled != that1.Enabled {
		return false
	}
	if this.FirstName != that1.FirstName {
		return false
	}
	if this.LastName != that1.LastName {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	return true
}
func (this *GetPasswordPolicyRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetPasswordPolicyRequest)
	if !ok {
		that2, ok := that.(GetPasswordPolicyRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RealmId != that1.RealmId {
		return false
	}
	return true
}
func (this *PasswordPolicyPublicAccess) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PasswordPolicyPublicAccess)
	if !ok {
		that2, ok := that.(PasswordPolicyPublicAccess)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Digits != that1.Digits {
		return false
	}
	if this.LowercaseCharacters != that1.LowercaseCharacters {
		return false
	}
	if this.UppercaseCharacters != that1.UppercaseCharacters {
		return false
	}
	if this.SpecialCharacters != that1.SpecialCharacters {
		return false
	}
	if this.NotUsername != that1.NotUsername {
		return false
	}
	if this.NotRecentlyUsed != that1.NotRecentlyUsed {
		return false
	}
	if this.MinimumLength != that1.MinimumLength {
		return false
	}
	return true
}
func (this *GetLoginEventsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetLoginEventsRequest)
	if !ok {
		that2, ok := that.(GetLoginEventsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.First != that1.First {
		return false
	}
	if this.Max != that1.Max {
		return false
	}
	return true
}
func (this *GetLoginEventsInTimeFrameRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetLoginEventsInTimeFrameRequest)
	if !ok {
		that2, ok := that.(GetLoginEventsInTimeFrameRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.First != that1.First {
		return false
	}
	if this.Max != that1.Max {
		return false
	}
	if !this.Start.Equal(that1.Start) {
		return false
	}
	if !this.End.Equal(that1.End) {
		return false
	}
	return true
}
func (this *LoginEvent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoginEvent)
	if !ok {
		that2, ok := that.(LoginEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Time.Equal(that1.Time) {
		return false
	}
	if this.SessionId != that1.SessionId {
		return false
	}
	if this.IpAddress != that1.IpAddress {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	if this.AuthMethod != that1.AuthMethod {
		return false
	}
	if this.Username != that1.Username {
		return false
	}
	return true
}
func (this *LoginEvents) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoginEvents)
	if !ok {
		that2, ok := that.(LoginEvents)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.LoginEvents) != len(that1.LoginEvents) {
		return false
	}
	for i := range this.LoginEvents {
		if !this.LoginEvents[i].Equal(that1.LoginEvents[i]) {
			return false
		}
	}
	return true
}
func (this *LoginEventsMap) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoginEventsMap)
	if !ok {
		that2, ok := that.(LoginEventsMap)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.LoginEventsMap) != len(that1.LoginEventsMap) {
		return false
	}
	for i := range this.LoginEventsMap {
		if !this.LoginEventsMap[i].Equal(that1.LoginEventsMap[i]) {
			return false
		}
	}
	return true
}
func (this *User) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User)
	if !ok {
		that2, ok := that.(User)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	return true
}
func (this *UserList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserList)
	if !ok {
		that2, ok := that.(UserList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Users) != len(that1.Users) {
		return false
	}
	for i := range this.Users {
		if !this.Users[i].Equal(that1.Users[i]) {
			return false
		}
	}
	return true
}
func (this *AssignDomainOwnerRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AssignDomainOwnerRequest)
	if !ok {
		that2, ok := that.(AssignDomainOwnerRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	return true
}
func (this *UnassignDomainOwnerRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UnassignDomainOwnerRequest)
	if !ok {
		that2, ok := that.(UnassignDomainOwnerRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	return true
}
func (this *UpdateImageRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateImageRequest)
	if !ok {
		that2, ok := that.(UpdateImageRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Image, that1.Image) {
		return false
	}
	if this.ContentType != that1.ContentType {
		return false
	}
	return true
}
func (this *LastLoginMap) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LastLoginMap)
	if !ok {
		that2, ok := that.(LastLoginMap)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.LastLoginMap) != len(that1.LastLoginMap) {
		return false
	}
	for i := range this.LastLoginMap {
		if !this.LastLoginMap[i].Equal(that1.LastLoginMap[i]) {
			return false
		}
	}
	return true
}
func (this *SupportInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SupportInfo)
	if !ok {
		that2, ok := that.(SupportInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SupportEmailAddress != that1.SupportEmailAddress {
		return false
	}
	return true
}
func (this *LookupCnameRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tenant.LookupCnameRequest{")
	s = append(s, "Cname: "+fmt.Sprintf("%#v", this.Cname)+",\n")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteTenantRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&tenant.DeleteTenantRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Email: "+fmt.Sprintf("%#v", this.Email)+",\n")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "Feedback: "+fmt.Sprintf("%#v", this.Feedback)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DisableTenantResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tenant.DisableTenantResponse{")
	s = append(s, "JobId: "+fmt.Sprintf("%#v", this.JobId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StatusResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&tenant.StatusResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EscalationDocResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tenant.EscalationDocResp{")
	s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TenantSettingsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&tenant.TenantSettingsResponse{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "CompanyName: "+fmt.Sprintf("%#v", this.CompanyName)+",\n")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	s = append(s, "OtpEnabled: "+fmt.Sprintf("%#v", this.OtpEnabled)+",\n")
	s = append(s, "SsoEnabled: "+fmt.Sprintf("%#v", this.SsoEnabled)+",\n")
	s = append(s, "OtpStatus: "+fmt.Sprintf("%#v", this.OtpStatus)+",\n")
	if this.MaxCredentialsExpiry != nil {
		s = append(s, "MaxCredentialsExpiry: "+fmt.Sprintf("%#v", this.MaxCredentialsExpiry)+",\n")
	}
	s = append(s, "ActivePlanTransitionId: "+fmt.Sprintf("%#v", this.ActivePlanTransitionId)+",\n")
	s = append(s, "OriginalTenant: "+fmt.Sprintf("%#v", this.OriginalTenant)+",\n")
	s = append(s, "ScimEnabled: "+fmt.Sprintf("%#v", this.ScimEnabled)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateTenantSettingsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&tenant.UpdateTenantSettingsResponse{")
	s = append(s, "OtpEnabled: "+fmt.Sprintf("%#v", this.OtpEnabled)+",\n")
	s = append(s, "SsoEnabled: "+fmt.Sprintf("%#v", this.SsoEnabled)+",\n")
	s = append(s, "OtpStatus: "+fmt.Sprintf("%#v", this.OtpStatus)+",\n")
	if this.MaxCredentialsExpiry != nil {
		s = append(s, "MaxCredentialsExpiry: "+fmt.Sprintf("%#v", this.MaxCredentialsExpiry)+",\n")
	}
	if this.ValidationErrors != nil {
		s = append(s, "ValidationErrors: "+fmt.Sprintf("%#v", this.ValidationErrors)+",\n")
	}
	s = append(s, "ScimEnabled: "+fmt.Sprintf("%#v", this.ScimEnabled)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ValidationErrorField) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tenant.ValidationErrorField{")
	s = append(s, "ErrorField: "+fmt.Sprintf("%#v", this.ErrorField)+",\n")
	s = append(s, "ErrorMessage: "+fmt.Sprintf("%#v", this.ErrorMessage)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateTenantSettingsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tenant.UpdateTenantSettingsRequest{")
	s = append(s, "OtpEnabled: "+fmt.Sprintf("%#v", this.OtpEnabled)+",\n")
	if this.MaxCredentialsExpiry != nil {
		s = append(s, "MaxCredentialsExpiry: "+fmt.Sprintf("%#v", this.MaxCredentialsExpiry)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateDebugUserRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tenant.CreateDebugUserRequest{")
	if this.NsRoles != nil {
		s = append(s, "NsRoles: "+fmt.Sprintf("%#v", this.NsRoles)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DebugUser) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&tenant.DebugUser{")
	s = append(s, "Enabled: "+fmt.Sprintf("%#v", this.Enabled)+",\n")
	s = append(s, "FirstName: "+fmt.Sprintf("%#v", this.FirstName)+",\n")
	s = append(s, "LastName: "+fmt.Sprintf("%#v", this.LastName)+",\n")
	s = append(s, "Email: "+fmt.Sprintf("%#v", this.Email)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetPasswordPolicyRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tenant.GetPasswordPolicyRequest{")
	s = append(s, "RealmId: "+fmt.Sprintf("%#v", this.RealmId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PasswordPolicyPublicAccess) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&tenant.PasswordPolicyPublicAccess{")
	s = append(s, "Digits: "+fmt.Sprintf("%#v", this.Digits)+",\n")
	s = append(s, "LowercaseCharacters: "+fmt.Sprintf("%#v", this.LowercaseCharacters)+",\n")
	s = append(s, "UppercaseCharacters: "+fmt.Sprintf("%#v", this.UppercaseCharacters)+",\n")
	s = append(s, "SpecialCharacters: "+fmt.Sprintf("%#v", this.SpecialCharacters)+",\n")
	s = append(s, "NotUsername: "+fmt.Sprintf("%#v", this.NotUsername)+",\n")
	s = append(s, "NotRecentlyUsed: "+fmt.Sprintf("%#v", this.NotRecentlyUsed)+",\n")
	s = append(s, "MinimumLength: "+fmt.Sprintf("%#v", this.MinimumLength)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetLoginEventsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tenant.GetLoginEventsRequest{")
	s = append(s, "First: "+fmt.Sprintf("%#v", this.First)+",\n")
	s = append(s, "Max: "+fmt.Sprintf("%#v", this.Max)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetLoginEventsInTimeFrameRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&tenant.GetLoginEventsInTimeFrameRequest{")
	s = append(s, "First: "+fmt.Sprintf("%#v", this.First)+",\n")
	s = append(s, "Max: "+fmt.Sprintf("%#v", this.Max)+",\n")
	if this.Start != nil {
		s = append(s, "Start: "+fmt.Sprintf("%#v", this.Start)+",\n")
	}
	if this.End != nil {
		s = append(s, "End: "+fmt.Sprintf("%#v", this.End)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LoginEvent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&tenant.LoginEvent{")
	if this.Time != nil {
		s = append(s, "Time: "+fmt.Sprintf("%#v", this.Time)+",\n")
	}
	s = append(s, "SessionId: "+fmt.Sprintf("%#v", this.SessionId)+",\n")
	s = append(s, "IpAddress: "+fmt.Sprintf("%#v", this.IpAddress)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "AuthMethod: "+fmt.Sprintf("%#v", this.AuthMethod)+",\n")
	s = append(s, "Username: "+fmt.Sprintf("%#v", this.Username)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LoginEvents) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tenant.LoginEvents{")
	if this.LoginEvents != nil {
		s = append(s, "LoginEvents: "+fmt.Sprintf("%#v", this.LoginEvents)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LoginEventsMap) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tenant.LoginEventsMap{")
	keysForLoginEventsMap := make([]string, 0, len(this.LoginEventsMap))
	for k, _ := range this.LoginEventsMap {
		keysForLoginEventsMap = append(keysForLoginEventsMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLoginEventsMap)
	mapStringForLoginEventsMap := "map[string]*LoginEvents{"
	for _, k := range keysForLoginEventsMap {
		mapStringForLoginEventsMap += fmt.Sprintf("%#v: %#v,", k, this.LoginEventsMap[k])
	}
	mapStringForLoginEventsMap += "}"
	if this.LoginEventsMap != nil {
		s = append(s, "LoginEventsMap: "+mapStringForLoginEventsMap+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *User) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tenant.User{")
	s = append(s, "Email: "+fmt.Sprintf("%#v", this.Email)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UserList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tenant.UserList{")
	if this.Users != nil {
		s = append(s, "Users: "+fmt.Sprintf("%#v", this.Users)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AssignDomainOwnerRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tenant.AssignDomainOwnerRequest{")
	s = append(s, "Email: "+fmt.Sprintf("%#v", this.Email)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UnassignDomainOwnerRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tenant.UnassignDomainOwnerRequest{")
	s = append(s, "Email: "+fmt.Sprintf("%#v", this.Email)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateImageRequest) goString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tenant.UpdateImageRequest{")
	s = append(s, "Image: "+fmt.Sprintf("%#v", this.Image)+",\n")
	s = append(s, "ContentType: "+fmt.Sprintf("%#v", this.ContentType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LastLoginMap) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tenant.LastLoginMap{")
	keysForLastLoginMap := make([]string, 0, len(this.LastLoginMap))
	for k, _ := range this.LastLoginMap {
		keysForLastLoginMap = append(keysForLastLoginMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLastLoginMap)
	mapStringForLastLoginMap := "map[string]*types.Timestamp{"
	for _, k := range keysForLastLoginMap {
		mapStringForLastLoginMap += fmt.Sprintf("%#v: %#v,", k, this.LastLoginMap[k])
	}
	mapStringForLastLoginMap += "}"
	if this.LastLoginMap != nil {
		s = append(s, "LastLoginMap: "+mapStringForLastLoginMap+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SupportInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tenant.SupportInfo{")
	s = append(s, "SupportEmailAddress: "+fmt.Sprintf("%#v", this.SupportEmailAddress)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCustomApi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CustomAPIClient is the client API for CustomAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomAPIClient interface {
	// Lookup cname
	//
	// x-displayName: "Lookup cname"
	// Checks if a cname is available.
	LookupCname(ctx context.Context, in *LookupCnameRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// Tenant Settings
	//
	// x-displayName: "Tenant Settings"
	// Receive current tenant settings.
	GetTenantSettings(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TenantSettingsResponse, error)
	// Tenant Settings
	//
	// x-displayName: "Tenant Settings"
	// Tenant settings
	UpdateTenantSettings(ctx context.Context, in *UpdateTenantSettingsRequest, opts ...grpc.CallOption) (*UpdateTenantSettingsResponse, error)
	// Enable tenant level OTP
	//
	// x-displayName: "Enable tenant level OTP"
	// Enable tenant level OTP enables OTP on tenant-level. It enforces each user within a tenant to enable OTP.
	EnableTenantLevelOTP(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// Disable tenant level OTP
	//
	// x-displayName: "Disable tenant level OTP"
	// Disable tenant level OTP disables OTP on tenant-level. After it's disabled it's up to user whether to enable OTP.
	DisableTenantLevelOTP(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// Delete Tenant
	//
	// x-displayName: "Delete Tenant"
	// Request to mark Tenant for deletion queue, after approve it will completely removed from the system.
	DeleteTenant(ctx context.Context, in *DeleteTenantRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// GetDebugUser
	//
	// x-displayName: "GetDebugUser"
	// GetDebugUser returns information about tenant's debug user
	// Deprecated: this and other debugUser RPCs are deprecated
	GetDebugUser(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DebugUser, error)
	// DeleteDebugUser
	//
	// x-displayName: "DeleteDebugUser"
	// DeleteDebugUser deletes tenant's debug user.
	// Deprecated: this and other debugUser RPCs are deprecated
	DeleteDebugUser(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// CreateDebugUser
	//
	// x-displayName: "CreateDebugUser"
	// CreateDebugUser creates tenant's debug user. Debug user can be disabled or deleter later.
	// Deprecated: this and other debugUser RPCs are deprecated
	CreateDebugUser(ctx context.Context, in *CreateDebugUserRequest, opts ...grpc.CallOption) (*Empty, error)
	// GetIDMSettings
	//
	// x-displayName: "GetIDMSettings"
	// GetIDMSettings returns IDM settings for tenant. IDM settings contains info like password policy,
	// brute-force detection policy, etc...
	GetIDMSettings(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*tenant_configuration.GlobalSpecType, error)
	// UpdateIDMSettings
	//
	// x-displayName: "UpdateIDMSettings"
	// UpdateIDMSettings allows to adjust IDM settings for tenant, like password policy, brute-force detection policy, etc...
	UpdateIDMSettings(ctx context.Context, in *tenant_configuration.GlobalSpecType, opts ...grpc.CallOption) (*Empty, error)
	// GetPasswordPolicy
	//
	// x-displayName: "GetPasswordPolicy"
	// GetPasswordPolicy returns password policy for tenant.
	GetPasswordPolicy(ctx context.Context, in *GetPasswordPolicyRequest, opts ...grpc.CallOption) (*PasswordPolicyPublicAccess, error)
	// GetLoginEvents
	//
	// x-displayName: "GetLoginEvents"
	// GetLoginEvents returns login events for specified in config period of time. It consider all users within current tenant.
	// Login events are extracted directly from IDM.
	GetLoginEvents(ctx context.Context, in *GetLoginEventsRequest, opts ...grpc.CallOption) (*LoginEventsMap, error)
	// GetLastLoginMap
	//
	// x-displayName: "GetLastLoginMap"
	// GetLastLoginMap returns last login timestamp for each user within a tenant.
	GetLastLoginMap(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*LastLoginMap, error)
	// GetLoginEventsInTimeFrame
	//
	// x-displayName: "GetLoginEventsInTimeFrame"
	// GetLoginEventsInTimeFrame returns login events for specified period of time. It consider all users specified by context tenant.
	GetLoginEventsInTimeFrame(ctx context.Context, in *GetLoginEventsInTimeFrameRequest, opts ...grpc.CallOption) (*LoginEventsMap, error)
	// ListInactiveUsers
	//
	// x-displayName: "ListInactiveUsers"
	// Returns list of users for which no login events was found for last 90 days of time.
	// It consider all users within current tenant.
	ListInactiveUsers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UserList, error)
	// Tenant escalation document
	//
	// x-displayName: "Tenant escalation document"
	// Receive current tenant escalation document.
	GetTenantEscalationDoc(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	// Assign domain owner
	//
	// x-displayName: "Assign domain owner"
	// Assign domain owner tries to assign domain owner to user in the request. It checks that requester is domain owner as well.
	// It implies such steps:
	// 1) mark user as domain owner
	// 2) if user is SSO
	//  - mark user as volterra managed
	//  - send update password email
	// 3) set admin roles in system, shared, * namespaces
	// NOTE: previous roles (which was explicitly assigned to this user) will be deleted
	AssignDomainOwner(ctx context.Context, in *AssignDomainOwnerRequest, opts ...grpc.CallOption) (*Empty, error)
	// Unassign domain owner
	//
	// x-displayName: "Unassign domain owner"
	// Unassign domain owner tries to remove domain owner privilege from user in the request.
	// It checks that requester is domain owner.
	// It implies such steps:
	// 1) remove domain owner boolean flag
	// 2) if tenant has SSO enabled:
	//  - mark user as SSO
	//  - delete password credential
	//  - delete OTP credential (if exists)
	// NOTE: previously granted roles (including admin roles) will be retained
	UnassignDomainOwner(ctx context.Context, in *UnassignDomainOwnerRequest, opts ...grpc.CallOption) (*Empty, error)
	// Tenant profile image.
	//
	// x-displayName: "Tenant profile image"
	// Receive current tenant profile image.
	GetImage(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	// Tenant logo.
	//
	// x-displayName: "Tenant logo"
	// Receive current tenant logo.
	GetLogo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	// Tenant favicon.
	//
	// x-displayName: "Tenant favicon"
	// Receive current tenant favicon.
	GetFavIcon(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	// Update tenant profile image.
	//
	// x-displayName: "Update tenant profile image"
	// Uploads new profile image for the tenant entity.
	UpdateImage(ctx context.Context, in *UpdateImageRequest, opts ...grpc.CallOption) (*Empty, error)
	// Delete tenant profile image.
	//
	// x-displayName: "Delete tenant profile image"
	// Delete profile image for the tenant entity.
	DeleteImage(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// Get Support Info for tenant
	//
	// x-displayName: "Support Info"
	// Receive support information for tenant
	GetSupportInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SupportInfo, error)
}

type customAPIClient struct {
	cc *grpc.ClientConn
}

func NewCustomAPIClient(cc *grpc.ClientConn) CustomAPIClient {
	return &customAPIClient{cc}
}

func (c *customAPIClient) LookupCname(ctx context.Context, in *LookupCnameRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.tenant.CustomAPI/LookupCname", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) GetTenantSettings(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TenantSettingsResponse, error) {
	out := new(TenantSettingsResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.tenant.CustomAPI/GetTenantSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) UpdateTenantSettings(ctx context.Context, in *UpdateTenantSettingsRequest, opts ...grpc.CallOption) (*UpdateTenantSettingsResponse, error) {
	out := new(UpdateTenantSettingsResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.tenant.CustomAPI/UpdateTenantSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) EnableTenantLevelOTP(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ves.io.schema.tenant.CustomAPI/EnableTenantLevelOTP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) DisableTenantLevelOTP(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ves.io.schema.tenant.CustomAPI/DisableTenantLevelOTP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) DeleteTenant(ctx context.Context, in *DeleteTenantRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.tenant.CustomAPI/DeleteTenant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) GetDebugUser(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DebugUser, error) {
	out := new(DebugUser)
	err := c.cc.Invoke(ctx, "/ves.io.schema.tenant.CustomAPI/GetDebugUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) DeleteDebugUser(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ves.io.schema.tenant.CustomAPI/DeleteDebugUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) CreateDebugUser(ctx context.Context, in *CreateDebugUserRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ves.io.schema.tenant.CustomAPI/CreateDebugUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) GetIDMSettings(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*tenant_configuration.GlobalSpecType, error) {
	out := new(tenant_configuration.GlobalSpecType)
	err := c.cc.Invoke(ctx, "/ves.io.schema.tenant.CustomAPI/GetIDMSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) UpdateIDMSettings(ctx context.Context, in *tenant_configuration.GlobalSpecType, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ves.io.schema.tenant.CustomAPI/UpdateIDMSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) GetPasswordPolicy(ctx context.Context, in *GetPasswordPolicyRequest, opts ...grpc.CallOption) (*PasswordPolicyPublicAccess, error) {
	out := new(PasswordPolicyPublicAccess)
	err := c.cc.Invoke(ctx, "/ves.io.schema.tenant.CustomAPI/GetPasswordPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) GetLoginEvents(ctx context.Context, in *GetLoginEventsRequest, opts ...grpc.CallOption) (*LoginEventsMap, error) {
	out := new(LoginEventsMap)
	err := c.cc.Invoke(ctx, "/ves.io.schema.tenant.CustomAPI/GetLoginEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) GetLastLoginMap(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*LastLoginMap, error) {
	out := new(LastLoginMap)
	err := c.cc.Invoke(ctx, "/ves.io.schema.tenant.CustomAPI/GetLastLoginMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) GetLoginEventsInTimeFrame(ctx context.Context, in *GetLoginEventsInTimeFrameRequest, opts ...grpc.CallOption) (*LoginEventsMap, error) {
	out := new(LoginEventsMap)
	err := c.cc.Invoke(ctx, "/ves.io.schema.tenant.CustomAPI/GetLoginEventsInTimeFrame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) ListInactiveUsers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UserList, error) {
	out := new(UserList)
	err := c.cc.Invoke(ctx, "/ves.io.schema.tenant.CustomAPI/ListInactiveUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) GetTenantEscalationDoc(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, "/ves.io.schema.tenant.CustomAPI/GetTenantEscalationDoc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) AssignDomainOwner(ctx context.Context, in *AssignDomainOwnerRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ves.io.schema.tenant.CustomAPI/AssignDomainOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) UnassignDomainOwner(ctx context.Context, in *UnassignDomainOwnerRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ves.io.schema.tenant.CustomAPI/UnassignDomainOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) GetImage(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, "/ves.io.schema.tenant.CustomAPI/GetImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) GetLogo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, "/ves.io.schema.tenant.CustomAPI/GetLogo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) GetFavIcon(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, "/ves.io.schema.tenant.CustomAPI/GetFavIcon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) UpdateImage(ctx context.Context, in *UpdateImageRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ves.io.schema.tenant.CustomAPI/UpdateImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) DeleteImage(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ves.io.schema.tenant.CustomAPI/DeleteImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) GetSupportInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SupportInfo, error) {
	out := new(SupportInfo)
	err := c.cc.Invoke(ctx, "/ves.io.schema.tenant.CustomAPI/GetSupportInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomAPIServer is the server API for CustomAPI service.
type CustomAPIServer interface {
	// Lookup cname
	//
	// x-displayName: "Lookup cname"
	// Checks if a cname is available.
	LookupCname(context.Context, *LookupCnameRequest) (*StatusResponse, error)
	// Tenant Settings
	//
	// x-displayName: "Tenant Settings"
	// Receive current tenant settings.
	GetTenantSettings(context.Context, *Empty) (*TenantSettingsResponse, error)
	// Tenant Settings
	//
	// x-displayName: "Tenant Settings"
	// Tenant settings
	UpdateTenantSettings(context.Context, *UpdateTenantSettingsRequest) (*UpdateTenantSettingsResponse, error)
	// Enable tenant level OTP
	//
	// x-displayName: "Enable tenant level OTP"
	// Enable tenant level OTP enables OTP on tenant-level. It enforces each user within a tenant to enable OTP.
	EnableTenantLevelOTP(context.Context, *Empty) (*Empty, error)
	// Disable tenant level OTP
	//
	// x-displayName: "Disable tenant level OTP"
	// Disable tenant level OTP disables OTP on tenant-level. After it's disabled it's up to user whether to enable OTP.
	DisableTenantLevelOTP(context.Context, *Empty) (*Empty, error)
	// Delete Tenant
	//
	// x-displayName: "Delete Tenant"
	// Request to mark Tenant for deletion queue, after approve it will completely removed from the system.
	DeleteTenant(context.Context, *DeleteTenantRequest) (*StatusResponse, error)
	// GetDebugUser
	//
	// x-displayName: "GetDebugUser"
	// GetDebugUser returns information about tenant's debug user
	// Deprecated: this and other debugUser RPCs are deprecated
	GetDebugUser(context.Context, *Empty) (*DebugUser, error)
	// DeleteDebugUser
	//
	// x-displayName: "DeleteDebugUser"
	// DeleteDebugUser deletes tenant's debug user.
	// Deprecated: this and other debugUser RPCs are deprecated
	DeleteDebugUser(context.Context, *Empty) (*Empty, error)
	// CreateDebugUser
	//
	// x-displayName: "CreateDebugUser"
	// CreateDebugUser creates tenant's debug user. Debug user can be disabled or deleter later.
	// Deprecated: this and other debugUser RPCs are deprecated
	CreateDebugUser(context.Context, *CreateDebugUserRequest) (*Empty, error)
	// GetIDMSettings
	//
	// x-displayName: "GetIDMSettings"
	// GetIDMSettings returns IDM settings for tenant. IDM settings contains info like password policy,
	// brute-force detection policy, etc...
	GetIDMSettings(context.Context, *Empty) (*tenant_configuration.GlobalSpecType, error)
	// UpdateIDMSettings
	//
	// x-displayName: "UpdateIDMSettings"
	// UpdateIDMSettings allows to adjust IDM settings for tenant, like password policy, brute-force detection policy, etc...
	UpdateIDMSettings(context.Context, *tenant_configuration.GlobalSpecType) (*Empty, error)
	// GetPasswordPolicy
	//
	// x-displayName: "GetPasswordPolicy"
	// GetPasswordPolicy returns password policy for tenant.
	GetPasswordPolicy(context.Context, *GetPasswordPolicyRequest) (*PasswordPolicyPublicAccess, error)
	// GetLoginEvents
	//
	// x-displayName: "GetLoginEvents"
	// GetLoginEvents returns login events for specified in config period of time. It consider all users within current tenant.
	// Login events are extracted directly from IDM.
	GetLoginEvents(context.Context, *GetLoginEventsRequest) (*LoginEventsMap, error)
	// GetLastLoginMap
	//
	// x-displayName: "GetLastLoginMap"
	// GetLastLoginMap returns last login timestamp for each user within a tenant.
	GetLastLoginMap(context.Context, *Empty) (*LastLoginMap, error)
	// GetLoginEventsInTimeFrame
	//
	// x-displayName: "GetLoginEventsInTimeFrame"
	// GetLoginEventsInTimeFrame returns login events for specified period of time. It consider all users specified by context tenant.
	GetLoginEventsInTimeFrame(context.Context, *GetLoginEventsInTimeFrameRequest) (*LoginEventsMap, error)
	// ListInactiveUsers
	//
	// x-displayName: "ListInactiveUsers"
	// Returns list of users for which no login events was found for last 90 days of time.
	// It consider all users within current tenant.
	ListInactiveUsers(context.Context, *Empty) (*UserList, error)
	// Tenant escalation document
	//
	// x-displayName: "Tenant escalation document"
	// Receive current tenant escalation document.
	GetTenantEscalationDoc(context.Context, *Empty) (*httpbody.HttpBody, error)
	// Assign domain owner
	//
	// x-displayName: "Assign domain owner"
	// Assign domain owner tries to assign domain owner to user in the request. It checks that requester is domain owner as well.
	// It implies such steps:
	// 1) mark user as domain owner
	// 2) if user is SSO
	//  - mark user as volterra managed
	//  - send update password email
	// 3) set admin roles in system, shared, * namespaces
	// NOTE: previous roles (which was explicitly assigned to this user) will be deleted
	AssignDomainOwner(context.Context, *AssignDomainOwnerRequest) (*Empty, error)
	// Unassign domain owner
	//
	// x-displayName: "Unassign domain owner"
	// Unassign domain owner tries to remove domain owner privilege from user in the request.
	// It checks that requester is domain owner.
	// It implies such steps:
	// 1) remove domain owner boolean flag
	// 2) if tenant has SSO enabled:
	//  - mark user as SSO
	//  - delete password credential
	//  - delete OTP credential (if exists)
	// NOTE: previously granted roles (including admin roles) will be retained
	UnassignDomainOwner(context.Context, *UnassignDomainOwnerRequest) (*Empty, error)
	// Tenant profile image.
	//
	// x-displayName: "Tenant profile image"
	// Receive current tenant profile image.
	GetImage(context.Context, *Empty) (*httpbody.HttpBody, error)
	// Tenant logo.
	//
	// x-displayName: "Tenant logo"
	// Receive current tenant logo.
	GetLogo(context.Context, *Empty) (*httpbody.HttpBody, error)
	// Tenant favicon.
	//
	// x-displayName: "Tenant favicon"
	// Receive current tenant favicon.
	GetFavIcon(context.Context, *Empty) (*httpbody.HttpBody, error)
	// Update tenant profile image.
	//
	// x-displayName: "Update tenant profile image"
	// Uploads new profile image for the tenant entity.
	UpdateImage(context.Context, *UpdateImageRequest) (*Empty, error)
	// Delete tenant profile image.
	//
	// x-displayName: "Delete tenant profile image"
	// Delete profile image for the tenant entity.
	DeleteImage(context.Context, *Empty) (*Empty, error)
	// Get Support Info for tenant
	//
	// x-displayName: "Support Info"
	// Receive support information for tenant
	GetSupportInfo(context.Context, *Empty) (*SupportInfo, error)
}

// UnimplementedCustomAPIServer can be embedded to have forward compatible implementations.
type UnimplementedCustomAPIServer struct {
}

func (*UnimplementedCustomAPIServer) LookupCname(ctx context.Context, req *LookupCnameRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupCname not implemented")
}
func (*UnimplementedCustomAPIServer) GetTenantSettings(ctx context.Context, req *Empty) (*TenantSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenantSettings not implemented")
}
func (*UnimplementedCustomAPIServer) UpdateTenantSettings(ctx context.Context, req *UpdateTenantSettingsRequest) (*UpdateTenantSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTenantSettings not implemented")
}
func (*UnimplementedCustomAPIServer) EnableTenantLevelOTP(ctx context.Context, req *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableTenantLevelOTP not implemented")
}
func (*UnimplementedCustomAPIServer) DisableTenantLevelOTP(ctx context.Context, req *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableTenantLevelOTP not implemented")
}
func (*UnimplementedCustomAPIServer) DeleteTenant(ctx context.Context, req *DeleteTenantRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTenant not implemented")
}
func (*UnimplementedCustomAPIServer) GetDebugUser(ctx context.Context, req *Empty) (*DebugUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDebugUser not implemented")
}
func (*UnimplementedCustomAPIServer) DeleteDebugUser(ctx context.Context, req *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDebugUser not implemented")
}
func (*UnimplementedCustomAPIServer) CreateDebugUser(ctx context.Context, req *CreateDebugUserRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDebugUser not implemented")
}
func (*UnimplementedCustomAPIServer) GetIDMSettings(ctx context.Context, req *Empty) (*tenant_configuration.GlobalSpecType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIDMSettings not implemented")
}
func (*UnimplementedCustomAPIServer) UpdateIDMSettings(ctx context.Context, req *tenant_configuration.GlobalSpecType) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIDMSettings not implemented")
}
func (*UnimplementedCustomAPIServer) GetPasswordPolicy(ctx context.Context, req *GetPasswordPolicyRequest) (*PasswordPolicyPublicAccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPasswordPolicy not implemented")
}
func (*UnimplementedCustomAPIServer) GetLoginEvents(ctx context.Context, req *GetLoginEventsRequest) (*LoginEventsMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoginEvents not implemented")
}
func (*UnimplementedCustomAPIServer) GetLastLoginMap(ctx context.Context, req *Empty) (*LastLoginMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastLoginMap not implemented")
}
func (*UnimplementedCustomAPIServer) GetLoginEventsInTimeFrame(ctx context.Context, req *GetLoginEventsInTimeFrameRequest) (*LoginEventsMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoginEventsInTimeFrame not implemented")
}
func (*UnimplementedCustomAPIServer) ListInactiveUsers(ctx context.Context, req *Empty) (*UserList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInactiveUsers not implemented")
}
func (*UnimplementedCustomAPIServer) GetTenantEscalationDoc(ctx context.Context, req *Empty) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenantEscalationDoc not implemented")
}
func (*UnimplementedCustomAPIServer) AssignDomainOwner(ctx context.Context, req *AssignDomainOwnerRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignDomainOwner not implemented")
}
func (*UnimplementedCustomAPIServer) UnassignDomainOwner(ctx context.Context, req *UnassignDomainOwnerRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnassignDomainOwner not implemented")
}
func (*UnimplementedCustomAPIServer) GetImage(ctx context.Context, req *Empty) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImage not implemented")
}
func (*UnimplementedCustomAPIServer) GetLogo(ctx context.Context, req *Empty) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogo not implemented")
}
func (*UnimplementedCustomAPIServer) GetFavIcon(ctx context.Context, req *Empty) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFavIcon not implemented")
}
func (*UnimplementedCustomAPIServer) UpdateImage(ctx context.Context, req *UpdateImageRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateImage not implemented")
}
func (*UnimplementedCustomAPIServer) DeleteImage(ctx context.Context, req *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteImage not implemented")
}
func (*UnimplementedCustomAPIServer) GetSupportInfo(ctx context.Context, req *Empty) (*SupportInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSupportInfo not implemented")
}

func RegisterCustomAPIServer(s *grpc.Server, srv CustomAPIServer) {
	s.RegisterService(&_CustomAPI_serviceDesc, srv)
}

func _CustomAPI_LookupCname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupCnameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).LookupCname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.tenant.CustomAPI/LookupCname",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).LookupCname(ctx, req.(*LookupCnameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_GetTenantSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).GetTenantSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.tenant.CustomAPI/GetTenantSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).GetTenantSettings(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_UpdateTenantSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTenantSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).UpdateTenantSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.tenant.CustomAPI/UpdateTenantSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).UpdateTenantSettings(ctx, req.(*UpdateTenantSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_EnableTenantLevelOTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).EnableTenantLevelOTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.tenant.CustomAPI/EnableTenantLevelOTP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).EnableTenantLevelOTP(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_DisableTenantLevelOTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).DisableTenantLevelOTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.tenant.CustomAPI/DisableTenantLevelOTP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).DisableTenantLevelOTP(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_DeleteTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).DeleteTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.tenant.CustomAPI/DeleteTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).DeleteTenant(ctx, req.(*DeleteTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_GetDebugUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).GetDebugUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.tenant.CustomAPI/GetDebugUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).GetDebugUser(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_DeleteDebugUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).DeleteDebugUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.tenant.CustomAPI/DeleteDebugUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).DeleteDebugUser(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_CreateDebugUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDebugUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).CreateDebugUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.tenant.CustomAPI/CreateDebugUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).CreateDebugUser(ctx, req.(*CreateDebugUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_GetIDMSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).GetIDMSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.tenant.CustomAPI/GetIDMSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).GetIDMSettings(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_UpdateIDMSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tenant_configuration.GlobalSpecType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).UpdateIDMSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.tenant.CustomAPI/UpdateIDMSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).UpdateIDMSettings(ctx, req.(*tenant_configuration.GlobalSpecType))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_GetPasswordPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPasswordPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).GetPasswordPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.tenant.CustomAPI/GetPasswordPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).GetPasswordPolicy(ctx, req.(*GetPasswordPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_GetLoginEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoginEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).GetLoginEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.tenant.CustomAPI/GetLoginEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).GetLoginEvents(ctx, req.(*GetLoginEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_GetLastLoginMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).GetLastLoginMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.tenant.CustomAPI/GetLastLoginMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).GetLastLoginMap(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_GetLoginEventsInTimeFrame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoginEventsInTimeFrameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).GetLoginEventsInTimeFrame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.tenant.CustomAPI/GetLoginEventsInTimeFrame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).GetLoginEventsInTimeFrame(ctx, req.(*GetLoginEventsInTimeFrameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_ListInactiveUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).ListInactiveUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.tenant.CustomAPI/ListInactiveUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).ListInactiveUsers(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_GetTenantEscalationDoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).GetTenantEscalationDoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.tenant.CustomAPI/GetTenantEscalationDoc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).GetTenantEscalationDoc(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_AssignDomainOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignDomainOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).AssignDomainOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.tenant.CustomAPI/AssignDomainOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).AssignDomainOwner(ctx, req.(*AssignDomainOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_UnassignDomainOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnassignDomainOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).UnassignDomainOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.tenant.CustomAPI/UnassignDomainOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).UnassignDomainOwner(ctx, req.(*UnassignDomainOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_GetImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).GetImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.tenant.CustomAPI/GetImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).GetImage(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_GetLogo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).GetLogo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.tenant.CustomAPI/GetLogo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).GetLogo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_GetFavIcon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).GetFavIcon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.tenant.CustomAPI/GetFavIcon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).GetFavIcon(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_UpdateImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).UpdateImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.tenant.CustomAPI/UpdateImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).UpdateImage(ctx, req.(*UpdateImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_DeleteImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).DeleteImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.tenant.CustomAPI/DeleteImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).DeleteImage(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_GetSupportInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).GetSupportInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.tenant.CustomAPI/GetSupportInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).GetSupportInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.tenant.CustomAPI",
	HandlerType: (*CustomAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LookupCname",
			Handler:    _CustomAPI_LookupCname_Handler,
		},
		{
			MethodName: "GetTenantSettings",
			Handler:    _CustomAPI_GetTenantSettings_Handler,
		},
		{
			MethodName: "UpdateTenantSettings",
			Handler:    _CustomAPI_UpdateTenantSettings_Handler,
		},
		{
			MethodName: "EnableTenantLevelOTP",
			Handler:    _CustomAPI_EnableTenantLevelOTP_Handler,
		},
		{
			MethodName: "DisableTenantLevelOTP",
			Handler:    _CustomAPI_DisableTenantLevelOTP_Handler,
		},
		{
			MethodName: "DeleteTenant",
			Handler:    _CustomAPI_DeleteTenant_Handler,
		},
		{
			MethodName: "GetDebugUser",
			Handler:    _CustomAPI_GetDebugUser_Handler,
		},
		{
			MethodName: "DeleteDebugUser",
			Handler:    _CustomAPI_DeleteDebugUser_Handler,
		},
		{
			MethodName: "CreateDebugUser",
			Handler:    _CustomAPI_CreateDebugUser_Handler,
		},
		{
			MethodName: "GetIDMSettings",
			Handler:    _CustomAPI_GetIDMSettings_Handler,
		},
		{
			MethodName: "UpdateIDMSettings",
			Handler:    _CustomAPI_UpdateIDMSettings_Handler,
		},
		{
			MethodName: "GetPasswordPolicy",
			Handler:    _CustomAPI_GetPasswordPolicy_Handler,
		},
		{
			MethodName: "GetLoginEvents",
			Handler:    _CustomAPI_GetLoginEvents_Handler,
		},
		{
			MethodName: "GetLastLoginMap",
			Handler:    _CustomAPI_GetLastLoginMap_Handler,
		},
		{
			MethodName: "GetLoginEventsInTimeFrame",
			Handler:    _CustomAPI_GetLoginEventsInTimeFrame_Handler,
		},
		{
			MethodName: "ListInactiveUsers",
			Handler:    _CustomAPI_ListInactiveUsers_Handler,
		},
		{
			MethodName: "GetTenantEscalationDoc",
			Handler:    _CustomAPI_GetTenantEscalationDoc_Handler,
		},
		{
			MethodName: "AssignDomainOwner",
			Handler:    _CustomAPI_AssignDomainOwner_Handler,
		},
		{
			MethodName: "UnassignDomainOwner",
			Handler:    _CustomAPI_UnassignDomainOwner_Handler,
		},
		{
			MethodName: "GetImage",
			Handler:    _CustomAPI_GetImage_Handler,
		},
		{
			MethodName: "GetLogo",
			Handler:    _CustomAPI_GetLogo_Handler,
		},
		{
			MethodName: "GetFavIcon",
			Handler:    _CustomAPI_GetFavIcon_Handler,
		},
		{
			MethodName: "UpdateImage",
			Handler:    _CustomAPI_UpdateImage_Handler,
		},
		{
			MethodName: "DeleteImage",
			Handler:    _CustomAPI_DeleteImage_Handler,
		},
		{
			MethodName: "GetSupportInfo",
			Handler:    _CustomAPI_GetSupportInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/tenant/custom_api.proto",
}

func (m *LookupCnameRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupCnameRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupCnameRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintCustomApi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Cname) > 0 {
		i -= len(m.Cname)
		copy(dAtA[i:], m.Cname)
		i = encodeVarintCustomApi(dAtA, i, uint64(len(m.Cname)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteTenantRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteTenantRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteTenantRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Feedback) > 0 {
		i -= len(m.Feedback)
		copy(dAtA[i:], m.Feedback)
		i = encodeVarintCustomApi(dAtA, i, uint64(len(m.Feedback)))
		i--
		dAtA[i] = 0x22
	}
	if m.Reason != 0 {
		i = encodeVarintCustomApi(dAtA, i, uint64(m.Reason))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintCustomApi(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCustomApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DisableTenantResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DisableTenantResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DisableTenantResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.JobId) > 0 {
		i -= len(m.JobId)
		copy(dAtA[i:], m.JobId)
		i = encodeVarintCustomApi(dAtA, i, uint64(len(m.JobId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *EscalationDocResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EscalationDocResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EscalationDocResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintCustomApi(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TenantSettingsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TenantSettingsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TenantSettingsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ScimEnabled {
		i--
		if m.ScimEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if len(m.OriginalTenant) > 0 {
		i -= len(m.OriginalTenant)
		copy(dAtA[i:], m.OriginalTenant)
		i = encodeVarintCustomApi(dAtA, i, uint64(len(m.OriginalTenant)))
		i--
		dAtA[i] = 0x62
	}
	if m.State != 0 {
		i = encodeVarintCustomApi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x50
	}
	if len(m.ActivePlanTransitionId) > 0 {
		i -= len(m.ActivePlanTransitionId)
		copy(dAtA[i:], m.ActivePlanTransitionId)
		i = encodeVarintCustomApi(dAtA, i, uint64(len(m.ActivePlanTransitionId)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintCustomApi(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.CompanyName) > 0 {
		i -= len(m.CompanyName)
		copy(dAtA[i:], m.CompanyName)
		i = encodeVarintCustomApi(dAtA, i, uint64(len(m.CompanyName)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCustomApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x32
	}
	if m.MaxCredentialsExpiry != nil {
		{
			size, err := m.MaxCredentialsExpiry.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCustomApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.OtpStatus != 0 {
		i = encodeVarintCustomApi(dAtA, i, uint64(m.OtpStatus))
		i--
		dAtA[i] = 0x20
	}
	if m.SsoEnabled {
		i--
		if m.SsoEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.OtpEnabled {
		i--
		if m.OtpEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *UpdateTenantSettingsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateTenantSettingsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateTenantSettingsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ScimEnabled {
		i--
		if m.ScimEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if len(m.ValidationErrors) > 0 {
		for iNdEx := len(m.ValidationErrors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValidationErrors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCustomApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.MaxCredentialsExpiry != nil {
		{
			size, err := m.MaxCredentialsExpiry.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCustomApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.OtpStatus != 0 {
		i = encodeVarintCustomApi(dAtA, i, uint64(m.OtpStatus))
		i--
		dAtA[i] = 0x20
	}
	if m.SsoEnabled {
		i--
		if m.SsoEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.OtpEnabled {
		i--
		if m.OtpEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *ValidationErrorField) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidationErrorField) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidationErrorField) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ErrorMessage) > 0 {
		i -= len(m.ErrorMessage)
		copy(dAtA[i:], m.ErrorMessage)
		i = encodeVarintCustomApi(dAtA, i, uint64(len(m.ErrorMessage)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ErrorField) > 0 {
		i -= len(m.ErrorField)
		copy(dAtA[i:], m.ErrorField)
		i = encodeVarintCustomApi(dAtA, i, uint64(len(m.ErrorField)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateTenantSettingsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateTenantSettingsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateTenantSettingsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxCredentialsExpiry != nil {
		{
			size, err := m.MaxCredentialsExpiry.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCustomApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.OtpEnabled {
		i--
		if m.OtpEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *CreateDebugUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateDebugUserRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateDebugUserRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NsRoles) > 0 {
		for iNdEx := len(m.NsRoles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NsRoles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCustomApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DebugUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DebugUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DebugUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintCustomApi(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.LastName) > 0 {
		i -= len(m.LastName)
		copy(dAtA[i:], m.LastName)
		i = encodeVarintCustomApi(dAtA, i, uint64(len(m.LastName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FirstName) > 0 {
		i -= len(m.FirstName)
		copy(dAtA[i:], m.FirstName)
		i = encodeVarintCustomApi(dAtA, i, uint64(len(m.FirstName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetPasswordPolicyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPasswordPolicyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPasswordPolicyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RealmId) > 0 {
		i -= len(m.RealmId)
		copy(dAtA[i:], m.RealmId)
		i = encodeVarintCustomApi(dAtA, i, uint64(len(m.RealmId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PasswordPolicyPublicAccess) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PasswordPolicyPublicAccess) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PasswordPolicyPublicAccess) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MinimumLength != 0 {
		i = encodeVarintCustomApi(dAtA, i, uint64(m.MinimumLength))
		i--
		dAtA[i] = 0x40
	}
	if m.NotRecentlyUsed != 0 {
		i = encodeVarintCustomApi(dAtA, i, uint64(m.NotRecentlyUsed))
		i--
		dAtA[i] = 0x38
	}
	if m.NotUsername {
		i--
		if m.NotUsername {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.SpecialCharacters != 0 {
		i = encodeVarintCustomApi(dAtA, i, uint64(m.SpecialCharacters))
		i--
		dAtA[i] = 0x20
	}
	if m.UppercaseCharacters != 0 {
		i = encodeVarintCustomApi(dAtA, i, uint64(m.UppercaseCharacters))
		i--
		dAtA[i] = 0x18
	}
	if m.LowercaseCharacters != 0 {
		i = encodeVarintCustomApi(dAtA, i, uint64(m.LowercaseCharacters))
		i--
		dAtA[i] = 0x10
	}
	if m.Digits != 0 {
		i = encodeVarintCustomApi(dAtA, i, uint64(m.Digits))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetLoginEventsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLoginEventsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetLoginEventsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Max != 0 {
		i = encodeVarintCustomApi(dAtA, i, uint64(m.Max))
		i--
		dAtA[i] = 0x10
	}
	if m.First != 0 {
		i = encodeVarintCustomApi(dAtA, i, uint64(m.First))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetLoginEventsInTimeFrameRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLoginEventsInTimeFrameRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetLoginEventsInTimeFrameRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.End != nil {
		{
			size, err := m.End.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCustomApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Start != nil {
		{
			size, err := m.Start.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCustomApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Max != 0 {
		i = encodeVarintCustomApi(dAtA, i, uint64(m.Max))
		i--
		dAtA[i] = 0x10
	}
	if m.First != 0 {
		i = encodeVarintCustomApi(dAtA, i, uint64(m.First))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LoginEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoginEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintCustomApi(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.AuthMethod) > 0 {
		i -= len(m.AuthMethod)
		copy(dAtA[i:], m.AuthMethod)
		i = encodeVarintCustomApi(dAtA, i, uint64(len(m.AuthMethod)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintCustomApi(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.IpAddress) > 0 {
		i -= len(m.IpAddress)
		copy(dAtA[i:], m.IpAddress)
		i = encodeVarintCustomApi(dAtA, i, uint64(len(m.IpAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SessionId) > 0 {
		i -= len(m.SessionId)
		copy(dAtA[i:], m.SessionId)
		i = encodeVarintCustomApi(dAtA, i, uint64(len(m.SessionId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Time != nil {
		{
			size, err := m.Time.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCustomApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LoginEvents) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginEvents) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoginEvents) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LoginEvents) > 0 {
		for iNdEx := len(m.LoginEvents) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LoginEvents[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCustomApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LoginEventsMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginEventsMap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoginEventsMap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LoginEventsMap) > 0 {
		for k := range m.LoginEventsMap {
			v := m.LoginEventsMap[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintCustomApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCustomApi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCustomApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *User) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintCustomApi(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Users) > 0 {
		for iNdEx := len(m.Users) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Users[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCustomApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AssignDomainOwnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssignDomainOwnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssignDomainOwnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintCustomApi(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UnassignDomainOwnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnassignDomainOwnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnassignDomainOwnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintCustomApi(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateImageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateImageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateImageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContentType) > 0 {
		i -= len(m.ContentType)
		copy(dAtA[i:], m.ContentType)
		i = encodeVarintCustomApi(dAtA, i, uint64(len(m.ContentType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Image) > 0 {
		i -= len(m.Image)
		copy(dAtA[i:], m.Image)
		i = encodeVarintCustomApi(dAtA, i, uint64(len(m.Image)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LastLoginMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LastLoginMap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LastLoginMap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LastLoginMap) > 0 {
		for k := range m.LastLoginMap {
			v := m.LastLoginMap[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintCustomApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCustomApi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCustomApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SupportInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SupportInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SupportInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SupportEmailAddress) > 0 {
		i -= len(m.SupportEmailAddress)
		copy(dAtA[i:], m.SupportEmailAddress)
		i = encodeVarintCustomApi(dAtA, i, uint64(len(m.SupportEmailAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCustomApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovCustomApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LookupCnameRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Cname)
	if l > 0 {
		n += 1 + l + sovCustomApi(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovCustomApi(uint64(l))
	}
	return n
}

func (m *DeleteTenantRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCustomApi(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovCustomApi(uint64(l))
	}
	if m.Reason != 0 {
		n += 1 + sovCustomApi(uint64(m.Reason))
	}
	l = len(m.Feedback)
	if l > 0 {
		n += 1 + l + sovCustomApi(uint64(l))
	}
	return n
}

func (m *DisableTenantResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JobId)
	if l > 0 {
		n += 1 + l + sovCustomApi(uint64(l))
	}
	return n
}

func (m *StatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *EscalationDocResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovCustomApi(uint64(l))
	}
	return n
}

func (m *TenantSettingsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OtpEnabled {
		n += 2
	}
	if m.SsoEnabled {
		n += 2
	}
	if m.OtpStatus != 0 {
		n += 1 + sovCustomApi(uint64(m.OtpStatus))
	}
	if m.MaxCredentialsExpiry != nil {
		l = m.MaxCredentialsExpiry.Size()
		n += 1 + l + sovCustomApi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCustomApi(uint64(l))
	}
	l = len(m.CompanyName)
	if l > 0 {
		n += 1 + l + sovCustomApi(uint64(l))
	}
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovCustomApi(uint64(l))
	}
	l = len(m.ActivePlanTransitionId)
	if l > 0 {
		n += 1 + l + sovCustomApi(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovCustomApi(uint64(m.State))
	}
	l = len(m.OriginalTenant)
	if l > 0 {
		n += 1 + l + sovCustomApi(uint64(l))
	}
	if m.ScimEnabled {
		n += 2
	}
	return n
}

func (m *UpdateTenantSettingsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OtpEnabled {
		n += 2
	}
	if m.SsoEnabled {
		n += 2
	}
	if m.OtpStatus != 0 {
		n += 1 + sovCustomApi(uint64(m.OtpStatus))
	}
	if m.MaxCredentialsExpiry != nil {
		l = m.MaxCredentialsExpiry.Size()
		n += 1 + l + sovCustomApi(uint64(l))
	}
	if len(m.ValidationErrors) > 0 {
		for _, e := range m.ValidationErrors {
			l = e.Size()
			n += 1 + l + sovCustomApi(uint64(l))
		}
	}
	if m.ScimEnabled {
		n += 2
	}
	return n
}

func (m *ValidationErrorField) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ErrorField)
	if l > 0 {
		n += 1 + l + sovCustomApi(uint64(l))
	}
	l = len(m.ErrorMessage)
	if l > 0 {
		n += 1 + l + sovCustomApi(uint64(l))
	}
	return n
}

func (m *UpdateTenantSettingsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OtpEnabled {
		n += 2
	}
	if m.MaxCredentialsExpiry != nil {
		l = m.MaxCredentialsExpiry.Size()
		n += 1 + l + sovCustomApi(uint64(l))
	}
	return n
}

func (m *CreateDebugUserRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NsRoles) > 0 {
		for _, e := range m.NsRoles {
			l = e.Size()
			n += 1 + l + sovCustomApi(uint64(l))
		}
	}
	return n
}

func (m *DebugUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled {
		n += 2
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovCustomApi(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovCustomApi(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovCustomApi(uint64(l))
	}
	return n
}

func (m *GetPasswordPolicyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RealmId)
	if l > 0 {
		n += 1 + l + sovCustomApi(uint64(l))
	}
	return n
}

func (m *PasswordPolicyPublicAccess) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Digits != 0 {
		n += 1 + sovCustomApi(uint64(m.Digits))
	}
	if m.LowercaseCharacters != 0 {
		n += 1 + sovCustomApi(uint64(m.LowercaseCharacters))
	}
	if m.UppercaseCharacters != 0 {
		n += 1 + sovCustomApi(uint64(m.UppercaseCharacters))
	}
	if m.SpecialCharacters != 0 {
		n += 1 + sovCustomApi(uint64(m.SpecialCharacters))
	}
	if m.NotUsername {
		n += 2
	}
	if m.NotRecentlyUsed != 0 {
		n += 1 + sovCustomApi(uint64(m.NotRecentlyUsed))
	}
	if m.MinimumLength != 0 {
		n += 1 + sovCustomApi(uint64(m.MinimumLength))
	}
	return n
}

func (m *GetLoginEventsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.First != 0 {
		n += 1 + sovCustomApi(uint64(m.First))
	}
	if m.Max != 0 {
		n += 1 + sovCustomApi(uint64(m.Max))
	}
	return n
}

func (m *GetLoginEventsInTimeFrameRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.First != 0 {
		n += 1 + sovCustomApi(uint64(m.First))
	}
	if m.Max != 0 {
		n += 1 + sovCustomApi(uint64(m.Max))
	}
	if m.Start != nil {
		l = m.Start.Size()
		n += 1 + l + sovCustomApi(uint64(l))
	}
	if m.End != nil {
		l = m.End.Size()
		n += 1 + l + sovCustomApi(uint64(l))
	}
	return n
}

func (m *LoginEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time != nil {
		l = m.Time.Size()
		n += 1 + l + sovCustomApi(uint64(l))
	}
	l = len(m.SessionId)
	if l > 0 {
		n += 1 + l + sovCustomApi(uint64(l))
	}
	l = len(m.IpAddress)
	if l > 0 {
		n += 1 + l + sovCustomApi(uint64(l))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovCustomApi(uint64(l))
	}
	l = len(m.AuthMethod)
	if l > 0 {
		n += 1 + l + sovCustomApi(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovCustomApi(uint64(l))
	}
	return n
}

func (m *LoginEvents) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LoginEvents) > 0 {
		for _, e := range m.LoginEvents {
			l = e.Size()
			n += 1 + l + sovCustomApi(uint64(l))
		}
	}
	return n
}

func (m *LoginEventsMap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LoginEventsMap) > 0 {
		for k, v := range m.LoginEventsMap {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovCustomApi(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovCustomApi(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovCustomApi(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *User) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovCustomApi(uint64(l))
	}
	return n
}

func (m *UserList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovCustomApi(uint64(l))
		}
	}
	return n
}

func (m *AssignDomainOwnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovCustomApi(uint64(l))
	}
	return n
}

func (m *UnassignDomainOwnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovCustomApi(uint64(l))
	}
	return n
}

func (m *UpdateImageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovCustomApi(uint64(l))
	}
	l = len(m.ContentType)
	if l > 0 {
		n += 1 + l + sovCustomApi(uint64(l))
	}
	return n
}

func (m *LastLoginMap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LastLoginMap) > 0 {
		for k, v := range m.LastLoginMap {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovCustomApi(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovCustomApi(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovCustomApi(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *SupportInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SupportEmailAddress)
	if l > 0 {
		n += 1 + l + sovCustomApi(uint64(l))
	}
	return n
}

func sovCustomApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCustomApi(x uint64) (n int) {
	return sovCustomApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *LookupCnameRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LookupCnameRequest{`,
		`Cname:` + fmt.Sprintf("%v", this.Cname) + `,`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteTenantRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteTenantRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`Feedback:` + fmt.Sprintf("%v", this.Feedback) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DisableTenantResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DisableTenantResponse{`,
		`JobId:` + fmt.Sprintf("%v", this.JobId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StatusResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StatusResponse{`,
		`}`,
	}, "")
	return s
}
func (this *EscalationDocResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EscalationDocResp{`,
		`Url:` + fmt.Sprintf("%v", this.Url) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TenantSettingsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TenantSettingsResponse{`,
		`OtpEnabled:` + fmt.Sprintf("%v", this.OtpEnabled) + `,`,
		`SsoEnabled:` + fmt.Sprintf("%v", this.SsoEnabled) + `,`,
		`OtpStatus:` + fmt.Sprintf("%v", this.OtpStatus) + `,`,
		`MaxCredentialsExpiry:` + strings.Replace(fmt.Sprintf("%v", this.MaxCredentialsExpiry), "CredentialsExpiry", "CredentialsExpiry", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`CompanyName:` + fmt.Sprintf("%v", this.CompanyName) + `,`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`ActivePlanTransitionId:` + fmt.Sprintf("%v", this.ActivePlanTransitionId) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`OriginalTenant:` + fmt.Sprintf("%v", this.OriginalTenant) + `,`,
		`ScimEnabled:` + fmt.Sprintf("%v", this.ScimEnabled) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateTenantSettingsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForValidationErrors := "[]*ValidationErrorField{"
	for _, f := range this.ValidationErrors {
		repeatedStringForValidationErrors += strings.Replace(f.String(), "ValidationErrorField", "ValidationErrorField", 1) + ","
	}
	repeatedStringForValidationErrors += "}"
	s := strings.Join([]string{`&UpdateTenantSettingsResponse{`,
		`OtpEnabled:` + fmt.Sprintf("%v", this.OtpEnabled) + `,`,
		`SsoEnabled:` + fmt.Sprintf("%v", this.SsoEnabled) + `,`,
		`OtpStatus:` + fmt.Sprintf("%v", this.OtpStatus) + `,`,
		`MaxCredentialsExpiry:` + strings.Replace(fmt.Sprintf("%v", this.MaxCredentialsExpiry), "CredentialsExpiry", "CredentialsExpiry", 1) + `,`,
		`ValidationErrors:` + repeatedStringForValidationErrors + `,`,
		`ScimEnabled:` + fmt.Sprintf("%v", this.ScimEnabled) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ValidationErrorField) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ValidationErrorField{`,
		`ErrorField:` + fmt.Sprintf("%v", this.ErrorField) + `,`,
		`ErrorMessage:` + fmt.Sprintf("%v", this.ErrorMessage) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateTenantSettingsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateTenantSettingsRequest{`,
		`OtpEnabled:` + fmt.Sprintf("%v", this.OtpEnabled) + `,`,
		`MaxCredentialsExpiry:` + strings.Replace(fmt.Sprintf("%v", this.MaxCredentialsExpiry), "CredentialsExpiry", "CredentialsExpiry", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateDebugUserRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForNsRoles := "[]*NamespaceRoleType{"
	for _, f := range this.NsRoles {
		repeatedStringForNsRoles += strings.Replace(fmt.Sprintf("%v", f), "NamespaceRoleType", "schema.NamespaceRoleType", 1) + ","
	}
	repeatedStringForNsRoles += "}"
	s := strings.Join([]string{`&CreateDebugUserRequest{`,
		`NsRoles:` + repeatedStringForNsRoles + `,`,
		`}`,
	}, "")
	return s
}
func (this *DebugUser) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DebugUser{`,
		`Enabled:` + fmt.Sprintf("%v", this.Enabled) + `,`,
		`FirstName:` + fmt.Sprintf("%v", this.FirstName) + `,`,
		`LastName:` + fmt.Sprintf("%v", this.LastName) + `,`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetPasswordPolicyRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetPasswordPolicyRequest{`,
		`RealmId:` + fmt.Sprintf("%v", this.RealmId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PasswordPolicyPublicAccess) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PasswordPolicyPublicAccess{`,
		`Digits:` + fmt.Sprintf("%v", this.Digits) + `,`,
		`LowercaseCharacters:` + fmt.Sprintf("%v", this.LowercaseCharacters) + `,`,
		`UppercaseCharacters:` + fmt.Sprintf("%v", this.UppercaseCharacters) + `,`,
		`SpecialCharacters:` + fmt.Sprintf("%v", this.SpecialCharacters) + `,`,
		`NotUsername:` + fmt.Sprintf("%v", this.NotUsername) + `,`,
		`NotRecentlyUsed:` + fmt.Sprintf("%v", this.NotRecentlyUsed) + `,`,
		`MinimumLength:` + fmt.Sprintf("%v", this.MinimumLength) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetLoginEventsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetLoginEventsRequest{`,
		`First:` + fmt.Sprintf("%v", this.First) + `,`,
		`Max:` + fmt.Sprintf("%v", this.Max) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetLoginEventsInTimeFrameRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetLoginEventsInTimeFrameRequest{`,
		`First:` + fmt.Sprintf("%v", this.First) + `,`,
		`Max:` + fmt.Sprintf("%v", this.Max) + `,`,
		`Start:` + strings.Replace(fmt.Sprintf("%v", this.Start), "Timestamp", "types.Timestamp", 1) + `,`,
		`End:` + strings.Replace(fmt.Sprintf("%v", this.End), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoginEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoginEvent{`,
		`Time:` + strings.Replace(fmt.Sprintf("%v", this.Time), "Timestamp", "types.Timestamp", 1) + `,`,
		`SessionId:` + fmt.Sprintf("%v", this.SessionId) + `,`,
		`IpAddress:` + fmt.Sprintf("%v", this.IpAddress) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`AuthMethod:` + fmt.Sprintf("%v", this.AuthMethod) + `,`,
		`Username:` + fmt.Sprintf("%v", this.Username) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoginEvents) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForLoginEvents := "[]*LoginEvent{"
	for _, f := range this.LoginEvents {
		repeatedStringForLoginEvents += strings.Replace(f.String(), "LoginEvent", "LoginEvent", 1) + ","
	}
	repeatedStringForLoginEvents += "}"
	s := strings.Join([]string{`&LoginEvents{`,
		`LoginEvents:` + repeatedStringForLoginEvents + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoginEventsMap) String() string {
	if this == nil {
		return "nil"
	}
	keysForLoginEventsMap := make([]string, 0, len(this.LoginEventsMap))
	for k, _ := range this.LoginEventsMap {
		keysForLoginEventsMap = append(keysForLoginEventsMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLoginEventsMap)
	mapStringForLoginEventsMap := "map[string]*LoginEvents{"
	for _, k := range keysForLoginEventsMap {
		mapStringForLoginEventsMap += fmt.Sprintf("%v: %v,", k, this.LoginEventsMap[k])
	}
	mapStringForLoginEventsMap += "}"
	s := strings.Join([]string{`&LoginEventsMap{`,
		`LoginEventsMap:` + mapStringForLoginEventsMap + `,`,
		`}`,
	}, "")
	return s
}
func (this *User) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&User{`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForUsers := "[]*User{"
	for _, f := range this.Users {
		repeatedStringForUsers += strings.Replace(f.String(), "User", "User", 1) + ","
	}
	repeatedStringForUsers += "}"
	s := strings.Join([]string{`&UserList{`,
		`Users:` + repeatedStringForUsers + `,`,
		`}`,
	}, "")
	return s
}
func (this *AssignDomainOwnerRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AssignDomainOwnerRequest{`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UnassignDomainOwnerRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UnassignDomainOwnerRequest{`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateImageRequest) string() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateImageRequest{`,
		`Image:` + fmt.Sprintf("%v", this.Image) + `,`,
		`ContentType:` + fmt.Sprintf("%v", this.ContentType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LastLoginMap) String() string {
	if this == nil {
		return "nil"
	}
	keysForLastLoginMap := make([]string, 0, len(this.LastLoginMap))
	for k, _ := range this.LastLoginMap {
		keysForLastLoginMap = append(keysForLastLoginMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLastLoginMap)
	mapStringForLastLoginMap := "map[string]*types.Timestamp{"
	for _, k := range keysForLastLoginMap {
		mapStringForLastLoginMap += fmt.Sprintf("%v: %v,", k, this.LastLoginMap[k])
	}
	mapStringForLastLoginMap += "}"
	s := strings.Join([]string{`&LastLoginMap{`,
		`LastLoginMap:` + mapStringForLastLoginMap + `,`,
		`}`,
	}, "")
	return s
}
func (this *SupportInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SupportInfo{`,
		`SupportEmailAddress:` + fmt.Sprintf("%v", this.SupportEmailAddress) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCustomApi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *LookupCnameRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCustomApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupCnameRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupCnameRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCustomApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteTenantRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCustomApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteTenantRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteTenantRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			m.Reason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reason |= DeletionReason(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Feedback", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Feedback = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCustomApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DisableTenantResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCustomApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DisableTenantResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DisableTenantResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCustomApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCustomApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCustomApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EscalationDocResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCustomApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EscalationDocResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EscalationDocResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCustomApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TenantSettingsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCustomApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TenantSettingsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TenantSettingsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtpEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OtpEnabled = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SsoEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SsoEnabled = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtpStatus", wireType)
			}
			m.OtpStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OtpStatus |= OtpStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCredentialsExpiry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxCredentialsExpiry == nil {
				m.MaxCredentialsExpiry = &CredentialsExpiry{}
			}
			if err := m.MaxCredentialsExpiry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivePlanTransitionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivePlanTransitionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= FSMState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalTenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalTenant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScimEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ScimEnabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCustomApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateTenantSettingsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCustomApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateTenantSettingsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateTenantSettingsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtpEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OtpEnabled = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SsoEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SsoEnabled = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtpStatus", wireType)
			}
			m.OtpStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OtpStatus |= OtpStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCredentialsExpiry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxCredentialsExpiry == nil {
				m.MaxCredentialsExpiry = &CredentialsExpiry{}
			}
			if err := m.MaxCredentialsExpiry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidationErrors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidationErrors = append(m.ValidationErrors, &ValidationErrorField{})
			if err := m.ValidationErrors[len(m.ValidationErrors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScimEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ScimEnabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCustomApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidationErrorField) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCustomApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidationErrorField: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidationErrorField: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorField", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorField = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCustomApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateTenantSettingsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCustomApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateTenantSettingsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateTenantSettingsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtpEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OtpEnabled = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCredentialsExpiry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxCredentialsExpiry == nil {
				m.MaxCredentialsExpiry = &CredentialsExpiry{}
			}
			if err := m.MaxCredentialsExpiry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCustomApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateDebugUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCustomApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateDebugUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateDebugUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsRoles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NsRoles = append(m.NsRoles, &schema.NamespaceRoleType{})
			if err := m.NsRoles[len(m.NsRoles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCustomApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DebugUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCustomApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DebugUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DebugUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCustomApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPasswordPolicyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCustomApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPasswordPolicyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPasswordPolicyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealmId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RealmId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCustomApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PasswordPolicyPublicAccess) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCustomApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PasswordPolicyPublicAccess: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PasswordPolicyPublicAccess: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Digits", wireType)
			}
			m.Digits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Digits |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowercaseCharacters", wireType)
			}
			m.LowercaseCharacters = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LowercaseCharacters |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UppercaseCharacters", wireType)
			}
			m.UppercaseCharacters = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UppercaseCharacters |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecialCharacters", wireType)
			}
			m.SpecialCharacters = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpecialCharacters |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotUsername", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NotUsername = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotRecentlyUsed", wireType)
			}
			m.NotRecentlyUsed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NotRecentlyUsed |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumLength", wireType)
			}
			m.MinimumLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinimumLength |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCustomApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLoginEventsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCustomApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLoginEventsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLoginEventsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field First", wireType)
			}
			m.First = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.First |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Max", wireType)
			}
			m.Max = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Max |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCustomApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLoginEventsInTimeFrameRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCustomApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLoginEventsInTimeFrameRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLoginEventsInTimeFrameRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field First", wireType)
			}
			m.First = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.First |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Max", wireType)
			}
			m.Max = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Max |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Start == nil {
				m.Start = &types.Timestamp{}
			}
			if err := m.Start.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.End == nil {
				m.End = &types.Timestamp{}
			}
			if err := m.End.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCustomApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCustomApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Time == nil {
				m.Time = &types.Timestamp{}
			}
			if err := m.Time.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthMethod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthMethod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCustomApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginEvents) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCustomApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginEvents: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginEvents: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginEvents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoginEvents = append(m.LoginEvents, &LoginEvent{})
			if err := m.LoginEvents[len(m.LoginEvents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCustomApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginEventsMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCustomApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginEventsMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginEventsMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginEventsMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LoginEventsMap == nil {
				m.LoginEventsMap = make(map[string]*LoginEvents)
			}
			var mapkey string
			var mapvalue *LoginEvents
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCustomApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCustomApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCustomApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCustomApi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCustomApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthCustomApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthCustomApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &LoginEvents{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCustomApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCustomApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.LoginEventsMap[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCustomApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCustomApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: User: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: User: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCustomApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCustomApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &User{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCustomApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssignDomainOwnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCustomApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssignDomainOwnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssignDomainOwnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCustomApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnassignDomainOwnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCustomApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnassignDomainOwnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnassignDomainOwnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCustomApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateImageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCustomApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateImageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateImageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = append(m.Image[:0], dAtA[iNdEx:postIndex]...)
			if m.Image == nil {
				m.Image = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCustomApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LastLoginMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCustomApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LastLoginMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LastLoginMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastLoginMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastLoginMap == nil {
				m.LastLoginMap = make(map[string]*types.Timestamp)
			}
			var mapkey string
			var mapvalue *types.Timestamp
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCustomApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCustomApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCustomApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCustomApi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCustomApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthCustomApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthCustomApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &types.Timestamp{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCustomApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCustomApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.LastLoginMap[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCustomApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SupportInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCustomApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SupportInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SupportInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportEmailAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SupportEmailAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCustomApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCustomApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCustomApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCustomApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCustomApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCustomApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCustomApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCustomApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCustomApi = fmt.Errorf("proto: unexpected end of group")
)

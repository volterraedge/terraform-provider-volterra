//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.
//

package site

import (
	"bytes"
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"strings"

	"github.com/gogo/protobuf/proto"
	"github.com/grpc-ecosystem/grpc-gateway/runtime"
	"google.golang.org/grpc"
	k8s_io_api_apps_v1 "k8s.io/api/apps/v1"
        k8s_io_api_batch_v1 "k8s.io/api/batch/v1"
        k8s_io_api_batch_v1beta1 "k8s.io/api/batch/v1beta1"
        k8s_io_api_core_v1 "k8s.io/api/core/v1"

	"gopkg.volterra.us/stdlib/client"
	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/errors"
	"gopkg.volterra.us/stdlib/server"
	"gopkg.volterra.us/stdlib/svcfw"
)

var (
	_ = fmt.Sprintf("dummy for fmt import use")
)

// Create CustomDataK8SAPI GRPC Client satisfying server.CustomClient
type CustomDataK8SAPIGrpcClient struct {
	conn       *grpc.ClientConn
	grpcClient CustomDataK8SAPIClient
	// map of rpc name to its invocation
	rpcFns map[string]func(context.Context, string, ...grpc.CallOption) (proto.Message, error)
}

func (c *CustomDataK8SAPIGrpcClient) doRPCConfigMapList(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &ConfigMapListRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.site.ConfigMapListRequest", yamlReq)
	}
	rsp, err := c.grpcClient.ConfigMapList(ctx, req, opts...)
	return rsp, err
}

func (c *CustomDataK8SAPIGrpcClient) doRPCCronJobList(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &CronJobListRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.site.CronJobListRequest", yamlReq)
	}
	rsp, err := c.grpcClient.CronJobList(ctx, req, opts...)
	return rsp, err
}

func (c *CustomDataK8SAPIGrpcClient) doRPCDaemonSetList(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &DaemonSetListRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.site.DaemonSetListRequest", yamlReq)
	}
	rsp, err := c.grpcClient.DaemonSetList(ctx, req, opts...)
	return rsp, err
}

func (c *CustomDataK8SAPIGrpcClient) doRPCDeploymentList(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &DeploymentListRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.site.DeploymentListRequest", yamlReq)
	}
	rsp, err := c.grpcClient.DeploymentList(ctx, req, opts...)
	return rsp, err
}

func (c *CustomDataK8SAPIGrpcClient) doRPCEndpointsList(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &EndpointsListRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.site.EndpointsListRequest", yamlReq)
	}
	rsp, err := c.grpcClient.EndpointsList(ctx, req, opts...)
	return rsp, err
}

func (c *CustomDataK8SAPIGrpcClient) doRPCJobList(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &JobListRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.site.JobListRequest", yamlReq)
	}
	rsp, err := c.grpcClient.JobList(ctx, req, opts...)
	return rsp, err
}

func (c *CustomDataK8SAPIGrpcClient) doRPCNamespaceList(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &NamespaceListRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.site.NamespaceListRequest", yamlReq)
	}
	rsp, err := c.grpcClient.NamespaceList(ctx, req, opts...)
	return rsp, err
}

func (c *CustomDataK8SAPIGrpcClient) doRPCNodeList(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &NodeListRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.site.NodeListRequest", yamlReq)
	}
	rsp, err := c.grpcClient.NodeList(ctx, req, opts...)
	return rsp, err
}

func (c *CustomDataK8SAPIGrpcClient) doRPCPersistentVolumeClaimList(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &PersistentVolumeClaimListRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.site.PersistentVolumeClaimListRequest", yamlReq)
	}
	rsp, err := c.grpcClient.PersistentVolumeClaimList(ctx, req, opts...)
	return rsp, err
}

func (c *CustomDataK8SAPIGrpcClient) doRPCPersistentVolumeList(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &PersistentVolumeListRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.site.PersistentVolumeListRequest", yamlReq)
	}
	rsp, err := c.grpcClient.PersistentVolumeList(ctx, req, opts...)
	return rsp, err
}

func (c *CustomDataK8SAPIGrpcClient) doRPCPodList(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &PodListRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.site.PodListRequest", yamlReq)
	}
	rsp, err := c.grpcClient.PodList(ctx, req, opts...)
	return rsp, err
}

func (c *CustomDataK8SAPIGrpcClient) doRPCReplicaSetList(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &ReplicaSetListRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.site.ReplicaSetListRequest", yamlReq)
	}
	rsp, err := c.grpcClient.ReplicaSetList(ctx, req, opts...)
	return rsp, err
}

func (c *CustomDataK8SAPIGrpcClient) doRPCSecretList(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &SecretListRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.site.SecretListRequest", yamlReq)
	}
	rsp, err := c.grpcClient.SecretList(ctx, req, opts...)
	return rsp, err
}

func (c *CustomDataK8SAPIGrpcClient) doRPCServiceList(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &ServiceListRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.site.ServiceListRequest", yamlReq)
	}
	rsp, err := c.grpcClient.ServiceList(ctx, req, opts...)
	return rsp, err
}

func (c *CustomDataK8SAPIGrpcClient) doRPCStatefulSetList(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &StatefulSetListRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.site.StatefulSetListRequest", yamlReq)
	}
	rsp, err := c.grpcClient.StatefulSetList(ctx, req, opts...)
	return rsp, err
}

func (c *CustomDataK8SAPIGrpcClient) DoRPC(ctx context.Context, rpc string, opts ...server.CustomCallOpt) (proto.Message, error) {
	rpcFn, exists := c.rpcFns[rpc]
	if !exists {
		return nil, fmt.Errorf("Error, no such rpc %s", rpc)
	}
	cco := server.NewCustomCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	if cco.YAMLReq == "" {
		return nil, fmt.Errorf("Error, empty request body")
	}
	ctx = client.AddHdrsToCtx(cco.Headers, ctx)

	rsp, err := rpcFn(ctx, cco.YAMLReq, cco.GrpcCallOpts...)
	if err != nil {
		return nil, errors.Wrap(err, "Doing custom RPC using GRPC")
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return rsp, nil
}

func NewCustomDataK8SAPIGrpcClient(cc *grpc.ClientConn) server.CustomClient {
	ccl := &CustomDataK8SAPIGrpcClient{
		conn:       cc,
		grpcClient: NewCustomDataK8SAPIClient(cc),
	}
	rpcFns := make(map[string]func(context.Context, string, ...grpc.CallOption) (proto.Message, error))
	rpcFns["ConfigMapList"] = ccl.doRPCConfigMapList

	rpcFns["CronJobList"] = ccl.doRPCCronJobList

	rpcFns["DaemonSetList"] = ccl.doRPCDaemonSetList

	rpcFns["DeploymentList"] = ccl.doRPCDeploymentList

	rpcFns["EndpointsList"] = ccl.doRPCEndpointsList

	rpcFns["JobList"] = ccl.doRPCJobList

	rpcFns["NamespaceList"] = ccl.doRPCNamespaceList

	rpcFns["NodeList"] = ccl.doRPCNodeList

	rpcFns["PersistentVolumeClaimList"] = ccl.doRPCPersistentVolumeClaimList

	rpcFns["PersistentVolumeList"] = ccl.doRPCPersistentVolumeList

	rpcFns["PodList"] = ccl.doRPCPodList

	rpcFns["ReplicaSetList"] = ccl.doRPCReplicaSetList

	rpcFns["SecretList"] = ccl.doRPCSecretList

	rpcFns["ServiceList"] = ccl.doRPCServiceList

	rpcFns["StatefulSetList"] = ccl.doRPCStatefulSetList

	ccl.rpcFns = rpcFns

	return ccl
}

// Create CustomDataK8SAPI REST Client satisfying server.CustomClient
type CustomDataK8SAPIRestClient struct {
	baseURL string
	client  http.Client
	// map of rpc name to its invocation
	rpcFns map[string]func(context.Context, *server.CustomCallOpts) (proto.Message, error)
}

func (c *CustomDataK8SAPIRestClient) doRPCConfigMapList(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &ConfigMapListRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.site.ConfigMapListRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post":
		jsn, err := req.ToJSON()
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		newReq, err := http.NewRequest(http.MethodPost, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP POST request for custom API")
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))
		q.Add("site", fmt.Sprintf("%v", req.Site))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &k8s_io_api_core_v1.ConfigMapList{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, fmt.Errorf("JSON Response %s is not of type *k8s.io.api.core.v1.ConfigMapList", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomDataK8SAPIRestClient) doRPCCronJobList(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &CronJobListRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.site.CronJobListRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post":
		jsn, err := req.ToJSON()
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		newReq, err := http.NewRequest(http.MethodPost, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP POST request for custom API")
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))
		q.Add("site", fmt.Sprintf("%v", req.Site))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &k8s_io_api_batch_v1beta1.CronJobList{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, fmt.Errorf("JSON Response %s is not of type *k8s.io.api.batch.v1beta1.CronJobList", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomDataK8SAPIRestClient) doRPCDaemonSetList(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &DaemonSetListRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.site.DaemonSetListRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post":
		jsn, err := req.ToJSON()
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		newReq, err := http.NewRequest(http.MethodPost, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP POST request for custom API")
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))
		q.Add("site", fmt.Sprintf("%v", req.Site))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &k8s_io_api_apps_v1.DaemonSetList{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, fmt.Errorf("JSON Response %s is not of type *k8s.io.api.apps.v1.DaemonSetList", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomDataK8SAPIRestClient) doRPCDeploymentList(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &DeploymentListRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.site.DeploymentListRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post":
		jsn, err := req.ToJSON()
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		newReq, err := http.NewRequest(http.MethodPost, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP POST request for custom API")
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))
		q.Add("site", fmt.Sprintf("%v", req.Site))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &k8s_io_api_apps_v1.DeploymentList{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, fmt.Errorf("JSON Response %s is not of type *k8s.io.api.apps.v1.DeploymentList", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomDataK8SAPIRestClient) doRPCEndpointsList(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &EndpointsListRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.site.EndpointsListRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post":
		jsn, err := req.ToJSON()
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		newReq, err := http.NewRequest(http.MethodPost, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP POST request for custom API")
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))
		q.Add("site", fmt.Sprintf("%v", req.Site))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &k8s_io_api_core_v1.EndpointsList{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, fmt.Errorf("JSON Response %s is not of type *k8s.io.api.core.v1.EndpointsList", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomDataK8SAPIRestClient) doRPCJobList(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &JobListRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.site.JobListRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post":
		jsn, err := req.ToJSON()
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		newReq, err := http.NewRequest(http.MethodPost, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP POST request for custom API")
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))
		q.Add("site", fmt.Sprintf("%v", req.Site))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &k8s_io_api_batch_v1.JobList{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, fmt.Errorf("JSON Response %s is not of type *k8s.io.api.batch.v1.JobList", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomDataK8SAPIRestClient) doRPCNamespaceList(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &NamespaceListRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.site.NamespaceListRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post":
		jsn, err := req.ToJSON()
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		newReq, err := http.NewRequest(http.MethodPost, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP POST request for custom API")
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("site", fmt.Sprintf("%v", req.Site))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &k8s_io_api_core_v1.NamespaceList{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, fmt.Errorf("JSON Response %s is not of type *k8s.io.api.core.v1.NamespaceList", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomDataK8SAPIRestClient) doRPCNodeList(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &NodeListRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.site.NodeListRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post":
		jsn, err := req.ToJSON()
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		newReq, err := http.NewRequest(http.MethodPost, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP POST request for custom API")
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("site", fmt.Sprintf("%v", req.Site))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &k8s_io_api_core_v1.NodeList{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, fmt.Errorf("JSON Response %s is not of type *k8s.io.api.core.v1.NodeList", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomDataK8SAPIRestClient) doRPCPersistentVolumeClaimList(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &PersistentVolumeClaimListRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.site.PersistentVolumeClaimListRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post":
		jsn, err := req.ToJSON()
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		newReq, err := http.NewRequest(http.MethodPost, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP POST request for custom API")
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))
		q.Add("site", fmt.Sprintf("%v", req.Site))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &k8s_io_api_core_v1.PersistentVolumeClaimList{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, fmt.Errorf("JSON Response %s is not of type *k8s.io.api.core.v1.PersistentVolumeClaimList", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomDataK8SAPIRestClient) doRPCPersistentVolumeList(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &PersistentVolumeListRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.site.PersistentVolumeListRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post":
		jsn, err := req.ToJSON()
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		newReq, err := http.NewRequest(http.MethodPost, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP POST request for custom API")
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("site", fmt.Sprintf("%v", req.Site))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &k8s_io_api_core_v1.PersistentVolumeList{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, fmt.Errorf("JSON Response %s is not of type *k8s.io.api.core.v1.PersistentVolumeList", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomDataK8SAPIRestClient) doRPCPodList(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &PodListRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.site.PodListRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post":
		jsn, err := req.ToJSON()
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		newReq, err := http.NewRequest(http.MethodPost, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP POST request for custom API")
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))
		q.Add("site", fmt.Sprintf("%v", req.Site))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &k8s_io_api_core_v1.PodList{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, fmt.Errorf("JSON Response %s is not of type *k8s.io.api.core.v1.PodList", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomDataK8SAPIRestClient) doRPCReplicaSetList(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &ReplicaSetListRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.site.ReplicaSetListRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post":
		jsn, err := req.ToJSON()
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		newReq, err := http.NewRequest(http.MethodPost, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP POST request for custom API")
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))
		q.Add("site", fmt.Sprintf("%v", req.Site))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &k8s_io_api_apps_v1.ReplicaSetList{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, fmt.Errorf("JSON Response %s is not of type *k8s.io.api.apps.v1.ReplicaSetList", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomDataK8SAPIRestClient) doRPCSecretList(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &SecretListRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.site.SecretListRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post":
		jsn, err := req.ToJSON()
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		newReq, err := http.NewRequest(http.MethodPost, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP POST request for custom API")
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))
		q.Add("site", fmt.Sprintf("%v", req.Site))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &k8s_io_api_core_v1.SecretList{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, fmt.Errorf("JSON Response %s is not of type *k8s.io.api.core.v1.SecretList", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomDataK8SAPIRestClient) doRPCServiceList(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &ServiceListRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.site.ServiceListRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post":
		jsn, err := req.ToJSON()
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		newReq, err := http.NewRequest(http.MethodPost, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP POST request for custom API")
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))
		q.Add("site", fmt.Sprintf("%v", req.Site))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &k8s_io_api_core_v1.ServiceList{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, fmt.Errorf("JSON Response %s is not of type *k8s.io.api.core.v1.ServiceList", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomDataK8SAPIRestClient) doRPCStatefulSetList(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &StatefulSetListRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.site.StatefulSetListRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post":
		jsn, err := req.ToJSON()
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		newReq, err := http.NewRequest(http.MethodPost, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP POST request for custom API")
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))
		q.Add("site", fmt.Sprintf("%v", req.Site))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &k8s_io_api_apps_v1.StatefulSetList{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, fmt.Errorf("JSON Response %s is not of type *k8s.io.api.apps.v1.StatefulSetList", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomDataK8SAPIRestClient) DoRPC(ctx context.Context, rpc string, opts ...server.CustomCallOpt) (proto.Message, error) {
	rpcFn, exists := c.rpcFns[rpc]
	if !exists {
		return nil, fmt.Errorf("Error, no such rpc %s", rpc)
	}
	cco := server.NewCustomCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	rsp, err := rpcFn(ctx, cco)
	if err != nil {
		return nil, errors.Wrap(err, "Doing custom RPC using Rest")
	}
	return rsp, nil
}

func NewCustomDataK8SAPIRestClient(baseURL string, hc http.Client) server.CustomClient {
	ccl := &CustomDataK8SAPIRestClient{
		baseURL: baseURL,
		client:  hc,
	}

	rpcFns := make(map[string]func(context.Context, *server.CustomCallOpts) (proto.Message, error))
	rpcFns["ConfigMapList"] = ccl.doRPCConfigMapList

	rpcFns["CronJobList"] = ccl.doRPCCronJobList

	rpcFns["DaemonSetList"] = ccl.doRPCDaemonSetList

	rpcFns["DeploymentList"] = ccl.doRPCDeploymentList

	rpcFns["EndpointsList"] = ccl.doRPCEndpointsList

	rpcFns["JobList"] = ccl.doRPCJobList

	rpcFns["NamespaceList"] = ccl.doRPCNamespaceList

	rpcFns["NodeList"] = ccl.doRPCNodeList

	rpcFns["PersistentVolumeClaimList"] = ccl.doRPCPersistentVolumeClaimList

	rpcFns["PersistentVolumeList"] = ccl.doRPCPersistentVolumeList

	rpcFns["PodList"] = ccl.doRPCPodList

	rpcFns["ReplicaSetList"] = ccl.doRPCReplicaSetList

	rpcFns["SecretList"] = ccl.doRPCSecretList

	rpcFns["ServiceList"] = ccl.doRPCServiceList

	rpcFns["StatefulSetList"] = ccl.doRPCStatefulSetList

	ccl.rpcFns = rpcFns

	return ccl
}

// Create CustomDataK8SAPIInprocClient

// INPROC Client (satisfying CustomDataK8SAPIClient interface)
type CustomDataK8SAPIInprocClient struct {
	svc svcfw.Service
}

func (c *CustomDataK8SAPIInprocClient) ConfigMapList(ctx context.Context, in *ConfigMapListRequest, opts ...grpc.CallOption) (*k8s_io_api_core_v1.ConfigMapList, error) {
	ah := c.svc.GetAPIHandler("ves.io.schema.site.CustomDataK8SAPI")
	cah, ok := ah.(CustomDataK8SAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomDataK8SAPISrv", ah)
	}

	var (
		rsp *k8s_io_api_core_v1.ConfigMapList
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, c.svc, "ves.io.schema.site.ConfigMapListRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomDataK8SAPI.ConfigMapList' operation on 'site'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if c.svc.Config().EnableAPIValidation {
		if rvFn := c.svc.GetRPCValidator("ves.io.schema.site.CustomDataK8SAPI.ConfigMapList"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.ConfigMapList(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, c.svc, "k8s.io.api.core.v1.ConfigMapList", rsp)...)

	return rsp, nil
}
func (c *CustomDataK8SAPIInprocClient) CronJobList(ctx context.Context, in *CronJobListRequest, opts ...grpc.CallOption) (*k8s_io_api_batch_v1beta1.CronJobList, error) {
	ah := c.svc.GetAPIHandler("ves.io.schema.site.CustomDataK8SAPI")
	cah, ok := ah.(CustomDataK8SAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomDataK8SAPISrv", ah)
	}

	var (
		rsp *k8s_io_api_batch_v1beta1.CronJobList
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, c.svc, "ves.io.schema.site.CronJobListRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomDataK8SAPI.CronJobList' operation on 'site'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if c.svc.Config().EnableAPIValidation {
		if rvFn := c.svc.GetRPCValidator("ves.io.schema.site.CustomDataK8SAPI.CronJobList"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.CronJobList(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, c.svc, "k8s.io.api.batch.v1beta1.CronJobList", rsp)...)

	return rsp, nil
}
func (c *CustomDataK8SAPIInprocClient) DaemonSetList(ctx context.Context, in *DaemonSetListRequest, opts ...grpc.CallOption) (*k8s_io_api_apps_v1.DaemonSetList, error) {
	ah := c.svc.GetAPIHandler("ves.io.schema.site.CustomDataK8SAPI")
	cah, ok := ah.(CustomDataK8SAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomDataK8SAPISrv", ah)
	}

	var (
		rsp *k8s_io_api_apps_v1.DaemonSetList
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, c.svc, "ves.io.schema.site.DaemonSetListRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomDataK8SAPI.DaemonSetList' operation on 'site'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if c.svc.Config().EnableAPIValidation {
		if rvFn := c.svc.GetRPCValidator("ves.io.schema.site.CustomDataK8SAPI.DaemonSetList"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.DaemonSetList(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, c.svc, "k8s.io.api.apps.v1.DaemonSetList", rsp)...)

	return rsp, nil
}
func (c *CustomDataK8SAPIInprocClient) DeploymentList(ctx context.Context, in *DeploymentListRequest, opts ...grpc.CallOption) (*k8s_io_api_apps_v1.DeploymentList, error) {
	ah := c.svc.GetAPIHandler("ves.io.schema.site.CustomDataK8SAPI")
	cah, ok := ah.(CustomDataK8SAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomDataK8SAPISrv", ah)
	}

	var (
		rsp *k8s_io_api_apps_v1.DeploymentList
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, c.svc, "ves.io.schema.site.DeploymentListRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomDataK8SAPI.DeploymentList' operation on 'site'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if c.svc.Config().EnableAPIValidation {
		if rvFn := c.svc.GetRPCValidator("ves.io.schema.site.CustomDataK8SAPI.DeploymentList"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.DeploymentList(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, c.svc, "k8s.io.api.apps.v1.DeploymentList", rsp)...)

	return rsp, nil
}
func (c *CustomDataK8SAPIInprocClient) EndpointsList(ctx context.Context, in *EndpointsListRequest, opts ...grpc.CallOption) (*k8s_io_api_core_v1.EndpointsList, error) {
	ah := c.svc.GetAPIHandler("ves.io.schema.site.CustomDataK8SAPI")
	cah, ok := ah.(CustomDataK8SAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomDataK8SAPISrv", ah)
	}

	var (
		rsp *k8s_io_api_core_v1.EndpointsList
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, c.svc, "ves.io.schema.site.EndpointsListRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomDataK8SAPI.EndpointsList' operation on 'site'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if c.svc.Config().EnableAPIValidation {
		if rvFn := c.svc.GetRPCValidator("ves.io.schema.site.CustomDataK8SAPI.EndpointsList"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.EndpointsList(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, c.svc, "k8s.io.api.core.v1.EndpointsList", rsp)...)

	return rsp, nil
}
func (c *CustomDataK8SAPIInprocClient) JobList(ctx context.Context, in *JobListRequest, opts ...grpc.CallOption) (*k8s_io_api_batch_v1.JobList, error) {
	ah := c.svc.GetAPIHandler("ves.io.schema.site.CustomDataK8SAPI")
	cah, ok := ah.(CustomDataK8SAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomDataK8SAPISrv", ah)
	}

	var (
		rsp *k8s_io_api_batch_v1.JobList
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, c.svc, "ves.io.schema.site.JobListRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomDataK8SAPI.JobList' operation on 'site'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if c.svc.Config().EnableAPIValidation {
		if rvFn := c.svc.GetRPCValidator("ves.io.schema.site.CustomDataK8SAPI.JobList"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.JobList(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, c.svc, "k8s.io.api.batch.v1.JobList", rsp)...)

	return rsp, nil
}
func (c *CustomDataK8SAPIInprocClient) NamespaceList(ctx context.Context, in *NamespaceListRequest, opts ...grpc.CallOption) (*k8s_io_api_core_v1.NamespaceList, error) {
	ah := c.svc.GetAPIHandler("ves.io.schema.site.CustomDataK8SAPI")
	cah, ok := ah.(CustomDataK8SAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomDataK8SAPISrv", ah)
	}

	var (
		rsp *k8s_io_api_core_v1.NamespaceList
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, c.svc, "ves.io.schema.site.NamespaceListRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomDataK8SAPI.NamespaceList' operation on 'site'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if c.svc.Config().EnableAPIValidation {
		if rvFn := c.svc.GetRPCValidator("ves.io.schema.site.CustomDataK8SAPI.NamespaceList"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.NamespaceList(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, c.svc, "k8s.io.api.core.v1.NamespaceList", rsp)...)

	return rsp, nil
}
func (c *CustomDataK8SAPIInprocClient) NodeList(ctx context.Context, in *NodeListRequest, opts ...grpc.CallOption) (*k8s_io_api_core_v1.NodeList, error) {
	ah := c.svc.GetAPIHandler("ves.io.schema.site.CustomDataK8SAPI")
	cah, ok := ah.(CustomDataK8SAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomDataK8SAPISrv", ah)
	}

	var (
		rsp *k8s_io_api_core_v1.NodeList
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, c.svc, "ves.io.schema.site.NodeListRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomDataK8SAPI.NodeList' operation on 'site'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if c.svc.Config().EnableAPIValidation {
		if rvFn := c.svc.GetRPCValidator("ves.io.schema.site.CustomDataK8SAPI.NodeList"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.NodeList(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, c.svc, "k8s.io.api.core.v1.NodeList", rsp)...)

	return rsp, nil
}
func (c *CustomDataK8SAPIInprocClient) PersistentVolumeClaimList(ctx context.Context, in *PersistentVolumeClaimListRequest, opts ...grpc.CallOption) (*k8s_io_api_core_v1.PersistentVolumeClaimList, error) {
	ah := c.svc.GetAPIHandler("ves.io.schema.site.CustomDataK8SAPI")
	cah, ok := ah.(CustomDataK8SAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomDataK8SAPISrv", ah)
	}

	var (
		rsp *k8s_io_api_core_v1.PersistentVolumeClaimList
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, c.svc, "ves.io.schema.site.PersistentVolumeClaimListRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomDataK8SAPI.PersistentVolumeClaimList' operation on 'site'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if c.svc.Config().EnableAPIValidation {
		if rvFn := c.svc.GetRPCValidator("ves.io.schema.site.CustomDataK8SAPI.PersistentVolumeClaimList"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.PersistentVolumeClaimList(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, c.svc, "k8s.io.api.core.v1.PersistentVolumeClaimList", rsp)...)

	return rsp, nil
}
func (c *CustomDataK8SAPIInprocClient) PersistentVolumeList(ctx context.Context, in *PersistentVolumeListRequest, opts ...grpc.CallOption) (*k8s_io_api_core_v1.PersistentVolumeList, error) {
	ah := c.svc.GetAPIHandler("ves.io.schema.site.CustomDataK8SAPI")
	cah, ok := ah.(CustomDataK8SAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomDataK8SAPISrv", ah)
	}

	var (
		rsp *k8s_io_api_core_v1.PersistentVolumeList
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, c.svc, "ves.io.schema.site.PersistentVolumeListRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomDataK8SAPI.PersistentVolumeList' operation on 'site'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if c.svc.Config().EnableAPIValidation {
		if rvFn := c.svc.GetRPCValidator("ves.io.schema.site.CustomDataK8SAPI.PersistentVolumeList"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.PersistentVolumeList(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, c.svc, "k8s.io.api.core.v1.PersistentVolumeList", rsp)...)

	return rsp, nil
}
func (c *CustomDataK8SAPIInprocClient) PodList(ctx context.Context, in *PodListRequest, opts ...grpc.CallOption) (*k8s_io_api_core_v1.PodList, error) {
	ah := c.svc.GetAPIHandler("ves.io.schema.site.CustomDataK8SAPI")
	cah, ok := ah.(CustomDataK8SAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomDataK8SAPISrv", ah)
	}

	var (
		rsp *k8s_io_api_core_v1.PodList
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, c.svc, "ves.io.schema.site.PodListRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomDataK8SAPI.PodList' operation on 'site'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if c.svc.Config().EnableAPIValidation {
		if rvFn := c.svc.GetRPCValidator("ves.io.schema.site.CustomDataK8SAPI.PodList"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.PodList(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, c.svc, "k8s.io.api.core.v1.PodList", rsp)...)

	return rsp, nil
}
func (c *CustomDataK8SAPIInprocClient) ReplicaSetList(ctx context.Context, in *ReplicaSetListRequest, opts ...grpc.CallOption) (*k8s_io_api_apps_v1.ReplicaSetList, error) {
	ah := c.svc.GetAPIHandler("ves.io.schema.site.CustomDataK8SAPI")
	cah, ok := ah.(CustomDataK8SAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomDataK8SAPISrv", ah)
	}

	var (
		rsp *k8s_io_api_apps_v1.ReplicaSetList
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, c.svc, "ves.io.schema.site.ReplicaSetListRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomDataK8SAPI.ReplicaSetList' operation on 'site'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if c.svc.Config().EnableAPIValidation {
		if rvFn := c.svc.GetRPCValidator("ves.io.schema.site.CustomDataK8SAPI.ReplicaSetList"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.ReplicaSetList(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, c.svc, "k8s.io.api.apps.v1.ReplicaSetList", rsp)...)

	return rsp, nil
}
func (c *CustomDataK8SAPIInprocClient) SecretList(ctx context.Context, in *SecretListRequest, opts ...grpc.CallOption) (*k8s_io_api_core_v1.SecretList, error) {
	ah := c.svc.GetAPIHandler("ves.io.schema.site.CustomDataK8SAPI")
	cah, ok := ah.(CustomDataK8SAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomDataK8SAPISrv", ah)
	}

	var (
		rsp *k8s_io_api_core_v1.SecretList
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, c.svc, "ves.io.schema.site.SecretListRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomDataK8SAPI.SecretList' operation on 'site'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if c.svc.Config().EnableAPIValidation {
		if rvFn := c.svc.GetRPCValidator("ves.io.schema.site.CustomDataK8SAPI.SecretList"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.SecretList(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, c.svc, "k8s.io.api.core.v1.SecretList", rsp)...)

	return rsp, nil
}
func (c *CustomDataK8SAPIInprocClient) ServiceList(ctx context.Context, in *ServiceListRequest, opts ...grpc.CallOption) (*k8s_io_api_core_v1.ServiceList, error) {
	ah := c.svc.GetAPIHandler("ves.io.schema.site.CustomDataK8SAPI")
	cah, ok := ah.(CustomDataK8SAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomDataK8SAPISrv", ah)
	}

	var (
		rsp *k8s_io_api_core_v1.ServiceList
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, c.svc, "ves.io.schema.site.ServiceListRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomDataK8SAPI.ServiceList' operation on 'site'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if c.svc.Config().EnableAPIValidation {
		if rvFn := c.svc.GetRPCValidator("ves.io.schema.site.CustomDataK8SAPI.ServiceList"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.ServiceList(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, c.svc, "k8s.io.api.core.v1.ServiceList", rsp)...)

	return rsp, nil
}
func (c *CustomDataK8SAPIInprocClient) StatefulSetList(ctx context.Context, in *StatefulSetListRequest, opts ...grpc.CallOption) (*k8s_io_api_apps_v1.StatefulSetList, error) {
	ah := c.svc.GetAPIHandler("ves.io.schema.site.CustomDataK8SAPI")
	cah, ok := ah.(CustomDataK8SAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomDataK8SAPISrv", ah)
	}

	var (
		rsp *k8s_io_api_apps_v1.StatefulSetList
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, c.svc, "ves.io.schema.site.StatefulSetListRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomDataK8SAPI.StatefulSetList' operation on 'site'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if c.svc.Config().EnableAPIValidation {
		if rvFn := c.svc.GetRPCValidator("ves.io.schema.site.CustomDataK8SAPI.StatefulSetList"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.StatefulSetList(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, c.svc, "k8s.io.api.apps.v1.StatefulSetList", rsp)...)

	return rsp, nil
}

func NewCustomDataK8SAPIInprocClient(svc svcfw.Service) CustomDataK8SAPIClient {
	return &CustomDataK8SAPIInprocClient{svc: svc}
}

// RegisterGwCustomDataK8SAPIHandler registers with grpc-gw with an inproc-client backing so that
// rest to grpc happens without a grpc.Dial (thus avoiding additional certs for mTLS)
func RegisterGwCustomDataK8SAPIHandler(ctx context.Context, mux *runtime.ServeMux, svc interface{}) error {
	s, ok := svc.(svcfw.Service)
	if !ok {
		return fmt.Errorf("svc is not svcfw.Service")
	}
	return RegisterCustomDataK8SAPIHandlerClient(ctx, mux, NewCustomDataK8SAPIInprocClient(s))
}

var CustomDataK8SAPISwaggerJSON string = `{
    "swagger": "2.0",
    "info": {
        "title": "K8s monitoring APIs for a site",
        "description": "APIs to get monitoring data for K8s resources in a site.",
        "version": "version not set"
    },
    "schemes": [
        "http",
        "https"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "tags": null,
    "paths": {
        "/public/namespaces/system/site/{site}/api/v1/configmaps": {
            "get": {
                "summary": "ConfigMapList",
                "description": "API to get list of configmaps for a given namespace in a site.",
                "operationId": "ves.io.schema.site.CustomDataK8SAPI.ConfigMapList",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1ConfigMapList"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "site",
                        "description": "site\n\nx-example: \"site-1\"\nSite name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Site"
                    },
                    {
                        "name": "namespace",
                        "description": "x-example: \"ns1\"\nNamespace to scope the listing of configmaps in a site",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "x-displayname": "Namespace"
                    }
                ],
                "tags": [
                    "CustomDataK8SAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-site-CustomDataK8SAPI-ConfigMapList"
                },
                "x-ves-proto-rpc": "ves.io.schema.site.CustomDataK8SAPI.ConfigMapList"
            },
            "x-displayname": "Custom Data K8s API",
            "x-ves-proto-service": "ves.io.schema.site.CustomDataK8SAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/system/site/{site}/api/v1/endpoints": {
            "get": {
                "summary": "EndpointsList",
                "description": "API to get list of endpoints for a given namespace in a site.",
                "operationId": "ves.io.schema.site.CustomDataK8SAPI.EndpointsList",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1EndpointsList"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "site",
                        "description": "site\n\nx-example: \"site-1\"\nSite name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Site"
                    },
                    {
                        "name": "namespace",
                        "description": "x-example: \"ns1\"\nNamespace to scope the listing of endpoints in a site",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "x-displayname": "Namespace"
                    }
                ],
                "tags": [
                    "CustomDataK8SAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-site-CustomDataK8SAPI-EndpointsList"
                },
                "x-ves-proto-rpc": "ves.io.schema.site.CustomDataK8SAPI.EndpointsList"
            },
            "x-displayname": "Custom Data K8s API",
            "x-ves-proto-service": "ves.io.schema.site.CustomDataK8SAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/system/site/{site}/api/v1/namespaces": {
            "get": {
                "summary": "NamespaceList",
                "description": "API to get list of namespaces in a site.",
                "operationId": "ves.io.schema.site.CustomDataK8SAPI.NamespaceList",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1NamespaceList"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "site",
                        "description": "site\n\nx-example: \"site-1\"\nSite name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Site"
                    }
                ],
                "tags": [
                    "CustomDataK8SAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-site-CustomDataK8SAPI-NamespaceList"
                },
                "x-ves-proto-rpc": "ves.io.schema.site.CustomDataK8SAPI.NamespaceList"
            },
            "x-displayname": "Custom Data K8s API",
            "x-ves-proto-service": "ves.io.schema.site.CustomDataK8SAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/system/site/{site}/api/v1/namespaces/{namespace}/configmaps": {
            "get": {
                "summary": "ConfigMapList",
                "description": "API to get list of configmaps for a given namespace in a site.",
                "operationId": "ves.io.schema.site.CustomDataK8SAPI.ConfigMapList",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1ConfigMapList"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "site",
                        "description": "site\n\nx-example: \"site-1\"\nSite name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Site"
                    },
                    {
                        "name": "namespace",
                        "description": "namespace\n\nx-example: \"ns1\"\nNamespace to scope the listing of configmaps in a site",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    }
                ],
                "tags": [
                    "CustomDataK8SAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-site-CustomDataK8SAPI-ConfigMapList"
                },
                "x-ves-proto-rpc": "ves.io.schema.site.CustomDataK8SAPI.ConfigMapList"
            },
            "x-displayname": "Custom Data K8s API",
            "x-ves-proto-service": "ves.io.schema.site.CustomDataK8SAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/system/site/{site}/api/v1/namespaces/{namespace}/endpoints": {
            "get": {
                "summary": "EndpointsList",
                "description": "API to get list of endpoints for a given namespace in a site.",
                "operationId": "ves.io.schema.site.CustomDataK8SAPI.EndpointsList",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1EndpointsList"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "site",
                        "description": "site\n\nx-example: \"site-1\"\nSite name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Site"
                    },
                    {
                        "name": "namespace",
                        "description": "namespace\n\nx-example: \"ns1\"\nNamespace to scope the listing of endpoints in a site",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    }
                ],
                "tags": [
                    "CustomDataK8SAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-site-CustomDataK8SAPI-EndpointsList"
                },
                "x-ves-proto-rpc": "ves.io.schema.site.CustomDataK8SAPI.EndpointsList"
            },
            "x-displayname": "Custom Data K8s API",
            "x-ves-proto-service": "ves.io.schema.site.CustomDataK8SAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/system/site/{site}/api/v1/namespaces/{namespace}/persistentvolumeclaims": {
            "get": {
                "summary": "PersistentVolumeClaimList",
                "description": "API to get list of PVCs for a given namespace in a site.",
                "operationId": "ves.io.schema.site.CustomDataK8SAPI.PersistentVolumeClaimList",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1PersistentVolumeClaimList"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "site",
                        "description": "site\n\nx-example: \"site-1\"\nSite name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Site"
                    },
                    {
                        "name": "namespace",
                        "description": "namespace\n\nx-example: \"ns1\"\nNamespace to scope the listing of PVCs in a site",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    }
                ],
                "tags": [
                    "CustomDataK8SAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-site-CustomDataK8SAPI-PersistentVolumeClaimList"
                },
                "x-ves-proto-rpc": "ves.io.schema.site.CustomDataK8SAPI.PersistentVolumeClaimList"
            },
            "x-displayname": "Custom Data K8s API",
            "x-ves-proto-service": "ves.io.schema.site.CustomDataK8SAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/system/site/{site}/api/v1/namespaces/{namespace}/pods": {
            "get": {
                "summary": "PodList",
                "description": "API to get list of pods in a site for a given namespace.",
                "operationId": "ves.io.schema.site.CustomDataK8SAPI.PodList",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1PodList"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "site",
                        "description": "site\n\nx-example: \"site-1\"\nSite name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Site"
                    },
                    {
                        "name": "namespace",
                        "description": "namespace\n\nx-example: \"ns1\"\nNamespace to scope the listing of pods in a site",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    }
                ],
                "tags": [
                    "CustomDataK8SAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-site-CustomDataK8SAPI-PodList"
                },
                "x-ves-proto-rpc": "ves.io.schema.site.CustomDataK8SAPI.PodList"
            },
            "x-displayname": "Custom Data K8s API",
            "x-ves-proto-service": "ves.io.schema.site.CustomDataK8SAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/system/site/{site}/api/v1/namespaces/{namespace}/secrets": {
            "get": {
                "summary": "SecretList",
                "description": "API to get list of secrets for a given namespace in a site.",
                "operationId": "ves.io.schema.site.CustomDataK8SAPI.SecretList",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1SecretList"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "site",
                        "description": "site\n\nx-example: \"site-1\"\nSite name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Site"
                    },
                    {
                        "name": "namespace",
                        "description": "namespace\n\nx-example: \"ns1\"\nNamespace to scope the listing of secrets in a site",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    }
                ],
                "tags": [
                    "CustomDataK8SAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-site-CustomDataK8SAPI-SecretList"
                },
                "x-ves-proto-rpc": "ves.io.schema.site.CustomDataK8SAPI.SecretList"
            },
            "x-displayname": "Custom Data K8s API",
            "x-ves-proto-service": "ves.io.schema.site.CustomDataK8SAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/system/site/{site}/api/v1/namespaces/{namespace}/services": {
            "get": {
                "summary": "ServiceList",
                "description": "API to get list of services for a given namespace in a site.",
                "operationId": "ves.io.schema.site.CustomDataK8SAPI.ServiceList",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1ServiceList"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "site",
                        "description": "site\n\nx-example: \"site-1\"\nSite name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Site"
                    },
                    {
                        "name": "namespace",
                        "description": "namespace\n\nx-example: \"ns1\"\nNamespace to scope the listing of services in a site",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    }
                ],
                "tags": [
                    "CustomDataK8SAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-site-CustomDataK8SAPI-ServiceList"
                },
                "x-ves-proto-rpc": "ves.io.schema.site.CustomDataK8SAPI.ServiceList"
            },
            "x-displayname": "Custom Data K8s API",
            "x-ves-proto-service": "ves.io.schema.site.CustomDataK8SAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/system/site/{site}/api/v1/nodes": {
            "get": {
                "summary": "NodeList",
                "description": "API to get list of nodes in a site.",
                "operationId": "ves.io.schema.site.CustomDataK8SAPI.NodeList",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1NodeList"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "site",
                        "description": "site\n\nx-example: \"site-1\"\nSite name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Site"
                    }
                ],
                "tags": [
                    "CustomDataK8SAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-site-CustomDataK8SAPI-NodeList"
                },
                "x-ves-proto-rpc": "ves.io.schema.site.CustomDataK8SAPI.NodeList"
            },
            "x-displayname": "Custom Data K8s API",
            "x-ves-proto-service": "ves.io.schema.site.CustomDataK8SAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/system/site/{site}/api/v1/persistentvolumeclaims": {
            "get": {
                "summary": "PersistentVolumeClaimList",
                "description": "API to get list of PVCs for a given namespace in a site.",
                "operationId": "ves.io.schema.site.CustomDataK8SAPI.PersistentVolumeClaimList",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1PersistentVolumeClaimList"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "site",
                        "description": "site\n\nx-example: \"site-1\"\nSite name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Site"
                    },
                    {
                        "name": "namespace",
                        "description": "x-example: \"ns1\"\nNamespace to scope the listing of PVCs in a site",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "x-displayname": "Namespace"
                    }
                ],
                "tags": [
                    "CustomDataK8SAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-site-CustomDataK8SAPI-PersistentVolumeClaimList"
                },
                "x-ves-proto-rpc": "ves.io.schema.site.CustomDataK8SAPI.PersistentVolumeClaimList"
            },
            "x-displayname": "Custom Data K8s API",
            "x-ves-proto-service": "ves.io.schema.site.CustomDataK8SAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/system/site/{site}/api/v1/persistentvolumes": {
            "get": {
                "summary": "PersistentVolumeList",
                "description": "API to get list of Persistent Volumes in a site.",
                "operationId": "ves.io.schema.site.CustomDataK8SAPI.PersistentVolumeList",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1PersistentVolumeList"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "site",
                        "description": "site\n\nx-example: \"site-1\"\nSite name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Site"
                    }
                ],
                "tags": [
                    "CustomDataK8SAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-site-CustomDataK8SAPI-PersistentVolumeList"
                },
                "x-ves-proto-rpc": "ves.io.schema.site.CustomDataK8SAPI.PersistentVolumeList"
            },
            "x-displayname": "Custom Data K8s API",
            "x-ves-proto-service": "ves.io.schema.site.CustomDataK8SAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/system/site/{site}/api/v1/pods": {
            "get": {
                "summary": "PodList",
                "description": "API to get list of pods in a site for a given namespace.",
                "operationId": "ves.io.schema.site.CustomDataK8SAPI.PodList",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1PodList"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "site",
                        "description": "site\n\nx-example: \"site-1\"\nSite name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Site"
                    },
                    {
                        "name": "namespace",
                        "description": "x-example: \"ns1\"\nNamespace to scope the listing of pods in a site",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "x-displayname": "Namespace"
                    }
                ],
                "tags": [
                    "CustomDataK8SAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-site-CustomDataK8SAPI-PodList"
                },
                "x-ves-proto-rpc": "ves.io.schema.site.CustomDataK8SAPI.PodList"
            },
            "x-displayname": "Custom Data K8s API",
            "x-ves-proto-service": "ves.io.schema.site.CustomDataK8SAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/system/site/{site}/api/v1/secrets": {
            "get": {
                "summary": "SecretList",
                "description": "API to get list of secrets for a given namespace in a site.",
                "operationId": "ves.io.schema.site.CustomDataK8SAPI.SecretList",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1SecretList"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "site",
                        "description": "site\n\nx-example: \"site-1\"\nSite name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Site"
                    },
                    {
                        "name": "namespace",
                        "description": "x-example: \"ns1\"\nNamespace to scope the listing of secrets in a site",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "x-displayname": "Namespace"
                    }
                ],
                "tags": [
                    "CustomDataK8SAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-site-CustomDataK8SAPI-SecretList"
                },
                "x-ves-proto-rpc": "ves.io.schema.site.CustomDataK8SAPI.SecretList"
            },
            "x-displayname": "Custom Data K8s API",
            "x-ves-proto-service": "ves.io.schema.site.CustomDataK8SAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/system/site/{site}/api/v1/services": {
            "get": {
                "summary": "ServiceList",
                "description": "API to get list of services for a given namespace in a site.",
                "operationId": "ves.io.schema.site.CustomDataK8SAPI.ServiceList",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1ServiceList"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "site",
                        "description": "site\n\nx-example: \"site-1\"\nSite name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Site"
                    },
                    {
                        "name": "namespace",
                        "description": "x-example: \"ns1\"\nNamespace to scope the listing of services in a site",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "x-displayname": "Namespace"
                    }
                ],
                "tags": [
                    "CustomDataK8SAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-site-CustomDataK8SAPI-ServiceList"
                },
                "x-ves-proto-rpc": "ves.io.schema.site.CustomDataK8SAPI.ServiceList"
            },
            "x-displayname": "Custom Data K8s API",
            "x-ves-proto-service": "ves.io.schema.site.CustomDataK8SAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/system/site/{site}/apis/apps/v1/daemonsets": {
            "get": {
                "summary": "DaemonSetList",
                "description": "API to get list of daemon sets for a given namespace in a site.",
                "operationId": "ves.io.schema.site.CustomDataK8SAPI.DaemonSetList",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1DaemonSetList"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "site",
                        "description": "site\n\nx-example: \"site-1\"\nSite name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Site"
                    },
                    {
                        "name": "namespace",
                        "description": "x-example: \"ns1\"\nNamespace to scope the listing of daemon sets in a site",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "x-displayname": "Namespace"
                    }
                ],
                "tags": [
                    "CustomDataK8SAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-site-CustomDataK8SAPI-DaemonSetList"
                },
                "x-ves-proto-rpc": "ves.io.schema.site.CustomDataK8SAPI.DaemonSetList"
            },
            "x-displayname": "Custom Data K8s API",
            "x-ves-proto-service": "ves.io.schema.site.CustomDataK8SAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/system/site/{site}/apis/apps/v1/deployments": {
            "get": {
                "summary": "DeploymentList",
                "description": "API to get list of deployments for a given namespace in a site.",
                "operationId": "ves.io.schema.site.CustomDataK8SAPI.DeploymentList",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1DeploymentList"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "site",
                        "description": "site\n\nx-example: \"site-1\"\nSite name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Site"
                    },
                    {
                        "name": "namespace",
                        "description": "x-example: \"ns1\"\nNamespace to scope the listing of deployments in a site",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "x-displayname": "Namespace"
                    }
                ],
                "tags": [
                    "CustomDataK8SAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-site-CustomDataK8SAPI-DeploymentList"
                },
                "x-ves-proto-rpc": "ves.io.schema.site.CustomDataK8SAPI.DeploymentList"
            },
            "x-displayname": "Custom Data K8s API",
            "x-ves-proto-service": "ves.io.schema.site.CustomDataK8SAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/system/site/{site}/apis/apps/v1/namespaces/{namespace}/daemonsets": {
            "get": {
                "summary": "DaemonSetList",
                "description": "API to get list of daemon sets for a given namespace in a site.",
                "operationId": "ves.io.schema.site.CustomDataK8SAPI.DaemonSetList",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1DaemonSetList"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "site",
                        "description": "site\n\nx-example: \"site-1\"\nSite name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Site"
                    },
                    {
                        "name": "namespace",
                        "description": "namespace\n\nx-example: \"ns1\"\nNamespace to scope the listing of daemon sets in a site",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    }
                ],
                "tags": [
                    "CustomDataK8SAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-site-CustomDataK8SAPI-DaemonSetList"
                },
                "x-ves-proto-rpc": "ves.io.schema.site.CustomDataK8SAPI.DaemonSetList"
            },
            "x-displayname": "Custom Data K8s API",
            "x-ves-proto-service": "ves.io.schema.site.CustomDataK8SAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/system/site/{site}/apis/apps/v1/namespaces/{namespace}/deployments": {
            "get": {
                "summary": "DeploymentList",
                "description": "API to get list of deployments for a given namespace in a site.",
                "operationId": "ves.io.schema.site.CustomDataK8SAPI.DeploymentList",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1DeploymentList"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "site",
                        "description": "site\n\nx-example: \"site-1\"\nSite name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Site"
                    },
                    {
                        "name": "namespace",
                        "description": "namespace\n\nx-example: \"ns1\"\nNamespace to scope the listing of deployments in a site",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    }
                ],
                "tags": [
                    "CustomDataK8SAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-site-CustomDataK8SAPI-DeploymentList"
                },
                "x-ves-proto-rpc": "ves.io.schema.site.CustomDataK8SAPI.DeploymentList"
            },
            "x-displayname": "Custom Data K8s API",
            "x-ves-proto-service": "ves.io.schema.site.CustomDataK8SAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/system/site/{site}/apis/apps/v1/namespaces/{namespace}/replicasets": {
            "get": {
                "summary": "ReplicaSetList",
                "description": "API to get list of replica sets for a given namespace in a site.",
                "operationId": "ves.io.schema.site.CustomDataK8SAPI.ReplicaSetList",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1ReplicaSetList"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "site",
                        "description": "site\n\nx-example: \"site-1\"\nSite name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Site"
                    },
                    {
                        "name": "namespace",
                        "description": "namespace\n\nx-example: \"ns1\"\nNamespace to scope the listing of replication sets in a site",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    }
                ],
                "tags": [
                    "CustomDataK8SAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-site-CustomDataK8SAPI-ReplicaSetList"
                },
                "x-ves-proto-rpc": "ves.io.schema.site.CustomDataK8SAPI.ReplicaSetList"
            },
            "x-displayname": "Custom Data K8s API",
            "x-ves-proto-service": "ves.io.schema.site.CustomDataK8SAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/system/site/{site}/apis/apps/v1/namespaces/{namespace}/statefulsets": {
            "get": {
                "summary": "StatefulSetList",
                "description": "API to get list of stateful sets for a given namespace in a site.",
                "operationId": "ves.io.schema.site.CustomDataK8SAPI.StatefulSetList",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1StatefulSetList"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "site",
                        "description": "site\n\nx-example: \"site-1\"\nSite name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Site"
                    },
                    {
                        "name": "namespace",
                        "description": "namespace\n\nx-example: \"ns1\"\nNamespace to scope the listing of stateful sets in a site",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    }
                ],
                "tags": [
                    "CustomDataK8SAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-site-CustomDataK8SAPI-StatefulSetList"
                },
                "x-ves-proto-rpc": "ves.io.schema.site.CustomDataK8SAPI.StatefulSetList"
            },
            "x-displayname": "Custom Data K8s API",
            "x-ves-proto-service": "ves.io.schema.site.CustomDataK8SAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/system/site/{site}/apis/apps/v1/replicasets": {
            "get": {
                "summary": "ReplicaSetList",
                "description": "API to get list of replica sets for a given namespace in a site.",
                "operationId": "ves.io.schema.site.CustomDataK8SAPI.ReplicaSetList",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1ReplicaSetList"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "site",
                        "description": "site\n\nx-example: \"site-1\"\nSite name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Site"
                    },
                    {
                        "name": "namespace",
                        "description": "x-example: \"ns1\"\nNamespace to scope the listing of replication sets in a site",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "x-displayname": "Namespace"
                    }
                ],
                "tags": [
                    "CustomDataK8SAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-site-CustomDataK8SAPI-ReplicaSetList"
                },
                "x-ves-proto-rpc": "ves.io.schema.site.CustomDataK8SAPI.ReplicaSetList"
            },
            "x-displayname": "Custom Data K8s API",
            "x-ves-proto-service": "ves.io.schema.site.CustomDataK8SAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/system/site/{site}/apis/apps/v1/statefulsets": {
            "get": {
                "summary": "StatefulSetList",
                "description": "API to get list of stateful sets for a given namespace in a site.",
                "operationId": "ves.io.schema.site.CustomDataK8SAPI.StatefulSetList",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1StatefulSetList"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "site",
                        "description": "site\n\nx-example: \"site-1\"\nSite name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Site"
                    },
                    {
                        "name": "namespace",
                        "description": "x-example: \"ns1\"\nNamespace to scope the listing of stateful sets in a site",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "x-displayname": "Namespace"
                    }
                ],
                "tags": [
                    "CustomDataK8SAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-site-CustomDataK8SAPI-StatefulSetList"
                },
                "x-ves-proto-rpc": "ves.io.schema.site.CustomDataK8SAPI.StatefulSetList"
            },
            "x-displayname": "Custom Data K8s API",
            "x-ves-proto-service": "ves.io.schema.site.CustomDataK8SAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/system/site/{site}/apis/batch/v1/jobs": {
            "get": {
                "summary": "JobList",
                "description": "API to get list of jobs for a given namespace in a site.",
                "operationId": "ves.io.schema.site.CustomDataK8SAPI.JobList",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1JobList"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "site",
                        "description": "site\n\nx-example: \"site-1\"\nSite name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Site"
                    },
                    {
                        "name": "namespace",
                        "description": "x-example: \"ns1\"\nNamespace to scope the listing of jobs in a site",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "x-displayname": "Namespace"
                    }
                ],
                "tags": [
                    "CustomDataK8SAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-site-CustomDataK8SAPI-JobList"
                },
                "x-ves-proto-rpc": "ves.io.schema.site.CustomDataK8SAPI.JobList"
            },
            "x-displayname": "Custom Data K8s API",
            "x-ves-proto-service": "ves.io.schema.site.CustomDataK8SAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/system/site/{site}/apis/batch/v1/namespaces/{namespace}/jobs": {
            "get": {
                "summary": "JobList",
                "description": "API to get list of jobs for a given namespace in a site.",
                "operationId": "ves.io.schema.site.CustomDataK8SAPI.JobList",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1JobList"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "site",
                        "description": "site\n\nx-example: \"site-1\"\nSite name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Site"
                    },
                    {
                        "name": "namespace",
                        "description": "namespace\n\nx-example: \"ns1\"\nNamespace to scope the listing of jobs in a site",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    }
                ],
                "tags": [
                    "CustomDataK8SAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-site-CustomDataK8SAPI-JobList"
                },
                "x-ves-proto-rpc": "ves.io.schema.site.CustomDataK8SAPI.JobList"
            },
            "x-displayname": "Custom Data K8s API",
            "x-ves-proto-service": "ves.io.schema.site.CustomDataK8SAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/system/site/{site}/apis/batch/v1beta1/cronjobs": {
            "get": {
                "summary": "CronJobList",
                "description": "API to get list of cronjobs for a given namespace in a site.",
                "operationId": "ves.io.schema.site.CustomDataK8SAPI.CronJobList",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1beta1CronJobList"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "site",
                        "description": "site\n\nx-example: \"site-1\"\nSite name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Site"
                    },
                    {
                        "name": "namespace",
                        "description": "x-example: \"ns1\"\nNamespace to scope the listing of cronjobs in a site",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "x-displayname": "Namespace"
                    }
                ],
                "tags": [
                    "CustomDataK8SAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-site-CustomDataK8SAPI-CronJobList"
                },
                "x-ves-proto-rpc": "ves.io.schema.site.CustomDataK8SAPI.CronJobList"
            },
            "x-displayname": "Custom Data K8s API",
            "x-ves-proto-service": "ves.io.schema.site.CustomDataK8SAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/system/site/{site}/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {
            "get": {
                "summary": "CronJobList",
                "description": "API to get list of cronjobs for a given namespace in a site.",
                "operationId": "ves.io.schema.site.CustomDataK8SAPI.CronJobList",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1beta1CronJobList"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "site",
                        "description": "site\n\nx-example: \"site-1\"\nSite name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Site"
                    },
                    {
                        "name": "namespace",
                        "description": "namespace\n\nx-example: \"ns1\"\nNamespace to scope the listing of cronjobs in a site",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    }
                ],
                "tags": [
                    "CustomDataK8SAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-site-CustomDataK8SAPI-CronJobList"
                },
                "x-ves-proto-rpc": "ves.io.schema.site.CustomDataK8SAPI.CronJobList"
            },
            "x-displayname": "Custom Data K8s API",
            "x-ves-proto-service": "ves.io.schema.site.CustomDataK8SAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        }
    },
    "definitions": {
        "intstrIntOrString": {
            "type": "object",
            "description": "+protobuf=true\n+protobuf.options.(gogoproto.goproto_stringer)=false\n+k8s:openapi-gen=true",
            "title": "IntOrString is a type that can hold an int32 or a string.  When used in\nJSON or YAML marshalling and unmarshalling, it produces or consumes the\ninner type.  This allows you to have, for example, a JSON field that can\naccept a name or number.\nTODO: Rename to Int32OrString",
            "properties": {
                "intVal": {
                    "type": "integer",
                    "format": "int32"
                },
                "strVal": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "format": "int64"
                }
            }
        },
        "resourceQuantity": {
            "type": "object",
            "description": "Quantity is a fixed-point representation of a number.\nIt provides convenient marshaling/unmarshaling in JSON and YAML,\nin addition to String() and AsInt64() accessors.\n\nThe serialization format is:\n\n\u003cquantity\u003e        ::= \u003csignedNumber\u003e\u003csuffix\u003e\n  (Note that \u003csuffix\u003e may be empty, from the \"\" case in \u003cdecimalSI\u003e.)\n\u003cdigit\u003e           ::= 0 | 1 | ... | 9\n\u003cdigits\u003e          ::= \u003cdigit\u003e | \u003cdigit\u003e\u003cdigits\u003e\n\u003cnumber\u003e          ::= \u003cdigits\u003e | \u003cdigits\u003e.\u003cdigits\u003e | \u003cdigits\u003e. | .\u003cdigits\u003e\n\u003csign\u003e            ::= \"+\" | \"-\"\n\u003csignedNumber\u003e    ::= \u003cnumber\u003e | \u003csign\u003e\u003cnumber\u003e\n\u003csuffix\u003e          ::= \u003cbinarySI\u003e | \u003cdecimalExponent\u003e | \u003cdecimalSI\u003e\n\u003cbinarySI\u003e        ::= Ki | Mi | Gi | Ti | Pi | Ei\n  (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)\n\u003cdecimalSI\u003e       ::= m | \"\" | k | M | G | T | P | E\n  (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)\n\u003cdecimalExponent\u003e ::= \"e\" \u003csignedNumber\u003e | \"E\" \u003csignedNumber\u003e\n\nNo matter which of the three exponent forms is used, no quantity may represent\na number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal\nplaces. Numbers larger or more precise will be capped or rounded up.\n(E.g.: 0.1m will rounded up to 1m.)\nThis may be extended in the future if we require larger or smaller quantities.\n\nWhen a Quantity is parsed from a string, it will remember the type of suffix\nit had, and will use the same type again when it is serialized.\n\nBefore serializing, Quantity will be put in \"canonical form\".\nThis means that Exponent/suffix will be adjusted up or down (with a\ncorresponding increase or decrease in Mantissa) such that:\n  a. No precision is lost\n  b. No fractional digits will be emitted\n  c. The exponent (or suffix) is as large as possible.\nThe sign will be omitted unless the number is negative.\n\nExamples:\n  1.5 will be serialized as \"1500m\"\n  1.5Gi will be serialized as \"1536Mi\"\n\nNote that the quantity will NEVER be internally represented by a\nfloating point number. That is the whole point of this exercise.\n\nNon-canonical values will still parse as long as they are well formed,\nbut will be re-emitted in their canonical form. (So always use canonical\nform, or don't diff.)\n\nThis format is intended to make it difficult to use these numbers without\nwriting some sort of special handling code in the hopes that that will\ncause implementors to also use a fixed point implementation.\n\n+protobuf=true\n+protobuf.embed=string\n+protobuf.options.marshal=false\n+protobuf.options.(gogoproto.goproto_stringer)=false\n+k8s:deepcopy-gen=true\n+k8s:openapi-gen=true",
            "properties": {
                "string": {
                    "type": "string"
                }
            }
        },
        "v1AWSElasticBlockStoreVolumeSource": {
            "type": "object",
            "description": "Represents a Persistent Disk resource in AWS.\n\nAn AWS EBS disk must exist before mounting to a container. The disk\nmust also be in the same AWS zone as the kubelet. An AWS EBS disk\ncan only be mounted as read/write once. AWS EBS volumes support\nownership management and SELinux relabeling.",
            "properties": {
                "fsType": {
                    "type": "string",
                    "title": "Filesystem type of the volume that you want to mount.\nTip: Ensure that the filesystem type is supported by the host operating system.\nExamples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore\nTODO: how do we prevent errors in the filesystem from compromising the machine\n+optional"
                },
                "partition": {
                    "type": "integer",
                    "title": "The partition in the volume that you want to mount.\nIf omitted, the default is to mount by volume name.\nExamples: For volume /dev/sda1, you specify the partition as \"1\".\nSimilarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty).\n+optional",
                    "format": "int32"
                },
                "readOnly": {
                    "type": "boolean",
                    "title": "Specify \"true\" to force and set the ReadOnly property in VolumeMounts to \"true\".\nIf omitted, the default is \"false\".\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore\n+optional",
                    "format": "boolean"
                },
                "volumeID": {
                    "type": "string",
                    "title": "Unique ID of the persistent disk resource in AWS (Amazon EBS volume).\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore"
                }
            }
        },
        "v1Affinity": {
            "type": "object",
            "description": "Affinity is a group of affinity scheduling rules.",
            "properties": {
                "nodeAffinity": {
                    "title": "Describes node affinity scheduling rules for the pod.\n+optional",
                    "$ref": "#/definitions/v1NodeAffinity"
                },
                "podAffinity": {
                    "title": "Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).\n+optional",
                    "$ref": "#/definitions/v1PodAffinity"
                },
                "podAntiAffinity": {
                    "title": "Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).\n+optional",
                    "$ref": "#/definitions/v1PodAntiAffinity"
                }
            }
        },
        "v1AttachedVolume": {
            "type": "object",
            "title": "AttachedVolume describes a volume attached to a node",
            "properties": {
                "devicePath": {
                    "type": "string",
                    "title": "DevicePath represents the device path where the volume should be available"
                },
                "name": {
                    "type": "string",
                    "title": "Name of the attached volume"
                }
            }
        },
        "v1AzureDiskVolumeSource": {
            "type": "object",
            "description": "AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.",
            "properties": {
                "cachingMode": {
                    "type": "string",
                    "title": "Host Caching mode: None, Read Only, Read Write.\n+optional"
                },
                "diskName": {
                    "type": "string",
                    "title": "The Name of the data disk in the blob storage"
                },
                "diskURI": {
                    "type": "string",
                    "title": "The URI the data disk in the blob storage"
                },
                "fsType": {
                    "type": "string",
                    "title": "Filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n+optional"
                },
                "kind": {
                    "type": "string",
                    "title": "Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared"
                },
                "readOnly": {
                    "type": "boolean",
                    "title": "Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\n+optional",
                    "format": "boolean"
                }
            }
        },
        "v1AzureFilePersistentVolumeSource": {
            "type": "object",
            "description": "AzureFile represents an Azure File Service mount on the host and bind mount to the pod.",
            "properties": {
                "readOnly": {
                    "type": "boolean",
                    "title": "Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\n+optional",
                    "format": "boolean"
                },
                "secretName": {
                    "type": "string",
                    "title": "the name of secret that contains Azure Storage Account Name and Key"
                },
                "secretNamespace": {
                    "type": "string",
                    "title": "the namespace of the secret that contains Azure Storage Account Name and Key\ndefault is the same as the Pod\n+optional"
                },
                "shareName": {
                    "type": "string",
                    "title": "Share Name"
                }
            }
        },
        "v1AzureFileVolumeSource": {
            "type": "object",
            "description": "AzureFile represents an Azure File Service mount on the host and bind mount to the pod.",
            "properties": {
                "readOnly": {
                    "type": "boolean",
                    "title": "Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\n+optional",
                    "format": "boolean"
                },
                "secretName": {
                    "type": "string",
                    "title": "the name of secret that contains Azure Storage Account Name and Key"
                },
                "shareName": {
                    "type": "string",
                    "title": "Share Name"
                }
            }
        },
        "v1CSIPersistentVolumeSource": {
            "type": "object",
            "title": "Represents storage that is managed by an external CSI volume driver (Beta feature)",
            "properties": {
                "controllerExpandSecretRef": {
                    "title": "ControllerExpandSecretRef is a reference to the secret object containing\nsensitive information to pass to the CSI driver to complete the CSI\nControllerExpandVolume call.\nThis is an alpha field and requires enabling ExpandCSIVolumes feature gate.\nThis field is optional, and may be empty if no secret is required. If the\nsecret object contains more than one secret, all secrets are passed.\n+optional",
                    "$ref": "#/definitions/v1SecretReference"
                },
                "controllerPublishSecretRef": {
                    "title": "ControllerPublishSecretRef is a reference to the secret object containing\nsensitive information to pass to the CSI driver to complete the CSI\nControllerPublishVolume and ControllerUnpublishVolume calls.\nThis field is optional, and may be empty if no secret is required. If the\nsecret object contains more than one secret, all secrets are passed.\n+optional",
                    "$ref": "#/definitions/v1SecretReference"
                },
                "driver": {
                    "type": "string",
                    "description": "Driver is the name of the driver to use for this volume.\nRequired."
                },
                "fsType": {
                    "type": "string",
                    "title": "Filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\".\n+optional"
                },
                "nodePublishSecretRef": {
                    "title": "NodePublishSecretRef is a reference to the secret object containing\nsensitive information to pass to the CSI driver to complete the CSI\nNodePublishVolume and NodeUnpublishVolume calls.\nThis field is optional, and may be empty if no secret is required. If the\nsecret object contains more than one secret, all secrets are passed.\n+optional",
                    "$ref": "#/definitions/v1SecretReference"
                },
                "nodeStageSecretRef": {
                    "title": "NodeStageSecretRef is a reference to the secret object containing sensitive\ninformation to pass to the CSI driver to complete the CSI NodeStageVolume\nand NodeStageVolume and NodeUnstageVolume calls.\nThis field is optional, and may be empty if no secret is required. If the\nsecret object contains more than one secret, all secrets are passed.\n+optional",
                    "$ref": "#/definitions/v1SecretReference"
                },
                "readOnly": {
                    "type": "boolean",
                    "title": "Optional: The value to pass to ControllerPublishVolumeRequest.\nDefaults to false (read/write).\n+optional",
                    "format": "boolean"
                },
                "volumeAttributes": {
                    "type": "object",
                    "title": "Attributes of the volume to publish.\n+optional"
                },
                "volumeHandle": {
                    "type": "string",
                    "description": "VolumeHandle is the unique volume name returned by the CSI volume\nplugin’s CreateVolume to refer to the volume on all subsequent calls.\nRequired."
                }
            }
        },
        "v1CSIVolumeSource": {
            "type": "object",
            "title": "Represents a source location of a volume to mount, managed by an external CSI driver",
            "properties": {
                "driver": {
                    "type": "string",
                    "description": "Driver is the name of the CSI driver that handles this volume.\nConsult with your admin for the correct name as registered in the cluster."
                },
                "fsType": {
                    "type": "string",
                    "title": "Filesystem type to mount. Ex. \"ext4\", \"xfs\", \"ntfs\".\nIf not provided, the empty value is passed to the associated CSI driver\nwhich will determine the default filesystem to apply.\n+optional"
                },
                "nodePublishSecretRef": {
                    "title": "NodePublishSecretRef is a reference to the secret object containing\nsensitive information to pass to the CSI driver to complete the CSI\nNodePublishVolume and NodeUnpublishVolume calls.\nThis field is optional, and  may be empty if no secret is required. If the\nsecret object contains more than one secret, all secret references are passed.\n+optional",
                    "$ref": "#/definitions/v1LocalObjectReference"
                },
                "readOnly": {
                    "type": "boolean",
                    "title": "Specifies a read-only configuration for the volume.\nDefaults to false (read/write).\n+optional",
                    "format": "boolean"
                },
                "volumeAttributes": {
                    "type": "object",
                    "title": "VolumeAttributes stores driver-specific properties that are passed to the CSI\ndriver. Consult your driver's documentation for supported values.\n+optional"
                }
            }
        },
        "v1Capabilities": {
            "type": "object",
            "description": "Adds and removes POSIX capabilities from running containers.",
            "properties": {
                "add": {
                    "type": "array",
                    "title": "Added capabilities\n+optional",
                    "items": {
                        "type": "string"
                    }
                },
                "drop": {
                    "type": "array",
                    "title": "Removed capabilities\n+optional",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "v1CephFSPersistentVolumeSource": {
            "type": "object",
            "description": "Represents a Ceph Filesystem mount that lasts the lifetime of a pod\nCephfs volumes do not support ownership management or SELinux relabeling.",
            "properties": {
                "monitors": {
                    "type": "array",
                    "title": "Required: Monitors is a collection of Ceph monitors\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
                    "items": {
                        "type": "string"
                    }
                },
                "path": {
                    "type": "string",
                    "title": "Optional: Used as the mounted root, rather than the full Ceph tree, default is /\n+optional"
                },
                "readOnly": {
                    "type": "boolean",
                    "title": "Optional: Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it\n+optional",
                    "format": "boolean"
                },
                "secretFile": {
                    "type": "string",
                    "title": "Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it\n+optional"
                },
                "secretRef": {
                    "title": "Optional: SecretRef is reference to the authentication secret for User, default is empty.\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it\n+optional",
                    "$ref": "#/definitions/v1SecretReference"
                },
                "user": {
                    "type": "string",
                    "title": "Optional: User is the rados user name, default is admin\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it\n+optional"
                }
            }
        },
        "v1CephFSVolumeSource": {
            "type": "object",
            "description": "Represents a Ceph Filesystem mount that lasts the lifetime of a pod\nCephfs volumes do not support ownership management or SELinux relabeling.",
            "properties": {
                "monitors": {
                    "type": "array",
                    "title": "Required: Monitors is a collection of Ceph monitors\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
                    "items": {
                        "type": "string"
                    }
                },
                "path": {
                    "type": "string",
                    "title": "Optional: Used as the mounted root, rather than the full Ceph tree, default is /\n+optional"
                },
                "readOnly": {
                    "type": "boolean",
                    "title": "Optional: Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it\n+optional",
                    "format": "boolean"
                },
                "secretFile": {
                    "type": "string",
                    "title": "Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it\n+optional"
                },
                "secretRef": {
                    "title": "Optional: SecretRef is reference to the authentication secret for User, default is empty.\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it\n+optional",
                    "$ref": "#/definitions/v1LocalObjectReference"
                },
                "user": {
                    "type": "string",
                    "title": "Optional: User is the rados user name, default is admin\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it\n+optional"
                }
            }
        },
        "v1CinderPersistentVolumeSource": {
            "type": "object",
            "description": "Represents a cinder volume resource in Openstack.\nA Cinder volume must exist before mounting to a container.\nThe volume must also be in the same region as the kubelet.\nCinder volumes support ownership management and SELinux relabeling.",
            "properties": {
                "fsType": {
                    "type": "string",
                    "title": "Filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nExamples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\nMore info: https://examples.k8s.io/mysql-cinder-pd/README.md\n+optional"
                },
                "readOnly": {
                    "type": "boolean",
                    "title": "Optional: Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\nMore info: https://examples.k8s.io/mysql-cinder-pd/README.md\n+optional",
                    "format": "boolean"
                },
                "secretRef": {
                    "title": "Optional: points to a secret object containing parameters used to connect\nto OpenStack.\n+optional",
                    "$ref": "#/definitions/v1SecretReference"
                },
                "volumeID": {
                    "type": "string",
                    "title": "volume id used to identify the volume in cinder.\nMore info: https://examples.k8s.io/mysql-cinder-pd/README.md"
                }
            }
        },
        "v1CinderVolumeSource": {
            "type": "object",
            "description": "Represents a cinder volume resource in Openstack.\nA Cinder volume must exist before mounting to a container.\nThe volume must also be in the same region as the kubelet.\nCinder volumes support ownership management and SELinux relabeling.",
            "properties": {
                "fsType": {
                    "type": "string",
                    "title": "Filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nExamples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\nMore info: https://examples.k8s.io/mysql-cinder-pd/README.md\n+optional"
                },
                "readOnly": {
                    "type": "boolean",
                    "title": "Optional: Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\nMore info: https://examples.k8s.io/mysql-cinder-pd/README.md\n+optional",
                    "format": "boolean"
                },
                "secretRef": {
                    "title": "Optional: points to a secret object containing parameters used to connect\nto OpenStack.\n+optional",
                    "$ref": "#/definitions/v1LocalObjectReference"
                },
                "volumeID": {
                    "type": "string",
                    "title": "volume id used to identify the volume in cinder.\nMore info: https://examples.k8s.io/mysql-cinder-pd/README.md"
                }
            }
        },
        "v1ClientIPConfig": {
            "type": "object",
            "description": "ClientIPConfig represents the configurations of Client IP based session affinity.",
            "properties": {
                "timeoutSeconds": {
                    "type": "integer",
                    "title": "timeoutSeconds specifies the seconds of ClientIP type session sticky time.\nThe value must be \u003e0 \u0026\u0026 \u003c=86400(for 1 day) if ServiceAffinity == \"ClientIP\".\nDefault value is 10800(for 3 hours).\n+optional",
                    "format": "int32"
                }
            }
        },
        "v1ConfigMap": {
            "type": "object",
            "description": "ConfigMap holds configuration data for pods to consume.",
            "properties": {
                "binaryData": {
                    "type": "object",
                    "title": "BinaryData contains the binary data.\nEach key must consist of alphanumeric characters, '-', '_' or '.'.\nBinaryData can contain byte sequences that are not in the UTF-8 range.\nThe keys stored in BinaryData must not overlap with the ones in\nthe Data field, this is enforced during validation process.\nUsing this field will require 1.10+ apiserver and\nkubelet.\n+optional"
                },
                "data": {
                    "type": "object",
                    "title": "Data contains the configuration data.\nEach key must consist of alphanumeric characters, '-', '_' or '.'.\nValues with non-UTF-8 byte sequences must use the BinaryData field.\nThe keys stored in Data must not overlap with the keys in\nthe BinaryData field, this is enforced during validation process.\n+optional"
                },
                "metadata": {
                    "title": "Standard object's metadata.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
                    "$ref": "#/definitions/v1ObjectMeta"
                }
            }
        },
        "v1ConfigMapEnvSource": {
            "type": "object",
            "description": "ConfigMapEnvSource selects a ConfigMap to populate the environment\nvariables with.\n\nThe contents of the target ConfigMap's Data field will represent the\nkey-value pairs as environment variables.",
            "properties": {
                "localObjectReference": {
                    "description": "The ConfigMap to select from.",
                    "$ref": "#/definitions/v1LocalObjectReference"
                },
                "optional": {
                    "type": "boolean",
                    "title": "Specify whether the ConfigMap must be defined\n+optional",
                    "format": "boolean"
                }
            }
        },
        "v1ConfigMapKeySelector": {
            "type": "object",
            "description": "Selects a key from a ConfigMap.",
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The key to select."
                },
                "localObjectReference": {
                    "description": "The ConfigMap to select from.",
                    "$ref": "#/definitions/v1LocalObjectReference"
                },
                "optional": {
                    "type": "boolean",
                    "title": "Specify whether the ConfigMap or its key must be defined\n+optional",
                    "format": "boolean"
                }
            }
        },
        "v1ConfigMapList": {
            "type": "object",
            "description": "ConfigMapList is a resource containing a list of ConfigMap objects.",
            "properties": {
                "items": {
                    "type": "array",
                    "description": "Items is the list of ConfigMaps.",
                    "items": {
                        "$ref": "#/definitions/v1ConfigMap"
                    }
                },
                "metadata": {
                    "title": "More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
                    "$ref": "#/definitions/v1ListMeta"
                }
            }
        },
        "v1ConfigMapNodeConfigSource": {
            "type": "object",
            "description": "ConfigMapNodeConfigSource contains the information to reference a ConfigMap as a config source for the Node.",
            "properties": {
                "kubeletConfigKey": {
                    "type": "string",
                    "description": "KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure\nThis field is required in all cases."
                },
                "name": {
                    "type": "string",
                    "description": "Name is the metadata.name of the referenced ConfigMap.\nThis field is required in all cases."
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace is the metadata.namespace of the referenced ConfigMap.\nThis field is required in all cases."
                },
                "resourceVersion": {
                    "type": "string",
                    "title": "ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap.\nThis field is forbidden in Node.Spec, and required in Node.Status.\n+optional"
                },
                "uid": {
                    "type": "string",
                    "title": "UID is the metadata.UID of the referenced ConfigMap.\nThis field is forbidden in Node.Spec, and required in Node.Status.\n+optional"
                }
            }
        },
        "v1ConfigMapProjection": {
            "type": "object",
            "description": "Adapts a ConfigMap into a projected volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a\nprojected volume as files using the keys in the Data field as the file names,\nunless the items element is populated with specific mappings of keys to paths.\nNote that this is identical to a configmap volume source without the default\nmode.",
            "properties": {
                "items": {
                    "type": "array",
                    "title": "If unspecified, each key-value pair in the Data field of the referenced\nConfigMap will be projected into the volume as a file whose name is the\nkey and content is the value. If specified, the listed keys will be\nprojected into the specified paths, and unlisted keys will not be\npresent. If a key is specified which is not present in the ConfigMap,\nthe volume setup will error unless it is marked optional. Paths must be\nrelative and may not contain the '..' path or start with '..'.\n+optional",
                    "items": {
                        "$ref": "#/definitions/v1KeyToPath"
                    }
                },
                "localObjectReference": {
                    "$ref": "#/definitions/v1LocalObjectReference"
                },
                "optional": {
                    "type": "boolean",
                    "title": "Specify whether the ConfigMap or its keys must be defined\n+optional",
                    "format": "boolean"
                }
            }
        },
        "v1ConfigMapVolumeSource": {
            "type": "object",
            "description": "Adapts a ConfigMap into a volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a\nvolume as files using the keys in the Data field as the file names, unless\nthe items element is populated with specific mappings of keys to paths.\nConfigMap volumes support ownership management and SELinux relabeling.",
            "properties": {
                "defaultMode": {
                    "type": "integer",
                    "title": "Optional: mode bits to use on created files by default. Must be a\nvalue between 0 and 0777. Defaults to 0644.\nDirectories within the path are not affected by this setting.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.\n+optional",
                    "format": "int32"
                },
                "items": {
                    "type": "array",
                    "title": "If unspecified, each key-value pair in the Data field of the referenced\nConfigMap will be projected into the volume as a file whose name is the\nkey and content is the value. If specified, the listed keys will be\nprojected into the specified paths, and unlisted keys will not be\npresent. If a key is specified which is not present in the ConfigMap,\nthe volume setup will error unless it is marked optional. Paths must be\nrelative and may not contain the '..' path or start with '..'.\n+optional",
                    "items": {
                        "$ref": "#/definitions/v1KeyToPath"
                    }
                },
                "localObjectReference": {
                    "$ref": "#/definitions/v1LocalObjectReference"
                },
                "optional": {
                    "type": "boolean",
                    "title": "Specify whether the ConfigMap or its keys must be defined\n+optional",
                    "format": "boolean"
                }
            }
        },
        "v1Container": {
            "type": "object",
            "description": "A single application container that you want to run within a pod.",
            "properties": {
                "args": {
                    "type": "array",
                    "title": "Arguments to the entrypoint.\nThe docker image's CMD is used if this is not provided.\nVariable references $(VAR_NAME) are expanded using the container's environment. If a variable\ncannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax\ncan be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded,\nregardless of whether the variable exists or not.\nCannot be updated.\nMore info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell\n+optional",
                    "items": {
                        "type": "string"
                    }
                },
                "command": {
                    "type": "array",
                    "title": "Entrypoint array. Not executed within a shell.\nThe docker image's ENTRYPOINT is used if this is not provided.\nVariable references $(VAR_NAME) are expanded using the container's environment. If a variable\ncannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax\ncan be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded,\nregardless of whether the variable exists or not.\nCannot be updated.\nMore info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell\n+optional",
                    "items": {
                        "type": "string"
                    }
                },
                "env": {
                    "type": "array",
                    "title": "List of environment variables to set in the container.\nCannot be updated.\n+optional\n+patchMergeKey=name\n+patchStrategy=merge",
                    "items": {
                        "$ref": "#/definitions/v1EnvVar"
                    }
                },
                "envFrom": {
                    "type": "array",
                    "title": "List of sources to populate environment variables in the container.\nThe keys defined within a source must be a C_IDENTIFIER. All invalid keys\nwill be reported as an event when the container is starting. When a key exists in multiple\nsources, the value associated with the last source will take precedence.\nValues defined by an Env with a duplicate key will take precedence.\nCannot be updated.\n+optional",
                    "items": {
                        "$ref": "#/definitions/v1EnvFromSource"
                    }
                },
                "image": {
                    "type": "string",
                    "title": "Docker image name.\nMore info: https://kubernetes.io/docs/concepts/containers/images\nThis field is optional to allow higher level config management to default or override\ncontainer images in workload controllers like Deployments and StatefulSets.\n+optional"
                },
                "imagePullPolicy": {
                    "type": "string",
                    "title": "Image pull policy.\nOne of Always, Never, IfNotPresent.\nDefaults to Always if :latest tag is specified, or IfNotPresent otherwise.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/containers/images#updating-images\n+optional"
                },
                "lifecycle": {
                    "title": "Actions that the management system should take in response to container lifecycle events.\nCannot be updated.\n+optional",
                    "$ref": "#/definitions/v1Lifecycle"
                },
                "livenessProbe": {
                    "title": "Periodic probe of container liveness.\nContainer will be restarted if the probe fails.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n+optional",
                    "$ref": "#/definitions/v1Probe"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the container specified as a DNS_LABEL.\nEach container in a pod must have a unique name (DNS_LABEL).\nCannot be updated."
                },
                "ports": {
                    "type": "array",
                    "title": "List of ports to expose from the container. Exposing a port here gives\nthe system additional information about the network connections a\ncontainer uses, but is primarily informational. Not specifying a port here\nDOES NOT prevent that port from being exposed. Any port which is\nlistening on the default \"0.0.0.0\" address inside a container will be\naccessible from the network.\nCannot be updated.\n+optional\n+patchMergeKey=containerPort\n+patchStrategy=merge\n+listType=map\n+listMapKey=containerPort\n+listMapKey=protocol",
                    "items": {
                        "$ref": "#/definitions/v1ContainerPort"
                    }
                },
                "readinessProbe": {
                    "title": "Periodic probe of container service readiness.\nContainer will be removed from service endpoints if the probe fails.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n+optional",
                    "$ref": "#/definitions/v1Probe"
                },
                "resources": {
                    "title": "Compute Resources required by this container.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/\n+optional",
                    "$ref": "#/definitions/v1ResourceRequirements"
                },
                "securityContext": {
                    "title": "Security options the pod should run with.\nMore info: https://kubernetes.io/docs/concepts/policy/security-context/\nMore info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/\n+optional",
                    "$ref": "#/definitions/v1SecurityContext"
                },
                "startupProbe": {
                    "title": "StartupProbe indicates that the Pod has successfully initialized.\nIf specified, no other probes are executed until this completes successfully.\nIf this probe fails, the Pod will be restarted, just as if the livenessProbe failed.\nThis can be used to provide different probe parameters at the beginning of a Pod's lifecycle,\nwhen it might take a long time to load data or warm a cache, than during steady-state operation.\nThis cannot be updated.\nThis is an alpha feature enabled by the StartupProbe feature flag.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n+optional",
                    "$ref": "#/definitions/v1Probe"
                },
                "stdin": {
                    "type": "boolean",
                    "title": "Whether this container should allocate a buffer for stdin in the container runtime. If this\nis not set, reads from stdin in the container will always result in EOF.\nDefault is false.\n+optional",
                    "format": "boolean"
                },
                "stdinOnce": {
                    "type": "boolean",
                    "title": "Whether the container runtime should close the stdin channel after it has been opened by\na single attach. When stdin is true the stdin stream will remain open across multiple attach\nsessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the\nfirst client attaches to stdin, and then remains open and accepts data until the client disconnects,\nat which time stdin is closed and remains closed until the container is restarted. If this\nflag is false, a container processes that reads from stdin will never receive an EOF.\nDefault is false\n+optional",
                    "format": "boolean"
                },
                "terminationMessagePath": {
                    "type": "string",
                    "title": "Optional: Path at which the file to which the container's termination message\nwill be written is mounted into the container's filesystem.\nMessage written is intended to be brief final status, such as an assertion failure message.\nWill be truncated by the node if greater than 4096 bytes. The total message length across\nall containers will be limited to 12kb.\nDefaults to /dev/termination-log.\nCannot be updated.\n+optional"
                },
                "terminationMessagePolicy": {
                    "type": "string",
                    "title": "Indicate how the termination message should be populated. File will use the contents of\nterminationMessagePath to populate the container status message on both success and failure.\nFallbackToLogsOnError will use the last chunk of container log output if the termination\nmessage file is empty and the container exited with an error.\nThe log output is limited to 2048 bytes or 80 lines, whichever is smaller.\nDefaults to File.\nCannot be updated.\n+optional"
                },
                "tty": {
                    "type": "boolean",
                    "title": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.\nDefault is false.\n+optional",
                    "format": "boolean"
                },
                "volumeDevices": {
                    "type": "array",
                    "title": "volumeDevices is the list of block devices to be used by the container.\nThis is a beta feature.\n+patchMergeKey=devicePath\n+patchStrategy=merge\n+optional",
                    "items": {
                        "$ref": "#/definitions/v1VolumeDevice"
                    }
                },
                "volumeMounts": {
                    "type": "array",
                    "title": "Pod volumes to mount into the container's filesystem.\nCannot be updated.\n+optional\n+patchMergeKey=mountPath\n+patchStrategy=merge",
                    "items": {
                        "$ref": "#/definitions/v1VolumeMount"
                    }
                },
                "workingDir": {
                    "type": "string",
                    "title": "Container's working directory.\nIf not specified, the container runtime's default will be used, which\nmight be configured in the container image.\nCannot be updated.\n+optional"
                }
            }
        },
        "v1ContainerImage": {
            "type": "object",
            "title": "Describe a container image",
            "properties": {
                "names": {
                    "type": "array",
                    "title": "Names by which this image is known.\ne.g. [\"k8s.gcr.io/hyperkube:v1.0.7\", \"dockerhub.io/google_containers/hyperkube:v1.0.7\"]",
                    "items": {
                        "type": "string"
                    }
                },
                "sizeBytes": {
                    "type": "string",
                    "title": "The size of the image in bytes.\n+optional",
                    "format": "int64"
                }
            }
        },
        "v1ContainerPort": {
            "type": "object",
            "description": "ContainerPort represents a network port in a single container.",
            "properties": {
                "containerPort": {
                    "type": "integer",
                    "description": "Number of port to expose on the pod's IP address.\nThis must be a valid port number, 0 \u003c x \u003c 65536.",
                    "format": "int32"
                },
                "hostIP": {
                    "type": "string",
                    "title": "What host IP to bind the external port to.\n+optional"
                },
                "hostPort": {
                    "type": "integer",
                    "title": "Number of port to expose on the host.\nIf specified, this must be a valid port number, 0 \u003c x \u003c 65536.\nIf HostNetwork is specified, this must match ContainerPort.\nMost containers do not need this.\n+optional",
                    "format": "int32"
                },
                "name": {
                    "type": "string",
                    "title": "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each\nnamed port in a pod must have a unique name. Name for the port that can be\nreferred to by services.\n+optional"
                },
                "protocol": {
                    "type": "string",
                    "title": "Protocol for port. Must be UDP, TCP, or SCTP.\nDefaults to \"TCP\".\n+optional"
                }
            }
        },
        "v1ContainerState": {
            "type": "object",
            "description": "ContainerState holds a possible state of container.\nOnly one of its members may be specified.\nIf none of them is specified, the default one is ContainerStateWaiting.",
            "properties": {
                "running": {
                    "title": "Details about a running container\n+optional",
                    "$ref": "#/definitions/v1ContainerStateRunning"
                },
                "terminated": {
                    "title": "Details about a terminated container\n+optional",
                    "$ref": "#/definitions/v1ContainerStateTerminated"
                },
                "waiting": {
                    "title": "Details about a waiting container\n+optional",
                    "$ref": "#/definitions/v1ContainerStateWaiting"
                }
            }
        },
        "v1ContainerStateRunning": {
            "type": "object",
            "description": "ContainerStateRunning is a running state of a container.",
            "properties": {
                "startedAt": {
                    "title": "Time at which the container was last (re-)started\n+optional",
                    "$ref": "#/definitions/v1Time"
                }
            }
        },
        "v1ContainerStateTerminated": {
            "type": "object",
            "description": "ContainerStateTerminated is a terminated state of a container.",
            "properties": {
                "containerID": {
                    "type": "string",
                    "title": "Container's ID in the format 'docker://\u003ccontainer_id\u003e'\n+optional"
                },
                "exitCode": {
                    "type": "integer",
                    "title": "Exit status from the last termination of the container",
                    "format": "int32"
                },
                "finishedAt": {
                    "title": "Time at which the container last terminated\n+optional",
                    "$ref": "#/definitions/v1Time"
                },
                "message": {
                    "type": "string",
                    "title": "Message regarding the last termination of the container\n+optional"
                },
                "reason": {
                    "type": "string",
                    "title": "(brief) reason from the last termination of the container\n+optional"
                },
                "signal": {
                    "type": "integer",
                    "title": "Signal from the last termination of the container\n+optional",
                    "format": "int32"
                },
                "startedAt": {
                    "title": "Time at which previous execution of the container started\n+optional",
                    "$ref": "#/definitions/v1Time"
                }
            }
        },
        "v1ContainerStateWaiting": {
            "type": "object",
            "description": "ContainerStateWaiting is a waiting state of a container.",
            "properties": {
                "message": {
                    "type": "string",
                    "title": "Message regarding why the container is not yet running.\n+optional"
                },
                "reason": {
                    "type": "string",
                    "title": "(brief) reason the container is not yet running.\n+optional"
                }
            }
        },
        "v1ContainerStatus": {
            "type": "object",
            "description": "ContainerStatus contains details for the current status of this container.",
            "properties": {
                "containerID": {
                    "type": "string",
                    "title": "Container's ID in the format 'docker://\u003ccontainer_id\u003e'.\n+optional"
                },
                "image": {
                    "type": "string",
                    "title": "The image the container is running.\nMore info: https://kubernetes.io/docs/concepts/containers/images\nTODO(dchen1107): Which image the container is running with?"
                },
                "imageID": {
                    "type": "string",
                    "description": "ImageID of the container's image."
                },
                "lastState": {
                    "title": "Details about the container's last termination condition.\n+optional",
                    "$ref": "#/definitions/v1ContainerState"
                },
                "name": {
                    "type": "string",
                    "description": "This must be a DNS_LABEL. Each container in a pod must have a unique name.\nCannot be updated."
                },
                "ready": {
                    "type": "boolean",
                    "description": "Specifies whether the container has passed its readiness probe.",
                    "format": "boolean"
                },
                "restartCount": {
                    "type": "integer",
                    "description": "The number of times the container has been restarted, currently based on\nthe number of dead containers that have not yet been removed.\nNote that this is calculated from dead containers. But those containers are subject to\ngarbage collection. This value will get capped at 5 by GC.",
                    "format": "int32"
                },
                "started": {
                    "type": "boolean",
                    "title": "Specifies whether the container has passed its startup probe.\nInitialized as false, becomes true after startupProbe is considered successful.\nResets to false when the container is restarted, or if kubelet loses state temporarily.\nIs always true when no startupProbe is defined.\n+optional",
                    "format": "boolean"
                },
                "state": {
                    "title": "Details about the container's current condition.\n+optional",
                    "$ref": "#/definitions/v1ContainerState"
                }
            }
        },
        "v1DaemonEndpoint": {
            "type": "object",
            "description": "DaemonEndpoint contains information about a single Daemon endpoint.",
            "properties": {
                "Port": {
                    "type": "integer",
                    "description": "Port number of the given endpoint.",
                    "format": "int32"
                }
            }
        },
        "v1DaemonSet": {
            "type": "object",
            "description": "DaemonSet represents the configuration of a daemon set.",
            "properties": {
                "metadata": {
                    "title": "Standard object's metadata.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
                    "$ref": "#/definitions/v1ObjectMeta"
                },
                "spec": {
                    "title": "The desired behavior of this daemon set.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status\n+optional",
                    "$ref": "#/definitions/v1DaemonSetSpec"
                },
                "status": {
                    "title": "The current status of this daemon set. This data may be\nout of date by some window of time.\nPopulated by the system.\nRead-only.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status\n+optional",
                    "$ref": "#/definitions/v1DaemonSetStatus"
                }
            }
        },
        "v1DaemonSetCondition": {
            "type": "object",
            "description": "DaemonSetCondition describes the state of a DaemonSet at a certain point.",
            "properties": {
                "lastTransitionTime": {
                    "title": "Last time the condition transitioned from one status to another.\n+optional",
                    "$ref": "#/definitions/v1Time"
                },
                "message": {
                    "type": "string",
                    "title": "A human readable message indicating details about the transition.\n+optional"
                },
                "reason": {
                    "type": "string",
                    "title": "The reason for the condition's last transition.\n+optional"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the condition, one of True, False, Unknown."
                },
                "type": {
                    "type": "string",
                    "description": "Type of DaemonSet condition."
                }
            }
        },
        "v1DaemonSetList": {
            "type": "object",
            "description": "DaemonSetList is a collection of daemon sets.",
            "properties": {
                "items": {
                    "type": "array",
                    "description": "A list of daemon sets.",
                    "items": {
                        "$ref": "#/definitions/v1DaemonSet"
                    }
                },
                "metadata": {
                    "title": "Standard list metadata.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
                    "$ref": "#/definitions/v1ListMeta"
                }
            }
        },
        "v1DaemonSetSpec": {
            "type": "object",
            "description": "DaemonSetSpec is the specification of a daemon set.",
            "properties": {
                "minReadySeconds": {
                    "type": "integer",
                    "title": "The minimum number of seconds for which a newly created DaemonSet pod should\nbe ready without any of its container crashing, for it to be considered\navailable. Defaults to 0 (pod will be considered available as soon as it\nis ready).\n+optional",
                    "format": "int32"
                },
                "revisionHistoryLimit": {
                    "type": "integer",
                    "title": "The number of old history to retain to allow rollback.\nThis is a pointer to distinguish between explicit zero and not specified.\nDefaults to 10.\n+optional",
                    "format": "int32"
                },
                "selector": {
                    "title": "A label query over pods that are managed by the daemon set.\nMust match in order to be controlled.\nIt must match the pod template's labels.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
                    "$ref": "#/definitions/v1LabelSelector"
                },
                "template": {
                    "title": "An object that describes the pod that will be created.\nThe DaemonSet will create exactly one copy of this pod on every node\nthat matches the template's node selector (or on every node if no node\nselector is specified).\nMore info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template",
                    "$ref": "#/definitions/v1PodTemplateSpec"
                },
                "updateStrategy": {
                    "title": "An update strategy to replace existing DaemonSet pods with new pods.\n+optional",
                    "$ref": "#/definitions/v1DaemonSetUpdateStrategy"
                }
            }
        },
        "v1DaemonSetStatus": {
            "type": "object",
            "description": "DaemonSetStatus represents the current status of a daemon set.",
            "properties": {
                "collisionCount": {
                    "type": "integer",
                    "title": "Count of hash collisions for the DaemonSet. The DaemonSet controller\nuses this field as a collision avoidance mechanism when it needs to\ncreate the name for the newest ControllerRevision.\n+optional",
                    "format": "int32"
                },
                "conditions": {
                    "type": "array",
                    "title": "Represents the latest available observations of a DaemonSet's current state.\n+optional\n+patchMergeKey=type\n+patchStrategy=merge",
                    "items": {
                        "$ref": "#/definitions/v1DaemonSetCondition"
                    }
                },
                "currentNumberScheduled": {
                    "type": "integer",
                    "title": "The number of nodes that are running at least 1\ndaemon pod and are supposed to run the daemon pod.\nMore info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/",
                    "format": "int32"
                },
                "desiredNumberScheduled": {
                    "type": "integer",
                    "title": "The total number of nodes that should be running the daemon\npod (including nodes correctly running the daemon pod).\nMore info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/",
                    "format": "int32"
                },
                "numberAvailable": {
                    "type": "integer",
                    "title": "The number of nodes that should be running the\ndaemon pod and have one or more of the daemon pod running and\navailable (ready for at least spec.minReadySeconds)\n+optional",
                    "format": "int32"
                },
                "numberMisscheduled": {
                    "type": "integer",
                    "title": "The number of nodes that are running the daemon pod, but are\nnot supposed to run the daemon pod.\nMore info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/",
                    "format": "int32"
                },
                "numberReady": {
                    "type": "integer",
                    "description": "The number of nodes that should be running the daemon pod and have one\nor more of the daemon pod running and ready.",
                    "format": "int32"
                },
                "numberUnavailable": {
                    "type": "integer",
                    "title": "The number of nodes that should be running the\ndaemon pod and have none of the daemon pod running and available\n(ready for at least spec.minReadySeconds)\n+optional",
                    "format": "int32"
                },
                "observedGeneration": {
                    "type": "string",
                    "title": "The most recent generation observed by the daemon set controller.\n+optional",
                    "format": "int64"
                },
                "updatedNumberScheduled": {
                    "type": "integer",
                    "title": "The total number of nodes that are running updated daemon pod\n+optional",
                    "format": "int32"
                }
            }
        },
        "v1DaemonSetUpdateStrategy": {
            "type": "object",
            "description": "DaemonSetUpdateStrategy is a struct used to control the update strategy for a DaemonSet.",
            "properties": {
                "rollingUpdate": {
                    "title": "Rolling update config params. Present only if type = \"RollingUpdate\".\n---\nTODO: Update this to follow our convention for oneOf, whatever we decide it\nto be. Same as Deployment -strategy.rollingUpdate-.\nSee https://github.com/kubernetes/kubernetes/issues/35345\n+optional",
                    "$ref": "#/definitions/v1RollingUpdateDaemonSet"
                },
                "type": {
                    "type": "string",
                    "title": "Type of daemon set update. Can be \"RollingUpdate\" or \"OnDelete\". Default is RollingUpdate.\n+optional"
                }
            }
        },
        "v1Deployment": {
            "type": "object",
            "description": "Deployment enables declarative updates for Pods and ReplicaSets.",
            "properties": {
                "metadata": {
                    "title": "Standard object metadata.\n+optional",
                    "$ref": "#/definitions/v1ObjectMeta"
                },
                "spec": {
                    "title": "Specification of the desired behavior of the Deployment.\n+optional",
                    "$ref": "#/definitions/v1DeploymentSpec"
                },
                "status": {
                    "title": "Most recently observed status of the Deployment.\n+optional",
                    "$ref": "#/definitions/v1DeploymentStatus"
                }
            }
        },
        "v1DeploymentCondition": {
            "type": "object",
            "description": "DeploymentCondition describes the state of a deployment at a certain point.",
            "properties": {
                "lastTransitionTime": {
                    "description": "Last time the condition transitioned from one status to another.",
                    "$ref": "#/definitions/v1Time"
                },
                "lastUpdateTime": {
                    "description": "The last time this condition was updated.",
                    "$ref": "#/definitions/v1Time"
                },
                "message": {
                    "type": "string",
                    "description": "A human readable message indicating details about the transition."
                },
                "reason": {
                    "type": "string",
                    "description": "The reason for the condition's last transition."
                },
                "status": {
                    "type": "string",
                    "description": "Status of the condition, one of True, False, Unknown."
                },
                "type": {
                    "type": "string",
                    "description": "Type of deployment condition."
                }
            }
        },
        "v1DeploymentList": {
            "type": "object",
            "description": "DeploymentList is a list of Deployments.",
            "properties": {
                "items": {
                    "type": "array",
                    "description": "Items is the list of Deployments.",
                    "items": {
                        "$ref": "#/definitions/v1Deployment"
                    }
                },
                "metadata": {
                    "title": "Standard list metadata.\n+optional",
                    "$ref": "#/definitions/v1ListMeta"
                }
            }
        },
        "v1DeploymentSpec": {
            "type": "object",
            "description": "DeploymentSpec is the specification of the desired behavior of the Deployment.",
            "properties": {
                "minReadySeconds": {
                    "type": "integer",
                    "title": "Minimum number of seconds for which a newly created pod should be ready\nwithout any of its container crashing, for it to be considered available.\nDefaults to 0 (pod will be considered available as soon as it is ready)\n+optional",
                    "format": "int32"
                },
                "paused": {
                    "type": "boolean",
                    "title": "Indicates that the deployment is paused.\n+optional",
                    "format": "boolean"
                },
                "progressDeadlineSeconds": {
                    "type": "integer",
                    "description": "The maximum time in seconds for a deployment to make progress before it\nis considered to be failed. The deployment controller will continue to\nprocess failed deployments and a condition with a ProgressDeadlineExceeded\nreason will be surfaced in the deployment status. Note that progress will\nnot be estimated during the time a deployment is paused. Defaults to 600s.",
                    "format": "int32"
                },
                "replicas": {
                    "type": "integer",
                    "title": "Number of desired pods. This is a pointer to distinguish between explicit\nzero and not specified. Defaults to 1.\n+optional",
                    "format": "int32"
                },
                "revisionHistoryLimit": {
                    "type": "integer",
                    "title": "The number of old ReplicaSets to retain to allow rollback.\nThis is a pointer to distinguish between explicit zero and not specified.\nDefaults to 10.\n+optional",
                    "format": "int32"
                },
                "selector": {
                    "description": "Label selector for pods. Existing ReplicaSets whose pods are\nselected by this will be the ones affected by this deployment.\nIt must match the pod template's labels.",
                    "$ref": "#/definitions/v1LabelSelector"
                },
                "strategy": {
                    "title": "The deployment strategy to use to replace existing pods with new ones.\n+optional\n+patchStrategy=retainKeys",
                    "$ref": "#/definitions/v1DeploymentStrategy"
                },
                "template": {
                    "description": "Template describes the pods that will be created.",
                    "$ref": "#/definitions/v1PodTemplateSpec"
                }
            }
        },
        "v1DeploymentStatus": {
            "type": "object",
            "description": "DeploymentStatus is the most recently observed status of the Deployment.",
            "properties": {
                "availableReplicas": {
                    "type": "integer",
                    "title": "Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.\n+optional",
                    "format": "int32"
                },
                "collisionCount": {
                    "type": "integer",
                    "title": "Count of hash collisions for the Deployment. The Deployment controller uses this\nfield as a collision avoidance mechanism when it needs to create the name for the\nnewest ReplicaSet.\n+optional",
                    "format": "int32"
                },
                "conditions": {
                    "type": "array",
                    "title": "Represents the latest available observations of a deployment's current state.\n+patchMergeKey=type\n+patchStrategy=merge",
                    "items": {
                        "$ref": "#/definitions/v1DeploymentCondition"
                    }
                },
                "observedGeneration": {
                    "type": "string",
                    "title": "The generation observed by the deployment controller.\n+optional",
                    "format": "int64"
                },
                "readyReplicas": {
                    "type": "integer",
                    "title": "Total number of ready pods targeted by this deployment.\n+optional",
                    "format": "int32"
                },
                "replicas": {
                    "type": "integer",
                    "title": "Total number of non-terminated pods targeted by this deployment (their labels match the selector).\n+optional",
                    "format": "int32"
                },
                "unavailableReplicas": {
                    "type": "integer",
                    "title": "Total number of unavailable pods targeted by this deployment. This is the total number of\npods that are still required for the deployment to have 100% available capacity. They may\neither be pods that are running but not yet available or pods that still have not been created.\n+optional",
                    "format": "int32"
                },
                "updatedReplicas": {
                    "type": "integer",
                    "title": "Total number of non-terminated pods targeted by this deployment that have the desired template spec.\n+optional",
                    "format": "int32"
                }
            }
        },
        "v1DeploymentStrategy": {
            "type": "object",
            "description": "DeploymentStrategy describes how to replace existing pods with new ones.",
            "properties": {
                "rollingUpdate": {
                    "title": "Rolling update config params. Present only if DeploymentStrategyType =\nRollingUpdate.\n---\nTODO: Update this to follow our convention for oneOf, whatever we decide it\nto be.\n+optional",
                    "$ref": "#/definitions/v1RollingUpdateDeployment"
                },
                "type": {
                    "type": "string",
                    "title": "Type of deployment. Can be \"Recreate\" or \"RollingUpdate\". Default is RollingUpdate.\n+optional"
                }
            }
        },
        "v1DownwardAPIProjection": {
            "type": "object",
            "description": "Represents downward API info for projecting into a projected volume.\nNote that this is identical to a downwardAPI volume source without the default\nmode.",
            "properties": {
                "items": {
                    "type": "array",
                    "title": "Items is a list of DownwardAPIVolume file\n+optional",
                    "items": {
                        "$ref": "#/definitions/v1DownwardAPIVolumeFile"
                    }
                }
            }
        },
        "v1DownwardAPIVolumeFile": {
            "type": "object",
            "title": "DownwardAPIVolumeFile represents information to create the file containing the pod field",
            "properties": {
                "fieldRef": {
                    "title": "Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.\n+optional",
                    "$ref": "#/definitions/v1ObjectFieldSelector"
                },
                "mode": {
                    "type": "integer",
                    "title": "Optional: mode bits to use on this file, must be a value between 0\nand 0777. If not specified, the volume defaultMode will be used.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.\n+optional",
                    "format": "int32"
                },
                "path": {
                    "type": "string",
                    "title": "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'"
                },
                "resourceFieldRef": {
                    "title": "Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.\n+optional",
                    "$ref": "#/definitions/v1ResourceFieldSelector"
                }
            }
        },
        "v1DownwardAPIVolumeSource": {
            "type": "object",
            "description": "DownwardAPIVolumeSource represents a volume containing downward API info.\nDownward API volumes support ownership management and SELinux relabeling.",
            "properties": {
                "defaultMode": {
                    "type": "integer",
                    "title": "Optional: mode bits to use on created files by default. Must be a\nvalue between 0 and 0777. Defaults to 0644.\nDirectories within the path are not affected by this setting.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.\n+optional",
                    "format": "int32"
                },
                "items": {
                    "type": "array",
                    "title": "Items is a list of downward API volume file\n+optional",
                    "items": {
                        "$ref": "#/definitions/v1DownwardAPIVolumeFile"
                    }
                }
            }
        },
        "v1EmptyDirVolumeSource": {
            "type": "object",
            "description": "Represents an empty directory for a pod.\nEmpty directory volumes support ownership management and SELinux relabeling.",
            "properties": {
                "medium": {
                    "type": "string",
                    "title": "What type of storage medium should back this directory.\nThe default is \"\" which means to use the node's default medium.\nMust be an empty string (default) or Memory.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir\n+optional"
                },
                "sizeLimit": {
                    "title": "Total amount of local storage required for this EmptyDir volume.\nThe size limit is also applicable for memory medium.\nThe maximum usage on memory medium EmptyDir would be the minimum value between\nthe SizeLimit specified here and the sum of memory limits of all containers in a pod.\nThe default is nil which means that the limit is undefined.\nMore info: http://kubernetes.io/docs/user-guide/volumes#emptydir\n+optional",
                    "$ref": "#/definitions/resourceQuantity"
                }
            }
        },
        "v1EndpointAddress": {
            "type": "object",
            "description": "EndpointAddress is a tuple that describes single IP address.",
            "properties": {
                "hostname": {
                    "type": "string",
                    "title": "The Hostname of this endpoint\n+optional"
                },
                "ip": {
                    "type": "string",
                    "description": "The IP of this endpoint.\nMay not be loopback (127.0.0.0/8), link-local (169.254.0.0/16),\nor link-local multicast ((224.0.0.0/24).\nIPv6 is also accepted but not fully supported on all platforms. Also, certain\nkubernetes components, like kube-proxy, are not IPv6 ready.\nTODO: This should allow hostname or IP, See #4447."
                },
                "nodeName": {
                    "type": "string",
                    "title": "Optional: Node hosting this endpoint. This can be used to determine endpoints local to a node.\n+optional"
                },
                "targetRef": {
                    "title": "Reference to object providing the endpoint.\n+optional",
                    "$ref": "#/definitions/v1ObjectReference"
                }
            }
        },
        "v1EndpointPort": {
            "type": "object",
            "description": "EndpointPort is a tuple that describes a single port.",
            "properties": {
                "name": {
                    "type": "string",
                    "title": "The name of this port.  This must match the 'name' field in the\ncorresponding ServicePort.\nMust be a DNS_LABEL.\nOptional only if one port is defined.\n+optional"
                },
                "port": {
                    "type": "integer",
                    "description": "The port number of the endpoint.",
                    "format": "int32"
                },
                "protocol": {
                    "type": "string",
                    "title": "The IP protocol for this port.\nMust be UDP, TCP, or SCTP.\nDefault is TCP.\n+optional"
                }
            }
        },
        "v1EndpointSubset": {
            "type": "object",
            "title": "EndpointSubset is a group of addresses with a common set of ports. The\nexpanded set of endpoints is the Cartesian product of Addresses x Ports.\nFor example, given:\n  {\n    Addresses: [{\"ip\": \"10.10.1.1\"}, {\"ip\": \"10.10.2.2\"}],\n    Ports:     [{\"name\": \"a\", \"port\": 8675}, {\"name\": \"b\", \"port\": 309}]\n  }\nThe resulting set of endpoints can be viewed as:\n    a: [ 10.10.1.1:8675, 10.10.2.2:8675 ],\n    b: [ 10.10.1.1:309, 10.10.2.2:309 ]",
            "properties": {
                "addresses": {
                    "type": "array",
                    "title": "IP addresses which offer the related ports that are marked as ready. These endpoints\nshould be considered safe for load balancers and clients to utilize.\n+optional",
                    "items": {
                        "$ref": "#/definitions/v1EndpointAddress"
                    }
                },
                "notReadyAddresses": {
                    "type": "array",
                    "title": "IP addresses which offer the related ports but are not currently marked as ready\nbecause they have not yet finished starting, have recently failed a readiness check,\nor have recently failed a liveness check.\n+optional",
                    "items": {
                        "$ref": "#/definitions/v1EndpointAddress"
                    }
                },
                "ports": {
                    "type": "array",
                    "title": "Port numbers available on the related IP addresses.\n+optional",
                    "items": {
                        "$ref": "#/definitions/v1EndpointPort"
                    }
                }
            }
        },
        "v1Endpoints": {
            "type": "object",
            "title": "Endpoints is a collection of endpoints that implement the actual service. Example:\n  Name: \"mysvc\",\n  Subsets: [\n    {\n      Addresses: [{\"ip\": \"10.10.1.1\"}, {\"ip\": \"10.10.2.2\"}],\n      Ports: [{\"name\": \"a\", \"port\": 8675}, {\"name\": \"b\", \"port\": 309}]\n    },\n    {\n      Addresses: [{\"ip\": \"10.10.3.3\"}],\n      Ports: [{\"name\": \"a\", \"port\": 93}, {\"name\": \"b\", \"port\": 76}]\n    },\n ]",
            "properties": {
                "metadata": {
                    "title": "Standard object's metadata.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
                    "$ref": "#/definitions/v1ObjectMeta"
                },
                "subsets": {
                    "type": "array",
                    "title": "The set of all endpoints is the union of all subsets. Addresses are placed into\nsubsets according to the IPs they share. A single address with multiple ports,\nsome of which are ready and some of which are not (because they come from\ndifferent containers) will result in the address being displayed in different\nsubsets for the different ports. No address will appear in both Addresses and\nNotReadyAddresses in the same subset.\nSets of addresses and ports that comprise a service.\n+optional",
                    "items": {
                        "$ref": "#/definitions/v1EndpointSubset"
                    }
                }
            }
        },
        "v1EndpointsList": {
            "type": "object",
            "description": "EndpointsList is a list of endpoints.",
            "properties": {
                "items": {
                    "type": "array",
                    "description": "List of endpoints.",
                    "items": {
                        "$ref": "#/definitions/v1Endpoints"
                    }
                },
                "metadata": {
                    "title": "Standard list metadata.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "$ref": "#/definitions/v1ListMeta"
                }
            }
        },
        "v1EnvFromSource": {
            "type": "object",
            "title": "EnvFromSource represents the source of a set of ConfigMaps",
            "properties": {
                "configMapRef": {
                    "title": "The ConfigMap to select from\n+optional",
                    "$ref": "#/definitions/v1ConfigMapEnvSource"
                },
                "prefix": {
                    "type": "string",
                    "title": "An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.\n+optional"
                },
                "secretRef": {
                    "title": "The Secret to select from\n+optional",
                    "$ref": "#/definitions/v1SecretEnvSource"
                }
            }
        },
        "v1EnvVar": {
            "type": "object",
            "description": "EnvVar represents an environment variable present in a Container.",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the environment variable. Must be a C_IDENTIFIER."
                },
                "value": {
                    "type": "string",
                    "title": "Variable references $(VAR_NAME) are expanded\nusing the previous defined environment variables in the container and\nany service environment variables. If a variable cannot be resolved,\nthe reference in the input string will be unchanged. The $(VAR_NAME)\nsyntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped\nreferences will never be expanded, regardless of whether the variable\nexists or not.\nDefaults to \"\".\n+optional"
                },
                "valueFrom": {
                    "title": "Source for the environment variable's value. Cannot be used if value is not empty.\n+optional",
                    "$ref": "#/definitions/v1EnvVarSource"
                }
            }
        },
        "v1EnvVarSource": {
            "type": "object",
            "description": "EnvVarSource represents a source for the value of an EnvVar.",
            "properties": {
                "configMapKeyRef": {
                    "title": "Selects a key of a ConfigMap.\n+optional",
                    "$ref": "#/definitions/v1ConfigMapKeySelector"
                },
                "fieldRef": {
                    "title": "Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations,\nspec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.\n+optional",
                    "$ref": "#/definitions/v1ObjectFieldSelector"
                },
                "resourceFieldRef": {
                    "title": "Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.\n+optional",
                    "$ref": "#/definitions/v1ResourceFieldSelector"
                },
                "secretKeyRef": {
                    "title": "Selects a key of a secret in the pod's namespace\n+optional",
                    "$ref": "#/definitions/v1SecretKeySelector"
                }
            }
        },
        "v1EphemeralContainer": {
            "type": "object",
            "description": "An EphemeralContainer is a container that may be added temporarily to an existing pod for\nuser-initiated activities such as debugging. Ephemeral containers have no resource or\nscheduling guarantees, and they will not be restarted when they exit or when a pod is\nremoved or restarted. If an ephemeral container causes a pod to exceed its resource\nallocation, the pod may be evicted.\nEphemeral containers may not be added by directly updating the pod spec. They must be added\nvia the pod's ephemeralcontainers subresource, and they will appear in the pod spec\nonce added.\nThis is an alpha feature enabled by the EphemeralContainers feature flag.",
            "properties": {
                "ephemeralContainerCommon": {
                    "description": "Ephemeral containers have all of the fields of Container, plus additional fields\nspecific to ephemeral containers. Fields in common with Container are in the\nfollowing inlined struct so than an EphemeralContainer may easily be converted\nto a Container.",
                    "$ref": "#/definitions/v1EphemeralContainerCommon"
                },
                "targetContainerName": {
                    "type": "string",
                    "title": "If set, the name of the container from PodSpec that this ephemeral container targets.\nThe ephemeral container will be run in the namespaces (IPC, PID, etc) of this container.\nIf not set then the ephemeral container is run in whatever namespaces are shared\nfor the pod. Note that the container runtime must support this feature.\n+optional"
                }
            }
        },
        "v1EphemeralContainerCommon": {
            "type": "object",
            "description": "EphemeralContainerCommon is a copy of all fields in Container to be inlined in\nEphemeralContainer. This separate type allows easy conversion from EphemeralContainer\nto Container and allows separate documentation for the fields of EphemeralContainer.\nWhen a new field is added to Container it must be added here as well.",
            "properties": {
                "args": {
                    "type": "array",
                    "title": "Arguments to the entrypoint.\nThe docker image's CMD is used if this is not provided.\nVariable references $(VAR_NAME) are expanded using the container's environment. If a variable\ncannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax\ncan be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded,\nregardless of whether the variable exists or not.\nCannot be updated.\nMore info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell\n+optional",
                    "items": {
                        "type": "string"
                    }
                },
                "command": {
                    "type": "array",
                    "title": "Entrypoint array. Not executed within a shell.\nThe docker image's ENTRYPOINT is used if this is not provided.\nVariable references $(VAR_NAME) are expanded using the container's environment. If a variable\ncannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax\ncan be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded,\nregardless of whether the variable exists or not.\nCannot be updated.\nMore info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell\n+optional",
                    "items": {
                        "type": "string"
                    }
                },
                "env": {
                    "type": "array",
                    "title": "List of environment variables to set in the container.\nCannot be updated.\n+optional\n+patchMergeKey=name\n+patchStrategy=merge",
                    "items": {
                        "$ref": "#/definitions/v1EnvVar"
                    }
                },
                "envFrom": {
                    "type": "array",
                    "title": "List of sources to populate environment variables in the container.\nThe keys defined within a source must be a C_IDENTIFIER. All invalid keys\nwill be reported as an event when the container is starting. When a key exists in multiple\nsources, the value associated with the last source will take precedence.\nValues defined by an Env with a duplicate key will take precedence.\nCannot be updated.\n+optional",
                    "items": {
                        "$ref": "#/definitions/v1EnvFromSource"
                    }
                },
                "image": {
                    "type": "string",
                    "title": "Docker image name.\nMore info: https://kubernetes.io/docs/concepts/containers/images"
                },
                "imagePullPolicy": {
                    "type": "string",
                    "title": "Image pull policy.\nOne of Always, Never, IfNotPresent.\nDefaults to Always if :latest tag is specified, or IfNotPresent otherwise.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/containers/images#updating-images\n+optional"
                },
                "lifecycle": {
                    "title": "Lifecycle is not allowed for ephemeral containers.\n+optional",
                    "$ref": "#/definitions/v1Lifecycle"
                },
                "livenessProbe": {
                    "title": "Probes are not allowed for ephemeral containers.\n+optional",
                    "$ref": "#/definitions/v1Probe"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the ephemeral container specified as a DNS_LABEL.\nThis name must be unique among all containers, init containers and ephemeral containers."
                },
                "ports": {
                    "type": "array",
                    "description": "Ports are not allowed for ephemeral containers.",
                    "items": {
                        "$ref": "#/definitions/v1ContainerPort"
                    }
                },
                "readinessProbe": {
                    "title": "Probes are not allowed for ephemeral containers.\n+optional",
                    "$ref": "#/definitions/v1Probe"
                },
                "resources": {
                    "title": "Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources\nalready allocated to the pod.\n+optional",
                    "$ref": "#/definitions/v1ResourceRequirements"
                },
                "securityContext": {
                    "title": "SecurityContext is not allowed for ephemeral containers.\n+optional",
                    "$ref": "#/definitions/v1SecurityContext"
                },
                "startupProbe": {
                    "title": "Probes are not allowed for ephemeral containers.\n+optional",
                    "$ref": "#/definitions/v1Probe"
                },
                "stdin": {
                    "type": "boolean",
                    "title": "Whether this container should allocate a buffer for stdin in the container runtime. If this\nis not set, reads from stdin in the container will always result in EOF.\nDefault is false.\n+optional",
                    "format": "boolean"
                },
                "stdinOnce": {
                    "type": "boolean",
                    "title": "Whether the container runtime should close the stdin channel after it has been opened by\na single attach. When stdin is true the stdin stream will remain open across multiple attach\nsessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the\nfirst client attaches to stdin, and then remains open and accepts data until the client disconnects,\nat which time stdin is closed and remains closed until the container is restarted. If this\nflag is false, a container processes that reads from stdin will never receive an EOF.\nDefault is false\n+optional",
                    "format": "boolean"
                },
                "terminationMessagePath": {
                    "type": "string",
                    "title": "Optional: Path at which the file to which the container's termination message\nwill be written is mounted into the container's filesystem.\nMessage written is intended to be brief final status, such as an assertion failure message.\nWill be truncated by the node if greater than 4096 bytes. The total message length across\nall containers will be limited to 12kb.\nDefaults to /dev/termination-log.\nCannot be updated.\n+optional"
                },
                "terminationMessagePolicy": {
                    "type": "string",
                    "title": "Indicate how the termination message should be populated. File will use the contents of\nterminationMessagePath to populate the container status message on both success and failure.\nFallbackToLogsOnError will use the last chunk of container log output if the termination\nmessage file is empty and the container exited with an error.\nThe log output is limited to 2048 bytes or 80 lines, whichever is smaller.\nDefaults to File.\nCannot be updated.\n+optional"
                },
                "tty": {
                    "type": "boolean",
                    "title": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.\nDefault is false.\n+optional",
                    "format": "boolean"
                },
                "volumeDevices": {
                    "type": "array",
                    "title": "volumeDevices is the list of block devices to be used by the container.\nThis is a beta feature.\n+patchMergeKey=devicePath\n+patchStrategy=merge\n+optional",
                    "items": {
                        "$ref": "#/definitions/v1VolumeDevice"
                    }
                },
                "volumeMounts": {
                    "type": "array",
                    "title": "Pod volumes to mount into the container's filesystem.\nCannot be updated.\n+optional\n+patchMergeKey=mountPath\n+patchStrategy=merge",
                    "items": {
                        "$ref": "#/definitions/v1VolumeMount"
                    }
                },
                "workingDir": {
                    "type": "string",
                    "title": "Container's working directory.\nIf not specified, the container runtime's default will be used, which\nmight be configured in the container image.\nCannot be updated.\n+optional"
                }
            }
        },
        "v1ExecAction": {
            "type": "object",
            "description": "ExecAction describes a \"run in container\" action.",
            "properties": {
                "command": {
                    "type": "array",
                    "title": "Command is the command line to execute inside the container, the working directory for the\ncommand  is root ('/') in the container's filesystem. The command is simply exec'd, it is\nnot run inside a shell, so traditional shell instructions ('|', etc) won't work. To use\na shell, you need to explicitly call out to that shell.\nExit status of 0 is treated as live/healthy and non-zero is unhealthy.\n+optional",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "v1FCVolumeSource": {
            "type": "object",
            "description": "Represents a Fibre Channel volume.\nFibre Channel volumes can only be mounted as read/write once.\nFibre Channel volumes support ownership management and SELinux relabeling.",
            "properties": {
                "fsType": {
                    "type": "string",
                    "title": "Filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\nTODO: how do we prevent errors in the filesystem from compromising the machine\n+optional"
                },
                "lun": {
                    "type": "integer",
                    "title": "Optional: FC target lun number\n+optional",
                    "format": "int32"
                },
                "readOnly": {
                    "type": "boolean",
                    "title": "Optional: Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\n+optional",
                    "format": "boolean"
                },
                "targetWWNs": {
                    "type": "array",
                    "title": "Optional: FC target worldwide names (WWNs)\n+optional",
                    "items": {
                        "type": "string"
                    }
                },
                "wwids": {
                    "type": "array",
                    "title": "Optional: FC volume world wide identifiers (wwids)\nEither wwids or combination of targetWWNs and lun must be set, but not both simultaneously.\n+optional",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "v1FieldsV1": {
            "type": "object",
            "description": "FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.\n\nEach key is either a '.' representing the field itself, and will always map to an empty set,\nor a string representing a sub-field or item. The string will follow one of these four formats:\n'f:\u003cname\u003e', where \u003cname\u003e is the name of a field in a struct, or key in a map\n'v:\u003cvalue\u003e', where \u003cvalue\u003e is the exact json formatted value of a list item\n'i:\u003cindex\u003e', where \u003cindex\u003e is position of a item in a list\n'k:\u003ckeys\u003e', where \u003ckeys\u003e is a map of  a list item's key fields to their unique values\nIf a key maps to an empty Fields value, the field that key represents is part of the set.\n\nThe exact format is defined in sigs.k8s.io/structured-merge-diff",
            "properties": {
                "Raw": {
                    "type": "string",
                    "description": "Raw is the underlying serialization of this object.",
                    "format": "byte"
                }
            }
        },
        "v1FlexPersistentVolumeSource": {
            "type": "object",
            "description": "FlexPersistentVolumeSource represents a generic persistent volume resource that is\nprovisioned/attached using an exec based plugin.",
            "properties": {
                "driver": {
                    "type": "string",
                    "description": "Driver is the name of the driver to use for this volume."
                },
                "fsType": {
                    "type": "string",
                    "title": "Filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script.\n+optional"
                },
                "options": {
                    "type": "object",
                    "title": "Optional: Extra command options if any.\n+optional"
                },
                "readOnly": {
                    "type": "boolean",
                    "title": "Optional: Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\n+optional",
                    "format": "boolean"
                },
                "secretRef": {
                    "title": "Optional: SecretRef is reference to the secret object containing\nsensitive information to pass to the plugin scripts. This may be\nempty if no secret object is specified. If the secret object\ncontains more than one secret, all secrets are passed to the plugin\nscripts.\n+optional",
                    "$ref": "#/definitions/v1SecretReference"
                }
            }
        },
        "v1FlexVolumeSource": {
            "type": "object",
            "description": "FlexVolume represents a generic volume resource that is\nprovisioned/attached using an exec based plugin.",
            "properties": {
                "driver": {
                    "type": "string",
                    "description": "Driver is the name of the driver to use for this volume."
                },
                "fsType": {
                    "type": "string",
                    "title": "Filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script.\n+optional"
                },
                "options": {
                    "type": "object",
                    "title": "Optional: Extra command options if any.\n+optional"
                },
                "readOnly": {
                    "type": "boolean",
                    "title": "Optional: Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\n+optional",
                    "format": "boolean"
                },
                "secretRef": {
                    "title": "Optional: SecretRef is reference to the secret object containing\nsensitive information to pass to the plugin scripts. This may be\nempty if no secret object is specified. If the secret object\ncontains more than one secret, all secrets are passed to the plugin\nscripts.\n+optional",
                    "$ref": "#/definitions/v1LocalObjectReference"
                }
            }
        },
        "v1FlockerVolumeSource": {
            "type": "object",
            "description": "Represents a Flocker volume mounted by the Flocker agent.\nOne and only one of datasetName and datasetUUID should be set.\nFlocker volumes do not support ownership management or SELinux relabeling.",
            "properties": {
                "datasetName": {
                    "type": "string",
                    "title": "Name of the dataset stored as metadata -\u003e name on the dataset for Flocker\nshould be considered as deprecated\n+optional"
                },
                "datasetUUID": {
                    "type": "string",
                    "title": "UUID of the dataset. This is unique identifier of a Flocker dataset\n+optional"
                }
            }
        },
        "v1GCEPersistentDiskVolumeSource": {
            "type": "object",
            "description": "Represents a Persistent Disk resource in Google Compute Engine.\n\nA GCE PD must exist before mounting to a container. The disk must\nalso be in the same GCE project and zone as the kubelet. A GCE PD\ncan only be mounted as read/write once or read-only many times. GCE\nPDs support ownership management and SELinux relabeling.",
            "properties": {
                "fsType": {
                    "type": "string",
                    "title": "Filesystem type of the volume that you want to mount.\nTip: Ensure that the filesystem type is supported by the host operating system.\nExamples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\nTODO: how do we prevent errors in the filesystem from compromising the machine\n+optional"
                },
                "partition": {
                    "type": "integer",
                    "title": "The partition in the volume that you want to mount.\nIf omitted, the default is to mount by volume name.\nExamples: For volume /dev/sda1, you specify the partition as \"1\".\nSimilarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty).\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\n+optional",
                    "format": "int32"
                },
                "pdName": {
                    "type": "string",
                    "title": "Unique name of the PD resource in GCE. Used to identify the disk in GCE.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk"
                },
                "readOnly": {
                    "type": "boolean",
                    "title": "ReadOnly here will force the ReadOnly setting in VolumeMounts.\nDefaults to false.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\n+optional",
                    "format": "boolean"
                }
            }
        },
        "v1GitRepoVolumeSource": {
            "type": "object",
            "description": "Represents a volume that is populated with the contents of a git repository.\nGit repo volumes do not support ownership management.\nGit repo volumes support SELinux relabeling.\n\nDEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an\nEmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir\ninto the Pod's container.",
            "properties": {
                "directory": {
                    "type": "string",
                    "title": "Target directory name.\nMust not contain or start with '..'.  If '.' is supplied, the volume directory will be the\ngit repository.  Otherwise, if specified, the volume will contain the git repository in\nthe subdirectory with the given name.\n+optional"
                },
                "repository": {
                    "type": "string",
                    "title": "Repository URL"
                },
                "revision": {
                    "type": "string",
                    "title": "Commit hash for the specified revision.\n+optional"
                }
            }
        },
        "v1GlusterfsPersistentVolumeSource": {
            "type": "object",
            "description": "Represents a Glusterfs mount that lasts the lifetime of a pod.\nGlusterfs volumes do not support ownership management or SELinux relabeling.",
            "properties": {
                "endpoints": {
                    "type": "string",
                    "title": "EndpointsName is the endpoint name that details Glusterfs topology.\nMore info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod"
                },
                "endpointsNamespace": {
                    "type": "string",
                    "title": "EndpointsNamespace is the namespace that contains Glusterfs endpoint.\nIf this field is empty, the EndpointNamespace defaults to the same namespace as the bound PVC.\nMore info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod\n+optional"
                },
                "path": {
                    "type": "string",
                    "title": "Path is the Glusterfs volume path.\nMore info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod"
                },
                "readOnly": {
                    "type": "boolean",
                    "title": "ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions.\nDefaults to false.\nMore info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod\n+optional",
                    "format": "boolean"
                }
            }
        },
        "v1GlusterfsVolumeSource": {
            "type": "object",
            "description": "Represents a Glusterfs mount that lasts the lifetime of a pod.\nGlusterfs volumes do not support ownership management or SELinux relabeling.",
            "properties": {
                "endpoints": {
                    "type": "string",
                    "title": "EndpointsName is the endpoint name that details Glusterfs topology.\nMore info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod"
                },
                "path": {
                    "type": "string",
                    "title": "Path is the Glusterfs volume path.\nMore info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod"
                },
                "readOnly": {
                    "type": "boolean",
                    "title": "ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions.\nDefaults to false.\nMore info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod\n+optional",
                    "format": "boolean"
                }
            }
        },
        "v1HTTPGetAction": {
            "type": "object",
            "description": "HTTPGetAction describes an action based on HTTP Get requests.",
            "properties": {
                "host": {
                    "type": "string",
                    "title": "Host name to connect to, defaults to the pod IP. You probably want to set\n\"Host\" in httpHeaders instead.\n+optional"
                },
                "httpHeaders": {
                    "type": "array",
                    "title": "Custom headers to set in the request. HTTP allows repeated headers.\n+optional",
                    "items": {
                        "$ref": "#/definitions/v1HTTPHeader"
                    }
                },
                "path": {
                    "type": "string",
                    "title": "Path to access on the HTTP server.\n+optional"
                },
                "port": {
                    "description": "Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.",
                    "$ref": "#/definitions/intstrIntOrString"
                },
                "scheme": {
                    "type": "string",
                    "title": "Scheme to use for connecting to the host.\nDefaults to HTTP.\n+optional"
                }
            }
        },
        "v1HTTPHeader": {
            "type": "object",
            "title": "HTTPHeader describes a custom header to be used in HTTP probes",
            "properties": {
                "name": {
                    "type": "string",
                    "title": "The header field name"
                },
                "value": {
                    "type": "string",
                    "title": "The header field value"
                }
            }
        },
        "v1Handler": {
            "type": "object",
            "description": "Handler defines a specific action that should be taken\nTODO: pass structured data to these actions, and document that data here.",
            "properties": {
                "exec": {
                    "title": "One and only one of the following should be specified.\nExec specifies the action to take.\n+optional",
                    "$ref": "#/definitions/v1ExecAction"
                },
                "httpGet": {
                    "title": "HTTPGet specifies the http request to perform.\n+optional",
                    "$ref": "#/definitions/v1HTTPGetAction"
                },
                "tcpSocket": {
                    "title": "TCPSocket specifies an action involving a TCP port.\nTCP hooks not yet supported\nTODO: implement a realistic TCP lifecycle hook\n+optional",
                    "$ref": "#/definitions/v1TCPSocketAction"
                }
            }
        },
        "v1HostAlias": {
            "type": "object",
            "description": "HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the\npod's hosts file.",
            "properties": {
                "hostnames": {
                    "type": "array",
                    "description": "Hostnames for the above IP address.",
                    "items": {
                        "type": "string"
                    }
                },
                "ip": {
                    "type": "string",
                    "description": "IP address of the host file entry."
                }
            }
        },
        "v1HostPathVolumeSource": {
            "type": "object",
            "description": "Represents a host path mapped into a pod.\nHost path volumes do not support ownership management or SELinux relabeling.",
            "properties": {
                "path": {
                    "type": "string",
                    "title": "Path of the directory on the host.\nIf the path is a symlink, it will follow the link to the real path.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath"
                },
                "type": {
                    "type": "string",
                    "title": "Type for HostPath Volume\nDefaults to \"\"\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath\n+optional"
                }
            }
        },
        "v1ISCSIPersistentVolumeSource": {
            "type": "object",
            "description": "ISCSIPersistentVolumeSource represents an ISCSI disk.\nISCSI volumes can only be mounted as read/write once.\nISCSI volumes support ownership management and SELinux relabeling.",
            "properties": {
                "chapAuthDiscovery": {
                    "type": "boolean",
                    "title": "whether support iSCSI Discovery CHAP authentication\n+optional",
                    "format": "boolean"
                },
                "chapAuthSession": {
                    "type": "boolean",
                    "title": "whether support iSCSI Session CHAP authentication\n+optional",
                    "format": "boolean"
                },
                "fsType": {
                    "type": "string",
                    "title": "Filesystem type of the volume that you want to mount.\nTip: Ensure that the filesystem type is supported by the host operating system.\nExamples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi\nTODO: how do we prevent errors in the filesystem from compromising the machine\n+optional"
                },
                "initiatorName": {
                    "type": "string",
                    "title": "Custom iSCSI Initiator Name.\nIf initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface\n\u003ctarget portal\u003e:\u003cvolume name\u003e will be created for the connection.\n+optional"
                },
                "iqn": {
                    "type": "string",
                    "description": "Target iSCSI Qualified Name."
                },
                "iscsiInterface": {
                    "type": "string",
                    "title": "iSCSI Interface Name that uses an iSCSI transport.\nDefaults to 'default' (tcp).\n+optional"
                },
                "lun": {
                    "type": "integer",
                    "description": "iSCSI Target Lun number.",
                    "format": "int32"
                },
                "portals": {
                    "type": "array",
                    "title": "iSCSI Target Portal List. The Portal is either an IP or ip_addr:port if the port\nis other than default (typically TCP ports 860 and 3260).\n+optional",
                    "items": {
                        "type": "string"
                    }
                },
                "readOnly": {
                    "type": "boolean",
                    "title": "ReadOnly here will force the ReadOnly setting in VolumeMounts.\nDefaults to false.\n+optional",
                    "format": "boolean"
                },
                "secretRef": {
                    "title": "CHAP Secret for iSCSI target and initiator authentication\n+optional",
                    "$ref": "#/definitions/v1SecretReference"
                },
                "targetPortal": {
                    "type": "string",
                    "description": "iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port\nis other than default (typically TCP ports 860 and 3260)."
                }
            }
        },
        "v1ISCSIVolumeSource": {
            "type": "object",
            "description": "Represents an ISCSI disk.\nISCSI volumes can only be mounted as read/write once.\nISCSI volumes support ownership management and SELinux relabeling.",
            "properties": {
                "chapAuthDiscovery": {
                    "type": "boolean",
                    "title": "whether support iSCSI Discovery CHAP authentication\n+optional",
                    "format": "boolean"
                },
                "chapAuthSession": {
                    "type": "boolean",
                    "title": "whether support iSCSI Session CHAP authentication\n+optional",
                    "format": "boolean"
                },
                "fsType": {
                    "type": "string",
                    "title": "Filesystem type of the volume that you want to mount.\nTip: Ensure that the filesystem type is supported by the host operating system.\nExamples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi\nTODO: how do we prevent errors in the filesystem from compromising the machine\n+optional"
                },
                "initiatorName": {
                    "type": "string",
                    "title": "Custom iSCSI Initiator Name.\nIf initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface\n\u003ctarget portal\u003e:\u003cvolume name\u003e will be created for the connection.\n+optional"
                },
                "iqn": {
                    "type": "string",
                    "description": "Target iSCSI Qualified Name."
                },
                "iscsiInterface": {
                    "type": "string",
                    "title": "iSCSI Interface Name that uses an iSCSI transport.\nDefaults to 'default' (tcp).\n+optional"
                },
                "lun": {
                    "type": "integer",
                    "description": "iSCSI Target Lun number.",
                    "format": "int32"
                },
                "portals": {
                    "type": "array",
                    "title": "iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port\nis other than default (typically TCP ports 860 and 3260).\n+optional",
                    "items": {
                        "type": "string"
                    }
                },
                "readOnly": {
                    "type": "boolean",
                    "title": "ReadOnly here will force the ReadOnly setting in VolumeMounts.\nDefaults to false.\n+optional",
                    "format": "boolean"
                },
                "secretRef": {
                    "title": "CHAP Secret for iSCSI target and initiator authentication\n+optional",
                    "$ref": "#/definitions/v1LocalObjectReference"
                },
                "targetPortal": {
                    "type": "string",
                    "description": "iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port\nis other than default (typically TCP ports 860 and 3260)."
                }
            }
        },
        "v1Job": {
            "type": "object",
            "description": "Job represents the configuration of a single job.",
            "properties": {
                "metadata": {
                    "title": "Standard object's metadata.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
                    "$ref": "#/definitions/v1ObjectMeta"
                },
                "spec": {
                    "title": "Specification of the desired behavior of a job.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status\n+optional",
                    "$ref": "#/definitions/v1JobSpec"
                },
                "status": {
                    "title": "Current status of a job.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status\n+optional",
                    "$ref": "#/definitions/v1JobStatus"
                }
            }
        },
        "v1JobCondition": {
            "type": "object",
            "description": "JobCondition describes current state of a job.",
            "properties": {
                "lastProbeTime": {
                    "title": "Last time the condition was checked.\n+optional",
                    "$ref": "#/definitions/v1Time"
                },
                "lastTransitionTime": {
                    "title": "Last time the condition transit from one status to another.\n+optional",
                    "$ref": "#/definitions/v1Time"
                },
                "message": {
                    "type": "string",
                    "title": "Human readable message indicating details about last transition.\n+optional"
                },
                "reason": {
                    "type": "string",
                    "title": "(brief) reason for the condition's last transition.\n+optional"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the condition, one of True, False, Unknown."
                },
                "type": {
                    "type": "string",
                    "description": "Type of job condition, Complete or Failed."
                }
            }
        },
        "v1JobList": {
            "type": "object",
            "description": "JobList is a collection of jobs.",
            "properties": {
                "items": {
                    "type": "array",
                    "description": "items is the list of Jobs.",
                    "items": {
                        "$ref": "#/definitions/v1Job"
                    }
                },
                "metadata": {
                    "title": "Standard list metadata.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
                    "$ref": "#/definitions/v1ListMeta"
                }
            }
        },
        "v1JobSpec": {
            "type": "object",
            "description": "JobSpec describes how the job execution will look like.",
            "properties": {
                "activeDeadlineSeconds": {
                    "type": "string",
                    "title": "Specifies the duration in seconds relative to the startTime that the job may be active\nbefore the system tries to terminate it; value must be positive integer\n+optional",
                    "format": "int64"
                },
                "backoffLimit": {
                    "type": "integer",
                    "title": "Specifies the number of retries before marking this job failed.\nDefaults to 6\n+optional",
                    "format": "int32"
                },
                "completions": {
                    "type": "integer",
                    "title": "Specifies the desired number of successfully finished pods the\njob should be run with.  Setting to nil means that the success of any\npod signals the success of all pods, and allows parallelism to have any positive\nvalue.  Setting to 1 means that parallelism is limited to 1 and the success of that\npod signals the success of the job.\nMore info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/\n+optional",
                    "format": "int32"
                },
                "manualSelector": {
                    "type": "boolean",
                    "title": "manualSelector controls generation of pod labels and pod selectors.\nLeave -manualSelector- unset unless you are certain what you are doing.\nWhen false or unset, the system pick labels unique to this job\nand appends those labels to the pod template.  When true,\nthe user is responsible for picking unique labels and specifying\nthe selector.  Failure to pick a unique label may cause this\nand other jobs to not function correctly.  However, You may see\n-manualSelector=true- in jobs that were created with the old -extensions/v1beta1-\nAPI.\nMore info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/#specifying-your-own-pod-selector\n+optional",
                    "format": "boolean"
                },
                "parallelism": {
                    "type": "integer",
                    "title": "Specifies the maximum desired number of pods the job should\nrun at any given time. The actual number of pods running in steady state will\nbe less than this number when ((.spec.completions - .status.successful) \u003c .spec.parallelism),\ni.e. when the work left to do is less than max parallelism.\nMore info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/\n+optional",
                    "format": "int32"
                },
                "selector": {
                    "title": "A label query over pods that should match the pod count.\nNormally, the system sets this field for you.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors\n+optional",
                    "$ref": "#/definitions/v1LabelSelector"
                },
                "template": {
                    "title": "Describes the pod that will be created when executing a job.\nMore info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/",
                    "$ref": "#/definitions/v1PodTemplateSpec"
                },
                "ttlSecondsAfterFinished": {
                    "type": "integer",
                    "title": "ttlSecondsAfterFinished limits the lifetime of a Job that has finished\nexecution (either Complete or Failed). If this field is set,\nttlSecondsAfterFinished after the Job finishes, it is eligible to be\nautomatically deleted. When the Job is being deleted, its lifecycle\nguarantees (e.g. finalizers) will be honored. If this field is unset,\nthe Job won't be automatically deleted. If this field is set to zero,\nthe Job becomes eligible to be deleted immediately after it finishes.\nThis field is alpha-level and is only honored by servers that enable the\nTTLAfterFinished feature.\n+optional",
                    "format": "int32"
                }
            }
        },
        "v1JobStatus": {
            "type": "object",
            "description": "JobStatus represents the current state of a Job.",
            "properties": {
                "active": {
                    "type": "integer",
                    "title": "The number of actively running pods.\n+optional",
                    "format": "int32"
                },
                "completionTime": {
                    "title": "Represents time when the job was completed. It is not guaranteed to\nbe set in happens-before order across separate operations.\nIt is represented in RFC3339 form and is in UTC.\n+optional",
                    "$ref": "#/definitions/v1Time"
                },
                "conditions": {
                    "type": "array",
                    "title": "The latest available observations of an object's current state.\nMore info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/\n+optional\n+patchMergeKey=type\n+patchStrategy=merge",
                    "items": {
                        "$ref": "#/definitions/v1JobCondition"
                    }
                },
                "failed": {
                    "type": "integer",
                    "title": "The number of pods which reached phase Failed.\n+optional",
                    "format": "int32"
                },
                "startTime": {
                    "title": "Represents time when the job was acknowledged by the job controller.\nIt is not guaranteed to be set in happens-before order across separate operations.\nIt is represented in RFC3339 form and is in UTC.\n+optional",
                    "$ref": "#/definitions/v1Time"
                },
                "succeeded": {
                    "type": "integer",
                    "title": "The number of pods which reached phase Succeeded.\n+optional",
                    "format": "int32"
                }
            }
        },
        "v1KeyToPath": {
            "type": "object",
            "description": "Maps a string key to a path within a volume.",
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The key to project."
                },
                "mode": {
                    "type": "integer",
                    "title": "Optional: mode bits to use on this file, must be a value between 0\nand 0777. If not specified, the volume defaultMode will be used.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.\n+optional",
                    "format": "int32"
                },
                "path": {
                    "type": "string",
                    "description": "The relative path of the file to map the key to.\nMay not be an absolute path.\nMay not contain the path element '..'.\nMay not start with the string '..'."
                }
            }
        },
        "v1LabelSelector": {
            "type": "object",
            "description": "A label selector is a label query over a set of resources. The result of matchLabels and\nmatchExpressions are ANDed. An empty label selector matches all objects. A null\nlabel selector matches no objects.",
            "properties": {
                "matchExpressions": {
                    "type": "array",
                    "title": "matchExpressions is a list of label selector requirements. The requirements are ANDed.\n+optional",
                    "items": {
                        "$ref": "#/definitions/v1LabelSelectorRequirement"
                    }
                },
                "matchLabels": {
                    "type": "object",
                    "title": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n+optional"
                }
            }
        },
        "v1LabelSelectorRequirement": {
            "type": "object",
            "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
            "properties": {
                "key": {
                    "type": "string",
                    "title": "key is the label key that the selector applies to.\n+patchMergeKey=key\n+patchStrategy=merge"
                },
                "operator": {
                    "type": "string",
                    "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist."
                },
                "values": {
                    "type": "array",
                    "title": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.\n+optional",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "v1Lifecycle": {
            "type": "object",
            "description": "Lifecycle describes actions that the management system should take in response to container lifecycle\nevents. For the PostStart and PreStop lifecycle handlers, management of the container blocks\nuntil the action is complete, unless the container process fails, in which case the handler is aborted.",
            "properties": {
                "postStart": {
                    "title": "PostStart is called immediately after a container is created. If the handler fails,\nthe container is terminated and restarted according to its restart policy.\nOther management of the container blocks until the hook completes.\nMore info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks\n+optional",
                    "$ref": "#/definitions/v1Handler"
                },
                "preStop": {
                    "title": "PreStop is called immediately before a container is terminated due to an\nAPI request or management event such as liveness/startup probe failure,\npreemption, resource contention, etc. The handler is not called if the\ncontainer crashes or exits. The reason for termination is passed to the\nhandler. The Pod's termination grace period countdown begins before the\nPreStop hooked is executed. Regardless of the outcome of the handler, the\ncontainer will eventually terminate within the Pod's termination grace\nperiod. Other management of the container blocks until the hook completes\nor until the termination grace period is reached.\nMore info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks\n+optional",
                    "$ref": "#/definitions/v1Handler"
                }
            }
        },
        "v1ListMeta": {
            "type": "object",
            "description": "ListMeta describes metadata that synthetic resources must have, including lists and\nvarious status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
            "properties": {
                "continue": {
                    "type": "string",
                    "description": "continue may be set if the user set a limit on the number of items returned, and indicates that\nthe server has more data available. The value is opaque and may be used to issue another request\nto the endpoint that served this list to retrieve the next set of available objects. Continuing a\nconsistent list may not be possible if the server configuration has changed or more than a few\nminutes have passed. The resourceVersion field returned when using this continue value will be\nidentical to the value in the first response, unless you have received this token from an error\nmessage."
                },
                "remainingItemCount": {
                    "type": "string",
                    "title": "remainingItemCount is the number of subsequent items in the list which are not included in this\nlist response. If the list request contained label or field selectors, then the number of\nremaining items is unknown and the field will be left unset and omitted during serialization.\nIf the list is complete (either because it is not chunking or because this is the last chunk),\nthen there are no more remaining items and this field will be left unset and omitted during\nserialization.\nServers older than v1.15 do not set this field.\nThe intended use of the remainingItemCount is *estimating* the size of a collection. Clients\nshould not rely on the remainingItemCount to be set or to be exact.\n+optional",
                    "format": "int64"
                },
                "resourceVersion": {
                    "type": "string",
                    "title": "String that identifies the server's internal version of this object that\ncan be used by clients to determine when objects have changed.\nValue must be treated as opaque by clients and passed unmodified back to the server.\nPopulated by the system.\nRead-only.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\n+optional"
                },
                "selfLink": {
                    "type": "string",
                    "description": "selfLink is a URL representing this object.\nPopulated by the system.\nRead-only.\n\nDEPRECATED\nKubernetes will stop propagating this field in 1.20 release and the field is planned\nto be removed in 1.21 release.\n+optional"
                }
            }
        },
        "v1LoadBalancerIngress": {
            "type": "object",
            "description": "LoadBalancerIngress represents the status of a load-balancer ingress point:\ntraffic intended for the service should be sent to an ingress point.",
            "properties": {
                "hostname": {
                    "type": "string",
                    "title": "Hostname is set for load-balancer ingress points that are DNS based\n(typically AWS load-balancers)\n+optional"
                },
                "ip": {
                    "type": "string",
                    "title": "IP is set for load-balancer ingress points that are IP based\n(typically GCE or OpenStack load-balancers)\n+optional"
                }
            }
        },
        "v1LoadBalancerStatus": {
            "type": "object",
            "description": "LoadBalancerStatus represents the status of a load-balancer.",
            "properties": {
                "ingress": {
                    "type": "array",
                    "title": "Ingress is a list containing ingress points for the load-balancer.\nTraffic intended for the service should be sent to these ingress points.\n+optional",
                    "items": {
                        "$ref": "#/definitions/v1LoadBalancerIngress"
                    }
                }
            }
        },
        "v1LocalObjectReference": {
            "type": "object",
            "description": "LocalObjectReference contains enough information to let you locate the\nreferenced object inside the same namespace.",
            "properties": {
                "name": {
                    "type": "string",
                    "title": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?\n+optional"
                }
            }
        },
        "v1LocalVolumeSource": {
            "type": "object",
            "title": "Local represents directly-attached storage with node affinity (Beta feature)",
            "properties": {
                "fsType": {
                    "type": "string",
                    "title": "Filesystem type to mount.\nIt applies only when the Path is a block device.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\". The default value is to auto-select a fileystem if unspecified.\n+optional"
                },
                "path": {
                    "type": "string",
                    "description": "The full path to the volume on the node.\nIt can be either a directory or block device (disk, partition, ...)."
                }
            }
        },
        "v1ManagedFieldsEntry": {
            "type": "object",
            "description": "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource\nthat the fieldset applies to.",
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "APIVersion defines the version of this resource that this field set\napplies to. The format is \"group/version\" just like the top-level\nAPIVersion field. It is necessary to track the version of a field\nset because it cannot be automatically converted."
                },
                "fieldsType": {
                    "type": "string",
                    "title": "FieldsType is the discriminator for the different fields format and version.\nThere is currently only one possible value: \"FieldsV1\""
                },
                "fieldsV1": {
                    "title": "FieldsV1 holds the first JSON version format as described in the \"FieldsV1\" type.\n+optional",
                    "$ref": "#/definitions/v1FieldsV1"
                },
                "manager": {
                    "type": "string",
                    "description": "Manager is an identifier of the workflow managing these fields."
                },
                "operation": {
                    "type": "string",
                    "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created.\nThe only valid values for this field are 'Apply' and 'Update'."
                },
                "time": {
                    "title": "Time is timestamp of when these fields were set. It should always be empty if Operation is 'Apply'\n+optional",
                    "$ref": "#/definitions/v1Time"
                }
            }
        },
        "v1NFSVolumeSource": {
            "type": "object",
            "description": "Represents an NFS mount that lasts the lifetime of a pod.\nNFS volumes do not support ownership management or SELinux relabeling.",
            "properties": {
                "path": {
                    "type": "string",
                    "title": "Path that is exported by the NFS server.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#nfs"
                },
                "readOnly": {
                    "type": "boolean",
                    "title": "ReadOnly here will force\nthe NFS export to be mounted with read-only permissions.\nDefaults to false.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#nfs\n+optional",
                    "format": "boolean"
                },
                "server": {
                    "type": "string",
                    "title": "Server is the hostname or IP address of the NFS server.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#nfs"
                }
            }
        },
        "v1Namespace": {
            "type": "object",
            "description": "Namespace provides a scope for Names.\nUse of multiple namespaces is optional.",
            "properties": {
                "metadata": {
                    "title": "Standard object's metadata.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
                    "$ref": "#/definitions/v1ObjectMeta"
                },
                "spec": {
                    "title": "Spec defines the behavior of the Namespace.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status\n+optional",
                    "$ref": "#/definitions/v1NamespaceSpec"
                },
                "status": {
                    "title": "Status describes the current status of a Namespace.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status\n+optional",
                    "$ref": "#/definitions/v1NamespaceStatus"
                }
            }
        },
        "v1NamespaceCondition": {
            "type": "object",
            "description": "NamespaceCondition contains details about state of namespace.",
            "properties": {
                "lastTransitionTime": {
                    "title": "+optional",
                    "$ref": "#/definitions/v1Time"
                },
                "message": {
                    "type": "string",
                    "title": "+optional"
                },
                "reason": {
                    "type": "string",
                    "title": "+optional"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the condition, one of True, False, Unknown."
                },
                "type": {
                    "type": "string",
                    "description": "Type of namespace controller condition."
                }
            }
        },
        "v1NamespaceList": {
            "type": "object",
            "description": "NamespaceList is a list of Namespaces.",
            "properties": {
                "items": {
                    "type": "array",
                    "title": "Items is the list of Namespace objects in the list.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                    "items": {
                        "$ref": "#/definitions/v1Namespace"
                    }
                },
                "metadata": {
                    "title": "Standard list metadata.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "$ref": "#/definitions/v1ListMeta"
                }
            }
        },
        "v1NamespaceSpec": {
            "type": "object",
            "description": "NamespaceSpec describes the attributes on a Namespace.",
            "properties": {
                "finalizers": {
                    "type": "array",
                    "title": "Finalizers is an opaque list of values that must be empty to permanently remove object from storage.\nMore info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/\n+optional",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "v1NamespaceStatus": {
            "type": "object",
            "description": "NamespaceStatus is information about the current status of a Namespace.",
            "properties": {
                "conditions": {
                    "type": "array",
                    "title": "Represents the latest available observations of a namespace's current state.\n+optional\n+patchMergeKey=type\n+patchStrategy=merge",
                    "items": {
                        "$ref": "#/definitions/v1NamespaceCondition"
                    }
                },
                "phase": {
                    "type": "string",
                    "title": "Phase is the current lifecycle phase of the namespace.\nMore info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/\n+optional"
                }
            }
        },
        "v1Node": {
            "type": "object",
            "description": "Node is a worker node in Kubernetes.\nEach node will have a unique identifier in the cache (i.e. in etcd).",
            "properties": {
                "metadata": {
                    "title": "Standard object's metadata.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
                    "$ref": "#/definitions/v1ObjectMeta"
                },
                "spec": {
                    "title": "Spec defines the behavior of a node.\nhttps://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status\n+optional",
                    "$ref": "#/definitions/v1NodeSpec"
                },
                "status": {
                    "title": "Most recently observed status of the node.\nPopulated by the system.\nRead-only.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status\n+optional",
                    "$ref": "#/definitions/v1NodeStatus"
                }
            }
        },
        "v1NodeAddress": {
            "type": "object",
            "description": "NodeAddress contains information for the node's address.",
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The node address."
                },
                "type": {
                    "type": "string",
                    "description": "Node address type, one of Hostname, ExternalIP or InternalIP."
                }
            }
        },
        "v1NodeAffinity": {
            "type": "object",
            "description": "Node affinity is a group of node affinity scheduling rules.",
            "properties": {
                "preferredDuringSchedulingIgnoredDuringExecution": {
                    "type": "array",
                    "title": "The scheduler will prefer to schedule pods to nodes that satisfy\nthe affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node matches the corresponding matchExpressions; the\nnode(s) with the highest sum are the most preferred.\n+optional",
                    "items": {
                        "$ref": "#/definitions/v1PreferredSchedulingTerm"
                    }
                },
                "requiredDuringSchedulingIgnoredDuringExecution": {
                    "title": "If the affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to an update), the system\nmay or may not try to eventually evict the pod from its node.\n+optional",
                    "$ref": "#/definitions/v1NodeSelector"
                }
            }
        },
        "v1NodeCondition": {
            "type": "object",
            "description": "NodeCondition contains condition information for a node.",
            "properties": {
                "lastHeartbeatTime": {
                    "title": "Last time we got an update on a given condition.\n+optional",
                    "$ref": "#/definitions/v1Time"
                },
                "lastTransitionTime": {
                    "title": "Last time the condition transit from one status to another.\n+optional",
                    "$ref": "#/definitions/v1Time"
                },
                "message": {
                    "type": "string",
                    "title": "Human readable message indicating details about last transition.\n+optional"
                },
                "reason": {
                    "type": "string",
                    "title": "(brief) reason for the condition's last transition.\n+optional"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the condition, one of True, False, Unknown."
                },
                "type": {
                    "type": "string",
                    "description": "Type of node condition."
                }
            }
        },
        "v1NodeConfigSource": {
            "type": "object",
            "description": "NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil.",
            "properties": {
                "configMap": {
                    "title": "ConfigMap is a reference to a Node's ConfigMap",
                    "$ref": "#/definitions/v1ConfigMapNodeConfigSource"
                }
            }
        },
        "v1NodeConfigStatus": {
            "type": "object",
            "description": "NodeConfigStatus describes the status of the config assigned by Node.Spec.ConfigSource.",
            "properties": {
                "active": {
                    "title": "Active reports the checkpointed config the node is actively using.\nActive will represent either the current version of the Assigned config,\nor the current LastKnownGood config, depending on whether attempting to use the\nAssigned config results in an error.\n+optional",
                    "$ref": "#/definitions/v1NodeConfigSource"
                },
                "assigned": {
                    "title": "Assigned reports the checkpointed config the node will try to use.\nWhen Node.Spec.ConfigSource is updated, the node checkpoints the associated\nconfig payload to local disk, along with a record indicating intended\nconfig. The node refers to this record to choose its config checkpoint, and\nreports this record in Assigned. Assigned only updates in the status after\nthe record has been checkpointed to disk. When the Kubelet is restarted,\nit tries to make the Assigned config the Active config by loading and\nvalidating the checkpointed payload identified by Assigned.\n+optional",
                    "$ref": "#/definitions/v1NodeConfigSource"
                },
                "error": {
                    "type": "string",
                    "title": "Error describes any problems reconciling the Spec.ConfigSource to the Active config.\nErrors may occur, for example, attempting to checkpoint Spec.ConfigSource to the local Assigned\nrecord, attempting to checkpoint the payload associated with Spec.ConfigSource, attempting\nto load or validate the Assigned config, etc.\nErrors may occur at different points while syncing config. Earlier errors (e.g. download or\ncheckpointing errors) will not result in a rollback to LastKnownGood, and may resolve across\nKubelet retries. Later errors (e.g. loading or validating a checkpointed config) will result in\na rollback to LastKnownGood. In the latter case, it is usually possible to resolve the error\nby fixing the config assigned in Spec.ConfigSource.\nYou can find additional information for debugging by searching the error message in the Kubelet log.\nError is a human-readable description of the error state; machines can check whether or not Error\nis empty, but should not rely on the stability of the Error text across Kubelet versions.\n+optional"
                },
                "lastKnownGood": {
                    "title": "LastKnownGood reports the checkpointed config the node will fall back to\nwhen it encounters an error attempting to use the Assigned config.\nThe Assigned config becomes the LastKnownGood config when the node determines\nthat the Assigned config is stable and correct.\nThis is currently implemented as a 10-minute soak period starting when the local\nrecord of Assigned config is updated. If the Assigned config is Active at the end\nof this period, it becomes the LastKnownGood. Note that if Spec.ConfigSource is\nreset to nil (use local defaults), the LastKnownGood is also immediately reset to nil,\nbecause the local default config is always assumed good.\nYou should not make assumptions about the node's method of determining config stability\nand correctness, as this may change or become configurable in the future.\n+optional",
                    "$ref": "#/definitions/v1NodeConfigSource"
                }
            }
        },
        "v1NodeDaemonEndpoints": {
            "type": "object",
            "description": "NodeDaemonEndpoints lists ports opened by daemons running on the Node.",
            "properties": {
                "kubeletEndpoint": {
                    "title": "Endpoint on which Kubelet is listening.\n+optional",
                    "$ref": "#/definitions/v1DaemonEndpoint"
                }
            }
        },
        "v1NodeList": {
            "type": "object",
            "description": "NodeList is the whole list of all Nodes which have been registered with master.",
            "properties": {
                "items": {
                    "type": "array",
                    "title": "List of nodes",
                    "items": {
                        "$ref": "#/definitions/v1Node"
                    }
                },
                "metadata": {
                    "title": "Standard list metadata.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "$ref": "#/definitions/v1ListMeta"
                }
            }
        },
        "v1NodeSelector": {
            "type": "object",
            "description": "A node selector represents the union of the results of one or more label queries\nover a set of nodes; that is, it represents the OR of the selectors represented\nby the node selector terms.",
            "properties": {
                "nodeSelectorTerms": {
                    "type": "array",
                    "description": "Required. A list of node selector terms. The terms are ORed.",
                    "items": {
                        "$ref": "#/definitions/v1NodeSelectorTerm"
                    }
                }
            }
        },
        "v1NodeSelectorRequirement": {
            "type": "object",
            "description": "A node selector requirement is a selector that contains values, a key, and an operator\nthat relates the key and values.",
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The label key that the selector applies to."
                },
                "operator": {
                    "type": "string",
                    "description": "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
                },
                "values": {
                    "type": "array",
                    "title": "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.\n+optional",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "v1NodeSelectorTerm": {
            "type": "object",
            "description": "A null or empty node selector term matches no objects. The requirements of\nthem are ANDed.\nThe TopologySelectorTerm type implements a subset of the NodeSelectorTerm.",
            "properties": {
                "matchExpressions": {
                    "type": "array",
                    "title": "A list of node selector requirements by node's labels.\n+optional",
                    "items": {
                        "$ref": "#/definitions/v1NodeSelectorRequirement"
                    }
                },
                "matchFields": {
                    "type": "array",
                    "title": "A list of node selector requirements by node's fields.\n+optional",
                    "items": {
                        "$ref": "#/definitions/v1NodeSelectorRequirement"
                    }
                }
            }
        },
        "v1NodeSpec": {
            "type": "object",
            "description": "NodeSpec describes the attributes that a node is created with.",
            "properties": {
                "configSource": {
                    "title": "If specified, the source to get node configuration from\nThe DynamicKubeletConfig feature gate must be enabled for the Kubelet to use this field\n+optional",
                    "$ref": "#/definitions/v1NodeConfigSource"
                },
                "externalID": {
                    "type": "string",
                    "title": "Deprecated. Not all kubelets will set this field. Remove field after 1.13.\nsee: https://issues.k8s.io/61966\n+optional"
                },
                "podCIDR": {
                    "type": "string",
                    "title": "PodCIDR represents the pod IP range assigned to the node.\n+optional"
                },
                "podCIDRs": {
                    "type": "array",
                    "title": "podCIDRs represents the IP ranges assigned to the node for usage by Pods on that node. If this\nfield is specified, the 0th entry must match the podCIDR field. It may contain at most 1 value for\neach of IPv4 and IPv6.\n+optional\n+patchStrategy=merge",
                    "items": {
                        "type": "string"
                    }
                },
                "providerID": {
                    "type": "string",
                    "title": "ID of the node assigned by the cloud provider in the format: \u003cProviderName\u003e://\u003cProviderSpecificNodeID\u003e\n+optional"
                },
                "taints": {
                    "type": "array",
                    "title": "If specified, the node's taints.\n+optional",
                    "items": {
                        "$ref": "#/definitions/v1Taint"
                    }
                },
                "unschedulable": {
                    "type": "boolean",
                    "title": "Unschedulable controls node schedulability of new pods. By default, node is schedulable.\nMore info: https://kubernetes.io/docs/concepts/nodes/node/#manual-node-administration\n+optional",
                    "format": "boolean"
                }
            }
        },
        "v1NodeStatus": {
            "type": "object",
            "description": "NodeStatus is information about the current status of a node.",
            "properties": {
                "addresses": {
                    "type": "array",
                    "title": "List of addresses reachable to the node.\nQueried from cloud provider, if available.\nMore info: https://kubernetes.io/docs/concepts/nodes/node/#addresses\nNote: This field is declared as mergeable, but the merge key is not sufficiently\nunique, which can cause data corruption when it is merged. Callers should instead\nuse a full-replacement patch. See http://pr.k8s.io/79391 for an example.\n+optional\n+patchMergeKey=type\n+patchStrategy=merge",
                    "items": {
                        "$ref": "#/definitions/v1NodeAddress"
                    }
                },
                "allocatable": {
                    "type": "object",
                    "title": "Allocatable represents the resources of a node that are available for scheduling.\nDefaults to Capacity.\n+optional"
                },
                "capacity": {
                    "type": "object",
                    "title": "Capacity represents the total resources of a node.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity\n+optional"
                },
                "conditions": {
                    "type": "array",
                    "title": "Conditions is an array of current observed node conditions.\nMore info: https://kubernetes.io/docs/concepts/nodes/node/#condition\n+optional\n+patchMergeKey=type\n+patchStrategy=merge",
                    "items": {
                        "$ref": "#/definitions/v1NodeCondition"
                    }
                },
                "config": {
                    "title": "Status of the config assigned to the node via the dynamic Kubelet config feature.\n+optional",
                    "$ref": "#/definitions/v1NodeConfigStatus"
                },
                "daemonEndpoints": {
                    "title": "Endpoints of daemons running on the Node.\n+optional",
                    "$ref": "#/definitions/v1NodeDaemonEndpoints"
                },
                "images": {
                    "type": "array",
                    "title": "List of container images on this node\n+optional",
                    "items": {
                        "$ref": "#/definitions/v1ContainerImage"
                    }
                },
                "nodeInfo": {
                    "title": "Set of ids/uuids to uniquely identify the node.\nMore info: https://kubernetes.io/docs/concepts/nodes/node/#info\n+optional",
                    "$ref": "#/definitions/v1NodeSystemInfo"
                },
                "phase": {
                    "type": "string",
                    "title": "NodePhase is the recently observed lifecycle phase of the node.\nMore info: https://kubernetes.io/docs/concepts/nodes/node/#phase\nThe field is never populated, and now is deprecated.\n+optional"
                },
                "volumesAttached": {
                    "type": "array",
                    "title": "List of volumes that are attached to the node.\n+optional",
                    "items": {
                        "$ref": "#/definitions/v1AttachedVolume"
                    }
                },
                "volumesInUse": {
                    "type": "array",
                    "title": "List of attachable volumes in use (mounted) by the node.\n+optional",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "v1NodeSystemInfo": {
            "type": "object",
            "description": "NodeSystemInfo is a set of ids/uuids to uniquely identify the node.",
            "properties": {
                "architecture": {
                    "type": "string",
                    "title": "The Architecture reported by the node"
                },
                "bootID": {
                    "type": "string",
                    "description": "Boot ID reported by the node."
                },
                "containerRuntimeVersion": {
                    "type": "string",
                    "description": "ContainerRuntime Version reported by the node through runtime remote API (e.g. docker://1.5.0)."
                },
                "kernelVersion": {
                    "type": "string",
                    "description": "Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64)."
                },
                "kubeProxyVersion": {
                    "type": "string",
                    "description": "KubeProxy Version reported by the node."
                },
                "kubeletVersion": {
                    "type": "string",
                    "description": "Kubelet Version reported by the node."
                },
                "machineID": {
                    "type": "string",
                    "title": "MachineID reported by the node. For unique machine identification\nin the cluster this field is preferred. Learn more from man(5)\nmachine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html"
                },
                "operatingSystem": {
                    "type": "string",
                    "title": "The Operating System reported by the node"
                },
                "osImage": {
                    "type": "string",
                    "description": "OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy))."
                },
                "systemUUID": {
                    "type": "string",
                    "title": "SystemUUID reported by the node. For unique machine identification\nMachineID is preferred. This field is specific to Red Hat hosts\nhttps://access.redhat.com/documentation/en-US/Red_Hat_Subscription_Management/1/html/RHSM/getting-system-uuid.html"
                }
            }
        },
        "v1ObjectFieldSelector": {
            "type": "object",
            "description": "ObjectFieldSelector selects an APIVersioned field of an object.",
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "title": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".\n+optional"
                },
                "fieldPath": {
                    "type": "string",
                    "description": "Path of the field to select in the specified API version."
                }
            }
        },
        "v1ObjectMeta": {
            "type": "object",
            "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects\nusers must create.",
            "properties": {
                "annotations": {
                    "type": "object",
                    "title": "Annotations is an unstructured key value map stored with a resource that may be\nset by external tools to store and retrieve arbitrary metadata. They are not\nqueryable and should be preserved when modifying objects.\nMore info: http://kubernetes.io/docs/user-guide/annotations\n+optional"
                },
                "clusterName": {
                    "type": "string",
                    "title": "The name of the cluster which the object belongs to.\nThis is used to distinguish resources with same name and namespace in different clusters.\nThis field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n+optional"
                },
                "creationTimestamp": {
                    "description": "CreationTimestamp is a timestamp representing the server time when this object was\ncreated. It is not guaranteed to be set in happens-before order across separate operations.\nClients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system.\nRead-only.\nNull for lists.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
                    "$ref": "#/definitions/v1Time"
                },
                "deletionGracePeriodSeconds": {
                    "type": "string",
                    "title": "Number of seconds allowed for this object to gracefully terminate before\nit will be removed from the system. Only set when deletionTimestamp is also set.\nMay only be shortened.\nRead-only.\n+optional",
                    "format": "int64"
                },
                "deletionTimestamp": {
                    "description": "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This\nfield is set by the server when a graceful deletion is requested by the user, and is not\ndirectly settable by a client. The resource is expected to be deleted (no longer visible\nfrom resource lists, and not reachable by name) after the time in this field, once the\nfinalizers list is empty. As long as the finalizers list contains items, deletion is blocked.\nOnce the deletionTimestamp is set, this value may not be unset or be set further into the\nfuture, although it may be shortened or the resource may be deleted prior to this time.\nFor example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react\nby sending a graceful termination signal to the containers in the pod. After that 30 seconds,\nthe Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup,\nremove the pod from the API. In the presence of network partitions, this object may still\nexist after this timestamp, until an administrator or automated process can determine the\nresource is fully terminated.\nIf not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested.\nRead-only.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
                    "$ref": "#/definitions/v1Time"
                },
                "finalizers": {
                    "type": "array",
                    "title": "Must be empty before the object is deleted from the registry. Each entry\nis an identifier for the responsible component that will remove the entry\nfrom the list. If the deletionTimestamp of the object is non-nil, entries\nin this list can only be removed.\nFinalizers may be processed and removed in any order.  Order is NOT enforced\nbecause it introduces significant risk of stuck finalizers.\nfinalizers is a shared field, any actor with permission can reorder it.\nIf the finalizer list is processed in order, then this can lead to a situation\nin which the component responsible for the first finalizer in the list is\nwaiting for a signal (field value, external system, or other) produced by a\ncomponent responsible for a finalizer later in the list, resulting in a deadlock.\nWithout enforced ordering finalizers are free to order amongst themselves and\nare not vulnerable to ordering changes in the list.\n+optional\n+patchStrategy=merge",
                    "items": {
                        "type": "string"
                    }
                },
                "generateName": {
                    "type": "string",
                    "description": "GenerateName is an optional prefix, used by the server, to generate a unique\nname ONLY IF the Name field has not been provided.\nIf this field is used, the name returned to the client will be different\nthan the name passed. This value will also be combined with a unique suffix.\nThe provided value has the same validation rules as the Name field,\nand may be truncated by the length of the suffix required to make the value\nunique on the server.\n\nIf this field is specified and the generated name exists, the server will\nNOT return a 409 - instead, it will either return 201 Created or 500 with Reason\nServerTimeout indicating a unique name could not be found in the time allotted, and the client\nshould retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\n+optional"
                },
                "generation": {
                    "type": "string",
                    "title": "A sequence number representing a specific generation of the desired state.\nPopulated by the system. Read-only.\n+optional",
                    "format": "int64"
                },
                "labels": {
                    "type": "object",
                    "title": "Map of string keys and values that can be used to organize and categorize\n(scope and select) objects. May match selectors of replication controllers\nand services.\nMore info: http://kubernetes.io/docs/user-guide/labels\n+optional"
                },
                "managedFields": {
                    "type": "array",
                    "description": "ManagedFields maps workflow-id and version to the set of fields\nthat are managed by that workflow. This is mostly for internal\nhousekeeping, and users typically shouldn't need to set or\nunderstand this field. A workflow can be the user's name, a\ncontroller's name, or the name of a specific apply path like\n\"ci-cd\". The set of fields is always in the version that the\nworkflow used when modifying the object.\n\n+optional",
                    "items": {
                        "$ref": "#/definitions/v1ManagedFieldsEntry"
                    }
                },
                "name": {
                    "type": "string",
                    "title": "Name must be unique within a namespace. Is required when creating resources, although\nsome resources may allow a client to request the generation of an appropriate name\nautomatically. Name is primarily intended for creation idempotence and configuration\ndefinition.\nCannot be updated.\nMore info: http://kubernetes.io/docs/user-guide/identifiers#names\n+optional"
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace defines the space within each name must be unique. An empty namespace is\nequivalent to the \"default\" namespace, but \"default\" is the canonical representation.\nNot all objects are required to be scoped to a namespace - the value of this field for\nthose objects will be empty.\n\nMust be a DNS_LABEL.\nCannot be updated.\nMore info: http://kubernetes.io/docs/user-guide/namespaces\n+optional"
                },
                "ownerReferences": {
                    "type": "array",
                    "title": "List of objects depended by this object. If ALL objects in the list have\nbeen deleted, this object will be garbage collected. If this object is managed by a controller,\nthen an entry in this list will point to this controller, with the controller field set to true.\nThere cannot be more than one managing controller.\n+optional\n+patchMergeKey=uid\n+patchStrategy=merge",
                    "items": {
                        "$ref": "#/definitions/v1OwnerReference"
                    }
                },
                "resourceVersion": {
                    "type": "string",
                    "description": "An opaque value that represents the internal version of this object that can\nbe used by clients to determine when objects have changed. May be used for optimistic\nconcurrency, change detection, and the watch operation on a resource or set of resources.\nClients must treat these values as opaque and passed unmodified back to the server.\nThey may only be valid for a particular resource or set of resources.\n\nPopulated by the system.\nRead-only.\nValue must be treated as opaque by clients and .\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\n+optional"
                },
                "selfLink": {
                    "type": "string",
                    "description": "SelfLink is a URL representing this object.\nPopulated by the system.\nRead-only.\n\nDEPRECATED\nKubernetes will stop propagating this field in 1.20 release and the field is planned\nto be removed in 1.21 release.\n+optional"
                },
                "uid": {
                    "type": "string",
                    "description": "UID is the unique in time and space value for this object. It is typically generated by\nthe server on successful creation of a resource and is not allowed to change on PUT\noperations.\n\nPopulated by the system.\nRead-only.\nMore info: http://kubernetes.io/docs/user-guide/identifiers#uids\n+optional"
                }
            }
        },
        "v1ObjectReference": {
            "type": "object",
            "title": "ObjectReference contains enough information to let you inspect or modify the referred object.\n+k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object",
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "title": "API version of the referent.\n+optional"
                },
                "fieldPath": {
                    "type": "string",
                    "title": "If referring to a piece of an object instead of an entire object, this string\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\nFor example, if the object reference is to a container within a pod, this would take on a value like:\n\"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered\nthe event) or if no container name is specified \"spec.containers[2]\" (container with\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\nreferencing a part of an object.\nTODO: this design is not final and this field is subject to change in the future.\n+optional"
                },
                "kind": {
                    "type": "string",
                    "title": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional"
                },
                "name": {
                    "type": "string",
                    "title": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n+optional"
                },
                "namespace": {
                    "type": "string",
                    "title": "Namespace of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/\n+optional"
                },
                "resourceVersion": {
                    "type": "string",
                    "title": "Specific resourceVersion to which this reference is made, if any.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\n+optional"
                },
                "uid": {
                    "type": "string",
                    "title": "UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids\n+optional"
                }
            }
        },
        "v1OwnerReference": {
            "type": "object",
            "description": "OwnerReference contains enough information to let you identify an owning\nobject. An owning object must be in the same namespace as the dependent, or\nbe cluster-scoped, so there is no namespace field.",
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "API version of the referent."
                },
                "blockOwnerDeletion": {
                    "type": "boolean",
                    "title": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then\nthe owner cannot be deleted from the key-value store until this\nreference is removed.\nDefaults to false.\nTo set this field, a user needs \"delete\" permission of the owner,\notherwise 422 (Unprocessable Entity) will be returned.\n+optional",
                    "format": "boolean"
                },
                "controller": {
                    "type": "boolean",
                    "title": "If true, this reference points to the managing controller.\n+optional",
                    "format": "boolean"
                },
                "kind": {
                    "type": "string",
                    "title": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
                },
                "name": {
                    "type": "string",
                    "title": "Name of the referent.\nMore info: http://kubernetes.io/docs/user-guide/identifiers#names"
                },
                "uid": {
                    "type": "string",
                    "title": "UID of the referent.\nMore info: http://kubernetes.io/docs/user-guide/identifiers#uids"
                }
            }
        },
        "v1PersistentVolume": {
            "type": "object",
            "title": "PersistentVolume (PV) is a storage resource provisioned by an administrator.\nIt is analogous to a node.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes",
            "properties": {
                "metadata": {
                    "title": "Standard object's metadata.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
                    "$ref": "#/definitions/v1ObjectMeta"
                },
                "spec": {
                    "title": "Spec defines a specification of a persistent volume owned by the cluster.\nProvisioned by an administrator.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes\n+optional",
                    "$ref": "#/definitions/v1PersistentVolumeSpec"
                },
                "status": {
                    "title": "Status represents the current information/status for the persistent volume.\nPopulated by the system.\nRead-only.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes\n+optional",
                    "$ref": "#/definitions/v1PersistentVolumeStatus"
                }
            }
        },
        "v1PersistentVolumeClaim": {
            "type": "object",
            "title": "PersistentVolumeClaim is a user's request for and claim to a persistent volume",
            "properties": {
                "metadata": {
                    "title": "Standard object's metadata.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
                    "$ref": "#/definitions/v1ObjectMeta"
                },
                "spec": {
                    "title": "Spec defines the desired characteristics of a volume requested by a pod author.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims\n+optional",
                    "$ref": "#/definitions/v1PersistentVolumeClaimSpec"
                },
                "status": {
                    "title": "Status represents the current information/status of a persistent volume claim.\nRead-only.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims\n+optional",
                    "$ref": "#/definitions/v1PersistentVolumeClaimStatus"
                }
            }
        },
        "v1PersistentVolumeClaimCondition": {
            "type": "object",
            "title": "PersistentVolumeClaimCondition contails details about state of pvc",
            "properties": {
                "lastProbeTime": {
                    "title": "Last time we probed the condition.\n+optional",
                    "$ref": "#/definitions/v1Time"
                },
                "lastTransitionTime": {
                    "title": "Last time the condition transitioned from one status to another.\n+optional",
                    "$ref": "#/definitions/v1Time"
                },
                "message": {
                    "type": "string",
                    "title": "Human-readable message indicating details about last transition.\n+optional"
                },
                "reason": {
                    "type": "string",
                    "title": "Unique, this should be a short, machine understandable string that gives the reason\nfor condition's last transition. If it reports \"ResizeStarted\" that means the underlying\npersistent volume is being resized.\n+optional"
                },
                "status": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "v1PersistentVolumeClaimList": {
            "type": "object",
            "description": "PersistentVolumeClaimList is a list of PersistentVolumeClaim items.",
            "properties": {
                "items": {
                    "type": "array",
                    "title": "A list of persistent volume claims.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
                    "items": {
                        "$ref": "#/definitions/v1PersistentVolumeClaim"
                    }
                },
                "metadata": {
                    "title": "Standard list metadata.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "$ref": "#/definitions/v1ListMeta"
                }
            }
        },
        "v1PersistentVolumeClaimSpec": {
            "type": "object",
            "title": "PersistentVolumeClaimSpec describes the common attributes of storage devices\nand allows a Source for provider-specific attributes",
            "properties": {
                "accessModes": {
                    "type": "array",
                    "title": "AccessModes contains the desired access modes the volume should have.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1\n+optional",
                    "items": {
                        "type": "string"
                    }
                },
                "dataSource": {
                    "title": "This field requires the VolumeSnapshotDataSource alpha feature gate to be\nenabled and currently VolumeSnapshot is the only supported data source.\nIf the provisioner can support VolumeSnapshot data source, it will create\na new volume and data will be restored to the volume at the same time.\nIf the provisioner does not support VolumeSnapshot data source, volume will\nnot be created and the failure will be reported as an event.\nIn the future, we plan to support more data source types and the behavior\nof the provisioner may change.\n+optional",
                    "$ref": "#/definitions/v1TypedLocalObjectReference"
                },
                "resources": {
                    "title": "Resources represents the minimum resources the volume should have.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources\n+optional",
                    "$ref": "#/definitions/v1ResourceRequirements"
                },
                "selector": {
                    "title": "A label query over volumes to consider for binding.\n+optional",
                    "$ref": "#/definitions/v1LabelSelector"
                },
                "storageClassName": {
                    "type": "string",
                    "title": "Name of the StorageClass required by the claim.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1\n+optional"
                },
                "volumeMode": {
                    "type": "string",
                    "title": "volumeMode defines what type of volume is required by the claim.\nValue of Filesystem is implied when not included in claim spec.\nThis is a beta feature.\n+optional"
                },
                "volumeName": {
                    "type": "string",
                    "title": "VolumeName is the binding reference to the PersistentVolume backing this claim.\n+optional"
                }
            }
        },
        "v1PersistentVolumeClaimStatus": {
            "type": "object",
            "description": "PersistentVolumeClaimStatus is the current status of a persistent volume claim.",
            "properties": {
                "accessModes": {
                    "type": "array",
                    "title": "AccessModes contains the actual access modes the volume backing the PVC has.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1\n+optional",
                    "items": {
                        "type": "string"
                    }
                },
                "capacity": {
                    "type": "object",
                    "title": "Represents the actual resources of the underlying volume.\n+optional"
                },
                "conditions": {
                    "type": "array",
                    "title": "Current Condition of persistent volume claim. If underlying persistent volume is being\nresized then the Condition will be set to 'ResizeStarted'.\n+optional\n+patchMergeKey=type\n+patchStrategy=merge",
                    "items": {
                        "$ref": "#/definitions/v1PersistentVolumeClaimCondition"
                    }
                },
                "phase": {
                    "type": "string",
                    "title": "Phase represents the current phase of PersistentVolumeClaim.\n+optional"
                }
            }
        },
        "v1PersistentVolumeClaimVolumeSource": {
            "type": "object",
            "description": "PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace.\nThis volume finds the bound PV and mounts that volume for the pod. A\nPersistentVolumeClaimVolumeSource is, essentially, a wrapper around another\ntype of volume that is owned by someone else (the system).",
            "properties": {
                "claimName": {
                    "type": "string",
                    "title": "ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims"
                },
                "readOnly": {
                    "type": "boolean",
                    "title": "Will force the ReadOnly setting in VolumeMounts.\nDefault false.\n+optional",
                    "format": "boolean"
                }
            }
        },
        "v1PersistentVolumeList": {
            "type": "object",
            "description": "PersistentVolumeList is a list of PersistentVolume items.",
            "properties": {
                "items": {
                    "type": "array",
                    "title": "List of persistent volumes.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes",
                    "items": {
                        "$ref": "#/definitions/v1PersistentVolume"
                    }
                },
                "metadata": {
                    "title": "Standard list metadata.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "$ref": "#/definitions/v1ListMeta"
                }
            }
        },
        "v1PersistentVolumeSource": {
            "type": "object",
            "description": "PersistentVolumeSource is similar to VolumeSource but meant for the\nadministrator who creates PVs. Exactly one of its members must be set.",
            "properties": {
                "awsElasticBlockStore": {
                    "title": "AWSElasticBlockStore represents an AWS Disk resource that is attached to a\nkubelet's host machine and then exposed to the pod.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore\n+optional",
                    "$ref": "#/definitions/v1AWSElasticBlockStoreVolumeSource"
                },
                "azureDisk": {
                    "title": "AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.\n+optional",
                    "$ref": "#/definitions/v1AzureDiskVolumeSource"
                },
                "azureFile": {
                    "title": "AzureFile represents an Azure File Service mount on the host and bind mount to the pod.\n+optional",
                    "$ref": "#/definitions/v1AzureFilePersistentVolumeSource"
                },
                "cephfs": {
                    "title": "CephFS represents a Ceph FS mount on the host that shares a pod's lifetime\n+optional",
                    "$ref": "#/definitions/v1CephFSPersistentVolumeSource"
                },
                "cinder": {
                    "title": "Cinder represents a cinder volume attached and mounted on kubelets host machine.\nMore info: https://examples.k8s.io/mysql-cinder-pd/README.md\n+optional",
                    "$ref": "#/definitions/v1CinderPersistentVolumeSource"
                },
                "csi": {
                    "title": "CSI represents storage that is handled by an external CSI driver (Beta feature).\n+optional",
                    "$ref": "#/definitions/v1CSIPersistentVolumeSource"
                },
                "fc": {
                    "title": "FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.\n+optional",
                    "$ref": "#/definitions/v1FCVolumeSource"
                },
                "flexVolume": {
                    "title": "FlexVolume represents a generic volume resource that is\nprovisioned/attached using an exec based plugin.\n+optional",
                    "$ref": "#/definitions/v1FlexPersistentVolumeSource"
                },
                "flocker": {
                    "title": "Flocker represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running\n+optional",
                    "$ref": "#/definitions/v1FlockerVolumeSource"
                },
                "gcePersistentDisk": {
                    "title": "GCEPersistentDisk represents a GCE Disk resource that is attached to a\nkubelet's host machine and then exposed to the pod. Provisioned by an admin.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\n+optional",
                    "$ref": "#/definitions/v1GCEPersistentDiskVolumeSource"
                },
                "glusterfs": {
                    "title": "Glusterfs represents a Glusterfs volume that is attached to a host and\nexposed to the pod. Provisioned by an admin.\nMore info: https://examples.k8s.io/volumes/glusterfs/README.md\n+optional",
                    "$ref": "#/definitions/v1GlusterfsPersistentVolumeSource"
                },
                "hostPath": {
                    "title": "HostPath represents a directory on the host.\nProvisioned by a developer or tester.\nThis is useful for single-node development and testing only!\nOn-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath\n+optional",
                    "$ref": "#/definitions/v1HostPathVolumeSource"
                },
                "iscsi": {
                    "title": "ISCSI represents an ISCSI Disk resource that is attached to a\nkubelet's host machine and then exposed to the pod. Provisioned by an admin.\n+optional",
                    "$ref": "#/definitions/v1ISCSIPersistentVolumeSource"
                },
                "local": {
                    "title": "Local represents directly-attached storage with node affinity\n+optional",
                    "$ref": "#/definitions/v1LocalVolumeSource"
                },
                "nfs": {
                    "title": "NFS represents an NFS mount on the host. Provisioned by an admin.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#nfs\n+optional",
                    "$ref": "#/definitions/v1NFSVolumeSource"
                },
                "photonPersistentDisk": {
                    "title": "PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine",
                    "$ref": "#/definitions/v1PhotonPersistentDiskVolumeSource"
                },
                "portworxVolume": {
                    "title": "PortworxVolume represents a portworx volume attached and mounted on kubelets host machine\n+optional",
                    "$ref": "#/definitions/v1PortworxVolumeSource"
                },
                "quobyte": {
                    "title": "Quobyte represents a Quobyte mount on the host that shares a pod's lifetime\n+optional",
                    "$ref": "#/definitions/v1QuobyteVolumeSource"
                },
                "rbd": {
                    "title": "RBD represents a Rados Block Device mount on the host that shares a pod's lifetime.\nMore info: https://examples.k8s.io/volumes/rbd/README.md\n+optional",
                    "$ref": "#/definitions/v1RBDPersistentVolumeSource"
                },
                "scaleIO": {
                    "title": "ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.\n+optional",
                    "$ref": "#/definitions/v1ScaleIOPersistentVolumeSource"
                },
                "storageos": {
                    "title": "StorageOS represents a StorageOS volume that is attached to the kubelet's host machine and mounted into the pod\nMore info: https://examples.k8s.io/volumes/storageos/README.md\n+optional",
                    "$ref": "#/definitions/v1StorageOSPersistentVolumeSource"
                },
                "vsphereVolume": {
                    "title": "VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine\n+optional",
                    "$ref": "#/definitions/v1VsphereVirtualDiskVolumeSource"
                }
            }
        },
        "v1PersistentVolumeSpec": {
            "type": "object",
            "description": "PersistentVolumeSpec is the specification of a persistent volume.",
            "properties": {
                "accessModes": {
                    "type": "array",
                    "title": "AccessModes contains all ways the volume can be mounted.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes\n+optional",
                    "items": {
                        "type": "string"
                    }
                },
                "capacity": {
                    "type": "object",
                    "title": "A description of the persistent volume's resources and capacity.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity\n+optional"
                },
                "claimRef": {
                    "title": "ClaimRef is part of a bi-directional binding between PersistentVolume and PersistentVolumeClaim.\nExpected to be non-nil when bound.\nclaim.VolumeName is the authoritative bind between PV and PVC.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#binding\n+optional",
                    "$ref": "#/definitions/v1ObjectReference"
                },
                "mountOptions": {
                    "type": "array",
                    "title": "A list of mount options, e.g. [\"ro\", \"soft\"]. Not validated - mount will\nsimply fail if one is invalid.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#mount-options\n+optional",
                    "items": {
                        "type": "string"
                    }
                },
                "nodeAffinity": {
                    "title": "NodeAffinity defines constraints that limit what nodes this volume can be accessed from.\nThis field influences the scheduling of pods that use this volume.\n+optional",
                    "$ref": "#/definitions/v1VolumeNodeAffinity"
                },
                "persistentVolumeReclaimPolicy": {
                    "type": "string",
                    "title": "What happens to a persistent volume when released from its claim.\nValid options are Retain (default for manually created PersistentVolumes), Delete (default\nfor dynamically provisioned PersistentVolumes), and Recycle (deprecated).\nRecycle must be supported by the volume plugin underlying this PersistentVolume.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming\n+optional"
                },
                "persistentVolumeSource": {
                    "description": "The actual volume backing the persistent volume.",
                    "$ref": "#/definitions/v1PersistentVolumeSource"
                },
                "storageClassName": {
                    "type": "string",
                    "title": "Name of StorageClass to which this persistent volume belongs. Empty value\nmeans that this volume does not belong to any StorageClass.\n+optional"
                },
                "volumeMode": {
                    "type": "string",
                    "title": "volumeMode defines if a volume is intended to be used with a formatted filesystem\nor to remain in raw block state. Value of Filesystem is implied when not included in spec.\nThis is a beta feature.\n+optional"
                }
            }
        },
        "v1PersistentVolumeStatus": {
            "type": "object",
            "description": "PersistentVolumeStatus is the current status of a persistent volume.",
            "properties": {
                "message": {
                    "type": "string",
                    "title": "A human-readable message indicating details about why the volume is in this state.\n+optional"
                },
                "phase": {
                    "type": "string",
                    "title": "Phase indicates if a volume is available, bound to a claim, or released by a claim.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#phase\n+optional"
                },
                "reason": {
                    "type": "string",
                    "title": "Reason is a brief CamelCase string that describes any failure and is meant\nfor machine parsing and tidy display in the CLI.\n+optional"
                }
            }
        },
        "v1PhotonPersistentDiskVolumeSource": {
            "type": "object",
            "description": "Represents a Photon Controller persistent disk resource.",
            "properties": {
                "fsType": {
                    "type": "string",
                    "description": "Filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
                },
                "pdID": {
                    "type": "string",
                    "title": "ID that identifies Photon Controller persistent disk"
                }
            }
        },
        "v1Pod": {
            "type": "object",
            "description": "Pod is a collection of containers that can run on a host. This resource is created\nby clients and scheduled onto hosts.",
            "properties": {
                "metadata": {
                    "title": "Standard object's metadata.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
                    "$ref": "#/definitions/v1ObjectMeta"
                },
                "spec": {
                    "title": "Specification of the desired behavior of the pod.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status\n+optional",
                    "$ref": "#/definitions/v1PodSpec"
                },
                "status": {
                    "title": "Most recently observed status of the pod.\nThis data may not be up to date.\nPopulated by the system.\nRead-only.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status\n+optional",
                    "$ref": "#/definitions/v1PodStatus"
                }
            }
        },
        "v1PodAffinity": {
            "type": "object",
            "description": "Pod affinity is a group of inter pod affinity scheduling rules.",
            "properties": {
                "preferredDuringSchedulingIgnoredDuringExecution": {
                    "type": "array",
                    "title": "The scheduler will prefer to schedule pods to nodes that satisfy\nthe affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\nnode(s) with the highest sum are the most preferred.\n+optional",
                    "items": {
                        "$ref": "#/definitions/v1WeightedPodAffinityTerm"
                    }
                },
                "requiredDuringSchedulingIgnoredDuringExecution": {
                    "type": "array",
                    "title": "If the affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to a pod label update), the\nsystem may or may not try to eventually evict the pod from its node.\nWhen there are multiple elements, the lists of nodes corresponding to each\npodAffinityTerm are intersected, i.e. all terms must be satisfied.\n+optional",
                    "items": {
                        "$ref": "#/definitions/v1PodAffinityTerm"
                    }
                }
            }
        },
        "v1PodAffinityTerm": {
            "type": "object",
            "title": "Defines a set of pods (namely those matching the labelSelector\nrelative to the given namespace(s)) that this pod should be\nco-located (affinity) or not co-located (anti-affinity) with,\nwhere co-located is defined as running on a node whose value of\nthe label with key \u003ctopologyKey\u003e matches that of any node on which\na pod of the set of pods is running",
            "properties": {
                "labelSelector": {
                    "title": "A label query over a set of resources, in this case pods.\n+optional",
                    "$ref": "#/definitions/v1LabelSelector"
                },
                "namespaces": {
                    "type": "array",
                    "title": "namespaces specifies which namespaces the labelSelector applies to (matches against);\nnull or empty list means \"this pod's namespace\"\n+optional",
                    "items": {
                        "type": "string"
                    }
                },
                "topologyKey": {
                    "type": "string",
                    "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\nwhose value of the label with key topologyKey matches that of any node on which any of the\nselected pods is running.\nEmpty topologyKey is not allowed."
                }
            }
        },
        "v1PodAntiAffinity": {
            "type": "object",
            "description": "Pod anti affinity is a group of inter pod anti affinity scheduling rules.",
            "properties": {
                "preferredDuringSchedulingIgnoredDuringExecution": {
                    "type": "array",
                    "title": "The scheduler will prefer to schedule pods to nodes that satisfy\nthe anti-affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling anti-affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\nnode(s) with the highest sum are the most preferred.\n+optional",
                    "items": {
                        "$ref": "#/definitions/v1WeightedPodAffinityTerm"
                    }
                },
                "requiredDuringSchedulingIgnoredDuringExecution": {
                    "type": "array",
                    "title": "If the anti-affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the anti-affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to a pod label update), the\nsystem may or may not try to eventually evict the pod from its node.\nWhen there are multiple elements, the lists of nodes corresponding to each\npodAffinityTerm are intersected, i.e. all terms must be satisfied.\n+optional",
                    "items": {
                        "$ref": "#/definitions/v1PodAffinityTerm"
                    }
                }
            }
        },
        "v1PodCondition": {
            "type": "object",
            "description": "PodCondition contains details for the current condition of this pod.",
            "properties": {
                "lastProbeTime": {
                    "title": "Last time we probed the condition.\n+optional",
                    "$ref": "#/definitions/v1Time"
                },
                "lastTransitionTime": {
                    "title": "Last time the condition transitioned from one status to another.\n+optional",
                    "$ref": "#/definitions/v1Time"
                },
                "message": {
                    "type": "string",
                    "title": "Human-readable message indicating details about last transition.\n+optional"
                },
                "reason": {
                    "type": "string",
                    "title": "Unique, one-word, CamelCase reason for the condition's last transition.\n+optional"
                },
                "status": {
                    "type": "string",
                    "title": "Status is the status of the condition.\nCan be True, False, Unknown.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions"
                },
                "type": {
                    "type": "string",
                    "title": "Type is the type of the condition.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions"
                }
            }
        },
        "v1PodDNSConfig": {
            "type": "object",
            "description": "PodDNSConfig defines the DNS parameters of a pod in addition to\nthose generated from DNSPolicy.",
            "properties": {
                "nameservers": {
                    "type": "array",
                    "title": "A list of DNS name server IP addresses.\nThis will be appended to the base nameservers generated from DNSPolicy.\nDuplicated nameservers will be removed.\n+optional",
                    "items": {
                        "type": "string"
                    }
                },
                "options": {
                    "type": "array",
                    "title": "A list of DNS resolver options.\nThis will be merged with the base options generated from DNSPolicy.\nDuplicated entries will be removed. Resolution options given in Options\nwill override those that appear in the base DNSPolicy.\n+optional",
                    "items": {
                        "$ref": "#/definitions/v1PodDNSConfigOption"
                    }
                },
                "searches": {
                    "type": "array",
                    "title": "A list of DNS search domains for host-name lookup.\nThis will be appended to the base search paths generated from DNSPolicy.\nDuplicated search paths will be removed.\n+optional",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "v1PodDNSConfigOption": {
            "type": "object",
            "description": "PodDNSConfigOption defines DNS resolver options of a pod.",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Required."
                },
                "value": {
                    "type": "string",
                    "title": "+optional"
                }
            }
        },
        "v1PodIP": {
            "type": "object",
            "description": "IP address information for entries in the (plural) PodIPs field.\nEach entry includes:\n   IP: An IP address allocated to the pod. Routable at least within the cluster.",
            "properties": {
                "ip": {
                    "type": "string",
                    "title": "ip is an IP address (IPv4 or IPv6) assigned to the pod"
                }
            }
        },
        "v1PodList": {
            "type": "object",
            "description": "PodList is a list of Pods.",
            "properties": {
                "items": {
                    "type": "array",
                    "title": "List of pods.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
                    "items": {
                        "$ref": "#/definitions/v1Pod"
                    }
                },
                "metadata": {
                    "title": "Standard list metadata.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "$ref": "#/definitions/v1ListMeta"
                }
            }
        },
        "v1PodReadinessGate": {
            "type": "object",
            "title": "PodReadinessGate contains the reference to a pod condition",
            "properties": {
                "conditionType": {
                    "type": "string",
                    "description": "ConditionType refers to a condition in the pod's condition list with matching type."
                }
            }
        },
        "v1PodSecurityContext": {
            "type": "object",
            "description": "PodSecurityContext holds pod-level security attributes and common container settings.\nSome fields are also present in container.securityContext.  Field values of\ncontainer.securityContext take precedence over field values of PodSecurityContext.",
            "properties": {
                "fsGroup": {
                    "type": "string",
                    "description": "1. The owning GID will be the FSGroup\n2. The setgid bit is set (new files created in the volume will be owned by FSGroup)\n3. The permission bits are OR'd with rw-rw----\n\nIf unset, the Kubelet will not modify the ownership and permissions of any volume.\n+optional",
                    "title": "A special supplemental group that applies to all containers in a pod.\nSome volume types allow the Kubelet to change the ownership of that volume\nto be owned by the pod:",
                    "format": "int64"
                },
                "runAsGroup": {
                    "type": "string",
                    "title": "The GID to run the entrypoint of the container process.\nUses runtime default if unset.\nMay also be set in SecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence\nfor that container.\n+optional",
                    "format": "int64"
                },
                "runAsNonRoot": {
                    "type": "boolean",
                    "title": "Indicates that the container must run as a non-root user.\nIf true, the Kubelet will validate the image at runtime to ensure that it\ndoes not run as UID 0 (root) and fail to start the container if it does.\nIf unset or false, no such validation will be performed.\nMay also be set in SecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\n+optional",
                    "format": "boolean"
                },
                "runAsUser": {
                    "type": "string",
                    "title": "The UID to run the entrypoint of the container process.\nDefaults to user specified in image metadata if unspecified.\nMay also be set in SecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence\nfor that container.\n+optional",
                    "format": "int64"
                },
                "seLinuxOptions": {
                    "title": "The SELinux context to be applied to all containers.\nIf unspecified, the container runtime will allocate a random SELinux context for each\ncontainer.  May also be set in SecurityContext.  If set in\nboth SecurityContext and PodSecurityContext, the value specified in SecurityContext\ntakes precedence for that container.\n+optional",
                    "$ref": "#/definitions/v1SELinuxOptions"
                },
                "supplementalGroups": {
                    "type": "array",
                    "title": "A list of groups applied to the first process run in each container, in addition\nto the container's primary GID.  If unspecified, no groups will be added to\nany container.\n+optional",
                    "items": {
                        "type": "string",
                        "format": "int64"
                    }
                },
                "sysctls": {
                    "type": "array",
                    "title": "Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported\nsysctls (by the container runtime) might fail to launch.\n+optional",
                    "items": {
                        "$ref": "#/definitions/v1Sysctl"
                    }
                },
                "windowsOptions": {
                    "title": "The Windows specific settings applied to all containers.\nIf unspecified, the options within a container's SecurityContext will be used.\nIf set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n+optional",
                    "$ref": "#/definitions/v1WindowsSecurityContextOptions"
                }
            }
        },
        "v1PodSpec": {
            "type": "object",
            "description": "PodSpec is a description of a pod.",
            "properties": {
                "activeDeadlineSeconds": {
                    "type": "string",
                    "title": "Optional duration in seconds the pod may be active on the node relative to\nStartTime before the system will actively try to mark it failed and kill associated containers.\nValue must be a positive integer.\n+optional",
                    "format": "int64"
                },
                "affinity": {
                    "title": "If specified, the pod's scheduling constraints\n+optional",
                    "$ref": "#/definitions/v1Affinity"
                },
                "automountServiceAccountToken": {
                    "type": "boolean",
                    "title": "AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.\n+optional",
                    "format": "boolean"
                },
                "containers": {
                    "type": "array",
                    "title": "List of containers belonging to the pod.\nContainers cannot currently be added or removed.\nThere must be at least one container in a Pod.\nCannot be updated.\n+patchMergeKey=name\n+patchStrategy=merge",
                    "items": {
                        "$ref": "#/definitions/v1Container"
                    }
                },
                "dnsConfig": {
                    "title": "Specifies the DNS parameters of a pod.\nParameters specified here will be merged to the generated DNS\nconfiguration based on DNSPolicy.\n+optional",
                    "$ref": "#/definitions/v1PodDNSConfig"
                },
                "dnsPolicy": {
                    "type": "string",
                    "title": "Set DNS policy for the pod.\nDefaults to \"ClusterFirst\".\nValid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'.\nDNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy.\nTo have DNS options set along with hostNetwork, you have to specify DNS policy\nexplicitly to 'ClusterFirstWithHostNet'.\n+optional"
                },
                "enableServiceLinks": {
                    "type": "boolean",
                    "title": "EnableServiceLinks indicates whether information about services should be injected into pod's\nenvironment variables, matching the syntax of Docker links.\nOptional: Defaults to true.\n+optional",
                    "format": "boolean"
                },
                "ephemeralContainers": {
                    "type": "array",
                    "title": "List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing\npod to perform user-initiated actions such as debugging. This list cannot be specified when\ncreating a pod, and it cannot be modified by updating the pod spec. In order to add an\nephemeral container to an existing pod, use the pod's ephemeralcontainers subresource.\nThis field is alpha-level and is only honored by servers that enable the EphemeralContainers feature.\n+optional\n+patchMergeKey=name\n+patchStrategy=merge",
                    "items": {
                        "$ref": "#/definitions/v1EphemeralContainer"
                    }
                },
                "hostAliases": {
                    "type": "array",
                    "title": "HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts\nfile if specified. This is only valid for non-hostNetwork pods.\n+optional\n+patchMergeKey=ip\n+patchStrategy=merge",
                    "items": {
                        "$ref": "#/definitions/v1HostAlias"
                    }
                },
                "hostIPC": {
                    "type": "boolean",
                    "title": "Use the host's ipc namespace.\nOptional: Default to false.\n+k8s:conversion-gen=false\n+optional",
                    "format": "boolean"
                },
                "hostNetwork": {
                    "type": "boolean",
                    "title": "Host networking requested for this pod. Use the host's network namespace.\nIf this option is set, the ports that will be used must be specified.\nDefault to false.\n+k8s:conversion-gen=false\n+optional",
                    "format": "boolean"
                },
                "hostPID": {
                    "type": "boolean",
                    "title": "Use the host's pid namespace.\nOptional: Default to false.\n+k8s:conversion-gen=false\n+optional",
                    "format": "boolean"
                },
                "hostname": {
                    "type": "string",
                    "title": "Specifies the hostname of the Pod\nIf not specified, the pod's hostname will be set to a system-defined value.\n+optional"
                },
                "imagePullSecrets": {
                    "type": "array",
                    "title": "ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec.\nIf specified, these secrets will be passed to individual puller implementations for them to use. For example,\nin the case of docker, only DockerConfig type secrets are honored.\nMore info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod\n+optional\n+patchMergeKey=name\n+patchStrategy=merge",
                    "items": {
                        "$ref": "#/definitions/v1LocalObjectReference"
                    }
                },
                "initContainers": {
                    "type": "array",
                    "title": "List of initialization containers belonging to the pod.\nInit containers are executed in order prior to containers being started. If any\ninit container fails, the pod is considered to have failed and is handled according\nto its restartPolicy. The name for an init container or normal container must be\nunique among all containers.\nInit containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes.\nThe resourceRequirements of an init container are taken into account during scheduling\nby finding the highest request/limit for each resource type, and then using the max of\nof that value or the sum of the normal containers. Limits are applied to init containers\nin a similar fashion.\nInit containers cannot currently be added or removed.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/\n+patchMergeKey=name\n+patchStrategy=merge",
                    "items": {
                        "$ref": "#/definitions/v1Container"
                    }
                },
                "nodeName": {
                    "type": "string",
                    "title": "NodeName is a request to schedule this pod onto a specific node. If it is non-empty,\nthe scheduler simply schedules this pod onto that node, assuming that it fits resource\nrequirements.\n+optional"
                },
                "nodeSelector": {
                    "type": "object",
                    "title": "NodeSelector is a selector which must be true for the pod to fit on a node.\nSelector which must match a node's labels for the pod to be scheduled on that node.\nMore info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n+optional"
                },
                "overhead": {
                    "type": "object",
                    "title": "Overhead represents the resource overhead associated with running a pod for a given RuntimeClass.\nThis field will be autopopulated at admission time by the RuntimeClass admission controller. If\nthe RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests.\nThe RuntimeClass admission controller will reject Pod create requests which have the overhead already\nset. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value\ndefined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero.\nMore info: https://git.k8s.io/enhancements/keps/sig-node/20190226-pod-overhead.md\nThis field is alpha-level as of Kubernetes v1.16, and is only honored by servers that enable the PodOverhead feature.\n+optional"
                },
                "preemptionPolicy": {
                    "type": "string",
                    "title": "PreemptionPolicy is the Policy for preempting pods with lower priority.\nOne of Never, PreemptLowerPriority.\nDefaults to PreemptLowerPriority if unset.\nThis field is alpha-level and is only honored by servers that enable the NonPreemptingPriority feature.\n+optional"
                },
                "priority": {
                    "type": "integer",
                    "title": "The priority value. Various system components use this field to find the\npriority of the pod. When Priority Admission Controller is enabled, it\nprevents users from setting this field. The admission controller populates\nthis field from PriorityClassName.\nThe higher the value, the higher the priority.\n+optional",
                    "format": "int32"
                },
                "priorityClassName": {
                    "type": "string",
                    "title": "If specified, indicates the pod's priority. \"system-node-critical\" and\n\"system-cluster-critical\" are two special keywords which indicate the\nhighest priorities with the former being the highest priority. Any other\nname must be defined by creating a PriorityClass object with that name.\nIf not specified, the pod priority will be default or zero if there is no\ndefault.\n+optional"
                },
                "readinessGates": {
                    "type": "array",
                    "title": "If specified, all readiness gates will be evaluated for pod readiness.\nA pod is ready when all its containers are ready AND\nall conditions specified in the readiness gates have status equal to \"True\"\nMore info: https://git.k8s.io/enhancements/keps/sig-network/0007-pod-ready%2B%2B.md\n+optional",
                    "items": {
                        "$ref": "#/definitions/v1PodReadinessGate"
                    }
                },
                "restartPolicy": {
                    "type": "string",
                    "title": "Restart policy for all containers within the pod.\nOne of Always, OnFailure, Never.\nDefault to Always.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy\n+optional"
                },
                "runtimeClassName": {
                    "type": "string",
                    "title": "RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used\nto run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run.\nIf unset or empty, the \"legacy\" RuntimeClass will be used, which is an implicit class with an\nempty definition that uses the default runtime handler.\nMore info: https://git.k8s.io/enhancements/keps/sig-node/runtime-class.md\nThis is a beta feature as of Kubernetes v1.14.\n+optional"
                },
                "schedulerName": {
                    "type": "string",
                    "title": "If specified, the pod will be dispatched by specified scheduler.\nIf not specified, the pod will be dispatched by default scheduler.\n+optional"
                },
                "securityContext": {
                    "title": "SecurityContext holds pod-level security attributes and common container settings.\nOptional: Defaults to empty.  See type description for default values of each field.\n+optional",
                    "$ref": "#/definitions/v1PodSecurityContext"
                },
                "serviceAccount": {
                    "type": "string",
                    "title": "DeprecatedServiceAccount is a depreciated alias for ServiceAccountName.\nDeprecated: Use serviceAccountName instead.\n+k8s:conversion-gen=false\n+optional"
                },
                "serviceAccountName": {
                    "type": "string",
                    "title": "ServiceAccountName is the name of the ServiceAccount to use to run this pod.\nMore info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/\n+optional"
                },
                "shareProcessNamespace": {
                    "type": "boolean",
                    "title": "Share a single process namespace between all of the containers in a pod.\nWhen this is set containers will be able to view and signal processes from other containers\nin the same pod, and the first process in each container will not be assigned PID 1.\nHostPID and ShareProcessNamespace cannot both be set.\nOptional: Default to false.\n+k8s:conversion-gen=false\n+optional",
                    "format": "boolean"
                },
                "subdomain": {
                    "type": "string",
                    "title": "If specified, the fully qualified Pod hostname will be \"\u003chostname\u003e.\u003csubdomain\u003e.\u003cpod namespace\u003e.svc.\u003ccluster domain\u003e\".\nIf not specified, the pod will not have a domainname at all.\n+optional"
                },
                "terminationGracePeriodSeconds": {
                    "type": "string",
                    "title": "Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request.\nValue must be non-negative integer. The value zero indicates delete immediately.\nIf this value is nil, the default grace period will be used instead.\nThe grace period is the duration in seconds after the processes running in the pod are sent\na termination signal and the time when the processes are forcibly halted with a kill signal.\nSet this value longer than the expected cleanup time for your process.\nDefaults to 30 seconds.\n+optional",
                    "format": "int64"
                },
                "tolerations": {
                    "type": "array",
                    "title": "If specified, the pod's tolerations.\n+optional",
                    "items": {
                        "$ref": "#/definitions/v1Toleration"
                    }
                },
                "topologySpreadConstraints": {
                    "type": "array",
                    "title": "TopologySpreadConstraints describes how a group of pods ought to spread across topology\ndomains. Scheduler will schedule pods in a way which abides by the constraints.\nThis field is alpha-level and is only honored by clusters that enables the EvenPodsSpread\nfeature.\nAll topologySpreadConstraints are ANDed.\n+optional\n+patchMergeKey=topologyKey\n+patchStrategy=merge\n+listType=map\n+listMapKey=topologyKey\n+listMapKey=whenUnsatisfiable",
                    "items": {
                        "$ref": "#/definitions/v1TopologySpreadConstraint"
                    }
                },
                "volumes": {
                    "type": "array",
                    "title": "List of volumes that can be mounted by containers belonging to the pod.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes\n+optional\n+patchMergeKey=name\n+patchStrategy=merge,retainKeys",
                    "items": {
                        "$ref": "#/definitions/v1Volume"
                    }
                }
            }
        },
        "v1PodStatus": {
            "type": "object",
            "description": "PodStatus represents information about the status of a pod. Status may trail the actual\nstate of a system, especially if the node that hosts the pod cannot contact the control\nplane.",
            "properties": {
                "conditions": {
                    "type": "array",
                    "title": "Current service state of pod.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions\n+optional\n+patchMergeKey=type\n+patchStrategy=merge",
                    "items": {
                        "$ref": "#/definitions/v1PodCondition"
                    }
                },
                "containerStatuses": {
                    "type": "array",
                    "title": "The list has one entry per container in the manifest. Each entry is currently the output\nof -docker inspect-.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status\n+optional",
                    "items": {
                        "$ref": "#/definitions/v1ContainerStatus"
                    }
                },
                "ephemeralContainerStatuses": {
                    "type": "array",
                    "title": "Status for any ephemeral containers that have run in this pod.\nThis field is alpha-level and is only populated by servers that enable the EphemeralContainers feature.\n+optional",
                    "items": {
                        "$ref": "#/definitions/v1ContainerStatus"
                    }
                },
                "hostIP": {
                    "type": "string",
                    "title": "IP address of the host to which the pod is assigned. Empty if not yet scheduled.\n+optional"
                },
                "initContainerStatuses": {
                    "type": "array",
                    "title": "The list has one entry per init container in the manifest. The most recent successful\ninit container will have ready = true, the most recently started container will have\nstartTime set.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status",
                    "items": {
                        "$ref": "#/definitions/v1ContainerStatus"
                    }
                },
                "message": {
                    "type": "string",
                    "title": "A human readable message indicating details about why the pod is in this condition.\n+optional"
                },
                "nominatedNodeName": {
                    "type": "string",
                    "title": "nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be\nscheduled right away as preemption victims receive their graceful termination periods.\nThis field does not guarantee that the pod will be scheduled on this node. Scheduler may decide\nto place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to\ngive the resources on this node to a higher priority pod that is created after preemption.\nAs a result, this field may be different than PodSpec.nodeName when the pod is\nscheduled.\n+optional"
                },
                "phase": {
                    "type": "string",
                    "description": "Pending: The pod has been accepted by the Kubernetes system, but one or more of the\ncontainer images has not been created. This includes time before being scheduled as\nwell as time spent downloading images over the network, which could take a while.\nRunning: The pod has been bound to a node, and all of the containers have been created.\nAt least one container is still running, or is in the process of starting or restarting.\nSucceeded: All containers in the pod have terminated in success, and will not be restarted.\nFailed: All containers in the pod have terminated, and at least one container has\nterminated in failure. The container either exited with non-zero status or was terminated\nby the system.\nUnknown: For some reason the state of the pod could not be obtained, typically due to an\nerror in communicating with the host of the pod.\n\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase\n+optional",
                    "title": "The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle.\nThe conditions array, the reason and message fields, and the individual container status\narrays contain more detail about the pod's status.\nThere are five possible phase values:"
                },
                "podIP": {
                    "type": "string",
                    "title": "IP address allocated to the pod. Routable at least within the cluster.\nEmpty if not yet allocated.\n+optional"
                },
                "podIPs": {
                    "type": "array",
                    "title": "podIPs holds the IP addresses allocated to the pod. If this field is specified, the 0th entry must\nmatch the podIP field. Pods may be allocated at most 1 value for each of IPv4 and IPv6. This list\nis empty if no IPs have been allocated yet.\n+optional\n+patchStrategy=merge\n+patchMergeKey=ip",
                    "items": {
                        "$ref": "#/definitions/v1PodIP"
                    }
                },
                "qosClass": {
                    "type": "string",
                    "title": "The Quality of Service (QOS) classification assigned to the pod based on resource requirements\nSee PodQOSClass type for available QOS classes\nMore info: https://git.k8s.io/community/contributors/design-proposals/node/resource-qos.md\n+optional"
                },
                "reason": {
                    "type": "string",
                    "title": "A brief CamelCase message indicating details about why the pod is in this state.\ne.g. 'Evicted'\n+optional"
                },
                "startTime": {
                    "title": "RFC 3339 date and time at which the object was acknowledged by the Kubelet.\nThis is before the Kubelet pulled the container image(s) for the pod.\n+optional",
                    "$ref": "#/definitions/v1Time"
                }
            }
        },
        "v1PodTemplateSpec": {
            "type": "object",
            "title": "PodTemplateSpec describes the data a pod should have when created from a template",
            "properties": {
                "metadata": {
                    "title": "Standard object's metadata.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
                    "$ref": "#/definitions/v1ObjectMeta"
                },
                "spec": {
                    "title": "Specification of the desired behavior of the pod.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status\n+optional",
                    "$ref": "#/definitions/v1PodSpec"
                }
            }
        },
        "v1PortworxVolumeSource": {
            "type": "object",
            "description": "PortworxVolumeSource represents a Portworx volume resource.",
            "properties": {
                "fsType": {
                    "type": "string",
                    "description": "FSType represents the filesystem type to mount\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\". Implicitly inferred to be \"ext4\" if unspecified."
                },
                "readOnly": {
                    "type": "boolean",
                    "title": "Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\n+optional",
                    "format": "boolean"
                },
                "volumeID": {
                    "type": "string",
                    "title": "VolumeID uniquely identifies a Portworx volume"
                }
            }
        },
        "v1PreferredSchedulingTerm": {
            "type": "object",
            "description": "An empty preferred scheduling term matches all objects with implicit weight 0\n(i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).",
            "properties": {
                "preference": {
                    "description": "A node selector term, associated with the corresponding weight.",
                    "$ref": "#/definitions/v1NodeSelectorTerm"
                },
                "weight": {
                    "type": "integer",
                    "description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.",
                    "format": "int32"
                }
            }
        },
        "v1Probe": {
            "type": "object",
            "description": "Probe describes a health check to be performed against a container to determine whether it is\nalive or ready to receive traffic.",
            "properties": {
                "failureThreshold": {
                    "type": "integer",
                    "title": "Minimum consecutive failures for the probe to be considered failed after having succeeded.\nDefaults to 3. Minimum value is 1.\n+optional",
                    "format": "int32"
                },
                "handler": {
                    "title": "The action taken to determine the health of a container",
                    "$ref": "#/definitions/v1Handler"
                },
                "initialDelaySeconds": {
                    "type": "integer",
                    "title": "Number of seconds after the container has started before liveness probes are initiated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n+optional",
                    "format": "int32"
                },
                "periodSeconds": {
                    "type": "integer",
                    "title": "How often (in seconds) to perform the probe.\nDefault to 10 seconds. Minimum value is 1.\n+optional",
                    "format": "int32"
                },
                "successThreshold": {
                    "type": "integer",
                    "title": "Minimum consecutive successes for the probe to be considered successful after having failed.\nDefaults to 1. Must be 1 for liveness and startup. Minimum value is 1.\n+optional",
                    "format": "int32"
                },
                "timeoutSeconds": {
                    "type": "integer",
                    "title": "Number of seconds after which the probe times out.\nDefaults to 1 second. Minimum value is 1.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n+optional",
                    "format": "int32"
                }
            }
        },
        "v1ProjectedVolumeSource": {
            "type": "object",
            "title": "Represents a projected volume source",
            "properties": {
                "defaultMode": {
                    "type": "integer",
                    "title": "Mode bits to use on created files by default. Must be a value between\n0 and 0777.\nDirectories within the path are not affected by this setting.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.\n+optional",
                    "format": "int32"
                },
                "sources": {
                    "type": "array",
                    "title": "list of volume projections",
                    "items": {
                        "$ref": "#/definitions/v1VolumeProjection"
                    }
                }
            }
        },
        "v1QuobyteVolumeSource": {
            "type": "object",
            "description": "Represents a Quobyte mount that lasts the lifetime of a pod.\nQuobyte volumes do not support ownership management or SELinux relabeling.",
            "properties": {
                "group": {
                    "type": "string",
                    "title": "Group to map volume access to\nDefault is no group\n+optional"
                },
                "readOnly": {
                    "type": "boolean",
                    "title": "ReadOnly here will force the Quobyte volume to be mounted with read-only permissions.\nDefaults to false.\n+optional",
                    "format": "boolean"
                },
                "registry": {
                    "type": "string",
                    "title": "Registry represents a single or multiple Quobyte Registry services\nspecified as a string as host:port pair (multiple entries are separated with commas)\nwhich acts as the central registry for volumes"
                },
                "tenant": {
                    "type": "string",
                    "title": "Tenant owning the given Quobyte volume in the Backend\nUsed with dynamically provisioned Quobyte volumes, value is set by the plugin\n+optional"
                },
                "user": {
                    "type": "string",
                    "title": "User to map volume access to\nDefaults to serivceaccount user\n+optional"
                },
                "volume": {
                    "type": "string",
                    "description": "Volume is a string that references an already created Quobyte volume by name."
                }
            }
        },
        "v1RBDPersistentVolumeSource": {
            "type": "object",
            "description": "Represents a Rados Block Device mount that lasts the lifetime of a pod.\nRBD volumes support ownership management and SELinux relabeling.",
            "properties": {
                "fsType": {
                    "type": "string",
                    "title": "Filesystem type of the volume that you want to mount.\nTip: Ensure that the filesystem type is supported by the host operating system.\nExamples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#rbd\nTODO: how do we prevent errors in the filesystem from compromising the machine\n+optional"
                },
                "image": {
                    "type": "string",
                    "title": "The rados image name.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it"
                },
                "keyring": {
                    "type": "string",
                    "title": "Keyring is the path to key ring for RBDUser.\nDefault is /etc/ceph/keyring.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it\n+optional"
                },
                "monitors": {
                    "type": "array",
                    "title": "A collection of Ceph monitors.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                    "items": {
                        "type": "string"
                    }
                },
                "pool": {
                    "type": "string",
                    "title": "The rados pool name.\nDefault is rbd.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it\n+optional"
                },
                "readOnly": {
                    "type": "boolean",
                    "title": "ReadOnly here will force the ReadOnly setting in VolumeMounts.\nDefaults to false.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it\n+optional",
                    "format": "boolean"
                },
                "secretRef": {
                    "title": "SecretRef is name of the authentication secret for RBDUser. If provided\noverrides keyring.\nDefault is nil.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it\n+optional",
                    "$ref": "#/definitions/v1SecretReference"
                },
                "user": {
                    "type": "string",
                    "title": "The rados user name.\nDefault is admin.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it\n+optional"
                }
            }
        },
        "v1RBDVolumeSource": {
            "type": "object",
            "description": "Represents a Rados Block Device mount that lasts the lifetime of a pod.\nRBD volumes support ownership management and SELinux relabeling.",
            "properties": {
                "fsType": {
                    "type": "string",
                    "title": "Filesystem type of the volume that you want to mount.\nTip: Ensure that the filesystem type is supported by the host operating system.\nExamples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#rbd\nTODO: how do we prevent errors in the filesystem from compromising the machine\n+optional"
                },
                "image": {
                    "type": "string",
                    "title": "The rados image name.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it"
                },
                "keyring": {
                    "type": "string",
                    "title": "Keyring is the path to key ring for RBDUser.\nDefault is /etc/ceph/keyring.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it\n+optional"
                },
                "monitors": {
                    "type": "array",
                    "title": "A collection of Ceph monitors.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                    "items": {
                        "type": "string"
                    }
                },
                "pool": {
                    "type": "string",
                    "title": "The rados pool name.\nDefault is rbd.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it\n+optional"
                },
                "readOnly": {
                    "type": "boolean",
                    "title": "ReadOnly here will force the ReadOnly setting in VolumeMounts.\nDefaults to false.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it\n+optional",
                    "format": "boolean"
                },
                "secretRef": {
                    "title": "SecretRef is name of the authentication secret for RBDUser. If provided\noverrides keyring.\nDefault is nil.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it\n+optional",
                    "$ref": "#/definitions/v1LocalObjectReference"
                },
                "user": {
                    "type": "string",
                    "title": "The rados user name.\nDefault is admin.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it\n+optional"
                }
            }
        },
        "v1ReplicaSet": {
            "type": "object",
            "description": "ReplicaSet ensures that a specified number of pod replicas are running at any given time.",
            "properties": {
                "metadata": {
                    "title": "If the Labels of a ReplicaSet are empty, they are defaulted to\nbe the same as the Pod(s) that the ReplicaSet manages.\nStandard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
                    "$ref": "#/definitions/v1ObjectMeta"
                },
                "spec": {
                    "title": "Spec defines the specification of the desired behavior of the ReplicaSet.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status\n+optional",
                    "$ref": "#/definitions/v1ReplicaSetSpec"
                },
                "status": {
                    "title": "Status is the most recently observed status of the ReplicaSet.\nThis data may be out of date by some window of time.\nPopulated by the system.\nRead-only.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status\n+optional",
                    "$ref": "#/definitions/v1ReplicaSetStatus"
                }
            }
        },
        "v1ReplicaSetCondition": {
            "type": "object",
            "description": "ReplicaSetCondition describes the state of a replica set at a certain point.",
            "properties": {
                "lastTransitionTime": {
                    "title": "The last time the condition transitioned from one status to another.\n+optional",
                    "$ref": "#/definitions/v1Time"
                },
                "message": {
                    "type": "string",
                    "title": "A human readable message indicating details about the transition.\n+optional"
                },
                "reason": {
                    "type": "string",
                    "title": "The reason for the condition's last transition.\n+optional"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the condition, one of True, False, Unknown."
                },
                "type": {
                    "type": "string",
                    "description": "Type of replica set condition."
                }
            }
        },
        "v1ReplicaSetList": {
            "type": "object",
            "description": "ReplicaSetList is a collection of ReplicaSets.",
            "properties": {
                "items": {
                    "type": "array",
                    "title": "List of ReplicaSets.\nMore info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller",
                    "items": {
                        "$ref": "#/definitions/v1ReplicaSet"
                    }
                },
                "metadata": {
                    "title": "Standard list metadata.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "$ref": "#/definitions/v1ListMeta"
                }
            }
        },
        "v1ReplicaSetSpec": {
            "type": "object",
            "description": "ReplicaSetSpec is the specification of a ReplicaSet.",
            "properties": {
                "minReadySeconds": {
                    "type": "integer",
                    "title": "Minimum number of seconds for which a newly created pod should be ready\nwithout any of its container crashing, for it to be considered available.\nDefaults to 0 (pod will be considered available as soon as it is ready)\n+optional",
                    "format": "int32"
                },
                "replicas": {
                    "type": "integer",
                    "title": "Replicas is the number of desired replicas.\nThis is a pointer to distinguish between explicit zero and unspecified.\nDefaults to 1.\nMore info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller\n+optional",
                    "format": "int32"
                },
                "selector": {
                    "title": "Selector is a label query over pods that should match the replica count.\nLabel keys and values that must match in order to be controlled by this replica set.\nIt must match the pod template's labels.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
                    "$ref": "#/definitions/v1LabelSelector"
                },
                "template": {
                    "title": "Template is the object that describes the pod that will be created if\ninsufficient replicas are detected.\nMore info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template\n+optional",
                    "$ref": "#/definitions/v1PodTemplateSpec"
                }
            }
        },
        "v1ReplicaSetStatus": {
            "type": "object",
            "description": "ReplicaSetStatus represents the current status of a ReplicaSet.",
            "properties": {
                "availableReplicas": {
                    "type": "integer",
                    "title": "The number of available replicas (ready for at least minReadySeconds) for this replica set.\n+optional",
                    "format": "int32"
                },
                "conditions": {
                    "type": "array",
                    "title": "Represents the latest available observations of a replica set's current state.\n+optional\n+patchMergeKey=type\n+patchStrategy=merge",
                    "items": {
                        "$ref": "#/definitions/v1ReplicaSetCondition"
                    }
                },
                "fullyLabeledReplicas": {
                    "type": "integer",
                    "title": "The number of pods that have labels matching the labels of the pod template of the replicaset.\n+optional",
                    "format": "int32"
                },
                "observedGeneration": {
                    "type": "string",
                    "title": "ObservedGeneration reflects the generation of the most recently observed ReplicaSet.\n+optional",
                    "format": "int64"
                },
                "readyReplicas": {
                    "type": "integer",
                    "title": "The number of ready replicas for this replica set.\n+optional",
                    "format": "int32"
                },
                "replicas": {
                    "type": "integer",
                    "title": "Replicas is the most recently oberved number of replicas.\nMore info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller",
                    "format": "int32"
                }
            }
        },
        "v1ResourceFieldSelector": {
            "type": "object",
            "title": "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
            "properties": {
                "containerName": {
                    "type": "string",
                    "title": "Container name: required for volumes, optional for env vars\n+optional"
                },
                "divisor": {
                    "title": "Specifies the output format of the exposed resources, defaults to \"1\"\n+optional",
                    "$ref": "#/definitions/resourceQuantity"
                },
                "resource": {
                    "type": "string",
                    "title": "Required: resource to select"
                }
            }
        },
        "v1ResourceRequirements": {
            "type": "object",
            "description": "ResourceRequirements describes the compute resource requirements.",
            "properties": {
                "limits": {
                    "type": "object",
                    "title": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/\n+optional"
                },
                "requests": {
                    "type": "object",
                    "title": "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/\n+optional"
                }
            }
        },
        "v1RollingUpdateDaemonSet": {
            "type": "object",
            "description": "Spec to control the desired behavior of daemon set rolling update.",
            "properties": {
                "maxUnavailable": {
                    "title": "The maximum number of DaemonSet pods that can be unavailable during the\nupdate. Value can be an absolute number (ex: 5) or a percentage of total\nnumber of DaemonSet pods at the start of the update (ex: 10%). Absolute\nnumber is calculated from percentage by rounding up.\nThis cannot be 0.\nDefault value is 1.\nExample: when this is set to 30%, at most 30% of the total number of nodes\nthat should be running the daemon pod (i.e. status.desiredNumberScheduled)\ncan have their pods stopped for an update at any given\ntime. The update starts by stopping at most 30% of those DaemonSet pods\nand then brings up new DaemonSet pods in their place. Once the new pods\nare available, it then proceeds onto other DaemonSet pods, thus ensuring\nthat at least 70% of original number of DaemonSet pods are available at\nall times during the update.\n+optional",
                    "$ref": "#/definitions/intstrIntOrString"
                }
            }
        },
        "v1RollingUpdateDeployment": {
            "type": "object",
            "description": "Spec to control the desired behavior of rolling update.",
            "properties": {
                "maxSurge": {
                    "title": "The maximum number of pods that can be scheduled above the desired number of\npods.\nValue can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%).\nThis can not be 0 if MaxUnavailable is 0.\nAbsolute number is calculated from percentage by rounding up.\nDefaults to 25%.\nExample: when this is set to 30%, the new ReplicaSet can be scaled up immediately when\nthe rolling update starts, such that the total number of old and new pods do not exceed\n130% of desired pods. Once old pods have been killed,\nnew ReplicaSet can be scaled up further, ensuring that total number of pods running\nat any time during the update is at most 130% of desired pods.\n+optional",
                    "$ref": "#/definitions/intstrIntOrString"
                },
                "maxUnavailable": {
                    "title": "The maximum number of pods that can be unavailable during the update.\nValue can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%).\nAbsolute number is calculated from percentage by rounding down.\nThis can not be 0 if MaxSurge is 0.\nDefaults to 25%.\nExample: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods\nimmediately when the rolling update starts. Once new pods are ready, old ReplicaSet\ncan be scaled down further, followed by scaling up the new ReplicaSet, ensuring\nthat the total number of pods available at all times during the update is at\nleast 70% of desired pods.\n+optional",
                    "$ref": "#/definitions/intstrIntOrString"
                }
            }
        },
        "v1RollingUpdateStatefulSetStrategy": {
            "type": "object",
            "description": "RollingUpdateStatefulSetStrategy is used to communicate parameter for RollingUpdateStatefulSetStrategyType.",
            "properties": {
                "partition": {
                    "type": "integer",
                    "title": "Partition indicates the ordinal at which the StatefulSet should be\npartitioned.\nDefault value is 0.\n+optional",
                    "format": "int32"
                }
            }
        },
        "v1SELinuxOptions": {
            "type": "object",
            "title": "SELinuxOptions are the labels to be applied to the container",
            "properties": {
                "level": {
                    "type": "string",
                    "title": "Level is SELinux level label that applies to the container.\n+optional"
                },
                "role": {
                    "type": "string",
                    "title": "Role is a SELinux role label that applies to the container.\n+optional"
                },
                "type": {
                    "type": "string",
                    "title": "Type is a SELinux type label that applies to the container.\n+optional"
                },
                "user": {
                    "type": "string",
                    "title": "User is a SELinux user label that applies to the container.\n+optional"
                }
            }
        },
        "v1ScaleIOPersistentVolumeSource": {
            "type": "object",
            "title": "ScaleIOPersistentVolumeSource represents a persistent ScaleIO volume",
            "properties": {
                "fsType": {
                    "type": "string",
                    "title": "Filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\".\nDefault is \"xfs\"\n+optional"
                },
                "gateway": {
                    "type": "string",
                    "description": "The host address of the ScaleIO API Gateway."
                },
                "protectionDomain": {
                    "type": "string",
                    "title": "The name of the ScaleIO Protection Domain for the configured storage.\n+optional"
                },
                "readOnly": {
                    "type": "boolean",
                    "title": "Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\n+optional",
                    "format": "boolean"
                },
                "secretRef": {
                    "description": "SecretRef references to the secret for ScaleIO user and other\nsensitive information. If this is not provided, Login operation will fail.",
                    "$ref": "#/definitions/v1SecretReference"
                },
                "sslEnabled": {
                    "type": "boolean",
                    "title": "Flag to enable/disable SSL communication with Gateway, default false\n+optional",
                    "format": "boolean"
                },
                "storageMode": {
                    "type": "string",
                    "title": "Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.\nDefault is ThinProvisioned.\n+optional"
                },
                "storagePool": {
                    "type": "string",
                    "title": "The ScaleIO Storage Pool associated with the protection domain.\n+optional"
                },
                "system": {
                    "type": "string",
                    "description": "The name of the storage system as configured in ScaleIO."
                },
                "volumeName": {
                    "type": "string",
                    "description": "The name of a volume already created in the ScaleIO system\nthat is associated with this volume source."
                }
            }
        },
        "v1ScaleIOVolumeSource": {
            "type": "object",
            "title": "ScaleIOVolumeSource represents a persistent ScaleIO volume",
            "properties": {
                "fsType": {
                    "type": "string",
                    "title": "Filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\".\nDefault is \"xfs\".\n+optional"
                },
                "gateway": {
                    "type": "string",
                    "description": "The host address of the ScaleIO API Gateway."
                },
                "protectionDomain": {
                    "type": "string",
                    "title": "The name of the ScaleIO Protection Domain for the configured storage.\n+optional"
                },
                "readOnly": {
                    "type": "boolean",
                    "title": "Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\n+optional",
                    "format": "boolean"
                },
                "secretRef": {
                    "description": "SecretRef references to the secret for ScaleIO user and other\nsensitive information. If this is not provided, Login operation will fail.",
                    "$ref": "#/definitions/v1LocalObjectReference"
                },
                "sslEnabled": {
                    "type": "boolean",
                    "title": "Flag to enable/disable SSL communication with Gateway, default false\n+optional",
                    "format": "boolean"
                },
                "storageMode": {
                    "type": "string",
                    "title": "Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.\nDefault is ThinProvisioned.\n+optional"
                },
                "storagePool": {
                    "type": "string",
                    "title": "The ScaleIO Storage Pool associated with the protection domain.\n+optional"
                },
                "system": {
                    "type": "string",
                    "description": "The name of the storage system as configured in ScaleIO."
                },
                "volumeName": {
                    "type": "string",
                    "description": "The name of a volume already created in the ScaleIO system\nthat is associated with this volume source."
                }
            }
        },
        "v1Secret": {
            "type": "object",
            "description": "Secret holds secret data of a certain type. The total bytes of the values in\nthe Data field must be less than MaxSecretSize bytes.",
            "properties": {
                "data": {
                    "type": "object",
                    "title": "Data contains the secret data. Each key must consist of alphanumeric\ncharacters, '-', '_' or '.'. The serialized form of the secret data is a\nbase64 encoded string, representing the arbitrary (possibly non-string)\ndata value here. Described in https://tools.ietf.org/html/rfc4648#section-4\n+optional"
                },
                "metadata": {
                    "title": "Standard object's metadata.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
                    "$ref": "#/definitions/v1ObjectMeta"
                },
                "stringData": {
                    "type": "object",
                    "title": "stringData allows specifying non-binary secret data in string form.\nIt is provided as a write-only convenience method.\nAll keys and values are merged into the data field on write, overwriting any existing values.\nIt is never output when reading from the API.\n+k8s:conversion-gen=false\n+optional"
                },
                "type": {
                    "type": "string",
                    "title": "Used to facilitate programmatic handling of secret data.\n+optional"
                }
            }
        },
        "v1SecretEnvSource": {
            "type": "object",
            "description": "SecretEnvSource selects a Secret to populate the environment\nvariables with.\n\nThe contents of the target Secret's Data field will represent the\nkey-value pairs as environment variables.",
            "properties": {
                "localObjectReference": {
                    "description": "The Secret to select from.",
                    "$ref": "#/definitions/v1LocalObjectReference"
                },
                "optional": {
                    "type": "boolean",
                    "title": "Specify whether the Secret must be defined\n+optional",
                    "format": "boolean"
                }
            }
        },
        "v1SecretKeySelector": {
            "type": "object",
            "description": "SecretKeySelector selects a key of a Secret.",
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The key of the secret to select from.  Must be a valid secret key."
                },
                "localObjectReference": {
                    "description": "The name of the secret in the pod's namespace to select from.",
                    "$ref": "#/definitions/v1LocalObjectReference"
                },
                "optional": {
                    "type": "boolean",
                    "title": "Specify whether the Secret or its key must be defined\n+optional",
                    "format": "boolean"
                }
            }
        },
        "v1SecretList": {
            "type": "object",
            "description": "SecretList is a list of Secret.",
            "properties": {
                "items": {
                    "type": "array",
                    "title": "Items is a list of secret objects.\nMore info: https://kubernetes.io/docs/concepts/configuration/secret",
                    "items": {
                        "$ref": "#/definitions/v1Secret"
                    }
                },
                "metadata": {
                    "title": "Standard list metadata.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "$ref": "#/definitions/v1ListMeta"
                }
            }
        },
        "v1SecretProjection": {
            "type": "object",
            "description": "Adapts a secret into a projected volume.\n\nThe contents of the target Secret's Data field will be presented in a\nprojected volume as files using the keys in the Data field as the file names.\nNote that this is identical to a secret volume source without the default\nmode.",
            "properties": {
                "items": {
                    "type": "array",
                    "title": "If unspecified, each key-value pair in the Data field of the referenced\nSecret will be projected into the volume as a file whose name is the\nkey and content is the value. If specified, the listed keys will be\nprojected into the specified paths, and unlisted keys will not be\npresent. If a key is specified which is not present in the Secret,\nthe volume setup will error unless it is marked optional. Paths must be\nrelative and may not contain the '..' path or start with '..'.\n+optional",
                    "items": {
                        "$ref": "#/definitions/v1KeyToPath"
                    }
                },
                "localObjectReference": {
                    "$ref": "#/definitions/v1LocalObjectReference"
                },
                "optional": {
                    "type": "boolean",
                    "title": "Specify whether the Secret or its key must be defined\n+optional",
                    "format": "boolean"
                }
            }
        },
        "v1SecretReference": {
            "type": "object",
            "title": "SecretReference represents a Secret Reference. It has enough information to retrieve secret\nin any namespace",
            "properties": {
                "name": {
                    "type": "string",
                    "title": "Name is unique within a namespace to reference a secret resource.\n+optional"
                },
                "namespace": {
                    "type": "string",
                    "title": "Namespace defines the space within which the secret name must be unique.\n+optional"
                }
            }
        },
        "v1SecretVolumeSource": {
            "type": "object",
            "description": "Adapts a Secret into a volume.\n\nThe contents of the target Secret's Data field will be presented in a volume\nas files using the keys in the Data field as the file names.\nSecret volumes support ownership management and SELinux relabeling.",
            "properties": {
                "defaultMode": {
                    "type": "integer",
                    "title": "Optional: mode bits to use on created files by default. Must be a\nvalue between 0 and 0777. Defaults to 0644.\nDirectories within the path are not affected by this setting.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.\n+optional",
                    "format": "int32"
                },
                "items": {
                    "type": "array",
                    "title": "If unspecified, each key-value pair in the Data field of the referenced\nSecret will be projected into the volume as a file whose name is the\nkey and content is the value. If specified, the listed keys will be\nprojected into the specified paths, and unlisted keys will not be\npresent. If a key is specified which is not present in the Secret,\nthe volume setup will error unless it is marked optional. Paths must be\nrelative and may not contain the '..' path or start with '..'.\n+optional",
                    "items": {
                        "$ref": "#/definitions/v1KeyToPath"
                    }
                },
                "optional": {
                    "type": "boolean",
                    "title": "Specify whether the Secret or its keys must be defined\n+optional",
                    "format": "boolean"
                },
                "secretName": {
                    "type": "string",
                    "title": "Name of the secret in the pod's namespace to use.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#secret\n+optional"
                }
            }
        },
        "v1SecurityContext": {
            "type": "object",
            "description": "SecurityContext holds security configuration that will be applied to a container.\nSome fields are present in both SecurityContext and PodSecurityContext.  When both\nare set, the values in SecurityContext take precedence.",
            "properties": {
                "allowPrivilegeEscalation": {
                    "type": "boolean",
                    "title": "AllowPrivilegeEscalation controls whether a process can gain more\nprivileges than its parent process. This bool directly controls if\nthe no_new_privs flag will be set on the container process.\nAllowPrivilegeEscalation is true always when the container is:\n1) run as Privileged\n2) has CAP_SYS_ADMIN\n+optional",
                    "format": "boolean"
                },
                "capabilities": {
                    "title": "The capabilities to add/drop when running containers.\nDefaults to the default set of capabilities granted by the container runtime.\n+optional",
                    "$ref": "#/definitions/v1Capabilities"
                },
                "privileged": {
                    "type": "boolean",
                    "title": "Run container in privileged mode.\nProcesses in privileged containers are essentially equivalent to root on the host.\nDefaults to false.\n+optional",
                    "format": "boolean"
                },
                "procMount": {
                    "type": "string",
                    "title": "procMount denotes the type of proc mount to use for the containers.\nThe default is DefaultProcMount which uses the container runtime defaults for\nreadonly paths and masked paths.\nThis requires the ProcMountType feature flag to be enabled.\n+optional"
                },
                "readOnlyRootFilesystem": {
                    "type": "boolean",
                    "title": "Whether this container has a read-only root filesystem.\nDefault is false.\n+optional",
                    "format": "boolean"
                },
                "runAsGroup": {
                    "type": "string",
                    "title": "The GID to run the entrypoint of the container process.\nUses runtime default if unset.\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\n+optional",
                    "format": "int64"
                },
                "runAsNonRoot": {
                    "type": "boolean",
                    "title": "Indicates that the container must run as a non-root user.\nIf true, the Kubelet will validate the image at runtime to ensure that it\ndoes not run as UID 0 (root) and fail to start the container if it does.\nIf unset or false, no such validation will be performed.\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\n+optional",
                    "format": "boolean"
                },
                "runAsUser": {
                    "type": "string",
                    "title": "The UID to run the entrypoint of the container process.\nDefaults to user specified in image metadata if unspecified.\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\n+optional",
                    "format": "int64"
                },
                "seLinuxOptions": {
                    "title": "The SELinux context to be applied to the container.\nIf unspecified, the container runtime will allocate a random SELinux context for each\ncontainer.  May also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\n+optional",
                    "$ref": "#/definitions/v1SELinuxOptions"
                },
                "windowsOptions": {
                    "title": "The Windows specific settings applied to all containers.\nIf unspecified, the options from the PodSecurityContext will be used.\nIf set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\n+optional",
                    "$ref": "#/definitions/v1WindowsSecurityContextOptions"
                }
            }
        },
        "v1Service": {
            "type": "object",
            "description": "Service is a named abstraction of software service (for example, mysql) consisting of local port\n(for example 3306) that the proxy listens on, and the selector that determines which pods\nwill answer requests sent through the proxy.",
            "properties": {
                "metadata": {
                    "title": "Standard object's metadata.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
                    "$ref": "#/definitions/v1ObjectMeta"
                },
                "spec": {
                    "title": "Spec defines the behavior of a service.\nhttps://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status\n+optional",
                    "$ref": "#/definitions/v1ServiceSpec"
                },
                "status": {
                    "title": "Most recently observed status of the service.\nPopulated by the system.\nRead-only.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status\n+optional",
                    "$ref": "#/definitions/v1ServiceStatus"
                }
            }
        },
        "v1ServiceAccountTokenProjection": {
            "type": "object",
            "description": "ServiceAccountTokenProjection represents a projected service account token\nvolume. This projection can be used to insert a service account token into\nthe pods runtime filesystem for use against APIs (Kubernetes API Server or\notherwise).",
            "properties": {
                "audience": {
                    "type": "string",
                    "title": "Audience is the intended audience of the token. A recipient of a token\nmust identify itself with an identifier specified in the audience of the\ntoken, and otherwise should reject the token. The audience defaults to the\nidentifier of the apiserver.\n+optional"
                },
                "expirationSeconds": {
                    "type": "string",
                    "title": "ExpirationSeconds is the requested duration of validity of the service\naccount token. As the token approaches expiration, the kubelet volume\nplugin will proactively rotate the service account token. The kubelet will\nstart trying to rotate the token if the token is older than 80 percent of\nits time to live or if the token is older than 24 hours.Defaults to 1 hour\nand must be at least 10 minutes.\n+optional",
                    "format": "int64"
                },
                "path": {
                    "type": "string",
                    "description": "Path is the path relative to the mount point of the file to project the\ntoken into."
                }
            }
        },
        "v1ServiceList": {
            "type": "object",
            "description": "ServiceList holds a list of services.",
            "properties": {
                "items": {
                    "type": "array",
                    "title": "List of services",
                    "items": {
                        "$ref": "#/definitions/v1Service"
                    }
                },
                "metadata": {
                    "title": "Standard list metadata.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "$ref": "#/definitions/v1ListMeta"
                }
            }
        },
        "v1ServicePort": {
            "type": "object",
            "description": "ServicePort contains information on service's port.",
            "properties": {
                "name": {
                    "type": "string",
                    "title": "The name of this port within the service. This must be a DNS_LABEL.\nAll ports within a ServiceSpec must have unique names. When considering\nthe endpoints for a Service, this must match the 'name' field in the\nEndpointPort.\nOptional if only one ServicePort is defined on this service.\n+optional"
                },
                "nodePort": {
                    "type": "integer",
                    "title": "The port on each node on which this service is exposed when type=NodePort or LoadBalancer.\nUsually assigned by the system. If specified, it will be allocated to the service\nif unused or else creation of the service will fail.\nDefault is to auto-allocate a port if the ServiceType of this Service requires one.\nMore info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport\n+optional",
                    "format": "int32"
                },
                "port": {
                    "type": "integer",
                    "description": "The port that will be exposed by this service.",
                    "format": "int32"
                },
                "protocol": {
                    "type": "string",
                    "title": "The IP protocol for this port. Supports \"TCP\", \"UDP\", and \"SCTP\".\nDefault is TCP.\n+optional"
                },
                "targetPort": {
                    "title": "Number or name of the port to access on the pods targeted by the service.\nNumber must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.\nIf this is a string, it will be looked up as a named port in the\ntarget Pod's container ports. If this is not specified, the value\nof the 'port' field is used (an identity map).\nThis field is ignored for services with clusterIP=None, and should be\nomitted or set equal to the 'port' field.\nMore info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service\n+optional",
                    "$ref": "#/definitions/intstrIntOrString"
                }
            }
        },
        "v1ServiceSpec": {
            "type": "object",
            "description": "ServiceSpec describes the attributes that a user creates on a service.",
            "properties": {
                "clusterIP": {
                    "type": "string",
                    "title": "clusterIP is the IP address of the service and is usually assigned\nrandomly by the master. If an address is specified manually and is not in\nuse by others, it will be allocated to the service; otherwise, creation\nof the service will fail. This field can not be changed through updates.\nValid values are \"None\", empty string (\"\"), or a valid IP address. \"None\"\ncan be specified for headless services when proxying is not required.\nOnly applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if\ntype is ExternalName.\nMore info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies\n+optional"
                },
                "externalIPs": {
                    "type": "array",
                    "title": "externalIPs is a list of IP addresses for which nodes in the cluster\nwill also accept traffic for this service.  These IPs are not managed by\nKubernetes.  The user is responsible for ensuring that traffic arrives\nat a node with this IP.  A common example is external load-balancers\nthat are not part of the Kubernetes system.\n+optional",
                    "items": {
                        "type": "string"
                    }
                },
                "externalName": {
                    "type": "string",
                    "title": "externalName is the external reference that kubedns or equivalent will\nreturn as a CNAME record for this service. No proxying will be involved.\nMust be a valid RFC-1123 hostname (https://tools.ietf.org/html/rfc1123)\nand requires Type to be ExternalName.\n+optional"
                },
                "externalTrafficPolicy": {
                    "type": "string",
                    "title": "externalTrafficPolicy denotes if this Service desires to route external\ntraffic to node-local or cluster-wide endpoints. \"Local\" preserves the\nclient source IP and avoids a second hop for LoadBalancer and Nodeport\ntype services, but risks potentially imbalanced traffic spreading.\n\"Cluster\" obscures the client source IP and may cause a second hop to\nanother node, but should have good overall load-spreading.\n+optional"
                },
                "healthCheckNodePort": {
                    "type": "integer",
                    "title": "healthCheckNodePort specifies the healthcheck nodePort for the service.\nIf not specified, HealthCheckNodePort is created by the service api\nbackend with the allocated nodePort. Will use user-specified nodePort value\nif specified by the client. Only effects when Type is set to LoadBalancer\nand ExternalTrafficPolicy is set to Local.\n+optional",
                    "format": "int32"
                },
                "ipFamily": {
                    "type": "string",
                    "title": "ipFamily specifies whether this Service has a preference for a particular IP family (e.g. IPv4 vs.\nIPv6).  If a specific IP family is requested, the clusterIP field will be allocated from that family, if it is\navailable in the cluster.  If no IP family is requested, the cluster's primary IP family will be used.\nOther IP fields (loadBalancerIP, loadBalancerSourceRanges, externalIPs) and controllers which\nallocate external load-balancers should use the same IP family.  Endpoints for this Service will be of\nthis family.  This field is immutable after creation. Assigning a ServiceIPFamily not available in the\ncluster (e.g. IPv6 in IPv4 only cluster) is an error condition and will fail during clusterIP assignment.\n+optional"
                },
                "loadBalancerIP": {
                    "type": "string",
                    "title": "Only applies to Service Type: LoadBalancer\nLoadBalancer will get created with the IP specified in this field.\nThis feature depends on whether the underlying cloud-provider supports specifying\nthe loadBalancerIP when a load balancer is created.\nThis field will be ignored if the cloud-provider does not support the feature.\n+optional"
                },
                "loadBalancerSourceRanges": {
                    "type": "array",
                    "title": "If specified and supported by the platform, this will restrict traffic through the cloud-provider\nload-balancer will be restricted to the specified client IPs. This field will be ignored if the\ncloud-provider does not support the feature.\"\nMore info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/\n+optional",
                    "items": {
                        "type": "string"
                    }
                },
                "ports": {
                    "type": "array",
                    "title": "The list of ports that are exposed by this service.\nMore info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies\n+patchMergeKey=port\n+patchStrategy=merge\n+listType=map\n+listMapKey=port\n+listMapKey=protocol",
                    "items": {
                        "$ref": "#/definitions/v1ServicePort"
                    }
                },
                "publishNotReadyAddresses": {
                    "type": "boolean",
                    "title": "publishNotReadyAddresses, when set to true, indicates that DNS implementations\nmust publish the notReadyAddresses of subsets for the Endpoints associated with\nthe Service. The default value is false.\nThe primary use case for setting this field is to use a StatefulSet's Headless Service\nto propagate SRV records for its Pods without respect to their readiness for purpose\nof peer discovery.\n+optional",
                    "format": "boolean"
                },
                "selector": {
                    "type": "object",
                    "title": "Route service traffic to pods with label keys and values matching this\nselector. If empty or not present, the service is assumed to have an\nexternal process managing its endpoints, which Kubernetes will not\nmodify. Only applies to types ClusterIP, NodePort, and LoadBalancer.\nIgnored if type is ExternalName.\nMore info: https://kubernetes.io/docs/concepts/services-networking/service/\n+optional"
                },
                "sessionAffinity": {
                    "type": "string",
                    "title": "Supports \"ClientIP\" and \"None\". Used to maintain session affinity.\nEnable client IP based session affinity.\nMust be ClientIP or None.\nDefaults to None.\nMore info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies\n+optional"
                },
                "sessionAffinityConfig": {
                    "title": "sessionAffinityConfig contains the configurations of session affinity.\n+optional",
                    "$ref": "#/definitions/v1SessionAffinityConfig"
                },
                "topologyKeys": {
                    "type": "array",
                    "title": "topologyKeys is a preference-order list of topology keys which\nimplementations of services should use to preferentially sort endpoints\nwhen accessing this Service, it can not be used at the same time as\nexternalTrafficPolicy=Local.\nTopology keys must be valid label keys and at most 16 keys may be specified.\nEndpoints are chosen based on the first topology key with available backends.\nIf this field is specified and all entries have no backends that match\nthe topology of the client, the service has no backends for that client\nand connections should fail.\nThe special value \"*\" may be used to mean \"any topology\". This catch-all\nvalue, if used, only makes sense as the last value in the list.\nIf this is not specified or empty, no topology constraints will be applied.\n+optional",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "string",
                    "title": "type determines how the Service is exposed. Defaults to ClusterIP. Valid\noptions are ExternalName, ClusterIP, NodePort, and LoadBalancer.\n\"ExternalName\" maps to the specified externalName.\n\"ClusterIP\" allocates a cluster-internal IP address for load-balancing to\nendpoints. Endpoints are determined by the selector or if that is not\nspecified, by manual construction of an Endpoints object. If clusterIP is\n\"None\", no virtual IP is allocated and the endpoints are published as a\nset of endpoints rather than a stable IP.\n\"NodePort\" builds on ClusterIP and allocates a port on every node which\nroutes to the clusterIP.\n\"LoadBalancer\" builds on NodePort and creates an\nexternal load-balancer (if supported in the current cloud) which routes\nto the clusterIP.\nMore info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types\n+optional"
                }
            }
        },
        "v1ServiceStatus": {
            "type": "object",
            "description": "ServiceStatus represents the current status of a service.",
            "properties": {
                "loadBalancer": {
                    "title": "LoadBalancer contains the current status of the load-balancer,\nif one is present.\n+optional",
                    "$ref": "#/definitions/v1LoadBalancerStatus"
                }
            }
        },
        "v1SessionAffinityConfig": {
            "type": "object",
            "description": "SessionAffinityConfig represents the configurations of session affinity.",
            "properties": {
                "clientIP": {
                    "title": "clientIP contains the configurations of Client IP based session affinity.\n+optional",
                    "$ref": "#/definitions/v1ClientIPConfig"
                }
            }
        },
        "v1StatefulSet": {
            "type": "object",
            "description": "StatefulSet represents a set of pods with consistent identities.\nIdentities are defined as:\n - Network: A single stable DNS and hostname.\n - Storage: As many VolumeClaims as requested.\nThe StatefulSet guarantees that a given network identity will always\nmap to the same storage identity.",
            "properties": {
                "metadata": {
                    "title": "+optional",
                    "$ref": "#/definitions/v1ObjectMeta"
                },
                "spec": {
                    "title": "Spec defines the desired identities of pods in this set.\n+optional",
                    "$ref": "#/definitions/v1StatefulSetSpec"
                },
                "status": {
                    "title": "Status is the current status of Pods in this StatefulSet. This data\nmay be out of date by some window of time.\n+optional",
                    "$ref": "#/definitions/v1StatefulSetStatus"
                }
            }
        },
        "v1StatefulSetCondition": {
            "type": "object",
            "description": "StatefulSetCondition describes the state of a statefulset at a certain point.",
            "properties": {
                "lastTransitionTime": {
                    "title": "Last time the condition transitioned from one status to another.\n+optional",
                    "$ref": "#/definitions/v1Time"
                },
                "message": {
                    "type": "string",
                    "title": "A human readable message indicating details about the transition.\n+optional"
                },
                "reason": {
                    "type": "string",
                    "title": "The reason for the condition's last transition.\n+optional"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the condition, one of True, False, Unknown."
                },
                "type": {
                    "type": "string",
                    "description": "Type of statefulset condition."
                }
            }
        },
        "v1StatefulSetList": {
            "type": "object",
            "description": "StatefulSetList is a collection of StatefulSets.",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1StatefulSet"
                    }
                },
                "metadata": {
                    "title": "+optional",
                    "$ref": "#/definitions/v1ListMeta"
                }
            }
        },
        "v1StatefulSetSpec": {
            "type": "object",
            "description": "A StatefulSetSpec is the specification of a StatefulSet.",
            "properties": {
                "podManagementPolicy": {
                    "type": "string",
                    "title": "podManagementPolicy controls how pods are created during initial scale up,\nwhen replacing pods on nodes, or when scaling down. The default policy is\n-OrderedReady-, where pods are created in increasing order (pod-0, then\npod-1, etc) and the controller will wait until each pod is ready before\ncontinuing. When scaling down, the pods are removed in the opposite order.\nThe alternative policy is -Parallel- which will create pods in parallel\nto match the desired scale without waiting, and on scale down will delete\nall pods at once.\n+optional"
                },
                "replicas": {
                    "type": "integer",
                    "title": "replicas is the desired number of replicas of the given Template.\nThese are replicas in the sense that they are instantiations of the\nsame Template, but individual replicas also have a consistent identity.\nIf unspecified, defaults to 1.\nTODO: Consider a rename of this field.\n+optional",
                    "format": "int32"
                },
                "revisionHistoryLimit": {
                    "type": "integer",
                    "description": "revisionHistoryLimit is the maximum number of revisions that will\nbe maintained in the StatefulSet's revision history. The revision history\nconsists of all revisions not represented by a currently applied\nStatefulSetSpec version. The default value is 10.",
                    "format": "int32"
                },
                "selector": {
                    "title": "selector is a label query over pods that should match the replica count.\nIt must match the pod template's labels.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
                    "$ref": "#/definitions/v1LabelSelector"
                },
                "serviceName": {
                    "type": "string",
                    "description": "serviceName is the name of the service that governs this StatefulSet.\nThis service must exist before the StatefulSet, and is responsible for\nthe network identity of the set. Pods get DNS/hostnames that follow the\npattern: pod-specific-string.serviceName.default.svc.cluster.local\nwhere \"pod-specific-string\" is managed by the StatefulSet controller."
                },
                "template": {
                    "description": "template is the object that describes the pod that will be created if\ninsufficient replicas are detected. Each pod stamped out by the StatefulSet\nwill fulfill this Template, but have a unique identity from the rest\nof the StatefulSet.",
                    "$ref": "#/definitions/v1PodTemplateSpec"
                },
                "updateStrategy": {
                    "description": "updateStrategy indicates the StatefulSetUpdateStrategy that will be\nemployed to update Pods in the StatefulSet when a revision is made to\nTemplate.",
                    "$ref": "#/definitions/v1StatefulSetUpdateStrategy"
                },
                "volumeClaimTemplates": {
                    "type": "array",
                    "title": "volumeClaimTemplates is a list of claims that pods are allowed to reference.\nThe StatefulSet controller is responsible for mapping network identities to\nclaims in a way that maintains the identity of a pod. Every claim in\nthis list must have at least one matching (by name) volumeMount in one\ncontainer in the template. A claim in this list takes precedence over\nany volumes in the template, with the same name.\nTODO: Define the behavior if a claim already exists with the same name.\n+optional",
                    "items": {
                        "$ref": "#/definitions/v1PersistentVolumeClaim"
                    }
                }
            }
        },
        "v1StatefulSetStatus": {
            "type": "object",
            "description": "StatefulSetStatus represents the current state of a StatefulSet.",
            "properties": {
                "collisionCount": {
                    "type": "integer",
                    "title": "collisionCount is the count of hash collisions for the StatefulSet. The StatefulSet controller\nuses this field as a collision avoidance mechanism when it needs to create the name for the\nnewest ControllerRevision.\n+optional",
                    "format": "int32"
                },
                "conditions": {
                    "type": "array",
                    "title": "Represents the latest available observations of a statefulset's current state.\n+optional\n+patchMergeKey=type\n+patchStrategy=merge",
                    "items": {
                        "$ref": "#/definitions/v1StatefulSetCondition"
                    }
                },
                "currentReplicas": {
                    "type": "integer",
                    "description": "currentReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version\nindicated by currentRevision.",
                    "format": "int32"
                },
                "currentRevision": {
                    "type": "string",
                    "description": "currentRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the\nsequence [0,currentReplicas)."
                },
                "observedGeneration": {
                    "type": "string",
                    "title": "observedGeneration is the most recent generation observed for this StatefulSet. It corresponds to the\nStatefulSet's generation, which is updated on mutation by the API Server.\n+optional",
                    "format": "int64"
                },
                "readyReplicas": {
                    "type": "integer",
                    "description": "readyReplicas is the number of Pods created by the StatefulSet controller that have a Ready Condition.",
                    "format": "int32"
                },
                "replicas": {
                    "type": "integer",
                    "description": "replicas is the number of Pods created by the StatefulSet controller.",
                    "format": "int32"
                },
                "updateRevision": {
                    "type": "string",
                    "title": "updateRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence\n[replicas-updatedReplicas,replicas)"
                },
                "updatedReplicas": {
                    "type": "integer",
                    "description": "updatedReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version\nindicated by updateRevision.",
                    "format": "int32"
                }
            }
        },
        "v1StatefulSetUpdateStrategy": {
            "type": "object",
            "description": "StatefulSetUpdateStrategy indicates the strategy that the StatefulSet\ncontroller will use to perform updates. It includes any additional parameters\nnecessary to perform the update for the indicated strategy.",
            "properties": {
                "rollingUpdate": {
                    "title": "RollingUpdate is used to communicate parameters when Type is RollingUpdateStatefulSetStrategyType.\n+optional",
                    "$ref": "#/definitions/v1RollingUpdateStatefulSetStrategy"
                },
                "type": {
                    "type": "string",
                    "title": "Type indicates the type of the StatefulSetUpdateStrategy.\nDefault is RollingUpdate.\n+optional"
                }
            }
        },
        "v1StorageOSPersistentVolumeSource": {
            "type": "object",
            "description": "Represents a StorageOS persistent volume resource.",
            "properties": {
                "fsType": {
                    "type": "string",
                    "title": "Filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n+optional"
                },
                "readOnly": {
                    "type": "boolean",
                    "title": "Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\n+optional",
                    "format": "boolean"
                },
                "secretRef": {
                    "title": "SecretRef specifies the secret to use for obtaining the StorageOS API\ncredentials.  If not specified, default values will be attempted.\n+optional",
                    "$ref": "#/definitions/v1ObjectReference"
                },
                "volumeName": {
                    "type": "string",
                    "description": "VolumeName is the human-readable name of the StorageOS volume.  Volume\nnames are only unique within a namespace."
                },
                "volumeNamespace": {
                    "type": "string",
                    "title": "VolumeNamespace specifies the scope of the volume within StorageOS.  If no\nnamespace is specified then the Pod's namespace will be used.  This allows the\nKubernetes name scoping to be mirrored within StorageOS for tighter integration.\nSet VolumeName to any name to override the default behaviour.\nSet to \"default\" if you are not using namespaces within StorageOS.\nNamespaces that do not pre-exist within StorageOS will be created.\n+optional"
                }
            }
        },
        "v1StorageOSVolumeSource": {
            "type": "object",
            "description": "Represents a StorageOS persistent volume resource.",
            "properties": {
                "fsType": {
                    "type": "string",
                    "title": "Filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n+optional"
                },
                "readOnly": {
                    "type": "boolean",
                    "title": "Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\n+optional",
                    "format": "boolean"
                },
                "secretRef": {
                    "title": "SecretRef specifies the secret to use for obtaining the StorageOS API\ncredentials.  If not specified, default values will be attempted.\n+optional",
                    "$ref": "#/definitions/v1LocalObjectReference"
                },
                "volumeName": {
                    "type": "string",
                    "description": "VolumeName is the human-readable name of the StorageOS volume.  Volume\nnames are only unique within a namespace."
                },
                "volumeNamespace": {
                    "type": "string",
                    "title": "VolumeNamespace specifies the scope of the volume within StorageOS.  If no\nnamespace is specified then the Pod's namespace will be used.  This allows the\nKubernetes name scoping to be mirrored within StorageOS for tighter integration.\nSet VolumeName to any name to override the default behaviour.\nSet to \"default\" if you are not using namespaces within StorageOS.\nNamespaces that do not pre-exist within StorageOS will be created.\n+optional"
                }
            }
        },
        "v1Sysctl": {
            "type": "object",
            "title": "Sysctl defines a kernel parameter to be set",
            "properties": {
                "name": {
                    "type": "string",
                    "title": "Name of a property to set"
                },
                "value": {
                    "type": "string",
                    "title": "Value of a property to set"
                }
            }
        },
        "v1TCPSocketAction": {
            "type": "object",
            "title": "TCPSocketAction describes an action based on opening a socket",
            "properties": {
                "host": {
                    "type": "string",
                    "title": "Optional: Host name to connect to, defaults to the pod IP.\n+optional"
                },
                "port": {
                    "description": "Number or name of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.",
                    "$ref": "#/definitions/intstrIntOrString"
                }
            }
        },
        "v1Taint": {
            "type": "object",
            "description": "The node this Taint is attached to has the \"effect\" on\nany pod that does not tolerate the Taint.",
            "properties": {
                "effect": {
                    "type": "string",
                    "description": "Required. The effect of the taint on pods\nthat do not tolerate the taint.\nValid effects are NoSchedule, PreferNoSchedule and NoExecute."
                },
                "key": {
                    "type": "string",
                    "description": "Required. The taint key to be applied to a node."
                },
                "timeAdded": {
                    "title": "TimeAdded represents the time at which the taint was added.\nIt is only written for NoExecute taints.\n+optional",
                    "$ref": "#/definitions/v1Time"
                },
                "value": {
                    "type": "string",
                    "title": "Required. The taint value corresponding to the taint key.\n+optional"
                }
            }
        },
        "v1Time": {
            "type": "object",
            "description": "Time is a wrapper around time.Time which supports correct\nmarshaling to YAML and JSON.  Wrappers are provided for many\nof the factory methods that the time package offers.\n\n+protobuf.options.marshal=false\n+protobuf.as=Timestamp\n+protobuf.options.(gogoproto.goproto_stringer)=false",
            "properties": {
                "nanos": {
                    "type": "integer",
                    "description": "Non-negative fractions of a second at nanosecond resolution. Negative\nsecond values with fractions must still have non-negative nanos values\nthat count forward in time. Must be from 0 to 999,999,999\ninclusive. This field may be limited in precision depending on context.",
                    "format": "int32"
                },
                "seconds": {
                    "type": "string",
                    "description": "Represents seconds of UTC time since Unix epoch\n1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n9999-12-31T23:59:59Z inclusive.",
                    "format": "int64"
                }
            }
        },
        "v1Toleration": {
            "type": "object",
            "description": "The pod this Toleration is attached to tolerates any taint that matches\nthe triple \u003ckey,value,effect\u003e using the matching operator \u003coperator\u003e.",
            "properties": {
                "effect": {
                    "type": "string",
                    "title": "Effect indicates the taint effect to match. Empty means match all taint effects.\nWhen specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.\n+optional"
                },
                "key": {
                    "type": "string",
                    "title": "Key is the taint key that the toleration applies to. Empty means match all taint keys.\nIf the key is empty, operator must be Exists; this combination means to match all values and all keys.\n+optional"
                },
                "operator": {
                    "type": "string",
                    "title": "Operator represents a key's relationship to the value.\nValid operators are Exists and Equal. Defaults to Equal.\nExists is equivalent to wildcard for value, so that a pod can\ntolerate all taints of a particular category.\n+optional"
                },
                "tolerationSeconds": {
                    "type": "string",
                    "title": "TolerationSeconds represents the period of time the toleration (which must be\nof effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,\nit is not set, which means tolerate the taint forever (do not evict). Zero and\nnegative values will be treated as 0 (evict immediately) by the system.\n+optional",
                    "format": "int64"
                },
                "value": {
                    "type": "string",
                    "title": "Value is the taint value the toleration matches to.\nIf the operator is Exists, the value should be empty, otherwise just a regular string.\n+optional"
                }
            }
        },
        "v1TopologySpreadConstraint": {
            "type": "object",
            "description": "TopologySpreadConstraint specifies how to spread matching pods among the given topology.",
            "properties": {
                "labelSelector": {
                    "title": "LabelSelector is used to find matching pods.\nPods that match this label selector are counted to determine the number of pods\nin their corresponding topology domain.\n+optional",
                    "$ref": "#/definitions/v1LabelSelector"
                },
                "maxSkew": {
                    "type": "integer",
                    "description": "MaxSkew describes the degree to which pods may be unevenly distributed.\nIt's the maximum permitted difference between the number of matching pods in\nany two topology domains of a given topology type.\nFor example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same\nlabelSelector spread as 1/1/0:\n+-------+-------+-------+\n| zone1 | zone2 | zone3 |\n+-------+-------+-------+\n|   P   |   P   |       |\n+-------+-------+-------+\n- if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 1/1/1;\nscheduling it onto zone1(zone2) would make the ActualSkew(2-0) on zone1(zone2)\nviolate MaxSkew(1).\n- if MaxSkew is 2, incoming pod can be scheduled onto any zone.\nIt's a required field. Default value is 1 and 0 is not allowed.",
                    "format": "int32"
                },
                "topologyKey": {
                    "type": "string",
                    "description": "TopologyKey is the key of node labels. Nodes that have a label with this key\nand identical values are considered to be in the same topology.\nWe consider each \u003ckey, value\u003e as a \"bucket\", and try to put balanced number\nof pods into each bucket.\nIt's a required field."
                },
                "whenUnsatisfiable": {
                    "type": "string",
                    "description": "WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy\nthe spread constraint.\n- DoNotSchedule (default) tells the scheduler not to schedule it\n- ScheduleAnyway tells the scheduler to still schedule it\nIt's considered as \"Unsatisfiable\" if and only if placing incoming pod on any\ntopology violates \"MaxSkew\".\nFor example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same\nlabelSelector spread as 3/1/1:\n+-------+-------+-------+\n| zone1 | zone2 | zone3 |\n+-------+-------+-------+\n| P P P |   P   |   P   |\n+-------+-------+-------+\nIf WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled\nto zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies\nMaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler\nwon't make it *more* imbalanced.\nIt's a required field."
                }
            }
        },
        "v1TypedLocalObjectReference": {
            "type": "object",
            "description": "TypedLocalObjectReference contains enough information to let you locate the\ntyped referenced object inside the same namespace.",
            "properties": {
                "apiGroup": {
                    "type": "string",
                    "title": "APIGroup is the group for the resource being referenced.\nIf APIGroup is not specified, the specified Kind must be in the core API group.\nFor any other third-party types, APIGroup is required.\n+optional"
                },
                "kind": {
                    "type": "string",
                    "title": "Kind is the type of resource being referenced"
                },
                "name": {
                    "type": "string",
                    "title": "Name is the name of resource being referenced"
                }
            }
        },
        "v1Volume": {
            "type": "object",
            "description": "Volume represents a named volume in a pod that may be accessed by any container in the pod.",
            "properties": {
                "name": {
                    "type": "string",
                    "title": "Volume's name.\nMust be a DNS_LABEL and unique within the pod.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
                },
                "volumeSource": {
                    "description": "VolumeSource represents the location and type of the mounted volume.\nIf not specified, the Volume is implied to be an EmptyDir.\nThis implied behavior is deprecated and will be removed in a future version.",
                    "$ref": "#/definitions/v1VolumeSource"
                }
            }
        },
        "v1VolumeDevice": {
            "type": "object",
            "description": "volumeDevice describes a mapping of a raw block device within a container.",
            "properties": {
                "devicePath": {
                    "type": "string",
                    "description": "devicePath is the path inside of the container that the device will be mapped to."
                },
                "name": {
                    "type": "string",
                    "title": "name must match the name of a persistentVolumeClaim in the pod"
                }
            }
        },
        "v1VolumeMount": {
            "type": "object",
            "description": "VolumeMount describes a mounting of a Volume within a container.",
            "properties": {
                "mountPath": {
                    "type": "string",
                    "description": "Path within the container at which the volume should be mounted.  Must\nnot contain ':'."
                },
                "mountPropagation": {
                    "type": "string",
                    "title": "mountPropagation determines how mounts are propagated from the host\nto container and the other way around.\nWhen not set, MountPropagationNone is used.\nThis field is beta in 1.10.\n+optional"
                },
                "name": {
                    "type": "string",
                    "description": "This must match the Name of a Volume."
                },
                "readOnly": {
                    "type": "boolean",
                    "title": "Mounted read-only if true, read-write otherwise (false or unspecified).\nDefaults to false.\n+optional",
                    "format": "boolean"
                },
                "subPath": {
                    "type": "string",
                    "title": "Path within the volume from which the container's volume should be mounted.\nDefaults to \"\" (volume's root).\n+optional"
                },
                "subPathExpr": {
                    "type": "string",
                    "title": "Expanded path within the volume from which the container's volume should be mounted.\nBehaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.\nDefaults to \"\" (volume's root).\nSubPathExpr and SubPath are mutually exclusive.\n+optional"
                }
            }
        },
        "v1VolumeNodeAffinity": {
            "type": "object",
            "description": "VolumeNodeAffinity defines constraints that limit what nodes this volume can be accessed from.",
            "properties": {
                "required": {
                    "description": "Required specifies hard node constraints that must be met.",
                    "$ref": "#/definitions/v1NodeSelector"
                }
            }
        },
        "v1VolumeProjection": {
            "type": "object",
            "title": "Projection that may be projected along with other supported volume types",
            "properties": {
                "configMap": {
                    "title": "information about the configMap data to project\n+optional",
                    "$ref": "#/definitions/v1ConfigMapProjection"
                },
                "downwardAPI": {
                    "title": "information about the downwardAPI data to project\n+optional",
                    "$ref": "#/definitions/v1DownwardAPIProjection"
                },
                "secret": {
                    "title": "information about the secret data to project\n+optional",
                    "$ref": "#/definitions/v1SecretProjection"
                },
                "serviceAccountToken": {
                    "title": "information about the serviceAccountToken data to project\n+optional",
                    "$ref": "#/definitions/v1ServiceAccountTokenProjection"
                }
            }
        },
        "v1VolumeSource": {
            "type": "object",
            "description": "Represents the source of a volume to mount.\nOnly one of its members may be specified.",
            "properties": {
                "awsElasticBlockStore": {
                    "title": "AWSElasticBlockStore represents an AWS Disk resource that is attached to a\nkubelet's host machine and then exposed to the pod.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore\n+optional",
                    "$ref": "#/definitions/v1AWSElasticBlockStoreVolumeSource"
                },
                "azureDisk": {
                    "title": "AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.\n+optional",
                    "$ref": "#/definitions/v1AzureDiskVolumeSource"
                },
                "azureFile": {
                    "title": "AzureFile represents an Azure File Service mount on the host and bind mount to the pod.\n+optional",
                    "$ref": "#/definitions/v1AzureFileVolumeSource"
                },
                "cephfs": {
                    "title": "CephFS represents a Ceph FS mount on the host that shares a pod's lifetime\n+optional",
                    "$ref": "#/definitions/v1CephFSVolumeSource"
                },
                "cinder": {
                    "title": "Cinder represents a cinder volume attached and mounted on kubelets host machine.\nMore info: https://examples.k8s.io/mysql-cinder-pd/README.md\n+optional",
                    "$ref": "#/definitions/v1CinderVolumeSource"
                },
                "configMap": {
                    "title": "ConfigMap represents a configMap that should populate this volume\n+optional",
                    "$ref": "#/definitions/v1ConfigMapVolumeSource"
                },
                "csi": {
                    "title": "CSI (Container Storage Interface) represents storage that is handled by an external CSI driver (Alpha feature).\n+optional",
                    "$ref": "#/definitions/v1CSIVolumeSource"
                },
                "downwardAPI": {
                    "title": "DownwardAPI represents downward API about the pod that should populate this volume\n+optional",
                    "$ref": "#/definitions/v1DownwardAPIVolumeSource"
                },
                "emptyDir": {
                    "title": "EmptyDir represents a temporary directory that shares a pod's lifetime.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir\n+optional",
                    "$ref": "#/definitions/v1EmptyDirVolumeSource"
                },
                "fc": {
                    "title": "FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.\n+optional",
                    "$ref": "#/definitions/v1FCVolumeSource"
                },
                "flexVolume": {
                    "title": "FlexVolume represents a generic volume resource that is\nprovisioned/attached using an exec based plugin.\n+optional",
                    "$ref": "#/definitions/v1FlexVolumeSource"
                },
                "flocker": {
                    "title": "Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running\n+optional",
                    "$ref": "#/definitions/v1FlockerVolumeSource"
                },
                "gcePersistentDisk": {
                    "title": "GCEPersistentDisk represents a GCE Disk resource that is attached to a\nkubelet's host machine and then exposed to the pod.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\n+optional",
                    "$ref": "#/definitions/v1GCEPersistentDiskVolumeSource"
                },
                "gitRepo": {
                    "title": "GitRepo represents a git repository at a particular revision.\nDEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an\nEmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir\ninto the Pod's container.\n+optional",
                    "$ref": "#/definitions/v1GitRepoVolumeSource"
                },
                "glusterfs": {
                    "title": "Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime.\nMore info: https://examples.k8s.io/volumes/glusterfs/README.md\n+optional",
                    "$ref": "#/definitions/v1GlusterfsVolumeSource"
                },
                "hostPath": {
                    "title": "HostPath represents a pre-existing file or directory on the host\nmachine that is directly exposed to the container. This is generally\nused for system agents or other privileged things that are allowed\nto see the host machine. Most containers will NOT need this.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath\n---\nTODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not\nmount host directories as read/write.\n+optional",
                    "$ref": "#/definitions/v1HostPathVolumeSource"
                },
                "iscsi": {
                    "title": "ISCSI represents an ISCSI Disk resource that is attached to a\nkubelet's host machine and then exposed to the pod.\nMore info: https://examples.k8s.io/volumes/iscsi/README.md\n+optional",
                    "$ref": "#/definitions/v1ISCSIVolumeSource"
                },
                "nfs": {
                    "title": "NFS represents an NFS mount on the host that shares a pod's lifetime\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#nfs\n+optional",
                    "$ref": "#/definitions/v1NFSVolumeSource"
                },
                "persistentVolumeClaim": {
                    "title": "PersistentVolumeClaimVolumeSource represents a reference to a\nPersistentVolumeClaim in the same namespace.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims\n+optional",
                    "$ref": "#/definitions/v1PersistentVolumeClaimVolumeSource"
                },
                "photonPersistentDisk": {
                    "title": "PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine",
                    "$ref": "#/definitions/v1PhotonPersistentDiskVolumeSource"
                },
                "portworxVolume": {
                    "title": "PortworxVolume represents a portworx volume attached and mounted on kubelets host machine\n+optional",
                    "$ref": "#/definitions/v1PortworxVolumeSource"
                },
                "projected": {
                    "title": "Items for all in one resources secrets, configmaps, and downward API",
                    "$ref": "#/definitions/v1ProjectedVolumeSource"
                },
                "quobyte": {
                    "title": "Quobyte represents a Quobyte mount on the host that shares a pod's lifetime\n+optional",
                    "$ref": "#/definitions/v1QuobyteVolumeSource"
                },
                "rbd": {
                    "title": "RBD represents a Rados Block Device mount on the host that shares a pod's lifetime.\nMore info: https://examples.k8s.io/volumes/rbd/README.md\n+optional",
                    "$ref": "#/definitions/v1RBDVolumeSource"
                },
                "scaleIO": {
                    "title": "ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.\n+optional",
                    "$ref": "#/definitions/v1ScaleIOVolumeSource"
                },
                "secret": {
                    "title": "Secret represents a secret that should populate this volume.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#secret\n+optional",
                    "$ref": "#/definitions/v1SecretVolumeSource"
                },
                "storageos": {
                    "title": "StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.\n+optional",
                    "$ref": "#/definitions/v1StorageOSVolumeSource"
                },
                "vsphereVolume": {
                    "title": "VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine\n+optional",
                    "$ref": "#/definitions/v1VsphereVirtualDiskVolumeSource"
                }
            }
        },
        "v1VsphereVirtualDiskVolumeSource": {
            "type": "object",
            "description": "Represents a vSphere volume resource.",
            "properties": {
                "fsType": {
                    "type": "string",
                    "title": "Filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n+optional"
                },
                "storagePolicyID": {
                    "type": "string",
                    "title": "Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.\n+optional"
                },
                "storagePolicyName": {
                    "type": "string",
                    "title": "Storage Policy Based Management (SPBM) profile name.\n+optional"
                },
                "volumePath": {
                    "type": "string",
                    "title": "Path that identifies vSphere volume vmdk"
                }
            }
        },
        "v1WeightedPodAffinityTerm": {
            "type": "object",
            "title": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
            "properties": {
                "podAffinityTerm": {
                    "description": "Required. A pod affinity term, associated with the corresponding weight.",
                    "$ref": "#/definitions/v1PodAffinityTerm"
                },
                "weight": {
                    "type": "integer",
                    "description": "weight associated with matching the corresponding podAffinityTerm,\nin the range 1-100.",
                    "format": "int32"
                }
            }
        },
        "v1WindowsSecurityContextOptions": {
            "type": "object",
            "description": "WindowsSecurityContextOptions contain Windows-specific options and credentials.",
            "properties": {
                "gmsaCredentialSpec": {
                    "type": "string",
                    "title": "GMSACredentialSpec is where the GMSA admission webhook\n(https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the\nGMSA credential spec named by the GMSACredentialSpecName field.\nThis field is alpha-level and is only honored by servers that enable the WindowsGMSA feature flag.\n+optional"
                },
                "gmsaCredentialSpecName": {
                    "type": "string",
                    "title": "GMSACredentialSpecName is the name of the GMSA credential spec to use.\nThis field is alpha-level and is only honored by servers that enable the WindowsGMSA feature flag.\n+optional"
                },
                "runAsUserName": {
                    "type": "string",
                    "title": "The UserName in Windows to run the entrypoint of the container process.\nDefaults to the user specified in image metadata if unspecified.\nMay also be set in PodSecurityContext. If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\nThis field is beta-level and may be disabled with the WindowsRunAsUserName feature flag.\n+optional"
                }
            }
        },
        "v1beta1CronJob": {
            "type": "object",
            "description": "CronJob represents the configuration of a single cron job.",
            "properties": {
                "metadata": {
                    "title": "Standard object's metadata.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
                    "$ref": "#/definitions/v1ObjectMeta"
                },
                "spec": {
                    "title": "Specification of the desired behavior of a cron job, including the schedule.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status\n+optional",
                    "$ref": "#/definitions/v1beta1CronJobSpec"
                },
                "status": {
                    "title": "Current status of a cron job.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status\n+optional",
                    "$ref": "#/definitions/v1beta1CronJobStatus"
                }
            }
        },
        "v1beta1CronJobList": {
            "type": "object",
            "description": "CronJobList is a collection of cron jobs.",
            "properties": {
                "items": {
                    "type": "array",
                    "description": "items is the list of CronJobs.",
                    "items": {
                        "$ref": "#/definitions/v1beta1CronJob"
                    }
                },
                "metadata": {
                    "title": "Standard list metadata.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
                    "$ref": "#/definitions/v1ListMeta"
                }
            }
        },
        "v1beta1CronJobSpec": {
            "type": "object",
            "description": "CronJobSpec describes how the job execution will look like and when it will actually run.",
            "properties": {
                "concurrencyPolicy": {
                    "type": "string",
                    "title": "Specifies how to treat concurrent executions of a Job.\nValid values are:\n- \"Allow\" (default): allows CronJobs to run concurrently;\n- \"Forbid\": forbids concurrent runs, skipping next run if previous run hasn't finished yet;\n- \"Replace\": cancels currently running job and replaces it with a new one\n+optional"
                },
                "failedJobsHistoryLimit": {
                    "type": "integer",
                    "title": "The number of failed finished jobs to retain.\nThis is a pointer to distinguish between explicit zero and not specified.\nDefaults to 1.\n+optional",
                    "format": "int32"
                },
                "jobTemplate": {
                    "description": "Specifies the job that will be created when executing a CronJob.",
                    "$ref": "#/definitions/v1beta1JobTemplateSpec"
                },
                "schedule": {
                    "type": "string",
                    "description": "The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron."
                },
                "startingDeadlineSeconds": {
                    "type": "string",
                    "title": "Optional deadline in seconds for starting the job if it misses scheduled\ntime for any reason.  Missed jobs executions will be counted as failed ones.\n+optional",
                    "format": "int64"
                },
                "successfulJobsHistoryLimit": {
                    "type": "integer",
                    "title": "The number of successful finished jobs to retain.\nThis is a pointer to distinguish between explicit zero and not specified.\nDefaults to 3.\n+optional",
                    "format": "int32"
                },
                "suspend": {
                    "type": "boolean",
                    "title": "This flag tells the controller to suspend subsequent executions, it does\nnot apply to already started executions.  Defaults to false.\n+optional",
                    "format": "boolean"
                }
            }
        },
        "v1beta1CronJobStatus": {
            "type": "object",
            "description": "CronJobStatus represents the current state of a cron job.",
            "properties": {
                "active": {
                    "type": "array",
                    "title": "A list of pointers to currently running jobs.\n+optional",
                    "items": {
                        "$ref": "#/definitions/v1ObjectReference"
                    }
                },
                "lastScheduleTime": {
                    "title": "Information when was the last time the job was successfully scheduled.\n+optional",
                    "$ref": "#/definitions/v1Time"
                }
            }
        },
        "v1beta1JobTemplateSpec": {
            "type": "object",
            "title": "JobTemplateSpec describes the data a Job should have when created from a template",
            "properties": {
                "metadata": {
                    "title": "Standard object's metadata of the jobs created from this template.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
                    "$ref": "#/definitions/v1ObjectMeta"
                },
                "spec": {
                    "title": "Specification of the desired behavior of the job.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status\n+optional",
                    "$ref": "#/definitions/v1JobSpec"
                }
            }
        }
    },
    "x-displayname": "Site",
    "x-ves-proto-file": "ves.io/schema/site/public_custom_data_k8s_api.proto"
}`

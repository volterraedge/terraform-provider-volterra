// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/site/public_custom_virtual_network_api.proto

// APIs to list segments and global networks for a site
//
// x-displayName: "Site"
// APIs to get list of segments and global networks associated with a site.

package site

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Global Network List request
//
// x-displayName: "Global Network List Request"
// Request list of Global Network for site
type GlobalNetworkListRequest struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "system"
	// Site namespace
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Site
	//
	// x-displayName: "Site Name"
	// x-required
	// x-example: "ce398"
	// Site name
	Site string `protobuf:"bytes,2,opt,name=site,proto3" json:"site,omitempty"`
}

func (m *GlobalNetworkListRequest) Reset()      { *m = GlobalNetworkListRequest{} }
func (*GlobalNetworkListRequest) ProtoMessage() {}
func (*GlobalNetworkListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_02055a8f45eb884a, []int{0}
}
func (m *GlobalNetworkListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalNetworkListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GlobalNetworkListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GlobalNetworkListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalNetworkListRequest.Merge(m, src)
}
func (m *GlobalNetworkListRequest) XXX_Size() int {
	return m.Size()
}
func (m *GlobalNetworkListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalNetworkListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalNetworkListRequest proto.InternalMessageInfo

func (m *GlobalNetworkListRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *GlobalNetworkListRequest) GetSite() string {
	if m != nil {
		return m.Site
	}
	return ""
}

// Segment List request
//
// x-displayName: "Segmet List Request"
// Request list of Segments for site
type SegmentListRequest struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "system"
	// Site namespace
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Site
	//
	// x-displayName: "Site Name"
	// x-required
	// x-example: "ce398"
	// Site name
	Site string `protobuf:"bytes,2,opt,name=site,proto3" json:"site,omitempty"`
}

func (m *SegmentListRequest) Reset()      { *m = SegmentListRequest{} }
func (*SegmentListRequest) ProtoMessage() {}
func (*SegmentListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_02055a8f45eb884a, []int{1}
}
func (m *SegmentListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SegmentListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SegmentListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SegmentListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SegmentListRequest.Merge(m, src)
}
func (m *SegmentListRequest) XXX_Size() int {
	return m.Size()
}
func (m *SegmentListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SegmentListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SegmentListRequest proto.InternalMessageInfo

func (m *SegmentListRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *SegmentListRequest) GetSite() string {
	if m != nil {
		return m.Site
	}
	return ""
}

// GlobalNetworkListResp
//
// x-displayName: "Global Network List Response"
// Global Network List Response
type GlobalNetworkListResp struct {
	// Item
	//
	// x-displayName: "Items"
	// List of the global networks connected to site
	Items []*GlobalNetworkItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *GlobalNetworkListResp) Reset()      { *m = GlobalNetworkListResp{} }
func (*GlobalNetworkListResp) ProtoMessage() {}
func (*GlobalNetworkListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_02055a8f45eb884a, []int{2}
}
func (m *GlobalNetworkListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalNetworkListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GlobalNetworkListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GlobalNetworkListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalNetworkListResp.Merge(m, src)
}
func (m *GlobalNetworkListResp) XXX_Size() int {
	return m.Size()
}
func (m *GlobalNetworkListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalNetworkListResp.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalNetworkListResp proto.InternalMessageInfo

func (m *GlobalNetworkListResp) GetItems() []*GlobalNetworkItem {
	if m != nil {
		return m.Items
	}
	return nil
}

// GlobalNetworkItem
//
// x-displayName: "GlobalNetworkItem"
// Contains reference to the virtual network, and its optional description
type GlobalNetworkItem struct {
	// Reference
	//
	// x-displayName: "Reference"
	// Reference to the Global Network type virtual_network Object
	Ref []*schema.ObjectRefType `protobuf:"bytes,1,rep,name=ref,proto3" json:"ref,omitempty"`
	// description
	//
	// x-displayName: "Description"
	// Optional description for the virtual_network
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *GlobalNetworkItem) Reset()      { *m = GlobalNetworkItem{} }
func (*GlobalNetworkItem) ProtoMessage() {}
func (*GlobalNetworkItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_02055a8f45eb884a, []int{3}
}
func (m *GlobalNetworkItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalNetworkItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GlobalNetworkItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GlobalNetworkItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalNetworkItem.Merge(m, src)
}
func (m *GlobalNetworkItem) XXX_Size() int {
	return m.Size()
}
func (m *GlobalNetworkItem) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalNetworkItem.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalNetworkItem proto.InternalMessageInfo

func (m *GlobalNetworkItem) GetRef() []*schema.ObjectRefType {
	if m != nil {
		return m.Ref
	}
	return nil
}

func (m *GlobalNetworkItem) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

// SegmentListResp
//
// x-displayName: "Segment List Response"
// Segment List Response
type SegmentListResp struct {
	// Item
	//
	// x-displayName: "Items"
	// List of the segments connected to site
	Items []*SegmentItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *SegmentListResp) Reset()      { *m = SegmentListResp{} }
func (*SegmentListResp) ProtoMessage() {}
func (*SegmentListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_02055a8f45eb884a, []int{4}
}
func (m *SegmentListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SegmentListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SegmentListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SegmentListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SegmentListResp.Merge(m, src)
}
func (m *SegmentListResp) XXX_Size() int {
	return m.Size()
}
func (m *SegmentListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SegmentListResp.DiscardUnknown(m)
}

var xxx_messageInfo_SegmentListResp proto.InternalMessageInfo

func (m *SegmentListResp) GetItems() []*SegmentItem {
	if m != nil {
		return m.Items
	}
	return nil
}

// SegmentItem
//
// x-displayName: "SegmentItem"
// Contains reference to the segment, and its optional description
type SegmentItem struct {
	// Reference
	//
	// x-displayName: "Reference"
	// Reference to the segment object
	Ref []*schema.ObjectRefType `protobuf:"bytes,1,rep,name=ref,proto3" json:"ref,omitempty"`
	// description
	//
	// x-displayName: "Description"
	// Optional description for the segment
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *SegmentItem) Reset()      { *m = SegmentItem{} }
func (*SegmentItem) ProtoMessage() {}
func (*SegmentItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_02055a8f45eb884a, []int{5}
}
func (m *SegmentItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SegmentItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SegmentItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SegmentItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SegmentItem.Merge(m, src)
}
func (m *SegmentItem) XXX_Size() int {
	return m.Size()
}
func (m *SegmentItem) XXX_DiscardUnknown() {
	xxx_messageInfo_SegmentItem.DiscardUnknown(m)
}

var xxx_messageInfo_SegmentItem proto.InternalMessageInfo

func (m *SegmentItem) GetRef() []*schema.ObjectRefType {
	if m != nil {
		return m.Ref
	}
	return nil
}

func (m *SegmentItem) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func init() {
	proto.RegisterType((*GlobalNetworkListRequest)(nil), "ves.io.schema.site.GlobalNetworkListRequest")
	golang_proto.RegisterType((*GlobalNetworkListRequest)(nil), "ves.io.schema.site.GlobalNetworkListRequest")
	proto.RegisterType((*SegmentListRequest)(nil), "ves.io.schema.site.SegmentListRequest")
	golang_proto.RegisterType((*SegmentListRequest)(nil), "ves.io.schema.site.SegmentListRequest")
	proto.RegisterType((*GlobalNetworkListResp)(nil), "ves.io.schema.site.GlobalNetworkListResp")
	golang_proto.RegisterType((*GlobalNetworkListResp)(nil), "ves.io.schema.site.GlobalNetworkListResp")
	proto.RegisterType((*GlobalNetworkItem)(nil), "ves.io.schema.site.GlobalNetworkItem")
	golang_proto.RegisterType((*GlobalNetworkItem)(nil), "ves.io.schema.site.GlobalNetworkItem")
	proto.RegisterType((*SegmentListResp)(nil), "ves.io.schema.site.SegmentListResp")
	golang_proto.RegisterType((*SegmentListResp)(nil), "ves.io.schema.site.SegmentListResp")
	proto.RegisterType((*SegmentItem)(nil), "ves.io.schema.site.SegmentItem")
	golang_proto.RegisterType((*SegmentItem)(nil), "ves.io.schema.site.SegmentItem")
}

func init() {
	proto.RegisterFile("ves.io/schema/site/public_custom_virtual_network_api.proto", fileDescriptor_02055a8f45eb884a)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/site/public_custom_virtual_network_api.proto", fileDescriptor_02055a8f45eb884a)
}

var fileDescriptor_02055a8f45eb884a = []byte{
	// 679 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x41, 0x4f, 0x13, 0x4f,
	0x14, 0xef, 0x14, 0xfe, 0x7f, 0xc3, 0x92, 0x88, 0x4e, 0xa2, 0x29, 0x85, 0xac, 0x4d, 0x8d, 0x8a,
	0x09, 0xbb, 0x93, 0xa0, 0x78, 0x80, 0x68, 0x22, 0x26, 0x08, 0x09, 0x51, 0x53, 0x89, 0x07, 0x2f,
	0xcd, 0x74, 0xfb, 0xba, 0x8c, 0x74, 0x77, 0xc6, 0x99, 0x69, 0x81, 0x90, 0x1a, 0x42, 0xe2, 0xdd,
	0xc4, 0x9b, 0x9f, 0xc0, 0xf0, 0x09, 0x4c, 0xf0, 0xc0, 0x4d, 0x4e, 0x86, 0xe8, 0x85, 0x78, 0x92,
	0xad, 0x07, 0x8f, 0x1c, 0xfc, 0x00, 0x66, 0x77, 0x5b, 0xe8, 0x16, 0x22, 0x10, 0x3d, 0xed, 0xdb,
	0xf7, 0x7b, 0xbf, 0x97, 0xf7, 0x7b, 0xef, 0xcd, 0x33, 0x26, 0xea, 0xa0, 0x6c, 0xc6, 0x89, 0x72,
	0x16, 0xc0, 0xa3, 0x44, 0x31, 0x0d, 0x44, 0xd4, 0x4a, 0x55, 0xe6, 0x14, 0x9d, 0x9a, 0xd2, 0xdc,
	0x2b, 0xd6, 0x99, 0xd4, 0x35, 0x5a, 0x2d, 0xfa, 0xa0, 0x97, 0xb8, 0x5c, 0x2c, 0x52, 0xc1, 0x6c,
	0x21, 0xb9, 0xe6, 0x18, 0xc7, 0x5c, 0x3b, 0xe6, 0xda, 0x21, 0x37, 0x6b, 0xb9, 0x4c, 0x2f, 0xd4,
	0x4a, 0xb6, 0xc3, 0x3d, 0xe2, 0x72, 0x97, 0x93, 0x28, 0xb4, 0x54, 0xab, 0x44, 0x7f, 0xd1, 0x4f,
	0x64, 0xc5, 0x29, 0xb2, 0xc3, 0x2e, 0xe7, 0x6e, 0x15, 0x08, 0x15, 0x8c, 0x50, 0xdf, 0xe7, 0x9a,
	0x6a, 0xc6, 0x7d, 0xd5, 0x42, 0x87, 0x92, 0xc5, 0x71, 0xd1, 0x09, 0x0e, 0x26, 0x41, 0xbd, 0x22,
	0xa0, 0x0d, 0xe5, 0x93, 0x50, 0x1d, 0x14, 0xf8, 0xf5, 0x2e, 0x7a, 0xae, 0x2b, 0x86, 0xc1, 0x52,
	0x31, 0x11, 0x91, 0x9f, 0x33, 0x32, 0x0f, 0xab, 0xbc, 0x44, 0xab, 0x8f, 0x62, 0xe5, 0x73, 0x4c,
	0xe9, 0x02, 0xbc, 0xac, 0x81, 0xd2, 0x78, 0xd8, 0xe8, 0xf3, 0xa9, 0x07, 0x4a, 0x50, 0x07, 0x32,
	0x28, 0x87, 0x46, 0xfa, 0x0a, 0x87, 0x0e, 0x8c, 0x8d, 0xde, 0xb0, 0x19, 0x99, 0x74, 0x04, 0x44,
	0x76, 0x7e, 0xda, 0xc0, 0x4f, 0xc1, 0xf5, 0xc0, 0xd7, 0x7f, 0x97, 0x67, 0xde, 0xb8, 0x74, 0x4c,
	0x55, 0x4a, 0xe0, 0x49, 0xe3, 0x3f, 0xa6, 0xc1, 0x53, 0x19, 0x94, 0xeb, 0x19, 0xe9, 0x1f, 0xbb,
	0x66, 0x1f, 0x9d, 0x8e, 0x9d, 0x60, 0xce, 0x6a, 0xf0, 0x0a, 0x31, 0x27, 0xdf, 0x30, 0x2e, 0x1e,
	0xc1, 0xf0, 0xb4, 0xd1, 0x23, 0xa1, 0xd2, 0xca, 0x37, 0xdc, 0x95, 0xef, 0x71, 0xe9, 0x05, 0x38,
	0xba, 0x00, 0x95, 0xf9, 0x15, 0x01, 0x53, 0x97, 0x37, 0x1a, 0x03, 0x5d, 0x8b, 0xb2, 0xf6, 0x11,
	0xa1, 0x42, 0x98, 0x00, 0xe7, 0x8c, 0xfe, 0x32, 0x28, 0x47, 0xb2, 0xa8, 0xbd, 0x2d, 0x35, 0x9d,
	0xae, 0xfc, 0x8c, 0x31, 0x90, 0x68, 0x8e, 0x12, 0x78, 0x3c, 0x29, 0xe7, 0xca, 0x71, 0x72, 0x5a,
	0x9c, 0x4e, 0x21, 0xdc, 0xe8, 0xef, 0xf0, 0xe2, 0x7b, 0xa7, 0x97, 0x70, 0x7e, 0xa3, 0x71, 0x4e,
	0xc5, 0xd4, 0x33, 0x94, 0x3e, 0xf6, 0xae, 0xd7, 0x18, 0x7a, 0x10, 0xbd, 0x94, 0x67, 0xb1, 0xfe,
	0x8e, 0xb9, 0xdc, 0x7f, 0x32, 0x8b, 0x7f, 0xa1, 0xae, 0xd6, 0x86, 0x00, 0x1e, 0x3d, 0x71, 0x3a,
	0x1d, 0x5b, 0x92, 0xbd, 0x79, 0xca, 0x68, 0x25, 0xf2, 0xaf, 0xd1, 0xf6, 0x87, 0x34, 0x0a, 0x3e,
	0x65, 0x26, 0x2a, 0xe3, 0xcb, 0x8e, 0x15, 0x46, 0x5a, 0x1e, 0xf5, 0xa9, 0x0b, 0xa1, 0x30, 0x4b,
	0x69, 0xea, 0x97, 0xa9, 0x2c, 0x5b, 0x1e, 0xf7, 0x99, 0xe6, 0x72, 0x34, 0x7c, 0x06, 0x16, 0xe3,
	0x96, 0x0b, 0x3e, 0x48, 0x5a, 0xb5, 0x24, 0xd0, 0xf2, 0xfa, 0xd7, 0x1f, 0x6f, 0xd3, 0x77, 0xf1,
	0x64, 0xeb, 0x10, 0x90, 0x83, 0x85, 0x54, 0x64, 0xf5, 0xc0, 0x6e, 0x44, 0xb7, 0x42, 0x91, 0xd5,
	0xf0, 0xd3, 0x20, 0x6e, 0x54, 0x4d, 0x7b, 0xf6, 0x0a, 0x7f, 0x43, 0x07, 0x83, 0x88, 0x04, 0x5f,
	0xff, 0xc3, 0xfc, 0x3a, 0xa5, 0x5e, 0x3d, 0x31, 0x4e, 0x89, 0xfc, 0xab, 0x7f, 0xa4, 0xf1, 0x0e,
	0xbe, 0x7d, 0x16, 0x8d, 0xad, 0xed, 0x50, 0xd9, 0x1b, 0x5b, 0x9b, 0xa8, 0xe7, 0xcb, 0x26, 0x1a,
	0x3c, 0xa6, 0xd6, 0x78, 0xa9, 0xd6, 0x3f, 0x67, 0xd2, 0x17, 0xd0, 0xd4, 0x3a, 0xda, 0xd9, 0x33,
	0x53, 0xbb, 0x7b, 0x66, 0x6a, 0x7f, 0xcf, 0x44, 0x6b, 0x81, 0x89, 0xde, 0x07, 0x26, 0xda, 0x0e,
	0x4c, 0xb4, 0x13, 0x98, 0xe8, 0x7b, 0x60, 0xa2, 0x9f, 0x81, 0x99, 0xda, 0x0f, 0x4c, 0xf4, 0xa6,
	0x69, 0xa6, 0xb6, 0x9a, 0x26, 0xda, 0x69, 0x9a, 0xa9, 0xdd, 0xa6, 0x99, 0x7a, 0x3e, 0xe3, 0x72,
	0xb1, 0xe8, 0xda, 0x75, 0x5e, 0xd5, 0x20, 0x25, 0xb5, 0x6b, 0x8a, 0x44, 0x46, 0x85, 0x4b, 0xcf,
	0x12, 0x92, 0xd7, 0x59, 0x19, 0xa4, 0xd5, 0x86, 0x89, 0x28, 0xb9, 0x9c, 0xc0, 0xb2, 0x6e, 0xdf,
	0xf1, 0xc3, 0x73, 0x5e, 0xfa, 0x3f, 0x3a, 0x67, 0xb7, 0x7e, 0x07, 0x00, 0x00, 0xff, 0xff, 0x49,
	0x4a, 0x03, 0x0f, 0xeb, 0x05, 0x00, 0x00,
}

func (this *GlobalNetworkListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalNetworkListRequest)
	if !ok {
		that2, ok := that.(GlobalNetworkListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Site != that1.Site {
		return false
	}
	return true
}
func (this *SegmentListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SegmentListRequest)
	if !ok {
		that2, ok := that.(SegmentListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Site != that1.Site {
		return false
	}
	return true
}
func (this *GlobalNetworkListResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalNetworkListResp)
	if !ok {
		that2, ok := that.(GlobalNetworkListResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if !this.Items[i].Equal(that1.Items[i]) {
			return false
		}
	}
	return true
}
func (this *GlobalNetworkItem) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalNetworkItem)
	if !ok {
		that2, ok := that.(GlobalNetworkItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Ref) != len(that1.Ref) {
		return false
	}
	for i := range this.Ref {
		if !this.Ref[i].Equal(that1.Ref[i]) {
			return false
		}
	}
	if this.Description != that1.Description {
		return false
	}
	return true
}
func (this *SegmentListResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SegmentListResp)
	if !ok {
		that2, ok := that.(SegmentListResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if !this.Items[i].Equal(that1.Items[i]) {
			return false
		}
	}
	return true
}
func (this *SegmentItem) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SegmentItem)
	if !ok {
		that2, ok := that.(SegmentItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Ref) != len(that1.Ref) {
		return false
	}
	for i := range this.Ref {
		if !this.Ref[i].Equal(that1.Ref[i]) {
			return false
		}
	}
	if this.Description != that1.Description {
		return false
	}
	return true
}
func (this *GlobalNetworkListRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&site.GlobalNetworkListRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Site: "+fmt.Sprintf("%#v", this.Site)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SegmentListRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&site.SegmentListRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Site: "+fmt.Sprintf("%#v", this.Site)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalNetworkListResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&site.GlobalNetworkListResp{")
	if this.Items != nil {
		s = append(s, "Items: "+fmt.Sprintf("%#v", this.Items)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalNetworkItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&site.GlobalNetworkItem{")
	if this.Ref != nil {
		s = append(s, "Ref: "+fmt.Sprintf("%#v", this.Ref)+",\n")
	}
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SegmentListResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&site.SegmentListResp{")
	if this.Items != nil {
		s = append(s, "Items: "+fmt.Sprintf("%#v", this.Items)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SegmentItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&site.SegmentItem{")
	if this.Ref != nil {
		s = append(s, "Ref: "+fmt.Sprintf("%#v", this.Ref)+",\n")
	}
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPublicCustomVirtualNetworkApi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CustomVirtualNetworkListAPIClient is the client API for CustomVirtualNetworkListAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomVirtualNetworkListAPIClient interface {
	// GlobalNetworkList
	//
	// x-displayName: "Global Network List"
	// API to get list of Global Network in a site.
	GlobalNetworkList(ctx context.Context, in *GlobalNetworkListRequest, opts ...grpc.CallOption) (*GlobalNetworkListResp, error)
	// SegmentList
	//
	// x-displayName: "Segment List"
	// API to get list of segments in a site.
	SegmentList(ctx context.Context, in *SegmentListRequest, opts ...grpc.CallOption) (*SegmentListResp, error)
}

type customVirtualNetworkListAPIClient struct {
	cc *grpc.ClientConn
}

func NewCustomVirtualNetworkListAPIClient(cc *grpc.ClientConn) CustomVirtualNetworkListAPIClient {
	return &customVirtualNetworkListAPIClient{cc}
}

func (c *customVirtualNetworkListAPIClient) GlobalNetworkList(ctx context.Context, in *GlobalNetworkListRequest, opts ...grpc.CallOption) (*GlobalNetworkListResp, error) {
	out := new(GlobalNetworkListResp)
	err := c.cc.Invoke(ctx, "/ves.io.schema.site.CustomVirtualNetworkListAPI/GlobalNetworkList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customVirtualNetworkListAPIClient) SegmentList(ctx context.Context, in *SegmentListRequest, opts ...grpc.CallOption) (*SegmentListResp, error) {
	out := new(SegmentListResp)
	err := c.cc.Invoke(ctx, "/ves.io.schema.site.CustomVirtualNetworkListAPI/SegmentList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomVirtualNetworkListAPIServer is the server API for CustomVirtualNetworkListAPI service.
type CustomVirtualNetworkListAPIServer interface {
	// GlobalNetworkList
	//
	// x-displayName: "Global Network List"
	// API to get list of Global Network in a site.
	GlobalNetworkList(context.Context, *GlobalNetworkListRequest) (*GlobalNetworkListResp, error)
	// SegmentList
	//
	// x-displayName: "Segment List"
	// API to get list of segments in a site.
	SegmentList(context.Context, *SegmentListRequest) (*SegmentListResp, error)
}

// UnimplementedCustomVirtualNetworkListAPIServer can be embedded to have forward compatible implementations.
type UnimplementedCustomVirtualNetworkListAPIServer struct {
}

func (*UnimplementedCustomVirtualNetworkListAPIServer) GlobalNetworkList(ctx context.Context, req *GlobalNetworkListRequest) (*GlobalNetworkListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GlobalNetworkList not implemented")
}
func (*UnimplementedCustomVirtualNetworkListAPIServer) SegmentList(ctx context.Context, req *SegmentListRequest) (*SegmentListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SegmentList not implemented")
}

func RegisterCustomVirtualNetworkListAPIServer(s *grpc.Server, srv CustomVirtualNetworkListAPIServer) {
	s.RegisterService(&_CustomVirtualNetworkListAPI_serviceDesc, srv)
}

func _CustomVirtualNetworkListAPI_GlobalNetworkList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GlobalNetworkListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomVirtualNetworkListAPIServer).GlobalNetworkList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.site.CustomVirtualNetworkListAPI/GlobalNetworkList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomVirtualNetworkListAPIServer).GlobalNetworkList(ctx, req.(*GlobalNetworkListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomVirtualNetworkListAPI_SegmentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SegmentListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomVirtualNetworkListAPIServer).SegmentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.site.CustomVirtualNetworkListAPI/SegmentList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomVirtualNetworkListAPIServer).SegmentList(ctx, req.(*SegmentListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomVirtualNetworkListAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.site.CustomVirtualNetworkListAPI",
	HandlerType: (*CustomVirtualNetworkListAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GlobalNetworkList",
			Handler:    _CustomVirtualNetworkListAPI_GlobalNetworkList_Handler,
		},
		{
			MethodName: "SegmentList",
			Handler:    _CustomVirtualNetworkListAPI_SegmentList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/site/public_custom_virtual_network_api.proto",
}

func (m *GlobalNetworkListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalNetworkListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalNetworkListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Site) > 0 {
		i -= len(m.Site)
		copy(dAtA[i:], m.Site)
		i = encodeVarintPublicCustomVirtualNetworkApi(dAtA, i, uint64(len(m.Site)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomVirtualNetworkApi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SegmentListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SegmentListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SegmentListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Site) > 0 {
		i -= len(m.Site)
		copy(dAtA[i:], m.Site)
		i = encodeVarintPublicCustomVirtualNetworkApi(dAtA, i, uint64(len(m.Site)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomVirtualNetworkApi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GlobalNetworkListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalNetworkListResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalNetworkListResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomVirtualNetworkApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GlobalNetworkItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalNetworkItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalNetworkItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintPublicCustomVirtualNetworkApi(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Ref) > 0 {
		for iNdEx := len(m.Ref) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ref[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomVirtualNetworkApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SegmentListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SegmentListResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SegmentListResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomVirtualNetworkApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SegmentItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SegmentItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SegmentItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintPublicCustomVirtualNetworkApi(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Ref) > 0 {
		for iNdEx := len(m.Ref) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ref[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomVirtualNetworkApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintPublicCustomVirtualNetworkApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovPublicCustomVirtualNetworkApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GlobalNetworkListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomVirtualNetworkApi(uint64(l))
	}
	l = len(m.Site)
	if l > 0 {
		n += 1 + l + sovPublicCustomVirtualNetworkApi(uint64(l))
	}
	return n
}

func (m *SegmentListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomVirtualNetworkApi(uint64(l))
	}
	l = len(m.Site)
	if l > 0 {
		n += 1 + l + sovPublicCustomVirtualNetworkApi(uint64(l))
	}
	return n
}

func (m *GlobalNetworkListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovPublicCustomVirtualNetworkApi(uint64(l))
		}
	}
	return n
}

func (m *GlobalNetworkItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ref) > 0 {
		for _, e := range m.Ref {
			l = e.Size()
			n += 1 + l + sovPublicCustomVirtualNetworkApi(uint64(l))
		}
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovPublicCustomVirtualNetworkApi(uint64(l))
	}
	return n
}

func (m *SegmentListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovPublicCustomVirtualNetworkApi(uint64(l))
		}
	}
	return n
}

func (m *SegmentItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ref) > 0 {
		for _, e := range m.Ref {
			l = e.Size()
			n += 1 + l + sovPublicCustomVirtualNetworkApi(uint64(l))
		}
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovPublicCustomVirtualNetworkApi(uint64(l))
	}
	return n
}

func sovPublicCustomVirtualNetworkApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPublicCustomVirtualNetworkApi(x uint64) (n int) {
	return sovPublicCustomVirtualNetworkApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GlobalNetworkListRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalNetworkListRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Site:` + fmt.Sprintf("%v", this.Site) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SegmentListRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SegmentListRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Site:` + fmt.Sprintf("%v", this.Site) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalNetworkListResp) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]*GlobalNetworkItem{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(f.String(), "GlobalNetworkItem", "GlobalNetworkItem", 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&GlobalNetworkListResp{`,
		`Items:` + repeatedStringForItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalNetworkItem) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRef := "[]*ObjectRefType{"
	for _, f := range this.Ref {
		repeatedStringForRef += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForRef += "}"
	s := strings.Join([]string{`&GlobalNetworkItem{`,
		`Ref:` + repeatedStringForRef + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SegmentListResp) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]*SegmentItem{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(f.String(), "SegmentItem", "SegmentItem", 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&SegmentListResp{`,
		`Items:` + repeatedStringForItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *SegmentItem) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRef := "[]*ObjectRefType{"
	for _, f := range this.Ref {
		repeatedStringForRef += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForRef += "}"
	s := strings.Join([]string{`&SegmentItem{`,
		`Ref:` + repeatedStringForRef + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPublicCustomVirtualNetworkApi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GlobalNetworkListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomVirtualNetworkApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalNetworkListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalNetworkListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomVirtualNetworkApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomVirtualNetworkApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomVirtualNetworkApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomVirtualNetworkApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomVirtualNetworkApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomVirtualNetworkApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Site = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomVirtualNetworkApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomVirtualNetworkApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomVirtualNetworkApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SegmentListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomVirtualNetworkApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SegmentListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SegmentListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomVirtualNetworkApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomVirtualNetworkApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomVirtualNetworkApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomVirtualNetworkApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomVirtualNetworkApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomVirtualNetworkApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Site = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomVirtualNetworkApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomVirtualNetworkApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomVirtualNetworkApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalNetworkListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomVirtualNetworkApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalNetworkListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalNetworkListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomVirtualNetworkApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomVirtualNetworkApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomVirtualNetworkApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &GlobalNetworkItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomVirtualNetworkApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomVirtualNetworkApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomVirtualNetworkApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalNetworkItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomVirtualNetworkApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalNetworkItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalNetworkItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ref", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomVirtualNetworkApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomVirtualNetworkApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomVirtualNetworkApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ref = append(m.Ref, &schema.ObjectRefType{})
			if err := m.Ref[len(m.Ref)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomVirtualNetworkApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomVirtualNetworkApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomVirtualNetworkApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomVirtualNetworkApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomVirtualNetworkApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomVirtualNetworkApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SegmentListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomVirtualNetworkApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SegmentListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SegmentListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomVirtualNetworkApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomVirtualNetworkApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomVirtualNetworkApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &SegmentItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomVirtualNetworkApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomVirtualNetworkApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomVirtualNetworkApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SegmentItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomVirtualNetworkApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SegmentItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SegmentItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ref", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomVirtualNetworkApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomVirtualNetworkApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomVirtualNetworkApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ref = append(m.Ref, &schema.ObjectRefType{})
			if err := m.Ref[len(m.Ref)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomVirtualNetworkApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomVirtualNetworkApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomVirtualNetworkApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomVirtualNetworkApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomVirtualNetworkApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomVirtualNetworkApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublicCustomVirtualNetworkApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublicCustomVirtualNetworkApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomVirtualNetworkApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomVirtualNetworkApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPublicCustomVirtualNetworkApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPublicCustomVirtualNetworkApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPublicCustomVirtualNetworkApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPublicCustomVirtualNetworkApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublicCustomVirtualNetworkApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPublicCustomVirtualNetworkApi = fmt.Errorf("proto: unexpected end of group")
)

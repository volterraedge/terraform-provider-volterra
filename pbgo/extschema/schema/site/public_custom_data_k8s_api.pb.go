// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/site/public_custom_data_k8s_api.proto

// K8s monitoring APIs for a site
//
// x-displayName: "Site"
// APIs to get monitoring data for K8s resources in a site.

package site

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	io "io"
	v11 "k8s.io/api/apps/v1"
	v12 "k8s.io/api/batch/v1"
	v1beta1 "k8s.io/api/batch/v1beta1"
	v1 "k8s.io/api/core/v1"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// VirtualMachineInstancesMetricType
//
// x-displayName: "Virtual Machine Instances Metric Type"
// List of metric types for Virtual Machine Instances
type VirtualMachineInstancesMetricType int32

const (
	// x-displayName: "In Bytes"
	VMI_METRIC_TYPE_IN_BYTES VirtualMachineInstancesMetricType = 0
	// x-displayName: "Out Bytes"
	VMI_METRIC_TYPE_OUT_BYTES VirtualMachineInstancesMetricType = 1
	// x-displayName: "In Drop Packets"
	VMI_METRIC_TYPE_IN_DROP_PACKETS VirtualMachineInstancesMetricType = 2
	// x-displayName: "Out Drop Packets"
	VMI_METRIC_TYPE_OUT_DROP_PACKETS VirtualMachineInstancesMetricType = 3
	// x-displayName: "In Packets"
	VMI_METRIC_TYPE_IN_PACKETS VirtualMachineInstancesMetricType = 4
	// x-displayName: "Out Packets"
	VMI_METRIC_TYPE_OUT_PACKETS VirtualMachineInstancesMetricType = 5
)

var VirtualMachineInstancesMetricType_name = map[int32]string{
	0: "VMI_METRIC_TYPE_IN_BYTES",
	1: "VMI_METRIC_TYPE_OUT_BYTES",
	2: "VMI_METRIC_TYPE_IN_DROP_PACKETS",
	3: "VMI_METRIC_TYPE_OUT_DROP_PACKETS",
	4: "VMI_METRIC_TYPE_IN_PACKETS",
	5: "VMI_METRIC_TYPE_OUT_PACKETS",
}

var VirtualMachineInstancesMetricType_value = map[string]int32{
	"VMI_METRIC_TYPE_IN_BYTES":         0,
	"VMI_METRIC_TYPE_OUT_BYTES":        1,
	"VMI_METRIC_TYPE_IN_DROP_PACKETS":  2,
	"VMI_METRIC_TYPE_OUT_DROP_PACKETS": 3,
	"VMI_METRIC_TYPE_IN_PACKETS":       4,
	"VMI_METRIC_TYPE_OUT_PACKETS":      5,
}

func (VirtualMachineInstancesMetricType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2be8681db2efece2, []int{0}
}

// VirtualMachineInstance MetricLabel
//
// x-displayName: "VirtualMachineInstance MetricLabel"
// Labels in VirtualMachineInstance metrics
type VirtualMachineInstancesMetricLabel int32

const (
	// x-displayName: "Namespace"
	VMI_NAMESPACE VirtualMachineInstancesMetricLabel = 0
	// x-displayName: "VirtualMachine Instance Name"
	VMI_NAME VirtualMachineInstancesMetricLabel = 1
	// x-displayName: "VirtualMachine Instance Interface Name"
	VMI_IF_NAME VirtualMachineInstancesMetricLabel = 2
	// x-displayName: "VirtualMachine Instance Interface Subnet"
	VMI_IF_SUBNET VirtualMachineInstancesMetricLabel = 3
	// x-displayName: "VLAN ID tagged with the interface"
	VMI_IF_VLAN_ID VirtualMachineInstancesMetricLabel = 4
)

var VirtualMachineInstancesMetricLabel_name = map[int32]string{
	0: "VMI_NAMESPACE",
	1: "VMI_NAME",
	2: "VMI_IF_NAME",
	3: "VMI_IF_SUBNET",
	4: "VMI_IF_VLAN_ID",
}

var VirtualMachineInstancesMetricLabel_value = map[string]int32{
	"VMI_NAMESPACE":  0,
	"VMI_NAME":       1,
	"VMI_IF_NAME":    2,
	"VMI_IF_SUBNET":  3,
	"VMI_IF_VLAN_ID": 4,
}

func (VirtualMachineInstancesMetricLabel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2be8681db2efece2, []int{1}
}

// PodsMetricType
//
// x-displayName: "Pods Metric Type"
// List of metric types for Pods
type PodsMetricType int32

const (
	// x-displayName: "In Bytes"
	POD_METRIC_TYPE_IN_BYTES PodsMetricType = 0
	// x-displayName: "Out Bytes"
	POD_METRIC_TYPE_OUT_BYTES PodsMetricType = 1
	// x-displayName: "In Drop Packets"
	POD_METRIC_TYPE_IN_DROP_PACKETS PodsMetricType = 2
	// x-displayName: "Out Drop Packets"
	POD_METRIC_TYPE_OUT_DROP_PACKETS PodsMetricType = 3
	// x-displayName: "In Packets"
	POD_METRIC_TYPE_IN_PACKETS PodsMetricType = 4
	// x-displayName: "Out Packets"
	POD_METRIC_TYPE_OUT_PACKETS PodsMetricType = 5
)

var PodsMetricType_name = map[int32]string{
	0: "POD_METRIC_TYPE_IN_BYTES",
	1: "POD_METRIC_TYPE_OUT_BYTES",
	2: "POD_METRIC_TYPE_IN_DROP_PACKETS",
	3: "POD_METRIC_TYPE_OUT_DROP_PACKETS",
	4: "POD_METRIC_TYPE_IN_PACKETS",
	5: "POD_METRIC_TYPE_OUT_PACKETS",
}

var PodsMetricType_value = map[string]int32{
	"POD_METRIC_TYPE_IN_BYTES":         0,
	"POD_METRIC_TYPE_OUT_BYTES":        1,
	"POD_METRIC_TYPE_IN_DROP_PACKETS":  2,
	"POD_METRIC_TYPE_OUT_DROP_PACKETS": 3,
	"POD_METRIC_TYPE_IN_PACKETS":       4,
	"POD_METRIC_TYPE_OUT_PACKETS":      5,
}

func (PodsMetricType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2be8681db2efece2, []int{2}
}

// Pods MetricLabel
//
// x-displayName: "Pods MetricLabel"
// Labels in Pods metrics
type PodsMetricLabel int32

const (
	// x-displayName: "Namespace"
	POD_NAMESPACE PodsMetricLabel = 0
	// x-displayName: "Pod Name"
	POD_NAME PodsMetricLabel = 1
	// x-displayName: "Pod Interface Name"
	POD_IF_NAME PodsMetricLabel = 2
	// x-displayName: "Pod Subnet"
	POD_IF_SUBNET PodsMetricLabel = 3
	// x-displayName: "VLAN ID tagged with the interface"
	POD_IF_VLAN_ID PodsMetricLabel = 4
)

var PodsMetricLabel_name = map[int32]string{
	0: "POD_NAMESPACE",
	1: "POD_NAME",
	2: "POD_IF_NAME",
	3: "POD_IF_SUBNET",
	4: "POD_IF_VLAN_ID",
}

var PodsMetricLabel_value = map[string]int32{
	"POD_NAMESPACE":  0,
	"POD_NAME":       1,
	"POD_IF_NAME":    2,
	"POD_IF_SUBNET":  3,
	"POD_IF_VLAN_ID": 4,
}

func (PodsMetricLabel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2be8681db2efece2, []int{3}
}

// NamespaceListRequest
//
// x-displayName: "Namespace List Request"
// Request to get list of namespaces in a site
type NamespaceListRequest struct {
	// site
	//
	// x-displayName: "Site"
	// x-example: "site-1"
	// Site name
	Site string `protobuf:"bytes,1,opt,name=site,proto3" json:"site,omitempty"`
}

func (m *NamespaceListRequest) Reset()      { *m = NamespaceListRequest{} }
func (*NamespaceListRequest) ProtoMessage() {}
func (*NamespaceListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2be8681db2efece2, []int{0}
}
func (m *NamespaceListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NamespaceListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NamespaceListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NamespaceListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NamespaceListRequest.Merge(m, src)
}
func (m *NamespaceListRequest) XXX_Size() int {
	return m.Size()
}
func (m *NamespaceListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NamespaceListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NamespaceListRequest proto.InternalMessageInfo

func (m *NamespaceListRequest) GetSite() string {
	if m != nil {
		return m.Site
	}
	return ""
}

// NodeListRequest
//
// x-displayName: "Namespace List Request"
// Request to get list of nodes in a site
type NodeListRequest struct {
	// site
	//
	// x-displayName: "Site"
	// x-example: "site-1"
	// Site name
	Site string `protobuf:"bytes,1,opt,name=site,proto3" json:"site,omitempty"`
}

func (m *NodeListRequest) Reset()      { *m = NodeListRequest{} }
func (*NodeListRequest) ProtoMessage() {}
func (*NodeListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2be8681db2efece2, []int{1}
}
func (m *NodeListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeListRequest.Merge(m, src)
}
func (m *NodeListRequest) XXX_Size() int {
	return m.Size()
}
func (m *NodeListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NodeListRequest proto.InternalMessageInfo

func (m *NodeListRequest) GetSite() string {
	if m != nil {
		return m.Site
	}
	return ""
}

// PodListRequest
//
// x-displayName: "Pod List Request"
// Request to get list of pods in a namespace
type PodListRequest struct {
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// Namespace to scope the listing of pods in a site
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// site
	//
	// x-displayName: "Site"
	// x-example: "site-1"
	// Site name
	Site string `protobuf:"bytes,2,opt,name=site,proto3" json:"site,omitempty"`
}

func (m *PodListRequest) Reset()      { *m = PodListRequest{} }
func (*PodListRequest) ProtoMessage() {}
func (*PodListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2be8681db2efece2, []int{2}
}
func (m *PodListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PodListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PodListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodListRequest.Merge(m, src)
}
func (m *PodListRequest) XXX_Size() int {
	return m.Size()
}
func (m *PodListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PodListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PodListRequest proto.InternalMessageInfo

func (m *PodListRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *PodListRequest) GetSite() string {
	if m != nil {
		return m.Site
	}
	return ""
}

// PersistentVolumeClaimListRequest
//
// x-displayName: "PersistentVolumeClaim List Request"
// Request to get list of PVCs in a namespace
type PersistentVolumeClaimListRequest struct {
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// Namespace to scope the listing of PVCs in a site
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// site
	//
	// x-displayName: "Site"
	// x-example: "site-1"
	// Site name
	Site string `protobuf:"bytes,2,opt,name=site,proto3" json:"site,omitempty"`
}

func (m *PersistentVolumeClaimListRequest) Reset()      { *m = PersistentVolumeClaimListRequest{} }
func (*PersistentVolumeClaimListRequest) ProtoMessage() {}
func (*PersistentVolumeClaimListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2be8681db2efece2, []int{3}
}
func (m *PersistentVolumeClaimListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PersistentVolumeClaimListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PersistentVolumeClaimListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PersistentVolumeClaimListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PersistentVolumeClaimListRequest.Merge(m, src)
}
func (m *PersistentVolumeClaimListRequest) XXX_Size() int {
	return m.Size()
}
func (m *PersistentVolumeClaimListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PersistentVolumeClaimListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PersistentVolumeClaimListRequest proto.InternalMessageInfo

func (m *PersistentVolumeClaimListRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *PersistentVolumeClaimListRequest) GetSite() string {
	if m != nil {
		return m.Site
	}
	return ""
}

// PersistentVolumeListRequest
//
// x-displayName: "PersistentVolume List Request"
// Request to get list of Persistent Volumes in a site
type PersistentVolumeListRequest struct {
	// site
	//
	// x-displayName: "Site"
	// x-example: "site-1"
	// Site name
	Site string `protobuf:"bytes,2,opt,name=site,proto3" json:"site,omitempty"`
}

func (m *PersistentVolumeListRequest) Reset()      { *m = PersistentVolumeListRequest{} }
func (*PersistentVolumeListRequest) ProtoMessage() {}
func (*PersistentVolumeListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2be8681db2efece2, []int{4}
}
func (m *PersistentVolumeListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PersistentVolumeListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PersistentVolumeListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PersistentVolumeListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PersistentVolumeListRequest.Merge(m, src)
}
func (m *PersistentVolumeListRequest) XXX_Size() int {
	return m.Size()
}
func (m *PersistentVolumeListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PersistentVolumeListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PersistentVolumeListRequest proto.InternalMessageInfo

func (m *PersistentVolumeListRequest) GetSite() string {
	if m != nil {
		return m.Site
	}
	return ""
}

// ServiceListRequest
//
// x-displayName: "Service List Request"
// Request to get list of services in a namespace
type ServiceListRequest struct {
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// Namespace to scope the listing of services in a site
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// site
	//
	// x-displayName: "Site"
	// x-example: "site-1"
	// Site name
	Site string `protobuf:"bytes,2,opt,name=site,proto3" json:"site,omitempty"`
}

func (m *ServiceListRequest) Reset()      { *m = ServiceListRequest{} }
func (*ServiceListRequest) ProtoMessage() {}
func (*ServiceListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2be8681db2efece2, []int{5}
}
func (m *ServiceListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceListRequest.Merge(m, src)
}
func (m *ServiceListRequest) XXX_Size() int {
	return m.Size()
}
func (m *ServiceListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceListRequest proto.InternalMessageInfo

func (m *ServiceListRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ServiceListRequest) GetSite() string {
	if m != nil {
		return m.Site
	}
	return ""
}

// EndpointsListRequest
//
// x-displayName: "Endpoints List Request"
// Request to get list of endpoints in a namespace
type EndpointsListRequest struct {
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// Namespace to scope the listing of endpoints in a site
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// site
	//
	// x-displayName: "Site"
	// x-example: "site-1"
	// Site name
	Site string `protobuf:"bytes,2,opt,name=site,proto3" json:"site,omitempty"`
}

func (m *EndpointsListRequest) Reset()      { *m = EndpointsListRequest{} }
func (*EndpointsListRequest) ProtoMessage() {}
func (*EndpointsListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2be8681db2efece2, []int{6}
}
func (m *EndpointsListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndpointsListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndpointsListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EndpointsListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndpointsListRequest.Merge(m, src)
}
func (m *EndpointsListRequest) XXX_Size() int {
	return m.Size()
}
func (m *EndpointsListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EndpointsListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EndpointsListRequest proto.InternalMessageInfo

func (m *EndpointsListRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *EndpointsListRequest) GetSite() string {
	if m != nil {
		return m.Site
	}
	return ""
}

// ConfigMapListRequest
//
// x-displayName: "ConfigMap List Request"
// Request to get list of configmaps in a namespace
type ConfigMapListRequest struct {
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// Namespace to scope the listing of configmaps in a site
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// site
	//
	// x-displayName: "Site"
	// x-example: "site-1"
	// Site name
	Site string `protobuf:"bytes,2,opt,name=site,proto3" json:"site,omitempty"`
}

func (m *ConfigMapListRequest) Reset()      { *m = ConfigMapListRequest{} }
func (*ConfigMapListRequest) ProtoMessage() {}
func (*ConfigMapListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2be8681db2efece2, []int{7}
}
func (m *ConfigMapListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigMapListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfigMapListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfigMapListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigMapListRequest.Merge(m, src)
}
func (m *ConfigMapListRequest) XXX_Size() int {
	return m.Size()
}
func (m *ConfigMapListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigMapListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigMapListRequest proto.InternalMessageInfo

func (m *ConfigMapListRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ConfigMapListRequest) GetSite() string {
	if m != nil {
		return m.Site
	}
	return ""
}

// SecretListRequest
//
// x-displayName: "Secret List Request"
// Request to get list of secrets in a namespace
type SecretListRequest struct {
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// Namespace to scope the listing of secrets in a site
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// site
	//
	// x-displayName: "Site"
	// x-example: "site-1"
	// Site name
	Site string `protobuf:"bytes,2,opt,name=site,proto3" json:"site,omitempty"`
}

func (m *SecretListRequest) Reset()      { *m = SecretListRequest{} }
func (*SecretListRequest) ProtoMessage() {}
func (*SecretListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2be8681db2efece2, []int{8}
}
func (m *SecretListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecretListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SecretListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SecretListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecretListRequest.Merge(m, src)
}
func (m *SecretListRequest) XXX_Size() int {
	return m.Size()
}
func (m *SecretListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SecretListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SecretListRequest proto.InternalMessageInfo

func (m *SecretListRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *SecretListRequest) GetSite() string {
	if m != nil {
		return m.Site
	}
	return ""
}

// DeploymentListRequest
//
// x-displayName: "Deployment List Request"
// Request to get list of deployments in a namespace
type DeploymentListRequest struct {
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// Namespace to scope the listing of deployments in a site
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// site
	//
	// x-displayName: "Site"
	// x-example: "site-1"
	// Site name
	Site string `protobuf:"bytes,2,opt,name=site,proto3" json:"site,omitempty"`
}

func (m *DeploymentListRequest) Reset()      { *m = DeploymentListRequest{} }
func (*DeploymentListRequest) ProtoMessage() {}
func (*DeploymentListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2be8681db2efece2, []int{9}
}
func (m *DeploymentListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeploymentListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeploymentListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeploymentListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeploymentListRequest.Merge(m, src)
}
func (m *DeploymentListRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeploymentListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeploymentListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeploymentListRequest proto.InternalMessageInfo

func (m *DeploymentListRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *DeploymentListRequest) GetSite() string {
	if m != nil {
		return m.Site
	}
	return ""
}

// DaemonSetListRequest
//
// x-displayName: "DaemonSet List Request"
// Request to get list of daemon sets in a namespace
type DaemonSetListRequest struct {
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// Namespace to scope the listing of daemon sets in a site
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// site
	//
	// x-displayName: "Site"
	// x-example: "site-1"
	// Site name
	Site string `protobuf:"bytes,2,opt,name=site,proto3" json:"site,omitempty"`
}

func (m *DaemonSetListRequest) Reset()      { *m = DaemonSetListRequest{} }
func (*DaemonSetListRequest) ProtoMessage() {}
func (*DaemonSetListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2be8681db2efece2, []int{10}
}
func (m *DaemonSetListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DaemonSetListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DaemonSetListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DaemonSetListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DaemonSetListRequest.Merge(m, src)
}
func (m *DaemonSetListRequest) XXX_Size() int {
	return m.Size()
}
func (m *DaemonSetListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DaemonSetListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DaemonSetListRequest proto.InternalMessageInfo

func (m *DaemonSetListRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *DaemonSetListRequest) GetSite() string {
	if m != nil {
		return m.Site
	}
	return ""
}

// StatefulSetListRequest
//
// x-displayName: "StatefulSet List Request"
// Request to get list of stateful sets in a namespace
type StatefulSetListRequest struct {
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// Namespace to scope the listing of stateful sets in a site
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// site
	//
	// x-displayName: "Site"
	// x-example: "site-1"
	// Site name
	Site string `protobuf:"bytes,2,opt,name=site,proto3" json:"site,omitempty"`
}

func (m *StatefulSetListRequest) Reset()      { *m = StatefulSetListRequest{} }
func (*StatefulSetListRequest) ProtoMessage() {}
func (*StatefulSetListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2be8681db2efece2, []int{11}
}
func (m *StatefulSetListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatefulSetListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatefulSetListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatefulSetListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatefulSetListRequest.Merge(m, src)
}
func (m *StatefulSetListRequest) XXX_Size() int {
	return m.Size()
}
func (m *StatefulSetListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StatefulSetListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StatefulSetListRequest proto.InternalMessageInfo

func (m *StatefulSetListRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *StatefulSetListRequest) GetSite() string {
	if m != nil {
		return m.Site
	}
	return ""
}

// ReplicaSetListRequest
//
// x-displayName: "ReplicaSet List Request"
// Request to get list of replication sets in a namespace
type ReplicaSetListRequest struct {
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// Namespace to scope the listing of replication sets in a site
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// site
	//
	// x-displayName: "Site"
	// x-example: "site-1"
	// Site name
	Site string `protobuf:"bytes,2,opt,name=site,proto3" json:"site,omitempty"`
}

func (m *ReplicaSetListRequest) Reset()      { *m = ReplicaSetListRequest{} }
func (*ReplicaSetListRequest) ProtoMessage() {}
func (*ReplicaSetListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2be8681db2efece2, []int{12}
}
func (m *ReplicaSetListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplicaSetListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplicaSetListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplicaSetListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicaSetListRequest.Merge(m, src)
}
func (m *ReplicaSetListRequest) XXX_Size() int {
	return m.Size()
}
func (m *ReplicaSetListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicaSetListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicaSetListRequest proto.InternalMessageInfo

func (m *ReplicaSetListRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ReplicaSetListRequest) GetSite() string {
	if m != nil {
		return m.Site
	}
	return ""
}

// JobListRequest
//
// x-displayName: "Job List Request"
// Request to get list of jobs in a namespace
type JobListRequest struct {
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// Namespace to scope the listing of jobs in a site
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// site
	//
	// x-displayName: "Site"
	// x-example: "site-1"
	// Site name
	Site string `protobuf:"bytes,2,opt,name=site,proto3" json:"site,omitempty"`
}

func (m *JobListRequest) Reset()      { *m = JobListRequest{} }
func (*JobListRequest) ProtoMessage() {}
func (*JobListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2be8681db2efece2, []int{13}
}
func (m *JobListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobListRequest.Merge(m, src)
}
func (m *JobListRequest) XXX_Size() int {
	return m.Size()
}
func (m *JobListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_JobListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_JobListRequest proto.InternalMessageInfo

func (m *JobListRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *JobListRequest) GetSite() string {
	if m != nil {
		return m.Site
	}
	return ""
}

// CronJobListRequest
//
// x-displayName: "CronJob List Request"
// Request to get list of cronjobs in a namespace
type CronJobListRequest struct {
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// Namespace to scope the listing of cronjobs in a site
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// site
	//
	// x-displayName: "Site"
	// x-example: "site-1"
	// Site name
	Site string `protobuf:"bytes,2,opt,name=site,proto3" json:"site,omitempty"`
}

func (m *CronJobListRequest) Reset()      { *m = CronJobListRequest{} }
func (*CronJobListRequest) ProtoMessage() {}
func (*CronJobListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2be8681db2efece2, []int{14}
}
func (m *CronJobListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CronJobListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CronJobListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CronJobListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CronJobListRequest.Merge(m, src)
}
func (m *CronJobListRequest) XXX_Size() int {
	return m.Size()
}
func (m *CronJobListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CronJobListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CronJobListRequest proto.InternalMessageInfo

func (m *CronJobListRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *CronJobListRequest) GetSite() string {
	if m != nil {
		return m.Site
	}
	return ""
}

// VirtualMachineInstancesMetricsRequest
//
// x-displayName: "Virtual Machine Instances Metrics Request"
// Request to get Virtual Machine Instances Metrics
type VirtualMachineInstancesMetricsRequest struct {
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// Namespace to scope the listing of cronjobs in a site
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// site
	//
	// x-displayName: "Site"
	// x-example: "site-1"
	// Site name
	Site string `protobuf:"bytes,2,opt,name=site,proto3" json:"site,omitempty"`
	// Metric Selector
	//
	// x-displayName: "Metric Selector"
	// x-required
	// Select metrics to be returned in the response.
	MetricSelector []VirtualMachineInstancesMetricType `protobuf:"varint,3,rep,packed,name=metric_selector,json=metricSelector,proto3,enum=ves.io.schema.site.VirtualMachineInstancesMetricType" json:"metric_selector,omitempty"`
	// Start time
	//
	// x-displayName: "Start Time"
	// x-example: "1570194000"
	// Start time of metric data.
	// Format: unix_timestamp|rfc 3339
	//
	// Optional: If not specified, then the start_time will be evaluated to end_time-10m
	//           If end_time is not specified, then the start_time will be evaluated to <current time>-10m
	StartTime string `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// End time
	//
	// x-displayName: "End Time"
	// x-example: "1570197600"
	// End time of metric data.
	// Format: unix_timestamp|rfc 3339
	//
	// Optional: If not specified, then the end_time will be evaluated to start_time+10m
	//           If start_time is not specified, then the end_time will be evaluated to <current time>
	EndTime string `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (m *VirtualMachineInstancesMetricsRequest) Reset()      { *m = VirtualMachineInstancesMetricsRequest{} }
func (*VirtualMachineInstancesMetricsRequest) ProtoMessage() {}
func (*VirtualMachineInstancesMetricsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2be8681db2efece2, []int{15}
}
func (m *VirtualMachineInstancesMetricsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VirtualMachineInstancesMetricsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VirtualMachineInstancesMetricsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VirtualMachineInstancesMetricsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualMachineInstancesMetricsRequest.Merge(m, src)
}
func (m *VirtualMachineInstancesMetricsRequest) XXX_Size() int {
	return m.Size()
}
func (m *VirtualMachineInstancesMetricsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualMachineInstancesMetricsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualMachineInstancesMetricsRequest proto.InternalMessageInfo

func (m *VirtualMachineInstancesMetricsRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *VirtualMachineInstancesMetricsRequest) GetSite() string {
	if m != nil {
		return m.Site
	}
	return ""
}

func (m *VirtualMachineInstancesMetricsRequest) GetMetricSelector() []VirtualMachineInstancesMetricType {
	if m != nil {
		return m.MetricSelector
	}
	return nil
}

func (m *VirtualMachineInstancesMetricsRequest) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *VirtualMachineInstancesMetricsRequest) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

// VirtualMachineInstancesMetricsResponse
//
// x-displayName: "Virtual Machine Instances Metrics Response"
// Virtual Machine Instances Metrics Response
type VirtualMachineInstancesMetricsResponse struct {
	// Data
	//
	// x-displayName: "Data"
	// Data for the metric types specified in the request
	Data []*VirtualMachineInstancesMetricData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (m *VirtualMachineInstancesMetricsResponse) Reset() {
	*m = VirtualMachineInstancesMetricsResponse{}
}
func (*VirtualMachineInstancesMetricsResponse) ProtoMessage() {}
func (*VirtualMachineInstancesMetricsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2be8681db2efece2, []int{16}
}
func (m *VirtualMachineInstancesMetricsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VirtualMachineInstancesMetricsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VirtualMachineInstancesMetricsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VirtualMachineInstancesMetricsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualMachineInstancesMetricsResponse.Merge(m, src)
}
func (m *VirtualMachineInstancesMetricsResponse) XXX_Size() int {
	return m.Size()
}
func (m *VirtualMachineInstancesMetricsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualMachineInstancesMetricsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualMachineInstancesMetricsResponse proto.InternalMessageInfo

func (m *VirtualMachineInstancesMetricsResponse) GetData() []*VirtualMachineInstancesMetricData {
	if m != nil {
		return m.Data
	}
	return nil
}

// VirtualMachineInstancesMetricData
//
// x-displayName: "Virtual Machine Instances Metric Data"
// Virtual Machine Instances Metric Data
type VirtualMachineInstancesMetricData struct {
	// Type
	//
	// x-displayName: "Type"
	// Metric Type
	Type VirtualMachineInstancesMetricType `protobuf:"varint,1,opt,name=type,proto3,enum=ves.io.schema.site.VirtualMachineInstancesMetricType" json:"type,omitempty"`
	// Unit
	//
	// x-displayName: "Unit"
	// Unit for the metric value
	Unit schema.UnitType `protobuf:"varint,3,opt,name=unit,proto3,enum=ves.io.schema.UnitType" json:"unit,omitempty"`
	// Data
	//
	// x-displayName: "Data"
	// List of metric data
	Data []*VirtualMachineInstancesMetricTypeData `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (m *VirtualMachineInstancesMetricData) Reset()      { *m = VirtualMachineInstancesMetricData{} }
func (*VirtualMachineInstancesMetricData) ProtoMessage() {}
func (*VirtualMachineInstancesMetricData) Descriptor() ([]byte, []int) {
	return fileDescriptor_2be8681db2efece2, []int{17}
}
func (m *VirtualMachineInstancesMetricData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VirtualMachineInstancesMetricData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VirtualMachineInstancesMetricData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VirtualMachineInstancesMetricData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualMachineInstancesMetricData.Merge(m, src)
}
func (m *VirtualMachineInstancesMetricData) XXX_Size() int {
	return m.Size()
}
func (m *VirtualMachineInstancesMetricData) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualMachineInstancesMetricData.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualMachineInstancesMetricData proto.InternalMessageInfo

func (m *VirtualMachineInstancesMetricData) GetType() VirtualMachineInstancesMetricType {
	if m != nil {
		return m.Type
	}
	return VMI_METRIC_TYPE_IN_BYTES
}

func (m *VirtualMachineInstancesMetricData) GetUnit() schema.UnitType {
	if m != nil {
		return m.Unit
	}
	return schema.UNIT_MILLISECONDS
}

func (m *VirtualMachineInstancesMetricData) GetData() []*VirtualMachineInstancesMetricTypeData {
	if m != nil {
		return m.Data
	}
	return nil
}

// VirtualMachineInstancesMetricTypeData
//
// x-displayName: "Virtual Machine Instances Metric Type Data"
// Metric Type Data contains labels that uniquely identifies individual entity and its corresponding metric values.
type VirtualMachineInstancesMetricTypeData struct {
	// Labels
	//
	// x-displayName: "Labels"
	// Labels contains the name/value pair that uniquely identifies an entity whose metric is being reported.
	// "name" is the label name defined in "VirtualMachineInstancesMetricLabel"
	Labels map[string]string `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Value
	//
	// x-displayName: "Value"
	// List of metric values. May contain more than one value if timeseries data is requested.
	Values []*schema.MetricValue `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
}

func (m *VirtualMachineInstancesMetricTypeData) Reset()      { *m = VirtualMachineInstancesMetricTypeData{} }
func (*VirtualMachineInstancesMetricTypeData) ProtoMessage() {}
func (*VirtualMachineInstancesMetricTypeData) Descriptor() ([]byte, []int) {
	return fileDescriptor_2be8681db2efece2, []int{18}
}
func (m *VirtualMachineInstancesMetricTypeData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VirtualMachineInstancesMetricTypeData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VirtualMachineInstancesMetricTypeData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VirtualMachineInstancesMetricTypeData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualMachineInstancesMetricTypeData.Merge(m, src)
}
func (m *VirtualMachineInstancesMetricTypeData) XXX_Size() int {
	return m.Size()
}
func (m *VirtualMachineInstancesMetricTypeData) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualMachineInstancesMetricTypeData.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualMachineInstancesMetricTypeData proto.InternalMessageInfo

func (m *VirtualMachineInstancesMetricTypeData) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *VirtualMachineInstancesMetricTypeData) GetValues() []*schema.MetricValue {
	if m != nil {
		return m.Values
	}
	return nil
}

// PodsMetricsRequest
//
// x-displayName: "Pods Metrics Request"
// Request to get Pods Metrics
type PodsMetricsRequest struct {
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// Namespace to scope the listing of cronjobs in a site
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// site
	//
	// x-displayName: "Site"
	// x-example: "site-1"
	// Site name
	Site string `protobuf:"bytes,2,opt,name=site,proto3" json:"site,omitempty"`
	// Metric Selector
	//
	// x-displayName: "Metric Selector"
	// x-required
	// Select metrics to be returned in the response.
	MetricSelector []PodsMetricType `protobuf:"varint,3,rep,packed,name=metric_selector,json=metricSelector,proto3,enum=ves.io.schema.site.PodsMetricType" json:"metric_selector,omitempty"`
	// Start time
	//
	// x-displayName: "Start Time"
	// x-example: "1570194000"
	// Start time of metric data.
	// Format: unix_timestamp|rfc 3339
	//
	// Optional: If not specified, then the start_time will be evaluated to end_time-10m
	//           If end_time is not specified, then the start_time will be evaluated to <current time>-10m
	StartTime string `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// End time
	//
	// x-displayName: "End Time"
	// x-example: "1570197600"
	// End time of metric data.
	// Format: unix_timestamp|rfc 3339
	//
	// Optional: If not specified, then the end_time will be evaluated to start_time+10m
	//           If start_time is not specified, then the end_time will be evaluated to <current time>
	EndTime string `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Filter
	//
	// x-displayName: "Filter"
	// x-example: "namespace=ns1"
	// Filter to filter the metrics by the given label
	Filters string `protobuf:"bytes,6,opt,name=filters,proto3" json:"filters,omitempty"`
	// Group By
	//
	// x-displayName: "Group By"
	// x-example: "name"
	// Group By to group the metrics by the given label
	// "name" is the label name defined in "PodsMetricLabel"
	GroupBy []PodsMetricLabel `protobuf:"varint,7,rep,packed,name=group_by,json=groupBy,proto3,enum=ves.io.schema.site.PodsMetricLabel" json:"group_by,omitempty"`
}

func (m *PodsMetricsRequest) Reset()      { *m = PodsMetricsRequest{} }
func (*PodsMetricsRequest) ProtoMessage() {}
func (*PodsMetricsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2be8681db2efece2, []int{19}
}
func (m *PodsMetricsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodsMetricsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PodsMetricsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PodsMetricsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodsMetricsRequest.Merge(m, src)
}
func (m *PodsMetricsRequest) XXX_Size() int {
	return m.Size()
}
func (m *PodsMetricsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PodsMetricsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PodsMetricsRequest proto.InternalMessageInfo

func (m *PodsMetricsRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *PodsMetricsRequest) GetSite() string {
	if m != nil {
		return m.Site
	}
	return ""
}

func (m *PodsMetricsRequest) GetMetricSelector() []PodsMetricType {
	if m != nil {
		return m.MetricSelector
	}
	return nil
}

func (m *PodsMetricsRequest) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *PodsMetricsRequest) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

func (m *PodsMetricsRequest) GetFilters() string {
	if m != nil {
		return m.Filters
	}
	return ""
}

func (m *PodsMetricsRequest) GetGroupBy() []PodsMetricLabel {
	if m != nil {
		return m.GroupBy
	}
	return nil
}

// PodsMetricsResponse
//
// x-displayName: "Pods Metrics Response"
// Pods Metrics Response
type PodsMetricsResponse struct {
	// Data
	//
	// x-displayName: "Data"
	// Data for the metric types specified in the request
	Data []*PodsMetricData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (m *PodsMetricsResponse) Reset()      { *m = PodsMetricsResponse{} }
func (*PodsMetricsResponse) ProtoMessage() {}
func (*PodsMetricsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2be8681db2efece2, []int{20}
}
func (m *PodsMetricsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodsMetricsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PodsMetricsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PodsMetricsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodsMetricsResponse.Merge(m, src)
}
func (m *PodsMetricsResponse) XXX_Size() int {
	return m.Size()
}
func (m *PodsMetricsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PodsMetricsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PodsMetricsResponse proto.InternalMessageInfo

func (m *PodsMetricsResponse) GetData() []*PodsMetricData {
	if m != nil {
		return m.Data
	}
	return nil
}

// PodsMetricData
//
// x-displayName: "Pods Metric Data"
// Pods Metric Data
type PodsMetricData struct {
	// Type
	//
	// x-displayName: "Type"
	// Metric Type
	Type PodsMetricType `protobuf:"varint,1,opt,name=type,proto3,enum=ves.io.schema.site.PodsMetricType" json:"type,omitempty"`
	// Unit
	//
	// x-displayName: "Unit"
	// Unit for the metric value
	Unit schema.UnitType `protobuf:"varint,3,opt,name=unit,proto3,enum=ves.io.schema.UnitType" json:"unit,omitempty"`
	// Data
	//
	// x-displayName: "Data"
	// List of metric data
	Data []*PodsMetricTypeData `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (m *PodsMetricData) Reset()      { *m = PodsMetricData{} }
func (*PodsMetricData) ProtoMessage() {}
func (*PodsMetricData) Descriptor() ([]byte, []int) {
	return fileDescriptor_2be8681db2efece2, []int{21}
}
func (m *PodsMetricData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodsMetricData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PodsMetricData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PodsMetricData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodsMetricData.Merge(m, src)
}
func (m *PodsMetricData) XXX_Size() int {
	return m.Size()
}
func (m *PodsMetricData) XXX_DiscardUnknown() {
	xxx_messageInfo_PodsMetricData.DiscardUnknown(m)
}

var xxx_messageInfo_PodsMetricData proto.InternalMessageInfo

func (m *PodsMetricData) GetType() PodsMetricType {
	if m != nil {
		return m.Type
	}
	return POD_METRIC_TYPE_IN_BYTES
}

func (m *PodsMetricData) GetUnit() schema.UnitType {
	if m != nil {
		return m.Unit
	}
	return schema.UNIT_MILLISECONDS
}

func (m *PodsMetricData) GetData() []*PodsMetricTypeData {
	if m != nil {
		return m.Data
	}
	return nil
}

// PodsMetricTypeData
//
// x-displayName: "Pods Metric Type Data"
// Metric Type Data contains labels that uniquely identifies individual entity and its corresponding metric values.
type PodsMetricTypeData struct {
	// Labels
	//
	// x-displayName: "Labels"
	// Labels contains the name/value pair that uniquely identifies an entity whose metric is being reported.
	// "name" is the label name defined in "PodsMetricLabel"
	Labels map[string]string `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Value
	//
	// x-displayName: "Value"
	// List of metric values. May contain more than one value if timeseries data is requested.
	Values []*schema.MetricValue `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
}

func (m *PodsMetricTypeData) Reset()      { *m = PodsMetricTypeData{} }
func (*PodsMetricTypeData) ProtoMessage() {}
func (*PodsMetricTypeData) Descriptor() ([]byte, []int) {
	return fileDescriptor_2be8681db2efece2, []int{22}
}
func (m *PodsMetricTypeData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodsMetricTypeData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PodsMetricTypeData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PodsMetricTypeData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodsMetricTypeData.Merge(m, src)
}
func (m *PodsMetricTypeData) XXX_Size() int {
	return m.Size()
}
func (m *PodsMetricTypeData) XXX_DiscardUnknown() {
	xxx_messageInfo_PodsMetricTypeData.DiscardUnknown(m)
}

var xxx_messageInfo_PodsMetricTypeData proto.InternalMessageInfo

func (m *PodsMetricTypeData) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *PodsMetricTypeData) GetValues() []*schema.MetricValue {
	if m != nil {
		return m.Values
	}
	return nil
}

func init() {
	proto.RegisterEnum("ves.io.schema.site.VirtualMachineInstancesMetricType", VirtualMachineInstancesMetricType_name, VirtualMachineInstancesMetricType_value)
	golang_proto.RegisterEnum("ves.io.schema.site.VirtualMachineInstancesMetricType", VirtualMachineInstancesMetricType_name, VirtualMachineInstancesMetricType_value)
	proto.RegisterEnum("ves.io.schema.site.VirtualMachineInstancesMetricLabel", VirtualMachineInstancesMetricLabel_name, VirtualMachineInstancesMetricLabel_value)
	golang_proto.RegisterEnum("ves.io.schema.site.VirtualMachineInstancesMetricLabel", VirtualMachineInstancesMetricLabel_name, VirtualMachineInstancesMetricLabel_value)
	proto.RegisterEnum("ves.io.schema.site.PodsMetricType", PodsMetricType_name, PodsMetricType_value)
	golang_proto.RegisterEnum("ves.io.schema.site.PodsMetricType", PodsMetricType_name, PodsMetricType_value)
	proto.RegisterEnum("ves.io.schema.site.PodsMetricLabel", PodsMetricLabel_name, PodsMetricLabel_value)
	golang_proto.RegisterEnum("ves.io.schema.site.PodsMetricLabel", PodsMetricLabel_name, PodsMetricLabel_value)
	proto.RegisterType((*NamespaceListRequest)(nil), "ves.io.schema.site.NamespaceListRequest")
	golang_proto.RegisterType((*NamespaceListRequest)(nil), "ves.io.schema.site.NamespaceListRequest")
	proto.RegisterType((*NodeListRequest)(nil), "ves.io.schema.site.NodeListRequest")
	golang_proto.RegisterType((*NodeListRequest)(nil), "ves.io.schema.site.NodeListRequest")
	proto.RegisterType((*PodListRequest)(nil), "ves.io.schema.site.PodListRequest")
	golang_proto.RegisterType((*PodListRequest)(nil), "ves.io.schema.site.PodListRequest")
	proto.RegisterType((*PersistentVolumeClaimListRequest)(nil), "ves.io.schema.site.PersistentVolumeClaimListRequest")
	golang_proto.RegisterType((*PersistentVolumeClaimListRequest)(nil), "ves.io.schema.site.PersistentVolumeClaimListRequest")
	proto.RegisterType((*PersistentVolumeListRequest)(nil), "ves.io.schema.site.PersistentVolumeListRequest")
	golang_proto.RegisterType((*PersistentVolumeListRequest)(nil), "ves.io.schema.site.PersistentVolumeListRequest")
	proto.RegisterType((*ServiceListRequest)(nil), "ves.io.schema.site.ServiceListRequest")
	golang_proto.RegisterType((*ServiceListRequest)(nil), "ves.io.schema.site.ServiceListRequest")
	proto.RegisterType((*EndpointsListRequest)(nil), "ves.io.schema.site.EndpointsListRequest")
	golang_proto.RegisterType((*EndpointsListRequest)(nil), "ves.io.schema.site.EndpointsListRequest")
	proto.RegisterType((*ConfigMapListRequest)(nil), "ves.io.schema.site.ConfigMapListRequest")
	golang_proto.RegisterType((*ConfigMapListRequest)(nil), "ves.io.schema.site.ConfigMapListRequest")
	proto.RegisterType((*SecretListRequest)(nil), "ves.io.schema.site.SecretListRequest")
	golang_proto.RegisterType((*SecretListRequest)(nil), "ves.io.schema.site.SecretListRequest")
	proto.RegisterType((*DeploymentListRequest)(nil), "ves.io.schema.site.DeploymentListRequest")
	golang_proto.RegisterType((*DeploymentListRequest)(nil), "ves.io.schema.site.DeploymentListRequest")
	proto.RegisterType((*DaemonSetListRequest)(nil), "ves.io.schema.site.DaemonSetListRequest")
	golang_proto.RegisterType((*DaemonSetListRequest)(nil), "ves.io.schema.site.DaemonSetListRequest")
	proto.RegisterType((*StatefulSetListRequest)(nil), "ves.io.schema.site.StatefulSetListRequest")
	golang_proto.RegisterType((*StatefulSetListRequest)(nil), "ves.io.schema.site.StatefulSetListRequest")
	proto.RegisterType((*ReplicaSetListRequest)(nil), "ves.io.schema.site.ReplicaSetListRequest")
	golang_proto.RegisterType((*ReplicaSetListRequest)(nil), "ves.io.schema.site.ReplicaSetListRequest")
	proto.RegisterType((*JobListRequest)(nil), "ves.io.schema.site.JobListRequest")
	golang_proto.RegisterType((*JobListRequest)(nil), "ves.io.schema.site.JobListRequest")
	proto.RegisterType((*CronJobListRequest)(nil), "ves.io.schema.site.CronJobListRequest")
	golang_proto.RegisterType((*CronJobListRequest)(nil), "ves.io.schema.site.CronJobListRequest")
	proto.RegisterType((*VirtualMachineInstancesMetricsRequest)(nil), "ves.io.schema.site.VirtualMachineInstancesMetricsRequest")
	golang_proto.RegisterType((*VirtualMachineInstancesMetricsRequest)(nil), "ves.io.schema.site.VirtualMachineInstancesMetricsRequest")
	proto.RegisterType((*VirtualMachineInstancesMetricsResponse)(nil), "ves.io.schema.site.VirtualMachineInstancesMetricsResponse")
	golang_proto.RegisterType((*VirtualMachineInstancesMetricsResponse)(nil), "ves.io.schema.site.VirtualMachineInstancesMetricsResponse")
	proto.RegisterType((*VirtualMachineInstancesMetricData)(nil), "ves.io.schema.site.VirtualMachineInstancesMetricData")
	golang_proto.RegisterType((*VirtualMachineInstancesMetricData)(nil), "ves.io.schema.site.VirtualMachineInstancesMetricData")
	proto.RegisterType((*VirtualMachineInstancesMetricTypeData)(nil), "ves.io.schema.site.VirtualMachineInstancesMetricTypeData")
	golang_proto.RegisterType((*VirtualMachineInstancesMetricTypeData)(nil), "ves.io.schema.site.VirtualMachineInstancesMetricTypeData")
	proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.site.VirtualMachineInstancesMetricTypeData.LabelsEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.site.VirtualMachineInstancesMetricTypeData.LabelsEntry")
	proto.RegisterType((*PodsMetricsRequest)(nil), "ves.io.schema.site.PodsMetricsRequest")
	golang_proto.RegisterType((*PodsMetricsRequest)(nil), "ves.io.schema.site.PodsMetricsRequest")
	proto.RegisterType((*PodsMetricsResponse)(nil), "ves.io.schema.site.PodsMetricsResponse")
	golang_proto.RegisterType((*PodsMetricsResponse)(nil), "ves.io.schema.site.PodsMetricsResponse")
	proto.RegisterType((*PodsMetricData)(nil), "ves.io.schema.site.PodsMetricData")
	golang_proto.RegisterType((*PodsMetricData)(nil), "ves.io.schema.site.PodsMetricData")
	proto.RegisterType((*PodsMetricTypeData)(nil), "ves.io.schema.site.PodsMetricTypeData")
	golang_proto.RegisterType((*PodsMetricTypeData)(nil), "ves.io.schema.site.PodsMetricTypeData")
	proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.site.PodsMetricTypeData.LabelsEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.site.PodsMetricTypeData.LabelsEntry")
}

func init() {
	proto.RegisterFile("ves.io/schema/site/public_custom_data_k8s_api.proto", fileDescriptor_2be8681db2efece2)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/site/public_custom_data_k8s_api.proto", fileDescriptor_2be8681db2efece2)
}

var fileDescriptor_2be8681db2efece2 = []byte{
	// 2544 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x9b, 0x5f, 0x8c, 0x1b, 0x47,
	0x1d, 0xc7, 0x6f, 0x6c, 0x5f, 0x2e, 0x9d, 0x23, 0x97, 0xeb, 0x10, 0xc0, 0x71, 0x82, 0x73, 0xdd,
	0x90, 0xf6, 0x72, 0xad, 0xed, 0xdc, 0x35, 0x09, 0x97, 0x48, 0x6d, 0xb9, 0x3f, 0x0e, 0xb9, 0x24,
	0xf6, 0xb9, 0xb6, 0xef, 0xd2, 0x38, 0x09, 0x66, 0x6d, 0xcf, 0x39, 0x9b, 0xb3, 0x77, 0x96, 0x9d,
	0xb5, 0xc9, 0x25, 0x8d, 0xda, 0x26, 0x94, 0xaa, 0x02, 0xa4, 0x8a, 0x20, 0x85, 0x82, 0x04, 0x42,
	0x88, 0x8a, 0x97, 0x3c, 0x54, 0xbc, 0x20, 0x2a, 0xa4, 0x48, 0x08, 0x35, 0x02, 0xa9, 0x84, 0xf0,
	0x12, 0x78, 0x22, 0x17, 0x1e, 0xa0, 0x80, 0x94, 0x97, 0x3c, 0xf0, 0x82, 0xd0, 0xce, 0xee, 0xda,
	0xbb, 0xbe, 0xb9, 0xf3, 0x7a, 0x6d, 0x0e, 0x5e, 0x4e, 0xf6, 0xce, 0x6f, 0xbe, 0xbf, 0x99, 0xdf,
	0x7c, 0x66, 0x7f, 0x9e, 0x3f, 0x07, 0x9f, 0xaf, 0x63, 0x1a, 0x95, 0x48, 0x8c, 0x16, 0x2f, 0xe0,
	0xaa, 0x18, 0xa3, 0x92, 0x86, 0x63, 0x4a, 0xad, 0x50, 0x91, 0x8a, 0xf9, 0x62, 0x8d, 0x6a, 0xa4,
	0x9a, 0x2f, 0x89, 0x9a, 0x98, 0x5f, 0x9e, 0xa4, 0x79, 0x51, 0x91, 0xa2, 0x8a, 0x4a, 0x34, 0x82,
	0x90, 0x51, 0x29, 0x6a, 0x54, 0x8a, 0xea, 0x95, 0x42, 0x91, 0xb2, 0xa4, 0x5d, 0xa8, 0x15, 0xa2,
	0x45, 0x52, 0x8d, 0x95, 0x49, 0x99, 0xc4, 0x98, 0x69, 0xa1, 0xb6, 0xc4, 0xbe, 0xb1, 0x2f, 0xec,
	0x93, 0x21, 0x11, 0xda, 0x5d, 0x26, 0xa4, 0x5c, 0xc1, 0x31, 0x51, 0x91, 0x62, 0xa2, 0x2c, 0x13,
	0x4d, 0xd4, 0x24, 0x22, 0x53, 0xb3, 0x54, 0x58, 0x9e, 0x64, 0xad, 0x62, 0xa5, 0x8a, 0x42, 0x63,
	0xf5, 0xf1, 0x58, 0x19, 0xcb, 0x58, 0x15, 0x35, 0x5c, 0x32, 0x6d, 0xf6, 0xda, 0x6c, 0x0a, 0xa2,
	0x56, 0xbc, 0xc0, 0x33, 0x1a, 0xe5, 0x18, 0x15, 0xb0, 0x26, 0xae, 0xb5, 0xb4, 0xbb, 0x2c, 0x12,
	0x15, 0xf3, 0xd4, 0x76, 0x39, 0x83, 0x45, 0x14, 0x7b, 0x9b, 0x77, 0x3a, 0x0b, 0xb5, 0x15, 0x05,
	0x5b, 0x45, 0xbb, 0x9d, 0x45, 0x75, 0xb1, 0x22, 0x95, 0x44, 0x0d, 0x5b, 0x9e, 0x5b, 0x4a, 0x31,
	0xc5, 0x72, 0xbd, 0x45, 0x7c, 0xa4, 0xc5, 0x46, 0xc2, 0x5f, 0xcd, 0x3b, 0x2c, 0x84, 0x31, 0xb8,
	0x23, 0x29, 0x56, 0x31, 0x55, 0xc4, 0x22, 0x3e, 0x25, 0x51, 0x2d, 0x8d, 0xbf, 0x52, 0xc3, 0x54,
	0x43, 0x08, 0x06, 0xf4, 0xf1, 0x09, 0x82, 0x11, 0x30, 0xfa, 0x44, 0x9a, 0x7d, 0x16, 0xf6, 0xc1,
	0xed, 0x49, 0x52, 0x6a, 0x6b, 0x36, 0x0d, 0x87, 0x52, 0xa4, 0x64, 0xb7, 0xda, 0x0d, 0x9f, 0x90,
	0x2d, 0x27, 0xa6, 0x69, 0xf3, 0x41, 0x43, 0xc3, 0x67, 0xd3, 0xc8, 0xc2, 0x91, 0x14, 0x56, 0xa9,
	0x44, 0x35, 0x2c, 0x6b, 0x8b, 0xa4, 0x52, 0xab, 0xe2, 0x99, 0x8a, 0x28, 0x55, 0xbb, 0x53, 0x1d,
	0x87, 0xbb, 0x5a, 0x55, 0x79, 0x9d, 0xb1, 0x57, 0x39, 0x06, 0x51, 0x06, 0xab, 0x75, 0xc9, 0x19,
	0x9d, 0xce, 0x5d, 0x1f, 0x87, 0x3b, 0xe2, 0x72, 0x49, 0x21, 0x92, 0xac, 0xd1, 0xae, 0x95, 0x66,
	0x88, 0xbc, 0x24, 0x95, 0x13, 0xa2, 0xd2, 0x9d, 0x52, 0x1c, 0x3e, 0x99, 0xc1, 0x45, 0x15, 0x6b,
	0xdd, 0xc9, 0xcc, 0xc1, 0x4f, 0xcd, 0x62, 0xa5, 0x42, 0x56, 0xaa, 0x58, 0xd6, 0xba, 0xee, 0xdb,
	0xac, 0x88, 0xab, 0x44, 0xce, 0x74, 0xdb, 0xa8, 0x13, 0xf0, 0xd3, 0x19, 0x4d, 0xd4, 0xf0, 0x52,
	0xad, 0x92, 0xe9, 0x41, 0x07, 0xd3, 0x58, 0xa9, 0x48, 0x45, 0xb1, 0x6b, 0xa9, 0x69, 0x38, 0x74,
	0x82, 0x14, 0xba, 0xd3, 0x38, 0x06, 0xd1, 0x8c, 0x4a, 0xe4, 0xae, 0x75, 0x6e, 0xfa, 0xe0, 0xbe,
	0x45, 0x49, 0xd5, 0x6a, 0x62, 0x25, 0x21, 0x16, 0x2f, 0x48, 0x32, 0x9e, 0x93, 0xa9, 0x26, 0xca,
	0x45, 0x4c, 0x13, 0x58, 0x53, 0xa5, 0x22, 0xf5, 0xac, 0x8d, 0x2e, 0xc2, 0xed, 0x55, 0xa6, 0x91,
	0xa7, 0xb8, 0x82, 0x8b, 0x1a, 0x51, 0x83, 0xfe, 0x11, 0xff, 0xe8, 0xd0, 0xc4, 0xa1, 0xe8, 0xda,
	0x24, 0x10, 0xdd, 0xb0, 0x15, 0xd9, 0x15, 0x05, 0x4f, 0xc3, 0x5f, 0xfc, 0xed, 0xb6, 0xbf, 0xff,
	0xdb, 0xc0, 0x17, 0x04, 0xe9, 0x21, 0x43, 0x39, 0x63, 0x0a, 0xa3, 0xfd, 0x10, 0x52, 0x4d, 0x54,
	0xb5, 0xbc, 0x26, 0x55, 0x71, 0x30, 0xa0, 0xb7, 0xc2, 0xb4, 0x57, 0xfd, 0xdf, 0x0d, 0x80, 0xf4,
	0x13, 0xac, 0x34, 0x2b, 0x55, 0x31, 0xda, 0x07, 0xb7, 0x62, 0xb9, 0x64, 0x18, 0xf6, 0xaf, 0x31,
	0x1c, 0xc0, 0x72, 0x49, 0x37, 0x13, 0x28, 0x7c, 0xba, 0x5d, 0x60, 0xa8, 0x42, 0x64, 0x8a, 0xd1,
	0x1c, 0x0c, 0xe8, 0x89, 0x2e, 0x08, 0x46, 0xfc, 0xa3, 0x83, 0x1e, 0x3a, 0x37, 0x2b, 0x6a, 0x62,
	0x9a, 0x49, 0x08, 0x1f, 0x03, 0xf8, 0x54, 0x5b, 0x5b, 0xdd, 0xa1, 0x9e, 0x22, 0xd8, 0x28, 0x78,
	0x8d, 0x66, 0x9a, 0x49, 0xa0, 0x67, 0x61, 0xa0, 0x26, 0x4b, 0x5a, 0xd0, 0xcf, 0xa4, 0x3e, 0xd3,
	0x22, 0xb5, 0x20, 0x4b, 0x9a, 0x61, 0xac, 0x1b, 0xa1, 0x84, 0xd9, 0x51, 0x1f, 0xeb, 0xe8, 0x11,
	0x4f, 0x7e, 0x6d, 0x9d, 0x7d, 0x0c, 0xda, 0xb0, 0x67, 0xd9, 0xa3, 0xf3, 0x70, 0x4b, 0x45, 0x2c,
	0xe0, 0x0a, 0x35, 0x63, 0x1c, 0xf7, 0xec, 0x3a, 0x7a, 0x8a, 0xe9, 0xc4, 0x65, 0x4d, 0x5d, 0x49,
	0x9b, 0xa2, 0x68, 0x02, 0x6e, 0xa9, 0x8b, 0x95, 0x1a, 0xa6, 0x66, 0xcf, 0x42, 0x2d, 0xf2, 0x86,
	0xc4, 0xa2, 0x6e, 0x92, 0x36, 0x2d, 0x43, 0x47, 0xe0, 0xa0, 0x4d, 0x0a, 0x0d, 0x43, 0xff, 0x32,
	0x5e, 0x31, 0xe7, 0x85, 0xfe, 0x11, 0xed, 0x80, 0xfd, 0xcc, 0xd4, 0x9c, 0x12, 0xc6, 0x97, 0xa3,
	0xbe, 0x49, 0x20, 0xfc, 0xd6, 0x07, 0x51, 0x8a, 0x94, 0xba, 0x9f, 0x60, 0xa7, 0xd7, 0x9b, 0x60,
	0x02, 0x2f, 0x3e, 0x4d, 0x97, 0x9b, 0x3f, 0x9b, 0x50, 0x10, 0x0e, 0x2c, 0x49, 0x15, 0x0d, 0xab,
	0x34, 0xb8, 0x85, 0xf5, 0xc0, 0xfa, 0x8a, 0x5e, 0x84, 0x5b, 0xcb, 0x2a, 0xa9, 0x29, 0xf9, 0xc2,
	0x4a, 0x70, 0x80, 0xb5, 0x7e, 0xef, 0xc6, 0xad, 0x67, 0x61, 0x4f, 0x0f, 0xb0, 0x4a, 0xd3, 0x2b,
	0x42, 0x02, 0x7e, 0xd2, 0x11, 0x4c, 0x73, 0x52, 0x1e, 0x76, 0x4c, 0xca, 0x36, 0x01, 0xb1, 0x41,
	0xf9, 0x3e, 0x60, 0xbf, 0x5c, 0xec, 0xd3, 0xed, 0xb0, 0x63, 0xba, 0xb9, 0x88, 0xad, 0x97, 0xb9,
	0x75, 0xd4, 0x31, 0xb7, 0x9e, 0x6e, 0xef, 0xc4, 0xd6, 0xe6, 0xdf, 0x01, 0x3b, 0x50, 0x8d, 0x59,
	0x73, 0xa2, 0x65, 0xd6, 0x4c, 0xb8, 0x13, 0xfd, 0x3f, 0x98, 0x22, 0x63, 0xff, 0x68, 0xf7, 0x1e,
	0xd4, 0x1b, 0x8b, 0x76, 0xc3, 0xe0, 0x62, 0x62, 0x2e, 0x9f, 0x88, 0x67, 0xd3, 0x73, 0x33, 0xf9,
	0xec, 0x99, 0x54, 0x3c, 0x3f, 0x97, 0xcc, 0x4f, 0x9f, 0xc9, 0xc6, 0x33, 0xc3, 0x7d, 0xe8, 0xb3,
	0x70, 0x67, 0x6b, 0xe9, 0xfc, 0x42, 0xd6, 0x2c, 0x06, 0x68, 0x2f, 0xdc, 0xc3, 0xa9, 0x3c, 0x9b,
	0x9e, 0x4f, 0xe5, 0x53, 0x53, 0x33, 0x27, 0xe3, 0xd9, 0xcc, 0xb0, 0x0f, 0x7d, 0x0e, 0x8e, 0xf0,
	0x34, 0x1c, 0x56, 0x7e, 0x14, 0x86, 0x21, 0x8e, 0x94, 0x55, 0x1e, 0x40, 0x7b, 0xe0, 0x2e, 0x9e,
	0x8a, 0x65, 0xd0, 0x3f, 0x76, 0x15, 0x0a, 0x1b, 0xf6, 0x96, 0x85, 0x11, 0x3d, 0x09, 0xb7, 0xe9,
	0x32, 0xc9, 0xa9, 0x44, 0x3c, 0x93, 0x9a, 0x9a, 0x89, 0x0f, 0xf7, 0xa1, 0x4f, 0xc0, 0xad, 0xd6,
	0xa3, 0x61, 0x80, 0xb6, 0xc3, 0x41, 0xfd, 0xdb, 0xdc, 0x31, 0xe3, 0x81, 0xcf, 0xaa, 0x31, 0x77,
	0x2c, 0x9f, 0x59, 0x98, 0x4e, 0xc6, 0xb3, 0xc3, 0x7e, 0x84, 0xe0, 0x90, 0xf9, 0x68, 0xf1, 0xd4,
	0x54, 0x32, 0x3f, 0x37, 0x3b, 0x1c, 0x18, 0xfb, 0xa3, 0x83, 0x79, 0x2b, 0xb4, 0xa9, 0xf9, 0xd9,
	0x0d, 0x42, 0xdb, 0x5a, 0xda, 0x12, 0x5a, 0x4e, 0xe5, 0xb5, 0xa1, 0xe5, 0x69, 0xac, 0x0d, 0x2d,
	0x47, 0xca, 0x11, 0x5a, 0x9e, 0x4a, 0x33, 0xb4, 0x17, 0xe1, 0xf6, 0x96, 0x57, 0x87, 0x1e, 0x15,
	0xbd, 0x4e, 0x4b, 0x1c, 0xad, 0x47, 0x46, 0x1c, 0xf5, 0x6f, 0x8e, 0x38, 0x9a, 0x0f, 0xec, 0x71,
	0x34, 0x1f, 0x35, 0xe2, 0x38, 0xf1, 0x93, 0x38, 0x1c, 0x9e, 0x61, 0x2b, 0x5f, 0x7d, 0x1e, 0x9d,
	0x9c, 0xcc, 0x4c, 0xa5, 0xe6, 0xd0, 0xef, 0x01, 0xdc, 0xe6, 0x58, 0x5d, 0xa1, 0x51, 0xde, 0x3c,
	0xe4, 0x2d, 0xc0, 0x42, 0x4f, 0x45, 0x8d, 0x95, 0x65, 0x54, 0x5f, 0x3f, 0xeb, 0x2b, 0xcb, 0x68,
	0x7d, 0xdc, 0x69, 0x29, 0xd0, 0x3b, 0x3f, 0xf7, 0x81, 0xd5, 0x0f, 0x83, 0xcf, 0x2d, 0x1d, 0xba,
	0x54, 0x8c, 0xe8, 0x0b, 0x5e, 0x4d, 0x2c, 0x2e, 0x47, 0x0a, 0x22, 0x95, 0x8a, 0x91, 0x2a, 0x91,
	0x25, 0x8d, 0xa8, 0xcf, 0xe9, 0x4b, 0xc0, 0x88, 0x44, 0x22, 0xcb, 0x93, 0x34, 0xa2, 0x62, 0xb1,
	0x74, 0xed, 0x0f, 0x7f, 0xb9, 0xe1, 0x3b, 0x82, 0x3e, 0x6f, 0x2e, 0xd7, 0x63, 0x8d, 0x34, 0x43,
	0x63, 0x74, 0x85, 0x6a, 0xb8, 0x6a, 0x2c, 0xe6, 0xaf, 0xe8, 0x7f, 0xaf, 0xb2, 0x65, 0x6d, 0x7d,
	0xdc, 0x66, 0x84, 0x7e, 0x09, 0xe0, 0x56, 0x6b, 0x15, 0x88, 0xb8, 0xaf, 0xeb, 0x96, 0x35, 0x62,
	0x68, 0x37, 0xb7, 0x27, 0xa6, 0x91, 0x20, 0x7b, 0xee, 0xc4, 0x41, 0x34, 0xd1, 0x59, 0x27, 0x48,
	0x09, 0x53, 0xf4, 0x7a, 0x00, 0x0e, 0x98, 0xcb, 0x53, 0xb4, 0xde, 0xfb, 0xdc, 0xde, 0xfa, 0x5d,
	0xbc, 0xd6, 0x9b, 0x36, 0xc2, 0xcf, 0xfc, 0x5e, 0x5a, 0xff, 0xf1, 0x87, 0xc1, 0xc7, 0x00, 0x3e,
	0x6b, 0x3e, 0x35, 0x7c, 0x47, 0x74, 0xdf, 0x11, 0x63, 0xef, 0x44, 0x7f, 0xb1, 0x2f, 0x4f, 0x52,
	0x51, 0x91, 0x22, 0x0a, 0x29, 0x55, 0xf4, 0x96, 0x26, 0xa1, 0xbf, 0x8c, 0x35, 0xf4, 0xc5, 0x36,
	0x1d, 0x1e, 0x3d, 0x2b, 0x46, 0x2e, 0x9f, 0x1f, 0x3d, 0x1b, 0x11, 0x23, 0x97, 0x0f, 0x44, 0x8e,
	0x9c, 0x1f, 0x3b, 0x6b, 0x7e, 0xd8, 0xff, 0xd2, 0x7e, 0x2b, 0x0c, 0x0a, 0x29, 0x51, 0x54, 0x37,
	0xf4, 0x48, 0x0f, 0xf4, 0x6c, 0x55, 0x37, 0x34, 0xd7, 0xfd, 0xb2, 0x71, 0x7b, 0x0d, 0x8d, 0x77,
	0x34, 0x6e, 0x7a, 0xc5, 0xdc, 0x09, 0x74, 0xdc, 0x23, 0xb1, 0xb1, 0x2b, 0x8d, 0xcf, 0x57, 0x8d,
	0xce, 0xdf, 0xe8, 0x87, 0x3b, 0xd7, 0xdd, 0x5d, 0x40, 0x07, 0xb9, 0x50, 0xb4, 0xd9, 0x8c, 0x08,
	0x45, 0xb8, 0x98, 0xac, 0x57, 0x4b, 0x78, 0x27, 0xe0, 0x11, 0x9c, 0x5b, 0x3e, 0xf8, 0x82, 0x2b,
	0x70, 0x1a, 0xae, 0xeb, 0xcc, 0x75, 0x51, 0x77, 0xcd, 0x50, 0xfa, 0xb2, 0x31, 0xf4, 0x67, 0x7a,
	0x81, 0x12, 0xcf, 0x09, 0x45, 0x6f, 0x03, 0xc3, 0xc5, 0x1b, 0x60, 0x33, 0xf1, 0xe2, 0xb6, 0x85,
	0x01, 0xf7, 0x63, 0x80, 0x66, 0x3a, 0x23, 0x8e, 0xab, 0x95, 0x3b, 0x87, 0x72, 0x3d, 0x61, 0x90,
	0x1f, 0xb5, 0x7f, 0x02, 0xb8, 0x83, 0xb7, 0x3b, 0x85, 0x62, 0x6e, 0x80, 0xb4, 0xb3, 0x38, 0xea,
	0x86, 0x45, 0x86, 0xe1, 0x65, 0xcf, 0x2f, 0xdf, 0x2f, 0xa0, 0x17, 0xbb, 0x0a, 0x29, 0x45, 0x3f,
	0x0a, 0xc0, 0x41, 0xdb, 0xd6, 0x1a, 0xe2, 0xfe, 0xee, 0x5d, 0xbb, 0xf7, 0x16, 0xda, 0xc3, 0xeb,
	0x9d, 0xcd, 0x4e, 0xb8, 0xe3, 0xf5, 0xa5, 0xfc, 0x86, 0x0f, 0xc6, 0xdc, 0xcc, 0x2d, 0x6a, 0x38,
	0x63, 0xb3, 0x29, 0x6d, 0xa0, 0x7e, 0xb2, 0x07, 0xa4, 0x9b, 0xb2, 0x14, 0x5d, 0x36, 0x34, 0xe9,
	0x26, 0xce, 0x1e, 0xcb, 0x37, 0x1b, 0xdb, 0xb7, 0x00, 0x3a, 0xd4, 0xd1, 0xe0, 0x5a, 0xb5, 0x73,
	0x49, 0x74, 0xaa, 0x17, 0x33, 0xa4, 0x11, 0x89, 0x5b, 0x01, 0xb8, 0xcd, 0xb1, 0x6d, 0xca, 0xff,
	0x01, 0xc5, 0xdb, 0x59, 0xe5, 0xff, 0x80, 0x72, 0x58, 0x0a, 0x1f, 0x79, 0x25, 0xe5, 0x4d, 0x1f,
	0x1c, 0x77, 0x43, 0x0a, 0xb6, 0xdc, 0x31, 0x56, 0x32, 0xc6, 0xb8, 0x9e, 0xea, 0xc1, 0xb8, 0x36,
	0x84, 0xd1, 0x15, 0x43, 0x54, 0xdb, 0x44, 0x58, 0x1a, 0xce, 0x19, 0x2d, 0x6f, 0x03, 0x74, 0xb8,
	0xa3, 0x41, 0x6f, 0x54, 0xcf, 0xcd, 0xa3, 0x44, 0x2f, 0x70, 0x69, 0x06, 0xe3, 0xfd, 0x00, 0xdc,
	0xe6, 0xd8, 0x1c, 0xe7, 0xf3, 0xc2, 0xdb, 0x3f, 0xe7, 0xf3, 0xe2, 0xb0, 0x14, 0xee, 0x79, 0xe5,
	0xe5, 0x2d, 0x97, 0xbc, 0x14, 0x99, 0xbb, 0xaa, 0xa8, 0x30, 0x5e, 0xb2, 0xc6, 0xd0, 0x26, 0x7a,
	0x30, 0xb4, 0x0d, 0x61, 0x8a, 0x5e, 0x35, 0x54, 0x6b, 0x9b, 0x08, 0x4c, 0xd3, 0x3b, 0x23, 0xe6,
	0x1b, 0xa0, 0xc3, 0xe5, 0x47, 0xb3, 0x7e, 0x2e, 0x85, 0x92, 0xbd, 0x40, 0xc6, 0x16, 0x8f, 0x77,
	0x03, 0x10, 0x36, 0x8f, 0x41, 0xd0, 0x3e, 0x7e, 0x1a, 0x6a, 0x39, 0x26, 0x09, 0x85, 0xf9, 0x59,
	0xc8, 0x32, 0x13, 0x7e, 0xe5, 0x15, 0x95, 0x7f, 0x03, 0x18, 0x75, 0x97, 0x84, 0x74, 0x5f, 0x8c,
	0x93, 0x97, 0x8d, 0x11, 0x3d, 0xd1, 0x93, 0x1c, 0xa4, 0xab, 0x52, 0xb4, 0x62, 0x48, 0xaa, 0x9b,
	0x9a, 0x82, 0x98, 0x6b, 0x46, 0xc8, 0x9b, 0x00, 0x1d, 0xec, 0x30, 0x03, 0xb1, 0xca, 0xb9, 0x44,
	0xdb, 0x4c, 0xec, 0x32, 0x01, 0x19, 0x61, 0xb8, 0x17, 0x80, 0x43, 0xce, 0xb3, 0x2d, 0xb4, 0x9f,
	0xc7, 0x07, 0xf7, 0xfc, 0x2b, 0x24, 0xd8, 0x19, 0xd1, 0x09, 0xd0, 0x19, 0x71, 0x9a, 0x0a, 0x8f,
	0xbc, 0x72, 0x72, 0xd3, 0x07, 0x27, 0xdc, 0x70, 0x52, 0x6a, 0xf8, 0x63, 0xac, 0x9c, 0x35, 0x06,
	0x36, 0xdb, 0xe5, 0xc0, 0xd2, 0xc6, 0xf9, 0x7a, 0x53, 0x9f, 0xa2, 0xeb, 0xe6, 0x0f, 0xff, 0x57,
	0x7b, 0xa6, 0xee, 0x16, 0x1e, 0x5b, 0x2b, 0x18, 0x40, 0xef, 0x82, 0x0e, 0x7e, 0x9f, 0x72, 0x3b,
	0x93, 0x3b, 0x8d, 0x16, 0x3c, 0x28, 0xac, 0x03, 0x94, 0x3d, 0x4a, 0xbf, 0x09, 0xc0, 0x6d, 0x8e,
	0x53, 0x4e, 0x7e, 0x92, 0xe2, 0x1d, 0x84, 0x3a, 0x93, 0x54, 0x03, 0x29, 0xbb, 0xa5, 0xf0, 0x77,
	0xaf, 0x44, 0x7d, 0xc7, 0x65, 0x92, 0x2a, 0x31, 0x77, 0xd4, 0x7c, 0xf9, 0xe4, 0x8c, 0x21, 0xcf,
	0xf4, 0x0e, 0x28, 0x4b, 0x9e, 0xa2, 0x6b, 0x26, 0x4f, 0x57, 0x36, 0x9f, 0xa7, 0x46, 0x23, 0x18,
	0x4e, 0x37, 0x01, 0x7a, 0xc1, 0x0b, 0x4e, 0x0d, 0x95, 0xdc, 0x62, 0xdb, 0x29, 0xd7, 0x09, 0x4d,
	0xcd, 0x10, 0xfd, 0x29, 0x00, 0xb7, 0xb7, 0x1c, 0x74, 0xa3, 0x31, 0x6e, 0x0a, 0xe3, 0x9e, 0x86,
	0x87, 0xf6, 0xf2, 0x80, 0x6a, 0xb1, 0x15, 0x1e, 0x7b, 0x45, 0xea, 0x7b, 0x3e, 0x76, 0x53, 0xa8,
	0x7d, 0x32, 0x33, 0x1d, 0x5a, 0x50, 0x9d, 0x33, 0xc6, 0x7d, 0xa1, 0x67, 0xe3, 0x6e, 0x73, 0x40,
	0xd1, 0xd7, 0x4c, 0xac, 0xae, 0x6e, 0x3a, 0x56, 0xf6, 0x66, 0x30, 0xb0, 0xbe, 0x0f, 0xd0, 0x4b,
	0x1e, 0xb8, 0xb0, 0xeb, 0xe4, 0x5e, 0x41, 0x8b, 0xbd, 0x43, 0xcb, 0x11, 0x28, 0x3d, 0xfd, 0x39,
	0x6f, 0x3e, 0xf0, 0xd3, 0x1f, 0xf7, 0x76, 0x04, 0x3f, 0xfd, 0x39, 0x4d, 0xff, 0xfb, 0xe9, 0x4f,
	0x35, 0xfc, 0x59, 0x60, 0xf5, 0x3c, 0xfd, 0x35, 0xf5, 0xff, 0x97, 0xe9, 0xcf, 0xd6, 0x8a, 0x6e,
	0xd2, 0x9f, 0x4d, 0xa6, 0xb7, 0xe9, 0xcf, 0x1e, 0xa5, 0x1f, 0x04, 0xe0, 0x80, 0x79, 0x77, 0x85,
	0xbf, 0x01, 0xef, 0xbc, 0xd8, 0xe2, 0x3c, 0x3e, 0x60, 0x97, 0xf1, 0x74, 0x8e, 0x4c, 0x23, 0xe1,
	0xae, 0x57, 0x80, 0xae, 0xfb, 0xdc, 0xed, 0xc0, 0x5f, 0x24, 0x05, 0x46, 0xce, 0x82, 0x31, 0xb6,
	0xc9, 0xae, 0xc7, 0xb6, 0x71, 0xe9, 0xf0, 0x22, 0x29, 0x50, 0x74, 0xd5, 0x90, 0xad, 0xf7, 0x4e,
	0xd6, 0x2d, 0x33, 0xba, 0x7b, 0x06, 0xcb, 0xb7, 0x00, 0x9a, 0xec, 0x60, 0xa8, 0x1d, 0xed, 0xcf,
	0xbd, 0x8c, 0xe6, 0xbd, 0xd4, 0x5d, 0x87, 0x13, 0x16, 0x92, 0xfb, 0x01, 0x38, 0x68, 0xbb, 0xe0,
	0xc4, 0xdf, 0x18, 0x5c, 0x7b, 0x03, 0x2a, 0xb4, 0x8f, 0x07, 0x0a, 0xbb, 0xb5, 0x69, 0xb7, 0x16,
	0xfe, 0xd5, 0x45, 0x32, 0x73, 0xb5, 0x3d, 0x58, 0x54, 0x89, 0x6c, 0x51, 0xf3, 0x25, 0x63, 0x78,
	0x4f, 0xf7, 0x6c, 0x78, 0x8d, 0x5b, 0xa8, 0xa6, 0x0b, 0x8a, 0xbe, 0x6e, 0xbe, 0x72, 0x5e, 0xeb,
	0xb1, 0x03, 0xd7, 0x2b, 0x7b, 0xb3, 0x21, 0x0c, 0xa4, 0x1f, 0x02, 0x34, 0xe5, 0x01, 0x06, 0x67,
	0x97, 0x72, 0x39, 0xf4, 0x8a, 0x67, 0x91, 0xf5, 0x56, 0xfb, 0x56, 0xb8, 0x6e, 0xf5, 0xc3, 0xf0,
	0xc6, 0x37, 0xbb, 0x50, 0xe7, 0x57, 0x9b, 0xac, 0x5b, 0x3c, 0xa1, 0xa3, 0x5e, 0xaa, 0x1a, 0x77,
	0x56, 0x84, 0x1b, 0x5e, 0x0f, 0x84, 0xde, 0xf3, 0xc1, 0x03, 0x6e, 0xa8, 0xac, 0x57, 0x25, 0x1a,
	0xa9, 0x9a, 0x9d, 0x2c, 0xc2, 0x80, 0x42, 0xf4, 0x74, 0xd8, 0x0d, 0x36, 0x75, 0xa3, 0x67, 0x55,
	0xa3, 0x67, 0x92, 0xd5, 0xb3, 0x98, 0xe5, 0xe4, 0x9b, 0xc0, 0xf4, 0x72, 0xbd, 0xab, 0x73, 0x20,
	0xb7, 0x28, 0xb6, 0x69, 0x0e, 0x23, 0xf4, 0x16, 0x10, 0xe2, 0xee, 0xe0, 0x6a, 0xa3, 0x76, 0x14,
	0x8c, 0xe5, 0x44, 0xe1, 0x9c, 0x3b, 0xad, 0x75, 0xa8, 0x6c, 0xef, 0x02, 0xbd, 0x17, 0x80, 0x83,
	0xb6, 0x1b, 0x4e, 0xa8, 0xcd, 0xdd, 0xa0, 0x06, 0x89, 0xcf, 0xb4, 0xb5, 0x33, 0xb1, 0xfb, 0x75,
	0x17, 0xdb, 0x54, 0x07, 0x5c, 0x1e, 0x60, 0x37, 0xb1, 0x4b, 0x99, 0x40, 0x1c, 0xef, 0x86, 0x07,
	0x5d, 0xb1, 0xc1, 0xd8, 0x25, 0x53, 0x51, 0xd9, 0x0c, 0xc2, 0xec, 0x9e, 0xcd, 0x83, 0x12, 0xc1,
	0xe5, 0x15, 0x04, 0x7b, 0x55, 0x9d, 0x9d, 0xa4, 0x30, 0xd7, 0x15, 0x3b, 0x2d, 0x7a, 0xa1, 0x67,
	0x6e, 0x7f, 0x00, 0xfc, 0xf7, 0x3e, 0x00, 0x3b, 0x39, 0xe3, 0x3e, 0x5f, 0xb8, 0x88, 0x8b, 0xda,
	0xb5, 0x8f, 0x82, 0xbe, 0x20, 0x98, 0xbe, 0x06, 0xee, 0x3e, 0x08, 0xf7, 0xdd, 0x7f, 0x10, 0xee,
	0x7b, 0xf4, 0x20, 0x0c, 0x5e, 0x5f, 0x0d, 0x83, 0x9f, 0xae, 0x86, 0xc1, 0x9d, 0xd5, 0x30, 0xb8,
	0xbb, 0x1a, 0x06, 0x7f, 0x5e, 0x0d, 0x83, 0xbf, 0xae, 0x86, 0xfb, 0x1e, 0xad, 0x86, 0xc1, 0x3b,
	0x0f, 0xc3, 0x7d, 0xb7, 0x1f, 0x86, 0xc1, 0xdd, 0x87, 0xe1, 0xbe, 0xfb, 0x0f, 0xc3, 0x7d, 0xb9,
	0xe3, 0x65, 0xa2, 0x2c, 0x97, 0xa3, 0x75, 0x52, 0xd1, 0xb0, 0xaa, 0x8a, 0xd1, 0x1a, 0x8d, 0xb1,
	0x0f, 0x4b, 0x44, 0xad, 0x46, 0x14, 0x95, 0xd4, 0xa5, 0x12, 0x56, 0x23, 0x56, 0x71, 0x4c, 0x29,
	0x94, 0x49, 0x0c, 0x5f, 0xd2, 0xac, 0x7f, 0x11, 0x69, 0xfe, 0xa7, 0x48, 0x61, 0x0b, 0xfb, 0xdf,
	0x83, 0xe7, 0xff, 0x13, 0x00, 0x00, 0xff, 0xff, 0x0a, 0xa3, 0xeb, 0xdf, 0x46, 0x32, 0x00, 0x00,
}

func (x VirtualMachineInstancesMetricType) String() string {
	s, ok := VirtualMachineInstancesMetricType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x VirtualMachineInstancesMetricLabel) String() string {
	s, ok := VirtualMachineInstancesMetricLabel_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x PodsMetricType) String() string {
	s, ok := PodsMetricType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x PodsMetricLabel) String() string {
	s, ok := PodsMetricLabel_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *NamespaceListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NamespaceListRequest)
	if !ok {
		that2, ok := that.(NamespaceListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Site != that1.Site {
		return false
	}
	return true
}
func (this *NodeListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeListRequest)
	if !ok {
		that2, ok := that.(NodeListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Site != that1.Site {
		return false
	}
	return true
}
func (this *PodListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PodListRequest)
	if !ok {
		that2, ok := that.(PodListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Site != that1.Site {
		return false
	}
	return true
}
func (this *PersistentVolumeClaimListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PersistentVolumeClaimListRequest)
	if !ok {
		that2, ok := that.(PersistentVolumeClaimListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Site != that1.Site {
		return false
	}
	return true
}
func (this *PersistentVolumeListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PersistentVolumeListRequest)
	if !ok {
		that2, ok := that.(PersistentVolumeListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Site != that1.Site {
		return false
	}
	return true
}
func (this *ServiceListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceListRequest)
	if !ok {
		that2, ok := that.(ServiceListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Site != that1.Site {
		return false
	}
	return true
}
func (this *EndpointsListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndpointsListRequest)
	if !ok {
		that2, ok := that.(EndpointsListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Site != that1.Site {
		return false
	}
	return true
}
func (this *ConfigMapListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConfigMapListRequest)
	if !ok {
		that2, ok := that.(ConfigMapListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Site != that1.Site {
		return false
	}
	return true
}
func (this *SecretListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SecretListRequest)
	if !ok {
		that2, ok := that.(SecretListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Site != that1.Site {
		return false
	}
	return true
}
func (this *DeploymentListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeploymentListRequest)
	if !ok {
		that2, ok := that.(DeploymentListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Site != that1.Site {
		return false
	}
	return true
}
func (this *DaemonSetListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DaemonSetListRequest)
	if !ok {
		that2, ok := that.(DaemonSetListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Site != that1.Site {
		return false
	}
	return true
}
func (this *StatefulSetListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StatefulSetListRequest)
	if !ok {
		that2, ok := that.(StatefulSetListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Site != that1.Site {
		return false
	}
	return true
}
func (this *ReplicaSetListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplicaSetListRequest)
	if !ok {
		that2, ok := that.(ReplicaSetListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Site != that1.Site {
		return false
	}
	return true
}
func (this *JobListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*JobListRequest)
	if !ok {
		that2, ok := that.(JobListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Site != that1.Site {
		return false
	}
	return true
}
func (this *CronJobListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CronJobListRequest)
	if !ok {
		that2, ok := that.(CronJobListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Site != that1.Site {
		return false
	}
	return true
}
func (this *VirtualMachineInstancesMetricsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VirtualMachineInstancesMetricsRequest)
	if !ok {
		that2, ok := that.(VirtualMachineInstancesMetricsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Site != that1.Site {
		return false
	}
	if len(this.MetricSelector) != len(that1.MetricSelector) {
		return false
	}
	for i := range this.MetricSelector {
		if this.MetricSelector[i] != that1.MetricSelector[i] {
			return false
		}
	}
	if this.StartTime != that1.StartTime {
		return false
	}
	if this.EndTime != that1.EndTime {
		return false
	}
	return true
}
func (this *VirtualMachineInstancesMetricsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VirtualMachineInstancesMetricsResponse)
	if !ok {
		that2, ok := that.(VirtualMachineInstancesMetricsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if !this.Data[i].Equal(that1.Data[i]) {
			return false
		}
	}
	return true
}
func (this *VirtualMachineInstancesMetricData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VirtualMachineInstancesMetricData)
	if !ok {
		that2, ok := that.(VirtualMachineInstancesMetricData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Unit != that1.Unit {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if !this.Data[i].Equal(that1.Data[i]) {
			return false
		}
	}
	return true
}
func (this *VirtualMachineInstancesMetricTypeData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VirtualMachineInstancesMetricTypeData)
	if !ok {
		that2, ok := that.(VirtualMachineInstancesMetricTypeData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Labels) != len(that1.Labels) {
		return false
	}
	for i := range this.Labels {
		if this.Labels[i] != that1.Labels[i] {
			return false
		}
	}
	if len(this.Values) != len(that1.Values) {
		return false
	}
	for i := range this.Values {
		if !this.Values[i].Equal(that1.Values[i]) {
			return false
		}
	}
	return true
}
func (this *PodsMetricsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PodsMetricsRequest)
	if !ok {
		that2, ok := that.(PodsMetricsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Site != that1.Site {
		return false
	}
	if len(this.MetricSelector) != len(that1.MetricSelector) {
		return false
	}
	for i := range this.MetricSelector {
		if this.MetricSelector[i] != that1.MetricSelector[i] {
			return false
		}
	}
	if this.StartTime != that1.StartTime {
		return false
	}
	if this.EndTime != that1.EndTime {
		return false
	}
	if this.Filters != that1.Filters {
		return false
	}
	if len(this.GroupBy) != len(that1.GroupBy) {
		return false
	}
	for i := range this.GroupBy {
		if this.GroupBy[i] != that1.GroupBy[i] {
			return false
		}
	}
	return true
}
func (this *PodsMetricsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PodsMetricsResponse)
	if !ok {
		that2, ok := that.(PodsMetricsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if !this.Data[i].Equal(that1.Data[i]) {
			return false
		}
	}
	return true
}
func (this *PodsMetricData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PodsMetricData)
	if !ok {
		that2, ok := that.(PodsMetricData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Unit != that1.Unit {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if !this.Data[i].Equal(that1.Data[i]) {
			return false
		}
	}
	return true
}
func (this *PodsMetricTypeData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PodsMetricTypeData)
	if !ok {
		that2, ok := that.(PodsMetricTypeData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Labels) != len(that1.Labels) {
		return false
	}
	for i := range this.Labels {
		if this.Labels[i] != that1.Labels[i] {
			return false
		}
	}
	if len(this.Values) != len(that1.Values) {
		return false
	}
	for i := range this.Values {
		if !this.Values[i].Equal(that1.Values[i]) {
			return false
		}
	}
	return true
}
func (this *NamespaceListRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&site.NamespaceListRequest{")
	s = append(s, "Site: "+fmt.Sprintf("%#v", this.Site)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NodeListRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&site.NodeListRequest{")
	s = append(s, "Site: "+fmt.Sprintf("%#v", this.Site)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PodListRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&site.PodListRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Site: "+fmt.Sprintf("%#v", this.Site)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PersistentVolumeClaimListRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&site.PersistentVolumeClaimListRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Site: "+fmt.Sprintf("%#v", this.Site)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PersistentVolumeListRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&site.PersistentVolumeListRequest{")
	s = append(s, "Site: "+fmt.Sprintf("%#v", this.Site)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServiceListRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&site.ServiceListRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Site: "+fmt.Sprintf("%#v", this.Site)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EndpointsListRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&site.EndpointsListRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Site: "+fmt.Sprintf("%#v", this.Site)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConfigMapListRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&site.ConfigMapListRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Site: "+fmt.Sprintf("%#v", this.Site)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SecretListRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&site.SecretListRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Site: "+fmt.Sprintf("%#v", this.Site)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeploymentListRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&site.DeploymentListRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Site: "+fmt.Sprintf("%#v", this.Site)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DaemonSetListRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&site.DaemonSetListRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Site: "+fmt.Sprintf("%#v", this.Site)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StatefulSetListRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&site.StatefulSetListRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Site: "+fmt.Sprintf("%#v", this.Site)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplicaSetListRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&site.ReplicaSetListRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Site: "+fmt.Sprintf("%#v", this.Site)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *JobListRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&site.JobListRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Site: "+fmt.Sprintf("%#v", this.Site)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CronJobListRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&site.CronJobListRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Site: "+fmt.Sprintf("%#v", this.Site)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VirtualMachineInstancesMetricsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&site.VirtualMachineInstancesMetricsRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Site: "+fmt.Sprintf("%#v", this.Site)+",\n")
	s = append(s, "MetricSelector: "+fmt.Sprintf("%#v", this.MetricSelector)+",\n")
	s = append(s, "StartTime: "+fmt.Sprintf("%#v", this.StartTime)+",\n")
	s = append(s, "EndTime: "+fmt.Sprintf("%#v", this.EndTime)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VirtualMachineInstancesMetricsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&site.VirtualMachineInstancesMetricsResponse{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VirtualMachineInstancesMetricData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&site.VirtualMachineInstancesMetricData{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Unit: "+fmt.Sprintf("%#v", this.Unit)+",\n")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VirtualMachineInstancesMetricTypeData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&site.VirtualMachineInstancesMetricTypeData{")
	keysForLabels := make([]string, 0, len(this.Labels))
	for k, _ := range this.Labels {
		keysForLabels = append(keysForLabels, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLabels)
	mapStringForLabels := "map[string]string{"
	for _, k := range keysForLabels {
		mapStringForLabels += fmt.Sprintf("%#v: %#v,", k, this.Labels[k])
	}
	mapStringForLabels += "}"
	if this.Labels != nil {
		s = append(s, "Labels: "+mapStringForLabels+",\n")
	}
	if this.Values != nil {
		s = append(s, "Values: "+fmt.Sprintf("%#v", this.Values)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PodsMetricsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&site.PodsMetricsRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Site: "+fmt.Sprintf("%#v", this.Site)+",\n")
	s = append(s, "MetricSelector: "+fmt.Sprintf("%#v", this.MetricSelector)+",\n")
	s = append(s, "StartTime: "+fmt.Sprintf("%#v", this.StartTime)+",\n")
	s = append(s, "EndTime: "+fmt.Sprintf("%#v", this.EndTime)+",\n")
	s = append(s, "Filters: "+fmt.Sprintf("%#v", this.Filters)+",\n")
	s = append(s, "GroupBy: "+fmt.Sprintf("%#v", this.GroupBy)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PodsMetricsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&site.PodsMetricsResponse{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PodsMetricData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&site.PodsMetricData{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Unit: "+fmt.Sprintf("%#v", this.Unit)+",\n")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PodsMetricTypeData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&site.PodsMetricTypeData{")
	keysForLabels := make([]string, 0, len(this.Labels))
	for k, _ := range this.Labels {
		keysForLabels = append(keysForLabels, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLabels)
	mapStringForLabels := "map[string]string{"
	for _, k := range keysForLabels {
		mapStringForLabels += fmt.Sprintf("%#v: %#v,", k, this.Labels[k])
	}
	mapStringForLabels += "}"
	if this.Labels != nil {
		s = append(s, "Labels: "+mapStringForLabels+",\n")
	}
	if this.Values != nil {
		s = append(s, "Values: "+fmt.Sprintf("%#v", this.Values)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPublicCustomDataK8SApi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CustomDataK8SAPIClient is the client API for CustomDataK8SAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomDataK8SAPIClient interface {
	// NamespaceList
	//
	// x-displayName: "Namespace List"
	// API to get list of namespaces in a site.
	NamespaceList(ctx context.Context, in *NamespaceListRequest, opts ...grpc.CallOption) (*v1.NamespaceList, error)
	// NodeList
	//
	// x-displayName: "Namespace List"
	// API to get list of nodes in a site.
	NodeList(ctx context.Context, in *NodeListRequest, opts ...grpc.CallOption) (*v1.NodeList, error)
	// PodList
	//
	// x-displayName: "Pod List"
	// API to get list of pods in a site for a given namespace.
	PodList(ctx context.Context, in *PodListRequest, opts ...grpc.CallOption) (*v1.PodList, error)
	// PersistentVolumeClaimList
	//
	// x-displayName: "PersistentVolumeClaim List"
	// API to get list of PVCs for a given namespace in a site.
	PersistentVolumeClaimList(ctx context.Context, in *PersistentVolumeClaimListRequest, opts ...grpc.CallOption) (*v1.PersistentVolumeClaimList, error)
	// PersistentVolumeList
	//
	// x-displayName: "PersistentVolume List"
	// API to get list of Persistent Volumes in a site.
	PersistentVolumeList(ctx context.Context, in *PersistentVolumeListRequest, opts ...grpc.CallOption) (*v1.PersistentVolumeList, error)
	// ServiceList
	//
	// x-displayName: "Service List"
	// API to get list of services for a given namespace in a site.
	ServiceList(ctx context.Context, in *ServiceListRequest, opts ...grpc.CallOption) (*v1.ServiceList, error)
	// EndpointsList
	//
	// x-displayName: "Endpoints List"
	// API to get list of endpoints for a given namespace in a site.
	EndpointsList(ctx context.Context, in *EndpointsListRequest, opts ...grpc.CallOption) (*v1.EndpointsList, error)
	// ConfigMapList
	//
	// x-displayName: "ConfigMap List"
	// API to get list of configmaps for a given namespace in a site.
	ConfigMapList(ctx context.Context, in *ConfigMapListRequest, opts ...grpc.CallOption) (*v1.ConfigMapList, error)
	// SecretList
	//
	// x-displayName: "Secret List"
	// API to get list of secrets for a given namespace in a site.
	SecretList(ctx context.Context, in *SecretListRequest, opts ...grpc.CallOption) (*v1.SecretList, error)
	// DeploymentList
	//
	// x-displayName: "Deployment List"
	// API to get list of deployments for a given namespace in a site.
	DeploymentList(ctx context.Context, in *DeploymentListRequest, opts ...grpc.CallOption) (*v11.DeploymentList, error)
	// DaemonSetList
	//
	// x-displayName: "DaemonSet List"
	// API to get list of daemon sets for a given namespace in a site.
	DaemonSetList(ctx context.Context, in *DaemonSetListRequest, opts ...grpc.CallOption) (*v11.DaemonSetList, error)
	// StatefulSetList
	//
	// x-displayName: "StatefulSet List"
	// API to get list of stateful sets for a given namespace in a site.
	StatefulSetList(ctx context.Context, in *StatefulSetListRequest, opts ...grpc.CallOption) (*v11.StatefulSetList, error)
	// ReplicaSetList
	//
	// x-displayName: "ReplicaSet List"
	// API to get list of replica sets for a given namespace in a site.
	ReplicaSetList(ctx context.Context, in *ReplicaSetListRequest, opts ...grpc.CallOption) (*v11.ReplicaSetList, error)
	// JobList
	//
	// x-displayName: "Job List"
	// API to get list of jobs for a given namespace in a site.
	JobList(ctx context.Context, in *JobListRequest, opts ...grpc.CallOption) (*v12.JobList, error)
	// CronJobList
	//
	// x-displayName: "CronJob List"
	// API to get list of cronjobs for a given namespace in a site.
	CronJobList(ctx context.Context, in *CronJobListRequest, opts ...grpc.CallOption) (*v1beta1.CronJobList, error)
	// VirtualMachineInstancesMetrics
	//
	// x-displayName: "VirtualMachineInstances Metrics"
	// API to get virtual machine instances metrics for a given namespace in a site.
	VirtualMachineInstancesMetrics(ctx context.Context, in *VirtualMachineInstancesMetricsRequest, opts ...grpc.CallOption) (*VirtualMachineInstancesMetricsResponse, error)
	// PodsMetrics
	//
	// x-displayName: "Pods Metrics"
	// API to get pods metrics for a given namespace in a site.
	PodsMetrics(ctx context.Context, in *PodsMetricsRequest, opts ...grpc.CallOption) (*PodsMetricsResponse, error)
}

type customDataK8SAPIClient struct {
	cc *grpc.ClientConn
}

func NewCustomDataK8SAPIClient(cc *grpc.ClientConn) CustomDataK8SAPIClient {
	return &customDataK8SAPIClient{cc}
}

func (c *customDataK8SAPIClient) NamespaceList(ctx context.Context, in *NamespaceListRequest, opts ...grpc.CallOption) (*v1.NamespaceList, error) {
	out := new(v1.NamespaceList)
	err := c.cc.Invoke(ctx, "/ves.io.schema.site.CustomDataK8SAPI/NamespaceList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customDataK8SAPIClient) NodeList(ctx context.Context, in *NodeListRequest, opts ...grpc.CallOption) (*v1.NodeList, error) {
	out := new(v1.NodeList)
	err := c.cc.Invoke(ctx, "/ves.io.schema.site.CustomDataK8SAPI/NodeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customDataK8SAPIClient) PodList(ctx context.Context, in *PodListRequest, opts ...grpc.CallOption) (*v1.PodList, error) {
	out := new(v1.PodList)
	err := c.cc.Invoke(ctx, "/ves.io.schema.site.CustomDataK8SAPI/PodList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customDataK8SAPIClient) PersistentVolumeClaimList(ctx context.Context, in *PersistentVolumeClaimListRequest, opts ...grpc.CallOption) (*v1.PersistentVolumeClaimList, error) {
	out := new(v1.PersistentVolumeClaimList)
	err := c.cc.Invoke(ctx, "/ves.io.schema.site.CustomDataK8SAPI/PersistentVolumeClaimList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customDataK8SAPIClient) PersistentVolumeList(ctx context.Context, in *PersistentVolumeListRequest, opts ...grpc.CallOption) (*v1.PersistentVolumeList, error) {
	out := new(v1.PersistentVolumeList)
	err := c.cc.Invoke(ctx, "/ves.io.schema.site.CustomDataK8SAPI/PersistentVolumeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customDataK8SAPIClient) ServiceList(ctx context.Context, in *ServiceListRequest, opts ...grpc.CallOption) (*v1.ServiceList, error) {
	out := new(v1.ServiceList)
	err := c.cc.Invoke(ctx, "/ves.io.schema.site.CustomDataK8SAPI/ServiceList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customDataK8SAPIClient) EndpointsList(ctx context.Context, in *EndpointsListRequest, opts ...grpc.CallOption) (*v1.EndpointsList, error) {
	out := new(v1.EndpointsList)
	err := c.cc.Invoke(ctx, "/ves.io.schema.site.CustomDataK8SAPI/EndpointsList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customDataK8SAPIClient) ConfigMapList(ctx context.Context, in *ConfigMapListRequest, opts ...grpc.CallOption) (*v1.ConfigMapList, error) {
	out := new(v1.ConfigMapList)
	err := c.cc.Invoke(ctx, "/ves.io.schema.site.CustomDataK8SAPI/ConfigMapList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customDataK8SAPIClient) SecretList(ctx context.Context, in *SecretListRequest, opts ...grpc.CallOption) (*v1.SecretList, error) {
	out := new(v1.SecretList)
	err := c.cc.Invoke(ctx, "/ves.io.schema.site.CustomDataK8SAPI/SecretList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customDataK8SAPIClient) DeploymentList(ctx context.Context, in *DeploymentListRequest, opts ...grpc.CallOption) (*v11.DeploymentList, error) {
	out := new(v11.DeploymentList)
	err := c.cc.Invoke(ctx, "/ves.io.schema.site.CustomDataK8SAPI/DeploymentList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customDataK8SAPIClient) DaemonSetList(ctx context.Context, in *DaemonSetListRequest, opts ...grpc.CallOption) (*v11.DaemonSetList, error) {
	out := new(v11.DaemonSetList)
	err := c.cc.Invoke(ctx, "/ves.io.schema.site.CustomDataK8SAPI/DaemonSetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customDataK8SAPIClient) StatefulSetList(ctx context.Context, in *StatefulSetListRequest, opts ...grpc.CallOption) (*v11.StatefulSetList, error) {
	out := new(v11.StatefulSetList)
	err := c.cc.Invoke(ctx, "/ves.io.schema.site.CustomDataK8SAPI/StatefulSetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customDataK8SAPIClient) ReplicaSetList(ctx context.Context, in *ReplicaSetListRequest, opts ...grpc.CallOption) (*v11.ReplicaSetList, error) {
	out := new(v11.ReplicaSetList)
	err := c.cc.Invoke(ctx, "/ves.io.schema.site.CustomDataK8SAPI/ReplicaSetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customDataK8SAPIClient) JobList(ctx context.Context, in *JobListRequest, opts ...grpc.CallOption) (*v12.JobList, error) {
	out := new(v12.JobList)
	err := c.cc.Invoke(ctx, "/ves.io.schema.site.CustomDataK8SAPI/JobList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customDataK8SAPIClient) CronJobList(ctx context.Context, in *CronJobListRequest, opts ...grpc.CallOption) (*v1beta1.CronJobList, error) {
	out := new(v1beta1.CronJobList)
	err := c.cc.Invoke(ctx, "/ves.io.schema.site.CustomDataK8SAPI/CronJobList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customDataK8SAPIClient) VirtualMachineInstancesMetrics(ctx context.Context, in *VirtualMachineInstancesMetricsRequest, opts ...grpc.CallOption) (*VirtualMachineInstancesMetricsResponse, error) {
	out := new(VirtualMachineInstancesMetricsResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.site.CustomDataK8SAPI/VirtualMachineInstancesMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customDataK8SAPIClient) PodsMetrics(ctx context.Context, in *PodsMetricsRequest, opts ...grpc.CallOption) (*PodsMetricsResponse, error) {
	out := new(PodsMetricsResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.site.CustomDataK8SAPI/PodsMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomDataK8SAPIServer is the server API for CustomDataK8SAPI service.
type CustomDataK8SAPIServer interface {
	// NamespaceList
	//
	// x-displayName: "Namespace List"
	// API to get list of namespaces in a site.
	NamespaceList(context.Context, *NamespaceListRequest) (*v1.NamespaceList, error)
	// NodeList
	//
	// x-displayName: "Namespace List"
	// API to get list of nodes in a site.
	NodeList(context.Context, *NodeListRequest) (*v1.NodeList, error)
	// PodList
	//
	// x-displayName: "Pod List"
	// API to get list of pods in a site for a given namespace.
	PodList(context.Context, *PodListRequest) (*v1.PodList, error)
	// PersistentVolumeClaimList
	//
	// x-displayName: "PersistentVolumeClaim List"
	// API to get list of PVCs for a given namespace in a site.
	PersistentVolumeClaimList(context.Context, *PersistentVolumeClaimListRequest) (*v1.PersistentVolumeClaimList, error)
	// PersistentVolumeList
	//
	// x-displayName: "PersistentVolume List"
	// API to get list of Persistent Volumes in a site.
	PersistentVolumeList(context.Context, *PersistentVolumeListRequest) (*v1.PersistentVolumeList, error)
	// ServiceList
	//
	// x-displayName: "Service List"
	// API to get list of services for a given namespace in a site.
	ServiceList(context.Context, *ServiceListRequest) (*v1.ServiceList, error)
	// EndpointsList
	//
	// x-displayName: "Endpoints List"
	// API to get list of endpoints for a given namespace in a site.
	EndpointsList(context.Context, *EndpointsListRequest) (*v1.EndpointsList, error)
	// ConfigMapList
	//
	// x-displayName: "ConfigMap List"
	// API to get list of configmaps for a given namespace in a site.
	ConfigMapList(context.Context, *ConfigMapListRequest) (*v1.ConfigMapList, error)
	// SecretList
	//
	// x-displayName: "Secret List"
	// API to get list of secrets for a given namespace in a site.
	SecretList(context.Context, *SecretListRequest) (*v1.SecretList, error)
	// DeploymentList
	//
	// x-displayName: "Deployment List"
	// API to get list of deployments for a given namespace in a site.
	DeploymentList(context.Context, *DeploymentListRequest) (*v11.DeploymentList, error)
	// DaemonSetList
	//
	// x-displayName: "DaemonSet List"
	// API to get list of daemon sets for a given namespace in a site.
	DaemonSetList(context.Context, *DaemonSetListRequest) (*v11.DaemonSetList, error)
	// StatefulSetList
	//
	// x-displayName: "StatefulSet List"
	// API to get list of stateful sets for a given namespace in a site.
	StatefulSetList(context.Context, *StatefulSetListRequest) (*v11.StatefulSetList, error)
	// ReplicaSetList
	//
	// x-displayName: "ReplicaSet List"
	// API to get list of replica sets for a given namespace in a site.
	ReplicaSetList(context.Context, *ReplicaSetListRequest) (*v11.ReplicaSetList, error)
	// JobList
	//
	// x-displayName: "Job List"
	// API to get list of jobs for a given namespace in a site.
	JobList(context.Context, *JobListRequest) (*v12.JobList, error)
	// CronJobList
	//
	// x-displayName: "CronJob List"
	// API to get list of cronjobs for a given namespace in a site.
	CronJobList(context.Context, *CronJobListRequest) (*v1beta1.CronJobList, error)
	// VirtualMachineInstancesMetrics
	//
	// x-displayName: "VirtualMachineInstances Metrics"
	// API to get virtual machine instances metrics for a given namespace in a site.
	VirtualMachineInstancesMetrics(context.Context, *VirtualMachineInstancesMetricsRequest) (*VirtualMachineInstancesMetricsResponse, error)
	// PodsMetrics
	//
	// x-displayName: "Pods Metrics"
	// API to get pods metrics for a given namespace in a site.
	PodsMetrics(context.Context, *PodsMetricsRequest) (*PodsMetricsResponse, error)
}

// UnimplementedCustomDataK8SAPIServer can be embedded to have forward compatible implementations.
type UnimplementedCustomDataK8SAPIServer struct {
}

func (*UnimplementedCustomDataK8SAPIServer) NamespaceList(ctx context.Context, req *NamespaceListRequest) (*v1.NamespaceList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NamespaceList not implemented")
}
func (*UnimplementedCustomDataK8SAPIServer) NodeList(ctx context.Context, req *NodeListRequest) (*v1.NodeList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeList not implemented")
}
func (*UnimplementedCustomDataK8SAPIServer) PodList(ctx context.Context, req *PodListRequest) (*v1.PodList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PodList not implemented")
}
func (*UnimplementedCustomDataK8SAPIServer) PersistentVolumeClaimList(ctx context.Context, req *PersistentVolumeClaimListRequest) (*v1.PersistentVolumeClaimList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PersistentVolumeClaimList not implemented")
}
func (*UnimplementedCustomDataK8SAPIServer) PersistentVolumeList(ctx context.Context, req *PersistentVolumeListRequest) (*v1.PersistentVolumeList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PersistentVolumeList not implemented")
}
func (*UnimplementedCustomDataK8SAPIServer) ServiceList(ctx context.Context, req *ServiceListRequest) (*v1.ServiceList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceList not implemented")
}
func (*UnimplementedCustomDataK8SAPIServer) EndpointsList(ctx context.Context, req *EndpointsListRequest) (*v1.EndpointsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndpointsList not implemented")
}
func (*UnimplementedCustomDataK8SAPIServer) ConfigMapList(ctx context.Context, req *ConfigMapListRequest) (*v1.ConfigMapList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigMapList not implemented")
}
func (*UnimplementedCustomDataK8SAPIServer) SecretList(ctx context.Context, req *SecretListRequest) (*v1.SecretList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SecretList not implemented")
}
func (*UnimplementedCustomDataK8SAPIServer) DeploymentList(ctx context.Context, req *DeploymentListRequest) (*v11.DeploymentList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeploymentList not implemented")
}
func (*UnimplementedCustomDataK8SAPIServer) DaemonSetList(ctx context.Context, req *DaemonSetListRequest) (*v11.DaemonSetList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DaemonSetList not implemented")
}
func (*UnimplementedCustomDataK8SAPIServer) StatefulSetList(ctx context.Context, req *StatefulSetListRequest) (*v11.StatefulSetList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatefulSetList not implemented")
}
func (*UnimplementedCustomDataK8SAPIServer) ReplicaSetList(ctx context.Context, req *ReplicaSetListRequest) (*v11.ReplicaSetList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplicaSetList not implemented")
}
func (*UnimplementedCustomDataK8SAPIServer) JobList(ctx context.Context, req *JobListRequest) (*v12.JobList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobList not implemented")
}
func (*UnimplementedCustomDataK8SAPIServer) CronJobList(ctx context.Context, req *CronJobListRequest) (*v1beta1.CronJobList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CronJobList not implemented")
}
func (*UnimplementedCustomDataK8SAPIServer) VirtualMachineInstancesMetrics(ctx context.Context, req *VirtualMachineInstancesMetricsRequest) (*VirtualMachineInstancesMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VirtualMachineInstancesMetrics not implemented")
}
func (*UnimplementedCustomDataK8SAPIServer) PodsMetrics(ctx context.Context, req *PodsMetricsRequest) (*PodsMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PodsMetrics not implemented")
}

func RegisterCustomDataK8SAPIServer(s *grpc.Server, srv CustomDataK8SAPIServer) {
	s.RegisterService(&_CustomDataK8SAPI_serviceDesc, srv)
}

func _CustomDataK8SAPI_NamespaceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NamespaceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomDataK8SAPIServer).NamespaceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.site.CustomDataK8SAPI/NamespaceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomDataK8SAPIServer).NamespaceList(ctx, req.(*NamespaceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomDataK8SAPI_NodeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomDataK8SAPIServer).NodeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.site.CustomDataK8SAPI/NodeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomDataK8SAPIServer).NodeList(ctx, req.(*NodeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomDataK8SAPI_PodList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PodListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomDataK8SAPIServer).PodList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.site.CustomDataK8SAPI/PodList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomDataK8SAPIServer).PodList(ctx, req.(*PodListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomDataK8SAPI_PersistentVolumeClaimList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersistentVolumeClaimListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomDataK8SAPIServer).PersistentVolumeClaimList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.site.CustomDataK8SAPI/PersistentVolumeClaimList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomDataK8SAPIServer).PersistentVolumeClaimList(ctx, req.(*PersistentVolumeClaimListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomDataK8SAPI_PersistentVolumeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersistentVolumeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomDataK8SAPIServer).PersistentVolumeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.site.CustomDataK8SAPI/PersistentVolumeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomDataK8SAPIServer).PersistentVolumeList(ctx, req.(*PersistentVolumeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomDataK8SAPI_ServiceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomDataK8SAPIServer).ServiceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.site.CustomDataK8SAPI/ServiceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomDataK8SAPIServer).ServiceList(ctx, req.(*ServiceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomDataK8SAPI_EndpointsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndpointsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomDataK8SAPIServer).EndpointsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.site.CustomDataK8SAPI/EndpointsList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomDataK8SAPIServer).EndpointsList(ctx, req.(*EndpointsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomDataK8SAPI_ConfigMapList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigMapListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomDataK8SAPIServer).ConfigMapList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.site.CustomDataK8SAPI/ConfigMapList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomDataK8SAPIServer).ConfigMapList(ctx, req.(*ConfigMapListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomDataK8SAPI_SecretList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomDataK8SAPIServer).SecretList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.site.CustomDataK8SAPI/SecretList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomDataK8SAPIServer).SecretList(ctx, req.(*SecretListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomDataK8SAPI_DeploymentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeploymentListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomDataK8SAPIServer).DeploymentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.site.CustomDataK8SAPI/DeploymentList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomDataK8SAPIServer).DeploymentList(ctx, req.(*DeploymentListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomDataK8SAPI_DaemonSetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DaemonSetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomDataK8SAPIServer).DaemonSetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.site.CustomDataK8SAPI/DaemonSetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomDataK8SAPIServer).DaemonSetList(ctx, req.(*DaemonSetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomDataK8SAPI_StatefulSetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatefulSetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomDataK8SAPIServer).StatefulSetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.site.CustomDataK8SAPI/StatefulSetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomDataK8SAPIServer).StatefulSetList(ctx, req.(*StatefulSetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomDataK8SAPI_ReplicaSetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplicaSetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomDataK8SAPIServer).ReplicaSetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.site.CustomDataK8SAPI/ReplicaSetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomDataK8SAPIServer).ReplicaSetList(ctx, req.(*ReplicaSetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomDataK8SAPI_JobList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomDataK8SAPIServer).JobList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.site.CustomDataK8SAPI/JobList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomDataK8SAPIServer).JobList(ctx, req.(*JobListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomDataK8SAPI_CronJobList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CronJobListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomDataK8SAPIServer).CronJobList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.site.CustomDataK8SAPI/CronJobList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomDataK8SAPIServer).CronJobList(ctx, req.(*CronJobListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomDataK8SAPI_VirtualMachineInstancesMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirtualMachineInstancesMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomDataK8SAPIServer).VirtualMachineInstancesMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.site.CustomDataK8SAPI/VirtualMachineInstancesMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomDataK8SAPIServer).VirtualMachineInstancesMetrics(ctx, req.(*VirtualMachineInstancesMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomDataK8SAPI_PodsMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PodsMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomDataK8SAPIServer).PodsMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.site.CustomDataK8SAPI/PodsMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomDataK8SAPIServer).PodsMetrics(ctx, req.(*PodsMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomDataK8SAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.site.CustomDataK8SAPI",
	HandlerType: (*CustomDataK8SAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NamespaceList",
			Handler:    _CustomDataK8SAPI_NamespaceList_Handler,
		},
		{
			MethodName: "NodeList",
			Handler:    _CustomDataK8SAPI_NodeList_Handler,
		},
		{
			MethodName: "PodList",
			Handler:    _CustomDataK8SAPI_PodList_Handler,
		},
		{
			MethodName: "PersistentVolumeClaimList",
			Handler:    _CustomDataK8SAPI_PersistentVolumeClaimList_Handler,
		},
		{
			MethodName: "PersistentVolumeList",
			Handler:    _CustomDataK8SAPI_PersistentVolumeList_Handler,
		},
		{
			MethodName: "ServiceList",
			Handler:    _CustomDataK8SAPI_ServiceList_Handler,
		},
		{
			MethodName: "EndpointsList",
			Handler:    _CustomDataK8SAPI_EndpointsList_Handler,
		},
		{
			MethodName: "ConfigMapList",
			Handler:    _CustomDataK8SAPI_ConfigMapList_Handler,
		},
		{
			MethodName: "SecretList",
			Handler:    _CustomDataK8SAPI_SecretList_Handler,
		},
		{
			MethodName: "DeploymentList",
			Handler:    _CustomDataK8SAPI_DeploymentList_Handler,
		},
		{
			MethodName: "DaemonSetList",
			Handler:    _CustomDataK8SAPI_DaemonSetList_Handler,
		},
		{
			MethodName: "StatefulSetList",
			Handler:    _CustomDataK8SAPI_StatefulSetList_Handler,
		},
		{
			MethodName: "ReplicaSetList",
			Handler:    _CustomDataK8SAPI_ReplicaSetList_Handler,
		},
		{
			MethodName: "JobList",
			Handler:    _CustomDataK8SAPI_JobList_Handler,
		},
		{
			MethodName: "CronJobList",
			Handler:    _CustomDataK8SAPI_CronJobList_Handler,
		},
		{
			MethodName: "VirtualMachineInstancesMetrics",
			Handler:    _CustomDataK8SAPI_VirtualMachineInstancesMetrics_Handler,
		},
		{
			MethodName: "PodsMetrics",
			Handler:    _CustomDataK8SAPI_PodsMetrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/site/public_custom_data_k8s_api.proto",
}

func (m *NamespaceListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NamespaceListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NamespaceListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Site) > 0 {
		i -= len(m.Site)
		copy(dAtA[i:], m.Site)
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(m.Site)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NodeListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Site) > 0 {
		i -= len(m.Site)
		copy(dAtA[i:], m.Site)
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(m.Site)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PodListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Site) > 0 {
		i -= len(m.Site)
		copy(dAtA[i:], m.Site)
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(m.Site)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PersistentVolumeClaimListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PersistentVolumeClaimListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PersistentVolumeClaimListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Site) > 0 {
		i -= len(m.Site)
		copy(dAtA[i:], m.Site)
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(m.Site)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PersistentVolumeListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PersistentVolumeListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PersistentVolumeListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Site) > 0 {
		i -= len(m.Site)
		copy(dAtA[i:], m.Site)
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(m.Site)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *ServiceListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Site) > 0 {
		i -= len(m.Site)
		copy(dAtA[i:], m.Site)
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(m.Site)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EndpointsListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndpointsListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndpointsListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Site) > 0 {
		i -= len(m.Site)
		copy(dAtA[i:], m.Site)
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(m.Site)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConfigMapListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigMapListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigMapListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Site) > 0 {
		i -= len(m.Site)
		copy(dAtA[i:], m.Site)
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(m.Site)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SecretListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecretListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecretListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Site) > 0 {
		i -= len(m.Site)
		copy(dAtA[i:], m.Site)
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(m.Site)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeploymentListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeploymentListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeploymentListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Site) > 0 {
		i -= len(m.Site)
		copy(dAtA[i:], m.Site)
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(m.Site)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DaemonSetListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DaemonSetListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DaemonSetListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Site) > 0 {
		i -= len(m.Site)
		copy(dAtA[i:], m.Site)
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(m.Site)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StatefulSetListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatefulSetListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatefulSetListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Site) > 0 {
		i -= len(m.Site)
		copy(dAtA[i:], m.Site)
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(m.Site)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReplicaSetListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplicaSetListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicaSetListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Site) > 0 {
		i -= len(m.Site)
		copy(dAtA[i:], m.Site)
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(m.Site)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JobListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JobListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Site) > 0 {
		i -= len(m.Site)
		copy(dAtA[i:], m.Site)
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(m.Site)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CronJobListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CronJobListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CronJobListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Site) > 0 {
		i -= len(m.Site)
		copy(dAtA[i:], m.Site)
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(m.Site)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VirtualMachineInstancesMetricsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VirtualMachineInstancesMetricsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VirtualMachineInstancesMetricsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EndTime) > 0 {
		i -= len(m.EndTime)
		copy(dAtA[i:], m.EndTime)
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(m.EndTime)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.StartTime) > 0 {
		i -= len(m.StartTime)
		copy(dAtA[i:], m.StartTime)
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(m.StartTime)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.MetricSelector) > 0 {
		dAtA2 := make([]byte, len(m.MetricSelector)*10)
		var j1 int
		for _, num := range m.MetricSelector {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Site) > 0 {
		i -= len(m.Site)
		copy(dAtA[i:], m.Site)
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(m.Site)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VirtualMachineInstancesMetricsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VirtualMachineInstancesMetricsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VirtualMachineInstancesMetricsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *VirtualMachineInstancesMetricData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VirtualMachineInstancesMetricData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VirtualMachineInstancesMetricData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Unit != 0 {
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(m.Unit))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Type != 0 {
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VirtualMachineInstancesMetricTypeData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VirtualMachineInstancesMetricTypeData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VirtualMachineInstancesMetricTypeData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Values[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Labels) > 0 {
		for k := range m.Labels {
			v := m.Labels[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PodsMetricsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodsMetricsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodsMetricsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GroupBy) > 0 {
		dAtA4 := make([]byte, len(m.GroupBy)*10)
		var j3 int
		for _, num := range m.GroupBy {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Filters) > 0 {
		i -= len(m.Filters)
		copy(dAtA[i:], m.Filters)
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(m.Filters)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.EndTime) > 0 {
		i -= len(m.EndTime)
		copy(dAtA[i:], m.EndTime)
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(m.EndTime)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.StartTime) > 0 {
		i -= len(m.StartTime)
		copy(dAtA[i:], m.StartTime)
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(m.StartTime)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.MetricSelector) > 0 {
		dAtA6 := make([]byte, len(m.MetricSelector)*10)
		var j5 int
		for _, num := range m.MetricSelector {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Site) > 0 {
		i -= len(m.Site)
		copy(dAtA[i:], m.Site)
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(m.Site)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PodsMetricsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodsMetricsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodsMetricsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PodsMetricData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodsMetricData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodsMetricData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Unit != 0 {
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(m.Unit))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Type != 0 {
		i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PodsMetricTypeData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodsMetricTypeData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodsMetricTypeData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Values[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Labels) > 0 {
		for k := range m.Labels {
			v := m.Labels[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPublicCustomDataK8SApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintPublicCustomDataK8SApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovPublicCustomDataK8SApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NamespaceListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Site)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
	}
	return n
}

func (m *NodeListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Site)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
	}
	return n
}

func (m *PodListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
	}
	l = len(m.Site)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
	}
	return n
}

func (m *PersistentVolumeClaimListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
	}
	l = len(m.Site)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
	}
	return n
}

func (m *PersistentVolumeListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Site)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
	}
	return n
}

func (m *ServiceListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
	}
	l = len(m.Site)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
	}
	return n
}

func (m *EndpointsListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
	}
	l = len(m.Site)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
	}
	return n
}

func (m *ConfigMapListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
	}
	l = len(m.Site)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
	}
	return n
}

func (m *SecretListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
	}
	l = len(m.Site)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
	}
	return n
}

func (m *DeploymentListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
	}
	l = len(m.Site)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
	}
	return n
}

func (m *DaemonSetListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
	}
	l = len(m.Site)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
	}
	return n
}

func (m *StatefulSetListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
	}
	l = len(m.Site)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
	}
	return n
}

func (m *ReplicaSetListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
	}
	l = len(m.Site)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
	}
	return n
}

func (m *JobListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
	}
	l = len(m.Site)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
	}
	return n
}

func (m *CronJobListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
	}
	l = len(m.Site)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
	}
	return n
}

func (m *VirtualMachineInstancesMetricsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
	}
	l = len(m.Site)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
	}
	if len(m.MetricSelector) > 0 {
		l = 0
		for _, e := range m.MetricSelector {
			l += sovPublicCustomDataK8SApi(uint64(e))
		}
		n += 1 + sovPublicCustomDataK8SApi(uint64(l)) + l
	}
	l = len(m.StartTime)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
	}
	l = len(m.EndTime)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
	}
	return n
}

func (m *VirtualMachineInstancesMetricsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
		}
	}
	return n
}

func (m *VirtualMachineInstancesMetricData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovPublicCustomDataK8SApi(uint64(m.Type))
	}
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
		}
	}
	if m.Unit != 0 {
		n += 1 + sovPublicCustomDataK8SApi(uint64(m.Unit))
	}
	return n
}

func (m *VirtualMachineInstancesMetricTypeData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovPublicCustomDataK8SApi(uint64(len(k))) + 1 + len(v) + sovPublicCustomDataK8SApi(uint64(len(v)))
			n += mapEntrySize + 1 + sovPublicCustomDataK8SApi(uint64(mapEntrySize))
		}
	}
	if len(m.Values) > 0 {
		for _, e := range m.Values {
			l = e.Size()
			n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
		}
	}
	return n
}

func (m *PodsMetricsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
	}
	l = len(m.Site)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
	}
	if len(m.MetricSelector) > 0 {
		l = 0
		for _, e := range m.MetricSelector {
			l += sovPublicCustomDataK8SApi(uint64(e))
		}
		n += 1 + sovPublicCustomDataK8SApi(uint64(l)) + l
	}
	l = len(m.StartTime)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
	}
	l = len(m.EndTime)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
	}
	l = len(m.Filters)
	if l > 0 {
		n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
	}
	if len(m.GroupBy) > 0 {
		l = 0
		for _, e := range m.GroupBy {
			l += sovPublicCustomDataK8SApi(uint64(e))
		}
		n += 1 + sovPublicCustomDataK8SApi(uint64(l)) + l
	}
	return n
}

func (m *PodsMetricsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
		}
	}
	return n
}

func (m *PodsMetricData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovPublicCustomDataK8SApi(uint64(m.Type))
	}
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
		}
	}
	if m.Unit != 0 {
		n += 1 + sovPublicCustomDataK8SApi(uint64(m.Unit))
	}
	return n
}

func (m *PodsMetricTypeData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovPublicCustomDataK8SApi(uint64(len(k))) + 1 + len(v) + sovPublicCustomDataK8SApi(uint64(len(v)))
			n += mapEntrySize + 1 + sovPublicCustomDataK8SApi(uint64(mapEntrySize))
		}
	}
	if len(m.Values) > 0 {
		for _, e := range m.Values {
			l = e.Size()
			n += 1 + l + sovPublicCustomDataK8SApi(uint64(l))
		}
	}
	return n
}

func sovPublicCustomDataK8SApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPublicCustomDataK8SApi(x uint64) (n int) {
	return sovPublicCustomDataK8SApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *NamespaceListRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NamespaceListRequest{`,
		`Site:` + fmt.Sprintf("%v", this.Site) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeListRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeListRequest{`,
		`Site:` + fmt.Sprintf("%v", this.Site) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PodListRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PodListRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Site:` + fmt.Sprintf("%v", this.Site) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PersistentVolumeClaimListRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PersistentVolumeClaimListRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Site:` + fmt.Sprintf("%v", this.Site) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PersistentVolumeListRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PersistentVolumeListRequest{`,
		`Site:` + fmt.Sprintf("%v", this.Site) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceListRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceListRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Site:` + fmt.Sprintf("%v", this.Site) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndpointsListRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndpointsListRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Site:` + fmt.Sprintf("%v", this.Site) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConfigMapListRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConfigMapListRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Site:` + fmt.Sprintf("%v", this.Site) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SecretListRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SecretListRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Site:` + fmt.Sprintf("%v", this.Site) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeploymentListRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeploymentListRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Site:` + fmt.Sprintf("%v", this.Site) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DaemonSetListRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DaemonSetListRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Site:` + fmt.Sprintf("%v", this.Site) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StatefulSetListRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StatefulSetListRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Site:` + fmt.Sprintf("%v", this.Site) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplicaSetListRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplicaSetListRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Site:` + fmt.Sprintf("%v", this.Site) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JobListRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JobListRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Site:` + fmt.Sprintf("%v", this.Site) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CronJobListRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CronJobListRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Site:` + fmt.Sprintf("%v", this.Site) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualMachineInstancesMetricsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VirtualMachineInstancesMetricsRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Site:` + fmt.Sprintf("%v", this.Site) + `,`,
		`MetricSelector:` + fmt.Sprintf("%v", this.MetricSelector) + `,`,
		`StartTime:` + fmt.Sprintf("%v", this.StartTime) + `,`,
		`EndTime:` + fmt.Sprintf("%v", this.EndTime) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualMachineInstancesMetricsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForData := "[]*VirtualMachineInstancesMetricData{"
	for _, f := range this.Data {
		repeatedStringForData += strings.Replace(f.String(), "VirtualMachineInstancesMetricData", "VirtualMachineInstancesMetricData", 1) + ","
	}
	repeatedStringForData += "}"
	s := strings.Join([]string{`&VirtualMachineInstancesMetricsResponse{`,
		`Data:` + repeatedStringForData + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualMachineInstancesMetricData) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForData := "[]*VirtualMachineInstancesMetricTypeData{"
	for _, f := range this.Data {
		repeatedStringForData += strings.Replace(f.String(), "VirtualMachineInstancesMetricTypeData", "VirtualMachineInstancesMetricTypeData", 1) + ","
	}
	repeatedStringForData += "}"
	s := strings.Join([]string{`&VirtualMachineInstancesMetricData{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Data:` + repeatedStringForData + `,`,
		`Unit:` + fmt.Sprintf("%v", this.Unit) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualMachineInstancesMetricTypeData) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForValues := "[]*MetricValue{"
	for _, f := range this.Values {
		repeatedStringForValues += strings.Replace(fmt.Sprintf("%v", f), "MetricValue", "schema.MetricValue", 1) + ","
	}
	repeatedStringForValues += "}"
	keysForLabels := make([]string, 0, len(this.Labels))
	for k, _ := range this.Labels {
		keysForLabels = append(keysForLabels, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLabels)
	mapStringForLabels := "map[string]string{"
	for _, k := range keysForLabels {
		mapStringForLabels += fmt.Sprintf("%v: %v,", k, this.Labels[k])
	}
	mapStringForLabels += "}"
	s := strings.Join([]string{`&VirtualMachineInstancesMetricTypeData{`,
		`Labels:` + mapStringForLabels + `,`,
		`Values:` + repeatedStringForValues + `,`,
		`}`,
	}, "")
	return s
}
func (this *PodsMetricsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PodsMetricsRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Site:` + fmt.Sprintf("%v", this.Site) + `,`,
		`MetricSelector:` + fmt.Sprintf("%v", this.MetricSelector) + `,`,
		`StartTime:` + fmt.Sprintf("%v", this.StartTime) + `,`,
		`EndTime:` + fmt.Sprintf("%v", this.EndTime) + `,`,
		`Filters:` + fmt.Sprintf("%v", this.Filters) + `,`,
		`GroupBy:` + fmt.Sprintf("%v", this.GroupBy) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PodsMetricsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForData := "[]*PodsMetricData{"
	for _, f := range this.Data {
		repeatedStringForData += strings.Replace(f.String(), "PodsMetricData", "PodsMetricData", 1) + ","
	}
	repeatedStringForData += "}"
	s := strings.Join([]string{`&PodsMetricsResponse{`,
		`Data:` + repeatedStringForData + `,`,
		`}`,
	}, "")
	return s
}
func (this *PodsMetricData) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForData := "[]*PodsMetricTypeData{"
	for _, f := range this.Data {
		repeatedStringForData += strings.Replace(f.String(), "PodsMetricTypeData", "PodsMetricTypeData", 1) + ","
	}
	repeatedStringForData += "}"
	s := strings.Join([]string{`&PodsMetricData{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Data:` + repeatedStringForData + `,`,
		`Unit:` + fmt.Sprintf("%v", this.Unit) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PodsMetricTypeData) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForValues := "[]*MetricValue{"
	for _, f := range this.Values {
		repeatedStringForValues += strings.Replace(fmt.Sprintf("%v", f), "MetricValue", "schema.MetricValue", 1) + ","
	}
	repeatedStringForValues += "}"
	keysForLabels := make([]string, 0, len(this.Labels))
	for k, _ := range this.Labels {
		keysForLabels = append(keysForLabels, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLabels)
	mapStringForLabels := "map[string]string{"
	for _, k := range keysForLabels {
		mapStringForLabels += fmt.Sprintf("%v: %v,", k, this.Labels[k])
	}
	mapStringForLabels += "}"
	s := strings.Join([]string{`&PodsMetricTypeData{`,
		`Labels:` + mapStringForLabels + `,`,
		`Values:` + repeatedStringForValues + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPublicCustomDataK8SApi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *NamespaceListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataK8SApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NamespaceListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NamespaceListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Site = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataK8SApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataK8SApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Site = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataK8SApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataK8SApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Site = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataK8SApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PersistentVolumeClaimListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataK8SApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PersistentVolumeClaimListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PersistentVolumeClaimListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Site = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataK8SApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PersistentVolumeListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataK8SApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PersistentVolumeListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PersistentVolumeListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Site = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataK8SApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataK8SApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Site = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataK8SApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndpointsListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataK8SApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndpointsListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndpointsListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Site = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataK8SApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigMapListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataK8SApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigMapListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigMapListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Site = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataK8SApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecretListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataK8SApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecretListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecretListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Site = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataK8SApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeploymentListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataK8SApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeploymentListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeploymentListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Site = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataK8SApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DaemonSetListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataK8SApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DaemonSetListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DaemonSetListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Site = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataK8SApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatefulSetListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataK8SApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatefulSetListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatefulSetListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Site = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataK8SApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplicaSetListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataK8SApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplicaSetListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplicaSetListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Site = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataK8SApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataK8SApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Site = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataK8SApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CronJobListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataK8SApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CronJobListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CronJobListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Site = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataK8SApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VirtualMachineInstancesMetricsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataK8SApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VirtualMachineInstancesMetricsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VirtualMachineInstancesMetricsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Site = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v VirtualMachineInstancesMetricType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicCustomDataK8SApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= VirtualMachineInstancesMetricType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MetricSelector = append(m.MetricSelector, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicCustomDataK8SApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPublicCustomDataK8SApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPublicCustomDataK8SApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.MetricSelector) == 0 {
					m.MetricSelector = make([]VirtualMachineInstancesMetricType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v VirtualMachineInstancesMetricType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicCustomDataK8SApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= VirtualMachineInstancesMetricType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MetricSelector = append(m.MetricSelector, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MetricSelector", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataK8SApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VirtualMachineInstancesMetricsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataK8SApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VirtualMachineInstancesMetricsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VirtualMachineInstancesMetricsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &VirtualMachineInstancesMetricData{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataK8SApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VirtualMachineInstancesMetricData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataK8SApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VirtualMachineInstancesMetricData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VirtualMachineInstancesMetricData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= VirtualMachineInstancesMetricType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &VirtualMachineInstancesMetricTypeData{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unit", wireType)
			}
			m.Unit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Unit |= schema.UnitType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataK8SApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VirtualMachineInstancesMetricTypeData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataK8SApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VirtualMachineInstancesMetricTypeData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VirtualMachineInstancesMetricTypeData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicCustomDataK8SApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicCustomDataK8SApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPublicCustomDataK8SApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPublicCustomDataK8SApi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicCustomDataK8SApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthPublicCustomDataK8SApi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthPublicCustomDataK8SApi
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPublicCustomDataK8SApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthPublicCustomDataK8SApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, &schema.MetricValue{})
			if err := m.Values[len(m.Values)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataK8SApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodsMetricsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataK8SApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodsMetricsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodsMetricsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Site = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v PodsMetricType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicCustomDataK8SApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= PodsMetricType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MetricSelector = append(m.MetricSelector, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicCustomDataK8SApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPublicCustomDataK8SApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPublicCustomDataK8SApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.MetricSelector) == 0 {
					m.MetricSelector = make([]PodsMetricType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v PodsMetricType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicCustomDataK8SApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= PodsMetricType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MetricSelector = append(m.MetricSelector, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MetricSelector", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filters", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filters = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType == 0 {
				var v PodsMetricLabel
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicCustomDataK8SApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= PodsMetricLabel(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.GroupBy = append(m.GroupBy, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicCustomDataK8SApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPublicCustomDataK8SApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPublicCustomDataK8SApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.GroupBy) == 0 {
					m.GroupBy = make([]PodsMetricLabel, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v PodsMetricLabel
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicCustomDataK8SApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= PodsMetricLabel(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.GroupBy = append(m.GroupBy, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupBy", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataK8SApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodsMetricsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataK8SApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodsMetricsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodsMetricsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &PodsMetricData{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataK8SApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodsMetricData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataK8SApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodsMetricData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodsMetricData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= PodsMetricType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &PodsMetricTypeData{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unit", wireType)
			}
			m.Unit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Unit |= schema.UnitType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataK8SApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodsMetricTypeData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomDataK8SApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodsMetricTypeData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodsMetricTypeData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicCustomDataK8SApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicCustomDataK8SApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPublicCustomDataK8SApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPublicCustomDataK8SApi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicCustomDataK8SApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthPublicCustomDataK8SApi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthPublicCustomDataK8SApi
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPublicCustomDataK8SApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthPublicCustomDataK8SApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, &schema.MetricValue{})
			if err := m.Values[len(m.Values)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomDataK8SApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomDataK8SApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublicCustomDataK8SApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublicCustomDataK8SApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomDataK8SApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPublicCustomDataK8SApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPublicCustomDataK8SApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPublicCustomDataK8SApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPublicCustomDataK8SApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublicCustomDataK8SApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPublicCustomDataK8SApi = fmt.Errorf("proto: unexpected end of group")
)

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/site/public_customapi.proto

// Site status
//
// x-displayName: "Site"
// Site objects can be in various states and this state defined how (and if) site is functional.
// Object transitions are limited by state machine so only some transitions can be triggered by
// user and transition is always depending on previous state, e.g. site in UGPRADING state can't
// moved to different state by user and it's necessary to wait for the system to change state

package site

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Set state request
//
// x-displayName: "Set Status Request"
// Set status of the site
type SetStateReq struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-required
	// x-example: "system"
	// Site namespace
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Name
	//
	// x-displayName: "Name"
	// x-required
	// x-example: "ce398"
	// Site name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// State
	//
	// x-displayName: "State"
	// x-required
	// x-example: 3
	// Desired (target) state for site (3 = STANDBY)
	State SiteState `protobuf:"varint,3,opt,name=state,proto3,enum=ves.io.schema.site.SiteState" json:"state,omitempty"`
}

func (m *SetStateReq) Reset()      { *m = SetStateReq{} }
func (*SetStateReq) ProtoMessage() {}
func (*SetStateReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0a519523e807a75, []int{0}
}
func (m *SetStateReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetStateReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetStateReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetStateReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetStateReq.Merge(m, src)
}
func (m *SetStateReq) XXX_Size() int {
	return m.Size()
}
func (m *SetStateReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SetStateReq.DiscardUnknown(m)
}

var xxx_messageInfo_SetStateReq proto.InternalMessageInfo

func (m *SetStateReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *SetStateReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SetStateReq) GetState() SiteState {
	if m != nil {
		return m.State
	}
	return ONLINE
}

// Set state responde
//
// x-displayName: "Set Status Response"
// Response for set state request, empty because the only resturned information
// is currently error message
type SetStateResp struct {
}

func (m *SetStateResp) Reset()      { *m = SetStateResp{} }
func (*SetStateResp) ProtoMessage() {}
func (*SetStateResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0a519523e807a75, []int{1}
}
func (m *SetStateResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetStateResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetStateResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetStateResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetStateResp.Merge(m, src)
}
func (m *SetStateResp) XXX_Size() int {
	return m.Size()
}
func (m *SetStateResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SetStateResp.DiscardUnknown(m)
}

var xxx_messageInfo_SetStateResp proto.InternalMessageInfo

func init() {
	proto.RegisterType((*SetStateReq)(nil), "ves.io.schema.site.SetStateReq")
	golang_proto.RegisterType((*SetStateReq)(nil), "ves.io.schema.site.SetStateReq")
	proto.RegisterType((*SetStateResp)(nil), "ves.io.schema.site.SetStateResp")
	golang_proto.RegisterType((*SetStateResp)(nil), "ves.io.schema.site.SetStateResp")
}

func init() {
	proto.RegisterFile("ves.io/schema/site/public_customapi.proto", fileDescriptor_c0a519523e807a75)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/site/public_customapi.proto", fileDescriptor_c0a519523e807a75)
}

var fileDescriptor_c0a519523e807a75 = []byte{
	// 478 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xbf, 0x6e, 0x13, 0x41,
	0x10, 0xc6, 0x6f, 0x1d, 0x40, 0xe4, 0x40, 0x2e, 0xae, 0x72, 0x4c, 0x58, 0xac, 0x6b, 0x08, 0x88,
	0xdb, 0x45, 0x8e, 0x68, 0xa8, 0xf8, 0xd3, 0x40, 0x05, 0x8a, 0x3b, 0x1a, 0xb4, 0x77, 0x8c, 0x2f,
	0x0b, 0xbe, 0xdb, 0xcd, 0xee, 0xdc, 0x01, 0x42, 0x91, 0x90, 0x9f, 0x00, 0x89, 0x97, 0xe0, 0x1d,
	0xd2, 0xb8, 0x83, 0x0a, 0x59, 0xd0, 0xa4, 0xc4, 0x67, 0x0a, 0xca, 0x3c, 0x00, 0x05, 0xf2, 0x5e,
	0x6c, 0xc7, 0xc2, 0x4a, 0x37, 0x33, 0xbf, 0xef, 0x66, 0xe6, 0x66, 0x3f, 0xff, 0x56, 0x09, 0x96,
	0x49, 0xc5, 0x6d, 0xb2, 0x0f, 0x99, 0xe0, 0x56, 0x22, 0x70, 0x5d, 0xc4, 0x03, 0x99, 0xbc, 0x4c,
	0x0a, 0x8b, 0x2a, 0x13, 0x5a, 0x32, 0x6d, 0x14, 0xaa, 0x20, 0xa8, 0xa5, 0xac, 0x96, 0xb2, 0x99,
	0xb4, 0x1d, 0xa5, 0x12, 0xf7, 0x8b, 0x98, 0x25, 0x2a, 0xe3, 0xa9, 0x4a, 0x15, 0x77, 0xd2, 0xb8,
	0xe8, 0xbb, 0xcc, 0x25, 0x2e, 0xaa, 0x5b, 0xb4, 0xb7, 0x53, 0xa5, 0xd2, 0x01, 0x70, 0xa1, 0x25,
	0x17, 0x79, 0xae, 0x50, 0xa0, 0x54, 0xb9, 0x3d, 0xa5, 0xd7, 0x56, 0x77, 0x51, 0xfa, 0x2c, 0xa4,
	0x6b, 0x16, 0xc5, 0xf7, 0x1a, 0xe6, 0x7c, 0x6b, 0x95, 0x9f, 0x45, 0xe1, 0x2a, 0x2a, 0xc1, 0x42,
	0x5e, 0xae, 0xb6, 0x0f, 0xd1, 0xbf, 0xd2, 0x03, 0xec, 0xa1, 0x40, 0xd8, 0x83, 0x83, 0x60, 0xdb,
	0xdf, 0xcc, 0x45, 0x06, 0x56, 0x8b, 0x04, 0x5a, 0xa4, 0x43, 0x76, 0x36, 0xf7, 0x96, 0x85, 0x20,
	0xf0, 0x2f, 0xcc, 0x92, 0x56, 0xc3, 0x01, 0x17, 0x07, 0xbb, 0xfe, 0x45, 0x3b, 0xfb, 0xba, 0xb5,
	0xd1, 0x21, 0x3b, 0xcd, 0xee, 0x75, 0xf6, 0xff, 0xb5, 0x58, 0x4f, 0x22, 0xd4, 0x23, 0x6a, 0x6d,
	0xd8, 0xf4, 0xaf, 0x2e, 0xa7, 0x5a, 0xdd, 0xfd, 0x4b, 0xfc, 0xe6, 0x63, 0x77, 0x76, 0x57, 0x7b,
	0xf8, 0xfc, 0x69, 0x30, 0x22, 0xfe, 0xe5, 0xb9, 0x26, 0xb8, 0xb1, 0xb6, 0xeb, 0x72, 0xef, 0x76,
	0xe7, 0x7c, 0x81, 0xd5, 0xe1, 0x41, 0xf5, 0xb5, 0xd5, 0x2d, 0xc1, 0x46, 0x52, 0x45, 0x32, 0xef,
	0x1b, 0x61, 0xd1, 0x14, 0x09, 0x16, 0x06, 0xa2, 0xb7, 0x46, 0x22, 0xdc, 0xe9, 0x2c, 0x20, 0x82,
	0xc9, 0xc5, 0xa0, 0x2e, 0x0f, 0x7f, 0xfe, 0xfe, 0xdc, 0xb8, 0x17, 0xde, 0x3d, 0x35, 0x07, 0x5f,
	0x1c, 0xc3, 0xf2, 0x0f, 0x8b, 0xf8, 0xb0, 0x7e, 0x16, 0x57, 0x38, 0xe4, 0xee, 0x17, 0xef, 0x93,
	0xdb, 0xed, 0x9b, 0xa3, 0x23, 0xb2, 0xf1, 0xe3, 0x88, 0x6c, 0xad, 0xd9, 0xed, 0x59, 0xfc, 0x1a,
	0x12, 0x1c, 0x7e, 0x6f, 0x35, 0x1e, 0x90, 0x47, 0x43, 0x32, 0x9e, 0x50, 0xef, 0x78, 0x42, 0xbd,
	0x93, 0x09, 0x25, 0x1f, 0x2b, 0x4a, 0xbe, 0x54, 0x94, 0x7c, 0xab, 0x28, 0x19, 0x57, 0x94, 0xfc,
	0xaa, 0x28, 0xf9, 0x53, 0x51, 0xef, 0xa4, 0xa2, 0xe4, 0xd3, 0x94, 0x7a, 0xa3, 0x29, 0x25, 0xe3,
	0x29, 0xf5, 0x8e, 0xa7, 0xd4, 0x7b, 0xf1, 0x24, 0x55, 0xfa, 0x4d, 0xca, 0x4a, 0x35, 0x40, 0x30,
	0x46, 0xb0, 0xc2, 0x72, 0x17, 0xf4, 0x95, 0xc9, 0x22, 0x6d, 0x54, 0x29, 0x5f, 0x81, 0x89, 0xe6,
	0x98, 0xeb, 0x38, 0x55, 0x1c, 0xde, 0xe1, 0xdc, 0x4d, 0x4b, 0x53, 0xc5, 0x97, 0x9c, 0x21, 0x76,
	0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0xef, 0xae, 0x92, 0xce, 0x1a, 0x03, 0x00, 0x00,
}

func (this *SetStateReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetStateReq)
	if !ok {
		that2, ok := that.(SetStateReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.State != that1.State {
		return false
	}
	return true
}
func (this *SetStateResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetStateResp)
	if !ok {
		that2, ok := that.(SetStateResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SetStateReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&site.SetStateReq{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetStateResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&site.SetStateResp{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPublicCustomapi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CustomStateAPIClient is the client API for CustomStateAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomStateAPIClient interface {
	// Set site state
	//
	// x-displayName: "Set site state"
	// Request changing site state but this request goes through validation as some
	// trainsitions are not allowed.
	// It can be used to decomission site by sending state DECOMISSIONING. Example of
	// forbidden state is PROVISIONING and UPGRADING.
	SetState(ctx context.Context, in *SetStateReq, opts ...grpc.CallOption) (*SetStateResp, error)
}

type customStateAPIClient struct {
	cc *grpc.ClientConn
}

func NewCustomStateAPIClient(cc *grpc.ClientConn) CustomStateAPIClient {
	return &customStateAPIClient{cc}
}

func (c *customStateAPIClient) SetState(ctx context.Context, in *SetStateReq, opts ...grpc.CallOption) (*SetStateResp, error) {
	out := new(SetStateResp)
	err := c.cc.Invoke(ctx, "/ves.io.schema.site.CustomStateAPI/SetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomStateAPIServer is the server API for CustomStateAPI service.
type CustomStateAPIServer interface {
	// Set site state
	//
	// x-displayName: "Set site state"
	// Request changing site state but this request goes through validation as some
	// trainsitions are not allowed.
	// It can be used to decomission site by sending state DECOMISSIONING. Example of
	// forbidden state is PROVISIONING and UPGRADING.
	SetState(context.Context, *SetStateReq) (*SetStateResp, error)
}

// UnimplementedCustomStateAPIServer can be embedded to have forward compatible implementations.
type UnimplementedCustomStateAPIServer struct {
}

func (*UnimplementedCustomStateAPIServer) SetState(ctx context.Context, req *SetStateReq) (*SetStateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetState not implemented")
}

func RegisterCustomStateAPIServer(s *grpc.Server, srv CustomStateAPIServer) {
	s.RegisterService(&_CustomStateAPI_serviceDesc, srv)
}

func _CustomStateAPI_SetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetStateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomStateAPIServer).SetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.site.CustomStateAPI/SetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomStateAPIServer).SetState(ctx, req.(*SetStateReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomStateAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.site.CustomStateAPI",
	HandlerType: (*CustomStateAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetState",
			Handler:    _CustomStateAPI_SetState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/site/public_customapi.proto",
}

func (m *SetStateReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetStateReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetStateReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetStateResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetStateResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetStateResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintPublicCustomapi(dAtA []byte, offset int, v uint64) int {
	offset -= sovPublicCustomapi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SetStateReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovPublicCustomapi(uint64(m.State))
	}
	return n
}

func (m *SetStateResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovPublicCustomapi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPublicCustomapi(x uint64) (n int) {
	return sovPublicCustomapi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SetStateReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetStateReq{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetStateResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetStateResp{`,
		`}`,
	}, "")
	return s
}
func valueToStringPublicCustomapi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SetStateReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetStateReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetStateReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= SiteState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetStateResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetStateResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetStateResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublicCustomapi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPublicCustomapi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPublicCustomapi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPublicCustomapi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPublicCustomapi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublicCustomapi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPublicCustomapi = fmt.Errorf("proto: unexpected end of group")
)

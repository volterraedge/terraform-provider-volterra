// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package site

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *GlobalNetworkItem) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalNetworkItem) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GlobalNetworkItem) DeepCopy() *GlobalNetworkItem {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalNetworkItem{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalNetworkItem) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalNetworkItem) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalNetworkItemValidator().Validate(ctx, m, opts...)
}

func (m *GlobalNetworkItem) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetRefDRefInfo()

}

func (m *GlobalNetworkItem) GetRefDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetRef()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("GlobalNetworkItem.ref[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "virtual_network.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "ref",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetRefDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalNetworkItem) GetRefDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "virtual_network.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: virtual_network")
	}
	for _, ref := range m.GetRef() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateGlobalNetworkItem struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalNetworkItem) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalNetworkItem)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalNetworkItem got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["description"]; exists {

		vOpts := append(opts, db.WithValidateField("description"))
		if err := fv(ctx, m.GetDescription(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["ref"]; exists {

		vOpts := append(opts, db.WithValidateField("ref"))
		for idx, item := range m.GetRef() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalNetworkItemValidator = func() *ValidateGlobalNetworkItem {
	v := &ValidateGlobalNetworkItem{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func GlobalNetworkItemValidator() db.Validator {
	return DefaultGlobalNetworkItemValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalNetworkListRequest) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalNetworkListRequest) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GlobalNetworkListRequest) DeepCopy() *GlobalNetworkListRequest {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalNetworkListRequest{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalNetworkListRequest) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalNetworkListRequest) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalNetworkListRequestValidator().Validate(ctx, m, opts...)
}

type ValidateGlobalNetworkListRequest struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalNetworkListRequest) SiteValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for site")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalNetworkListRequest) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalNetworkListRequest)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalNetworkListRequest got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["site"]; exists {

		vOpts := append(opts, db.WithValidateField("site"))
		if err := fv(ctx, m.GetSite(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalNetworkListRequestValidator = func() *ValidateGlobalNetworkListRequest {
	v := &ValidateGlobalNetworkListRequest{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhSite := v.SiteValidationRuleHandler
	rulesSite := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhSite(rulesSite)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalNetworkListRequest.site: %s", err)
		panic(errMsg)
	}
	v.FldValidators["site"] = vFn

	return v
}()

func GlobalNetworkListRequestValidator() db.Validator {
	return DefaultGlobalNetworkListRequestValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalNetworkListResp) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalNetworkListResp) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GlobalNetworkListResp) DeepCopy() *GlobalNetworkListResp {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalNetworkListResp{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalNetworkListResp) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalNetworkListResp) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalNetworkListRespValidator().Validate(ctx, m, opts...)
}

func (m *GlobalNetworkListResp) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetItemsDRefInfo()

}

// GetDRefInfo for the field's type
func (m *GlobalNetworkListResp) GetItemsDRefInfo() ([]db.DRefInfo, error) {
	if m.GetItems() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetItems() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetItems() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("items[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

type ValidateGlobalNetworkListResp struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalNetworkListResp) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalNetworkListResp)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalNetworkListResp got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["items"]; exists {

		vOpts := append(opts, db.WithValidateField("items"))
		for idx, item := range m.GetItems() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalNetworkListRespValidator = func() *ValidateGlobalNetworkListResp {
	v := &ValidateGlobalNetworkListResp{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func GlobalNetworkListRespValidator() db.Validator {
	return DefaultGlobalNetworkListRespValidator
}

// augmented methods on protoc/std generated struct

func (m *SegmentItem) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SegmentItem) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SegmentItem) DeepCopy() *SegmentItem {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SegmentItem{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SegmentItem) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SegmentItem) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SegmentItemValidator().Validate(ctx, m, opts...)
}

func (m *SegmentItem) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetRefDRefInfo()

}

func (m *SegmentItem) GetRefDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetRef()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("SegmentItem.ref[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "segment.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "ref",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetRefDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *SegmentItem) GetRefDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "segment.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: segment")
	}
	for _, ref := range m.GetRef() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateSegmentItem struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSegmentItem) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SegmentItem)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SegmentItem got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["description"]; exists {

		vOpts := append(opts, db.WithValidateField("description"))
		if err := fv(ctx, m.GetDescription(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["ref"]; exists {

		vOpts := append(opts, db.WithValidateField("ref"))
		for idx, item := range m.GetRef() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSegmentItemValidator = func() *ValidateSegmentItem {
	v := &ValidateSegmentItem{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func SegmentItemValidator() db.Validator {
	return DefaultSegmentItemValidator
}

// augmented methods on protoc/std generated struct

func (m *SegmentListRequest) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SegmentListRequest) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SegmentListRequest) DeepCopy() *SegmentListRequest {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SegmentListRequest{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SegmentListRequest) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SegmentListRequest) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SegmentListRequestValidator().Validate(ctx, m, opts...)
}

type ValidateSegmentListRequest struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSegmentListRequest) SiteValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for site")
	}

	return validatorFn, nil
}

func (v *ValidateSegmentListRequest) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SegmentListRequest)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SegmentListRequest got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["site"]; exists {

		vOpts := append(opts, db.WithValidateField("site"))
		if err := fv(ctx, m.GetSite(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSegmentListRequestValidator = func() *ValidateSegmentListRequest {
	v := &ValidateSegmentListRequest{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhSite := v.SiteValidationRuleHandler
	rulesSite := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhSite(rulesSite)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SegmentListRequest.site: %s", err)
		panic(errMsg)
	}
	v.FldValidators["site"] = vFn

	return v
}()

func SegmentListRequestValidator() db.Validator {
	return DefaultSegmentListRequestValidator
}

// augmented methods on protoc/std generated struct

func (m *SegmentListResp) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SegmentListResp) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SegmentListResp) DeepCopy() *SegmentListResp {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SegmentListResp{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SegmentListResp) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SegmentListResp) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SegmentListRespValidator().Validate(ctx, m, opts...)
}

func (m *SegmentListResp) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetItemsDRefInfo()

}

// GetDRefInfo for the field's type
func (m *SegmentListResp) GetItemsDRefInfo() ([]db.DRefInfo, error) {
	if m.GetItems() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetItems() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetItems() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("items[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

type ValidateSegmentListResp struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSegmentListResp) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SegmentListResp)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SegmentListResp got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["items"]; exists {

		vOpts := append(opts, db.WithValidateField("items"))
		for idx, item := range m.GetItems() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSegmentListRespValidator = func() *ValidateSegmentListResp {
	v := &ValidateSegmentListResp{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func SegmentListRespValidator() db.Validator {
	return DefaultSegmentListRespValidator
}

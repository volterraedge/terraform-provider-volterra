//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.
//

package site

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"strings"

	"github.com/grpc-ecosystem/grpc-gateway/runtime"
	multierror "github.com/hashicorp/go-multierror"
	"go.uber.org/zap"
	"google.golang.org/grpc"

	"gopkg.volterra.us/stdlib/client"
	"gopkg.volterra.us/stdlib/client/configapi"
	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"
	"gopkg.volterra.us/stdlib/flags"
	"gopkg.volterra.us/stdlib/log"
	"gopkg.volterra.us/stdlib/server"
	"gopkg.volterra.us/stdlib/svcfw"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
)

const (
	// CreateRequestFQN is the fully-qualified-name of the CreateRequest message
	CreateRequestFQN = "ves.io.schema.site.CreateRequest"
	// CreateResponseFQN is the fully-qualified-name of the CreateResponse message
	CreateResponseFQN = "ves.io.schema.site.CreateResponse"
	// ReplaceRequestFQN is the fully-qualified-name of the ReplaceRequest message
	ReplaceRequestFQN = "ves.io.schema.site.ReplaceRequest"
	// ReplaceResponseFQN is the fully-qualified-name of the ReplaceResponse message
	ReplaceResponseFQN = "ves.io.schema.site.ReplaceResponse"
	// GetRequestFQN is the fully-qualified-name of the GetRequest message
	GetRequestFQN = "ves.io.schema.site.GetRequest"
	// GetResponseFQN is the fully-qualified-name of the GetResponse message
	GetResponseFQN = "ves.io.schema.site.GetResponse"
	// ListRequestFQN is the fully-qualified-name of the ListRequest message
	ListRequestFQN = "ves.io.schema.site.ListRequest"
	// ListResponseFQN is the fully-qualified-name of the ListResponse message
	ListResponseFQN = "ves.io.schema.site.ListResponse"
	// DeleteRequestFQN is the fully-qualified-name of the DeleteRequest message
	DeleteRequestFQN = "ves.io.schema.site.DeleteRequest"
	// DeleteResponseFQN is the fully-qualified-name of the DeleteResponse message
	DeleteResponseFQN = "ves.io.schema.site.DeleteResponse"
)

func NewReplaceRequest(e db.Entry) (*ReplaceRequest, error) {
	r := &ReplaceRequest{}
	if e == nil {
		return r, nil
	}
	r.FromObject(e)
	return r, nil
}

func NewGetRequest(key string, opts ...server.CRUDCallOpt) (*GetRequest, error) {
	strs := strings.Split(key, "/")
	if len(strs) != 2 {
		return nil, fmt.Errorf("key must have namespace and name separated by /, but found %s", key)
	}
	ccOpts := server.NewCRUDCallOpts()
	for _, o := range opts {
		o(ccOpts)
	}
	var rspFmt GetResponseFormatCode
	switch ccOpts.ResponseFormat {
	case server.DefaultForm:
		rspFmt = GET_RSP_FORMAT_DEFAULT
	case server.ReplaceRequestForm:
		rspFmt = GET_RSP_FORMAT_FOR_REPLACE
	case server.StatusForm:
		rspFmt = GET_RSP_FORMAT_STATUS
	case server.GetSpecForm:
		rspFmt = GET_RSP_FORMAT_READ
	default:
		return nil, fmt.Errorf("Unsupported Response Format %s", ccOpts.ResponseFormat)
	}
	return &GetRequest{Namespace: strs[0], Name: strs[1], ResponseFormat: rspFmt}, nil
}
func (m *GetRequest) ResponseFormatString() string {
	return m.GetResponseFormat().String()
}

func NewListRequest(opts ...server.CRUDCallOpt) *ListRequest {
	ccOpts := server.NewCRUDCallOpts()
	for _, o := range opts {
		o(ccOpts)
	}
	return &ListRequest{Namespace: ccOpts.Namespace}
}

// GRPC Client
type crudAPIGrpcClient struct {
	conn       *grpc.ClientConn
	grpcClient APIClient
}

func (c *crudAPIGrpcClient) Create(ctx context.Context, e db.Entry, opts ...server.CRUDCallOpt) (db.Entry, error) {

	return nil, fmt.Errorf("Not implemented")

}

func (c *crudAPIGrpcClient) Replace(ctx context.Context, e db.Entry, opts ...server.CRUDCallOpt) error {

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	var req *ReplaceRequest
	if cco.RequestProto != nil {
		r, ok := cco.RequestProto.(*ReplaceRequest)
		if !ok {
			return fmt.Errorf("%T is not *ReplaceRequest", cco.RequestProto)
		}
		req = r
	} else {
		r, err := NewReplaceRequest(e)
		if err != nil {
			return errors.Wrap(err, "Replace")
		}
		req = r
		if cco.ObjToMsgConverter != nil {
			if err := cco.ObjToMsgConverter(e, req); err != nil {
				return err
			}
		}
	}

	ctx = client.AddHdrsToCtx(cco.Headers, ctx)
	req.ResourceVersion = cco.ResourceVersion

	rsp, err := c.grpcClient.Replace(ctx, req, cco.GrpcCallOpts...)
	if err != nil {
		return err
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return nil

}

func (c *crudAPIGrpcClient) GetRaw(ctx context.Context, key string, opts ...server.CRUDCallOpt) (*GetResponse, error) {
	req, err := NewGetRequest(key, opts...)
	if err != nil {
		return nil, errors.Wrap(err, "Get")
	}
	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	ctx = client.AddHdrsToCtx(cco.Headers, ctx)

	rsp, err := c.grpcClient.Get(ctx, req, cco.GrpcCallOpts...)
	if err != nil {
		return nil, err
	}
	if cco.OutResourceVersion != nil {
		*cco.OutResourceVersion = rsp.ResourceVersion
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return rsp, nil
}

func (c *crudAPIGrpcClient) Get(ctx context.Context, key string, opts ...server.CRUDCallOpt) (db.Entry, error) {

	gRsp, err := c.GetRaw(ctx, key, opts...)
	if gRsp != nil {
		obj := NewDBObject(gRsp.Object)
		if gRsp.Object == nil {
			gRsp.ToObject(obj)
		}
		return obj, err
	}
	return nil, err

}

func (c *crudAPIGrpcClient) GetDetail(ctx context.Context, key string, nef db.NewEntryFunc, opts ...server.CRUDCallOpt) (*server.GetResponse, error) {

	gRsp, err := c.GetRaw(ctx, key, opts...)
	respDetail := server.GetResponse{}
	if gRsp != nil {
		respDetail.Entry = NewDBObject(gRsp.Object)
		if gRsp.Object == nil {
			gRsp.ToObject(respDetail.Entry)
		}
		for _, status := range gRsp.Status {
			respDetail.BackRefs = append(respDetail.BackRefs, NewDBStatusObject(status))
		}

		return &respDetail, err
	}
	return nil, err

}

func (c *crudAPIGrpcClient) ListIDs(ctx context.Context, opts ...server.CRUDCallOpt) ([]string, error) {

	idSet := []string{}
	listRsp, err := c.List(ctx, opts...)
	if listRsp == nil {
		return idSet, err
	}
	for _, li := range listRsp.GetItems() {
		idSet = append(idSet, li.GetUid())
	}
	return idSet, err

}

func (c *crudAPIGrpcClient) ListItems(ctx context.Context, opts ...server.CRUDCallOpt) ([]server.ListItem, error) {

	sliSet := []server.ListItem{}
	listRsp, err := c.List(ctx, opts...)
	if listRsp == nil {
		return sliSet, err
	}
	for _, li := range listRsp.GetItems() {
		sliSet = append(sliSet, li)
	}
	return sliSet, err

}

func (c *crudAPIGrpcClient) List(ctx context.Context, opts ...server.CRUDCallOpt) (*ListResponse, error) {
	req := NewListRequest(opts...)

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	ctx = client.AddHdrsToCtx(cco.Headers, ctx)

	switch len(cco.LabelFilter) {
	case 0:
	case 1:
		req.LabelFilter = cco.LabelFilter[0]
	default:
		return nil, fmt.Errorf("Only one label selector expression can be provided, got %d: %s", len(cco.LabelFilter), cco.LabelFilter)
	}
	req.ReportFields = cco.ReportFields
	req.ReportStatusFields = cco.ReportStatusFields
	rsp, err := c.grpcClient.List(ctx, req, cco.GrpcCallOpts...)
	if err != nil {
		return nil, err
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return rsp, nil
}

func (c *crudAPIGrpcClient) ListStream(ctx context.Context, opts ...server.CRUDCallOpt) (server.ListStreamRsp, error) {
	return nil, fmt.Errorf("Not implemented")
}

func (c *crudAPIGrpcClient) Delete(ctx context.Context, key string, opts ...server.CRUDCallOpt) error {

	return fmt.Errorf("Not implemented")

}

func NewCRUDAPIGrpcClient(cc *grpc.ClientConn) server.CRUDClient {
	ccl := &crudAPIGrpcClient{cc, NewAPIClient(cc)}
	return ccl
}

// REST Client
type crudAPIRestClient struct {
	baseURL string
	client  http.Client
}

func (c *crudAPIRestClient) Create(ctx context.Context, e db.Entry, opts ...server.CRUDCallOpt) (db.Entry, error) {

	return nil, fmt.Errorf("Not implemented")

}

func (c *crudAPIRestClient) Replace(ctx context.Context, e db.Entry, opts ...server.CRUDCallOpt) error {

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	var rReq *ReplaceRequest
	if cco.RequestProto != nil {
		r, ok := cco.RequestProto.(*ReplaceRequest)
		if !ok {
			return fmt.Errorf("%T is not *ReplaceRequest", cco.RequestProto)
		}
		rReq = r
	} else {
		r, err := NewReplaceRequest(e)
		if err != nil {
			return errors.Wrap(err, "Creating new replace request")
		}
		rReq = r
		if cco.ObjToMsgConverter != nil {
			if err := cco.ObjToMsgConverter(e, rReq); err != nil {
				return err
			}
		}
	}

	got := 0
	if e != nil {
		got++
	}
	if cco.RequestProto != nil {
		got++
	}
	if cco.ReplaceJSONReq != "" {
		got++
	}
	if got != 1 {
		return fmt.Errorf("Only one of entry, WithRequestProto() or WithReplaceJSONRequest() should be specified")
	}
	if e == nil && cco.RequestProto == nil && cco.ReplaceJSONReq == "" {
		return fmt.Errorf("Neither entry nor WithRequestProto() nor WithReplaceJSONRequest() specified")
	}

	var jsn, namespace, name string
	var err error
	_ = namespace
	if e != nil || cco.RequestProto != nil {
		rReq.ResourceVersion = cco.ResourceVersion
		jsn, err = rReq.ToJSON()
		if err != nil {
			return errors.Wrap(err, "RestClient Replace")
		}
		namespace = rReq.GetMetadata().GetNamespace()
		name = rReq.GetMetadata().GetName()
	} else {
		jsn = cco.ReplaceJSONReq
		reqMap := make(map[string]interface{})
		if err := json.Unmarshal([]byte(jsn), &reqMap); err != nil {
			return errors.Wrapf(err, "Unmarshaling ReplaceJSONReq")
		}
		md, ok := reqMap["metadata"].(map[string]interface{})
		if !ok {
			return fmt.Errorf("ReplaceJSONReq does not have 'metadata'")
		}
		if val, ok := md["namespace"].(string); ok {
			namespace = val
		}
		if val, ok := md["name"].(string); ok {
			name = val
		}
	}

	url := fmt.Sprintf("%s/public/namespaces/%s/sites/%s", c.baseURL, namespace, name)

	hReq, err := http.NewRequest(http.MethodPut, url, bytes.NewBuffer([]byte(jsn)))
	if err != nil {
		return errors.Wrap(err, "RestClient replace")
	}
	hReq = hReq.WithContext(ctx)
	client.AddHdrsToReq(cco.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return err
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return fmt.Errorf("Unsuccessful PUT at URL %s, status code %d, body %s, err %s", url, rsp.StatusCode, body, err)
	}

	if _, err := ioutil.ReadAll(rsp.Body); err != nil {
		return errors.Wrap(err, "RestClient replace")
	}

	configapi.TranscribeCall(ctx, rReq, nil)
	return nil

}

func (c *crudAPIRestClient) GetRaw(ctx context.Context, key string, opts ...server.CRUDCallOpt) (*GetResponse, error) {
	req, err := NewGetRequest(key, opts...)
	if err != nil {
		return nil, errors.Wrap(err, "Get")
	}

	url := fmt.Sprintf("%s/public/namespaces/%s/sites/%s", c.baseURL, req.Namespace, req.Name)
	hReq, err := http.NewRequest("GET", url, nil)
	if err != nil {
		return nil, err
	}
	hReq = hReq.WithContext(ctx)

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	client.AddHdrsToReq(cco.Headers, hReq)

	q := hReq.URL.Query()
	q.Add("response_format", fmt.Sprintf("%d", req.ResponseFormat))
	hReq.URL.RawQuery += q.Encode()

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, err
	}
	defer rsp.Body.Close()
	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful GET at URL %s, status code %d, body %s, err %s", url, rsp.StatusCode, body, err)
	}
	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "RestClient Get")
	}

	rspo := &GetResponse{}
	if err := codec.FromJSON(string(body), rspo); err != nil {
		return nil, errors.Wrap(err, "Converting json to response protobuf message")
	}
	if cco.OutResourceVersion != nil {
		*cco.OutResourceVersion = rspo.ResourceVersion
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rspo
		cco.OutCallResponse.JSON = string(body)
	}
	configapi.TranscribeCall(ctx, req, rspo)
	return rspo, nil
}

func (c *crudAPIRestClient) Get(ctx context.Context, key string, opts ...server.CRUDCallOpt) (db.Entry, error) {

	gRsp, err := c.GetRaw(ctx, key, opts...)
	if gRsp != nil {
		obj := NewDBObject(gRsp.Object)
		if gRsp.Object == nil {
			gRsp.ToObject(obj)
		}
		return obj, err
	}
	return nil, err

}

func (c *crudAPIRestClient) GetDetail(ctx context.Context, key string, nef db.NewEntryFunc, opts ...server.CRUDCallOpt) (*server.GetResponse, error) {

	gRsp, err := c.GetRaw(ctx, key, opts...)
	respDetail := server.GetResponse{}
	if gRsp != nil {
		respDetail.Entry = NewDBObject(gRsp.Object)
		if gRsp.Object == nil {
			gRsp.ToObject(respDetail.Entry)
		}
		for _, status := range gRsp.Status {
			respDetail.BackRefs = append(respDetail.BackRefs, NewDBStatusObject(status))
		}

		return &respDetail, err
	}

	return nil, err

}

func (c *crudAPIRestClient) ListIDs(ctx context.Context, opts ...server.CRUDCallOpt) ([]string, error) {

	idSet := []string{}
	listRsp, err := c.List(ctx, opts...)
	if listRsp == nil {
		return idSet, err
	}
	for _, li := range listRsp.GetItems() {
		idSet = append(idSet, li.GetUid())
	}
	return idSet, err

}

func (c *crudAPIRestClient) ListItems(ctx context.Context, opts ...server.CRUDCallOpt) ([]server.ListItem, error) {

	sliSet := []server.ListItem{}
	listRsp, err := c.List(ctx, opts...)
	if listRsp == nil {
		return sliSet, err
	}
	for _, li := range listRsp.GetItems() {
		sliSet = append(sliSet, li)
	}
	return sliSet, err

}

func (c *crudAPIRestClient) List(ctx context.Context, opts ...server.CRUDCallOpt) (*ListResponse, error) {
	req := NewListRequest(opts...)
	_ = req
	url := fmt.Sprintf("%s/public/namespaces/%s/sites", c.baseURL, req.Namespace)

	hReq, err := http.NewRequest("GET", url, nil)
	if err != nil {
		return nil, err
	}
	hReq = hReq.WithContext(ctx)

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	client.AddHdrsToReq(cco.Headers, hReq)

	q := hReq.URL.Query()
	switch len(cco.LabelFilter) {
	case 0:
	case 1:
		q.Add("label_filter", cco.LabelFilter[0])
	default:
		return nil, fmt.Errorf("Only one label selector expression can be provided, got %d: %s", len(cco.LabelFilter), cco.LabelFilter)
	}

	for _, fName := range cco.ReportFields {
		q.Add("report_fields", fName)
	}
	for _, fName := range cco.ReportStatusFields {
		q.Add("report_status_fields", fName)
	}

	hReq.URL.RawQuery += q.Encode()
	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, err
	}
	defer rsp.Body.Close()
	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful List at URL %s, status code %d, body %s, err %s", url, rsp.StatusCode, body, err)
	}
	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "RestClient List")
	}

	rspo := &ListResponse{}
	if err := codec.FromJSON(string(body), rspo); err != nil {
		return nil, errors.Wrap(err, "Converting json to response protobuf message")
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rspo
		cco.OutCallResponse.JSON = string(body)
	}
	configapi.TranscribeCall(ctx, req, rspo)
	return rspo, nil
}

func (c *crudAPIRestClient) ListStream(ctx context.Context, opts ...server.CRUDCallOpt) (server.ListStreamRsp, error) {
	return nil, fmt.Errorf("Not implemented")
}

func (c *crudAPIRestClient) Delete(ctx context.Context, key string, opts ...server.CRUDCallOpt) error {

	return fmt.Errorf("Not implemented")

}

func NewCRUDAPIRestClient(baseURL string, cl http.Client) server.CRUDClient {
	crcl := &crudAPIRestClient{baseURL, cl}
	return crcl
}

// INPROC Client (satisfying APIClient interface)
type APIInprocClient struct {
	crudCl *crudAPIInprocClient
}

func (c *APIInprocClient) Replace(ctx context.Context, req *ReplaceRequest, opts ...grpc.CallOption) (*ReplaceResponse, error) {
	ah := c.crudCl.svc.GetAPIHandler("ves.io.schema.site.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		err := fmt.Errorf("No CRUD Server for ves.io.schema.site")
		return nil, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}
	if rsp, err := oah.Replace(ctx, req); err != nil {
		return rsp, err
	}
	return NewObjectReplaceRsp(nil)
}

func (c *APIInprocClient) Get(ctx context.Context, req *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	ah := c.crudCl.svc.GetAPIHandler("ves.io.schema.site.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		err := fmt.Errorf("No CRUD Server for ves.io.schema.site")
		return nil, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}
	rsp, err := oah.Get(ctx, req)
	if err != nil {
		return rsp, err
	}
	return rsp, nil
}

func (c *APIInprocClient) List(ctx context.Context, req *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	ah := c.crudCl.svc.GetAPIHandler("ves.io.schema.site.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		err := fmt.Errorf("No CRUD Server for ves.io.schema.site")
		return nil, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}
	rsp, err := oah.List(ctx, req)
	if err != nil {
		return rsp, err
	}
	return rsp, nil
}

func NewAPIInprocClient(svc svcfw.Service) APIClient {
	crudCl := newCRUDAPIInprocClient(svc)
	return &APIInprocClient{crudCl}
}

// INPROC CRUD Client (satisfying server.CRUDClient interface)
type crudAPIInprocClient struct {
	svc svcfw.Service
}

func (c *crudAPIInprocClient) Create(ctx context.Context, e db.Entry, opts ...server.CRUDCallOpt) (db.Entry, error) {

	return nil, fmt.Errorf("Not implemented")

}

func (c *crudAPIInprocClient) Replace(ctx context.Context, e db.Entry, opts ...server.CRUDCallOpt) error {

	ah := c.svc.GetAPIHandler("ves.io.schema.site.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		return fmt.Errorf("No CRUD Server for ves.io.schema.site")
	}

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	req, err := NewReplaceRequest(e)
	if err != nil {
		return errors.Wrap(err, "Creating new replace request")
	}
	if cco.ObjToMsgConverter != nil {
		if err := cco.ObjToMsgConverter(e, req); err != nil {
			return err
		}
	}

	req.ResourceVersion = cco.ResourceVersion

	rsp, err := oah.Replace(ctx, req)

	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return err

}

func (c *crudAPIInprocClient) GetRaw(ctx context.Context, key string, opts ...server.CRUDCallOpt) (*GetResponse, error) {
	ah := c.svc.GetAPIHandler("ves.io.schema.site.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		return nil, fmt.Errorf("No CRUD Server for ves.io.schema.site")
	}

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	req, err := NewGetRequest(key, opts...)
	if err != nil {
		return nil, errors.Wrap(err, "Get")
	}
	rsp, err := oah.Get(ctx, req)
	if err != nil {
		return nil, err
	}
	if cco.OutResourceVersion != nil {
		*cco.OutResourceVersion = rsp.ResourceVersion
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return rsp, nil
}

func (c *crudAPIInprocClient) Get(ctx context.Context, key string, opts ...server.CRUDCallOpt) (db.Entry, error) {

	gRsp, err := c.GetRaw(ctx, key, opts...)
	if gRsp != nil {
		obj := NewDBObject(gRsp.Object)
		if gRsp.Object == nil {
			gRsp.ToObject(obj)
		}
		return obj, err
	}
	return nil, err

}

func (c *crudAPIInprocClient) GetDetail(ctx context.Context, key string, nef db.NewEntryFunc, opts ...server.CRUDCallOpt) (*server.GetResponse, error) {

	gRsp, err := c.GetRaw(ctx, key, opts...)
	respDetail := server.GetResponse{}
	if gRsp != nil {
		respDetail.Entry = NewDBObject(gRsp.Object)
		if gRsp.Object == nil {
			gRsp.ToObject(respDetail.Entry)
		}
		for _, status := range gRsp.Status {
			respDetail.BackRefs = append(respDetail.BackRefs, NewDBStatusObject(status))
		}

		return &respDetail, err
	}

	return nil, err

}

func (c *crudAPIInprocClient) ListIDs(ctx context.Context, opts ...server.CRUDCallOpt) ([]string, error) {

	idSet := []string{}
	listRsp, err := c.List(ctx, opts...)
	if listRsp == nil {
		return idSet, err
	}
	for _, li := range listRsp.GetItems() {
		idSet = append(idSet, li.GetUid())
	}
	return idSet, err

}

func (c *crudAPIInprocClient) ListItems(ctx context.Context, opts ...server.CRUDCallOpt) ([]server.ListItem, error) {

	sliSet := []server.ListItem{}
	listRsp, err := c.List(ctx, opts...)
	if listRsp == nil {
		return sliSet, err
	}
	for _, li := range listRsp.GetItems() {
		sliSet = append(sliSet, li)
	}
	return sliSet, err

}

func (c *crudAPIInprocClient) List(ctx context.Context, opts ...server.CRUDCallOpt) (*ListResponse, error) {
	ah := c.svc.GetAPIHandler("ves.io.schema.site.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		return nil, fmt.Errorf("No CRUD Server for ves.io.schema.site")
	}

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	req := NewListRequest(opts...)
	switch len(cco.LabelFilter) {
	case 0:
	case 1:
		req.LabelFilter = cco.LabelFilter[0]
	default:
		return nil, fmt.Errorf("Only one label selector expression can be provided, got %d: %s", len(cco.LabelFilter), cco.LabelFilter)
	}

	rsp, err := oah.List(ctx, req)

	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return rsp, err
}

func (c *crudAPIInprocClient) ListStream(ctx context.Context, opts ...server.CRUDCallOpt) (server.ListStreamRsp, error) {
	return nil, fmt.Errorf("Not implemented")
}

func (c *crudAPIInprocClient) Delete(ctx context.Context, key string, opts ...server.CRUDCallOpt) error {

	return fmt.Errorf("Not implemented")

}

func newCRUDAPIInprocClient(svc svcfw.Service) *crudAPIInprocClient {
	crcl := &crudAPIInprocClient{svc: svc}
	return crcl
}

func NewCRUDAPIInprocClient(svc svcfw.Service) server.CRUDClient {
	return newCRUDAPIInprocClient(svc)
}

// SERVER side
type APISrv struct {
	oType   string
	tblName string
	sf      svcfw.Service

	opts *server.CrudServerOpts
	// derived from opts
	apiWrapper *server.DBAPIWrapper

	// resource handler function pointers
}

func (s *APISrv) validateTransport(ctx context.Context) error {
	if s.sf.IsTransportNotSupported("ves.io.schema.site.API", server.TransportFromContext(ctx)) {
		userMsg := fmt.Sprintf("ves.io.schema.site.API not allowed in transport '%s'", server.TransportFromContext(ctx))
		err := svcfw.NewPermissionDeniedError(userMsg, fmt.Errorf(userMsg))
		return server.GRPCStatusFromError(err).Err()
	}
	return nil
}

func (s *APISrv) Replace(ctx context.Context, req *ReplaceRequest) (*ReplaceResponse, error) {
	if err := s.validateTransport(ctx); err != nil {
		return nil, err
	}
	if req.Spec == nil {
		err := fmt.Errorf("Nil spec in Replace Request")
		return nil, svcfw.NewInvalidInputError(err.Error(), err)
	}
	if s.sf.Config().EnableAPIValidation {
		if rvFn := s.sf.GetRPCValidator("ves.io.schema.site.API.Replace"); rvFn != nil {
			if err := rvFn(ctx, req); err != nil {
				if !server.NoReqValidateFromContext(ctx) {
					err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "Validating Request"))
					return nil, server.GRPCStatusFromError(err).Err()
				}
				s.sf.Logger().Warn(server.NoReqValidateAcceptLog, zap.String("rpc_fqn", "ves.io.schema.site.API.Replace"), zap.Error(err))
			}
		}
	}
	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.sf, "ves.io.schema.site.API.ReplaceRequest", req)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
	}()

	rsrcReq := &server.ResourceReplaceRequest{RequestMsg: req}
	rsrcRsp, err := s.opts.RsrcHandler.ReplaceFn(ctx, rsrcReq, s.apiWrapper)
	if err != nil {
		err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "ReplaceResource"))
		return nil, server.GRPCStatusFromError(err).Err()
	}
	rsp, err := NewObjectReplaceRsp(rsrcRsp.Entry)
	if err != nil {
		err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "ReplaceResponse"))
		return nil, server.GRPCStatusFromError(err).Err()
	}
	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.sf, "ves.io.schema.site.API.ReplaceResponse", rsp)...)
	return rsp, nil
}

func (s *APISrv) Get(ctx context.Context, req *GetRequest) (*GetResponse, error) {
	if err := s.validateTransport(ctx); err != nil {
		return nil, err
	}
	if s.sf.Config().EnableAPIValidation {
		if rvFn := s.sf.GetRPCValidator("ves.io.schema.site.API.Get"); rvFn != nil {
			if err := rvFn(ctx, req); err != nil {
				err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}
	tenant := server.TenantFromContext(ctx)
	rsrcReq := &server.ResourceGetRequest{IsPublic: true, Tenant: tenant, Namespace: req.GetNamespace(), Name: req.GetName()}
	switch req.ResponseFormat {

	case GET_RSP_FORMAT_FOR_REPLACE:
		rsrcReq.RspInReplaceForm = true

	case GET_RSP_FORMAT_READ:
		rsrcReq.RspInReadForm = true

	case GET_RSP_FORMAT_STATUS:
		rsrcReq.RspInStatusForm = true

	case GET_RSP_FORMAT_REFERRING_OBJECTS:
		rsrcReq.RspInReferringObjectsForm = true

	}

	rsrcRsp, err := s.opts.RsrcHandler.GetFn(ctx, rsrcReq, s.apiWrapper)
	if err != nil {
		err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "GetResource"))
		return nil, server.GRPCStatusFromError(err).Err()
	}
	rsp, err := NewObjectGetRsp(ctx, s.sf, req, rsrcRsp)
	if err != nil {
		err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "GetResponse"))
		return nil, server.GRPCStatusFromError(err).Err()
	}
	rspMsgFQN := "ves.io.schema.site.GetResponse"
	if conv, exists := s.sf.Config().ObjToMsgConverters[rspMsgFQN]; exists {
		if err := conv(rsrcRsp.Entry, rsp); err != nil {
			return nil, err
		}
	}
	return rsp, nil
}

func (s *APISrv) List(ctx context.Context, req *ListRequest) (*ListResponse, error) {
	if err := s.validateTransport(ctx); err != nil {
		return nil, err
	}
	if s.sf.Config().EnableAPIValidation {
		if rvFn := s.sf.GetRPCValidator("ves.io.schema.site.API.List"); rvFn != nil {
			if err := rvFn(ctx, req); err != nil {
				err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}
	var merr *multierror.Error
	rsrcReq := &server.ResourceListRequest{
		Namespace:   req.Namespace,
		LabelFilter: req.LabelFilter,
		RspStreamed: false,
	}
	if len(req.ReportStatusFields) > 0 {
		rsrcReq.ReportStatusFields = &req.ReportStatusFields
	}
	rsrcRsp, err := s.opts.RsrcHandler.ListFn(ctx, rsrcReq, s.apiWrapper)
	if err != nil {
		merr = multierror.Append(merr, errors.Wrap(err, "ListResource"))
	}
	rsp, err := NewListResponse(ctx, req, s.sf, rsrcRsp)
	if err != nil {
		merr = multierror.Append(merr, errors.Wrap(err, "ListResponse allocation failed"))
	}
	if merr != nil {
		if rsp == nil {
			return nil, merr
		}
		rsp.Errors = append(rsp.Errors, &ves_io_schema.ErrorType{
			Code:    ves_io_schema.EINTERNAL,
			Message: merr.Error(),
		})

	}
	return rsp, nil
}

// Assert that APISrv implements the generated gRPC APIServer interface
var _ APIServer = &APISrv{}

func NewCRUDAPIServer(oType string, tblName string, sf svcfw.Service, opts ...server.CRUDServerOpt) (server.APIHandler, string) {
	// convert ves.io.examplesvc.objectone.Object to
	//         ves.io.examplesvc.objectone.API
	sl := strings.Split(oType, ".")
	csOpts := server.NewCRUDServerOpts()
	for _, o := range opts {
		o(csOpts)
	}
	wrapper := server.NewDBAPIWrapper(csOpts.APIWrapperOpts...)
	s := &APISrv{
		oType:      oType,
		tblName:    tblName,
		sf:         sf,
		opts:       csOpts,
		apiWrapper: wrapper,
	}
	return s, fmt.Sprintf("%s.API", strings.Join(sl[:len(sl)-1], "."))
}

func (r *Object) Key() string {
	m := r.GetMetadata()
	if m == nil {
		return ""
	}
	return strings.Join([]string{m.Namespace, m.Name}, "/")
}

func (r *Object) Uid() string {
	return r.SystemMetadata.Uid
}

func (r *ListResponse) GetKeys() []string {
	var ret []string
	for _, i := range r.Items {
		ret = append(ret, i.Namespace+"/"+i.Name)
	}
	return ret
}

// Implement server.SROListItem interface on ListResponseItem
func (l *ListResponseItem) GetObjUid() string {
	return l.Uid
}

func (l *ListResponseItem) GetObjTenant() string {
	return l.Tenant
}

func (l *ListResponseItem) GetObjNamespace() string {
	return l.Namespace
}

func (l *ListResponseItem) GetObjName() string {
	return l.Name
}

func (l *ListResponseItem) GetObjLabels() map[string]string {
	return l.Labels
}

func NewObjectReplaceRsp(e db.Entry) (*ReplaceResponse, error) {
	return &ReplaceResponse{}, nil
}

func NewObjectGetRsp(ctx context.Context, sf svcfw.Service, req *GetRequest, rsrcRsp *server.ResourceGetResponse) (*GetResponse, error) {
	rsp := &GetResponse{}
	e := rsrcRsp.Entry
	if e == nil {
		return rsp, nil
	}
	o, ok := e.(*DBObject)
	if !ok {
		return nil, fmt.Errorf("entry not of type *DBObject in NewObjectGetRsp")
	}

	rsp.ResourceVersion = rsrcRsp.ResourceVersion
	var merr *multierror.Error
	buildReadForm := func() {
		rsp.Metadata = &ves_io_schema.ObjectGetMetaType{}
		rsp.Metadata.FromObjectMetaType(o.Metadata)
		rsp.SystemMetadata = &ves_io_schema.SystemObjectGetMetaType{}
		rsp.SystemMetadata.FromSystemObjectMetaType(o.SystemMetadata)
		rsp.Spec = &GetSpecType{}
		rsp.Spec.FromGlobalSpecType(o.Spec.GcSpec)

	}
	_ = buildReadForm
	buildStatusForm := func() {
		for _, statusEnt := range rsrcRsp.BackRefs {
			statusObj, ok := statusEnt.ToStore().(*StatusObject)
			if !ok {
				merr = multierror.Append(merr, fmt.Errorf("%T is not *StatusObject", statusEnt))
				continue
			}
			rsp.Status = append(rsp.Status, statusObj)
		}

	}
	_ = buildStatusForm
	buildReferringObjectsForm := func() {
		for _, br := range rsrcRsp.ReferringObjects {
			rsp.ReferringObjects = append(rsp.ReferringObjects, &ves_io_schema.ObjectRefType{
				Kind:      db.KindForEntryType(br.Type),
				Uid:       br.UID,
				Tenant:    br.Tenant,
				Namespace: br.Namespace,
				Name:      br.Name,
			})
		}

	}
	_ = buildReferringObjectsForm

	switch req.ResponseFormat {

	case GET_RSP_FORMAT_FOR_REPLACE:
		replaceReq, err := NewReplaceRequest(e)
		if err != nil {
			return nil, errors.Wrap(err, "Building ReplaceRequest from entry")
		}
		rsp.ReplaceForm = replaceReq

	case GET_RSP_FORMAT_STATUS:
		buildStatusForm()

	case GET_RSP_FORMAT_READ:
		buildReadForm()

	case GET_RSP_FORMAT_REFERRING_OBJECTS:
		buildReferringObjectsForm()

	default:
		noDBForm, _ := flags.GetEnvGetRspNoDBForm()
		if !noDBForm {
			rsp.Object = o.Object
			sf.Logger().Alert(svcfw.GetResponseInDBForm,
				log.MinorAlert,
				zap.String("user", server.UserFromContext(ctx)),
				zap.String("useragent", server.UseragentStrFromContext(ctx)),
				zap.String("operation", "Get"),
			)
			buildReadForm()

		} else {
			buildReadForm()

		}
		buildStatusForm()
	}

	return rsp, errors.ErrOrNil(merr)
}

func NewListResponse(ctx context.Context, req *ListRequest, sf svcfw.Service, rsrcRsp *server.ResourceListResponse) (*ListResponse, error) {
	if req == nil {
		return nil, fmt.Errorf("Nil ListRequest")
	}
	if rsrcRsp == nil {
		return nil, fmt.Errorf("Nil ResourceResponse")
	}

	errStrs := []string{}
	resp := &ListResponse{}
	resp.Items = []*ListResponseItem{}

	for _, rsrcItem := range rsrcRsp.Items {
		if rsrcItem == nil {
			errStrs = append(errStrs, fmt.Sprintf("Nil ResourceListResponseItem"))
			continue
		}

		e := rsrcItem.Entry
		o, ok := e.(*DBObject)
		if !ok {
			resp.Errors = append(resp.Errors, &ves_io_schema.ErrorType{
				Code:    ves_io_schema.EINTERNAL,
				Message: fmt.Sprintf("Entry %T not of type *DBObject in NewListResponse", e),
			})

			continue
		}
		item := &ListResponseItem{
			Tenant:    o.GetSystemMetadata().GetTenant(),
			Namespace: o.GetMetadata().GetNamespace(),
			Name:      o.GetMetadata().GetName(),
			Uid:       o.GetMetadata().GetUid(),
			OwnerView: o.GetSystemMetadata().GetOwnerView(),
			Labels:    o.GetMetadata().GetLabels(),
		}

		item.Description = o.GetMetadata().GetDescription()
		item.Annotations = o.GetMetadata().GetAnnotations()
		item.Disabled = o.GetMetadata().GetDisable()

		if len(req.ReportFields) > 0 {
			noDBForm, _ := flags.GetEnvGetRspNoDBForm()
			if !noDBForm {
				item.Object = o.Object
				sf.Logger().Alert(svcfw.GetResponseInDBForm,
					log.MinorAlert,
					zap.String("user", server.UserFromContext(ctx)),
					zap.String("useragent", server.UseragentStrFromContext(ctx)),
					zap.String("operation", "List"),
				)
			}

			item.Metadata = &ves_io_schema.ObjectGetMetaType{}
			item.Metadata.FromObjectMetaType(o.Metadata)
			item.SystemMetadata = &ves_io_schema.SystemObjectGetMetaType{}
			item.SystemMetadata.FromSystemObjectMetaType(o.SystemMetadata)

			if o.Object != nil && o.Object.GetSpec().GetGcSpec() != nil {
				msgFQN := "ves.io.schema.site.GetResponse"
				if conv, exists := sf.Config().ObjToMsgConverters[msgFQN]; exists {
					getSpec := &GetSpecType{}
					getSpec.FromGlobalSpecType(o.Spec.GcSpec)
					getRsp := &GetResponse{Spec: getSpec}
					if err := conv(o, getRsp); err != nil {
						resp.Errors = append(resp.Errors, &ves_io_schema.ErrorType{
							Code:    ves_io_schema.EINTERNAL,
							Message: fmt.Sprintf("Converting entry to getResponse: %s", err),
						})

						continue
					}
					item.GetSpec = getRsp.Spec
				} else {
					item.GetSpec = &GetSpecType{}
					item.GetSpec.FromGlobalSpecType(o.Spec.GcSpec)
				}
			}

		}

		if len(req.ReportStatusFields) > 0 {
			for _, sroStatus := range rsrcItem.StatusSet {
				statusDBO, ok := sroStatus.(*DBStatusObject)
				if !ok {
					resp.Errors = append(resp.Errors, &ves_io_schema.ErrorType{
						Code:    ves_io_schema.EINTERNAL,
						Message: fmt.Sprintf("sro.Status %T is not of type *DBStatusObject in NewListResponse", sroStatus),
					})

					continue
				}
				item.StatusSet = append(item.StatusSet, statusDBO.StatusObject)
			}
		}

		resp.Items = append(resp.Items, item)
	}
	return resp, nil
}

func RegisterGwAPIHandler(ctx context.Context, mux *runtime.ServeMux, svc interface{}) error {
	s, ok := svc.(svcfw.Service)
	if !ok {
		return fmt.Errorf("svc is not svcfw.Service")
	}
	return RegisterAPIHandlerClient(ctx, mux, NewAPIInprocClient(s))
}

var APISwaggerJSON string = `{
    "swagger": "2.0",
    "info": {
        "title": "Site",
        "description": "Site represent physical/cloud cluster of volterra processing elements. There are two types of sites currently.\n\n   Regional Edge (RE)\n\n    Regional Edge sites are network edge sites owned and operated by volterra edge cloud. RE can be used to\n    host VIPs, run API gateway or any application at network edge.\n\n   Customer Edge (CE)\n\n    Customer Edge sites are edge sites owned by customer and operated by volterra cloud. CE can be as application gateway\n    to connect applications in multiple clusters or clouds. CE can also run applications at customer premise.\n\nSite configuration contains the information like\n\n    Site locations\n    parameters to override fleet config\n    IP Addresses to be used by automatic vip assignments for default networks\n    etc\n\n Sites are automatically created by registration mechanism. They can be modified to add location or description and they can be deleted.",
        "version": "version not set"
    },
    "schemes": [
        "http",
        "https"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "tags": null,
    "paths": {
        "/public/namespaces/{metadata.namespace}/sites/{metadata.name}": {
            "put": {
                "summary": "Replace Site",
                "description": "Replace Site will replace address, coordinates of site",
                "operationId": "ves.io.schema.site.API.Replace",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/siteReplaceResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "metadata.namespace",
                        "description": "namespace\n\nx-example: \"staging\"\nThis defines the workspace within which each the configuration object is to be created. \nMust be a DNS_LABEL format. For a namespace object itself, namespace value will be \"\"",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "metadata.name",
                        "description": "name\n\nx-example: \"acmecorp-web\"\nThe configuration object to be replaced will be looked up by name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Name"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/siteReplaceRequest"
                        }
                    }
                ],
                "tags": [
                    "API"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-site-API-Replace"
                },
                "x-ves-proto-rpc": "ves.io.schema.site.API.Replace"
            },
            "x-displayname": "Site",
            "x-ves-proto-service": "ves.io.schema.site.API",
            "x-ves-proto-service-type": "AUTO_CRUD_PUBLIC"
        },
        "/public/namespaces/{namespace}/sites": {
            "get": {
                "summary": "List",
                "description": "List the set of site in a namespace",
                "operationId": "ves.io.schema.site.API.List",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/siteListResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "namespace\n\nx-example: \"ns1\"\nNamespace to scope the listing of site",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "label_filter",
                        "description": "x-example: \"env in (staging, testing), tier in (web, db)\"\nA LabelSelectorType expression that every item in list response will satisfy",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "x-displayname": "Label Filter"
                    },
                    {
                        "name": "report_fields",
                        "description": "x-example: \"\"\nExtra fields to return along with summary fields",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "x-displayname": "Report Fields"
                    },
                    {
                        "name": "report_status_fields",
                        "description": "x-example: \"\"\nExtra status fields to return along with summary fields",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "x-displayname": "Report Status Fields"
                    }
                ],
                "tags": [
                    "API"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-site-API-List"
                },
                "x-ves-proto-rpc": "ves.io.schema.site.API.List"
            },
            "x-displayname": "Site",
            "x-ves-proto-service": "ves.io.schema.site.API",
            "x-ves-proto-service-type": "AUTO_CRUD_PUBLIC"
        },
        "/public/namespaces/{namespace}/sites/{name}": {
            "get": {
                "summary": "Get Site",
                "description": "Get of site",
                "operationId": "ves.io.schema.site.API.Get",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/siteGetResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "namespace\n\nx-example: \"ns1\"\nThe namespace in which the configuration object is present",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "name",
                        "description": "name\n\nx-example: \"name\"\nThe name of the configuration object to be fetched",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Name"
                    },
                    {
                        "name": "response_format",
                        "description": "The format in which the configuration object is to be fetched. This could be for example\n    - in GetSpec form for the contents of object\n    - in CreateRequest form to create a new similar object\n    - to ReplaceRequest form to replace changeable values\n\nDefault format of returned resource\nResponse should be in ReplaceRequest format\nResponse should be in StatusObject(s) format\nResponse should be in format of GetSpecType\nResponse should have other objects referring to this object",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "GET_RSP_FORMAT_DEFAULT",
                            "GET_RSP_FORMAT_FOR_REPLACE",
                            "GET_RSP_FORMAT_STATUS",
                            "GET_RSP_FORMAT_READ",
                            "GET_RSP_FORMAT_REFERRING_OBJECTS"
                        ],
                        "default": "GET_RSP_FORMAT_DEFAULT",
                        "x-displayname": "Referring Objects"
                    }
                ],
                "tags": [
                    "API"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-site-API-Get"
                },
                "x-ves-proto-rpc": "ves.io.schema.site.API.Get"
            },
            "x-displayname": "Site",
            "x-ves-proto-service": "ves.io.schema.site.API",
            "x-ves-proto-service-type": "AUTO_CRUD_PUBLIC"
        }
    },
    "definitions": {
        "ioschemaEmpty": {
            "type": "object",
            "description": "This can be used for messages where no values are needed",
            "title": "Empty",
            "x-displayname": "Empty",
            "x-ves-proto-message": "ves.io.schema.Empty"
        },
        "protobufAny": {
            "type": "object",
            "description": "-Any- contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := \u0026pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an -Any- value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field -@type- which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n-value- which holds the custom JSON in addition to the -@type-\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }",
            "properties": {
                "type_url": {
                    "type": "string",
                    "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n-path/google.protobuf.Duration-). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme -http-, -https-, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, -https- is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than -http-, -https- (or the empty scheme) might be\nused with implementation specific semantics."
                },
                "value": {
                    "type": "string",
                    "description": "Must be a valid serialized protocol buffer of the above specified type.",
                    "format": "byte"
                }
            }
        },
        "schemaConditionType": {
            "type": "object",
            "description": "Conditions are used in the object status to describe the current state of the\nobject, e.g. Ready, Succeeded, etc.",
            "title": "ConditionType",
            "x-displayname": "Status Condition",
            "x-ves-proto-message": "ves.io.schema.ConditionType",
            "properties": {
                "hostname": {
                    "type": "string",
                    "description": " Hostname of the instance of the site that sent the status",
                    "title": "hostname",
                    "x-displayname": "Hostname"
                },
                "last_update_time": {
                    "type": "string",
                    "description": " Last time the condition was updated",
                    "title": "last_update_time",
                    "format": "date-time",
                    "x-displayname": "Last Updated"
                },
                "reason": {
                    "type": "string",
                    "description": " x-reason: \"Insufficient memory in data plane\"\n A human readable string explaining the reason for reaching this condition\n\nExample: - \"value\"-",
                    "title": "reason",
                    "x-displayname": "Reason",
                    "x-ves-example": "value"
                },
                "service_name": {
                    "type": "string",
                    "description": " Name of the service that sent the status",
                    "title": "service name",
                    "x-displayname": "Service Name"
                },
                "status": {
                    "type": "string",
                    "description": " Status of the condition\n \"Success\" Validtion has succeded. Requested operation was successful.\n \"Failed\"  Validation has failed. \n \"Incomplete\" Validation of configuration has failed due to missing configuration.\n \"Installed\" Validation has passed and configuration has been installed in data path or K8s\n \"Down\" Configuration is operationally down. e.g. down interface\n \"Disabled\" Configuration is administratively disabled i.e. ObjectMetaType.Disable = true.\n \"NotApplicable\" Configuration is not applicable e.g. tenant service_policy_set(s) in system namespace are not applicable on REs\n\nExample: - \"Failed\"-",
                    "title": "status",
                    "x-displayname": "Status",
                    "x-ves-example": "Failed"
                },
                "type": {
                    "type": "string",
                    "description": " Type of the condition\n \"Validation\" represents validation user given configuration object\n \"Operational\" represents operational status of a given configuration object\n\nExample: - \"Operational\"-",
                    "title": "type",
                    "x-displayname": "Type",
                    "x-ves-example": "Operational"
                }
            }
        },
        "schemaErrorCode": {
            "type": "string",
            "description": "Union of all possible error-codes from system\n\n - EOK: No error\n - EPERMS: Permissions error\n - EBADINPUT: Input is not correct\n - ENOTFOUND: Not found\n - EEXISTS: Already exists\n - EUNKNOWN: Unknown/catchall error\n - ESERIALIZE: Error in serializing/de-serializing\n - EINTERNAL: Server error",
            "title": "ErrorCode",
            "enum": [
                "EOK",
                "EPERMS",
                "EBADINPUT",
                "ENOTFOUND",
                "EEXISTS",
                "EUNKNOWN",
                "ESERIALIZE",
                "EINTERNAL"
            ],
            "default": "EOK",
            "x-displayname": "Error Code",
            "x-ves-proto-enum": "ves.io.schema.ErrorCode"
        },
        "schemaErrorType": {
            "type": "object",
            "description": "Information about a error in API operation",
            "title": "ErrorType",
            "x-displayname": "Error Type",
            "x-ves-proto-message": "ves.io.schema.ErrorType",
            "properties": {
                "code": {
                    "description": " A simple general code by category",
                    "title": "code",
                    "$ref": "#/definitions/schemaErrorCode",
                    "x-displayname": "Code"
                },
                "error_obj": {
                    "description": " A structured error object for machine parsing",
                    "title": "error_obj",
                    "$ref": "#/definitions/protobufAny",
                    "x-displayname": "Error Object"
                },
                "message": {
                    "type": "string",
                    "description": " A human readable string of the error\n\nExample: - \"value\"-",
                    "title": "message",
                    "x-displayname": "Message",
                    "x-ves-example": "value"
                }
            }
        },
        "schemaInitializerType": {
            "type": "object",
            "description": "Initializer is information about an initializer that has not yet completed.",
            "title": "InitializerType",
            "x-displayname": "Initializer",
            "x-ves-proto-message": "ves.io.schema.InitializerType",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " name of the service that is responsible for initializing this object.",
                    "title": "name",
                    "x-displayname": "Name"
                }
            }
        },
        "schemaInitializersType": {
            "type": "object",
            "description": "Initializers tracks the progress of initialization of a configuration object",
            "title": "InitializersType",
            "x-displayname": "Initializers",
            "x-ves-proto-message": "ves.io.schema.InitializersType",
            "properties": {
                "pending": {
                    "type": "array",
                    "description": " Pending is a list of initializers that must execute in order before this object is initialized.\n When the last pending initializer is removed, and no failing result is set, the initializers\n struct will be set to nil and the object is considered as initialized and visible to all\n clients.",
                    "title": "pending",
                    "items": {
                        "$ref": "#/definitions/schemaInitializerType"
                    },
                    "x-displayname": "Pending"
                },
                "result": {
                    "description": " If result is set with the Failure field, the object will be persisted to storage and then deleted,\n ensuring that other clients can observe the deletion.",
                    "title": "result",
                    "$ref": "#/definitions/schemaStatusType",
                    "x-displayname": "Result"
                }
            }
        },
        "schemaIpSubnetType": {
            "type": "object",
            "description": "IP Address used to specify an IPv4 or IPv6 subnet addresses",
            "title": "IP Subnet",
            "x-displayname": "IP Subnet",
            "x-ves-displayorder": "3",
            "x-ves-oneof-field-ver": "[\"ipv4\",\"ipv6\"]",
            "x-ves-proto-message": "ves.io.schema.IpSubnetType",
            "properties": {
                "ipv4": {
                    "description": "Exclusive with [ipv6]\nx-displayName: \"IPv4 Subnet\"\nIPv4 Subnet Address",
                    "title": "IPv4 Subnet",
                    "$ref": "#/definitions/schemaIpv4SubnetType"
                },
                "ipv6": {
                    "description": "Exclusive with [ipv4]\nx-displayName: \"IPv6 Subnet\"\nIPv6 Subnet Address",
                    "title": "IPv6 Subnet",
                    "$ref": "#/definitions/schemaIpv6SubnetType"
                }
            }
        },
        "schemaIpv4SubnetType": {
            "type": "object",
            "description": "IPv4 subnets specified as prefix and prefix-length. Prefix length must be \u003c= 32",
            "title": "IPv4 Subnet",
            "x-displayname": "IPv4 Subnet",
            "x-ves-proto-message": "ves.io.schema.Ipv4SubnetType",
            "properties": {
                "plen": {
                    "type": "integer",
                    "description": " Prefix-length of the IPv4 subnet. Must be \u003c= 32\n\nExample: - 24-",
                    "title": "Prefix Length",
                    "format": "int64",
                    "x-displayname": "Prefix Length"
                },
                "prefix": {
                    "type": "string",
                    "description": " Prefix part of the IPv4 subnet in string form with dot-decimal notation\n\nExample: - \"192.168.1.0\"-",
                    "title": "Prefix",
                    "x-displayname": "Prefix",
                    "x-ves-example": "192.168.1.0"
                }
            }
        },
        "schemaIpv6SubnetType": {
            "type": "object",
            "description": "IPv6 subnets specified as prefix and prefix-length. prefix-legnth must be \u003c= 128",
            "title": "IPv6 Subnet",
            "x-displayname": "IPv6 Subnet",
            "x-ves-proto-message": "ves.io.schema.Ipv6SubnetType",
            "properties": {
                "plen": {
                    "type": "integer",
                    "description": " Prefix length of the IPv6 subnet. Must be \u003c= 128\n\nExample: - \"38\"-",
                    "title": "Prefix length",
                    "format": "int64",
                    "x-displayname": "Prefix Length",
                    "x-ves-example": "38"
                },
                "prefix": {
                    "type": "string",
                    "description": " Prefix part of the IPv6 subnet given in form of string.\n IPv6 address must be specified as hexadecimal numbers separated by ':'\n e.g. \"2001:db8:0:0:0:2:0:0\"\n The address can be compacted by suppressing zeros\n e.g. \"2001:db8::2::\"\n\nExample: - \"2001:db8:0:0:0:0:2:0\"-",
                    "title": "Prefix",
                    "x-displayname": "Prefix",
                    "x-ves-example": "2001:db8:0:0:0:0:2:0"
                }
            }
        },
        "schemaObjectGetMetaType": {
            "type": "object",
            "description": "ObjectGetMetaType is metadata that can be specified in Get/Create response of an object.",
            "title": "ObjectGetMetaType",
            "x-displayname": "Get Metadata",
            "x-ves-proto-message": "ves.io.schema.ObjectGetMetaType",
            "properties": {
                "annotations": {
                    "type": "object",
                    "description": " Annotations is an unstructured key value map stored with a resource that may be\n set by external tools to store and retrieve arbitrary metadata. They are not\n queryable and should be preserved when modifying objects.\n\nExample: - \"value\"-",
                    "title": "annotations",
                    "x-displayname": "Annotation",
                    "x-ves-example": "value"
                },
                "description": {
                    "type": "string",
                    "description": " Human readable description for the object\n\nExample: - \"Virtual Host for acmecorp website\"-",
                    "title": "description",
                    "x-displayname": "Description",
                    "x-ves-example": "Virtual Host for acmecorp website"
                },
                "disable": {
                    "type": "boolean",
                    "description": " A value of true will administratively disable the object\n\nExample: - \"true\"-",
                    "title": "disable",
                    "format": "boolean",
                    "x-displayname": "Disable",
                    "x-ves-example": "true"
                },
                "labels": {
                    "type": "object",
                    "description": " Map of string keys and values that can be used to organize and categorize\n (scope and select) objects as chosen by the user. Values specified here will be used\n by selector expression\n\nExample: - \"value\"-",
                    "title": "labels",
                    "x-displayname": "Labels",
                    "x-ves-example": "value"
                },
                "name": {
                    "type": "string",
                    "description": " This is the name of configuration object. It has to be unique within the namespace.\n It can only be specified during create API and cannot be changed during replace API.\n The value of name has to follow DNS-1035 format.\n\nExample: - \"acmecorp-web\"-\nRequired: YES",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "acmecorp-web",
                    "x-ves-required": "true"
                },
                "namespace": {
                    "type": "string",
                    "description": " This defines the workspace within which each the configuration object is to be created. \n Must be a DNS_LABEL format. For a namespace object itself, namespace value will be \"\"\n\nExample: - \"staging\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "staging"
                }
            }
        },
        "schemaObjectMetaType": {
            "type": "object",
            "description": "ObjectMetaType is metadata(common attributes) of an object that all configuration objects will have.\nThe information in this type can be specified by user during create and replace APIs.",
            "title": "ObjectMetaType",
            "x-displayname": "Metadata",
            "x-ves-proto-message": "ves.io.schema.ObjectMetaType",
            "properties": {
                "annotations": {
                    "type": "object",
                    "description": " Annotations is an unstructured key value map stored with a resource that may be\n set by external tools to store and retrieve arbitrary metadata. They are not\n queryable and should be preserved when modifying objects.\n\nExample: - \"value\"-",
                    "title": "annotations",
                    "x-displayname": "Annotations",
                    "x-ves-example": "value"
                },
                "description": {
                    "type": "string",
                    "description": " Human readable description for the object\n\nExample: - \"Virtual Host for acmecorp website\"-",
                    "title": "description",
                    "x-displayname": "Description",
                    "x-ves-example": "Virtual Host for acmecorp website"
                },
                "disable": {
                    "type": "boolean",
                    "description": " A value of true will administratively disable the object\n\nExample: - \"true\"-",
                    "title": "disable",
                    "format": "boolean",
                    "x-displayname": "Disable",
                    "x-ves-example": "true"
                },
                "labels": {
                    "type": "object",
                    "description": " Map of string keys and values that can be used to organize and categorize\n (scope and select) objects as chosen by the user. Values specified here will be used\n by selector expression\n\nExample: - \"value\"-",
                    "title": "labels",
                    "x-displayname": "Labels",
                    "x-ves-example": "value"
                },
                "name": {
                    "type": "string",
                    "description": " This is the name of configuration object. It has to be unique within the namespace.\n It can only be specified during create API and cannot be changed during replace API.\n The value of name has to follow DNS-1035 format.\n\nExample: - \"acmecorp-web\"-\nRequired: YES",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "acmecorp-web",
                    "x-ves-required": "true"
                },
                "namespace": {
                    "type": "string",
                    "description": " This defines the workspace within which each the configuration object is to be created. \n Must be a DNS_LABEL format. For a namespace object itself, namespace value will be \"\"\n\nExample: - \"staging\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "staging"
                },
                "uid": {
                    "type": "string",
                    "description": " uid is the unique in time and space value for this object. Object create will fail if \n provided by the client and the value exists in the system. Typically generated by the\n server on successful creation of an object and is not allowed to change once populated.\n Shadowed by SystemObjectMeta's uid field.\n\nExample: - \"d15f1fad-4d37-48c0-8706-df1824d76d31\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "d15f1fad-4d37-48c0-8706-df1824d76d31"
                }
            }
        },
        "schemaObjectRefType": {
            "type": "object",
            "description": "This type establishes a 'direct reference' from one object(the referrer) to another(the referred). \nSuch a reference is in form of tenant/namespace/name for public API and Uid for private API\nThis type of reference is called direct because the relation is explicit and concrete (as opposed\nto selector reference which builds a group based on labels of selectee objects)",
            "title": "ObjectRefType",
            "x-displayname": "Object reference",
            "x-ves-proto-message": "ves.io.schema.ObjectRefType",
            "properties": {
                "kind": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then kind will hold the referred object's kind (e.g. \"route\")\n\nExample: - \"virtual_site\"-",
                    "title": "kind",
                    "x-displayname": "Kind",
                    "x-ves-example": "virtual_site"
                },
                "name": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then name will hold the referred object's(e.g. route's) name.\n\nExample: - \"contactus-route\"-",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "contactus-route"
                },
                "namespace": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then namespace will hold the referred object's(e.g. route's) namespace.\n\nExample: - \"ns1\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "ns1"
                },
                "tenant": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then tenant will hold the referred object's(e.g. route's) tenant.\n\nExample: - \"acmecorp\"-",
                    "title": "tenant",
                    "x-displayname": "Tenant",
                    "x-ves-example": "acmecorp"
                },
                "uid": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then uid will hold the referred object's(e.g. route's) uid.\n\nExample: - \"d15f1fad-4d37-48c0-8706-df1824d76d31\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "d15f1fad-4d37-48c0-8706-df1824d76d31"
                }
            }
        },
        "schemaObjectReplaceMetaType": {
            "type": "object",
            "description": "ObjectReplaceMetaType is metadata that can be specified in Replace request of an object.",
            "title": "ObjectReplaceMetaType",
            "x-displayname": "Replace Metadata",
            "x-ves-proto-message": "ves.io.schema.ObjectReplaceMetaType",
            "properties": {
                "annotations": {
                    "type": "object",
                    "description": " Annotations is an unstructured key value map stored with a resource that may be\n set by external tools to store and retrieve arbitrary metadata. They are not\n queryable and should be preserved when modifying objects.\n\nExample: - \"value\"-",
                    "title": "annotations",
                    "x-displayname": "Annotations"
                },
                "description": {
                    "type": "string",
                    "description": " Human readable description for the object\n\nExample: - \"Virtual Host for acmecorp website\"-",
                    "title": "description",
                    "x-displayname": "Description",
                    "x-ves-example": "Virtual Host for acmecorp website"
                },
                "disable": {
                    "type": "boolean",
                    "description": " A value of true will administratively disable the object\n\nExample: - \"true\"-",
                    "title": "disable",
                    "format": "boolean",
                    "x-displayname": "Disable"
                },
                "labels": {
                    "type": "object",
                    "description": " Map of string keys and values that can be used to organize and categorize\n (scope and select) objects as chosen by the user. Values specified here will be used\n by selector expression\n\nExample: - \"value\"-",
                    "title": "labels",
                    "x-displayname": "Labels"
                },
                "name": {
                    "type": "string",
                    "description": " This is the name of configuration object. It has to be unique within the namespace.\n It can only be specified during create API and cannot be changed during replace API.\n The value of name has to follow DNS-1035 format.\n\nExample: - \"acmecorp-web\"-\nRequired: YES",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "acmecorp-web"
                },
                "namespace": {
                    "type": "string",
                    "description": " This defines the workspace within which each the configuration object is to be created. \n Must be a DNS_LABEL format. For a namespace object itself, namespace value will be \"\"\n\nExample: - \"staging\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "staging"
                }
            }
        },
        "schemaServiceConnectionType": {
            "type": "string",
            "description": "Only added so codegeneration does not break\n\nOnly added so codegeneration does not break\nOnly added so codegeneration does not break",
            "title": "Title",
            "enum": [
                "TLS",
                "NoTLS"
            ],
            "default": "TLS",
            "x-displayname": "displayname",
            "x-ves-proto-enum": "ves.io.schema.ServiceConnectionType"
        },
        "schemaServiceParameters": {
            "type": "object",
            "description": "x-displayName \"displayname\"\nOnly added so codegeneration does not break\nServiceParam groups all parameters required for a client to connect to a server",
            "title": "Title",
            "x-ves-proto-message": "ves.io.schema.ServiceParameters",
            "properties": {
                "ctype": {
                    "description": " Only added so codegeneration does not break",
                    "title": "Title",
                    "$ref": "#/definitions/schemaServiceConnectionType",
                    "x-displayname": "displayname"
                },
                "url": {
                    "type": "string",
                    "description": " Only added so codegeneration does not break",
                    "title": "Title",
                    "x-displayname": "displayname"
                }
            }
        },
        "schemaSiteToSiteTunnelType": {
            "type": "string",
            "description": "Tunnel encapsulation to be used between sites\n\nSite to site tunnel can operate in both ipsec and ssl\nipsec takes precedence over ssl\nSite to site tunnel is of type ipsec\nSite to site tunnel is of type ssl",
            "title": "Site to site tunnel type",
            "enum": [
                "SITE_TO_SITE_TUNNEL_IPSEC_OR_SSL",
                "SITE_TO_SITE_TUNNEL_IPSEC",
                "SITE_TO_SITE_TUNNEL_SSL"
            ],
            "default": "SITE_TO_SITE_TUNNEL_IPSEC_OR_SSL",
            "x-displayname": "Tunnel type",
            "x-ves-proto-enum": "ves.io.schema.SiteToSiteTunnelType"
        },
        "schemaStatusMetaType": {
            "type": "object",
            "description": "StatusMetaType is metadata that all status must have.",
            "title": "StatusMetaType",
            "x-displayname": "Metadata",
            "x-ves-proto-message": "ves.io.schema.StatusMetaType",
            "properties": {
                "creation_timestamp": {
                    "type": "string",
                    "description": " creation_timestamp is when the status object was created. It is used to find/tie-break\n for latest status object from same origin",
                    "title": "creation_timestamp",
                    "format": "date-time",
                    "x-displayname": "Creation Timestamp"
                },
                "creator_class": {
                    "type": "string",
                    "description": " Class of creator which created this StatusObject. This will be service's DNS FQDN.\n This will be set by the system based on client certificate information.\n\nExample: - \"ver.re1.int.ves.io\"-",
                    "title": "creator_class",
                    "x-displayname": "Creator Class",
                    "x-ves-example": "ver.re1.int.ves.io"
                },
                "creator_id": {
                    "type": "string",
                    "description": " ID of creator which created this StatusObject. This will be a concrete identifier for service (e.g.\n identifying the environment also). This will be set by the system based on client certificate\n information\n\nExample: - \"ver-instance-1\"-",
                    "title": "creator_id",
                    "x-displayname": "Creator ID",
                    "x-ves-example": "ver-instance-1"
                },
                "publish": {
                    "description": " Decides wether this status object will be propagated to user.",
                    "title": "publish",
                    "$ref": "#/definitions/schemaStatusPublishType",
                    "x-displayname": "Publish"
                },
                "status_id": {
                    "type": "string",
                    "description": " status_id is a field used by the generator to distinguish (if necessary) between two status \n objects for the same config object from the same site and same service and potentially same\n daemon(creator-id)",
                    "title": "status_id",
                    "x-displayname": "Status ID"
                },
                "uid": {
                    "type": "string",
                    "description": " uid is the unique in time and space value for a StatusObject.\n\nExample: - \"d15f1fad-4d37-48c0-8706-df1824d76d31\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "d15f1fad-4d37-48c0-8706-df1824d76d31"
                },
                "vtrp_id": {
                    "type": "string",
                    "description": " Oriong of this status exchanged by VTRP. ",
                    "title": "vtrp_id",
                    "x-displayname": "VTRP ID"
                }
            }
        },
        "schemaStatusPublishType": {
            "type": "string",
            "description": "StatusPublishType is all possible publish operations on a StatusObject\n\n - STATUS_DO_NOT_PUBLISH: Do not propagate this status to user. This could be because status is only informational\n - STATUS_PUBLISH: Propagate this status up to user as it might be actionable",
            "title": "StatusPublishType",
            "enum": [
                "STATUS_DO_NOT_PUBLISH",
                "STATUS_PUBLISH"
            ],
            "default": "STATUS_DO_NOT_PUBLISH",
            "x-displayname": "Publish",
            "x-ves-proto-enum": "ves.io.schema.StatusPublishType"
        },
        "schemaStatusType": {
            "type": "object",
            "description": "Status is a return value for calls that don't return other objects.",
            "title": "StatusType",
            "x-displayname": "Status",
            "x-ves-proto-message": "ves.io.schema.StatusType",
            "properties": {
                "code": {
                    "type": "integer",
                    "description": " Suggested HTTP return code for this status, 0 if not set.\n\nExample: - \"0\"-",
                    "title": "code",
                    "format": "int32",
                    "x-displayname": "Code",
                    "x-ves-example": "0"
                },
                "reason": {
                    "type": "string",
                    "description": " A human-readable description of why this operation is in the\n \"Failure\" status. If this value is empty there\n is no information available.\n\nExample: - \"value\"-",
                    "title": "reason",
                    "x-displayname": "Reason",
                    "x-ves-example": "value"
                },
                "status": {
                    "type": "string",
                    "description": " Status of the operation.\n One of: \"Success\" or \"Failure\".\n\nExample: - \"value\"-",
                    "title": "status",
                    "x-displayname": "Status",
                    "x-ves-example": "value"
                }
            }
        },
        "schemaSystemObjectGetMetaType": {
            "type": "object",
            "description": "SystemObjectGetMetaType is metadata generated or populated by the system for all persisted objects and\ncannot be updated directly by users.",
            "title": "SystemObjectGetMetaType",
            "x-displayname": "System Metadata",
            "x-ves-proto-message": "ves.io.schema.SystemObjectGetMetaType",
            "properties": {
                "creation_timestamp": {
                    "type": "string",
                    "description": " CreationTimestamp is a timestamp representing the server time when this object was\n created. It is not guaranteed to be set in happens-before order across separate operations.\n Clients may not set this value. It is represented in RFC3339 form and is in UTC.",
                    "title": "creation_timestamp",
                    "format": "date-time",
                    "x-displayname": "Creation Timestamp"
                },
                "creator_class": {
                    "type": "string",
                    "description": " A value identifying the class of the user or service which created this configuration object.\n\nExample: - \"value\"-",
                    "title": "creator_class",
                    "x-displayname": "Creator Class",
                    "x-ves-example": "prism"
                },
                "creator_id": {
                    "type": "string",
                    "description": " A value identifying the exact user or service that created this configuration object\n\nExample: - \"value\"-",
                    "title": "creator_id",
                    "x-displayname": "Creator ID",
                    "x-ves-example": "admin@acmecorp.com"
                },
                "deletion_timestamp": {
                    "type": "string",
                    "description": " DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This\n field is set by the server when a graceful deletion is requested by the user, and is not\n directly settable by a client. The resource is expected to be deleted (no longer visible\n from resource lists, and not reachable by name) after the time in this field, once the\n finalizers list is empty. As long as the finalizers list contains items, deletion is blocked.\n Once the deletionTimestamp is set, this value may not be unset or be set further into the\n future, although it may be shortened or the resource may be deleted prior to this time.\n For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react\n by sending a graceful termination signal to the containers in the pod. After that 30 seconds,\n the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup,\n remove the pod from the API. In the presence of network partitions, this object may still\n exist after this timestamp, until an administrator or automated process can determine the\n resource is fully terminated.\n If not set, graceful deletion of the object has not been requested.\n \n Populated by the system when a graceful deletion is requested.\n Read-only.",
                    "title": "deletion_timestamp",
                    "format": "date-time",
                    "x-displayname": "Deletion Timestamp"
                },
                "finalizers": {
                    "type": "array",
                    "description": " Must be empty before the object is deleted from the registry. Each entry\n is an identifier for the responsible component that will remove the entry\n from the list. If the deletionTimestamp of the object is non-nil, entries\n in this list can only be removed.\n\nExample: - \"value\"-",
                    "title": "finalizers",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Finalizers",
                    "x-ves-example": "value"
                },
                "initializers": {
                    "description": " An initializer is a controller which enforces some system invariant at object creation time.\n This field is a list of initializers that have not yet acted on this object. If nil or empty,\n this object has been completely initialized. Otherwise, the object is considered uninitialized\n and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to\n observe uninitialized objects.\n \n When an object is created, the system will populate this list with the current set of initializers.\n Only privileged users may set or modify this list. Once it is empty, it may not be modified further\n by any user.",
                    "title": "initializers",
                    "$ref": "#/definitions/schemaInitializersType",
                    "x-displayname": "Initializers"
                },
                "modification_timestamp": {
                    "type": "string",
                    "description": " ModificationTimestamp is a timestamp representing the server time when this object was\n last modified.",
                    "title": "modification_timestamp",
                    "format": "date-time",
                    "x-displayname": "Modification Timestamp"
                },
                "object_index": {
                    "type": "integer",
                    "description": " Unique index for the object. Some objects need a unique integer index to be allocated\n for each object type. This field will be populated for all objects that need it and will\n be zero otherwise.\n\nExample: - \"0\"-",
                    "title": "object_index",
                    "format": "int64",
                    "x-displayname": "Object Index",
                    "x-ves-example": "0"
                },
                "owner_view": {
                    "description": " Reference to the view object that owns this object.\n If there is no view owner, this field will be nil.\n If not nil, this object can only be edited/deleted through the view",
                    "title": "owner_view",
                    "$ref": "#/definitions/schemaViewRefType",
                    "x-displayname": "Owner View"
                },
                "tenant": {
                    "type": "string",
                    "description": " Tenant to which this configuration object belongs to. The value for this is found from\n presented credentials.\n\nExample: - \"acmecorp\"-",
                    "title": "tenant",
                    "x-displayname": "Tenant",
                    "x-ves-example": "acmecorp"
                },
                "uid": {
                    "type": "string",
                    "description": " uid is the unique in time and space value for this object. It is generated by\n the server on successful creation of an object and is not allowed to change on Replace\n API. The value of is taken from uid field of ObjectMetaType, if provided.\n\nExample: - \"d15f1fad-4d37-48c0-8706-df1824d76d31\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "d15f1fad-4d37-48c0-8706-df1824d76d31"
                }
            }
        },
        "schemaSystemObjectMetaType": {
            "type": "object",
            "description": "SystemObjectMetaType is metadata generated or populated by the system for all persisted objects and\ncannot be updated directly by users.",
            "title": "SystemObjectMetaType",
            "x-displayname": "System Metadata",
            "x-ves-proto-message": "ves.io.schema.SystemObjectMetaType",
            "properties": {
                "creation_timestamp": {
                    "type": "string",
                    "description": " CreationTimestamp is a timestamp representing the server time when this object was\n created. It is not guaranteed to be set in happens-before order across separate operations.\n Clients may not set this value. It is represented in RFC3339 form and is in UTC.",
                    "title": "creation_timestamp",
                    "format": "date-time",
                    "x-displayname": "Creation Timestamp"
                },
                "creator_class": {
                    "type": "string",
                    "description": " A value identifying the class of the user or service which created this configuration object.\n\nExample: - \"value\"-",
                    "title": "creator_class",
                    "x-displayname": "Creator Class",
                    "x-ves-example": "value"
                },
                "creator_cookie": {
                    "type": "string",
                    "description": " This can used by the creator of the object for later audit for e.g. by storing the\n version identifying information of the object so at future it can be determined if\n version present at remote end is current or stale.\n\nExample: - \"value\"-",
                    "title": "creator_cookie",
                    "x-displayname": "Creator Cookie",
                    "x-ves-example": "value"
                },
                "creator_id": {
                    "type": "string",
                    "description": " A value identifying the exact user or service that created this configuration object\n\nExample: - \"value\"-",
                    "title": "creator_id",
                    "x-displayname": "Creator ID",
                    "x-ves-example": "value"
                },
                "deletion_timestamp": {
                    "type": "string",
                    "description": " DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This\n field is set by the server when a graceful deletion is requested by the user, and is not\n directly settable by a client. The resource is expected to be deleted (no longer visible\n from resource lists, and not reachable by name) after the time in this field, once the\n finalizers list is empty. As long as the finalizers list contains items, deletion is blocked.\n Once the deletionTimestamp is set, this value may not be unset or be set further into the\n future, although it may be shortened or the resource may be deleted prior to this time.\n For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react\n by sending a graceful termination signal to the containers in the pod. After that 30 seconds,\n the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup,\n remove the pod from the API. In the presence of network partitions, this object may still\n exist after this timestamp, until an administrator or automated process can determine the\n resource is fully terminated.\n If not set, graceful deletion of the object has not been requested.\n \n Populated by the system when a graceful deletion is requested.\n Read-only.",
                    "title": "deletion_timestamp",
                    "format": "date-time",
                    "x-displayname": "Deletion Timestamp"
                },
                "finalizers": {
                    "type": "array",
                    "description": " Must be empty before the object is deleted from the registry. Each entry\n is an identifier for the responsible component that will remove the entry\n from the list. If the deletionTimestamp of the object is non-nil, entries\n in this list can only be removed.\n\nExample: - \"value\"-",
                    "title": "finalizers",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Finalizers",
                    "x-ves-example": "value"
                },
                "initializers": {
                    "description": " An initializer is a controller which enforces some system invariant at object creation time.\n This field is a list of initializers that have not yet acted on this object. If nil or empty,\n this object has been completely initialized. Otherwise, the object is considered uninitialized\n and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to\n observe uninitialized objects.\n \n When an object is created, the system will populate this list with the current set of initializers.\n Only privileged users may set or modify this list. Once it is empty, it may not be modified further\n by any user.",
                    "title": "initializers",
                    "$ref": "#/definitions/schemaInitializersType",
                    "x-displayname": "Initializers"
                },
                "modification_timestamp": {
                    "type": "string",
                    "description": " ModificationTimestamp is a timestamp representing the server time when this object was\n last modified.",
                    "title": "modification_timestamp",
                    "format": "date-time",
                    "x-displayname": "Modification Timestamp"
                },
                "namespace": {
                    "type": "array",
                    "description": " The namespace this object belongs to. This is populated by the service based on the\n metadata.namespace field when an object is created.",
                    "title": "namespace",
                    "items": {
                        "$ref": "#/definitions/schemaObjectRefType"
                    },
                    "x-displayname": "Namespace Reference"
                },
                "object_index": {
                    "type": "integer",
                    "description": " Unique index for the object. Some objects need a unique integer index to be allocated\n for each object type. This field will be populated for all objects that need it and will\n be zero otherwise.\n\nExample: - \"0\"-",
                    "title": "object_index",
                    "format": "int64",
                    "x-displayname": "Object Index",
                    "x-ves-example": "0"
                },
                "owner_view": {
                    "description": " Reference to the view object that owns this object.\n If there is no view owner, this field will be nil.\n If not nil, this object can only be edited/deleted through the view",
                    "title": "owner_view",
                    "$ref": "#/definitions/schemaViewRefType",
                    "x-displayname": "Owner View"
                },
                "sre_disable": {
                    "type": "boolean",
                    "description": " This should be set to true If VES/SRE operator wants to suppress an object from being\n presented to business-logic of a daemon(e.g. due to bad-form/issue-causing Object).\n This is meant only to be used in temporary situations for operational continuity till\n a fix is rolled out in business-logic.\n\nExample: - \"true\"-",
                    "title": "sre_disable",
                    "format": "boolean",
                    "x-displayname": "SRE Disable",
                    "x-ves-example": "true"
                },
                "tenant": {
                    "type": "string",
                    "description": " Tenant to which this configuration object belongs to. The value for this is found from\n presented credentials.\n\nExample: - \"acmecorp\"-",
                    "title": "tenant",
                    "x-displayname": "Tenant",
                    "x-ves-example": "acmecorp"
                },
                "trace_info": {
                    "type": "string",
                    "description": " trace_info holds information(\u003ctrace-id\u003e:\u003cspan-id\u003e:\u003cparent-span-id\u003e) of the request doing\n the object modification. This can be used on the watch side to create subsequent spans.\n This information can be used to co-relate activities across services (modulo state compression)\n for a synchronous API.\n\nExample: - \"value\"-",
                    "title": "trace_info",
                    "x-displayname": "Trace Info",
                    "x-ves-example": "value"
                },
                "uid": {
                    "type": "string",
                    "description": " uid is the unique in time and space value for this object. It is generated by\n the server on successful creation of an object and is not allowed to change on Replace\n API. The value of is taken from uid field of ObjectMetaType, if provided.\n\nExample: - \"d15f1fad-4d37-48c0-8706-df1824d76d31\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "d15f1fad-4d37-48c0-8706-df1824d76d31"
                },
                "vtrp_id": {
                    "type": "string",
                    "description": " Indicate origin of this object.",
                    "title": "vtrp_id",
                    "x-displayname": "VTRP ID"
                }
            }
        },
        "schemaTunnelEncapsulationType": {
            "type": "string",
            "description": "Type of tunnel encapsulation\n\nIPSEC using public key infrastructure\nIPSEC using pre shared key\nSSL encapsulation\nGRE encapsulation",
            "title": "TunnelEncapsulationType",
            "enum": [
                "IPSEC_PKI",
                "IPSEC_PSK",
                "SSL",
                "GRE"
            ],
            "default": "IPSEC_PKI",
            "x-displayname": "Tunnel Encapsulation Type",
            "x-ves-proto-enum": "ves.io.schema.TunnelEncapsulationType"
        },
        "schemaViewRefType": {
            "type": "object",
            "description": "ViewRefType represents a reference to a view",
            "title": "ViewRefType",
            "x-displayname": "View Reference",
            "x-ves-proto-message": "ves.io.schema.ViewRefType",
            "properties": {
                "kind": {
                    "type": "string",
                    "description": " Kind of the view object\n\nExample: - \"http_proxy\"-",
                    "title": "kind",
                    "x-displayname": "Kind",
                    "x-ves-example": "http_proxy"
                },
                "name": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then name will hold the referred object's(e.g. route's) name.\n\nExample: - \"contactus-route\"-",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "contactus-route"
                },
                "namespace": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then namespace will hold the referred object's(e.g. route's) namespace.\n\nExample: - \"ns1\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "ns1"
                },
                "uid": {
                    "type": "string",
                    "description": " UID of the view object\n\nExample: - \"f3744323-1adf-4aaa-a5dc-0707c1d1bd82\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "f3744323-1adf-4aaa-a5dc-0707c1d1bd82"
                }
            }
        },
        "schemaVipVrrpType": {
            "type": "string",
            "description": "VRRP advertisement mode for VIP\n\nInvalid VRRP mode\nVRRP advertisement enabled for virtual-ip\nVRRP advertisement disabled for virtual-ip",
            "title": "VipVrrpType",
            "enum": [
                "VIP_VRRP_INVALID",
                "VIP_VRRP_ENABLE",
                "VIP_VRRP_DISABLE"
            ],
            "default": "VIP_VRRP_INVALID",
            "x-displayname": "VRRP Virtual-IP",
            "x-ves-proto-enum": "ves.io.schema.VipVrrpType"
        },
        "schemaVirtualNetworkType": {
            "type": "string",
            "description": "Different types of virtual networks understood by the system\n\nVirtual-network of type VIRTUAL_NETWORK_SITE_LOCAL provides connectivity to public (outside) network.\nThis is an insecure network and is connected to public internet via NAT Gateways/firwalls\nVirtual-network of this type is local to every site. Two virtual networks of this type on different\nsites are neither related nor connected.\n\nConstraints:\nThere can be atmost one virtual network of this type in a given site.\nThis network type is supported on CE sites. This network is created automatically and present on all sites\nVirtual-network of type VIRTUAL_NETWORK_SITE_LOCAL_INSIDE is a private network inside site.\nIt is a secure network and is not connected to public network.\nVirtual-network of this type is local to every site. Two virtual networks of this type on different\nsites are neither related nor connected.\n\nConstraints:\nThere can be atmost one virtual network of this type in a given site.\nThis network type is supported on CE sites. This network is created during provisioning of site\nUser defined per-site virtual network. Scope of this virtual network is limited to the site.\nThis is not yet supported\nVirtual-network of type VIRTUAL_NETWORK_PUBLIC directly conects to the public internet.\nVirtual-network of this type is local to every site. Two virtual networks of this type on different sites are neither related nor connected.\n\nConstraints:\nThere can be atmost one virtual network of this type in a given site.\nThis network type is supported on RE sites only\nIt is an internally created by the system. They must not be created by user\nVirtual Neworks with global scope across different sites in Volterra domain.\nAn example global virtual-network called \"AIN Network\" is created for every tenant.\nfor volterra fabric\n\nConstraints:\nIt is currently only supported as internally created by the system.\nvK8s service network for a given tenant. Used to advertise a virtual host only to vk8s pods for that tenant\nConstraints:\nIt is an internally created by the system. Must not be created by user\nVER internal network for the site. It can only be used for virtual hosts with SMA_PROXY type proxy\nConstraints:\nIt is an internally created by the system. Must not be created by user\nVirtual-network of type VIRTUAL_NETWORK_SITE_LOCAL_INSIDE_OUTSIDE represents both\nVIRTUAL_NETWORK_SITE_LOCAL and VIRTUAL_NETWORK_SITE_LOCAL_INSIDE\n\nConstraints:\nThis network type is only meaningful in an advertise policy\nWhen virtual-network of type VIRTUAL_NETWORK_IP_AUTO is selected for\nan endpoint, VER will try to determine the network based on the provided\nIP address\n\nConstraints:\nThis network type is only meaningful in an endpoint\n\nVoltADN Private Network is used on volterra RE(s) to connect to customer private networks\nThis network is created by opening a support ticket\n\nThis network is per site srv6 network\nVER IP Fabric network for the site.\nThis Virtual network type is used for exposing virtual host on IP Fabric network on the VER site or\nfor endpoint in IP Fabric network\nConstraints:\nIt is an internally created by the system. Must not be created by user",
            "title": "VirtualNetworkType",
            "enum": [
                "VIRTUAL_NETWORK_SITE_LOCAL",
                "VIRTUAL_NETWORK_SITE_LOCAL_INSIDE",
                "VIRTUAL_NETWORK_PER_SITE",
                "VIRTUAL_NETWORK_PUBLIC",
                "VIRTUAL_NETWORK_GLOBAL",
                "VIRTUAL_NETWORK_SITE_SERVICE",
                "VIRTUAL_NETWORK_VER_INTERNAL",
                "VIRTUAL_NETWORK_SITE_LOCAL_INSIDE_OUTSIDE",
                "VIRTUAL_NETWORK_IP_AUTO",
                "VIRTUAL_NETWORK_VOLTADN_PRIVATE_NETWORK",
                "VIRTUAL_NETWORK_SRV6_NETWORK",
                "VIRTUAL_NETWORK_IP_FABRIC"
            ],
            "default": "VIRTUAL_NETWORK_SITE_LOCAL",
            "x-displayname": "Virtual Network Type",
            "x-ves-proto-enum": "ves.io.schema.VirtualNetworkType"
        },
        "siteActiveState": {
            "type": "string",
            "description": "Active/Backup state for the interface\n\nUnknown state\nInterface in active state\nInterface in backup state",
            "title": "Active State",
            "enum": [
                "STATE_UNKNOWN",
                "STATE_ACTIVE",
                "STATE_BACKUP"
            ],
            "default": "STATE_UNKNOWN",
            "x-displayname": "Active State",
            "x-ves-proto-enum": "ves.io.schema.site.ActiveState"
        },
        "siteAddressMode": {
            "type": "string",
            "description": "AddressMode identifies the mode of address assignment on an interface\n\n - STATIC: Static\n\nInterface Address is assigned statically\n - DHCP: DHCP\n\nInterface Address is obtained via DHCP",
            "title": "Interface Address Mode",
            "enum": [
                "STATIC",
                "DHCP"
            ],
            "default": "STATIC",
            "x-displayname": "AddressMode",
            "x-ves-proto-enum": "ves.io.schema.site.AddressMode"
        },
        "siteAresConnectionStatus": {
            "type": "object",
            "description": "Status of Ares Connection",
            "title": "Ares Connection Status",
            "x-displayname": "Ares Connection Status",
            "x-ves-proto-message": "ves.io.schema.site.AresConnectionStatus",
            "properties": {
                "state": {
                    "description": " status of the connection to the server",
                    "title": "state",
                    "$ref": "#/definitions/siteVTRPState",
                    "x-displayname": "State"
                },
                "url": {
                    "type": "string",
                    "description": " url identifies the Ares server",
                    "title": "url",
                    "x-displayname": "URL"
                }
            }
        },
        "siteBios": {
            "type": "object",
            "description": "BIOS information.",
            "title": "Bios Data",
            "x-displayname": "Bios Data",
            "x-ves-proto-message": "ves.io.schema.site.Bios",
            "properties": {
                "date": {
                    "type": "string",
                    "description": " information from /sys/class/dmi/id/bios_date",
                    "title": "date",
                    "x-displayname": "Date"
                },
                "vendor": {
                    "type": "string",
                    "description": " information from /sys/class/dmi/id/bios_vendor",
                    "title": "vendor",
                    "x-displayname": "Vendor"
                },
                "version": {
                    "type": "string",
                    "description": " information from /sys/class/dmi/id/bios_version",
                    "title": "version",
                    "x-displayname": "Version"
                }
            }
        },
        "siteBoard": {
            "type": "object",
            "description": "Board information",
            "title": "Board Details",
            "x-displayname": "Board Details",
            "x-ves-proto-message": "ves.io.schema.site.Board",
            "properties": {
                "asset_tag": {
                    "type": "string",
                    "description": " information from /sys/class/dmi/id/board_asset_tag",
                    "title": "asset_tag",
                    "x-displayname": "Asset Tag"
                },
                "name": {
                    "type": "string",
                    "description": " information from /sys/class/dmi/id/board_name",
                    "title": "name",
                    "x-displayname": "Name"
                },
                "serial": {
                    "type": "string",
                    "description": " information from /sys/class/dmi/id/board_serial",
                    "title": "serial",
                    "x-displayname": "Serial Number"
                },
                "vendor": {
                    "type": "string",
                    "description": " information from /sys/class/dmi/id/board_vendor",
                    "title": "vendor",
                    "x-displayname": "Vendor"
                },
                "version": {
                    "type": "string",
                    "description": " information from /sys/class/dmi/id/board_version",
                    "title": "version",
                    "x-displayname": "Version"
                }
            }
        },
        "siteBondMembersType": {
            "type": "object",
            "description": "BondMembersType represents the bond interface members  along with the corresponding link state",
            "title": "Bond Interface Members",
            "x-displayname": "Bond Interface Members",
            "x-ves-proto-message": "ves.io.schema.site.BondMembersType",
            "properties": {
                "link_speed": {
                    "type": "integer",
                    "description": " Link speed of Bond Interface Member in Mbps",
                    "title": "Link Speed\nx-displayName: \"Link Speed in Mbps\"\nLink speed of Bond Interface Member in Mbps",
                    "format": "int64",
                    "x-displayname": "Link Speed in Mbps"
                },
                "link_state": {
                    "type": "boolean",
                    "description": " Link state of Bond Interface Member",
                    "title": "Link State\nx-displayName: \"Link State\"\nLink state of Bond Interface Member",
                    "format": "boolean",
                    "x-displayname": "Link State"
                },
                "name": {
                    "type": "string",
                    "description": " Name of the Bond Interface Member",
                    "title": "Name\nx-displayName: \"Name\"\nName of the Bond Interface Member",
                    "x-displayname": "Name"
                }
            }
        },
        "siteCeSiteMode": {
            "type": "string",
            "description": "If Site is CE, it can be in followig modes\n\nIngress Egress Gateway CE\nIngress Gateway CE\nEgress Gateway CE\nDC Cloud Gateway CE\nCPE CE",
            "title": "CeSiteMode",
            "enum": [
                "CE_SITE_MODE_INGRESS_EGRESS_GW",
                "CE_SITE_MODE_INGRESS_GW",
                "CE_SITE_MODE_EGRESS_GW",
                "CE_SITE_MODE_DC_CLOUD_GW",
                "CE_SITE_MODE_CPE"
            ],
            "default": "CE_SITE_MODE_INGRESS_EGRESS_GW",
            "x-displayname": "Customer Edge Site Mode",
            "x-ves-proto-enum": "ves.io.schema.site.CeSiteMode"
        },
        "siteChassis": {
            "type": "object",
            "description": "Chassis information.",
            "title": "Chassis Details",
            "x-displayname": "Chassis Details",
            "x-ves-proto-message": "ves.io.schema.site.Chassis",
            "properties": {
                "asset_tag": {
                    "type": "string",
                    "description": " information from /sys/class/dmi/id/chassis_asset_tag",
                    "title": "asset_tag",
                    "x-displayname": "Asset Tag"
                },
                "serial": {
                    "type": "string",
                    "description": " information from /sys/class/dmi/id/chassis_serial",
                    "title": "serial",
                    "x-displayname": "Serial Number"
                },
                "type": {
                    "type": "integer",
                    "description": " information from /sys/class/dmi/id/chassis_type",
                    "title": "type",
                    "format": "int64",
                    "x-displayname": "Type"
                },
                "vendor": {
                    "type": "string",
                    "description": " information from /sys/class/dmi/id/chassis_vendor",
                    "title": "vendor",
                    "x-displayname": "Vendor"
                },
                "version": {
                    "type": "string",
                    "description": " information from /sys/class/dmi/id/chassis_version",
                    "title": "version",
                    "x-displayname": "Version"
                }
            }
        },
        "siteCoordinates": {
            "type": "object",
            "description": "Coordinates of the site which provides the site physical location",
            "title": "Site Coordinates",
            "x-displayname": "Site Coordinates",
            "x-ves-proto-message": "ves.io.schema.site.Coordinates",
            "properties": {
                "latitude": {
                    "type": "number",
                    "description": " Latitude of the site location",
                    "title": "latitude",
                    "format": "float",
                    "x-displayname": "Latitude"
                },
                "longitude": {
                    "type": "number",
                    "description": " longitude of site location",
                    "title": "longitude",
                    "format": "float",
                    "x-displayname": "Longitude"
                }
            }
        },
        "siteCpu": {
            "type": "object",
            "description": "CPU information",
            "title": "Cpu information",
            "x-displayname": "Cpu Information",
            "x-ves-proto-message": "ves.io.schema.site.Cpu",
            "properties": {
                "cache": {
                    "type": "integer",
                    "description": " CPU cache size in KB",
                    "title": "cache",
                    "format": "int64",
                    "x-displayname": "Cache"
                },
                "cores": {
                    "type": "integer",
                    "description": " number of physical CPU cores",
                    "title": "cores",
                    "format": "int64",
                    "x-displayname": "Cores"
                },
                "cpus": {
                    "type": "integer",
                    "description": " number of physical CPUs",
                    "title": "cpus",
                    "format": "int64",
                    "x-displayname": "CPUs"
                },
                "model": {
                    "type": "string",
                    "description": " CPU model",
                    "title": "model",
                    "x-displayname": "Model"
                },
                "speed": {
                    "type": "integer",
                    "description": " CPU clock rate in MHz",
                    "title": "speed",
                    "format": "int64",
                    "x-displayname": "Speed"
                },
                "threads": {
                    "type": "integer",
                    "description": " number of logical (HT) CPU cores",
                    "title": "threads",
                    "format": "int64",
                    "x-displayname": "Threads"
                },
                "vendor": {
                    "type": "string",
                    "description": " CPU vendor",
                    "title": "vendor",
                    "x-displayname": "Vendor"
                }
            }
        },
        "siteDefaultUnderlayNetworkType": {
            "type": "object",
            "description": "Optional, virtual network to be used as underlay for different overlay protocols (SRv6, IP-in-IP tunnels for DC Cluster Group)\nDefault is site-local-outside network",
            "title": "default_underlay_vn",
            "x-displayname": "Default Underlay Virtual Network",
            "x-ves-oneof-field-private_access_choice": "[\"site_local_inside\",\"site_local_outside\"]",
            "x-ves-proto-message": "ves.io.schema.site.DefaultUnderlayNetworkType",
            "properties": {
                "site_local_inside": {
                    "description": "Exclusive with [site_local_outside]\nx-displayName: \"Site Local Inside\"\nUse site local inside as underlay protocol",
                    "title": "Site Local Inside",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "site_local_outside": {
                    "description": "Exclusive with [site_local_inside]\nx-displayName: \"Site Local Outside\"\nUse site local outside as underlay protocol",
                    "title": "Site Local Outside",
                    "$ref": "#/definitions/ioschemaEmpty"
                }
            }
        },
        "siteDeploymentState": {
            "type": "object",
            "description": "Details of Deployment",
            "title": "Deployment State",
            "x-displayname": "Deployment State",
            "x-ves-proto-message": "ves.io.schema.site.DeploymentState",
            "properties": {
                "message": {
                    "type": "string",
                    "description": " A verbose human readable explanation of the reason",
                    "title": "message",
                    "x-displayname": "Message"
                },
                "modification_timestamp": {
                    "type": "string",
                    "description": " ModificationTimestamp is a timestamp representing the server time when deployment state was\n last modified.",
                    "title": "modification_timestamp",
                    "format": "date-time",
                    "x-displayname": "Modified At"
                },
                "phase": {
                    "description": " Phase of last deployment upgrade with options upgrade triggered, upgrade in-progress and upgrade completed",
                    "title": "Phase",
                    "$ref": "#/definitions/siteSoftwareUpgradePhase",
                    "x-displayname": "Phase"
                },
                "result": {
                    "type": "string",
                    "description": " Result of the deployment, one of Success, Failure, Unknown",
                    "title": "result",
                    "x-displayname": "Result"
                },
                "version": {
                    "type": "string",
                    "description": " Version name for this deployment state.",
                    "title": "version",
                    "x-displayname": "Version"
                }
            }
        },
        "siteFleetCondition": {
            "type": "object",
            "x-ves-proto-message": "ves.io.schema.site.FleetCondition",
            "properties": {
                "message": {
                    "type": "string",
                    "description": " A verbose human readable explanation of the reason",
                    "title": "message",
                    "x-displayname": "Message"
                },
                "module_name": {
                    "type": "string",
                    "description": " A name of module that produced the condition",
                    "title": "module_name",
                    "x-displayname": "Module Name"
                },
                "name": {
                    "type": "string",
                    "description": " A name of condition",
                    "title": "name",
                    "x-displayname": "Name"
                },
                "result": {
                    "type": "string",
                    "description": " Result of the condition",
                    "title": "result",
                    "x-displayname": "Result"
                }
            }
        },
        "siteFleetDeploymentState": {
            "type": "object",
            "description": "Details of Fleet Deployment",
            "title": "Fleet Deployment State",
            "x-displayname": "Fleet Deployment State",
            "x-ves-proto-message": "ves.io.schema.site.FleetDeploymentState",
            "properties": {
                "condition": {
                    "type": "array",
                    "description": " Map of fleet conditions",
                    "title": "conditiom",
                    "items": {
                        "$ref": "#/definitions/siteFleetCondition"
                    },
                    "x-displayname": "Condition"
                },
                "hash": {
                    "type": "string",
                    "description": " Hash sum of fleet config.",
                    "title": "hash",
                    "x-displayname": "Fleet Hash"
                },
                "modification_timestamp": {
                    "type": "string",
                    "description": " ModificationTimestamp is a timestamp representing the server time when deployment state was\n last modified.",
                    "title": "modification_timestamp",
                    "format": "date-time",
                    "x-displayname": "Modified At"
                },
                "result": {
                    "type": "string",
                    "description": " Summarized result of the deployment, one of Success, Failure, Unknown",
                    "title": "result",
                    "x-displayname": "Result"
                }
            }
        },
        "siteFleetStatus": {
            "type": "object",
            "description": "Volterra fleet status on the node",
            "title": "Volterra Fleet Status",
            "x-displayname": "Volterra Fleet Status",
            "x-ves-proto-message": "ves.io.schema.site.FleetStatus",
            "properties": {
                "deployment_state": {
                    "description": " deployment state shows status of last fleet version on the node",
                    "title": "deployment_state",
                    "$ref": "#/definitions/siteFleetDeploymentState",
                    "x-displayname": "Fleet Deployment State"
                }
            }
        },
        "siteGPU": {
            "type": "object",
            "description": "GPU information on server",
            "title": "GPU",
            "x-displayname": "GPU",
            "x-ves-proto-message": "ves.io.schema.site.GPU",
            "properties": {
                "cuda_version": {
                    "type": "string",
                    "description": " GPU Cuda Version\n\nExample: - \"10.2\"-",
                    "title": "cudaVersion",
                    "x-displayname": "Cuda Version",
                    "x-ves-example": "10.2"
                },
                "driver_version": {
                    "type": "string",
                    "description": " GPU Driver Version\n\nExample: - \"440.82\"-",
                    "title": "driverVersion",
                    "x-displayname": "Driver Version",
                    "x-ves-example": "440.82"
                },
                "gpu_device": {
                    "type": "array",
                    "description": " List of GPU devices in server",
                    "title": "GPUDevice",
                    "items": {
                        "$ref": "#/definitions/siteGPUDevice"
                    },
                    "x-displayname": "GPU devices"
                }
            }
        },
        "siteGPUDevice": {
            "type": "object",
            "x-ves-proto-message": "ves.io.schema.site.GPUDevice",
            "properties": {
                "id": {
                    "type": "string",
                    "description": " GPU ID\n\nExample: - \"00000000:17:00.0\"-",
                    "title": "id",
                    "x-displayname": "GPU ID",
                    "x-ves-example": "00000000:17:00.0"
                },
                "processes": {
                    "type": "string",
                    "description": " GPU Processes",
                    "title": "processes",
                    "x-displayname": "Processes"
                },
                "product_name": {
                    "type": "string",
                    "description": " GPU Product Name\n\nExample: - \"Quadro P1000\"-",
                    "title": "productName",
                    "x-displayname": "Product Name",
                    "x-ves-example": "Quadro P1000"
                }
            }
        },
        "siteGetResponse": {
            "type": "object",
            "description": "This is the output message of the 'Get' RPC",
            "title": "GetResponse is the shape of a read site",
            "x-displayname": "Get Response",
            "x-ves-proto-message": "ves.io.schema.site.GetResponse",
            "properties": {
                "metadata": {
                    "description": " Standard object's metadata",
                    "title": "metadata",
                    "$ref": "#/definitions/schemaObjectGetMetaType",
                    "x-displayname": "Metadata"
                },
                "object": {
                    "title": "object",
                    "$ref": "#/definitions/siteObject",
                    "x-displayname": "Object"
                },
                "referring_objects": {
                    "type": "array",
                    "description": "The set of objects that are referring to this object in their spec",
                    "title": "referring_objects",
                    "items": {
                        "$ref": "#/definitions/schemaObjectRefType"
                    },
                    "x-displayname": "Referring Objects"
                },
                "replace_form": {
                    "description": "Format to replace changeable values in object",
                    "title": "replace_form",
                    "$ref": "#/definitions/siteReplaceRequest",
                    "x-displayname": "ReplaceRequest Format"
                },
                "resource_version": {
                    "type": "string",
                    "description": "Version of the object\n\nExample: -\"42\"-",
                    "title": "resource_version",
                    "x-displayname": "Resource Version",
                    "x-ves-example": "42"
                },
                "spec": {
                    "description": " Specification of the desired behavior of the site",
                    "title": "spec",
                    "$ref": "#/definitions/siteGetSpecType",
                    "x-displayname": "Spec"
                },
                "status": {
                    "type": "array",
                    "description": "The status reported by different services for this configuration object",
                    "title": "status",
                    "items": {
                        "$ref": "#/definitions/siteStatusObject"
                    },
                    "x-displayname": "Status"
                },
                "system_metadata": {
                    "description": " System generated object's metadata",
                    "title": "system metadata",
                    "$ref": "#/definitions/schemaSystemObjectGetMetaType",
                    "x-displayname": "System Metadata"
                }
            }
        },
        "siteGetResponseFormatCode": {
            "type": "string",
            "description": "x-displayName: \"Get Response Format\"\nThis is the various forms that can be requested to be sent in the GetResponse\n\n - GET_RSP_FORMAT_DEFAULT: x-displayName: \"Default Format\"\nDefault format of returned resource\n - GET_RSP_FORMAT_FOR_REPLACE: x-displayName: \"Replace request format\"\nResponse should be in ReplaceRequest format\n - GET_RSP_FORMAT_STATUS: x-displayName: \"Status format\"\nResponse should be in StatusObject(s) format\n - GET_RSP_FORMAT_READ: x-displayName: \"GetSpecType format\"\nResponse should be in format of GetSpecType\n - GET_RSP_FORMAT_REFERRING_OBJECTS: x-displayName: \"Referring Objects\"\nResponse should have other objects referring to this object",
            "title": "GetResponseFormatCode",
            "enum": [
                "GET_RSP_FORMAT_DEFAULT",
                "GET_RSP_FORMAT_FOR_REPLACE",
                "GET_RSP_FORMAT_STATUS",
                "GET_RSP_FORMAT_READ",
                "GET_RSP_FORMAT_REFERRING_OBJECTS"
            ],
            "default": "GET_RSP_FORMAT_DEFAULT"
        },
        "siteGetSpecType": {
            "type": "object",
            "description": "Get of site",
            "title": "Get Site",
            "x-displayname": "Get Site",
            "x-ves-proto-message": "ves.io.schema.site.GetSpecType",
            "properties": {
                "address": {
                    "type": "string",
                    "description": " Site's geographical address that can be used determine its latitude and longitude.\n\nExample: - \"123 Street, city, country, postal code\"-",
                    "x-displayname": "Geographical Address",
                    "x-ves-example": "123 Street, city, country, postal code"
                },
                "bgp_peer_address": {
                    "type": "string",
                    "description": " Optional bgp peer address that can be used as parameter for BGP configuration when BGP is configured\n to fetch BGP peer address from site Object. This can be used to change peer addres per site in fleet.\n\nExample: - \"10.1.1.1\"-",
                    "x-displayname": "BGP Peer Address",
                    "x-ves-example": "10.1.1.1"
                },
                "bgp_router_id": {
                    "type": "string",
                    "description": " Optional bgp router id that can be used as parameter for BGP configuration when BGP is configurred to\n fetch BGP router ID from site object. This can be used to change router id per site in a fleet.\n\nExample: - \"10.1.1.1\"-",
                    "x-displayname": "BGP Router ID",
                    "x-ves-example": "10.1.1.1"
                },
                "ce_site_mode": {
                    "description": " Customer Eddge Mode. Defines how the CE is being deployed. Invalid for RE Site",
                    "$ref": "#/definitions/siteCeSiteMode",
                    "x-displayname": "CE Site Mode"
                },
                "connected_re": {
                    "type": "array",
                    "description": " Following fields are only for customer edge sites\n List of REs to which to which this CE initiates IPSec/SSL connection to\nRequired: YES",
                    "items": {
                        "$ref": "#/definitions/schemaObjectRefType"
                    },
                    "x-displayname": "Connected REs",
                    "x-ves-required": "true"
                },
                "connected_re_for_config": {
                    "type": "array",
                    "description": " This field is valid only for CE site object\n List of REs which can send config to this CE site\nRequired: YES",
                    "items": {
                        "$ref": "#/definitions/schemaObjectRefType"
                    },
                    "x-displayname": "REs for Configuration",
                    "x-ves-required": "true"
                },
                "coordinates": {
                    "description": " Site longitude and latitude co-ordinates",
                    "$ref": "#/definitions/siteCoordinates",
                    "x-displayname": "Co-ordinates"
                },
                "default_underlay_network": {
                    "description": " Optional, virtual network to be used as underlay for different overlay protocols (SRv6, IP-in-IP tunnels for DC Cluster Group)\n Default is site-local-outside network",
                    "$ref": "#/definitions/siteDefaultUnderlayNetworkType",
                    "x-displayname": "Default Underlay Virtual Network"
                },
                "desired_pool_count": {
                    "type": "integer",
                    "description": " Desired pool count represent desired number of worker(non master) nodes\n for manual scaling of public cloud(AWS, GCP, Azure) sites. The desired count\n must be less than or equal to the maximum size of the scaling group for a\n given public cloud. One may also have to increase maximum scaling group size to\n effectively increase desired pool count.\n\nExample: - \"0\"-",
                    "format": "int32",
                    "x-displayname": "Desired Pool Count",
                    "x-ves-example": "0"
                },
                "global_access_k8s_enabled": {
                    "type": "boolean",
                    "format": "boolean"
                },
                "inside_nameserver": {
                    "type": "string",
                    "description": " Optional DNS server IP to be used for name resolution in inside network\n\nExample: - \"10.1.1.1\"-",
                    "x-displayname": "DNS Server for Inside Network",
                    "x-ves-example": "10.1.1.1"
                },
                "inside_vip": {
                    "type": "string",
                    "description": " Optional Virtual IP to be used as automatic VIP for site local inside network.\n See documentation for \"VIP\" in advertise policy to see when Inside VIP is used.\n When configured, this is used as VIP (depending on advertise policy configuration).\n When not configured, site local inside interface ip will be used as VIP.\n\nExample: - \"10.1.1.1\"-",
                    "x-displayname": "Inside VIP",
                    "x-ves-example": "10.1.1.1"
                },
                "local_access_k8s_enabled": {
                    "type": "boolean",
                    "format": "boolean"
                },
                "local_k8s_access_enabled": {
                    "type": "boolean",
                    "description": " Lets user know if this site has local k8s cluster enabled via fleet configuration.",
                    "format": "boolean",
                    "x-displayname": "Local K8s Cluster Access Enabled"
                },
                "operating_system_version": {
                    "type": "string",
                    "description": " Desired Operating System version for this site.\n\nExample: - \"value\"-",
                    "x-displayname": "Operating System Version",
                    "x-ves-example": "value"
                },
                "outside_nameserver": {
                    "type": "string",
                    "description": " Optional DNS server IP to be used for name resolution in outside network\n\nExample: - \"10.1.1.1\"-",
                    "x-displayname": "DNS Server for Outside Network",
                    "x-ves-example": "10.1.1.1"
                },
                "outside_vip": {
                    "type": "string",
                    "description": " Optional Virtual IP to be used as automatic VIP for site local outside network.\n See documentation for \"VIP\" in advertise policy to see when Outside VIP is used.\n When configured, this is used as VIP (depending on advertise policy configuration).\n When not configured, site local interface ip will be used as VIP.\n\nExample: - \"10.1.1.1\"-",
                    "x-displayname": "Outside VIP",
                    "x-ves-example": "10.1.1.1"
                },
                "region": {
                    "type": "string",
                    "description": " Cloud Region. A region is a set of datacenters deployed within a latency-defined perimeter and connected through a dedicated regional low-latency network\n\nExample: - \"east-us-2\"-",
                    "x-displayname": "Region",
                    "x-ves-example": "east-us-2"
                },
                "site_state": {
                    "description": " Site state defines its state machine and in which operational phase it is. It is for both Regional Edge\n as well as Customer Edge. Example flow is site is in PROVISIONING then goest to STANDBY and ONLINE. In case of\n switching to different Connected RE it goes back to PROVISIONING and ONLINE. If any of phase failes then it\n goest to FAILED.",
                    "$ref": "#/definitions/siteSiteState",
                    "x-displayname": "Site State"
                },
                "site_subtype": {
                    "description": " Site subtype",
                    "$ref": "#/definitions/siteSiteSubtype",
                    "x-displayname": "Site Subtype"
                },
                "site_to_site_network_type": {
                    "description": " Optional, virtual network type to be used for site to site tunnels created with SiteMeshGroup.\n Must be specified for CE site mesh group configuration",
                    "$ref": "#/definitions/schemaVirtualNetworkType",
                    "x-displayname": "Site To Site Network Type"
                },
                "site_to_site_tunnel_ip": {
                    "type": "string",
                    "description": " Optionsl, VIP in the site_to_site_network_type configured above used for terminating IPSec/SSL tunnels created with SiteMeshGroup.\n\nExample: - \"10.1.1.1\"-",
                    "x-displayname": "Site To Site Tunnel IP",
                    "x-ves-example": "10.1.1.1"
                },
                "site_type": {
                    "description": " Site type which specifies whether it is RE or CE",
                    "$ref": "#/definitions/siteSiteType",
                    "x-displayname": "Site Type"
                },
                "tunnel_dead_timeout": {
                    "type": "integer",
                    "description": " Time interval, in millisec, within which any ipsec / ssl connection from the site going down is detected.\n When not set (== 0), a default value of 10000 msec will be used.\n\nExample: - \"0\"-",
                    "format": "int64",
                    "x-displayname": "Tunnel Dead Timeout (msec)",
                    "x-ves-example": "0"
                },
                "tunnel_type": {
                    "description": " Tunnel type specifies type of tunnels enabled from this site. The tunnel type is used for automatic tunnels\n created between regional-edge sites or between regional-edge and customer-edge sites\n\n A tunnel connects two sites. The tunnel types enabled for tunnel results from intersection of tunnel types\n enabled for the two sites. IPSec gets priority over SSL when both are enabled\n\n Note: Tunnels can also be configured via SiteMeshGroup. Tunnel type is not used for SiteMeshGroup tunnels",
                    "$ref": "#/definitions/schemaSiteToSiteTunnelType",
                    "x-displayname": "Site Tunnel Type"
                },
                "vip_params_per_az": {
                    "type": "array",
                    "description": " Optional Publish VIP Parameters Per AZ for public cloud sites.\n See documentation for \"VIP\" in advertise policy to see when Inside VIP or Outside VIP is used.\n When configured, the VIP(s) defined will be used to publish to external systems like K8s, Consul",
                    "items": {
                        "$ref": "#/definitions/sitePublishVIPParamsPerAz"
                    },
                    "x-displayname": "Publish VIP Params Per AZ"
                },
                "vip_vrrp_mode": {
                    "description": " Optional VIP VRRP advertisement mode. This controls the ARP behavior for \"Outside VIP\" and \"Inside VIP\"\n addresses, when they are configured. When turned on, the Master VER would advertise gratuitous ARPs and\n would respond to ARP queries for these addresses. When turned off, ARP responses are not given by VER.\n\n If BGP is configured, the Inside VIP and outside VIP addresses will be advertised by BGP. This is\n irrespective of the vrrp mode.\n\n When Outside VIP / Inside VIP are configured, it is recommended to turn on vrrp and also configure BGP.",
                    "$ref": "#/definitions/schemaVipVrrpType",
                    "x-displayname": "VIP Advertisement Mode"
                },
                "volterra_software_overide": {
                    "description": " Policy to pick Volterra software version between verion given in site and corresponding fleet object.",
                    "$ref": "#/definitions/siteSiteSoftwareOverrideType",
                    "x-displayname": "Site Software Version Override"
                },
                "volterra_software_version": {
                    "type": "string",
                    "description": " Desired Volterra software version for this site, a string matching released set of software components.\n\nExample: - \"value\"-",
                    "x-displayname": "Software Version",
                    "x-ves-example": "value"
                }
            }
        },
        "siteGlobalSpecType": {
            "type": "object",
            "description": "Global specification of Site object",
            "title": "Global Specification",
            "x-displayname": "Specification",
            "x-ves-proto-message": "ves.io.schema.site.GlobalSpecType",
            "properties": {
                "address": {
                    "type": "string",
                    "description": " Site's geographical address that can be used determine its latitude and longitude.\n\nExample: - \"123 Street, city, country, postal code\"-",
                    "title": "address",
                    "x-displayname": "Geographical Address",
                    "x-ves-example": "123 Street, city, country, postal code"
                },
                "ares_list": {
                    "type": "array",
                    "description": " List of Ares services in an RE site. This is used to create a full mesh of Ares services across all REs.",
                    "title": "ares_list",
                    "items": {
                        "$ref": "#/definitions/schemaServiceParameters"
                    },
                    "x-displayname": "Ares Services"
                },
                "ares_vtrp_list": {
                    "type": "array",
                    "description": " List of Ares services in an RE site for use with VTRP. This is used to choose a redundant pair of Ares services for VTRP clients.",
                    "title": "ares_vtrp_list",
                    "items": {
                        "$ref": "#/definitions/schemaServiceParameters"
                    },
                    "x-displayname": "Ares VTRP Services"
                },
                "bgp_peer_address": {
                    "type": "string",
                    "description": " Optional bgp peer address that can be used as parameter for BGP configuration when BGP is configured\n to fetch BGP peer address from site Object. This can be used to change peer addres per site in fleet.\n\nExample: - \"10.1.1.1\"-",
                    "title": "bgp_peer_address",
                    "x-displayname": "BGP Peer Address",
                    "x-ves-example": "10.1.1.1"
                },
                "bgp_router_id": {
                    "type": "string",
                    "description": " Optional bgp router id that can be used as parameter for BGP configuration when BGP is configurred to\n fetch BGP router ID from site object. This can be used to change router id per site in a fleet.\n\nExample: - \"10.1.1.1\"-",
                    "title": "bgp_router_id",
                    "x-displayname": "BGP Router ID",
                    "x-ves-example": "10.1.1.1"
                },
                "ce_site_mode": {
                    "description": " Customer Eddge Mode. Defines how the CE is being deployed. Invalid for RE Site",
                    "title": "CE Site Mode",
                    "$ref": "#/definitions/siteCeSiteMode",
                    "x-displayname": "CE Site Mode"
                },
                "cluster_ip": {
                    "type": "string",
                    "description": " VIP in the Fabric VN for accessing Volterra services like Ares etc\n constraint - used only in REs\n\nExample: - \"1.2.3.4\"-",
                    "title": "cluster_ip",
                    "x-displayname": "Cluster IP",
                    "x-ves-example": "1.2.3.4"
                },
                "connected_re": {
                    "type": "array",
                    "description": " Following fields are only for customer edge sites\n List of REs to which to which this CE initiates IPSec/SSL connection to\nRequired: YES",
                    "title": "Connected REs",
                    "items": {
                        "$ref": "#/definitions/schemaObjectRefType"
                    },
                    "x-displayname": "Connected REs",
                    "x-ves-required": "true"
                },
                "connected_re_for_config": {
                    "type": "array",
                    "description": " This field is valid only for CE site object\n List of REs which can send config to this CE site\nRequired: YES",
                    "title": "connected_re_for_config",
                    "items": {
                        "$ref": "#/definitions/schemaObjectRefType"
                    },
                    "x-displayname": "REs for Configuration",
                    "x-ves-required": "true"
                },
                "coordinates": {
                    "description": " Site longitude and latitude co-ordinates",
                    "title": "coordinates",
                    "$ref": "#/definitions/siteCoordinates",
                    "x-displayname": "Co-ordinates"
                },
                "default_underlay_network": {
                    "description": " Optional, virtual network to be used as underlay for different overlay protocols (SRv6, IP-in-IP tunnels for DC Cluster Group)\n Default is site-local-outside network",
                    "title": "default_underlay_vn",
                    "$ref": "#/definitions/siteDefaultUnderlayNetworkType",
                    "x-displayname": "Default Underlay Virtual Network"
                },
                "desired_pool_count": {
                    "type": "integer",
                    "description": " Desired pool count represent desired number of worker(non master) nodes\n for manual scaling of public cloud(AWS, GCP, Azure) sites. The desired count\n must be less than or equal to the maximum size of the scaling group for a\n given public cloud. One may also have to increase maximum scaling group size to\n effectively increase desired pool count.\n\nExample: - \"0\"-",
                    "title": "desired_pool_count",
                    "format": "int32",
                    "x-displayname": "Desired Pool Count",
                    "x-ves-example": "0"
                },
                "inside_nameserver": {
                    "type": "string",
                    "description": " Optional DNS server IP to be used for name resolution in inside network\n\nExample: - \"10.1.1.1\"-",
                    "title": "inside_nameserver",
                    "x-displayname": "DNS Server for Inside Network",
                    "x-ves-example": "10.1.1.1"
                },
                "inside_vip": {
                    "type": "string",
                    "description": " Optional Virtual IP to be used as automatic VIP for site local inside network.\n See documentation for \"VIP\" in advertise policy to see when Inside VIP is used.\n When configured, this is used as VIP (depending on advertise policy configuration).\n When not configured, site local inside interface ip will be used as VIP.\n\nExample: - \"10.1.1.1\"-",
                    "title": "inside_vip",
                    "x-displayname": "Inside VIP",
                    "x-ves-example": "10.1.1.1"
                },
                "ipsec_ssl_vip_fqdn": {
                    "type": "string",
                    "description": " FQDN resolves in public ip on public network and private ip on private network\n\nExample: - \"re01.ves.io\"-",
                    "title": "ipsec_ssl_vip_fqdn",
                    "x-displayname": "FQDN for IPSEC/SSL VIP",
                    "x-ves-example": "re01.ves.io"
                },
                "k8s_api_servers": {
                    "type": "object",
                    "description": " physical kubernetes API servers on this site.\n The index is kubernetes API server host name",
                    "title": "k8s_api_servers",
                    "x-displayname": "Kubernetes API Servers"
                },
                "k8s_cluster_api_gw": {
                    "type": "array",
                    "description": " Internal reference to k8s cluster api gateway VH",
                    "title": "k8s cluster api gateway",
                    "items": {
                        "$ref": "#/definitions/schemaObjectRefType"
                    },
                    "x-displayname": "K8s Cluster API Gateway"
                },
                "local_k8s_access_enabled": {
                    "type": "boolean",
                    "description": " Lets user know if this site has local k8s cluster enabled via fleet configuration.",
                    "title": "Local K8s Cluster Access Enabled",
                    "format": "boolean",
                    "x-displayname": "Local K8s Cluster Access Enabled"
                },
                "mars_list": {
                    "type": "array",
                    "description": " List of Mars services in an RE site. This is used to create a full mesh of Mars services across all REs.",
                    "title": "mars_list",
                    "items": {
                        "$ref": "#/definitions/schemaServiceParameters"
                    },
                    "x-displayname": "Mars Services"
                },
                "mars_vtrp_list": {
                    "type": "array",
                    "description": " List of Mars services in an RE site for use with VTRP. This is used to choose a redundant pair of Mars services for VTRP clients.",
                    "title": "mars_vtrp_list",
                    "items": {
                        "$ref": "#/definitions/schemaServiceParameters"
                    },
                    "x-displayname": "Mars VTRP Services"
                },
                "no_tenant_in_vk8s_ns": {
                    "type": "boolean",
                    "description": " Disable appending tenant to vk8s namepsaces created in CE site.",
                    "title": "Disable appending tenant in vk8s namespace",
                    "format": "boolean",
                    "x-displayname": "vk8s ns format"
                },
                "opera": {
                    "description": " opera in the site",
                    "title": "opera",
                    "$ref": "#/definitions/schemaServiceParameters",
                    "x-displayname": "opera Parameters"
                },
                "operating_system_version": {
                    "type": "string",
                    "description": " Desired Operating System version for this site.\n\nExample: - \"value\"-",
                    "title": "operating_system_version",
                    "x-displayname": "Operating System Version",
                    "x-ves-example": "value"
                },
                "outside_nameserver": {
                    "type": "string",
                    "description": " Optional DNS server IP to be used for name resolution in outside network\n\nExample: - \"10.1.1.1\"-",
                    "title": "outside_nameserver",
                    "x-displayname": "DNS Server for Outside Network",
                    "x-ves-example": "10.1.1.1"
                },
                "outside_vip": {
                    "type": "string",
                    "description": " Optional Virtual IP to be used as automatic VIP for site local outside network.\n See documentation for \"VIP\" in advertise policy to see when Outside VIP is used.\n When configured, this is used as VIP (depending on advertise policy configuration).\n When not configured, site local interface ip will be used as VIP.\n\nExample: - \"10.1.1.1\"-",
                    "title": "outside_vip",
                    "x-displayname": "Outside VIP",
                    "x-ves-example": "10.1.1.1"
                },
                "phobos_enabled": {
                    "type": "boolean",
                    "description": " Indicates that phobos service is enabled",
                    "title": "Phobos enabled",
                    "format": "boolean",
                    "x-displayname": "Phobos enabled"
                },
                "piku_enabled": {
                    "type": "boolean",
                    "description": " Indicates that piku service is enabled",
                    "title": "Piku enabled",
                    "format": "boolean",
                    "x-displayname": "Piku enabled"
                },
                "private_ip": {
                    "type": "string",
                    "description": " VIP in the Private VN used for terminating IPSec/SSL tunnels\n The automatic tunnels between regional-edges and customer-edge sites use this VIP if private access is enabled\n\nExample: - \"1.2.3.4\"-",
                    "title": "private_ip",
                    "x-displayname": "Private IP",
                    "x-ves-example": "1.2.3.4"
                },
                "public_ip": {
                    "type": "string",
                    "description": " VIP in the Public VN used for terminating IPSec/SSL tunnels\n The automatic tunnels between regional-edges or between regional-edge and customer-edge sites use this VIP\n Note: Tunnels can also be configured via SiteMeshGroup. Public IP is not used for SiteMeshGroup tunnels\n\nExample: - \"1.2.3.4\"-",
                    "title": "public_ip",
                    "x-displayname": "Public IP",
                    "x-ves-example": "1.2.3.4"
                },
                "rakar": {
                    "description": " Rakar in the site",
                    "title": "rakar",
                    "$ref": "#/definitions/schemaServiceParameters",
                    "x-displayname": "Rakar Parameters"
                },
                "region": {
                    "type": "string",
                    "description": " Cloud Region. A region is a set of datacenters deployed within a latency-defined perimeter and connected through a dedicated regional low-latency network\n\nExample: - \"east-us-2\"-",
                    "title": "region",
                    "x-displayname": "Region",
                    "x-ves-example": "east-us-2"
                },
                "site_state": {
                    "description": " Site state defines its state machine and in which operational phase it is. It is for both Regional Edge\n as well as Customer Edge. Example flow is site is in PROVISIONING then goest to STANDBY and ONLINE. In case of\n switching to different Connected RE it goes back to PROVISIONING and ONLINE. If any of phase failes then it\n goest to FAILED.",
                    "title": "site_state",
                    "$ref": "#/definitions/siteSiteState",
                    "x-displayname": "Site State"
                },
                "site_subtype": {
                    "description": " Site subtype",
                    "title": "site_subtype",
                    "$ref": "#/definitions/siteSiteSubtype",
                    "x-displayname": "Site Subtype"
                },
                "site_to_site_network_type": {
                    "description": " Optional, virtual network type to be used for site to site tunnels created with SiteMeshGroup.\n Must be specified for CE site mesh group configuration",
                    "title": "site_to_site_network_type",
                    "$ref": "#/definitions/schemaVirtualNetworkType",
                    "x-displayname": "Site To Site Network Type"
                },
                "site_to_site_tunnel_ip": {
                    "type": "string",
                    "description": " Optionsl, VIP in the site_to_site_network_type configured above used for terminating IPSec/SSL tunnels created with SiteMeshGroup.\n\nExample: - \"10.1.1.1\"-",
                    "title": "site_to_site_tunnel_ip",
                    "x-displayname": "Site To Site Tunnel IP",
                    "x-ves-example": "10.1.1.1"
                },
                "site_type": {
                    "description": " Site type which specifies whether it is RE or CE",
                    "title": "site_type",
                    "$ref": "#/definitions/siteSiteType",
                    "x-displayname": "Site Type"
                },
                "srv6_enabled": {
                    "type": "boolean",
                    "description": " Indicates that Srv6 is enabled",
                    "title": "Srv6 enabled",
                    "format": "boolean",
                    "x-displayname": "Srv6 enabled"
                },
                "static_routes": {
                    "type": "array",
                    "description": " List of Fabric VN subnets/addresses in this site\n\nExample: - \"10.1.1.0/24\"-\nRequired: YES",
                    "title": "static_routes",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Static Routes",
                    "x-ves-example": "10.1.1.0/24",
                    "x-ves-required": "true"
                },
                "template_parameters": {
                    "type": "object",
                    "description": " Optional\n Map of string keys and values that can be used to provide per site config parameters to various\n configurations objects that configure features on set of sites\n In the configuration object a key is provided and value for that key is provided in the\n template_parameters\n\nExample: - \"value\"-",
                    "title": "template_parameters",
                    "x-displayname": "Template Parameters",
                    "x-ves-example": "value"
                },
                "tenant_index": {
                    "type": "integer",
                    "description": " object_index of an associated Tenant Index",
                    "title": "Tenant Index",
                    "format": "int64",
                    "x-displayname": "Tenant Index"
                },
                "tunnel_dead_timeout": {
                    "type": "integer",
                    "description": " Time interval, in millisec, within which any ipsec / ssl connection from the site going down is detected.\n When not set (== 0), a default value of 10000 msec will be used.\n\nExample: - \"0\"-",
                    "title": "tunnel_dead_timeout",
                    "format": "int64",
                    "x-displayname": "Tunnel Dead Timeout (msec)",
                    "x-ves-example": "0"
                },
                "tunnel_type": {
                    "description": " Tunnel type specifies type of tunnels enabled from this site. The tunnel type is used for automatic tunnels\n created between regional-edge sites or between regional-edge and customer-edge sites\n\n A tunnel connects two sites. The tunnel types enabled for tunnel results from intersection of tunnel types\n enabled for the two sites. IPSec gets priority over SSL when both are enabled\n\n Note: Tunnels can also be configured via SiteMeshGroup. Tunnel type is not used for SiteMeshGroup tunnels",
                    "title": "Site to site tunnel type",
                    "$ref": "#/definitions/schemaSiteToSiteTunnelType",
                    "x-displayname": "Site Tunnel Type"
                },
                "use_private_ip": {
                    "type": "boolean",
                    "description": " VER should use private IP to setup SSL/IPSEC tunnels",
                    "title": "Use Private IP",
                    "format": "boolean",
                    "x-displayname": "Use Private IP"
                },
                "vega": {
                    "description": " Parameters to connect to this site {URL, type of TLS}",
                    "title": "vega",
                    "$ref": "#/definitions/schemaServiceParameters",
                    "x-displayname": "Vega Parameters"
                },
                "vip_params_per_az": {
                    "type": "array",
                    "description": " Optional Publish VIP Parameters Per AZ for public cloud sites.\n See documentation for \"VIP\" in advertise policy to see when Inside VIP or Outside VIP is used.\n When configured, the VIP(s) defined will be used to publish to external systems like K8s, Consul",
                    "title": "vip_params_per_az",
                    "items": {
                        "$ref": "#/definitions/sitePublishVIPParamsPerAz"
                    },
                    "x-displayname": "Publish VIP Params Per AZ"
                },
                "vip_vrrp_mode": {
                    "description": " Optional VIP VRRP advertisement mode. This controls the ARP behavior for \"Outside VIP\" and \"Inside VIP\"\n addresses, when they are configured. When turned on, the Master VER would advertise gratuitous ARPs and\n would respond to ARP queries for these addresses. When turned off, ARP responses are not given by VER.\n\n If BGP is configured, the Inside VIP and outside VIP addresses will be advertised by BGP. This is\n irrespective of the vrrp mode.\n\n When Outside VIP / Inside VIP are configured, it is recommended to turn on vrrp and also configure BGP.",
                    "title": "vip_vrrp_mode",
                    "$ref": "#/definitions/schemaVipVrrpType",
                    "x-displayname": "VIP Advertisement Mode"
                },
                "volterra_software_overide": {
                    "description": " Policy to pick Volterra software version between verion given in site and corresponding fleet object.",
                    "title": "volterra_software_override",
                    "$ref": "#/definitions/siteSiteSoftwareOverrideType",
                    "x-displayname": "Site Software Version Override"
                },
                "volterra_software_version": {
                    "type": "string",
                    "description": " Desired Volterra software version for this site, a string matching released set of software components.\n\nExample: - \"value\"-",
                    "title": "volterra_software_version",
                    "x-displayname": "Software Version",
                    "x-ves-example": "value"
                }
            }
        },
        "siteIPSecRole": {
            "type": "string",
            "description": "Role of VER in an IPSec connection\n\nInvalid role\nIPSec Client initiating the connection\nIPSec Server responding to the connection",
            "title": "IPSecRole",
            "enum": [
                "UNKNOWN_ROLE",
                "INITIATOR",
                "RESPONDER"
            ],
            "default": "UNKNOWN_ROLE",
            "x-displayname": "IPSec Role",
            "x-ves-proto-enum": "ves.io.schema.site.IPSecRole"
        },
        "siteIPSecState": {
            "type": "string",
            "description": "IPSec Tunnel state connecting the site to other site\n\nInvalid state\nConnection is up\nConnection is down",
            "title": "IPSec State",
            "enum": [
                "UNKNOWN_STATE",
                "UP",
                "DOWN"
            ],
            "default": "UNKNOWN_STATE",
            "x-displayname": "IPSec State",
            "x-ves-proto-enum": "ves.io.schema.site.IPSecState"
        },
        "siteInterfaceStatus": {
            "type": "object",
            "description": "Status of Interfaces in ver",
            "title": "Interface Status",
            "x-displayname": "Interface Status",
            "x-ves-proto-message": "ves.io.schema.site.InterfaceStatus",
            "properties": {
                "active_state": {
                    "description": " Active state for the interface",
                    "title": "Active-Backup status\nx-displayName: \"Active/Backup status\"\nActive state for the interface",
                    "$ref": "#/definitions/siteActiveState",
                    "x-displayname": "Active/Backup status"
                },
                "bond_members": {
                    "type": "array",
                    "description": " Members of the Bond interface along with the corresponding link state",
                    "title": "Bond Interface Members\nx-displayName: \"Bond Members\"\nMembers of the Bond interface along with the corresponding link state",
                    "items": {
                        "$ref": "#/definitions/siteBondMembersType"
                    },
                    "x-displayname": "Bond Members"
                },
                "dhcp_server": {
                    "type": "boolean",
                    "description": " Indicate if DHCP server is configured on the interface",
                    "title": "DHCP Server",
                    "format": "boolean",
                    "x-displayname": "DHCP Server"
                },
                "ip": {
                    "description": " IP address of interface",
                    "title": "IP subnet",
                    "$ref": "#/definitions/schemaIpSubnetType",
                    "x-displayname": "IP Subnet"
                },
                "ip_mode": {
                    "description": " Mode of address assignment on the interface",
                    "title": "IP Mode",
                    "$ref": "#/definitions/siteAddressMode",
                    "x-displayname": "IP Mode"
                },
                "ipv6": {
                    "description": " IPV6 address of interface",
                    "title": "IPV6 subnet",
                    "$ref": "#/definitions/schemaIpSubnetType",
                    "x-displayname": "IPV6 Subnet"
                },
                "link_quality": {
                    "description": " Link quality for the interface",
                    "title": "Link quality status\nx-displayName: \"Link Quality\"\nLink quality for the interface",
                    "$ref": "#/definitions/siteLinkQuality",
                    "x-displayname": "Link Quality"
                },
                "link_state": {
                    "type": "boolean",
                    "description": " Link State for the interface",
                    "title": "Link State\nx-displayName: \"Link State\"\nLink State for the interface",
                    "format": "boolean",
                    "x-displayname": "Link State"
                },
                "link_type": {
                    "description": " Link type for the interface",
                    "title": "Link type\nx-displayName: \"Link type\"\nLink type for the interface",
                    "$ref": "#/definitions/siteLinkType",
                    "x-displayname": "Link type"
                },
                "mac": {
                    "type": "string",
                    "description": " Mac Address of interface",
                    "title": "Mac Address",
                    "x-displayname": "Mac Address"
                },
                "name": {
                    "type": "string",
                    "description": " Name of interface",
                    "title": "Name",
                    "x-displayname": "Name"
                },
                "network_name": {
                    "type": "string",
                    "description": " Name of Virtual Network to which the interface belongs",
                    "title": "Virtual Network Name",
                    "x-displayname": "Virtual Network Name"
                },
                "network_type": {
                    "description": " Virtual Network Type of interface",
                    "title": "Virtual Network Type",
                    "$ref": "#/definitions/schemaVirtualNetworkType",
                    "x-displayname": "Virtual Network Type"
                }
            }
        },
        "siteIpsecConnectionStatus": {
            "type": "object",
            "description": "Status of IPSec connection that a Ver has originated / terminated",
            "title": "IPSecConnection Status",
            "x-displayname": "IPSec Connection Status",
            "x-ves-proto-message": "ves.io.schema.site.IpsecConnectionStatus",
            "properties": {
                "isLocal": {
                    "type": "boolean",
                    "description": " Identifies if the ipsec connection is local to the ver node or not",
                    "title": "isLocal",
                    "format": "boolean",
                    "x-displayname": "Local"
                },
                "remoteAddress": {
                    "type": "string",
                    "description": " IP address of the remote end",
                    "title": "remoteAddress",
                    "x-displayname": "Remote Address"
                },
                "role": {
                    "description": " indicates whether the ver is client/Originator or server/responder in ipsec tunnel",
                    "title": "role",
                    "$ref": "#/definitions/siteIPSecRole",
                    "x-displayname": "Role"
                },
                "state": {
                    "description": " connection state which identifies whether an IPSec connection is UP/DOWN",
                    "title": "state",
                    "$ref": "#/definitions/siteIPSecState",
                    "x-displayname": "Connection State"
                },
                "url": {
                    "type": "string",
                    "description": " url identifies the other end of the Ver for IPSec tunnel origination/termination",
                    "title": "url",
                    "x-displayname": "URL"
                },
                "verNodeName": {
                    "type": "string",
                    "description": " The VER node in the local site from which the connection is setup",
                    "title": "verNodeName",
                    "x-displayname": "VER Node Name"
                }
            }
        },
        "siteK8SApiServerParameters": {
            "type": "object",
            "description": "x-displayName: \"K8s Api Server\"\nSite's Physical Kubernetes API server. The location of this server is in site specification",
            "title": "K8sApiServer"
        },
        "siteKernel": {
            "type": "object",
            "description": "Kernel information",
            "title": "Kernel Information",
            "x-displayname": "Kernel",
            "x-ves-proto-message": "ves.io.schema.site.Kernel",
            "properties": {
                "architecture": {
                    "type": "string",
                    "description": " kernel architecture",
                    "title": "architecture",
                    "x-displayname": "Architecture"
                },
                "release": {
                    "type": "string",
                    "description": " kernel release",
                    "title": "release",
                    "x-displayname": "Release"
                },
                "version": {
                    "type": "string",
                    "description": " kernel version",
                    "title": "version",
                    "x-displayname": "Version"
                }
            }
        },
        "siteLinkQuality": {
            "type": "string",
            "description": "Link quality determined by VER using different probes\n\nUnknown quality\nLink quality is good\nLink quality is poor\nQuality disabled",
            "title": "Link quality",
            "enum": [
                "QUALITY_UNKNOWN",
                "QUALITY_GOOD",
                "QUALITY_POOR",
                "QUALITY_DISABLED"
            ],
            "default": "QUALITY_UNKNOWN",
            "x-displayname": "Link quality",
            "x-ves-proto-enum": "ves.io.schema.site.LinkQuality"
        },
        "siteLinkType": {
            "type": "string",
            "description": "Link type of interface determined operationally\n\nLink type unknown\nLink type ethernet\nWiFi link of type 802.11ac\nWiFi link of type 802.11bgn\nLink type 4G\nWiFi link\nWan link",
            "title": "Link type",
            "enum": [
                "LINK_TYPE_UNKNOWN",
                "LINK_TYPE_ETHERNET",
                "LINK_TYPE_WIFI_802_11AC",
                "LINK_TYPE_WIFI_802_11BGN",
                "LINK_TYPE_4G",
                "LINK_TYPE_WIFI",
                "LINK_TYPE_WAN"
            ],
            "default": "LINK_TYPE_UNKNOWN",
            "x-displayname": "Link type",
            "x-ves-proto-enum": "ves.io.schema.site.LinkType"
        },
        "siteListResponse": {
            "type": "object",
            "description": "This is the output message of 'List' RPC.",
            "title": "ListResponse is the collection of site",
            "x-displayname": "List Response",
            "x-ves-proto-message": "ves.io.schema.site.ListResponse",
            "properties": {
                "errors": {
                    "type": "array",
                    "description": " Errors(if any) while listing items from collection",
                    "title": "errors",
                    "items": {
                        "$ref": "#/definitions/schemaErrorType"
                    },
                    "x-displayname": "Errors"
                },
                "items": {
                    "type": "array",
                    "description": " items represents the collection in response",
                    "title": "items",
                    "items": {
                        "$ref": "#/definitions/siteListResponseItem"
                    },
                    "x-displayname": "Items"
                }
            }
        },
        "siteListResponseItem": {
            "type": "object",
            "description": "By default a summary of site is returned in 'List'. By setting\n'report_fields' in the ListRequest more details of each item can be got.",
            "title": "ListResponseItem is an individual item in a collection of site",
            "x-displayname": "List Item",
            "x-ves-proto-message": "ves.io.schema.site.ListResponseItem",
            "properties": {
                "annotations": {
                    "type": "object",
                    "description": " The set of annotations present on this site",
                    "title": "annotations",
                    "x-displayname": "Annotations"
                },
                "description": {
                    "type": "string",
                    "description": " The description set for this site",
                    "title": "description",
                    "x-displayname": "Description"
                },
                "disabled": {
                    "type": "boolean",
                    "description": " A value of true indicates site is administratively disabled",
                    "title": "disabled",
                    "format": "boolean",
                    "x-displayname": "Disabled"
                },
                "get_spec": {
                    "description": " If ListRequest has any specified report_fields, it will appear in object",
                    "title": "get_spec",
                    "$ref": "#/definitions/siteGetSpecType",
                    "x-displayname": "Get Specification"
                },
                "labels": {
                    "type": "object",
                    "description": " The set of labels present on this site",
                    "title": "labels",
                    "x-displayname": "Labels"
                },
                "metadata": {
                    "description": " If list request has report_fields set then metadata will\n contain all the metadata associated with the object.",
                    "title": "metadata",
                    "$ref": "#/definitions/schemaObjectGetMetaType",
                    "x-displayname": "Metadata"
                },
                "name": {
                    "type": "string",
                    "description": " The name of this site\n\nExample: - \"name\"-",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "name"
                },
                "namespace": {
                    "type": "string",
                    "description": " The namespace this item belongs to\n\nExample: - \"ns1\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "ns1"
                },
                "object": {
                    "description": " If ListRequest has any specified report_fields, it will appear in object\n DEPRECATED by get_spec, metadata and system_metadata",
                    "title": "object",
                    "$ref": "#/definitions/siteObject",
                    "x-displayname": "Object"
                },
                "owner_view": {
                    "description": " Reference to the view object that owns this object.\n If there is no view owner, this field will be nil.\n If not nil, this object can only be edited/deleted through the view",
                    "title": "owner_view",
                    "$ref": "#/definitions/schemaViewRefType",
                    "x-displayname": "Owner View"
                },
                "status_set": {
                    "type": "array",
                    "description": " The status reported by different services for this configuration object",
                    "title": "status",
                    "items": {
                        "$ref": "#/definitions/siteStatusObject"
                    },
                    "x-displayname": "Status"
                },
                "system_metadata": {
                    "description": " If list request has report_fields set then system_metadata will\n contain all the system generated details of this object.",
                    "title": "system_metadata",
                    "$ref": "#/definitions/schemaSystemObjectGetMetaType",
                    "x-displayname": "System Metadata"
                },
                "tenant": {
                    "type": "string",
                    "description": " The tenant this item belongs to\n\nExample: - \"acmecorp\"-",
                    "title": "tenant",
                    "x-displayname": "Tenant",
                    "x-ves-example": "acmecorp"
                },
                "uid": {
                    "type": "string",
                    "description": " The unique uid of this site\n\nExample: - \"d27938ba-967e-40a7-9709-57b8627f9f75\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "d27938ba-967e-40a7-9709-57b8627f9f75"
                }
            }
        },
        "siteMemory": {
            "type": "object",
            "description": "Memory information.",
            "title": "Memory Information",
            "x-displayname": "Memory Information",
            "x-ves-proto-message": "ves.io.schema.site.Memory",
            "properties": {
                "size_mb": {
                    "type": "integer",
                    "description": " RAM size in MB",
                    "title": "size_mb",
                    "format": "int64",
                    "x-displayname": "RAM"
                },
                "speed": {
                    "type": "integer",
                    "description": " RAM data rate in MT/s",
                    "title": "speed",
                    "format": "int64",
                    "x-displayname": "Speed"
                },
                "type": {
                    "type": "string",
                    "description": " type of memory, eg. DDR4",
                    "title": "type",
                    "x-displayname": "Type"
                }
            }
        },
        "siteNetworkDevice": {
            "type": "object",
            "description": "NetworkDevice information.",
            "title": "Network Device Information",
            "x-displayname": "Network Device Information",
            "x-ves-proto-message": "ves.io.schema.site.NetworkDevice",
            "properties": {
                "driver": {
                    "type": "string",
                    "description": " driver of device, eg. e1000e",
                    "title": "driver",
                    "x-displayname": "Driver"
                },
                "ip_address": {
                    "type": "array",
                    "description": " ip address on interface",
                    "title": "ip_address",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "IP Address"
                },
                "link_quality": {
                    "description": " Link quality for the interface",
                    "title": "Link quality status",
                    "$ref": "#/definitions/siteLinkQuality",
                    "x-displayname": "Link Quality"
                },
                "link_type": {
                    "description": " Link type for the interface",
                    "title": "Link type",
                    "$ref": "#/definitions/siteLinkType",
                    "x-displayname": "Link type"
                },
                "mac_address": {
                    "type": "string",
                    "description": " mac address on interface",
                    "title": "mac_address",
                    "x-displayname": "MAC Address"
                },
                "name": {
                    "type": "string",
                    "description": " name of device, eg. eth0",
                    "title": "name",
                    "x-displayname": "Name"
                },
                "port": {
                    "type": "string",
                    "description": " used port, eg. tp",
                    "title": "port",
                    "x-displayname": "Port"
                },
                "speed": {
                    "type": "integer",
                    "description": " device max supported speed in Mbps",
                    "title": "speed",
                    "format": "int64",
                    "x-displayname": "Speed"
                }
            }
        },
        "siteNodeInfo": {
            "type": "object",
            "x-ves-proto-message": "ves.io.schema.site.NodeInfo",
            "properties": {
                "hostname": {
                    "type": "string",
                    "description": " Hostname of the node",
                    "title": "Hostname",
                    "x-displayname": "Hostname"
                },
                "role": {
                    "type": "array",
                    "description": " Role of registered node. Roles are used by system to determine what control services they should enforce.\n k8s-master represents Kubernetes Master\n\nExample: - \"k8s-master, k8s-minion\"-",
                    "title": "Role",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Node Role",
                    "x-ves-example": "k8s-master, k8s-minion"
                }
            }
        },
        "siteOS": {
            "type": "object",
            "description": "Details of Operating System",
            "title": "OS",
            "x-displayname": "OS",
            "x-ves-proto-message": "ves.io.schema.site.OS",
            "properties": {
                "architecture": {
                    "type": "string",
                    "description": " Architecture of OS\n\nExample: - \"amd64\"-",
                    "title": "architecture",
                    "x-displayname": "Architecture",
                    "x-ves-example": "amd64"
                },
                "name": {
                    "type": "string",
                    "description": " Name of OS\n\nExample: - \"Container Linux by CoreOS 1855.4.0 (Rhyolite)\"-",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "Container Linux by CoreOS 1855.4.0 (Rhyolite)"
                },
                "release": {
                    "type": "string",
                    "description": " Release of the OS\n\nExample: - \"20.04\"-",
                    "title": "release",
                    "x-displayname": "Release",
                    "x-ves-example": "20.04"
                },
                "vendor": {
                    "type": "string",
                    "description": " Vendor of OS\n\nExample: - \"coreos\"-",
                    "title": "vendor",
                    "x-displayname": "Vendor",
                    "x-ves-example": "coreos"
                },
                "version": {
                    "type": "string",
                    "description": " Version of OS\n\nExample: - \"1855.4.0\"-",
                    "title": "version",
                    "x-displayname": "Version",
                    "x-ves-example": "1855.4.0"
                }
            }
        },
        "siteObject": {
            "type": "object",
            "description": "Site object specification",
            "title": "Site Object",
            "x-displayname": "Site Object",
            "x-ves-proto-message": "ves.io.schema.site.Object",
            "properties": {
                "metadata": {
                    "description": " Standard object's metadata",
                    "title": "metadata",
                    "$ref": "#/definitions/schemaObjectMetaType",
                    "x-displayname": "Metadata"
                },
                "spec": {
                    "description": " Specification of the desired behavior of the site",
                    "title": "spec",
                    "$ref": "#/definitions/siteSpecType",
                    "x-displayname": "Spec"
                },
                "system_metadata": {
                    "description": " System generated object's metadata",
                    "title": "system_metadata",
                    "$ref": "#/definitions/schemaSystemObjectMetaType",
                    "x-displayname": "System Metadata"
                }
            }
        },
        "siteOperatingSystemStatus": {
            "type": "object",
            "description": "Volterra operating system version running in the site",
            "title": "Volterra Operating system Status",
            "x-displayname": "Volterra Operating System Status",
            "x-ves-proto-message": "ves.io.schema.site.OperatingSystemStatus",
            "properties": {
                "available_version": {
                    "type": "string",
                    "description": " available version represent volterra operating system version ready to be upgraded in the site.",
                    "title": "available_version",
                    "x-displayname": "Available Version"
                },
                "deployment_state": {
                    "description": " deployment state shows status of last applied deployment in the site",
                    "title": "deployment_state",
                    "$ref": "#/definitions/siteDeploymentState",
                    "x-displayname": "Deployment State"
                },
                "nonconforming_state": {
                    "type": "string",
                    "description": " If nonconforming state is not empty, then current deployed OS version is nonconforming. Site should be upgrade to available version.",
                    "title": "Nonconforming State",
                    "x-displayname": "Nonconforming State"
                }
            }
        },
        "siteOsInfo": {
            "type": "object",
            "description": "OsInfo holds information about host OS and HW",
            "title": "OsInfo",
            "x-displayname": "Os Info",
            "x-ves-proto-message": "ves.io.schema.site.OsInfo",
            "properties": {
                "bios": {
                    "description": " Information about bios",
                    "title": "bios",
                    "$ref": "#/definitions/siteBios",
                    "x-displayname": "BIOS"
                },
                "board": {
                    "description": " HW board information",
                    "title": "board",
                    "$ref": "#/definitions/siteBoard",
                    "x-displayname": "Board"
                },
                "chassis": {
                    "description": " HW chassis information",
                    "title": "chassis",
                    "$ref": "#/definitions/siteChassis",
                    "x-displayname": "Chassis"
                },
                "cpu": {
                    "description": " HW CPU information",
                    "title": "cpu",
                    "$ref": "#/definitions/siteCpu",
                    "x-displayname": "CPU"
                },
                "gpu": {
                    "description": " GPU information on server",
                    "title": "GPU",
                    "$ref": "#/definitions/siteGPU",
                    "x-displayname": "GPU"
                },
                "kernel": {
                    "description": " kernel information",
                    "title": "kernel",
                    "$ref": "#/definitions/siteKernel",
                    "x-displayname": "Kernel"
                },
                "memory": {
                    "description": " HW memory information",
                    "title": "memory",
                    "$ref": "#/definitions/siteMemory",
                    "x-displayname": "Memory"
                },
                "network": {
                    "type": "array",
                    "description": " List of network devices in server",
                    "title": "network",
                    "items": {
                        "$ref": "#/definitions/siteNetworkDevice"
                    },
                    "x-displayname": "Network"
                },
                "os": {
                    "description": " os holds all general OS information",
                    "title": "os",
                    "$ref": "#/definitions/siteOS",
                    "x-displayname": "Operating System"
                },
                "product": {
                    "description": " HW product information",
                    "title": "product",
                    "$ref": "#/definitions/siteProduct",
                    "x-displayname": "Product"
                },
                "storage": {
                    "type": "array",
                    "description": " List of storage devices in server",
                    "title": "storage",
                    "items": {
                        "$ref": "#/definitions/siteStorageDevice"
                    },
                    "x-displayname": "Storage"
                },
                "usb": {
                    "type": "array",
                    "description": " List of USB devices in server",
                    "title": "USBDevice",
                    "items": {
                        "$ref": "#/definitions/siteUSBDevice"
                    },
                    "x-displayname": "USB devices"
                }
            }
        },
        "siteProduct": {
            "type": "object",
            "description": "Product information",
            "title": "Product Information",
            "x-displayname": "Product Information",
            "x-ves-proto-message": "ves.io.schema.site.Product",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " product name, eg. for aws m5a.xlarge. Info taken from /sys/class/dmi/id/product_name",
                    "title": "name",
                    "x-displayname": "Name"
                },
                "serial": {
                    "type": "string",
                    "description": " serial number, eg. for aws ec254b6d-9676-1a51-8b10-21370dbdc3e5. Info taken from /sys/class/dmi/id/product_serial",
                    "title": "serial",
                    "x-displayname": "Serial Number"
                },
                "vendor": {
                    "type": "string",
                    "description": " vendor name, eg. for aws Amazon EC2. Info taken from /sys/class/dmi/id/product_vendor",
                    "title": "vendor",
                    "x-displayname": "Vendor"
                },
                "version": {
                    "type": "string",
                    "description": " version name. Info taken from /sys/class/dmi/id/product_version",
                    "title": "version",
                    "x-displayname": "Version"
                }
            }
        },
        "sitePublishVIPParamsPerAz": {
            "type": "object",
            "description": "Per AZ parameters needed to publish VIP for publci cloud sites",
            "title": "Publish VIP Params Per AZ",
            "x-displayname": "Publish VIP Params Per AZ",
            "x-ves-proto-message": "ves.io.schema.site.PublishVIPParamsPerAz",
            "properties": {
                "az_name": {
                    "type": "string",
                    "description": " Name of the Availability zone\n\nExample: - \"us-east-2a\"-",
                    "title": "AZ Name",
                    "x-displayname": "AZ Name",
                    "x-ves-example": "us-east-2a"
                },
                "inside_vip": {
                    "type": "array",
                    "description": " List of Inside VIPs for an AZ\n\nExample: - \"192.168.0.156\"-",
                    "title": "Inside VIP(s)",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Inside VIP(s)",
                    "x-ves-example": "192.168.0.156"
                },
                "inside_vip_cname": {
                    "type": "string",
                    "description": " CNAME value for the inside VIP,\n These are usually public cloud generated CNAME\n\nExample: - \"test.56670-387196482.useast2.ves.io\"-",
                    "title": "Inside VIP CNAME",
                    "x-displayname": "Inside VIP CNAME",
                    "x-ves-example": "test.56670-387196482.useast2.ves.io"
                },
                "outside_vip": {
                    "type": "array",
                    "description": " List of Outside VIPs for an AZ\n\nExample: - \"192.168.0.156\"-\nRequired: YES",
                    "title": "Outside VIP(s)",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Outside VIP(s)",
                    "x-ves-example": "192.168.0.156",
                    "x-ves-required": "true"
                },
                "outside_vip_cname": {
                    "type": "string",
                    "description": " CNAME value for the outside VIP\n These are usually public cloud generated CNAME\n\nExample: - \"test.56670-387196482.useast2.ves.io\"-",
                    "title": "Outside VIP CNAME",
                    "x-displayname": "Outside VIP CNAME",
                    "x-ves-example": "test.56670-387196482.useast2.ves.io"
                }
            }
        },
        "siteReplaceRequest": {
            "type": "object",
            "description": "This is the input message of the 'Replace' RPC",
            "title": "ReplaceRequest is used to replace contents of a site",
            "x-displayname": "Replace Request",
            "x-ves-proto-message": "ves.io.schema.site.ReplaceRequest",
            "properties": {
                "metadata": {
                    "description": " Standard object's metadata",
                    "title": "metadata",
                    "$ref": "#/definitions/schemaObjectReplaceMetaType",
                    "x-displayname": "Metadata"
                },
                "resource_version": {
                    "type": "string",
                    "description": "If provided, do the replace operation if the configuration object is still at 'resource_version'\n\nExample: -\"42\"-",
                    "title": "resource_version",
                    "x-displayname": "Resource Version",
                    "x-ves-example": "42"
                },
                "spec": {
                    "description": " Specification of the desired behavior of the site",
                    "title": "spec",
                    "$ref": "#/definitions/siteReplaceSpecType",
                    "x-displayname": "Spec"
                }
            }
        },
        "siteReplaceResponse": {
            "type": "object",
            "x-ves-proto-message": "ves.io.schema.site.ReplaceResponse"
        },
        "siteReplaceSpecType": {
            "type": "object",
            "description": "Replace Site will replace address, coordinates of site",
            "title": "Replace Site",
            "x-displayname": "Replace Site",
            "x-ves-displayorder": "4,127,2,3,125,114,120,121,117,118,123,124,122,126,115",
            "x-ves-proto-message": "ves.io.schema.site.ReplaceSpecType",
            "properties": {
                "address": {
                    "type": "string",
                    "description": " Site's geographical address that can be used determine its latitude and longitude.\n\nExample: - \"123 Street, city, country, postal code\"-",
                    "x-displayname": "Geographical Address",
                    "x-ves-example": "123 Street, city, country, postal code"
                },
                "bgp_peer_address": {
                    "type": "string",
                    "description": " Optional bgp peer address that can be used as parameter for BGP configuration when BGP is configured\n to fetch BGP peer address from site Object. This can be used to change peer addres per site in fleet.\n\nExample: - \"10.1.1.1\"-",
                    "x-displayname": "BGP Peer Address",
                    "x-ves-example": "10.1.1.1"
                },
                "bgp_router_id": {
                    "type": "string",
                    "description": " Optional bgp router id that can be used as parameter for BGP configuration when BGP is configurred to\n fetch BGP router ID from site object. This can be used to change router id per site in a fleet.\n\nExample: - \"10.1.1.1\"-",
                    "x-displayname": "BGP Router ID",
                    "x-ves-example": "10.1.1.1"
                },
                "coordinates": {
                    "description": " Site longitude and latitude co-ordinates",
                    "$ref": "#/definitions/siteCoordinates",
                    "x-displayname": "Co-ordinates"
                },
                "default_underlay_network": {
                    "description": " Optional, virtual network to be used as underlay for different overlay protocols (SRv6, IP-in-IP tunnels for DC Cluster Group)\n Default is site-local-outside network",
                    "$ref": "#/definitions/siteDefaultUnderlayNetworkType",
                    "x-displayname": "Default Underlay Virtual Network"
                },
                "desired_pool_count": {
                    "type": "integer",
                    "description": " Desired pool count represent desired number of worker(non master) nodes\n for manual scaling of public cloud(AWS, GCP, Azure) sites. The desired count\n must be less than or equal to the maximum size of the scaling group for a\n given public cloud. One may also have to increase maximum scaling group size to\n effectively increase desired pool count.\n\nExample: - \"0\"-",
                    "format": "int32",
                    "x-displayname": "Desired Pool Count",
                    "x-ves-example": "0"
                },
                "inside_nameserver": {
                    "type": "string",
                    "description": " Optional DNS server IP to be used for name resolution in inside network\n\nExample: - \"10.1.1.1\"-",
                    "x-displayname": "DNS Server for Inside Network",
                    "x-ves-example": "10.1.1.1"
                },
                "inside_vip": {
                    "type": "string",
                    "description": " Optional Virtual IP to be used as automatic VIP for site local inside network.\n See documentation for \"VIP\" in advertise policy to see when Inside VIP is used.\n When configured, this is used as VIP (depending on advertise policy configuration).\n When not configured, site local inside interface ip will be used as VIP.\n\nExample: - \"10.1.1.1\"-",
                    "x-displayname": "Inside VIP",
                    "x-ves-example": "10.1.1.1"
                },
                "operating_system_version": {
                    "type": "string",
                    "description": " Desired Operating System version for this site.\n\nExample: - \"value\"-",
                    "x-displayname": "Operating System Version",
                    "x-ves-example": "value"
                },
                "outside_nameserver": {
                    "type": "string",
                    "description": " Optional DNS server IP to be used for name resolution in outside network\n\nExample: - \"10.1.1.1\"-",
                    "x-displayname": "DNS Server for Outside Network",
                    "x-ves-example": "10.1.1.1"
                },
                "outside_vip": {
                    "type": "string",
                    "description": " Optional Virtual IP to be used as automatic VIP for site local outside network.\n See documentation for \"VIP\" in advertise policy to see when Outside VIP is used.\n When configured, this is used as VIP (depending on advertise policy configuration).\n When not configured, site local interface ip will be used as VIP.\n\nExample: - \"10.1.1.1\"-",
                    "x-displayname": "Outside VIP",
                    "x-ves-example": "10.1.1.1"
                },
                "region": {
                    "type": "string",
                    "description": " Cloud Region. A region is a set of datacenters deployed within a latency-defined perimeter and connected through a dedicated regional low-latency network\n\nExample: - \"east-us-2\"-",
                    "x-displayname": "Region",
                    "x-ves-example": "east-us-2"
                },
                "site_to_site_network_type": {
                    "description": " Optional, virtual network type to be used for site to site tunnels created with SiteMeshGroup.\n Must be specified for CE site mesh group configuration",
                    "$ref": "#/definitions/schemaVirtualNetworkType",
                    "x-displayname": "Site To Site Network Type"
                },
                "site_to_site_tunnel_ip": {
                    "type": "string",
                    "description": " Optionsl, VIP in the site_to_site_network_type configured above used for terminating IPSec/SSL tunnels created with SiteMeshGroup.\n\nExample: - \"10.1.1.1\"-",
                    "x-displayname": "Site To Site Tunnel IP",
                    "x-ves-example": "10.1.1.1"
                },
                "tunnel_dead_timeout": {
                    "type": "integer",
                    "description": " Time interval, in millisec, within which any ipsec / ssl connection from the site going down is detected.\n When not set (== 0), a default value of 10000 msec will be used.\n\nExample: - \"0\"-",
                    "format": "int64",
                    "x-displayname": "Tunnel Dead Timeout (msec)",
                    "x-ves-example": "0"
                },
                "tunnel_type": {
                    "description": " Tunnel type specifies type of tunnels enabled from this site. The tunnel type is used for automatic tunnels\n created between regional-edge sites or between regional-edge and customer-edge sites\n\n A tunnel connects two sites. The tunnel types enabled for tunnel results from intersection of tunnel types\n enabled for the two sites. IPSec gets priority over SSL when both are enabled\n\n Note: Tunnels can also be configured via SiteMeshGroup. Tunnel type is not used for SiteMeshGroup tunnels",
                    "$ref": "#/definitions/schemaSiteToSiteTunnelType",
                    "x-displayname": "Site Tunnel Type"
                },
                "vip_vrrp_mode": {
                    "description": " Optional VIP VRRP advertisement mode. This controls the ARP behavior for \"Outside VIP\" and \"Inside VIP\"\n addresses, when they are configured. When turned on, the Master VER would advertise gratuitous ARPs and\n would respond to ARP queries for these addresses. When turned off, ARP responses are not given by VER.\n\n If BGP is configured, the Inside VIP and outside VIP addresses will be advertised by BGP. This is\n irrespective of the vrrp mode.\n\n When Outside VIP / Inside VIP are configured, it is recommended to turn on vrrp and also configure BGP.",
                    "$ref": "#/definitions/schemaVipVrrpType",
                    "x-displayname": "VIP Advertisement Mode"
                },
                "volterra_software_overide": {
                    "description": " Policy to pick Volterra software version between verion given in site and corresponding fleet object.",
                    "$ref": "#/definitions/siteSiteSoftwareOverrideType",
                    "x-displayname": "Site Software Version Override"
                },
                "volterra_software_version": {
                    "type": "string",
                    "description": " Desired Volterra software version for this site, a string matching released set of software components.\n\nExample: - \"value\"-",
                    "x-displayname": "Software Version",
                    "x-ves-example": "value"
                }
            }
        },
        "siteScalingPhase": {
            "type": "string",
            "description": "State of Scaling phase in site\n\nInvalid scaling phase\nSite scaling is in progress\nSite scaling failed\nSite scaling is done. Site is in desired number of nodes",
            "title": "ScalingPhase",
            "enum": [
                "SCALING_INVALID",
                "SCALING_IN_PROGRESS",
                "SCALING_FAILED",
                "SCALING_DONE"
            ],
            "default": "SCALING_INVALID",
            "x-displayname": "Scaling Phase",
            "x-ves-proto-enum": "ves.io.schema.site.ScalingPhase"
        },
        "siteScalingStatus": {
            "type": "object",
            "description": "Details of Scaling",
            "title": "Scaling Status",
            "x-displayname": "Scaling Status",
            "x-ves-proto-message": "ves.io.schema.site.ScalingStatus",
            "properties": {
                "message": {
                    "type": "string",
                    "description": " provides description of scaling action, eg. \"scaled to 3 nodes\"",
                    "title": "Message",
                    "x-displayname": "Message"
                },
                "phase": {
                    "description": " Phase of scaling action with options scaling, failed, done",
                    "title": "Scaling phase",
                    "$ref": "#/definitions/siteScalingPhase",
                    "x-displayname": "Phase"
                },
                "pool_node_count_current": {
                    "type": "integer",
                    "description": " Current number of pool nodes in cluster",
                    "title": "Current pool node count",
                    "format": "int32",
                    "x-displayname": "Current Pool Count"
                },
                "pool_node_count_target": {
                    "type": "integer",
                    "description": " Desired pool node count defines how many nodes should be in a cluster after scaling",
                    "title": "Desired pool node count",
                    "format": "int32",
                    "x-displayname": "Desired Pool Count"
                }
            }
        },
        "siteSiteSoftwareOverrideType": {
            "type": "string",
            "description": "Decide which software version takes effect in case of conflict between site and fleet\n\nSoftware version in site will take precedence.\nBetween site and fleet newer software version will take precedence.\nSoftware version in fleet will take precedence.",
            "title": "SiteSoftwareOverrideType",
            "enum": [
                "SITE_SOFTWARE_OVERRIDE_SITE",
                "SITE_SOFTWARE_OVERRIDE_NEWER",
                "SITE_SOFTWARE_OVERRIDE_FLEET"
            ],
            "default": "SITE_SOFTWARE_OVERRIDE_SITE",
            "x-displayname": "Site Software Override Type",
            "x-ves-proto-enum": "ves.io.schema.site.SiteSoftwareOverrideType"
        },
        "siteSiteState": {
            "type": "string",
            "description": "State of Site defines in which operational state site itself is.\n\nSite is online and operational.\nSite is in provisioning state. For instance during site deployment or switching to different connected Regional Edge.\nSite is in process of upgrade. It transition to ONLINE or FAILED state.\nSite is in Standby before goes to ONLINE. This is mainly for Regional Edge sites to do their verification before they go to ONLINE state.\nSite is in failed state. It failed during provisioning or upgrade phase. Site Status Objects contain more details.\nReregistration was requested\nReregistration is in progress and maurice is waiting for nodes\nSite deletion is in progress\nSite is waiting for registration",
            "title": "SiteState",
            "enum": [
                "ONLINE",
                "PROVISIONING",
                "UPGRADING",
                "STANDBY",
                "FAILED",
                "REREGISTRATION",
                "WAITINGNODES",
                "DECOMMISSIONING",
                "WAITING_FOR_REGISTRATION"
            ],
            "default": "ONLINE",
            "x-displayname": "Site State",
            "x-ves-proto-enum": "ves.io.schema.site.SiteState"
        },
        "siteSiteSubtype": {
            "type": "string",
            "description": "Sit Subtype\n\nNo Subtype\nRegional Edge for ves-io use only\nCE running in Kubernetes",
            "title": "SiteSubtype",
            "enum": [
                "NO_SUBTYPE",
                "VES_IO_USE_RE",
                "VES_IO_CE_IN_K8S"
            ],
            "default": "NO_SUBTYPE",
            "x-displayname": "Site Subtype",
            "x-ves-proto-enum": "ves.io.schema.site.SiteSubtype"
        },
        "siteSiteType": {
            "type": "string",
            "description": "Site Type which can either RE or CE\n\nInvalid type of site\nRegional Edge site\nCustomer Edge site",
            "title": "SiteType",
            "enum": [
                "INVALID",
                "REGIONAL_EDGE",
                "CUSTOMER_EDGE"
            ],
            "default": "INVALID",
            "x-displayname": "Site Type",
            "x-ves-proto-enum": "ves.io.schema.site.SiteType"
        },
        "siteSoftwareUpgradePhase": {
            "type": "string",
            "description": "State of Volterra Software or Operating System upgrade phase in site\n\nSite Upgrade was triggered, but has not started yet\nSite upgrade was fetched and it is in progress\nSite upgrade was completed\nSite upgrade failed",
            "title": "SoftwareUpgradePhase",
            "enum": [
                "UPGRADE_INVALID",
                "UPGRADE_TRIGGERED",
                "UPGRADE_IN_PROGRESS",
                "UPGRADE_COMPLETED",
                "UPGRADE_FAILED"
            ],
            "default": "UPGRADE_INVALID",
            "x-displayname": "Software Upgrade Phase",
            "x-ves-proto-enum": "ves.io.schema.site.SoftwareUpgradePhase"
        },
        "siteSpecType": {
            "type": "object",
            "description": "Shape of the site specification",
            "title": "Site Specification",
            "x-displayname": "Specification",
            "x-ves-proto-message": "ves.io.schema.site.SpecType",
            "properties": {
                "gc_spec": {
                    "title": "gc_spec",
                    "$ref": "#/definitions/siteGlobalSpecType",
                    "x-displayname": "GC Spec"
                }
            }
        },
        "siteStatusObject": {
            "type": "object",
            "description": "Most recently observed status of site object",
            "title": "Site Status Object",
            "x-displayname": "Status",
            "x-ves-proto-message": "ves.io.schema.site.StatusObject",
            "properties": {
                "certified_hardware": {
                    "type": "string",
                    "description": " Certified Hardware identifies what Volterra Certified Hardware is deployed at this site.\n\nExample: - \"value\"-",
                    "title": "Certified Hardware",
                    "x-displayname": "Certified Hardware",
                    "x-ves-example": "value"
                },
                "conditions": {
                    "type": "array",
                    "description": " Conditions",
                    "title": "conditions",
                    "items": {
                        "$ref": "#/definitions/schemaConditionType"
                    },
                    "x-displayname": "Conditions"
                },
                "fleet_status": {
                    "description": " Fleet status shows fleet deployment status of last fleet default config on the node",
                    "title": "Fleet Status",
                    "$ref": "#/definitions/siteFleetStatus",
                    "x-displayname": "Fleet Status"
                },
                "hostname": {
                    "type": "string",
                    "description": " hostname of node in site\n\nExample: - \"value\"-",
                    "title": "Hostname",
                    "x-displayname": "Hostname",
                    "x-ves-example": "value"
                },
                "hw_info": {
                    "description": " HW information about node in the site",
                    "title": "Hardware information",
                    "$ref": "#/definitions/siteOsInfo",
                    "x-displayname": "Hardware Info"
                },
                "metadata": {
                    "description": " Standard status's metadata",
                    "title": "metadata",
                    "$ref": "#/definitions/schemaStatusMetaType",
                    "x-displayname": "Metadata"
                },
                "node_info": {
                    "description": " Node information in the site",
                    "title": "Node information",
                    "$ref": "#/definitions/siteNodeInfo",
                    "x-displayname": "Node Information"
                },
                "object_refs": {
                    "type": "array",
                    "description": " Site object reference for which this status object is generated",
                    "title": "object_refs",
                    "items": {
                        "$ref": "#/definitions/schemaObjectRefType"
                    },
                    "x-displayname": "Config Object"
                },
                "operating_system_status": {
                    "description": " OperatingSystem status shows deployment status of last version of operating system in site and available\n version for upgrade.",
                    "title": "Operating system Status",
                    "$ref": "#/definitions/siteOperatingSystemStatus",
                    "x-displayname": "Operating System Status"
                },
                "scaling_status": {
                    "description": " Scaling status provides information about scaling of nodes in a site",
                    "title": "Scaling Status",
                    "$ref": "#/definitions/siteScalingStatus",
                    "x-displayname": "Scaling Status"
                },
                "ver_master_status": {
                    "description": " Identify the master node in the cluster",
                    "title": "Ver Master Status",
                    "$ref": "#/definitions/siteVerMasterStatusType",
                    "x-displayname": "VER Master Status"
                },
                "ver_status": {
                    "description": " Site status reported by each VER instance on a node",
                    "title": "Ver Status",
                    "$ref": "#/definitions/siteVerStatusType",
                    "x-displayname": "VER Status"
                },
                "volterra_software_status": {
                    "description": " VolterraSoftware status shows deployment status of last version in site and available\n version for upgrade.",
                    "title": "Software Status",
                    "$ref": "#/definitions/siteVolterraSoftwareStatus",
                    "x-displayname": "software status"
                }
            }
        },
        "siteStorageDevice": {
            "type": "object",
            "description": "StorageDevice information.",
            "title": "Storage Information",
            "x-displayname": "Storage Information",
            "x-ves-proto-message": "ves.io.schema.site.StorageDevice",
            "properties": {
                "driver": {
                    "type": "string",
                    "description": " driver of device",
                    "title": "driver",
                    "x-displayname": "Driver"
                },
                "model": {
                    "type": "string",
                    "description": " model of device",
                    "title": "model",
                    "x-displayname": "Model"
                },
                "name": {
                    "type": "string",
                    "description": " name of device, eg. nvme0n1",
                    "title": "name",
                    "x-displayname": "Name"
                },
                "serial": {
                    "type": "string",
                    "description": " serial of device",
                    "title": "serial",
                    "x-displayname": "Serial Number"
                },
                "size_gb": {
                    "type": "integer",
                    "description": " device size in GB",
                    "title": "size_gb",
                    "format": "int64",
                    "x-displayname": "Size(GB)"
                },
                "vendor": {
                    "type": "string",
                    "description": " vendor of device",
                    "title": "vendor",
                    "x-displayname": "Vendor"
                }
            }
        },
        "siteTunnelConnectionStatus": {
            "type": "object",
            "description": "Status of tunnel connection that a Ver has originated / terminated",
            "title": "Tunnel Connection Status",
            "x-displayname": "Tunnel Connection Status",
            "x-ves-proto-message": "ves.io.schema.site.TunnelConnectionStatus",
            "properties": {
                "encap": {
                    "description": " Encapsulation type of tunnel",
                    "title": "encap",
                    "$ref": "#/definitions/schemaTunnelEncapsulationType",
                    "x-displayname": "Encapsulation Type"
                },
                "isLocal": {
                    "type": "boolean",
                    "description": " Identifies if the ipsec connection is local to the ver node or not",
                    "title": "isLocal",
                    "format": "boolean",
                    "x-displayname": "Local"
                },
                "remoteAddress": {
                    "type": "string",
                    "description": " IP address of the remote end",
                    "title": "remoteAddress",
                    "x-displayname": "Remote Address"
                },
                "role": {
                    "description": " indicates whether the ver is client/Originator or server/responder in tunnel",
                    "title": "role",
                    "$ref": "#/definitions/siteTunnelRole",
                    "x-displayname": "Role"
                },
                "state": {
                    "description": " connection state which identifies whether connection is UP/DOWN",
                    "title": "state",
                    "$ref": "#/definitions/siteTunnelState",
                    "x-displayname": "Connection State"
                },
                "tunnelName": {
                    "type": "string",
                    "description": " Tunnel name",
                    "title": "tunnelName",
                    "x-displayname": "Tunnel Name"
                },
                "url": {
                    "type": "string",
                    "description": " url identifies the other end of the Ver for tunnel origination/termination",
                    "title": "url",
                    "x-displayname": "URL"
                },
                "verNodeName": {
                    "type": "string",
                    "description": " The VER node in the local site from which the connection is setup",
                    "title": "verNodeName",
                    "x-displayname": "VER Node Name"
                }
            }
        },
        "siteTunnelRole": {
            "type": "string",
            "description": "Role of VER in a tunnel connection\n\nInvalid role\nClient initiating the connection\nServer responding to the connection",
            "title": "TunnelRole",
            "enum": [
                "UNKNOWN_TUNNEL_ROLE",
                "TUNNEL_INITIATOR",
                "TUNNEL_RESPONDER"
            ],
            "default": "UNKNOWN_TUNNEL_ROLE",
            "x-displayname": "Tunnel Role",
            "x-ves-proto-enum": "ves.io.schema.site.TunnelRole"
        },
        "siteTunnelState": {
            "type": "string",
            "description": "Tunnel state connecting the site to remote\n\nInvalid Tunnel state\nTunnel Connection is up\nTunnel Connection is down\nTunnel is disabled",
            "title": "Tunnel State",
            "enum": [
                "UNKNOWN_TUNNEL_STATE",
                "TUNNEL_UP",
                "TUNNEL_DOWN",
                "TUNNEL_DISABLED"
            ],
            "default": "UNKNOWN_TUNNEL_STATE",
            "x-displayname": "Tunnel State",
            "x-ves-proto-enum": "ves.io.schema.site.TunnelState"
        },
        "siteUSBDevice": {
            "type": "object",
            "description": "Information about USB device",
            "title": "USB device",
            "x-displayname": "USB Device informaton",
            "x-ves-proto-message": "ves.io.schema.site.USBDevice",
            "properties": {
                "address": {
                    "type": "integer",
                    "description": " Address of the device on the bus in decimal\n\nExample: - \"4\"-",
                    "title": "address",
                    "format": "int64",
                    "x-displayname": "Address",
                    "x-ves-example": "4"
                },
                "b_device_class": {
                    "type": "string",
                    "description": " The class of this device\n\nExample: - \"hub\"-",
                    "title": "b_device_class",
                    "x-displayname": "Class",
                    "x-ves-example": "hub"
                },
                "b_device_protocol": {
                    "type": "string",
                    "description": " The protocol (within the sub-class) of this device\n\nExample: - \"0002\"-",
                    "title": "b_device_protocol",
                    "x-displayname": "Protocol",
                    "x-ves-example": "0002"
                },
                "b_device_sub_class": {
                    "type": "string",
                    "description": " The sub-class (within the class) of this device\n\nExample: - \"hub\"-",
                    "title": "b_device_sub_class",
                    "x-displayname": "Subclass",
                    "x-ves-example": "hub"
                },
                "b_max_packet_size": {
                    "type": "integer",
                    "description": " Maximum size of the control transfer\n\nExample: - \"64\"-",
                    "title": "b_max_packet_size",
                    "format": "int64",
                    "x-displayname": "Max packet size",
                    "x-ves-example": "64"
                },
                "bcd_device": {
                    "type": "string",
                    "description": " The device version\n\nExample: - \"5.05\"-",
                    "title": "bcd_device",
                    "x-displayname": "BCD Device",
                    "x-ves-example": "5.05"
                },
                "bcd_usb": {
                    "type": "string",
                    "description": " USB Specification Release Number\n\nExample: - \"2.0\"-",
                    "title": "bcd_usb",
                    "x-displayname": "BCD Spec",
                    "x-ves-example": "2.0"
                },
                "bus": {
                    "type": "integer",
                    "description": " The bus on which the device was detected in decimal\n\nExample: - \"1\"-",
                    "title": "bus",
                    "format": "int64",
                    "x-displayname": "Bus",
                    "x-ves-example": "1"
                },
                "description": {
                    "type": "string",
                    "description": " Device description\n\nExample: - \"NetVista Full Width Keyboard (IBM Corp.)\"-",
                    "title": "description",
                    "x-displayname": "Description",
                    "x-ves-example": "NetVista Full Width Keyboard (IBM Corp.)"
                },
                "i_manufacturer": {
                    "type": "string",
                    "description": " Manufacturer name\n\nExample: - \"Voltera\"-",
                    "title": "i_manufacturer",
                    "x-displayname": "Manufacturer",
                    "x-ves-example": "Voltera"
                },
                "i_product": {
                    "type": "string",
                    "description": " Product name reported by device\n\nExample: - \"xHCI Host Controller\"-",
                    "title": "i_product",
                    "x-displayname": "Device product",
                    "x-ves-example": "xHCI Host Controller"
                },
                "i_serial": {
                    "type": "string",
                    "description": " Index of Serial Number String Descriptor\n\nExample: - \"0000:00:14.0\"-",
                    "title": "i_serial_number",
                    "x-displayname": "iSerialNumber",
                    "x-ves-example": "0000:00:14.0"
                },
                "id_product": {
                    "type": "string",
                    "description": " Product ID (Assigned by Manufacturer) in hex\n\nExample: - \"0x0002\"-",
                    "title": "id_product",
                    "x-displayname": "Product ID",
                    "x-ves-example": "0x0002"
                },
                "id_vendor": {
                    "type": "string",
                    "description": " Vendor ID (Assigned by USB Org) in hex\n\nExample: - \"0x1d6b\"-",
                    "title": "id_vendor",
                    "x-displayname": "Vendor ID",
                    "x-ves-example": "0x1d6b"
                },
                "port": {
                    "type": "integer",
                    "description": " Port on which the device was detected in decimal\n\nExample: - \"3\"-",
                    "title": "port",
                    "format": "int64",
                    "x-displayname": "Port",
                    "x-ves-example": "3"
                },
                "product_name": {
                    "type": "string",
                    "description": " Product ID translated to name (if available)\n\nExample: - \"NetVista Full Width Keyboard\"-",
                    "title": "product_name",
                    "x-displayname": "Product name",
                    "x-ves-example": "NetVista Full Width Keyboard"
                },
                "speed": {
                    "type": "string",
                    "description": " The negotiated operating speed for the device\n\nExample: - \"high\"-",
                    "title": "speed",
                    "x-displayname": "Speed",
                    "x-ves-example": "high"
                },
                "usb_type": {
                    "description": " Type of USB device\n\nExample: - \"INTERNAL\"-",
                    "title": "usb_type",
                    "$ref": "#/definitions/siteUsbType",
                    "x-displayname": "USB Type",
                    "x-ves-example": "INTERNAL"
                },
                "vendor_name": {
                    "type": "string",
                    "description": " Vendor ID translated to name (if available)\n\nExample: - \"IBM Corp.\"-",
                    "title": "vendor_name",
                    "x-displayname": "Vendor name",
                    "x-ves-example": "IBM Corp."
                }
            }
        },
        "siteUsbType": {
            "type": "string",
            "description": "Type of USB device\n\nUnknown USB device type\nInternal USB present in Certified HW\nUSB device present during node registration\nUSB device that can be matched by USB rules",
            "title": "UsbType",
            "enum": [
                "UNKNOWN_USB",
                "INTERNAL",
                "REGISTERED",
                "CONFIGURABLE"
            ],
            "default": "UNKNOWN_USB",
            "x-displayname": "USB Type",
            "x-ves-proto-enum": "ves.io.schema.site.UsbType"
        },
        "siteVTRPState": {
            "type": "string",
            "description": "State of VTRP connection between (VER control plane)Vega \u0026 (Volterra Fabric control)Ares\n\nConnection is initialized\nVTRP connection is active\nConnecting to the server\nTCP connection is up\nVTRP session established\nConnection is deleted",
            "title": "VTRPState",
            "enum": [
                "INIT",
                "ACTIVE",
                "CONNECTING",
                "CONNECTED",
                "ESTABLISHED",
                "DELETE"
            ],
            "default": "INIT",
            "x-displayname": "VTRP State",
            "x-ves-proto-enum": "ves.io.schema.site.VTRPState"
        },
        "siteVerMasterStatusType": {
            "type": "object",
            "description": "Info of the Master Ver of the site",
            "title": "VerMasterStatus",
            "x-displayname": "Ver Master Status",
            "x-ves-proto-message": "ves.io.schema.site.VerMasterStatusType",
            "properties": {
                "transition_timestamp": {
                    "type": "string",
                    "description": " Timestamp at which the VER became cluster master",
                    "title": "Mastership Transition TimeStamp",
                    "format": "date-time",
                    "x-displayname": "Mastership Transition TimeStamp"
                },
                "ver_UID": {
                    "type": "string",
                    "description": " UID of Master VER in the Cluster",
                    "title": "Master Ver UID",
                    "x-displayname": "Master Ver UID"
                },
                "ver_name": {
                    "type": "string",
                    "description": " Instance name of Master VER in the Cluster",
                    "title": "Master Ver Node Name",
                    "x-displayname": "Master Ver Node Name"
                }
            }
        },
        "siteVerStatusType": {
            "type": "object",
            "description": "Ver details in the site that has generated the site status object",
            "title": "VerStatus",
            "x-displayname": "Ver Status",
            "x-ves-proto-message": "ves.io.schema.site.VerStatusType",
            "properties": {
                "ares_status": {
                    "type": "array",
                    "description": " Status of every Ares connections this Ver is connecting to for routes",
                    "title": "ares_status",
                    "items": {
                        "$ref": "#/definitions/siteAresConnectionStatus"
                    },
                    "x-displayname": "Ares Status"
                },
                "configured_tunnel_status": {
                    "type": "array",
                    "description": " Status/details of every configured connection this Ver is originating",
                    "title": "configured_tunnel_connection_status",
                    "items": {
                        "$ref": "#/definitions/siteTunnelConnectionStatus"
                    },
                    "x-displayname": "Configured Tunnel Connection Status"
                },
                "intf_status": {
                    "type": "array",
                    "description": " Status of every inside or outside interface present in this VER",
                    "title": "interface_status",
                    "items": {
                        "$ref": "#/definitions/siteInterfaceStatus"
                    },
                    "x-displayname": "Interface Status"
                },
                "ipsec_status": {
                    "type": "array",
                    "description": " Status/details of every ipsec connection this Ver is terminating/originating",
                    "title": "ipsec_status",
                    "items": {
                        "$ref": "#/definitions/siteIpsecConnectionStatus"
                    },
                    "x-displayname": "IPSec Status"
                },
                "site_tunnel_status": {
                    "type": "array",
                    "description": " Status/details of every site connection this Ver is originating/ terminating",
                    "title": "site_tunnel_status",
                    "items": {
                        "$ref": "#/definitions/siteTunnelConnectionStatus"
                    },
                    "x-displayname": "Site Tunnel Status"
                },
                "ver_instance_name": {
                    "type": "string",
                    "description": " name of the ver instance that created this site status",
                    "title": "ver_instance_name",
                    "x-displayname": "VER Instance"
                }
            }
        },
        "siteVolterraSoftwareStatus": {
            "type": "object",
            "description": "Volterra software version running in the site",
            "title": "Volterra Software Status",
            "x-displayname": "Volterra Software Status",
            "x-ves-proto-message": "ves.io.schema.site.VolterraSoftwareStatus",
            "properties": {
                "available_version": {
                    "type": "string",
                    "description": " available version represent volterra software version ready to be upgraded in the site.",
                    "title": "available_version",
                    "x-displayname": "Available Version"
                },
                "deployment_state": {
                    "description": " deployment state shows status of last applied deployment in the site",
                    "title": "deployment_state",
                    "$ref": "#/definitions/siteDeploymentState",
                    "x-displayname": "Deployment State"
                },
                "nonconforming_state": {
                    "type": "string",
                    "description": " If nonconforming state is not empty, then current deployed SW version is nonconforming. Site should be upgrade to available version.",
                    "title": "Nonconforming State",
                    "x-displayname": "Nonconforming State"
                }
            }
        }
    },
    "x-displayname": "Site",
    "x-ves-proto-file": "ves.io/schema/site/public_crudapi.proto"
}`

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/site/object.proto

package site

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Site Object
//
// x-displayName: "Site Object"
// Site object specification
type Object struct {
	// metadata
	//
	// x-displayName: "Metadata"
	// Standard object's metadata
	Metadata *schema.ObjectMetaType `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// system_metadata
	//
	// x-displayName: "System Metadata"
	// System generated object's metadata
	SystemMetadata *schema.SystemObjectMetaType `protobuf:"bytes,2,opt,name=system_metadata,json=systemMetadata,proto3" json:"system_metadata,omitempty"`
	// spec
	//
	// x-displayName: "Spec"
	// Specification of the desired behavior of the site
	Spec *SpecType `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (m *Object) Reset()      { *m = Object{} }
func (*Object) ProtoMessage() {}
func (*Object) Descriptor() ([]byte, []int) {
	return fileDescriptor_1cbd8ec19bbb68ab, []int{0}
}
func (m *Object) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Object) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Object) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Object.Merge(m, src)
}
func (m *Object) XXX_Size() int {
	return m.Size()
}
func (m *Object) XXX_DiscardUnknown() {
	xxx_messageInfo_Object.DiscardUnknown(m)
}

var xxx_messageInfo_Object proto.InternalMessageInfo

func (m *Object) GetMetadata() *schema.ObjectMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Object) GetSystemMetadata() *schema.SystemObjectMetaType {
	if m != nil {
		return m.SystemMetadata
	}
	return nil
}

func (m *Object) GetSpec() *SpecType {
	if m != nil {
		return m.Spec
	}
	return nil
}

// Site Specification
//
// x-displayName: "Specification"
// Shape of the site specification
type SpecType struct {
	// gc_spec
	//
	// x-displayName: "GC Spec"
	GcSpec *GlobalSpecType `protobuf:"bytes,2,opt,name=gc_spec,json=gcSpec,proto3" json:"gc_spec,omitempty"`
}

func (m *SpecType) Reset()      { *m = SpecType{} }
func (*SpecType) ProtoMessage() {}
func (*SpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_1cbd8ec19bbb68ab, []int{1}
}
func (m *SpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpecType.Merge(m, src)
}
func (m *SpecType) XXX_Size() int {
	return m.Size()
}
func (m *SpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_SpecType.DiscardUnknown(m)
}

var xxx_messageInfo_SpecType proto.InternalMessageInfo

func (m *SpecType) GetGcSpec() *GlobalSpecType {
	if m != nil {
		return m.GcSpec
	}
	return nil
}

// Site Status Object
//
// x-displayName: "Status"
// Most recently observed status of site object
type StatusObject struct {
	// metadata
	//
	// x-displayName: "Metadata"
	// Standard status's metadata
	Metadata *schema.StatusMetaType `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// object_refs
	//
	// x-displayName: "Config Object"
	// Site object reference for which this status object is generated
	ObjectRefs []*schema.ObjectRefType `protobuf:"bytes,2,rep,name=object_refs,json=objectRefs,proto3" json:"object_refs,omitempty"`
	// conditions
	//
	// x-displayName: "Conditions"
	// Conditions
	Conditions []*schema.ConditionType `protobuf:"bytes,3,rep,name=conditions,proto3" json:"conditions,omitempty"`
	// Ver Status
	//
	// x-displayName: "VER Status"
	// Site status reported by each VER instance on a node
	VerStatus *VerStatusType `protobuf:"bytes,5,opt,name=ver_status,json=verStatus,proto3" json:"ver_status,omitempty"`
	// Ver Master Status
	//
	// x-displayName: "VER Master Status"
	// Identify the master node in the cluster
	VerMasterStatus *VerMasterStatusType `protobuf:"bytes,13,opt,name=ver_master_status,json=verMasterStatus,proto3" json:"ver_master_status,omitempty"`
	// Software Status
	//
	// x-displayName: "software status"
	// VolterraSoftware status shows deployment status of last version in site and available
	// version for upgrade.
	VolterraSoftwareStatus *VolterraSoftwareStatus `protobuf:"bytes,6,opt,name=volterra_software_status,json=volterraSoftwareStatus,proto3" json:"volterra_software_status,omitempty"`
	// Hostname
	//
	// x-displayName: "Hostname"
	// x-example: "value"
	// hostname of node in site
	Hostname string `protobuf:"bytes,7,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// Hardware information
	//
	// x-displayName: "Hardware Info"
	// HW information about node in the site
	HwInfo *OsInfo `protobuf:"bytes,8,opt,name=hw_info,json=hwInfo,proto3" json:"hw_info,omitempty"`
	// Node information
	//
	// x-displayName: "Node Information"
	// Node information in the site
	NodeInfo *NodeInfo `protobuf:"bytes,12,opt,name=node_info,json=nodeInfo,proto3" json:"node_info,omitempty"`
	// Scaling Status
	//
	// x-displayName: "Scaling Status"
	// Scaling status provides information about scaling of nodes in a site
	ScalingStatus *ScalingStatus `protobuf:"bytes,9,opt,name=scaling_status,json=scalingStatus,proto3" json:"scaling_status,omitempty"`
	// Operating system Status
	//
	// x-displayName: "Operating System Status"
	// OperatingSystem status shows deployment status of last version of operating system in site and available
	// version for upgrade.
	OperatingSystemStatus *OperatingSystemStatus `protobuf:"bytes,10,opt,name=operating_system_status,json=operatingSystemStatus,proto3" json:"operating_system_status,omitempty"`
	// Certified Hardware
	//
	// x-displayName: "Certified Hardware"
	// x-example: "value"
	// Certified Hardware identifies what Volterra Certified Hardware is deployed at this site.
	CertifiedHardware string `protobuf:"bytes,11,opt,name=certified_hardware,json=certifiedHardware,proto3" json:"certified_hardware,omitempty"`
	// Fleet Status
	//
	// x-displayName: "Fleet Status"
	// Fleet status shows fleet deployment status of last fleet default config on the node
	FleetStatus *FleetStatus `protobuf:"bytes,14,opt,name=fleet_status,json=fleetStatus,proto3" json:"fleet_status,omitempty"`
}

func (m *StatusObject) Reset()      { *m = StatusObject{} }
func (*StatusObject) ProtoMessage() {}
func (*StatusObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_1cbd8ec19bbb68ab, []int{2}
}
func (m *StatusObject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatusObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *StatusObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusObject.Merge(m, src)
}
func (m *StatusObject) XXX_Size() int {
	return m.Size()
}
func (m *StatusObject) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusObject.DiscardUnknown(m)
}

var xxx_messageInfo_StatusObject proto.InternalMessageInfo

func (m *StatusObject) GetMetadata() *schema.StatusMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *StatusObject) GetObjectRefs() []*schema.ObjectRefType {
	if m != nil {
		return m.ObjectRefs
	}
	return nil
}

func (m *StatusObject) GetConditions() []*schema.ConditionType {
	if m != nil {
		return m.Conditions
	}
	return nil
}

func (m *StatusObject) GetVerStatus() *VerStatusType {
	if m != nil {
		return m.VerStatus
	}
	return nil
}

func (m *StatusObject) GetVerMasterStatus() *VerMasterStatusType {
	if m != nil {
		return m.VerMasterStatus
	}
	return nil
}

func (m *StatusObject) GetVolterraSoftwareStatus() *VolterraSoftwareStatus {
	if m != nil {
		return m.VolterraSoftwareStatus
	}
	return nil
}

func (m *StatusObject) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *StatusObject) GetHwInfo() *OsInfo {
	if m != nil {
		return m.HwInfo
	}
	return nil
}

func (m *StatusObject) GetNodeInfo() *NodeInfo {
	if m != nil {
		return m.NodeInfo
	}
	return nil
}

func (m *StatusObject) GetScalingStatus() *ScalingStatus {
	if m != nil {
		return m.ScalingStatus
	}
	return nil
}

func (m *StatusObject) GetOperatingSystemStatus() *OperatingSystemStatus {
	if m != nil {
		return m.OperatingSystemStatus
	}
	return nil
}

func (m *StatusObject) GetCertifiedHardware() string {
	if m != nil {
		return m.CertifiedHardware
	}
	return ""
}

func (m *StatusObject) GetFleetStatus() *FleetStatus {
	if m != nil {
		return m.FleetStatus
	}
	return nil
}

func init() {
	proto.RegisterType((*Object)(nil), "ves.io.schema.site.Object")
	golang_proto.RegisterType((*Object)(nil), "ves.io.schema.site.Object")
	proto.RegisterType((*SpecType)(nil), "ves.io.schema.site.SpecType")
	golang_proto.RegisterType((*SpecType)(nil), "ves.io.schema.site.SpecType")
	proto.RegisterType((*StatusObject)(nil), "ves.io.schema.site.StatusObject")
	golang_proto.RegisterType((*StatusObject)(nil), "ves.io.schema.site.StatusObject")
}

func init() { proto.RegisterFile("ves.io/schema/site/object.proto", fileDescriptor_1cbd8ec19bbb68ab) }
func init() {
	golang_proto.RegisterFile("ves.io/schema/site/object.proto", fileDescriptor_1cbd8ec19bbb68ab)
}

var fileDescriptor_1cbd8ec19bbb68ab = []byte{
	// 769 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0x4d, 0x6f, 0xdb, 0x36,
	0x18, 0xc7, 0xad, 0xd8, 0xf1, 0x0b, 0xed, 0x38, 0x09, 0x87, 0x6c, 0x9a, 0xb7, 0x31, 0x99, 0x77,
	0x58, 0x36, 0xc0, 0xd2, 0xb0, 0x9c, 0x92, 0x0d, 0xd9, 0x90, 0x01, 0x49, 0x36, 0x24, 0x0b, 0x60,
	0xb7, 0x3d, 0xf4, 0x62, 0xd0, 0x12, 0x25, 0xab, 0xb5, 0x45, 0x81, 0xa4, 0x95, 0xe6, 0x50, 0xa0,
	0xe8, 0xb9, 0x87, 0x02, 0xfd, 0x12, 0x45, 0x3f, 0x45, 0xd3, 0x53, 0x91, 0x53, 0xd0, 0x53, 0x8e,
	0x8d, 0x7c, 0xe9, 0xa5, 0x40, 0x3e, 0x42, 0x21, 0x52, 0x72, 0xec, 0x54, 0x01, 0x7a, 0x12, 0x1f,
	0x3e, 0xff, 0xe7, 0xf7, 0xbc, 0x88, 0x24, 0x58, 0x0d, 0x09, 0x37, 0x3c, 0x6a, 0x72, 0xab, 0x4f,
	0x86, 0xd8, 0xe4, 0x9e, 0x20, 0x26, 0xed, 0x3d, 0x20, 0x96, 0x30, 0x02, 0x46, 0x05, 0x85, 0x50,
	0x09, 0x0c, 0x25, 0x30, 0x62, 0x41, 0xa3, 0xe5, 0x7a, 0xa2, 0x3f, 0xea, 0x19, 0x16, 0x1d, 0x9a,
	0x2e, 0x75, 0xa9, 0x29, 0xa5, 0xbd, 0x91, 0x23, 0x2d, 0x69, 0xc8, 0x95, 0x42, 0x34, 0xbe, 0x9b,
	0xcd, 0x41, 0x03, 0xe1, 0x51, 0x9f, 0x27, 0x4e, 0x94, 0x51, 0x80, 0x38, 0x09, 0x48, 0xea, 0xff,
	0x76, 0xd6, 0x3f, 0xed, 0x6a, 0xce, 0xba, 0x42, 0xc2, 0x89, 0x1f, 0xce, 0xe2, 0x9b, 0x1f, 0x35,
	0x50, 0x3c, 0x92, 0xfd, 0xc0, 0x4d, 0x50, 0x1e, 0x12, 0x81, 0x6d, 0x2c, 0xb0, 0xae, 0xad, 0x69,
	0xeb, 0xd5, 0xdf, 0x7f, 0x30, 0x66, 0x9b, 0x53, 0xc2, 0x43, 0x22, 0xf0, 0x9d, 0x93, 0x80, 0xb4,
	0x27, 0x72, 0x78, 0x00, 0x16, 0xf9, 0x09, 0x17, 0x64, 0xd8, 0x9d, 0x10, 0xe6, 0x24, 0xe1, 0xa7,
	0x1b, 0x84, 0x8e, 0x54, 0xdd, 0xe0, 0xd4, 0x55, 0xec, 0x61, 0x4a, 0xfb, 0x0d, 0x14, 0x78, 0x40,
	0x2c, 0x3d, 0x2f, 0x11, 0xdf, 0x1b, 0x9f, 0x4f, 0xd8, 0xe8, 0x04, 0xc4, 0x92, 0xb1, 0x52, 0xb9,
	0xb5, 0xfe, 0xf4, 0xaf, 0xa2, 0x82, 0xbc, 0x39, 0xd5, 0xe7, 0x96, 0xb4, 0xb3, 0x53, 0x7d, 0x25,
	0x24, 0xbc, 0xe5, 0xd1, 0x96, 0xe7, 0x3b, 0x0c, 0x73, 0xc1, 0x46, 0x96, 0x18, 0x31, 0xd2, 0xdc,
	0x03, 0xe5, 0x34, 0x16, 0xfe, 0x01, 0x4a, 0xae, 0xd5, 0x95, 0xa9, 0x54, 0xb5, 0xcd, 0xac, 0x54,
	0x7b, 0x03, 0xda, 0xc3, 0x83, 0x49, 0xc2, 0xa2, 0x6b, 0xc5, 0xeb, 0xe6, 0x8b, 0x12, 0xa8, 0x75,
	0x04, 0x16, 0x23, 0xfe, 0xc5, 0xe3, 0x53, 0xf2, 0x8c, 0xf1, 0xed, 0x82, 0xaa, 0x3a, 0x53, 0x5d,
	0x46, 0x1c, 0xae, 0xcf, 0xad, 0xe5, 0x33, 0xfa, 0x56, 0x69, 0xda, 0xc4, 0x89, 0x83, 0x77, 0x4a,
	0xaf, 0x1e, 0x17, 0xe2, 0xf2, 0xda, 0x80, 0xa6, 0xfb, 0x1c, 0xfe, 0x09, 0x80, 0x45, 0x7d, 0xdb,
	0x93, 0x3f, 0x58, 0xcf, 0x67, 0x62, 0xfe, 0x49, 0x05, 0xb2, 0x86, 0x29, 0x3d, 0xfc, 0x1b, 0x80,
	0x90, 0xb0, 0x2e, 0x97, 0x55, 0xea, 0xf3, 0xb2, 0x85, 0x1f, 0xb3, 0x26, 0x72, 0x8f, 0x30, 0xd5,
	0x8a, 0x44, 0x54, 0xc2, 0xd4, 0x84, 0x1d, 0xb0, 0x1c, 0x13, 0x86, 0x98, 0x8b, 0x6b, 0xd0, 0x82,
	0x04, 0xfd, 0x7c, 0x0b, 0xe8, 0x50, 0x6a, 0xa7, 0x70, 0x8b, 0xe1, 0xec, 0x26, 0xb4, 0x81, 0x1e,
	0xd2, 0x81, 0x20, 0x8c, 0xe1, 0x2e, 0xa7, 0x8e, 0x38, 0xc6, 0x8c, 0xa4, 0xec, 0xa2, 0x64, 0xff,
	0x9a, 0xc9, 0x4e, 0x62, 0x3a, 0x49, 0x88, 0xa2, 0xb5, 0xbf, 0x0e, 0x33, 0xf7, 0x61, 0x03, 0x94,
	0xfb, 0x94, 0x0b, 0x1f, 0x0f, 0x89, 0x5e, 0x5a, 0xd3, 0xd6, 0x2b, 0xed, 0x89, 0x0d, 0x37, 0x40,
	0xa9, 0x7f, 0xdc, 0xf5, 0x7c, 0x87, 0xea, 0x65, 0x99, 0xb0, 0x91, 0x95, 0xf0, 0x88, 0xff, 0xeb,
	0x3b, 0xb4, 0x5d, 0xec, 0x1f, 0xc7, 0x5f, 0xb8, 0x09, 0x2a, 0x3e, 0xb5, 0x89, 0x0a, 0xab, 0xdd,
	0x7e, 0x92, 0xff, 0xa7, 0x36, 0x91, 0x81, 0x65, 0x3f, 0x59, 0xc1, 0x7d, 0x50, 0xe7, 0x16, 0x1e,
	0x78, 0xbe, 0x9b, 0xf6, 0x59, 0xb9, 0xfd, 0x67, 0x74, 0x94, 0x32, 0x69, 0x6f, 0x81, 0x4f, 0x9b,
	0x10, 0x83, 0x6f, 0x68, 0x40, 0x18, 0x16, 0x92, 0xa5, 0x6e, 0x68, 0x82, 0x04, 0x12, 0xf9, 0x4b,
	0x66, 0x27, 0x69, 0x88, 0xba, 0xad, 0x09, 0x7a, 0x85, 0x66, 0x6d, 0xc3, 0x16, 0x80, 0x16, 0x61,
	0xc2, 0x73, 0x3c, 0x62, 0x77, 0xfb, 0x98, 0xd9, 0xf1, 0x50, 0xf5, 0xaa, 0x1c, 0xe1, 0xf2, 0xc4,
	0xb3, 0x9f, 0x38, 0xe0, 0x0e, 0xa8, 0x39, 0x03, 0x42, 0x44, 0x5a, 0x46, 0x5d, 0x96, 0xb1, 0x9a,
	0x55, 0xc6, 0x6e, 0xac, 0x4b, 0x92, 0x57, 0x9d, 0x6b, 0x63, 0xeb, 0xab, 0x77, 0xdb, 0x4b, 0xa0,
	0x0e, 0x6a, 0xe9, 0xfd, 0x31, 0x46, 0x9e, 0xfd, 0x5f, 0xa1, 0x5c, 0x58, 0x9a, 0xdf, 0x79, 0xa6,
	0x9d, 0x6d, 0xe7, 0xdb, 0x77, 0x0f, 0xce, 0x2f, 0x51, 0xee, 0xe2, 0x12, 0xe5, 0xae, 0x2e, 0x91,
	0xf6, 0x24, 0x42, 0xda, 0xcb, 0x08, 0x69, 0x6f, 0x23, 0xa4, 0x9d, 0x47, 0x48, 0xbb, 0x88, 0x90,
	0xf6, 0x3e, 0x42, 0xda, 0x87, 0x08, 0xe5, 0xae, 0x22, 0xa4, 0x3d, 0x1f, 0xa3, 0xdc, 0xeb, 0x31,
	0xd2, 0xce, 0xc7, 0x28, 0x77, 0x31, 0x46, 0xb9, 0xfb, 0xfb, 0x2e, 0x0d, 0x1e, 0xba, 0x46, 0x7a,
	0x52, 0x8c, 0x11, 0x37, 0xe5, 0xc2, 0xa1, 0x6c, 0xd8, 0x0a, 0x18, 0x0d, 0x3d, 0x9b, 0xb0, 0x56,
	0xea, 0x36, 0x83, 0x9e, 0x4b, 0x4d, 0xf2, 0x48, 0xa4, 0x2f, 0xf4, 0xf5, 0x43, 0xdd, 0x2b, 0xca,
	0x47, 0x76, 0xe3, 0x53, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd9, 0xfa, 0xda, 0x90, 0x46, 0x06, 0x00,
	0x00,
}

func (this *Object) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Object)
	if !ok {
		that2, ok := that.(Object)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if !this.SystemMetadata.Equal(that1.SystemMetadata) {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	return true
}
func (this *SpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SpecType)
	if !ok {
		that2, ok := that.(SpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GcSpec.Equal(that1.GcSpec) {
		return false
	}
	return true
}
func (this *StatusObject) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StatusObject)
	if !ok {
		that2, ok := that.(StatusObject)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if len(this.ObjectRefs) != len(that1.ObjectRefs) {
		return false
	}
	for i := range this.ObjectRefs {
		if !this.ObjectRefs[i].Equal(that1.ObjectRefs[i]) {
			return false
		}
	}
	if len(this.Conditions) != len(that1.Conditions) {
		return false
	}
	for i := range this.Conditions {
		if !this.Conditions[i].Equal(that1.Conditions[i]) {
			return false
		}
	}
	if !this.VerStatus.Equal(that1.VerStatus) {
		return false
	}
	if !this.VerMasterStatus.Equal(that1.VerMasterStatus) {
		return false
	}
	if !this.VolterraSoftwareStatus.Equal(that1.VolterraSoftwareStatus) {
		return false
	}
	if this.Hostname != that1.Hostname {
		return false
	}
	if !this.HwInfo.Equal(that1.HwInfo) {
		return false
	}
	if !this.NodeInfo.Equal(that1.NodeInfo) {
		return false
	}
	if !this.ScalingStatus.Equal(that1.ScalingStatus) {
		return false
	}
	if !this.OperatingSystemStatus.Equal(that1.OperatingSystemStatus) {
		return false
	}
	if this.CertifiedHardware != that1.CertifiedHardware {
		return false
	}
	if !this.FleetStatus.Equal(that1.FleetStatus) {
		return false
	}
	return true
}
func (this *Object) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&site.Object{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.SystemMetadata != nil {
		s = append(s, "SystemMetadata: "+fmt.Sprintf("%#v", this.SystemMetadata)+",\n")
	}
	if this.Spec != nil {
		s = append(s, "Spec: "+fmt.Sprintf("%#v", this.Spec)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&site.SpecType{")
	if this.GcSpec != nil {
		s = append(s, "GcSpec: "+fmt.Sprintf("%#v", this.GcSpec)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StatusObject) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 17)
	s = append(s, "&site.StatusObject{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.ObjectRefs != nil {
		s = append(s, "ObjectRefs: "+fmt.Sprintf("%#v", this.ObjectRefs)+",\n")
	}
	if this.Conditions != nil {
		s = append(s, "Conditions: "+fmt.Sprintf("%#v", this.Conditions)+",\n")
	}
	if this.VerStatus != nil {
		s = append(s, "VerStatus: "+fmt.Sprintf("%#v", this.VerStatus)+",\n")
	}
	if this.VerMasterStatus != nil {
		s = append(s, "VerMasterStatus: "+fmt.Sprintf("%#v", this.VerMasterStatus)+",\n")
	}
	if this.VolterraSoftwareStatus != nil {
		s = append(s, "VolterraSoftwareStatus: "+fmt.Sprintf("%#v", this.VolterraSoftwareStatus)+",\n")
	}
	s = append(s, "Hostname: "+fmt.Sprintf("%#v", this.Hostname)+",\n")
	if this.HwInfo != nil {
		s = append(s, "HwInfo: "+fmt.Sprintf("%#v", this.HwInfo)+",\n")
	}
	if this.NodeInfo != nil {
		s = append(s, "NodeInfo: "+fmt.Sprintf("%#v", this.NodeInfo)+",\n")
	}
	if this.ScalingStatus != nil {
		s = append(s, "ScalingStatus: "+fmt.Sprintf("%#v", this.ScalingStatus)+",\n")
	}
	if this.OperatingSystemStatus != nil {
		s = append(s, "OperatingSystemStatus: "+fmt.Sprintf("%#v", this.OperatingSystemStatus)+",\n")
	}
	s = append(s, "CertifiedHardware: "+fmt.Sprintf("%#v", this.CertifiedHardware)+",\n")
	if this.FleetStatus != nil {
		s = append(s, "FleetStatus: "+fmt.Sprintf("%#v", this.FleetStatus)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringObject(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Object) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Object) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Object) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintObject(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.SystemMetadata != nil {
		{
			size, err := m.SystemMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintObject(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintObject(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GcSpec != nil {
		{
			size, err := m.GcSpec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintObject(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *StatusObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusObject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatusObject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FleetStatus != nil {
		{
			size, err := m.FleetStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintObject(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.VerMasterStatus != nil {
		{
			size, err := m.VerMasterStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintObject(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.NodeInfo != nil {
		{
			size, err := m.NodeInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintObject(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if len(m.CertifiedHardware) > 0 {
		i -= len(m.CertifiedHardware)
		copy(dAtA[i:], m.CertifiedHardware)
		i = encodeVarintObject(dAtA, i, uint64(len(m.CertifiedHardware)))
		i--
		dAtA[i] = 0x5a
	}
	if m.OperatingSystemStatus != nil {
		{
			size, err := m.OperatingSystemStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintObject(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.ScalingStatus != nil {
		{
			size, err := m.ScalingStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintObject(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.HwInfo != nil {
		{
			size, err := m.HwInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintObject(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.Hostname) > 0 {
		i -= len(m.Hostname)
		copy(dAtA[i:], m.Hostname)
		i = encodeVarintObject(dAtA, i, uint64(len(m.Hostname)))
		i--
		dAtA[i] = 0x3a
	}
	if m.VolterraSoftwareStatus != nil {
		{
			size, err := m.VolterraSoftwareStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintObject(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.VerStatus != nil {
		{
			size, err := m.VerStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintObject(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Conditions) > 0 {
		for iNdEx := len(m.Conditions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Conditions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintObject(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ObjectRefs) > 0 {
		for iNdEx := len(m.ObjectRefs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ObjectRefs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintObject(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintObject(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintObject(dAtA []byte, offset int, v uint64) int {
	offset -= sovObject(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Object) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovObject(uint64(l))
	}
	if m.SystemMetadata != nil {
		l = m.SystemMetadata.Size()
		n += 1 + l + sovObject(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovObject(uint64(l))
	}
	return n
}

func (m *SpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GcSpec != nil {
		l = m.GcSpec.Size()
		n += 1 + l + sovObject(uint64(l))
	}
	return n
}

func (m *StatusObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovObject(uint64(l))
	}
	if len(m.ObjectRefs) > 0 {
		for _, e := range m.ObjectRefs {
			l = e.Size()
			n += 1 + l + sovObject(uint64(l))
		}
	}
	if len(m.Conditions) > 0 {
		for _, e := range m.Conditions {
			l = e.Size()
			n += 1 + l + sovObject(uint64(l))
		}
	}
	if m.VerStatus != nil {
		l = m.VerStatus.Size()
		n += 1 + l + sovObject(uint64(l))
	}
	if m.VolterraSoftwareStatus != nil {
		l = m.VolterraSoftwareStatus.Size()
		n += 1 + l + sovObject(uint64(l))
	}
	l = len(m.Hostname)
	if l > 0 {
		n += 1 + l + sovObject(uint64(l))
	}
	if m.HwInfo != nil {
		l = m.HwInfo.Size()
		n += 1 + l + sovObject(uint64(l))
	}
	if m.ScalingStatus != nil {
		l = m.ScalingStatus.Size()
		n += 1 + l + sovObject(uint64(l))
	}
	if m.OperatingSystemStatus != nil {
		l = m.OperatingSystemStatus.Size()
		n += 1 + l + sovObject(uint64(l))
	}
	l = len(m.CertifiedHardware)
	if l > 0 {
		n += 1 + l + sovObject(uint64(l))
	}
	if m.NodeInfo != nil {
		l = m.NodeInfo.Size()
		n += 1 + l + sovObject(uint64(l))
	}
	if m.VerMasterStatus != nil {
		l = m.VerMasterStatus.Size()
		n += 1 + l + sovObject(uint64(l))
	}
	if m.FleetStatus != nil {
		l = m.FleetStatus.Size()
		n += 1 + l + sovObject(uint64(l))
	}
	return n
}

func sovObject(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozObject(x uint64) (n int) {
	return sovObject(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Object) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Object{`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "ObjectMetaType", "schema.ObjectMetaType", 1) + `,`,
		`SystemMetadata:` + strings.Replace(fmt.Sprintf("%v", this.SystemMetadata), "SystemObjectMetaType", "schema.SystemObjectMetaType", 1) + `,`,
		`Spec:` + strings.Replace(this.Spec.String(), "SpecType", "SpecType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SpecType{`,
		`GcSpec:` + strings.Replace(fmt.Sprintf("%v", this.GcSpec), "GlobalSpecType", "GlobalSpecType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StatusObject) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForObjectRefs := "[]*ObjectRefType{"
	for _, f := range this.ObjectRefs {
		repeatedStringForObjectRefs += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForObjectRefs += "}"
	repeatedStringForConditions := "[]*ConditionType{"
	for _, f := range this.Conditions {
		repeatedStringForConditions += strings.Replace(fmt.Sprintf("%v", f), "ConditionType", "schema.ConditionType", 1) + ","
	}
	repeatedStringForConditions += "}"
	s := strings.Join([]string{`&StatusObject{`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "StatusMetaType", "schema.StatusMetaType", 1) + `,`,
		`ObjectRefs:` + repeatedStringForObjectRefs + `,`,
		`Conditions:` + repeatedStringForConditions + `,`,
		`VerStatus:` + strings.Replace(fmt.Sprintf("%v", this.VerStatus), "VerStatusType", "VerStatusType", 1) + `,`,
		`VolterraSoftwareStatus:` + strings.Replace(fmt.Sprintf("%v", this.VolterraSoftwareStatus), "VolterraSoftwareStatus", "VolterraSoftwareStatus", 1) + `,`,
		`Hostname:` + fmt.Sprintf("%v", this.Hostname) + `,`,
		`HwInfo:` + strings.Replace(fmt.Sprintf("%v", this.HwInfo), "OsInfo", "OsInfo", 1) + `,`,
		`ScalingStatus:` + strings.Replace(fmt.Sprintf("%v", this.ScalingStatus), "ScalingStatus", "ScalingStatus", 1) + `,`,
		`OperatingSystemStatus:` + strings.Replace(fmt.Sprintf("%v", this.OperatingSystemStatus), "OperatingSystemStatus", "OperatingSystemStatus", 1) + `,`,
		`CertifiedHardware:` + fmt.Sprintf("%v", this.CertifiedHardware) + `,`,
		`NodeInfo:` + strings.Replace(fmt.Sprintf("%v", this.NodeInfo), "NodeInfo", "NodeInfo", 1) + `,`,
		`VerMasterStatus:` + strings.Replace(fmt.Sprintf("%v", this.VerMasterStatus), "VerMasterStatusType", "VerMasterStatusType", 1) + `,`,
		`FleetStatus:` + strings.Replace(fmt.Sprintf("%v", this.FleetStatus), "FleetStatus", "FleetStatus", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringObject(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Object) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowObject
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Object: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Object: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &schema.ObjectMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SystemMetadata == nil {
				m.SystemMetadata = &schema.SystemObjectMetaType{}
			}
			if err := m.SystemMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &SpecType{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipObject(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthObject
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthObject
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowObject
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GcSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GcSpec == nil {
				m.GcSpec = &GlobalSpecType{}
			}
			if err := m.GcSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipObject(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthObject
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthObject
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowObject
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &schema.StatusMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectRefs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjectRefs = append(m.ObjectRefs, &schema.ObjectRefType{})
			if err := m.ObjectRefs[len(m.ObjectRefs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conditions = append(m.Conditions, &schema.ConditionType{})
			if err := m.Conditions[len(m.Conditions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VerStatus == nil {
				m.VerStatus = &VerStatusType{}
			}
			if err := m.VerStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolterraSoftwareStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VolterraSoftwareStatus == nil {
				m.VolterraSoftwareStatus = &VolterraSoftwareStatus{}
			}
			if err := m.VolterraSoftwareStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HwInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HwInfo == nil {
				m.HwInfo = &OsInfo{}
			}
			if err := m.HwInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScalingStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScalingStatus == nil {
				m.ScalingStatus = &ScalingStatus{}
			}
			if err := m.ScalingStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatingSystemStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OperatingSystemStatus == nil {
				m.OperatingSystemStatus = &OperatingSystemStatus{}
			}
			if err := m.OperatingSystemStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertifiedHardware", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CertifiedHardware = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeInfo == nil {
				m.NodeInfo = &NodeInfo{}
			}
			if err := m.NodeInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerMasterStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VerMasterStatus == nil {
				m.VerMasterStatus = &VerMasterStatusType{}
			}
			if err := m.VerMasterStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FleetStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FleetStatus == nil {
				m.FleetStatus = &FleetStatus{}
			}
			if err := m.FleetStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipObject(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthObject
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthObject
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipObject(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowObject
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowObject
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowObject
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthObject
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupObject
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthObject
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthObject        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowObject          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupObject = fmt.Errorf("proto: unexpected end of group")
)

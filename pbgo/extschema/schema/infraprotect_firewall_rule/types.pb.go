// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/infraprotect_firewall_rule/types.proto

package infraprotect_firewall_rule

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GlobalSpecType
//
// x-displayName: "DDos Transit Firewall Rule"
// DDos Transit Firewall Rule spec
type GlobalSpecType struct {
	// Version
	//
	// x-displayName: "Version"
	// x-required
	// x-example: "IPV4"
	// IP Version
	//
	// Types that are valid to be assigned to Version:
	//	*GlobalSpecType_VersionIpv4
	//	*GlobalSpecType_VersionIpv6
	Version isGlobalSpecType_Version `protobuf_oneof:"version"`
	// Source Prefix
	//
	// x-displayName: "Source Prefix"
	// x-required
	// x-example: "1.2.3.4/24"
	// Source Prefix
	//
	// Types that are valid to be assigned to SourcePrefix:
	//	*GlobalSpecType_SourcePrefixSingle
	//	*GlobalSpecType_SourcePrefixAll
	SourcePrefix isGlobalSpecType_SourcePrefix `protobuf_oneof:"source_prefix"`
	// Desination Prefix
	//
	// x-displayName: "Desination Prefix"
	// x-required
	// x-example: "1.2.3.4/24"
	// Desination Prefix
	//
	// Types that are valid to be assigned to DestinationPrefix:
	//	*GlobalSpecType_DestinationPrefixSingle
	//	*GlobalSpecType_DestinationPrefixAll
	DestinationPrefix isGlobalSpecType_DestinationPrefix `protobuf_oneof:"destination_prefix"`
	// Protocol
	//
	// x-displayName: "Protocol"
	// x-required
	// Protocol
	//
	// Types that are valid to be assigned to Protocol:
	//	*GlobalSpecType_ProtocolUdp
	//	*GlobalSpecType_ProtocolTcp
	//	*GlobalSpecType_ProtocolAh
	//	*GlobalSpecType_ProtocolEsp
	//	*GlobalSpecType_ProtocolGre
	//	*GlobalSpecType_ProtocolIcmp
	//	*GlobalSpecType_ProtocolIcmp6
	//	*GlobalSpecType_ProtocolIpv6
	//	*GlobalSpecType_ProtocolAll
	Protocol isGlobalSpecType_Protocol `protobuf_oneof:"protocol"`
	// Action
	//
	// x-displayName: "Action"
	// x-required
	// Action
	//
	// Types that are valid to be assigned to Action:
	//	*GlobalSpecType_ActionDeny
	//	*GlobalSpecType_ActionAllow
	Action isGlobalSpecType_Action `protobuf_oneof:"action"`
	// State
	//
	// x-displayName: "State"
	// x-required
	// State
	//
	// Types that are valid to be assigned to State:
	//	*GlobalSpecType_StateOff
	//	*GlobalSpecType_StateOn
	State isGlobalSpecType_State `protobuf_oneof:"state"`
	// Fragments
	//
	// x-displayName: "Fragments"
	// x-required
	// Fragments
	//
	// Types that are valid to be assigned to Fragments:
	//	*GlobalSpecType_FragmentsDeny
	//	*GlobalSpecType_FragmentsAllow
	Fragments isGlobalSpecType_Fragments `protobuf_oneof:"fragments"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_be50fe88872682e5, []int{0}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

type isGlobalSpecType_Version interface {
	isGlobalSpecType_Version()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_SourcePrefix interface {
	isGlobalSpecType_SourcePrefix()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_DestinationPrefix interface {
	isGlobalSpecType_DestinationPrefix()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_Protocol interface {
	isGlobalSpecType_Protocol()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_Action interface {
	isGlobalSpecType_Action()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_State interface {
	isGlobalSpecType_State()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_Fragments interface {
	isGlobalSpecType_Fragments()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_VersionIpv4 struct {
	VersionIpv4 *schema.Empty `protobuf:"bytes,2,opt,name=version_ipv4,json=versionIpv4,proto3,oneof" json:"version_ipv4,omitempty"`
}
type GlobalSpecType_VersionIpv6 struct {
	VersionIpv6 *schema.Empty `protobuf:"bytes,3,opt,name=version_ipv6,json=versionIpv6,proto3,oneof" json:"version_ipv6,omitempty"`
}
type GlobalSpecType_SourcePrefixSingle struct {
	SourcePrefixSingle string `protobuf:"bytes,5,opt,name=source_prefix_single,json=sourcePrefixSingle,proto3,oneof" json:"source_prefix_single,omitempty"`
}
type GlobalSpecType_SourcePrefixAll struct {
	SourcePrefixAll *schema.Empty `protobuf:"bytes,6,opt,name=source_prefix_all,json=sourcePrefixAll,proto3,oneof" json:"source_prefix_all,omitempty"`
}
type GlobalSpecType_DestinationPrefixSingle struct {
	DestinationPrefixSingle string `protobuf:"bytes,8,opt,name=destination_prefix_single,json=destinationPrefixSingle,proto3,oneof" json:"destination_prefix_single,omitempty"`
}
type GlobalSpecType_DestinationPrefixAll struct {
	DestinationPrefixAll *schema.Empty `protobuf:"bytes,9,opt,name=destination_prefix_all,json=destinationPrefixAll,proto3,oneof" json:"destination_prefix_all,omitempty"`
}
type GlobalSpecType_ProtocolUdp struct {
	ProtocolUdp *UDPProtocol `protobuf:"bytes,11,opt,name=protocol_udp,json=protocolUdp,proto3,oneof" json:"protocol_udp,omitempty"`
}
type GlobalSpecType_ProtocolTcp struct {
	ProtocolTcp *TCPProtocol `protobuf:"bytes,12,opt,name=protocol_tcp,json=protocolTcp,proto3,oneof" json:"protocol_tcp,omitempty"`
}
type GlobalSpecType_ProtocolAh struct {
	ProtocolAh *schema.Empty `protobuf:"bytes,13,opt,name=protocol_ah,json=protocolAh,proto3,oneof" json:"protocol_ah,omitempty"`
}
type GlobalSpecType_ProtocolEsp struct {
	ProtocolEsp *schema.Empty `protobuf:"bytes,14,opt,name=protocol_esp,json=protocolEsp,proto3,oneof" json:"protocol_esp,omitempty"`
}
type GlobalSpecType_ProtocolGre struct {
	ProtocolGre *schema.Empty `protobuf:"bytes,15,opt,name=protocol_gre,json=protocolGre,proto3,oneof" json:"protocol_gre,omitempty"`
}
type GlobalSpecType_ProtocolIcmp struct {
	ProtocolIcmp *ICMPProtocol `protobuf:"bytes,16,opt,name=protocol_icmp,json=protocolIcmp,proto3,oneof" json:"protocol_icmp,omitempty"`
}
type GlobalSpecType_ProtocolIcmp6 struct {
	ProtocolIcmp6 *ICMP6Protocol `protobuf:"bytes,17,opt,name=protocol_icmp6,json=protocolIcmp6,proto3,oneof" json:"protocol_icmp6,omitempty"`
}
type GlobalSpecType_ProtocolIpv6 struct {
	ProtocolIpv6 *schema.Empty `protobuf:"bytes,18,opt,name=protocol_ipv6,json=protocolIpv6,proto3,oneof" json:"protocol_ipv6,omitempty"`
}
type GlobalSpecType_ProtocolAll struct {
	ProtocolAll *schema.Empty `protobuf:"bytes,19,opt,name=protocol_all,json=protocolAll,proto3,oneof" json:"protocol_all,omitempty"`
}
type GlobalSpecType_ActionDeny struct {
	ActionDeny *schema.Empty `protobuf:"bytes,21,opt,name=action_deny,json=actionDeny,proto3,oneof" json:"action_deny,omitempty"`
}
type GlobalSpecType_ActionAllow struct {
	ActionAllow *schema.Empty `protobuf:"bytes,22,opt,name=action_allow,json=actionAllow,proto3,oneof" json:"action_allow,omitempty"`
}
type GlobalSpecType_StateOff struct {
	StateOff *schema.Empty `protobuf:"bytes,24,opt,name=state_off,json=stateOff,proto3,oneof" json:"state_off,omitempty"`
}
type GlobalSpecType_StateOn struct {
	StateOn *schema.Empty `protobuf:"bytes,25,opt,name=state_on,json=stateOn,proto3,oneof" json:"state_on,omitempty"`
}
type GlobalSpecType_FragmentsDeny struct {
	FragmentsDeny *schema.Empty `protobuf:"bytes,27,opt,name=fragments_deny,json=fragmentsDeny,proto3,oneof" json:"fragments_deny,omitempty"`
}
type GlobalSpecType_FragmentsAllow struct {
	FragmentsAllow *schema.Empty `protobuf:"bytes,28,opt,name=fragments_allow,json=fragmentsAllow,proto3,oneof" json:"fragments_allow,omitempty"`
}

func (*GlobalSpecType_VersionIpv4) isGlobalSpecType_Version()                       {}
func (*GlobalSpecType_VersionIpv6) isGlobalSpecType_Version()                       {}
func (*GlobalSpecType_SourcePrefixSingle) isGlobalSpecType_SourcePrefix()           {}
func (*GlobalSpecType_SourcePrefixAll) isGlobalSpecType_SourcePrefix()              {}
func (*GlobalSpecType_DestinationPrefixSingle) isGlobalSpecType_DestinationPrefix() {}
func (*GlobalSpecType_DestinationPrefixAll) isGlobalSpecType_DestinationPrefix()    {}
func (*GlobalSpecType_ProtocolUdp) isGlobalSpecType_Protocol()                      {}
func (*GlobalSpecType_ProtocolTcp) isGlobalSpecType_Protocol()                      {}
func (*GlobalSpecType_ProtocolAh) isGlobalSpecType_Protocol()                       {}
func (*GlobalSpecType_ProtocolEsp) isGlobalSpecType_Protocol()                      {}
func (*GlobalSpecType_ProtocolGre) isGlobalSpecType_Protocol()                      {}
func (*GlobalSpecType_ProtocolIcmp) isGlobalSpecType_Protocol()                     {}
func (*GlobalSpecType_ProtocolIcmp6) isGlobalSpecType_Protocol()                    {}
func (*GlobalSpecType_ProtocolIpv6) isGlobalSpecType_Protocol()                     {}
func (*GlobalSpecType_ProtocolAll) isGlobalSpecType_Protocol()                      {}
func (*GlobalSpecType_ActionDeny) isGlobalSpecType_Action()                         {}
func (*GlobalSpecType_ActionAllow) isGlobalSpecType_Action()                        {}
func (*GlobalSpecType_StateOff) isGlobalSpecType_State()                            {}
func (*GlobalSpecType_StateOn) isGlobalSpecType_State()                             {}
func (*GlobalSpecType_FragmentsDeny) isGlobalSpecType_Fragments()                   {}
func (*GlobalSpecType_FragmentsAllow) isGlobalSpecType_Fragments()                  {}

func (m *GlobalSpecType) GetVersion() isGlobalSpecType_Version {
	if m != nil {
		return m.Version
	}
	return nil
}
func (m *GlobalSpecType) GetSourcePrefix() isGlobalSpecType_SourcePrefix {
	if m != nil {
		return m.SourcePrefix
	}
	return nil
}
func (m *GlobalSpecType) GetDestinationPrefix() isGlobalSpecType_DestinationPrefix {
	if m != nil {
		return m.DestinationPrefix
	}
	return nil
}
func (m *GlobalSpecType) GetProtocol() isGlobalSpecType_Protocol {
	if m != nil {
		return m.Protocol
	}
	return nil
}
func (m *GlobalSpecType) GetAction() isGlobalSpecType_Action {
	if m != nil {
		return m.Action
	}
	return nil
}
func (m *GlobalSpecType) GetState() isGlobalSpecType_State {
	if m != nil {
		return m.State
	}
	return nil
}
func (m *GlobalSpecType) GetFragments() isGlobalSpecType_Fragments {
	if m != nil {
		return m.Fragments
	}
	return nil
}

func (m *GlobalSpecType) GetVersionIpv4() *schema.Empty {
	if x, ok := m.GetVersion().(*GlobalSpecType_VersionIpv4); ok {
		return x.VersionIpv4
	}
	return nil
}

func (m *GlobalSpecType) GetVersionIpv6() *schema.Empty {
	if x, ok := m.GetVersion().(*GlobalSpecType_VersionIpv6); ok {
		return x.VersionIpv6
	}
	return nil
}

func (m *GlobalSpecType) GetSourcePrefixSingle() string {
	if x, ok := m.GetSourcePrefix().(*GlobalSpecType_SourcePrefixSingle); ok {
		return x.SourcePrefixSingle
	}
	return ""
}

func (m *GlobalSpecType) GetSourcePrefixAll() *schema.Empty {
	if x, ok := m.GetSourcePrefix().(*GlobalSpecType_SourcePrefixAll); ok {
		return x.SourcePrefixAll
	}
	return nil
}

func (m *GlobalSpecType) GetDestinationPrefixSingle() string {
	if x, ok := m.GetDestinationPrefix().(*GlobalSpecType_DestinationPrefixSingle); ok {
		return x.DestinationPrefixSingle
	}
	return ""
}

func (m *GlobalSpecType) GetDestinationPrefixAll() *schema.Empty {
	if x, ok := m.GetDestinationPrefix().(*GlobalSpecType_DestinationPrefixAll); ok {
		return x.DestinationPrefixAll
	}
	return nil
}

func (m *GlobalSpecType) GetProtocolUdp() *UDPProtocol {
	if x, ok := m.GetProtocol().(*GlobalSpecType_ProtocolUdp); ok {
		return x.ProtocolUdp
	}
	return nil
}

func (m *GlobalSpecType) GetProtocolTcp() *TCPProtocol {
	if x, ok := m.GetProtocol().(*GlobalSpecType_ProtocolTcp); ok {
		return x.ProtocolTcp
	}
	return nil
}

func (m *GlobalSpecType) GetProtocolAh() *schema.Empty {
	if x, ok := m.GetProtocol().(*GlobalSpecType_ProtocolAh); ok {
		return x.ProtocolAh
	}
	return nil
}

func (m *GlobalSpecType) GetProtocolEsp() *schema.Empty {
	if x, ok := m.GetProtocol().(*GlobalSpecType_ProtocolEsp); ok {
		return x.ProtocolEsp
	}
	return nil
}

func (m *GlobalSpecType) GetProtocolGre() *schema.Empty {
	if x, ok := m.GetProtocol().(*GlobalSpecType_ProtocolGre); ok {
		return x.ProtocolGre
	}
	return nil
}

func (m *GlobalSpecType) GetProtocolIcmp() *ICMPProtocol {
	if x, ok := m.GetProtocol().(*GlobalSpecType_ProtocolIcmp); ok {
		return x.ProtocolIcmp
	}
	return nil
}

func (m *GlobalSpecType) GetProtocolIcmp6() *ICMP6Protocol {
	if x, ok := m.GetProtocol().(*GlobalSpecType_ProtocolIcmp6); ok {
		return x.ProtocolIcmp6
	}
	return nil
}

func (m *GlobalSpecType) GetProtocolIpv6() *schema.Empty {
	if x, ok := m.GetProtocol().(*GlobalSpecType_ProtocolIpv6); ok {
		return x.ProtocolIpv6
	}
	return nil
}

func (m *GlobalSpecType) GetProtocolAll() *schema.Empty {
	if x, ok := m.GetProtocol().(*GlobalSpecType_ProtocolAll); ok {
		return x.ProtocolAll
	}
	return nil
}

func (m *GlobalSpecType) GetActionDeny() *schema.Empty {
	if x, ok := m.GetAction().(*GlobalSpecType_ActionDeny); ok {
		return x.ActionDeny
	}
	return nil
}

func (m *GlobalSpecType) GetActionAllow() *schema.Empty {
	if x, ok := m.GetAction().(*GlobalSpecType_ActionAllow); ok {
		return x.ActionAllow
	}
	return nil
}

func (m *GlobalSpecType) GetStateOff() *schema.Empty {
	if x, ok := m.GetState().(*GlobalSpecType_StateOff); ok {
		return x.StateOff
	}
	return nil
}

func (m *GlobalSpecType) GetStateOn() *schema.Empty {
	if x, ok := m.GetState().(*GlobalSpecType_StateOn); ok {
		return x.StateOn
	}
	return nil
}

func (m *GlobalSpecType) GetFragmentsDeny() *schema.Empty {
	if x, ok := m.GetFragments().(*GlobalSpecType_FragmentsDeny); ok {
		return x.FragmentsDeny
	}
	return nil
}

func (m *GlobalSpecType) GetFragmentsAllow() *schema.Empty {
	if x, ok := m.GetFragments().(*GlobalSpecType_FragmentsAllow); ok {
		return x.FragmentsAllow
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GlobalSpecType_VersionIpv4)(nil),
		(*GlobalSpecType_VersionIpv6)(nil),
		(*GlobalSpecType_SourcePrefixSingle)(nil),
		(*GlobalSpecType_SourcePrefixAll)(nil),
		(*GlobalSpecType_DestinationPrefixSingle)(nil),
		(*GlobalSpecType_DestinationPrefixAll)(nil),
		(*GlobalSpecType_ProtocolUdp)(nil),
		(*GlobalSpecType_ProtocolTcp)(nil),
		(*GlobalSpecType_ProtocolAh)(nil),
		(*GlobalSpecType_ProtocolEsp)(nil),
		(*GlobalSpecType_ProtocolGre)(nil),
		(*GlobalSpecType_ProtocolIcmp)(nil),
		(*GlobalSpecType_ProtocolIcmp6)(nil),
		(*GlobalSpecType_ProtocolIpv6)(nil),
		(*GlobalSpecType_ProtocolAll)(nil),
		(*GlobalSpecType_ActionDeny)(nil),
		(*GlobalSpecType_ActionAllow)(nil),
		(*GlobalSpecType_StateOff)(nil),
		(*GlobalSpecType_StateOn)(nil),
		(*GlobalSpecType_FragmentsDeny)(nil),
		(*GlobalSpecType_FragmentsAllow)(nil),
	}
}

// DDoS transit Firewall Rule
//
// x-displayName: "Create DDoS transit Firewall Rule"
// Creates a DDoS transit Firewall Rule
type CreateSpecType struct {
	// Types that are valid to be assigned to Version:
	//	*CreateSpecType_VersionIpv4
	//	*CreateSpecType_VersionIpv6
	Version isCreateSpecType_Version `protobuf_oneof:"version"`
	// Types that are valid to be assigned to SourcePrefix:
	//	*CreateSpecType_SourcePrefixSingle
	//	*CreateSpecType_SourcePrefixAll
	SourcePrefix isCreateSpecType_SourcePrefix `protobuf_oneof:"source_prefix"`
	// Types that are valid to be assigned to DestinationPrefix:
	//	*CreateSpecType_DestinationPrefixSingle
	//	*CreateSpecType_DestinationPrefixAll
	DestinationPrefix isCreateSpecType_DestinationPrefix `protobuf_oneof:"destination_prefix"`
	// Types that are valid to be assigned to Protocol:
	//	*CreateSpecType_ProtocolUdp
	//	*CreateSpecType_ProtocolTcp
	//	*CreateSpecType_ProtocolAh
	//	*CreateSpecType_ProtocolEsp
	//	*CreateSpecType_ProtocolGre
	//	*CreateSpecType_ProtocolIcmp
	//	*CreateSpecType_ProtocolIcmp6
	//	*CreateSpecType_ProtocolIpv6
	//	*CreateSpecType_ProtocolAll
	Protocol isCreateSpecType_Protocol `protobuf_oneof:"protocol"`
	// Types that are valid to be assigned to Action:
	//	*CreateSpecType_ActionDeny
	//	*CreateSpecType_ActionAllow
	Action isCreateSpecType_Action `protobuf_oneof:"action"`
	// Types that are valid to be assigned to State:
	//	*CreateSpecType_StateOff
	//	*CreateSpecType_StateOn
	State isCreateSpecType_State `protobuf_oneof:"state"`
	// Types that are valid to be assigned to Fragments:
	//	*CreateSpecType_FragmentsDeny
	//	*CreateSpecType_FragmentsAllow
	Fragments isCreateSpecType_Fragments `protobuf_oneof:"fragments"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_be50fe88872682e5, []int{1}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

type isCreateSpecType_Version interface {
	isCreateSpecType_Version()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_SourcePrefix interface {
	isCreateSpecType_SourcePrefix()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_DestinationPrefix interface {
	isCreateSpecType_DestinationPrefix()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_Protocol interface {
	isCreateSpecType_Protocol()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_Action interface {
	isCreateSpecType_Action()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_State interface {
	isCreateSpecType_State()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_Fragments interface {
	isCreateSpecType_Fragments()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSpecType_VersionIpv4 struct {
	VersionIpv4 *schema.Empty `protobuf:"bytes,2,opt,name=version_ipv4,json=versionIpv4,proto3,oneof" json:"version_ipv4,omitempty"`
}
type CreateSpecType_VersionIpv6 struct {
	VersionIpv6 *schema.Empty `protobuf:"bytes,3,opt,name=version_ipv6,json=versionIpv6,proto3,oneof" json:"version_ipv6,omitempty"`
}
type CreateSpecType_SourcePrefixSingle struct {
	SourcePrefixSingle string `protobuf:"bytes,5,opt,name=source_prefix_single,json=sourcePrefixSingle,proto3,oneof" json:"source_prefix_single,omitempty"`
}
type CreateSpecType_SourcePrefixAll struct {
	SourcePrefixAll *schema.Empty `protobuf:"bytes,6,opt,name=source_prefix_all,json=sourcePrefixAll,proto3,oneof" json:"source_prefix_all,omitempty"`
}
type CreateSpecType_DestinationPrefixSingle struct {
	DestinationPrefixSingle string `protobuf:"bytes,8,opt,name=destination_prefix_single,json=destinationPrefixSingle,proto3,oneof" json:"destination_prefix_single,omitempty"`
}
type CreateSpecType_DestinationPrefixAll struct {
	DestinationPrefixAll *schema.Empty `protobuf:"bytes,9,opt,name=destination_prefix_all,json=destinationPrefixAll,proto3,oneof" json:"destination_prefix_all,omitempty"`
}
type CreateSpecType_ProtocolUdp struct {
	ProtocolUdp *UDPProtocol `protobuf:"bytes,11,opt,name=protocol_udp,json=protocolUdp,proto3,oneof" json:"protocol_udp,omitempty"`
}
type CreateSpecType_ProtocolTcp struct {
	ProtocolTcp *TCPProtocol `protobuf:"bytes,12,opt,name=protocol_tcp,json=protocolTcp,proto3,oneof" json:"protocol_tcp,omitempty"`
}
type CreateSpecType_ProtocolAh struct {
	ProtocolAh *schema.Empty `protobuf:"bytes,13,opt,name=protocol_ah,json=protocolAh,proto3,oneof" json:"protocol_ah,omitempty"`
}
type CreateSpecType_ProtocolEsp struct {
	ProtocolEsp *schema.Empty `protobuf:"bytes,14,opt,name=protocol_esp,json=protocolEsp,proto3,oneof" json:"protocol_esp,omitempty"`
}
type CreateSpecType_ProtocolGre struct {
	ProtocolGre *schema.Empty `protobuf:"bytes,15,opt,name=protocol_gre,json=protocolGre,proto3,oneof" json:"protocol_gre,omitempty"`
}
type CreateSpecType_ProtocolIcmp struct {
	ProtocolIcmp *ICMPProtocol `protobuf:"bytes,16,opt,name=protocol_icmp,json=protocolIcmp,proto3,oneof" json:"protocol_icmp,omitempty"`
}
type CreateSpecType_ProtocolIcmp6 struct {
	ProtocolIcmp6 *ICMP6Protocol `protobuf:"bytes,17,opt,name=protocol_icmp6,json=protocolIcmp6,proto3,oneof" json:"protocol_icmp6,omitempty"`
}
type CreateSpecType_ProtocolIpv6 struct {
	ProtocolIpv6 *schema.Empty `protobuf:"bytes,18,opt,name=protocol_ipv6,json=protocolIpv6,proto3,oneof" json:"protocol_ipv6,omitempty"`
}
type CreateSpecType_ProtocolAll struct {
	ProtocolAll *schema.Empty `protobuf:"bytes,19,opt,name=protocol_all,json=protocolAll,proto3,oneof" json:"protocol_all,omitempty"`
}
type CreateSpecType_ActionDeny struct {
	ActionDeny *schema.Empty `protobuf:"bytes,21,opt,name=action_deny,json=actionDeny,proto3,oneof" json:"action_deny,omitempty"`
}
type CreateSpecType_ActionAllow struct {
	ActionAllow *schema.Empty `protobuf:"bytes,22,opt,name=action_allow,json=actionAllow,proto3,oneof" json:"action_allow,omitempty"`
}
type CreateSpecType_StateOff struct {
	StateOff *schema.Empty `protobuf:"bytes,24,opt,name=state_off,json=stateOff,proto3,oneof" json:"state_off,omitempty"`
}
type CreateSpecType_StateOn struct {
	StateOn *schema.Empty `protobuf:"bytes,25,opt,name=state_on,json=stateOn,proto3,oneof" json:"state_on,omitempty"`
}
type CreateSpecType_FragmentsDeny struct {
	FragmentsDeny *schema.Empty `protobuf:"bytes,27,opt,name=fragments_deny,json=fragmentsDeny,proto3,oneof" json:"fragments_deny,omitempty"`
}
type CreateSpecType_FragmentsAllow struct {
	FragmentsAllow *schema.Empty `protobuf:"bytes,28,opt,name=fragments_allow,json=fragmentsAllow,proto3,oneof" json:"fragments_allow,omitempty"`
}

func (*CreateSpecType_VersionIpv4) isCreateSpecType_Version()                       {}
func (*CreateSpecType_VersionIpv6) isCreateSpecType_Version()                       {}
func (*CreateSpecType_SourcePrefixSingle) isCreateSpecType_SourcePrefix()           {}
func (*CreateSpecType_SourcePrefixAll) isCreateSpecType_SourcePrefix()              {}
func (*CreateSpecType_DestinationPrefixSingle) isCreateSpecType_DestinationPrefix() {}
func (*CreateSpecType_DestinationPrefixAll) isCreateSpecType_DestinationPrefix()    {}
func (*CreateSpecType_ProtocolUdp) isCreateSpecType_Protocol()                      {}
func (*CreateSpecType_ProtocolTcp) isCreateSpecType_Protocol()                      {}
func (*CreateSpecType_ProtocolAh) isCreateSpecType_Protocol()                       {}
func (*CreateSpecType_ProtocolEsp) isCreateSpecType_Protocol()                      {}
func (*CreateSpecType_ProtocolGre) isCreateSpecType_Protocol()                      {}
func (*CreateSpecType_ProtocolIcmp) isCreateSpecType_Protocol()                     {}
func (*CreateSpecType_ProtocolIcmp6) isCreateSpecType_Protocol()                    {}
func (*CreateSpecType_ProtocolIpv6) isCreateSpecType_Protocol()                     {}
func (*CreateSpecType_ProtocolAll) isCreateSpecType_Protocol()                      {}
func (*CreateSpecType_ActionDeny) isCreateSpecType_Action()                         {}
func (*CreateSpecType_ActionAllow) isCreateSpecType_Action()                        {}
func (*CreateSpecType_StateOff) isCreateSpecType_State()                            {}
func (*CreateSpecType_StateOn) isCreateSpecType_State()                             {}
func (*CreateSpecType_FragmentsDeny) isCreateSpecType_Fragments()                   {}
func (*CreateSpecType_FragmentsAllow) isCreateSpecType_Fragments()                  {}

func (m *CreateSpecType) GetVersion() isCreateSpecType_Version {
	if m != nil {
		return m.Version
	}
	return nil
}
func (m *CreateSpecType) GetSourcePrefix() isCreateSpecType_SourcePrefix {
	if m != nil {
		return m.SourcePrefix
	}
	return nil
}
func (m *CreateSpecType) GetDestinationPrefix() isCreateSpecType_DestinationPrefix {
	if m != nil {
		return m.DestinationPrefix
	}
	return nil
}
func (m *CreateSpecType) GetProtocol() isCreateSpecType_Protocol {
	if m != nil {
		return m.Protocol
	}
	return nil
}
func (m *CreateSpecType) GetAction() isCreateSpecType_Action {
	if m != nil {
		return m.Action
	}
	return nil
}
func (m *CreateSpecType) GetState() isCreateSpecType_State {
	if m != nil {
		return m.State
	}
	return nil
}
func (m *CreateSpecType) GetFragments() isCreateSpecType_Fragments {
	if m != nil {
		return m.Fragments
	}
	return nil
}

func (m *CreateSpecType) GetVersionIpv4() *schema.Empty {
	if x, ok := m.GetVersion().(*CreateSpecType_VersionIpv4); ok {
		return x.VersionIpv4
	}
	return nil
}

func (m *CreateSpecType) GetVersionIpv6() *schema.Empty {
	if x, ok := m.GetVersion().(*CreateSpecType_VersionIpv6); ok {
		return x.VersionIpv6
	}
	return nil
}

func (m *CreateSpecType) GetSourcePrefixSingle() string {
	if x, ok := m.GetSourcePrefix().(*CreateSpecType_SourcePrefixSingle); ok {
		return x.SourcePrefixSingle
	}
	return ""
}

func (m *CreateSpecType) GetSourcePrefixAll() *schema.Empty {
	if x, ok := m.GetSourcePrefix().(*CreateSpecType_SourcePrefixAll); ok {
		return x.SourcePrefixAll
	}
	return nil
}

func (m *CreateSpecType) GetDestinationPrefixSingle() string {
	if x, ok := m.GetDestinationPrefix().(*CreateSpecType_DestinationPrefixSingle); ok {
		return x.DestinationPrefixSingle
	}
	return ""
}

func (m *CreateSpecType) GetDestinationPrefixAll() *schema.Empty {
	if x, ok := m.GetDestinationPrefix().(*CreateSpecType_DestinationPrefixAll); ok {
		return x.DestinationPrefixAll
	}
	return nil
}

func (m *CreateSpecType) GetProtocolUdp() *UDPProtocol {
	if x, ok := m.GetProtocol().(*CreateSpecType_ProtocolUdp); ok {
		return x.ProtocolUdp
	}
	return nil
}

func (m *CreateSpecType) GetProtocolTcp() *TCPProtocol {
	if x, ok := m.GetProtocol().(*CreateSpecType_ProtocolTcp); ok {
		return x.ProtocolTcp
	}
	return nil
}

func (m *CreateSpecType) GetProtocolAh() *schema.Empty {
	if x, ok := m.GetProtocol().(*CreateSpecType_ProtocolAh); ok {
		return x.ProtocolAh
	}
	return nil
}

func (m *CreateSpecType) GetProtocolEsp() *schema.Empty {
	if x, ok := m.GetProtocol().(*CreateSpecType_ProtocolEsp); ok {
		return x.ProtocolEsp
	}
	return nil
}

func (m *CreateSpecType) GetProtocolGre() *schema.Empty {
	if x, ok := m.GetProtocol().(*CreateSpecType_ProtocolGre); ok {
		return x.ProtocolGre
	}
	return nil
}

func (m *CreateSpecType) GetProtocolIcmp() *ICMPProtocol {
	if x, ok := m.GetProtocol().(*CreateSpecType_ProtocolIcmp); ok {
		return x.ProtocolIcmp
	}
	return nil
}

func (m *CreateSpecType) GetProtocolIcmp6() *ICMP6Protocol {
	if x, ok := m.GetProtocol().(*CreateSpecType_ProtocolIcmp6); ok {
		return x.ProtocolIcmp6
	}
	return nil
}

func (m *CreateSpecType) GetProtocolIpv6() *schema.Empty {
	if x, ok := m.GetProtocol().(*CreateSpecType_ProtocolIpv6); ok {
		return x.ProtocolIpv6
	}
	return nil
}

func (m *CreateSpecType) GetProtocolAll() *schema.Empty {
	if x, ok := m.GetProtocol().(*CreateSpecType_ProtocolAll); ok {
		return x.ProtocolAll
	}
	return nil
}

func (m *CreateSpecType) GetActionDeny() *schema.Empty {
	if x, ok := m.GetAction().(*CreateSpecType_ActionDeny); ok {
		return x.ActionDeny
	}
	return nil
}

func (m *CreateSpecType) GetActionAllow() *schema.Empty {
	if x, ok := m.GetAction().(*CreateSpecType_ActionAllow); ok {
		return x.ActionAllow
	}
	return nil
}

func (m *CreateSpecType) GetStateOff() *schema.Empty {
	if x, ok := m.GetState().(*CreateSpecType_StateOff); ok {
		return x.StateOff
	}
	return nil
}

func (m *CreateSpecType) GetStateOn() *schema.Empty {
	if x, ok := m.GetState().(*CreateSpecType_StateOn); ok {
		return x.StateOn
	}
	return nil
}

func (m *CreateSpecType) GetFragmentsDeny() *schema.Empty {
	if x, ok := m.GetFragments().(*CreateSpecType_FragmentsDeny); ok {
		return x.FragmentsDeny
	}
	return nil
}

func (m *CreateSpecType) GetFragmentsAllow() *schema.Empty {
	if x, ok := m.GetFragments().(*CreateSpecType_FragmentsAllow); ok {
		return x.FragmentsAllow
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CreateSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CreateSpecType_VersionIpv4)(nil),
		(*CreateSpecType_VersionIpv6)(nil),
		(*CreateSpecType_SourcePrefixSingle)(nil),
		(*CreateSpecType_SourcePrefixAll)(nil),
		(*CreateSpecType_DestinationPrefixSingle)(nil),
		(*CreateSpecType_DestinationPrefixAll)(nil),
		(*CreateSpecType_ProtocolUdp)(nil),
		(*CreateSpecType_ProtocolTcp)(nil),
		(*CreateSpecType_ProtocolAh)(nil),
		(*CreateSpecType_ProtocolEsp)(nil),
		(*CreateSpecType_ProtocolGre)(nil),
		(*CreateSpecType_ProtocolIcmp)(nil),
		(*CreateSpecType_ProtocolIcmp6)(nil),
		(*CreateSpecType_ProtocolIpv6)(nil),
		(*CreateSpecType_ProtocolAll)(nil),
		(*CreateSpecType_ActionDeny)(nil),
		(*CreateSpecType_ActionAllow)(nil),
		(*CreateSpecType_StateOff)(nil),
		(*CreateSpecType_StateOn)(nil),
		(*CreateSpecType_FragmentsDeny)(nil),
		(*CreateSpecType_FragmentsAllow)(nil),
	}
}

// DDoS transit Firewall Rule
//
// x-displayName: "Replace DDoS transit Firewall Rule"
// Amends a DDoS transit Firewall Rule
type ReplaceSpecType struct {
	// Types that are valid to be assigned to Version:
	//	*ReplaceSpecType_VersionIpv4
	//	*ReplaceSpecType_VersionIpv6
	Version isReplaceSpecType_Version `protobuf_oneof:"version"`
	// Types that are valid to be assigned to SourcePrefix:
	//	*ReplaceSpecType_SourcePrefixSingle
	//	*ReplaceSpecType_SourcePrefixAll
	SourcePrefix isReplaceSpecType_SourcePrefix `protobuf_oneof:"source_prefix"`
	// Types that are valid to be assigned to DestinationPrefix:
	//	*ReplaceSpecType_DestinationPrefixSingle
	//	*ReplaceSpecType_DestinationPrefixAll
	DestinationPrefix isReplaceSpecType_DestinationPrefix `protobuf_oneof:"destination_prefix"`
	// Types that are valid to be assigned to Protocol:
	//	*ReplaceSpecType_ProtocolUdp
	//	*ReplaceSpecType_ProtocolTcp
	//	*ReplaceSpecType_ProtocolAh
	//	*ReplaceSpecType_ProtocolEsp
	//	*ReplaceSpecType_ProtocolGre
	//	*ReplaceSpecType_ProtocolIcmp
	//	*ReplaceSpecType_ProtocolIcmp6
	//	*ReplaceSpecType_ProtocolIpv6
	//	*ReplaceSpecType_ProtocolAll
	Protocol isReplaceSpecType_Protocol `protobuf_oneof:"protocol"`
	// Types that are valid to be assigned to Action:
	//	*ReplaceSpecType_ActionDeny
	//	*ReplaceSpecType_ActionAllow
	Action isReplaceSpecType_Action `protobuf_oneof:"action"`
	// Types that are valid to be assigned to State:
	//	*ReplaceSpecType_StateOff
	//	*ReplaceSpecType_StateOn
	State isReplaceSpecType_State `protobuf_oneof:"state"`
	// Types that are valid to be assigned to Fragments:
	//	*ReplaceSpecType_FragmentsDeny
	//	*ReplaceSpecType_FragmentsAllow
	Fragments isReplaceSpecType_Fragments `protobuf_oneof:"fragments"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_be50fe88872682e5, []int{2}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

type isReplaceSpecType_Version interface {
	isReplaceSpecType_Version()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_SourcePrefix interface {
	isReplaceSpecType_SourcePrefix()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_DestinationPrefix interface {
	isReplaceSpecType_DestinationPrefix()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_Protocol interface {
	isReplaceSpecType_Protocol()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_Action interface {
	isReplaceSpecType_Action()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_State interface {
	isReplaceSpecType_State()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_Fragments interface {
	isReplaceSpecType_Fragments()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplaceSpecType_VersionIpv4 struct {
	VersionIpv4 *schema.Empty `protobuf:"bytes,2,opt,name=version_ipv4,json=versionIpv4,proto3,oneof" json:"version_ipv4,omitempty"`
}
type ReplaceSpecType_VersionIpv6 struct {
	VersionIpv6 *schema.Empty `protobuf:"bytes,3,opt,name=version_ipv6,json=versionIpv6,proto3,oneof" json:"version_ipv6,omitempty"`
}
type ReplaceSpecType_SourcePrefixSingle struct {
	SourcePrefixSingle string `protobuf:"bytes,5,opt,name=source_prefix_single,json=sourcePrefixSingle,proto3,oneof" json:"source_prefix_single,omitempty"`
}
type ReplaceSpecType_SourcePrefixAll struct {
	SourcePrefixAll *schema.Empty `protobuf:"bytes,6,opt,name=source_prefix_all,json=sourcePrefixAll,proto3,oneof" json:"source_prefix_all,omitempty"`
}
type ReplaceSpecType_DestinationPrefixSingle struct {
	DestinationPrefixSingle string `protobuf:"bytes,8,opt,name=destination_prefix_single,json=destinationPrefixSingle,proto3,oneof" json:"destination_prefix_single,omitempty"`
}
type ReplaceSpecType_DestinationPrefixAll struct {
	DestinationPrefixAll *schema.Empty `protobuf:"bytes,9,opt,name=destination_prefix_all,json=destinationPrefixAll,proto3,oneof" json:"destination_prefix_all,omitempty"`
}
type ReplaceSpecType_ProtocolUdp struct {
	ProtocolUdp *UDPProtocol `protobuf:"bytes,11,opt,name=protocol_udp,json=protocolUdp,proto3,oneof" json:"protocol_udp,omitempty"`
}
type ReplaceSpecType_ProtocolTcp struct {
	ProtocolTcp *TCPProtocol `protobuf:"bytes,12,opt,name=protocol_tcp,json=protocolTcp,proto3,oneof" json:"protocol_tcp,omitempty"`
}
type ReplaceSpecType_ProtocolAh struct {
	ProtocolAh *schema.Empty `protobuf:"bytes,13,opt,name=protocol_ah,json=protocolAh,proto3,oneof" json:"protocol_ah,omitempty"`
}
type ReplaceSpecType_ProtocolEsp struct {
	ProtocolEsp *schema.Empty `protobuf:"bytes,14,opt,name=protocol_esp,json=protocolEsp,proto3,oneof" json:"protocol_esp,omitempty"`
}
type ReplaceSpecType_ProtocolGre struct {
	ProtocolGre *schema.Empty `protobuf:"bytes,15,opt,name=protocol_gre,json=protocolGre,proto3,oneof" json:"protocol_gre,omitempty"`
}
type ReplaceSpecType_ProtocolIcmp struct {
	ProtocolIcmp *ICMPProtocol `protobuf:"bytes,16,opt,name=protocol_icmp,json=protocolIcmp,proto3,oneof" json:"protocol_icmp,omitempty"`
}
type ReplaceSpecType_ProtocolIcmp6 struct {
	ProtocolIcmp6 *ICMP6Protocol `protobuf:"bytes,17,opt,name=protocol_icmp6,json=protocolIcmp6,proto3,oneof" json:"protocol_icmp6,omitempty"`
}
type ReplaceSpecType_ProtocolIpv6 struct {
	ProtocolIpv6 *schema.Empty `protobuf:"bytes,18,opt,name=protocol_ipv6,json=protocolIpv6,proto3,oneof" json:"protocol_ipv6,omitempty"`
}
type ReplaceSpecType_ProtocolAll struct {
	ProtocolAll *schema.Empty `protobuf:"bytes,19,opt,name=protocol_all,json=protocolAll,proto3,oneof" json:"protocol_all,omitempty"`
}
type ReplaceSpecType_ActionDeny struct {
	ActionDeny *schema.Empty `protobuf:"bytes,21,opt,name=action_deny,json=actionDeny,proto3,oneof" json:"action_deny,omitempty"`
}
type ReplaceSpecType_ActionAllow struct {
	ActionAllow *schema.Empty `protobuf:"bytes,22,opt,name=action_allow,json=actionAllow,proto3,oneof" json:"action_allow,omitempty"`
}
type ReplaceSpecType_StateOff struct {
	StateOff *schema.Empty `protobuf:"bytes,24,opt,name=state_off,json=stateOff,proto3,oneof" json:"state_off,omitempty"`
}
type ReplaceSpecType_StateOn struct {
	StateOn *schema.Empty `protobuf:"bytes,25,opt,name=state_on,json=stateOn,proto3,oneof" json:"state_on,omitempty"`
}
type ReplaceSpecType_FragmentsDeny struct {
	FragmentsDeny *schema.Empty `protobuf:"bytes,27,opt,name=fragments_deny,json=fragmentsDeny,proto3,oneof" json:"fragments_deny,omitempty"`
}
type ReplaceSpecType_FragmentsAllow struct {
	FragmentsAllow *schema.Empty `protobuf:"bytes,28,opt,name=fragments_allow,json=fragmentsAllow,proto3,oneof" json:"fragments_allow,omitempty"`
}

func (*ReplaceSpecType_VersionIpv4) isReplaceSpecType_Version()                       {}
func (*ReplaceSpecType_VersionIpv6) isReplaceSpecType_Version()                       {}
func (*ReplaceSpecType_SourcePrefixSingle) isReplaceSpecType_SourcePrefix()           {}
func (*ReplaceSpecType_SourcePrefixAll) isReplaceSpecType_SourcePrefix()              {}
func (*ReplaceSpecType_DestinationPrefixSingle) isReplaceSpecType_DestinationPrefix() {}
func (*ReplaceSpecType_DestinationPrefixAll) isReplaceSpecType_DestinationPrefix()    {}
func (*ReplaceSpecType_ProtocolUdp) isReplaceSpecType_Protocol()                      {}
func (*ReplaceSpecType_ProtocolTcp) isReplaceSpecType_Protocol()                      {}
func (*ReplaceSpecType_ProtocolAh) isReplaceSpecType_Protocol()                       {}
func (*ReplaceSpecType_ProtocolEsp) isReplaceSpecType_Protocol()                      {}
func (*ReplaceSpecType_ProtocolGre) isReplaceSpecType_Protocol()                      {}
func (*ReplaceSpecType_ProtocolIcmp) isReplaceSpecType_Protocol()                     {}
func (*ReplaceSpecType_ProtocolIcmp6) isReplaceSpecType_Protocol()                    {}
func (*ReplaceSpecType_ProtocolIpv6) isReplaceSpecType_Protocol()                     {}
func (*ReplaceSpecType_ProtocolAll) isReplaceSpecType_Protocol()                      {}
func (*ReplaceSpecType_ActionDeny) isReplaceSpecType_Action()                         {}
func (*ReplaceSpecType_ActionAllow) isReplaceSpecType_Action()                        {}
func (*ReplaceSpecType_StateOff) isReplaceSpecType_State()                            {}
func (*ReplaceSpecType_StateOn) isReplaceSpecType_State()                             {}
func (*ReplaceSpecType_FragmentsDeny) isReplaceSpecType_Fragments()                   {}
func (*ReplaceSpecType_FragmentsAllow) isReplaceSpecType_Fragments()                  {}

func (m *ReplaceSpecType) GetVersion() isReplaceSpecType_Version {
	if m != nil {
		return m.Version
	}
	return nil
}
func (m *ReplaceSpecType) GetSourcePrefix() isReplaceSpecType_SourcePrefix {
	if m != nil {
		return m.SourcePrefix
	}
	return nil
}
func (m *ReplaceSpecType) GetDestinationPrefix() isReplaceSpecType_DestinationPrefix {
	if m != nil {
		return m.DestinationPrefix
	}
	return nil
}
func (m *ReplaceSpecType) GetProtocol() isReplaceSpecType_Protocol {
	if m != nil {
		return m.Protocol
	}
	return nil
}
func (m *ReplaceSpecType) GetAction() isReplaceSpecType_Action {
	if m != nil {
		return m.Action
	}
	return nil
}
func (m *ReplaceSpecType) GetState() isReplaceSpecType_State {
	if m != nil {
		return m.State
	}
	return nil
}
func (m *ReplaceSpecType) GetFragments() isReplaceSpecType_Fragments {
	if m != nil {
		return m.Fragments
	}
	return nil
}

func (m *ReplaceSpecType) GetVersionIpv4() *schema.Empty {
	if x, ok := m.GetVersion().(*ReplaceSpecType_VersionIpv4); ok {
		return x.VersionIpv4
	}
	return nil
}

func (m *ReplaceSpecType) GetVersionIpv6() *schema.Empty {
	if x, ok := m.GetVersion().(*ReplaceSpecType_VersionIpv6); ok {
		return x.VersionIpv6
	}
	return nil
}

func (m *ReplaceSpecType) GetSourcePrefixSingle() string {
	if x, ok := m.GetSourcePrefix().(*ReplaceSpecType_SourcePrefixSingle); ok {
		return x.SourcePrefixSingle
	}
	return ""
}

func (m *ReplaceSpecType) GetSourcePrefixAll() *schema.Empty {
	if x, ok := m.GetSourcePrefix().(*ReplaceSpecType_SourcePrefixAll); ok {
		return x.SourcePrefixAll
	}
	return nil
}

func (m *ReplaceSpecType) GetDestinationPrefixSingle() string {
	if x, ok := m.GetDestinationPrefix().(*ReplaceSpecType_DestinationPrefixSingle); ok {
		return x.DestinationPrefixSingle
	}
	return ""
}

func (m *ReplaceSpecType) GetDestinationPrefixAll() *schema.Empty {
	if x, ok := m.GetDestinationPrefix().(*ReplaceSpecType_DestinationPrefixAll); ok {
		return x.DestinationPrefixAll
	}
	return nil
}

func (m *ReplaceSpecType) GetProtocolUdp() *UDPProtocol {
	if x, ok := m.GetProtocol().(*ReplaceSpecType_ProtocolUdp); ok {
		return x.ProtocolUdp
	}
	return nil
}

func (m *ReplaceSpecType) GetProtocolTcp() *TCPProtocol {
	if x, ok := m.GetProtocol().(*ReplaceSpecType_ProtocolTcp); ok {
		return x.ProtocolTcp
	}
	return nil
}

func (m *ReplaceSpecType) GetProtocolAh() *schema.Empty {
	if x, ok := m.GetProtocol().(*ReplaceSpecType_ProtocolAh); ok {
		return x.ProtocolAh
	}
	return nil
}

func (m *ReplaceSpecType) GetProtocolEsp() *schema.Empty {
	if x, ok := m.GetProtocol().(*ReplaceSpecType_ProtocolEsp); ok {
		return x.ProtocolEsp
	}
	return nil
}

func (m *ReplaceSpecType) GetProtocolGre() *schema.Empty {
	if x, ok := m.GetProtocol().(*ReplaceSpecType_ProtocolGre); ok {
		return x.ProtocolGre
	}
	return nil
}

func (m *ReplaceSpecType) GetProtocolIcmp() *ICMPProtocol {
	if x, ok := m.GetProtocol().(*ReplaceSpecType_ProtocolIcmp); ok {
		return x.ProtocolIcmp
	}
	return nil
}

func (m *ReplaceSpecType) GetProtocolIcmp6() *ICMP6Protocol {
	if x, ok := m.GetProtocol().(*ReplaceSpecType_ProtocolIcmp6); ok {
		return x.ProtocolIcmp6
	}
	return nil
}

func (m *ReplaceSpecType) GetProtocolIpv6() *schema.Empty {
	if x, ok := m.GetProtocol().(*ReplaceSpecType_ProtocolIpv6); ok {
		return x.ProtocolIpv6
	}
	return nil
}

func (m *ReplaceSpecType) GetProtocolAll() *schema.Empty {
	if x, ok := m.GetProtocol().(*ReplaceSpecType_ProtocolAll); ok {
		return x.ProtocolAll
	}
	return nil
}

func (m *ReplaceSpecType) GetActionDeny() *schema.Empty {
	if x, ok := m.GetAction().(*ReplaceSpecType_ActionDeny); ok {
		return x.ActionDeny
	}
	return nil
}

func (m *ReplaceSpecType) GetActionAllow() *schema.Empty {
	if x, ok := m.GetAction().(*ReplaceSpecType_ActionAllow); ok {
		return x.ActionAllow
	}
	return nil
}

func (m *ReplaceSpecType) GetStateOff() *schema.Empty {
	if x, ok := m.GetState().(*ReplaceSpecType_StateOff); ok {
		return x.StateOff
	}
	return nil
}

func (m *ReplaceSpecType) GetStateOn() *schema.Empty {
	if x, ok := m.GetState().(*ReplaceSpecType_StateOn); ok {
		return x.StateOn
	}
	return nil
}

func (m *ReplaceSpecType) GetFragmentsDeny() *schema.Empty {
	if x, ok := m.GetFragments().(*ReplaceSpecType_FragmentsDeny); ok {
		return x.FragmentsDeny
	}
	return nil
}

func (m *ReplaceSpecType) GetFragmentsAllow() *schema.Empty {
	if x, ok := m.GetFragments().(*ReplaceSpecType_FragmentsAllow); ok {
		return x.FragmentsAllow
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ReplaceSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ReplaceSpecType_VersionIpv4)(nil),
		(*ReplaceSpecType_VersionIpv6)(nil),
		(*ReplaceSpecType_SourcePrefixSingle)(nil),
		(*ReplaceSpecType_SourcePrefixAll)(nil),
		(*ReplaceSpecType_DestinationPrefixSingle)(nil),
		(*ReplaceSpecType_DestinationPrefixAll)(nil),
		(*ReplaceSpecType_ProtocolUdp)(nil),
		(*ReplaceSpecType_ProtocolTcp)(nil),
		(*ReplaceSpecType_ProtocolAh)(nil),
		(*ReplaceSpecType_ProtocolEsp)(nil),
		(*ReplaceSpecType_ProtocolGre)(nil),
		(*ReplaceSpecType_ProtocolIcmp)(nil),
		(*ReplaceSpecType_ProtocolIcmp6)(nil),
		(*ReplaceSpecType_ProtocolIpv6)(nil),
		(*ReplaceSpecType_ProtocolAll)(nil),
		(*ReplaceSpecType_ActionDeny)(nil),
		(*ReplaceSpecType_ActionAllow)(nil),
		(*ReplaceSpecType_StateOff)(nil),
		(*ReplaceSpecType_StateOn)(nil),
		(*ReplaceSpecType_FragmentsDeny)(nil),
		(*ReplaceSpecType_FragmentsAllow)(nil),
	}
}

// Get DDoS transit Firewall Rule
//
// x-displayName: "Get Infraprotect Firewall Rule"
// Get DDoS transit Firewall Rule
type GetSpecType struct {
	// Types that are valid to be assigned to Version:
	//	*GetSpecType_VersionIpv4
	//	*GetSpecType_VersionIpv6
	Version isGetSpecType_Version `protobuf_oneof:"version"`
	// Types that are valid to be assigned to SourcePrefix:
	//	*GetSpecType_SourcePrefixSingle
	//	*GetSpecType_SourcePrefixAll
	SourcePrefix isGetSpecType_SourcePrefix `protobuf_oneof:"source_prefix"`
	// Types that are valid to be assigned to DestinationPrefix:
	//	*GetSpecType_DestinationPrefixSingle
	//	*GetSpecType_DestinationPrefixAll
	DestinationPrefix isGetSpecType_DestinationPrefix `protobuf_oneof:"destination_prefix"`
	// Types that are valid to be assigned to Protocol:
	//	*GetSpecType_ProtocolUdp
	//	*GetSpecType_ProtocolTcp
	//	*GetSpecType_ProtocolAh
	//	*GetSpecType_ProtocolEsp
	//	*GetSpecType_ProtocolGre
	//	*GetSpecType_ProtocolIcmp
	//	*GetSpecType_ProtocolIcmp6
	//	*GetSpecType_ProtocolIpv6
	//	*GetSpecType_ProtocolAll
	Protocol isGetSpecType_Protocol `protobuf_oneof:"protocol"`
	// Types that are valid to be assigned to Action:
	//	*GetSpecType_ActionDeny
	//	*GetSpecType_ActionAllow
	Action isGetSpecType_Action `protobuf_oneof:"action"`
	// Types that are valid to be assigned to State:
	//	*GetSpecType_StateOff
	//	*GetSpecType_StateOn
	State isGetSpecType_State `protobuf_oneof:"state"`
	// Types that are valid to be assigned to Fragments:
	//	*GetSpecType_FragmentsDeny
	//	*GetSpecType_FragmentsAllow
	Fragments isGetSpecType_Fragments `protobuf_oneof:"fragments"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_be50fe88872682e5, []int{3}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

type isGetSpecType_Version interface {
	isGetSpecType_Version()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_SourcePrefix interface {
	isGetSpecType_SourcePrefix()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_DestinationPrefix interface {
	isGetSpecType_DestinationPrefix()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_Protocol interface {
	isGetSpecType_Protocol()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_Action interface {
	isGetSpecType_Action()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_State interface {
	isGetSpecType_State()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_Fragments interface {
	isGetSpecType_Fragments()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_VersionIpv4 struct {
	VersionIpv4 *schema.Empty `protobuf:"bytes,2,opt,name=version_ipv4,json=versionIpv4,proto3,oneof" json:"version_ipv4,omitempty"`
}
type GetSpecType_VersionIpv6 struct {
	VersionIpv6 *schema.Empty `protobuf:"bytes,3,opt,name=version_ipv6,json=versionIpv6,proto3,oneof" json:"version_ipv6,omitempty"`
}
type GetSpecType_SourcePrefixSingle struct {
	SourcePrefixSingle string `protobuf:"bytes,5,opt,name=source_prefix_single,json=sourcePrefixSingle,proto3,oneof" json:"source_prefix_single,omitempty"`
}
type GetSpecType_SourcePrefixAll struct {
	SourcePrefixAll *schema.Empty `protobuf:"bytes,6,opt,name=source_prefix_all,json=sourcePrefixAll,proto3,oneof" json:"source_prefix_all,omitempty"`
}
type GetSpecType_DestinationPrefixSingle struct {
	DestinationPrefixSingle string `protobuf:"bytes,8,opt,name=destination_prefix_single,json=destinationPrefixSingle,proto3,oneof" json:"destination_prefix_single,omitempty"`
}
type GetSpecType_DestinationPrefixAll struct {
	DestinationPrefixAll *schema.Empty `protobuf:"bytes,9,opt,name=destination_prefix_all,json=destinationPrefixAll,proto3,oneof" json:"destination_prefix_all,omitempty"`
}
type GetSpecType_ProtocolUdp struct {
	ProtocolUdp *UDPProtocol `protobuf:"bytes,11,opt,name=protocol_udp,json=protocolUdp,proto3,oneof" json:"protocol_udp,omitempty"`
}
type GetSpecType_ProtocolTcp struct {
	ProtocolTcp *TCPProtocol `protobuf:"bytes,12,opt,name=protocol_tcp,json=protocolTcp,proto3,oneof" json:"protocol_tcp,omitempty"`
}
type GetSpecType_ProtocolAh struct {
	ProtocolAh *schema.Empty `protobuf:"bytes,13,opt,name=protocol_ah,json=protocolAh,proto3,oneof" json:"protocol_ah,omitempty"`
}
type GetSpecType_ProtocolEsp struct {
	ProtocolEsp *schema.Empty `protobuf:"bytes,14,opt,name=protocol_esp,json=protocolEsp,proto3,oneof" json:"protocol_esp,omitempty"`
}
type GetSpecType_ProtocolGre struct {
	ProtocolGre *schema.Empty `protobuf:"bytes,15,opt,name=protocol_gre,json=protocolGre,proto3,oneof" json:"protocol_gre,omitempty"`
}
type GetSpecType_ProtocolIcmp struct {
	ProtocolIcmp *ICMPProtocol `protobuf:"bytes,16,opt,name=protocol_icmp,json=protocolIcmp,proto3,oneof" json:"protocol_icmp,omitempty"`
}
type GetSpecType_ProtocolIcmp6 struct {
	ProtocolIcmp6 *ICMP6Protocol `protobuf:"bytes,17,opt,name=protocol_icmp6,json=protocolIcmp6,proto3,oneof" json:"protocol_icmp6,omitempty"`
}
type GetSpecType_ProtocolIpv6 struct {
	ProtocolIpv6 *schema.Empty `protobuf:"bytes,18,opt,name=protocol_ipv6,json=protocolIpv6,proto3,oneof" json:"protocol_ipv6,omitempty"`
}
type GetSpecType_ProtocolAll struct {
	ProtocolAll *schema.Empty `protobuf:"bytes,19,opt,name=protocol_all,json=protocolAll,proto3,oneof" json:"protocol_all,omitempty"`
}
type GetSpecType_ActionDeny struct {
	ActionDeny *schema.Empty `protobuf:"bytes,21,opt,name=action_deny,json=actionDeny,proto3,oneof" json:"action_deny,omitempty"`
}
type GetSpecType_ActionAllow struct {
	ActionAllow *schema.Empty `protobuf:"bytes,22,opt,name=action_allow,json=actionAllow,proto3,oneof" json:"action_allow,omitempty"`
}
type GetSpecType_StateOff struct {
	StateOff *schema.Empty `protobuf:"bytes,24,opt,name=state_off,json=stateOff,proto3,oneof" json:"state_off,omitempty"`
}
type GetSpecType_StateOn struct {
	StateOn *schema.Empty `protobuf:"bytes,25,opt,name=state_on,json=stateOn,proto3,oneof" json:"state_on,omitempty"`
}
type GetSpecType_FragmentsDeny struct {
	FragmentsDeny *schema.Empty `protobuf:"bytes,27,opt,name=fragments_deny,json=fragmentsDeny,proto3,oneof" json:"fragments_deny,omitempty"`
}
type GetSpecType_FragmentsAllow struct {
	FragmentsAllow *schema.Empty `protobuf:"bytes,28,opt,name=fragments_allow,json=fragmentsAllow,proto3,oneof" json:"fragments_allow,omitempty"`
}

func (*GetSpecType_VersionIpv4) isGetSpecType_Version()                       {}
func (*GetSpecType_VersionIpv6) isGetSpecType_Version()                       {}
func (*GetSpecType_SourcePrefixSingle) isGetSpecType_SourcePrefix()           {}
func (*GetSpecType_SourcePrefixAll) isGetSpecType_SourcePrefix()              {}
func (*GetSpecType_DestinationPrefixSingle) isGetSpecType_DestinationPrefix() {}
func (*GetSpecType_DestinationPrefixAll) isGetSpecType_DestinationPrefix()    {}
func (*GetSpecType_ProtocolUdp) isGetSpecType_Protocol()                      {}
func (*GetSpecType_ProtocolTcp) isGetSpecType_Protocol()                      {}
func (*GetSpecType_ProtocolAh) isGetSpecType_Protocol()                       {}
func (*GetSpecType_ProtocolEsp) isGetSpecType_Protocol()                      {}
func (*GetSpecType_ProtocolGre) isGetSpecType_Protocol()                      {}
func (*GetSpecType_ProtocolIcmp) isGetSpecType_Protocol()                     {}
func (*GetSpecType_ProtocolIcmp6) isGetSpecType_Protocol()                    {}
func (*GetSpecType_ProtocolIpv6) isGetSpecType_Protocol()                     {}
func (*GetSpecType_ProtocolAll) isGetSpecType_Protocol()                      {}
func (*GetSpecType_ActionDeny) isGetSpecType_Action()                         {}
func (*GetSpecType_ActionAllow) isGetSpecType_Action()                        {}
func (*GetSpecType_StateOff) isGetSpecType_State()                            {}
func (*GetSpecType_StateOn) isGetSpecType_State()                             {}
func (*GetSpecType_FragmentsDeny) isGetSpecType_Fragments()                   {}
func (*GetSpecType_FragmentsAllow) isGetSpecType_Fragments()                  {}

func (m *GetSpecType) GetVersion() isGetSpecType_Version {
	if m != nil {
		return m.Version
	}
	return nil
}
func (m *GetSpecType) GetSourcePrefix() isGetSpecType_SourcePrefix {
	if m != nil {
		return m.SourcePrefix
	}
	return nil
}
func (m *GetSpecType) GetDestinationPrefix() isGetSpecType_DestinationPrefix {
	if m != nil {
		return m.DestinationPrefix
	}
	return nil
}
func (m *GetSpecType) GetProtocol() isGetSpecType_Protocol {
	if m != nil {
		return m.Protocol
	}
	return nil
}
func (m *GetSpecType) GetAction() isGetSpecType_Action {
	if m != nil {
		return m.Action
	}
	return nil
}
func (m *GetSpecType) GetState() isGetSpecType_State {
	if m != nil {
		return m.State
	}
	return nil
}
func (m *GetSpecType) GetFragments() isGetSpecType_Fragments {
	if m != nil {
		return m.Fragments
	}
	return nil
}

func (m *GetSpecType) GetVersionIpv4() *schema.Empty {
	if x, ok := m.GetVersion().(*GetSpecType_VersionIpv4); ok {
		return x.VersionIpv4
	}
	return nil
}

func (m *GetSpecType) GetVersionIpv6() *schema.Empty {
	if x, ok := m.GetVersion().(*GetSpecType_VersionIpv6); ok {
		return x.VersionIpv6
	}
	return nil
}

func (m *GetSpecType) GetSourcePrefixSingle() string {
	if x, ok := m.GetSourcePrefix().(*GetSpecType_SourcePrefixSingle); ok {
		return x.SourcePrefixSingle
	}
	return ""
}

func (m *GetSpecType) GetSourcePrefixAll() *schema.Empty {
	if x, ok := m.GetSourcePrefix().(*GetSpecType_SourcePrefixAll); ok {
		return x.SourcePrefixAll
	}
	return nil
}

func (m *GetSpecType) GetDestinationPrefixSingle() string {
	if x, ok := m.GetDestinationPrefix().(*GetSpecType_DestinationPrefixSingle); ok {
		return x.DestinationPrefixSingle
	}
	return ""
}

func (m *GetSpecType) GetDestinationPrefixAll() *schema.Empty {
	if x, ok := m.GetDestinationPrefix().(*GetSpecType_DestinationPrefixAll); ok {
		return x.DestinationPrefixAll
	}
	return nil
}

func (m *GetSpecType) GetProtocolUdp() *UDPProtocol {
	if x, ok := m.GetProtocol().(*GetSpecType_ProtocolUdp); ok {
		return x.ProtocolUdp
	}
	return nil
}

func (m *GetSpecType) GetProtocolTcp() *TCPProtocol {
	if x, ok := m.GetProtocol().(*GetSpecType_ProtocolTcp); ok {
		return x.ProtocolTcp
	}
	return nil
}

func (m *GetSpecType) GetProtocolAh() *schema.Empty {
	if x, ok := m.GetProtocol().(*GetSpecType_ProtocolAh); ok {
		return x.ProtocolAh
	}
	return nil
}

func (m *GetSpecType) GetProtocolEsp() *schema.Empty {
	if x, ok := m.GetProtocol().(*GetSpecType_ProtocolEsp); ok {
		return x.ProtocolEsp
	}
	return nil
}

func (m *GetSpecType) GetProtocolGre() *schema.Empty {
	if x, ok := m.GetProtocol().(*GetSpecType_ProtocolGre); ok {
		return x.ProtocolGre
	}
	return nil
}

func (m *GetSpecType) GetProtocolIcmp() *ICMPProtocol {
	if x, ok := m.GetProtocol().(*GetSpecType_ProtocolIcmp); ok {
		return x.ProtocolIcmp
	}
	return nil
}

func (m *GetSpecType) GetProtocolIcmp6() *ICMP6Protocol {
	if x, ok := m.GetProtocol().(*GetSpecType_ProtocolIcmp6); ok {
		return x.ProtocolIcmp6
	}
	return nil
}

func (m *GetSpecType) GetProtocolIpv6() *schema.Empty {
	if x, ok := m.GetProtocol().(*GetSpecType_ProtocolIpv6); ok {
		return x.ProtocolIpv6
	}
	return nil
}

func (m *GetSpecType) GetProtocolAll() *schema.Empty {
	if x, ok := m.GetProtocol().(*GetSpecType_ProtocolAll); ok {
		return x.ProtocolAll
	}
	return nil
}

func (m *GetSpecType) GetActionDeny() *schema.Empty {
	if x, ok := m.GetAction().(*GetSpecType_ActionDeny); ok {
		return x.ActionDeny
	}
	return nil
}

func (m *GetSpecType) GetActionAllow() *schema.Empty {
	if x, ok := m.GetAction().(*GetSpecType_ActionAllow); ok {
		return x.ActionAllow
	}
	return nil
}

func (m *GetSpecType) GetStateOff() *schema.Empty {
	if x, ok := m.GetState().(*GetSpecType_StateOff); ok {
		return x.StateOff
	}
	return nil
}

func (m *GetSpecType) GetStateOn() *schema.Empty {
	if x, ok := m.GetState().(*GetSpecType_StateOn); ok {
		return x.StateOn
	}
	return nil
}

func (m *GetSpecType) GetFragmentsDeny() *schema.Empty {
	if x, ok := m.GetFragments().(*GetSpecType_FragmentsDeny); ok {
		return x.FragmentsDeny
	}
	return nil
}

func (m *GetSpecType) GetFragmentsAllow() *schema.Empty {
	if x, ok := m.GetFragments().(*GetSpecType_FragmentsAllow); ok {
		return x.FragmentsAllow
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetSpecType_VersionIpv4)(nil),
		(*GetSpecType_VersionIpv6)(nil),
		(*GetSpecType_SourcePrefixSingle)(nil),
		(*GetSpecType_SourcePrefixAll)(nil),
		(*GetSpecType_DestinationPrefixSingle)(nil),
		(*GetSpecType_DestinationPrefixAll)(nil),
		(*GetSpecType_ProtocolUdp)(nil),
		(*GetSpecType_ProtocolTcp)(nil),
		(*GetSpecType_ProtocolAh)(nil),
		(*GetSpecType_ProtocolEsp)(nil),
		(*GetSpecType_ProtocolGre)(nil),
		(*GetSpecType_ProtocolIcmp)(nil),
		(*GetSpecType_ProtocolIcmp6)(nil),
		(*GetSpecType_ProtocolIpv6)(nil),
		(*GetSpecType_ProtocolAll)(nil),
		(*GetSpecType_ActionDeny)(nil),
		(*GetSpecType_ActionAllow)(nil),
		(*GetSpecType_StateOff)(nil),
		(*GetSpecType_StateOn)(nil),
		(*GetSpecType_FragmentsDeny)(nil),
		(*GetSpecType_FragmentsAllow)(nil),
	}
}

// UDP Protocol
//
// x-displayName: "UDP Protocol"
// x-required
// UDP Protocol
type UDPProtocol struct {
	// Source Port
	//
	// x-displayName: "Source Port"
	// x-required
	// Source Port
	//
	// Types that are valid to be assigned to SourcePort:
	//	*UDPProtocol_SourcePortRange
	//	*UDPProtocol_SourcePortAll
	SourcePort isUDPProtocol_SourcePort `protobuf_oneof:"source_port"`
	// Destination Port
	//
	// x-displayName: "Destination Port"
	// x-required
	// Destination Port
	//
	// Types that are valid to be assigned to DestinationPort:
	//	*UDPProtocol_DestinationPortRange
	//	*UDPProtocol_DestinationPortAll
	DestinationPort isUDPProtocol_DestinationPort `protobuf_oneof:"destination_port"`
	// Description
	//
	// x-displayName: "Description"
	// Description
	Description string `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *UDPProtocol) Reset()      { *m = UDPProtocol{} }
func (*UDPProtocol) ProtoMessage() {}
func (*UDPProtocol) Descriptor() ([]byte, []int) {
	return fileDescriptor_be50fe88872682e5, []int{4}
}
func (m *UDPProtocol) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UDPProtocol) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *UDPProtocol) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UDPProtocol.Merge(m, src)
}
func (m *UDPProtocol) XXX_Size() int {
	return m.Size()
}
func (m *UDPProtocol) XXX_DiscardUnknown() {
	xxx_messageInfo_UDPProtocol.DiscardUnknown(m)
}

var xxx_messageInfo_UDPProtocol proto.InternalMessageInfo

type isUDPProtocol_SourcePort interface {
	isUDPProtocol_SourcePort()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isUDPProtocol_DestinationPort interface {
	isUDPProtocol_DestinationPort()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type UDPProtocol_SourcePortRange struct {
	SourcePortRange string `protobuf:"bytes,2,opt,name=source_port_range,json=sourcePortRange,proto3,oneof" json:"source_port_range,omitempty"`
}
type UDPProtocol_SourcePortAll struct {
	SourcePortAll *schema.Empty `protobuf:"bytes,3,opt,name=source_port_all,json=sourcePortAll,proto3,oneof" json:"source_port_all,omitempty"`
}
type UDPProtocol_DestinationPortRange struct {
	DestinationPortRange string `protobuf:"bytes,5,opt,name=destination_port_range,json=destinationPortRange,proto3,oneof" json:"destination_port_range,omitempty"`
}
type UDPProtocol_DestinationPortAll struct {
	DestinationPortAll *schema.Empty `protobuf:"bytes,6,opt,name=destination_port_all,json=destinationPortAll,proto3,oneof" json:"destination_port_all,omitempty"`
}

func (*UDPProtocol_SourcePortRange) isUDPProtocol_SourcePort()           {}
func (*UDPProtocol_SourcePortAll) isUDPProtocol_SourcePort()             {}
func (*UDPProtocol_DestinationPortRange) isUDPProtocol_DestinationPort() {}
func (*UDPProtocol_DestinationPortAll) isUDPProtocol_DestinationPort()   {}

func (m *UDPProtocol) GetSourcePort() isUDPProtocol_SourcePort {
	if m != nil {
		return m.SourcePort
	}
	return nil
}
func (m *UDPProtocol) GetDestinationPort() isUDPProtocol_DestinationPort {
	if m != nil {
		return m.DestinationPort
	}
	return nil
}

func (m *UDPProtocol) GetSourcePortRange() string {
	if x, ok := m.GetSourcePort().(*UDPProtocol_SourcePortRange); ok {
		return x.SourcePortRange
	}
	return ""
}

func (m *UDPProtocol) GetSourcePortAll() *schema.Empty {
	if x, ok := m.GetSourcePort().(*UDPProtocol_SourcePortAll); ok {
		return x.SourcePortAll
	}
	return nil
}

func (m *UDPProtocol) GetDestinationPortRange() string {
	if x, ok := m.GetDestinationPort().(*UDPProtocol_DestinationPortRange); ok {
		return x.DestinationPortRange
	}
	return ""
}

func (m *UDPProtocol) GetDestinationPortAll() *schema.Empty {
	if x, ok := m.GetDestinationPort().(*UDPProtocol_DestinationPortAll); ok {
		return x.DestinationPortAll
	}
	return nil
}

func (m *UDPProtocol) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*UDPProtocol) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*UDPProtocol_SourcePortRange)(nil),
		(*UDPProtocol_SourcePortAll)(nil),
		(*UDPProtocol_DestinationPortRange)(nil),
		(*UDPProtocol_DestinationPortAll)(nil),
	}
}

// TCP Protocol
//
// x-displayName: "TCP Protocol"
// x-required
// TCP Protocol
type TCPProtocol struct {
	// Source Port
	//
	// x-displayName: "Source Port"
	// x-required
	// Source Port
	//
	// Types that are valid to be assigned to SourcePort:
	//	*TCPProtocol_SourcePortRange
	//	*TCPProtocol_SourcePortAll
	SourcePort isTCPProtocol_SourcePort `protobuf_oneof:"source_port"`
	// Destination Port
	//
	// x-displayName: "Destination Port"
	// x-required
	// Destination Port
	//
	// Types that are valid to be assigned to DestinationPort:
	//	*TCPProtocol_DestinationPortRange
	//	*TCPProtocol_DestinationPortAll
	DestinationPort isTCPProtocol_DestinationPort `protobuf_oneof:"destination_port"`
	// Description
	//
	// x-displayName: "Description"
	// Description
	Description string `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *TCPProtocol) Reset()      { *m = TCPProtocol{} }
func (*TCPProtocol) ProtoMessage() {}
func (*TCPProtocol) Descriptor() ([]byte, []int) {
	return fileDescriptor_be50fe88872682e5, []int{5}
}
func (m *TCPProtocol) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TCPProtocol) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TCPProtocol) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TCPProtocol.Merge(m, src)
}
func (m *TCPProtocol) XXX_Size() int {
	return m.Size()
}
func (m *TCPProtocol) XXX_DiscardUnknown() {
	xxx_messageInfo_TCPProtocol.DiscardUnknown(m)
}

var xxx_messageInfo_TCPProtocol proto.InternalMessageInfo

type isTCPProtocol_SourcePort interface {
	isTCPProtocol_SourcePort()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isTCPProtocol_DestinationPort interface {
	isTCPProtocol_DestinationPort()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type TCPProtocol_SourcePortRange struct {
	SourcePortRange string `protobuf:"bytes,2,opt,name=source_port_range,json=sourcePortRange,proto3,oneof" json:"source_port_range,omitempty"`
}
type TCPProtocol_SourcePortAll struct {
	SourcePortAll *schema.Empty `protobuf:"bytes,3,opt,name=source_port_all,json=sourcePortAll,proto3,oneof" json:"source_port_all,omitempty"`
}
type TCPProtocol_DestinationPortRange struct {
	DestinationPortRange string `protobuf:"bytes,5,opt,name=destination_port_range,json=destinationPortRange,proto3,oneof" json:"destination_port_range,omitempty"`
}
type TCPProtocol_DestinationPortAll struct {
	DestinationPortAll *schema.Empty `protobuf:"bytes,6,opt,name=destination_port_all,json=destinationPortAll,proto3,oneof" json:"destination_port_all,omitempty"`
}

func (*TCPProtocol_SourcePortRange) isTCPProtocol_SourcePort()           {}
func (*TCPProtocol_SourcePortAll) isTCPProtocol_SourcePort()             {}
func (*TCPProtocol_DestinationPortRange) isTCPProtocol_DestinationPort() {}
func (*TCPProtocol_DestinationPortAll) isTCPProtocol_DestinationPort()   {}

func (m *TCPProtocol) GetSourcePort() isTCPProtocol_SourcePort {
	if m != nil {
		return m.SourcePort
	}
	return nil
}
func (m *TCPProtocol) GetDestinationPort() isTCPProtocol_DestinationPort {
	if m != nil {
		return m.DestinationPort
	}
	return nil
}

func (m *TCPProtocol) GetSourcePortRange() string {
	if x, ok := m.GetSourcePort().(*TCPProtocol_SourcePortRange); ok {
		return x.SourcePortRange
	}
	return ""
}

func (m *TCPProtocol) GetSourcePortAll() *schema.Empty {
	if x, ok := m.GetSourcePort().(*TCPProtocol_SourcePortAll); ok {
		return x.SourcePortAll
	}
	return nil
}

func (m *TCPProtocol) GetDestinationPortRange() string {
	if x, ok := m.GetDestinationPort().(*TCPProtocol_DestinationPortRange); ok {
		return x.DestinationPortRange
	}
	return ""
}

func (m *TCPProtocol) GetDestinationPortAll() *schema.Empty {
	if x, ok := m.GetDestinationPort().(*TCPProtocol_DestinationPortAll); ok {
		return x.DestinationPortAll
	}
	return nil
}

func (m *TCPProtocol) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TCPProtocol) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TCPProtocol_SourcePortRange)(nil),
		(*TCPProtocol_SourcePortAll)(nil),
		(*TCPProtocol_DestinationPortRange)(nil),
		(*TCPProtocol_DestinationPortAll)(nil),
	}
}

// ICMP Protocol
//
// x-displayName: "ICMP Protocol"
// x-required
// ICMP Protocol
type ICMPProtocol struct {
	// Echo-Request
	//
	// x-displayName: "Echo-Request"
	// Echo-Request
	EchoRequest bool `protobuf:"varint,1,opt,name=echo_request,json=echoRequest,proto3" json:"echo_request,omitempty"`
	// Echo-Reply
	//
	// x-displayName: "Echo-Reply"
	// Echo-Reply
	EchoReply bool `protobuf:"varint,2,opt,name=echo_reply,json=echoReply,proto3" json:"echo_reply,omitempty"`
	// Parameter-Problem
	//
	// x-displayName: "Parameter-Problem"
	// Parameter-Problem
	ParameterProblem bool `protobuf:"varint,3,opt,name=parameter_problem,json=parameterProblem,proto3" json:"parameter_problem,omitempty"`
	// Redirect
	//
	// x-displayName: "Redirect"
	// Redirect
	Redirect bool `protobuf:"varint,4,opt,name=redirect,proto3" json:"redirect,omitempty"`
	// Source-Quench
	//
	// x-displayName: "Source-Quench"
	// Source-Quench
	SourceQuench bool `protobuf:"varint,5,opt,name=source_quench,json=sourceQuench,proto3" json:"source_quench,omitempty"`
	// Time-Exceeded
	//
	// x-displayName: "Time-Exceeded"
	// Time-Exceeded
	TimeExceeded bool `protobuf:"varint,6,opt,name=time_exceeded,json=timeExceeded,proto3" json:"time_exceeded,omitempty"`
	// Unreachable
	//
	// x-displayName: "Unreachable"
	// Unreachable
	Unreachable bool `protobuf:"varint,7,opt,name=unreachable,proto3" json:"unreachable,omitempty"`
}

func (m *ICMPProtocol) Reset()      { *m = ICMPProtocol{} }
func (*ICMPProtocol) ProtoMessage() {}
func (*ICMPProtocol) Descriptor() ([]byte, []int) {
	return fileDescriptor_be50fe88872682e5, []int{6}
}
func (m *ICMPProtocol) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ICMPProtocol) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ICMPProtocol) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ICMPProtocol.Merge(m, src)
}
func (m *ICMPProtocol) XXX_Size() int {
	return m.Size()
}
func (m *ICMPProtocol) XXX_DiscardUnknown() {
	xxx_messageInfo_ICMPProtocol.DiscardUnknown(m)
}

var xxx_messageInfo_ICMPProtocol proto.InternalMessageInfo

func (m *ICMPProtocol) GetEchoRequest() bool {
	if m != nil {
		return m.EchoRequest
	}
	return false
}

func (m *ICMPProtocol) GetEchoReply() bool {
	if m != nil {
		return m.EchoReply
	}
	return false
}

func (m *ICMPProtocol) GetParameterProblem() bool {
	if m != nil {
		return m.ParameterProblem
	}
	return false
}

func (m *ICMPProtocol) GetRedirect() bool {
	if m != nil {
		return m.Redirect
	}
	return false
}

func (m *ICMPProtocol) GetSourceQuench() bool {
	if m != nil {
		return m.SourceQuench
	}
	return false
}

func (m *ICMPProtocol) GetTimeExceeded() bool {
	if m != nil {
		return m.TimeExceeded
	}
	return false
}

func (m *ICMPProtocol) GetUnreachable() bool {
	if m != nil {
		return m.Unreachable
	}
	return false
}

// ICMP6 Protocol
//
// x-displayName: "ICMP6 Protocol"
// x-required
// ICMP6 Protocol
type ICMP6Protocol struct {
	// Destination-Unreachable
	//
	// x-displayName: "Destination-Unreachable"
	// Destination-Unreachable
	DestinationUnreachable bool `protobuf:"varint,1,opt,name=destination_unreachable,json=destinationUnreachable,proto3" json:"destination_unreachable,omitempty"`
	// Echo-Reply
	//
	// x-displayName: "Echo-Reply"
	// Echo-Reply
	EchoReply bool `protobuf:"varint,2,opt,name=echo_reply,json=echoReply,proto3" json:"echo_reply,omitempty"`
	// Echo-Request
	//
	// x-displayName: "Echo-Request"
	// Echo-Request
	EchoRequest bool `protobuf:"varint,3,opt,name=echo_request,json=echoRequest,proto3" json:"echo_request,omitempty"`
	// Neighbor-Advertisement
	//
	// x-displayName: "Neighbor-Advertisement"
	// Neighbor-Advertisement
	NeighborAdvertisement bool `protobuf:"varint,4,opt,name=neighbor_advertisement,json=neighborAdvertisement,proto3" json:"neighbor_advertisement,omitempty"`
	// Neighbor-Solicit
	//
	// x-displayName: "Neighbor-Solicit"
	// Neighbor-Solicit
	NeighborSolicit bool `protobuf:"varint,5,opt,name=neighbor_solicit,json=neighborSolicit,proto3" json:"neighbor_solicit,omitempty"`
	// Packet-Too-Big
	//
	// x-displayName: "Packet-Too-Big"
	// Packet-Too-Big
	PacketTooBig bool `protobuf:"varint,6,opt,name=packet_too_big,json=packetTooBig,proto3" json:"packet_too_big,omitempty"`
	// Parameter-Problem
	//
	// x-displayName: "Parameter-Problem"
	// Parameter-Problem
	ParameterProblem bool `protobuf:"varint,7,opt,name=parameter_problem,json=parameterProblem,proto3" json:"parameter_problem,omitempty"`
	// Redirect
	//
	// x-displayName: "Redirect"
	// Redirect
	Redirect bool `protobuf:"varint,8,opt,name=redirect,proto3" json:"redirect,omitempty"`
	// Router-Advertisement
	//
	// x-displayName: "Router-Advertisement"
	// Router-Advertisement
	RouterAdvertisement bool `protobuf:"varint,9,opt,name=router_advertisement,json=routerAdvertisement,proto3" json:"router_advertisement,omitempty"`
	// Router-Solicit
	//
	// x-displayName: "Router-Solicit"
	// Router-Solicit
	RouterSolicit bool `protobuf:"varint,10,opt,name=router_solicit,json=routerSolicit,proto3" json:"router_solicit,omitempty"`
	// Time-Exceeded
	//
	// x-displayName: "Time-Exceeded"
	// Time-Exceeded
	TimeExceeded bool `protobuf:"varint,11,opt,name=time_exceeded,json=timeExceeded,proto3" json:"time_exceeded,omitempty"`
}

func (m *ICMP6Protocol) Reset()      { *m = ICMP6Protocol{} }
func (*ICMP6Protocol) ProtoMessage() {}
func (*ICMP6Protocol) Descriptor() ([]byte, []int) {
	return fileDescriptor_be50fe88872682e5, []int{7}
}
func (m *ICMP6Protocol) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ICMP6Protocol) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ICMP6Protocol) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ICMP6Protocol.Merge(m, src)
}
func (m *ICMP6Protocol) XXX_Size() int {
	return m.Size()
}
func (m *ICMP6Protocol) XXX_DiscardUnknown() {
	xxx_messageInfo_ICMP6Protocol.DiscardUnknown(m)
}

var xxx_messageInfo_ICMP6Protocol proto.InternalMessageInfo

func (m *ICMP6Protocol) GetDestinationUnreachable() bool {
	if m != nil {
		return m.DestinationUnreachable
	}
	return false
}

func (m *ICMP6Protocol) GetEchoReply() bool {
	if m != nil {
		return m.EchoReply
	}
	return false
}

func (m *ICMP6Protocol) GetEchoRequest() bool {
	if m != nil {
		return m.EchoRequest
	}
	return false
}

func (m *ICMP6Protocol) GetNeighborAdvertisement() bool {
	if m != nil {
		return m.NeighborAdvertisement
	}
	return false
}

func (m *ICMP6Protocol) GetNeighborSolicit() bool {
	if m != nil {
		return m.NeighborSolicit
	}
	return false
}

func (m *ICMP6Protocol) GetPacketTooBig() bool {
	if m != nil {
		return m.PacketTooBig
	}
	return false
}

func (m *ICMP6Protocol) GetParameterProblem() bool {
	if m != nil {
		return m.ParameterProblem
	}
	return false
}

func (m *ICMP6Protocol) GetRedirect() bool {
	if m != nil {
		return m.Redirect
	}
	return false
}

func (m *ICMP6Protocol) GetRouterAdvertisement() bool {
	if m != nil {
		return m.RouterAdvertisement
	}
	return false
}

func (m *ICMP6Protocol) GetRouterSolicit() bool {
	if m != nil {
		return m.RouterSolicit
	}
	return false
}

func (m *ICMP6Protocol) GetTimeExceeded() bool {
	if m != nil {
		return m.TimeExceeded
	}
	return false
}

func init() {
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.infraprotect_firewall_rule.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.infraprotect_firewall_rule.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.infraprotect_firewall_rule.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.infraprotect_firewall_rule.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.infraprotect_firewall_rule.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.infraprotect_firewall_rule.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.infraprotect_firewall_rule.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.infraprotect_firewall_rule.GetSpecType")
	proto.RegisterType((*UDPProtocol)(nil), "ves.io.schema.infraprotect_firewall_rule.UDPProtocol")
	golang_proto.RegisterType((*UDPProtocol)(nil), "ves.io.schema.infraprotect_firewall_rule.UDPProtocol")
	proto.RegisterType((*TCPProtocol)(nil), "ves.io.schema.infraprotect_firewall_rule.TCPProtocol")
	golang_proto.RegisterType((*TCPProtocol)(nil), "ves.io.schema.infraprotect_firewall_rule.TCPProtocol")
	proto.RegisterType((*ICMPProtocol)(nil), "ves.io.schema.infraprotect_firewall_rule.ICMPProtocol")
	golang_proto.RegisterType((*ICMPProtocol)(nil), "ves.io.schema.infraprotect_firewall_rule.ICMPProtocol")
	proto.RegisterType((*ICMP6Protocol)(nil), "ves.io.schema.infraprotect_firewall_rule.ICMP6Protocol")
	golang_proto.RegisterType((*ICMP6Protocol)(nil), "ves.io.schema.infraprotect_firewall_rule.ICMP6Protocol")
}

func init() {
	proto.RegisterFile("ves.io/schema/infraprotect_firewall_rule/types.proto", fileDescriptor_be50fe88872682e5)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/infraprotect_firewall_rule/types.proto", fileDescriptor_be50fe88872682e5)
}

var fileDescriptor_be50fe88872682e5 = []byte{
	// 1790 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5a, 0xcd, 0x6f, 0xe3, 0xc6,
	0x15, 0xd7, 0x58, 0x94, 0x4d, 0x3d, 0x7d, 0x58, 0x1e, 0xcb, 0x36, 0xd7, 0x5e, 0x08, 0xae, 0x11,
	0xb4, 0x0b, 0xd7, 0x96, 0xb2, 0x5c, 0x47, 0x4e, 0xb2, 0x4d, 0x16, 0xa2, 0xed, 0xda, 0x6b, 0x6c,
	0xbb, 0xae, 0xec, 0xcd, 0x21, 0x40, 0xca, 0x52, 0xd4, 0x48, 0x26, 0x42, 0x89, 0xcc, 0x90, 0xf2,
	0xae, 0x6f, 0x85, 0xff, 0x82, 0x1e, 0x7b, 0xe8, 0xad, 0x97, 0x1e, 0x7a, 0xe8, 0xb9, 0xba, 0x2c,
	0x52, 0xa0, 0x08, 0xd2, 0x8b, 0x80, 0x5e, 0x16, 0x3d, 0x65, 0xed, 0x1e, 0x5a, 0xa0, 0x87, 0x1c,
	0x0b, 0x9f, 0x0a, 0x0e, 0x29, 0x89, 0xa4, 0xb4, 0x5a, 0x2f, 0x90, 0x45, 0x11, 0x80, 0x37, 0x72,
	0xde, 0xef, 0xf7, 0xe6, 0x7d, 0xcd, 0x7b, 0x63, 0x5a, 0xb0, 0x75, 0x46, 0xac, 0xa2, 0x66, 0x94,
	0x2c, 0xf5, 0x94, 0xb4, 0x94, 0x92, 0xd6, 0x6e, 0x50, 0xc5, 0xa4, 0x86, 0x4d, 0x54, 0x5b, 0x6e,
	0x68, 0x94, 0x3c, 0x55, 0x74, 0x5d, 0xa6, 0x1d, 0x9d, 0x94, 0xec, 0x73, 0x93, 0x58, 0x45, 0x47,
	0x66, 0xe0, 0x3b, 0x2e, 0xab, 0xe8, 0xb2, 0x8a, 0xaf, 0x66, 0x2d, 0x6f, 0x36, 0x35, 0xfb, 0xb4,
	0x53, 0x2b, 0xaa, 0x46, 0xab, 0xd4, 0x34, 0x9a, 0x46, 0x89, 0x29, 0xa8, 0x75, 0x1a, 0xec, 0x8d,
	0xbd, 0xb0, 0x27, 0x57, 0xf1, 0xf2, 0x4a, 0xd0, 0x1c, 0xc3, 0xb4, 0x35, 0xa3, 0xed, 0xed, 0xba,
	0x7c, 0x2b, 0x28, 0xf4, 0x19, 0xb4, 0x7c, 0x3b, 0x28, 0x3a, 0x53, 0x74, 0xad, 0xae, 0xd8, 0xc4,
	0x93, 0xae, 0x86, 0xa4, 0x1a, 0x79, 0x2a, 0x07, 0x54, 0xaf, 0xfd, 0x1e, 0x43, 0x76, 0x5f, 0x37,
	0x6a, 0x8a, 0x7e, 0x6c, 0x12, 0xf5, 0xe4, 0xdc, 0x24, 0xf8, 0x03, 0x48, 0x9f, 0x11, 0x6a, 0x69,
	0x46, 0x5b, 0xd6, 0xcc, 0xb3, 0x2d, 0x61, 0x6a, 0x15, 0xdd, 0x49, 0x89, 0xf9, 0x62, 0xd0, 0xf5,
	0xbd, 0x96, 0x69, 0x9f, 0x1f, 0xc4, 0xaa, 0x29, 0x0f, 0xfb, 0xd0, 0x3c, 0xdb, 0x0a, 0x51, 0xcb,
	0x42, 0xfc, 0xa6, 0xd4, 0x32, 0x96, 0x20, 0x6f, 0x19, 0x1d, 0xaa, 0x12, 0xd9, 0xa4, 0xa4, 0xa1,
	0x3d, 0x93, 0x2d, 0xad, 0xdd, 0xd4, 0x89, 0x90, 0x58, 0x45, 0x77, 0x92, 0x52, 0xf6, 0xbf, 0x5d,
	0x14, 0xfb, 0xf3, 0xbf, 0x9f, 0xc7, 0x13, 0x34, 0xfe, 0xdb, 0x04, 0x3a, 0x40, 0x55, 0xec, 0xa2,
	0x8f, 0x18, 0xf8, 0x98, 0x61, 0xb1, 0x04, 0x73, 0x41, 0x1d, 0x8a, 0xae, 0x0b, 0xd3, 0x13, 0x6c,
	0x40, 0xd5, 0x59, 0xbf, 0x9a, 0x8a, 0xae, 0xe3, 0x47, 0x70, 0xab, 0x4e, 0x2c, 0x5b, 0x6b, 0x2b,
	0x4e, 0x98, 0x42, 0xc6, 0xf0, 0x63, 0x8d, 0x99, 0xaa, 0x2e, 0xf9, 0x28, 0x01, 0x8b, 0x1e, 0xc1,
	0xe2, 0x18, 0x6d, 0x8e, 0x59, 0xc9, 0x09, 0x66, 0x4d, 0x55, 0xf3, 0x23, 0x0a, 0x1d, 0xdb, 0x3e,
	0x85, 0x34, 0xcb, 0x9a, 0x6a, 0xe8, 0x72, 0xa7, 0x6e, 0x0a, 0x29, 0xa6, 0xe3, 0xbd, 0xe2, 0x4d,
	0x8b, 0xb2, 0xf8, 0x64, 0xf7, 0xe8, 0xc8, 0x53, 0x70, 0x10, 0xaf, 0xa6, 0xfa, 0xca, 0x9e, 0xd4,
	0xcd, 0x80, 0x6e, 0x5b, 0x35, 0x85, 0xf4, 0x9b, 0xea, 0x3e, 0xd9, 0x19, 0xab, 0xfb, 0x44, 0x35,
	0xf1, 0x36, 0x0c, 0x5e, 0x65, 0xe5, 0x54, 0xc8, 0x4c, 0x70, 0x3d, 0x5e, 0x85, 0x3e, 0xb4, 0x72,
	0xea, 0xd4, 0xd3, 0x80, 0x48, 0x2c, 0x53, 0xc8, 0x4e, 0x64, 0x0e, 0x36, 0xd9, 0xb3, 0xcc, 0x00,
	0xb5, 0x49, 0x89, 0x30, 0x7b, 0x33, 0xea, 0x3e, 0x25, 0xf8, 0x33, 0xc8, 0x0c, 0xa8, 0x9a, 0xda,
	0x32, 0x85, 0x1c, 0xe3, 0x96, 0x6f, 0x1e, 0x8b, 0x87, 0x3b, 0x3f, 0xf3, 0x07, 0x63, 0x60, 0xc9,
	0x43, 0xb5, 0x65, 0xe2, 0x5f, 0x41, 0x36, 0xa0, 0xbe, 0x2c, 0xcc, 0x31, 0xfd, 0xdb, 0x6f, 0xa6,
	0xbf, 0xec, 0xdb, 0x20, 0xe3, 0xdf, 0xa0, 0x8c, 0xef, 0xfb, 0x1d, 0x70, 0xce, 0x21, 0x9e, 0xe8,
	0xfc, 0xd0, 0x3c, 0xe7, 0x20, 0xfa, 0x03, 0xe7, 0x14, 0xea, 0xfc, 0xcd, 0x02, 0xe7, 0xd4, 0xe7,
	0x36, 0xa4, 0x14, 0x95, 0x15, 0x7a, 0x9d, 0xb4, 0xcf, 0x85, 0x85, 0x09, 0x4c, 0xae, 0x0a, 0x2e,
	0x74, 0x97, 0xb4, 0xcf, 0x9d, 0x3d, 0x3d, 0xa2, 0xa2, 0xeb, 0xc6, 0x53, 0x61, 0x71, 0x22, 0xd3,
	0xdb, 0xa4, 0xe2, 0x40, 0xf1, 0x3d, 0x48, 0x5a, 0xb6, 0x62, 0x13, 0xd9, 0x68, 0x34, 0x04, 0x61,
	0x02, 0x2f, 0x51, 0xe5, 0x19, 0xf0, 0x71, 0xa3, 0x81, 0xef, 0x02, 0xef, 0x91, 0xda, 0xc2, 0xad,
	0x89, 0x9c, 0x19, 0x97, 0xd3, 0xc6, 0x1f, 0x41, 0xb6, 0x41, 0x95, 0x66, 0x8b, 0xb4, 0x6d, 0xcb,
	0x75, 0x6f, 0x65, 0x02, 0x71, 0xba, 0x9a, 0x19, 0xa0, 0x99, 0x87, 0x0f, 0x60, 0x76, 0x48, 0x77,
	0x9d, 0xbc, 0x3d, 0x91, 0x3f, 0xdc, 0x8d, 0xf9, 0xf9, 0xe1, 0x1f, 0x13, 0x5f, 0x76, 0xd1, 0x36,
	0xac, 0x42, 0xde, 0xed, 0x07, 0xab, 0x3b, 0x46, 0xbb, 0xa1, 0x35, 0x3b, 0x94, 0xf5, 0x08, 0xcc,
	0xdf, 0xdd, 0xd8, 0xda, 0xd8, 0xde, 0xb8, 0xfb, 0x2e, 0xcc, 0xc3, 0xcc, 0x63, 0xb7, 0xc5, 0x63,
	0x5e, 0x7c, 0x77, 0x43, 0xbc, 0xb7, 0x21, 0x96, 0xbf, 0xee, 0xa2, 0xff, 0x70, 0xf0, 0x01, 0xcc,
	0x7c, 0xe2, 0x76, 0xdc, 0xf5, 0x22, 0x6c, 0x40, 0x3e, 0xd8, 0xe7, 0x45, 0xee, 0xe1, 0xd1, 0x27,
	0x5b, 0xa1, 0xd5, 0x32, 0x5b, 0x2d, 0xc3, 0xcf, 0x21, 0x73, 0xcc, 0x1a, 0xe5, 0xaa, 0xbb, 0xfb,
	0xfa, 0x47, 0x70, 0x1f, 0x16, 0xc7, 0xb7, 0x6c, 0xf8, 0xc1, 0x98, 0x36, 0x2c, 0xa6, 0x2b, 0xba,
	0xee, 0x91, 0x89, 0x05, 0x9f, 0x01, 0xde, 0x1d, 0x76, 0xb8, 0xbe, 0xd2, 0x7d, 0xd8, 0x83, 0x95,
	0x09, 0xfd, 0x17, 0x7e, 0xf8, 0xaa, 0x76, 0x1a, 0x52, 0xff, 0x77, 0x04, 0x7c, 0xff, 0x78, 0xac,
	0xff, 0x15, 0xc1, 0x5f, 0x10, 0xcc, 0x07, 0x7b, 0xa7, 0x18, 0x7f, 0xb2, 0x7b, 0x14, 0x58, 0xb4,
	0x55, 0x53, 0x8c, 0x9f, 0xec, 0x1c, 0xc1, 0x5c, 0xa0, 0x5b, 0x89, 0x53, 0x95, 0x83, 0x00, 0x8e,
	0x58, 0xa6, 0x18, 0xdf, 0x3b, 0x0e, 0x92, 0x9b, 0x94, 0x88, 0xf1, 0xfd, 0xea, 0x1e, 0x2c, 0x84,
	0x7a, 0x87, 0xc8, 0x39, 0x67, 0x15, 0x96, 0xc2, 0x67, 0x5e, 0x4c, 0xb0, 0x33, 0x1c, 0xc4, 0x0f,
	0xe3, 0x3d, 0x1f, 0x3c, 0x84, 0x62, 0xbc, 0xf2, 0xe8, 0x11, 0xbc, 0x0f, 0xd3, 0x15, 0x56, 0xf9,
	0x2c, 0x7d, 0xf3, 0x81, 0xc3, 0x26, 0x72, 0x4e, 0x99, 0xc1, 0x42, 0xf0, 0x20, 0x89, 0x09, 0x56,
	0x3c, 0xb0, 0x09, 0x89, 0x63, 0xa7, 0x8e, 0xd7, 0xdf, 0x81, 0x35, 0xc8, 0xf9, 0x4e, 0x8c, 0x18,
	0x7f, 0xdc, 0x68, 0x40, 0x76, 0x78, 0x1c, 0xc4, 0xa9, 0xc7, 0x6d, 0xa8, 0x40, 0xf2, 0xa7, 0xfd,
	0xea, 0x5b, 0xdf, 0x02, 0x11, 0x16, 0xc3, 0xc5, 0xef, 0x6d, 0x27, 0x8c, 0x54, 0xb5, 0xb7, 0xa3,
	0x34, 0x0f, 0x33, 0x5e, 0x19, 0x61, 0xfe, 0x79, 0x17, 0x4d, 0xf5, 0xba, 0x08, 0x49, 0xb7, 0x20,
	0x13, 0x28, 0x0c, 0x26, 0x4a, 0xf4, 0xba, 0x88, 0x93, 0x0a, 0x80, 0x47, 0x33, 0xcb, 0xe4, 0x7c,
	0xaf, 0x8b, 0x66, 0xa4, 0x3c, 0xf0, 0xfd, 0x80, 0xb0, 0xd5, 0x54, 0xaf, 0x8b, 0x40, 0xc2, 0x30,
	0xed, 0xba, 0xcb, 0xd6, 0x16, 0x7a, 0x5d, 0x94, 0x97, 0xe6, 0x20, 0xc1, 0x9c, 0x61, 0x4b, 0x42,
	0xaf, 0x8b, 0x96, 0xa4, 0x05, 0x48, 0x0e, 0xcc, 0x64, 0xcb, 0x2b, 0xbd, 0x2e, 0x5a, 0x3e, 0xe4,
	0x78, 0x94, 0x9b, 0x3a, 0xe4, 0x78, 0x2e, 0x97, 0x38, 0xe4, 0xf8, 0x99, 0x1c, 0x7f, 0xc8, 0xf1,
	0x90, 0x4b, 0x1d, 0x72, 0x7c, 0x3e, 0xb7, 0x70, 0xc8, 0xf1, 0x4b, 0x39, 0xe1, 0x90, 0xe3, 0x97,
	0x73, 0x2b, 0x6b, 0x57, 0x69, 0xc8, 0xee, 0x50, 0xa2, 0xd8, 0xe4, 0xff, 0x7c, 0x4b, 0x12, 0x27,
	0xdd, 0x92, 0xde, 0xe2, 0xad, 0xe8, 0x27, 0xaf, 0xbd, 0x15, 0x45, 0xb7, 0xa0, 0xe8, 0x16, 0x14,
	0xdd, 0x82, 0xa2, 0x5b, 0xd0, 0xdb, 0xbd, 0x05, 0xcd, 0x7d, 0xfd, 0x71, 0xe8, 0xcf, 0x55, 0x69,
	0x71, 0x38, 0x69, 0x52, 0x17, 0xd7, 0xa8, 0xff, 0x22, 0xad, 0x85, 0x87, 0xcd, 0xdc, 0xc5, 0x35,
	0x0a, 0x2e, 0x49, 0x1b, 0x63, 0xa7, 0xce, 0xe2, 0xc5, 0x35, 0x1a, 0xb3, 0x2e, 0x09, 0xbe, 0x19,
	0x94, 0xbe, 0xb8, 0x46, 0x83, 0x37, 0x29, 0x3f, 0x98, 0x43, 0x70, 0x71, 0x8d, 0xbc, 0x67, 0x09,
	0xf7, 0x27, 0x51, 0xf2, 0xe2, 0x1a, 0xb9, 0x8f, 0xd2, 0xb2, 0x7f, 0x14, 0x65, 0x2e, 0xae, 0xd1,
	0xf0, 0x75, 0xed, 0x9f, 0x69, 0x98, 0xad, 0x12, 0x53, 0x57, 0xd4, 0x68, 0xcc, 0x44, 0x63, 0x26,
	0x1a, 0x33, 0xd1, 0x98, 0x89, 0xc6, 0x4c, 0x34, 0x66, 0xbe, 0xf3, 0x31, 0xf3, 0x4d, 0x1a, 0x52,
	0xfb, 0xc4, 0x8e, 0x46, 0x4c, 0x34, 0x62, 0xa2, 0x11, 0x13, 0x8d, 0x98, 0x68, 0xc4, 0x44, 0x23,
	0xe6, 0xbb, 0x1e, 0x31, 0xdd, 0x38, 0xa4, 0x7c, 0xbd, 0x09, 0xbf, 0x3f, 0x6c, 0xdc, 0x06, 0xb5,
	0x65, 0xaa, 0xb4, 0x9b, 0x84, 0xcd, 0x99, 0xa4, 0x04, 0xde, 0x3f, 0xd2, 0xfe, 0x84, 0xd0, 0x41,
	0x6c, 0xd0, 0xae, 0x0d, 0x6a, 0x57, 0x1d, 0x10, 0xfe, 0x18, 0x66, 0xfd, 0x4c, 0xa7, 0x80, 0x27,
	0x0f, 0x99, 0xcc, 0x50, 0x83, 0x53, 0xc2, 0x52, 0xa8, 0x61, 0x0f, 0xb7, 0x4f, 0x8c, 0x6c, 0x8f,
	0x82, 0x6d, 0x7a, 0x60, 0xc3, 0x01, 0xe4, 0x47, 0x74, 0xbc, 0x7e, 0xf2, 0xe0, 0x90, 0x2e, 0xc7,
	0x9a, 0x55, 0x48, 0xd5, 0x89, 0xa5, 0x52, 0x8d, 0x7d, 0xa0, 0x17, 0x66, 0x1c, 0x13, 0xaa, 0xfe,
	0xa5, 0x0f, 0x1f, 0x7c, 0xd9, 0x45, 0xf7, 0x21, 0x07, 0xa9, 0xfe, 0xe7, 0x76, 0x83, 0xda, 0x18,
	0xdd, 0x85, 0x05, 0xc8, 0x05, 0x3e, 0x98, 0xb3, 0xe5, 0x2d, 0x07, 0xb8, 0x3b, 0x64, 0x63, 0xb4,
	0x2d, 0x2d, 0x41, 0xca, 0x17, 0x30, 0xdf, 0xc7, 0xd7, 0xdb, 0x90, 0x0b, 0x7b, 0x31, 0xfc, 0xfe,
	0xea, 0xff, 0x16, 0xca, 0xb2, 0xe7, 0xeb, 0xfe, 0x51, 0xf6, 0xbe, 0x57, 0xd9, 0xfb, 0xdb, 0x14,
	0xa4, 0xfd, 0xf3, 0x0a, 0xff, 0x18, 0xd2, 0x44, 0x3d, 0x35, 0x64, 0x4a, 0xbe, 0xe8, 0x10, 0xcb,
	0x16, 0xd0, 0x2a, 0xba, 0xc3, 0x4b, 0xfc, 0x3f, 0xba, 0x88, 0xb3, 0x69, 0x87, 0x54, 0x53, 0x8e,
	0xb4, 0xea, 0x0a, 0xf1, 0x8f, 0x00, 0x3c, 0xb0, 0xa9, 0x9f, 0xb3, 0x24, 0xfb, 0xa1, 0x49, 0x17,
	0x6a, 0xea, 0xe7, 0xf8, 0x3d, 0x98, 0x33, 0x15, 0xaa, 0xb4, 0x88, 0x4d, 0xa8, 0x6c, 0x52, 0xa3,
	0xa6, 0x93, 0x16, 0x4b, 0xae, 0x1f, 0x9f, 0x1b, 0x40, 0x8e, 0x5c, 0x04, 0x7e, 0x07, 0x78, 0x4a,
	0xea, 0x1a, 0x25, 0xaa, 0x2d, 0x70, 0x21, 0xf4, 0x40, 0x82, 0x37, 0x07, 0x1d, 0xef, 0x8b, 0x0e,
	0x69, 0xab, 0xa7, 0x2c, 0xdd, 0x7e, 0x68, 0xda, 0x15, 0xff, 0x82, 0x49, 0x1d, 0xb8, 0xad, 0xb5,
	0x88, 0x4c, 0x9e, 0xa9, 0x84, 0xd4, 0x49, 0x9d, 0xe5, 0x36, 0x00, 0x77, 0xc4, 0x7b, 0x9e, 0x14,
	0xaf, 0x43, 0xaa, 0xd3, 0xa6, 0x44, 0x51, 0x4f, 0x95, 0x9a, 0x4e, 0x58, 0x1e, 0x03, 0xf1, 0xf0,
	0x09, 0xd7, 0xbe, 0xe2, 0x20, 0x13, 0x98, 0xce, 0xb8, 0x02, 0xfe, 0xdb, 0xa1, 0xec, 0xd7, 0x14,
	0x8e, 0xac, 0xbf, 0x78, 0x9f, 0x0c, 0x71, 0x37, 0x0f, 0x72, 0x38, 0x75, 0xf1, 0x49, 0xa9, 0x7b,
	0x00, 0x8b, 0x6d, 0xa2, 0x35, 0x4f, 0x6b, 0x06, 0x95, 0x95, 0xfa, 0x19, 0xa1, 0xb6, 0x66, 0x11,
	0xa7, 0x1f, 0x8f, 0x04, 0x7a, 0xa1, 0x8f, 0xab, 0xf8, 0x61, 0xf8, 0x1e, 0xe4, 0x06, 0x0a, 0x2c,
	0x43, 0xd7, 0x54, 0xcd, 0x1e, 0x09, 0xfc, 0x6c, 0x1f, 0x71, 0xec, 0x02, 0x70, 0x11, 0xb2, 0xa6,
	0xa2, 0x7e, 0x4e, 0x6c, 0xd9, 0x36, 0x0c, 0xb9, 0xa6, 0x35, 0x47, 0x83, 0xef, 0xca, 0x4f, 0x0c,
	0x43, 0xd2, 0x9a, 0xe3, 0xeb, 0x66, 0xe6, 0x8d, 0xea, 0x86, 0x7f, 0x65, 0xdd, 0xdc, 0x87, 0x3c,
	0x35, 0x3a, 0x8e, 0xe6, 0x60, 0x00, 0x92, 0x21, 0xc6, 0xbc, 0x8b, 0x0a, 0xba, 0x5f, 0x82, 0xac,
	0x47, 0xee, 0x3b, 0x0f, 0x21, 0x5a, 0xc6, 0x95, 0xf7, 0x5d, 0x1f, 0x29, 0xbb, 0xd4, 0xa4, 0xb2,
	0x93, 0x7e, 0x87, 0x7a, 0x2f, 0x0b, 0xb1, 0x17, 0x2f, 0x0b, 0xb1, 0x6f, 0x5f, 0x16, 0xd0, 0xaf,
	0x2f, 0x0b, 0xe8, 0x0f, 0x97, 0x05, 0xf4, 0xd5, 0x65, 0x01, 0xf5, 0x2e, 0x0b, 0xe8, 0xc5, 0x65,
	0x01, 0x7d, 0x73, 0x59, 0x40, 0xff, 0xba, 0x2c, 0xc4, 0xbe, 0xbd, 0x2c, 0xa0, 0xdf, 0x5c, 0x15,
	0x62, 0xcf, 0xaf, 0x0a, 0xa8, 0x77, 0x55, 0x88, 0xbd, 0xb8, 0x2a, 0xc4, 0x3e, 0xfd, 0x65, 0xd3,
	0x30, 0x3f, 0x6f, 0x16, 0xcf, 0x0c, 0xdd, 0x26, 0x94, 0x2a, 0xc5, 0x8e, 0x55, 0x62, 0x0f, 0x0d,
	0x83, 0xb6, 0x36, 0x4d, 0x6a, 0x9c, 0x69, 0x75, 0x42, 0x37, 0xfb, 0xe2, 0x92, 0x59, 0x6b, 0x1a,
	0x25, 0xf2, 0xcc, 0xf6, 0x7e, 0xfa, 0xf3, 0xda, 0x9f, 0x39, 0xd5, 0xa6, 0xd9, 0x1d, 0xe0, 0xde,
	0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x96, 0x98, 0x7f, 0x16, 0x19, 0x25, 0x00, 0x00,
}

func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Version == nil {
		if this.Version != nil {
			return false
		}
	} else if this.Version == nil {
		return false
	} else if !this.Version.Equal(that1.Version) {
		return false
	}
	if that1.SourcePrefix == nil {
		if this.SourcePrefix != nil {
			return false
		}
	} else if this.SourcePrefix == nil {
		return false
	} else if !this.SourcePrefix.Equal(that1.SourcePrefix) {
		return false
	}
	if that1.DestinationPrefix == nil {
		if this.DestinationPrefix != nil {
			return false
		}
	} else if this.DestinationPrefix == nil {
		return false
	} else if !this.DestinationPrefix.Equal(that1.DestinationPrefix) {
		return false
	}
	if that1.Protocol == nil {
		if this.Protocol != nil {
			return false
		}
	} else if this.Protocol == nil {
		return false
	} else if !this.Protocol.Equal(that1.Protocol) {
		return false
	}
	if that1.Action == nil {
		if this.Action != nil {
			return false
		}
	} else if this.Action == nil {
		return false
	} else if !this.Action.Equal(that1.Action) {
		return false
	}
	if that1.State == nil {
		if this.State != nil {
			return false
		}
	} else if this.State == nil {
		return false
	} else if !this.State.Equal(that1.State) {
		return false
	}
	if that1.Fragments == nil {
		if this.Fragments != nil {
			return false
		}
	} else if this.Fragments == nil {
		return false
	} else if !this.Fragments.Equal(that1.Fragments) {
		return false
	}
	return true
}
func (this *GlobalSpecType_VersionIpv4) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_VersionIpv4)
	if !ok {
		that2, ok := that.(GlobalSpecType_VersionIpv4)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VersionIpv4.Equal(that1.VersionIpv4) {
		return false
	}
	return true
}
func (this *GlobalSpecType_VersionIpv6) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_VersionIpv6)
	if !ok {
		that2, ok := that.(GlobalSpecType_VersionIpv6)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VersionIpv6.Equal(that1.VersionIpv6) {
		return false
	}
	return true
}
func (this *GlobalSpecType_SourcePrefixSingle) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_SourcePrefixSingle)
	if !ok {
		that2, ok := that.(GlobalSpecType_SourcePrefixSingle)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SourcePrefixSingle != that1.SourcePrefixSingle {
		return false
	}
	return true
}
func (this *GlobalSpecType_SourcePrefixAll) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_SourcePrefixAll)
	if !ok {
		that2, ok := that.(GlobalSpecType_SourcePrefixAll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SourcePrefixAll.Equal(that1.SourcePrefixAll) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DestinationPrefixSingle) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DestinationPrefixSingle)
	if !ok {
		that2, ok := that.(GlobalSpecType_DestinationPrefixSingle)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DestinationPrefixSingle != that1.DestinationPrefixSingle {
		return false
	}
	return true
}
func (this *GlobalSpecType_DestinationPrefixAll) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DestinationPrefixAll)
	if !ok {
		that2, ok := that.(GlobalSpecType_DestinationPrefixAll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DestinationPrefixAll.Equal(that1.DestinationPrefixAll) {
		return false
	}
	return true
}
func (this *GlobalSpecType_ProtocolUdp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_ProtocolUdp)
	if !ok {
		that2, ok := that.(GlobalSpecType_ProtocolUdp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ProtocolUdp.Equal(that1.ProtocolUdp) {
		return false
	}
	return true
}
func (this *GlobalSpecType_ProtocolTcp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_ProtocolTcp)
	if !ok {
		that2, ok := that.(GlobalSpecType_ProtocolTcp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ProtocolTcp.Equal(that1.ProtocolTcp) {
		return false
	}
	return true
}
func (this *GlobalSpecType_ProtocolAh) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_ProtocolAh)
	if !ok {
		that2, ok := that.(GlobalSpecType_ProtocolAh)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ProtocolAh.Equal(that1.ProtocolAh) {
		return false
	}
	return true
}
func (this *GlobalSpecType_ProtocolEsp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_ProtocolEsp)
	if !ok {
		that2, ok := that.(GlobalSpecType_ProtocolEsp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ProtocolEsp.Equal(that1.ProtocolEsp) {
		return false
	}
	return true
}
func (this *GlobalSpecType_ProtocolGre) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_ProtocolGre)
	if !ok {
		that2, ok := that.(GlobalSpecType_ProtocolGre)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ProtocolGre.Equal(that1.ProtocolGre) {
		return false
	}
	return true
}
func (this *GlobalSpecType_ProtocolIcmp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_ProtocolIcmp)
	if !ok {
		that2, ok := that.(GlobalSpecType_ProtocolIcmp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ProtocolIcmp.Equal(that1.ProtocolIcmp) {
		return false
	}
	return true
}
func (this *GlobalSpecType_ProtocolIcmp6) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_ProtocolIcmp6)
	if !ok {
		that2, ok := that.(GlobalSpecType_ProtocolIcmp6)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ProtocolIcmp6.Equal(that1.ProtocolIcmp6) {
		return false
	}
	return true
}
func (this *GlobalSpecType_ProtocolIpv6) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_ProtocolIpv6)
	if !ok {
		that2, ok := that.(GlobalSpecType_ProtocolIpv6)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ProtocolIpv6.Equal(that1.ProtocolIpv6) {
		return false
	}
	return true
}
func (this *GlobalSpecType_ProtocolAll) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_ProtocolAll)
	if !ok {
		that2, ok := that.(GlobalSpecType_ProtocolAll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ProtocolAll.Equal(that1.ProtocolAll) {
		return false
	}
	return true
}
func (this *GlobalSpecType_ActionDeny) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_ActionDeny)
	if !ok {
		that2, ok := that.(GlobalSpecType_ActionDeny)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActionDeny.Equal(that1.ActionDeny) {
		return false
	}
	return true
}
func (this *GlobalSpecType_ActionAllow) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_ActionAllow)
	if !ok {
		that2, ok := that.(GlobalSpecType_ActionAllow)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActionAllow.Equal(that1.ActionAllow) {
		return false
	}
	return true
}
func (this *GlobalSpecType_StateOff) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_StateOff)
	if !ok {
		that2, ok := that.(GlobalSpecType_StateOff)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StateOff.Equal(that1.StateOff) {
		return false
	}
	return true
}
func (this *GlobalSpecType_StateOn) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_StateOn)
	if !ok {
		that2, ok := that.(GlobalSpecType_StateOn)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StateOn.Equal(that1.StateOn) {
		return false
	}
	return true
}
func (this *GlobalSpecType_FragmentsDeny) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_FragmentsDeny)
	if !ok {
		that2, ok := that.(GlobalSpecType_FragmentsDeny)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FragmentsDeny.Equal(that1.FragmentsDeny) {
		return false
	}
	return true
}
func (this *GlobalSpecType_FragmentsAllow) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_FragmentsAllow)
	if !ok {
		that2, ok := that.(GlobalSpecType_FragmentsAllow)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FragmentsAllow.Equal(that1.FragmentsAllow) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Version == nil {
		if this.Version != nil {
			return false
		}
	} else if this.Version == nil {
		return false
	} else if !this.Version.Equal(that1.Version) {
		return false
	}
	if that1.SourcePrefix == nil {
		if this.SourcePrefix != nil {
			return false
		}
	} else if this.SourcePrefix == nil {
		return false
	} else if !this.SourcePrefix.Equal(that1.SourcePrefix) {
		return false
	}
	if that1.DestinationPrefix == nil {
		if this.DestinationPrefix != nil {
			return false
		}
	} else if this.DestinationPrefix == nil {
		return false
	} else if !this.DestinationPrefix.Equal(that1.DestinationPrefix) {
		return false
	}
	if that1.Protocol == nil {
		if this.Protocol != nil {
			return false
		}
	} else if this.Protocol == nil {
		return false
	} else if !this.Protocol.Equal(that1.Protocol) {
		return false
	}
	if that1.Action == nil {
		if this.Action != nil {
			return false
		}
	} else if this.Action == nil {
		return false
	} else if !this.Action.Equal(that1.Action) {
		return false
	}
	if that1.State == nil {
		if this.State != nil {
			return false
		}
	} else if this.State == nil {
		return false
	} else if !this.State.Equal(that1.State) {
		return false
	}
	if that1.Fragments == nil {
		if this.Fragments != nil {
			return false
		}
	} else if this.Fragments == nil {
		return false
	} else if !this.Fragments.Equal(that1.Fragments) {
		return false
	}
	return true
}
func (this *CreateSpecType_VersionIpv4) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_VersionIpv4)
	if !ok {
		that2, ok := that.(CreateSpecType_VersionIpv4)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VersionIpv4.Equal(that1.VersionIpv4) {
		return false
	}
	return true
}
func (this *CreateSpecType_VersionIpv6) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_VersionIpv6)
	if !ok {
		that2, ok := that.(CreateSpecType_VersionIpv6)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VersionIpv6.Equal(that1.VersionIpv6) {
		return false
	}
	return true
}
func (this *CreateSpecType_SourcePrefixSingle) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_SourcePrefixSingle)
	if !ok {
		that2, ok := that.(CreateSpecType_SourcePrefixSingle)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SourcePrefixSingle != that1.SourcePrefixSingle {
		return false
	}
	return true
}
func (this *CreateSpecType_SourcePrefixAll) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_SourcePrefixAll)
	if !ok {
		that2, ok := that.(CreateSpecType_SourcePrefixAll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SourcePrefixAll.Equal(that1.SourcePrefixAll) {
		return false
	}
	return true
}
func (this *CreateSpecType_DestinationPrefixSingle) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DestinationPrefixSingle)
	if !ok {
		that2, ok := that.(CreateSpecType_DestinationPrefixSingle)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DestinationPrefixSingle != that1.DestinationPrefixSingle {
		return false
	}
	return true
}
func (this *CreateSpecType_DestinationPrefixAll) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DestinationPrefixAll)
	if !ok {
		that2, ok := that.(CreateSpecType_DestinationPrefixAll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DestinationPrefixAll.Equal(that1.DestinationPrefixAll) {
		return false
	}
	return true
}
func (this *CreateSpecType_ProtocolUdp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_ProtocolUdp)
	if !ok {
		that2, ok := that.(CreateSpecType_ProtocolUdp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ProtocolUdp.Equal(that1.ProtocolUdp) {
		return false
	}
	return true
}
func (this *CreateSpecType_ProtocolTcp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_ProtocolTcp)
	if !ok {
		that2, ok := that.(CreateSpecType_ProtocolTcp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ProtocolTcp.Equal(that1.ProtocolTcp) {
		return false
	}
	return true
}
func (this *CreateSpecType_ProtocolAh) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_ProtocolAh)
	if !ok {
		that2, ok := that.(CreateSpecType_ProtocolAh)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ProtocolAh.Equal(that1.ProtocolAh) {
		return false
	}
	return true
}
func (this *CreateSpecType_ProtocolEsp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_ProtocolEsp)
	if !ok {
		that2, ok := that.(CreateSpecType_ProtocolEsp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ProtocolEsp.Equal(that1.ProtocolEsp) {
		return false
	}
	return true
}
func (this *CreateSpecType_ProtocolGre) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_ProtocolGre)
	if !ok {
		that2, ok := that.(CreateSpecType_ProtocolGre)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ProtocolGre.Equal(that1.ProtocolGre) {
		return false
	}
	return true
}
func (this *CreateSpecType_ProtocolIcmp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_ProtocolIcmp)
	if !ok {
		that2, ok := that.(CreateSpecType_ProtocolIcmp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ProtocolIcmp.Equal(that1.ProtocolIcmp) {
		return false
	}
	return true
}
func (this *CreateSpecType_ProtocolIcmp6) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_ProtocolIcmp6)
	if !ok {
		that2, ok := that.(CreateSpecType_ProtocolIcmp6)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ProtocolIcmp6.Equal(that1.ProtocolIcmp6) {
		return false
	}
	return true
}
func (this *CreateSpecType_ProtocolIpv6) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_ProtocolIpv6)
	if !ok {
		that2, ok := that.(CreateSpecType_ProtocolIpv6)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ProtocolIpv6.Equal(that1.ProtocolIpv6) {
		return false
	}
	return true
}
func (this *CreateSpecType_ProtocolAll) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_ProtocolAll)
	if !ok {
		that2, ok := that.(CreateSpecType_ProtocolAll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ProtocolAll.Equal(that1.ProtocolAll) {
		return false
	}
	return true
}
func (this *CreateSpecType_ActionDeny) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_ActionDeny)
	if !ok {
		that2, ok := that.(CreateSpecType_ActionDeny)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActionDeny.Equal(that1.ActionDeny) {
		return false
	}
	return true
}
func (this *CreateSpecType_ActionAllow) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_ActionAllow)
	if !ok {
		that2, ok := that.(CreateSpecType_ActionAllow)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActionAllow.Equal(that1.ActionAllow) {
		return false
	}
	return true
}
func (this *CreateSpecType_StateOff) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_StateOff)
	if !ok {
		that2, ok := that.(CreateSpecType_StateOff)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StateOff.Equal(that1.StateOff) {
		return false
	}
	return true
}
func (this *CreateSpecType_StateOn) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_StateOn)
	if !ok {
		that2, ok := that.(CreateSpecType_StateOn)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StateOn.Equal(that1.StateOn) {
		return false
	}
	return true
}
func (this *CreateSpecType_FragmentsDeny) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_FragmentsDeny)
	if !ok {
		that2, ok := that.(CreateSpecType_FragmentsDeny)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FragmentsDeny.Equal(that1.FragmentsDeny) {
		return false
	}
	return true
}
func (this *CreateSpecType_FragmentsAllow) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_FragmentsAllow)
	if !ok {
		that2, ok := that.(CreateSpecType_FragmentsAllow)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FragmentsAllow.Equal(that1.FragmentsAllow) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Version == nil {
		if this.Version != nil {
			return false
		}
	} else if this.Version == nil {
		return false
	} else if !this.Version.Equal(that1.Version) {
		return false
	}
	if that1.SourcePrefix == nil {
		if this.SourcePrefix != nil {
			return false
		}
	} else if this.SourcePrefix == nil {
		return false
	} else if !this.SourcePrefix.Equal(that1.SourcePrefix) {
		return false
	}
	if that1.DestinationPrefix == nil {
		if this.DestinationPrefix != nil {
			return false
		}
	} else if this.DestinationPrefix == nil {
		return false
	} else if !this.DestinationPrefix.Equal(that1.DestinationPrefix) {
		return false
	}
	if that1.Protocol == nil {
		if this.Protocol != nil {
			return false
		}
	} else if this.Protocol == nil {
		return false
	} else if !this.Protocol.Equal(that1.Protocol) {
		return false
	}
	if that1.Action == nil {
		if this.Action != nil {
			return false
		}
	} else if this.Action == nil {
		return false
	} else if !this.Action.Equal(that1.Action) {
		return false
	}
	if that1.State == nil {
		if this.State != nil {
			return false
		}
	} else if this.State == nil {
		return false
	} else if !this.State.Equal(that1.State) {
		return false
	}
	if that1.Fragments == nil {
		if this.Fragments != nil {
			return false
		}
	} else if this.Fragments == nil {
		return false
	} else if !this.Fragments.Equal(that1.Fragments) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_VersionIpv4) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_VersionIpv4)
	if !ok {
		that2, ok := that.(ReplaceSpecType_VersionIpv4)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VersionIpv4.Equal(that1.VersionIpv4) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_VersionIpv6) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_VersionIpv6)
	if !ok {
		that2, ok := that.(ReplaceSpecType_VersionIpv6)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VersionIpv6.Equal(that1.VersionIpv6) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_SourcePrefixSingle) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_SourcePrefixSingle)
	if !ok {
		that2, ok := that.(ReplaceSpecType_SourcePrefixSingle)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SourcePrefixSingle != that1.SourcePrefixSingle {
		return false
	}
	return true
}
func (this *ReplaceSpecType_SourcePrefixAll) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_SourcePrefixAll)
	if !ok {
		that2, ok := that.(ReplaceSpecType_SourcePrefixAll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SourcePrefixAll.Equal(that1.SourcePrefixAll) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DestinationPrefixSingle) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DestinationPrefixSingle)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DestinationPrefixSingle)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DestinationPrefixSingle != that1.DestinationPrefixSingle {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DestinationPrefixAll) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DestinationPrefixAll)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DestinationPrefixAll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DestinationPrefixAll.Equal(that1.DestinationPrefixAll) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_ProtocolUdp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_ProtocolUdp)
	if !ok {
		that2, ok := that.(ReplaceSpecType_ProtocolUdp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ProtocolUdp.Equal(that1.ProtocolUdp) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_ProtocolTcp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_ProtocolTcp)
	if !ok {
		that2, ok := that.(ReplaceSpecType_ProtocolTcp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ProtocolTcp.Equal(that1.ProtocolTcp) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_ProtocolAh) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_ProtocolAh)
	if !ok {
		that2, ok := that.(ReplaceSpecType_ProtocolAh)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ProtocolAh.Equal(that1.ProtocolAh) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_ProtocolEsp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_ProtocolEsp)
	if !ok {
		that2, ok := that.(ReplaceSpecType_ProtocolEsp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ProtocolEsp.Equal(that1.ProtocolEsp) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_ProtocolGre) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_ProtocolGre)
	if !ok {
		that2, ok := that.(ReplaceSpecType_ProtocolGre)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ProtocolGre.Equal(that1.ProtocolGre) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_ProtocolIcmp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_ProtocolIcmp)
	if !ok {
		that2, ok := that.(ReplaceSpecType_ProtocolIcmp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ProtocolIcmp.Equal(that1.ProtocolIcmp) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_ProtocolIcmp6) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_ProtocolIcmp6)
	if !ok {
		that2, ok := that.(ReplaceSpecType_ProtocolIcmp6)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ProtocolIcmp6.Equal(that1.ProtocolIcmp6) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_ProtocolIpv6) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_ProtocolIpv6)
	if !ok {
		that2, ok := that.(ReplaceSpecType_ProtocolIpv6)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ProtocolIpv6.Equal(that1.ProtocolIpv6) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_ProtocolAll) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_ProtocolAll)
	if !ok {
		that2, ok := that.(ReplaceSpecType_ProtocolAll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ProtocolAll.Equal(that1.ProtocolAll) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_ActionDeny) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_ActionDeny)
	if !ok {
		that2, ok := that.(ReplaceSpecType_ActionDeny)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActionDeny.Equal(that1.ActionDeny) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_ActionAllow) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_ActionAllow)
	if !ok {
		that2, ok := that.(ReplaceSpecType_ActionAllow)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActionAllow.Equal(that1.ActionAllow) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_StateOff) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_StateOff)
	if !ok {
		that2, ok := that.(ReplaceSpecType_StateOff)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StateOff.Equal(that1.StateOff) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_StateOn) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_StateOn)
	if !ok {
		that2, ok := that.(ReplaceSpecType_StateOn)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StateOn.Equal(that1.StateOn) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_FragmentsDeny) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_FragmentsDeny)
	if !ok {
		that2, ok := that.(ReplaceSpecType_FragmentsDeny)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FragmentsDeny.Equal(that1.FragmentsDeny) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_FragmentsAllow) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_FragmentsAllow)
	if !ok {
		that2, ok := that.(ReplaceSpecType_FragmentsAllow)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FragmentsAllow.Equal(that1.FragmentsAllow) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Version == nil {
		if this.Version != nil {
			return false
		}
	} else if this.Version == nil {
		return false
	} else if !this.Version.Equal(that1.Version) {
		return false
	}
	if that1.SourcePrefix == nil {
		if this.SourcePrefix != nil {
			return false
		}
	} else if this.SourcePrefix == nil {
		return false
	} else if !this.SourcePrefix.Equal(that1.SourcePrefix) {
		return false
	}
	if that1.DestinationPrefix == nil {
		if this.DestinationPrefix != nil {
			return false
		}
	} else if this.DestinationPrefix == nil {
		return false
	} else if !this.DestinationPrefix.Equal(that1.DestinationPrefix) {
		return false
	}
	if that1.Protocol == nil {
		if this.Protocol != nil {
			return false
		}
	} else if this.Protocol == nil {
		return false
	} else if !this.Protocol.Equal(that1.Protocol) {
		return false
	}
	if that1.Action == nil {
		if this.Action != nil {
			return false
		}
	} else if this.Action == nil {
		return false
	} else if !this.Action.Equal(that1.Action) {
		return false
	}
	if that1.State == nil {
		if this.State != nil {
			return false
		}
	} else if this.State == nil {
		return false
	} else if !this.State.Equal(that1.State) {
		return false
	}
	if that1.Fragments == nil {
		if this.Fragments != nil {
			return false
		}
	} else if this.Fragments == nil {
		return false
	} else if !this.Fragments.Equal(that1.Fragments) {
		return false
	}
	return true
}
func (this *GetSpecType_VersionIpv4) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_VersionIpv4)
	if !ok {
		that2, ok := that.(GetSpecType_VersionIpv4)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VersionIpv4.Equal(that1.VersionIpv4) {
		return false
	}
	return true
}
func (this *GetSpecType_VersionIpv6) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_VersionIpv6)
	if !ok {
		that2, ok := that.(GetSpecType_VersionIpv6)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VersionIpv6.Equal(that1.VersionIpv6) {
		return false
	}
	return true
}
func (this *GetSpecType_SourcePrefixSingle) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_SourcePrefixSingle)
	if !ok {
		that2, ok := that.(GetSpecType_SourcePrefixSingle)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SourcePrefixSingle != that1.SourcePrefixSingle {
		return false
	}
	return true
}
func (this *GetSpecType_SourcePrefixAll) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_SourcePrefixAll)
	if !ok {
		that2, ok := that.(GetSpecType_SourcePrefixAll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SourcePrefixAll.Equal(that1.SourcePrefixAll) {
		return false
	}
	return true
}
func (this *GetSpecType_DestinationPrefixSingle) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DestinationPrefixSingle)
	if !ok {
		that2, ok := that.(GetSpecType_DestinationPrefixSingle)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DestinationPrefixSingle != that1.DestinationPrefixSingle {
		return false
	}
	return true
}
func (this *GetSpecType_DestinationPrefixAll) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DestinationPrefixAll)
	if !ok {
		that2, ok := that.(GetSpecType_DestinationPrefixAll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DestinationPrefixAll.Equal(that1.DestinationPrefixAll) {
		return false
	}
	return true
}
func (this *GetSpecType_ProtocolUdp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_ProtocolUdp)
	if !ok {
		that2, ok := that.(GetSpecType_ProtocolUdp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ProtocolUdp.Equal(that1.ProtocolUdp) {
		return false
	}
	return true
}
func (this *GetSpecType_ProtocolTcp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_ProtocolTcp)
	if !ok {
		that2, ok := that.(GetSpecType_ProtocolTcp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ProtocolTcp.Equal(that1.ProtocolTcp) {
		return false
	}
	return true
}
func (this *GetSpecType_ProtocolAh) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_ProtocolAh)
	if !ok {
		that2, ok := that.(GetSpecType_ProtocolAh)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ProtocolAh.Equal(that1.ProtocolAh) {
		return false
	}
	return true
}
func (this *GetSpecType_ProtocolEsp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_ProtocolEsp)
	if !ok {
		that2, ok := that.(GetSpecType_ProtocolEsp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ProtocolEsp.Equal(that1.ProtocolEsp) {
		return false
	}
	return true
}
func (this *GetSpecType_ProtocolGre) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_ProtocolGre)
	if !ok {
		that2, ok := that.(GetSpecType_ProtocolGre)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ProtocolGre.Equal(that1.ProtocolGre) {
		return false
	}
	return true
}
func (this *GetSpecType_ProtocolIcmp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_ProtocolIcmp)
	if !ok {
		that2, ok := that.(GetSpecType_ProtocolIcmp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ProtocolIcmp.Equal(that1.ProtocolIcmp) {
		return false
	}
	return true
}
func (this *GetSpecType_ProtocolIcmp6) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_ProtocolIcmp6)
	if !ok {
		that2, ok := that.(GetSpecType_ProtocolIcmp6)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ProtocolIcmp6.Equal(that1.ProtocolIcmp6) {
		return false
	}
	return true
}
func (this *GetSpecType_ProtocolIpv6) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_ProtocolIpv6)
	if !ok {
		that2, ok := that.(GetSpecType_ProtocolIpv6)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ProtocolIpv6.Equal(that1.ProtocolIpv6) {
		return false
	}
	return true
}
func (this *GetSpecType_ProtocolAll) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_ProtocolAll)
	if !ok {
		that2, ok := that.(GetSpecType_ProtocolAll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ProtocolAll.Equal(that1.ProtocolAll) {
		return false
	}
	return true
}
func (this *GetSpecType_ActionDeny) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_ActionDeny)
	if !ok {
		that2, ok := that.(GetSpecType_ActionDeny)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActionDeny.Equal(that1.ActionDeny) {
		return false
	}
	return true
}
func (this *GetSpecType_ActionAllow) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_ActionAllow)
	if !ok {
		that2, ok := that.(GetSpecType_ActionAllow)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActionAllow.Equal(that1.ActionAllow) {
		return false
	}
	return true
}
func (this *GetSpecType_StateOff) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_StateOff)
	if !ok {
		that2, ok := that.(GetSpecType_StateOff)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StateOff.Equal(that1.StateOff) {
		return false
	}
	return true
}
func (this *GetSpecType_StateOn) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_StateOn)
	if !ok {
		that2, ok := that.(GetSpecType_StateOn)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StateOn.Equal(that1.StateOn) {
		return false
	}
	return true
}
func (this *GetSpecType_FragmentsDeny) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_FragmentsDeny)
	if !ok {
		that2, ok := that.(GetSpecType_FragmentsDeny)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FragmentsDeny.Equal(that1.FragmentsDeny) {
		return false
	}
	return true
}
func (this *GetSpecType_FragmentsAllow) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_FragmentsAllow)
	if !ok {
		that2, ok := that.(GetSpecType_FragmentsAllow)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FragmentsAllow.Equal(that1.FragmentsAllow) {
		return false
	}
	return true
}
func (this *UDPProtocol) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UDPProtocol)
	if !ok {
		that2, ok := that.(UDPProtocol)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.SourcePort == nil {
		if this.SourcePort != nil {
			return false
		}
	} else if this.SourcePort == nil {
		return false
	} else if !this.SourcePort.Equal(that1.SourcePort) {
		return false
	}
	if that1.DestinationPort == nil {
		if this.DestinationPort != nil {
			return false
		}
	} else if this.DestinationPort == nil {
		return false
	} else if !this.DestinationPort.Equal(that1.DestinationPort) {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	return true
}
func (this *UDPProtocol_SourcePortRange) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UDPProtocol_SourcePortRange)
	if !ok {
		that2, ok := that.(UDPProtocol_SourcePortRange)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SourcePortRange != that1.SourcePortRange {
		return false
	}
	return true
}
func (this *UDPProtocol_SourcePortAll) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UDPProtocol_SourcePortAll)
	if !ok {
		that2, ok := that.(UDPProtocol_SourcePortAll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SourcePortAll.Equal(that1.SourcePortAll) {
		return false
	}
	return true
}
func (this *UDPProtocol_DestinationPortRange) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UDPProtocol_DestinationPortRange)
	if !ok {
		that2, ok := that.(UDPProtocol_DestinationPortRange)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DestinationPortRange != that1.DestinationPortRange {
		return false
	}
	return true
}
func (this *UDPProtocol_DestinationPortAll) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UDPProtocol_DestinationPortAll)
	if !ok {
		that2, ok := that.(UDPProtocol_DestinationPortAll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DestinationPortAll.Equal(that1.DestinationPortAll) {
		return false
	}
	return true
}
func (this *TCPProtocol) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TCPProtocol)
	if !ok {
		that2, ok := that.(TCPProtocol)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.SourcePort == nil {
		if this.SourcePort != nil {
			return false
		}
	} else if this.SourcePort == nil {
		return false
	} else if !this.SourcePort.Equal(that1.SourcePort) {
		return false
	}
	if that1.DestinationPort == nil {
		if this.DestinationPort != nil {
			return false
		}
	} else if this.DestinationPort == nil {
		return false
	} else if !this.DestinationPort.Equal(that1.DestinationPort) {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	return true
}
func (this *TCPProtocol_SourcePortRange) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TCPProtocol_SourcePortRange)
	if !ok {
		that2, ok := that.(TCPProtocol_SourcePortRange)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SourcePortRange != that1.SourcePortRange {
		return false
	}
	return true
}
func (this *TCPProtocol_SourcePortAll) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TCPProtocol_SourcePortAll)
	if !ok {
		that2, ok := that.(TCPProtocol_SourcePortAll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SourcePortAll.Equal(that1.SourcePortAll) {
		return false
	}
	return true
}
func (this *TCPProtocol_DestinationPortRange) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TCPProtocol_DestinationPortRange)
	if !ok {
		that2, ok := that.(TCPProtocol_DestinationPortRange)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DestinationPortRange != that1.DestinationPortRange {
		return false
	}
	return true
}
func (this *TCPProtocol_DestinationPortAll) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TCPProtocol_DestinationPortAll)
	if !ok {
		that2, ok := that.(TCPProtocol_DestinationPortAll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DestinationPortAll.Equal(that1.DestinationPortAll) {
		return false
	}
	return true
}
func (this *ICMPProtocol) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ICMPProtocol)
	if !ok {
		that2, ok := that.(ICMPProtocol)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.EchoRequest != that1.EchoRequest {
		return false
	}
	if this.EchoReply != that1.EchoReply {
		return false
	}
	if this.ParameterProblem != that1.ParameterProblem {
		return false
	}
	if this.Redirect != that1.Redirect {
		return false
	}
	if this.SourceQuench != that1.SourceQuench {
		return false
	}
	if this.TimeExceeded != that1.TimeExceeded {
		return false
	}
	if this.Unreachable != that1.Unreachable {
		return false
	}
	return true
}
func (this *ICMP6Protocol) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ICMP6Protocol)
	if !ok {
		that2, ok := that.(ICMP6Protocol)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DestinationUnreachable != that1.DestinationUnreachable {
		return false
	}
	if this.EchoReply != that1.EchoReply {
		return false
	}
	if this.EchoRequest != that1.EchoRequest {
		return false
	}
	if this.NeighborAdvertisement != that1.NeighborAdvertisement {
		return false
	}
	if this.NeighborSolicit != that1.NeighborSolicit {
		return false
	}
	if this.PacketTooBig != that1.PacketTooBig {
		return false
	}
	if this.ParameterProblem != that1.ParameterProblem {
		return false
	}
	if this.Redirect != that1.Redirect {
		return false
	}
	if this.RouterAdvertisement != that1.RouterAdvertisement {
		return false
	}
	if this.RouterSolicit != that1.RouterSolicit {
		return false
	}
	if this.TimeExceeded != that1.TimeExceeded {
		return false
	}
	return true
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 25)
	s = append(s, "&infraprotect_firewall_rule.GlobalSpecType{")
	if this.Version != nil {
		s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	}
	if this.SourcePrefix != nil {
		s = append(s, "SourcePrefix: "+fmt.Sprintf("%#v", this.SourcePrefix)+",\n")
	}
	if this.DestinationPrefix != nil {
		s = append(s, "DestinationPrefix: "+fmt.Sprintf("%#v", this.DestinationPrefix)+",\n")
	}
	if this.Protocol != nil {
		s = append(s, "Protocol: "+fmt.Sprintf("%#v", this.Protocol)+",\n")
	}
	if this.Action != nil {
		s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	}
	if this.State != nil {
		s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	}
	if this.Fragments != nil {
		s = append(s, "Fragments: "+fmt.Sprintf("%#v", this.Fragments)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_VersionIpv4) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.GlobalSpecType_VersionIpv4{` +
		`VersionIpv4:` + fmt.Sprintf("%#v", this.VersionIpv4) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_VersionIpv6) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.GlobalSpecType_VersionIpv6{` +
		`VersionIpv6:` + fmt.Sprintf("%#v", this.VersionIpv6) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_SourcePrefixSingle) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.GlobalSpecType_SourcePrefixSingle{` +
		`SourcePrefixSingle:` + fmt.Sprintf("%#v", this.SourcePrefixSingle) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_SourcePrefixAll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.GlobalSpecType_SourcePrefixAll{` +
		`SourcePrefixAll:` + fmt.Sprintf("%#v", this.SourcePrefixAll) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DestinationPrefixSingle) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.GlobalSpecType_DestinationPrefixSingle{` +
		`DestinationPrefixSingle:` + fmt.Sprintf("%#v", this.DestinationPrefixSingle) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DestinationPrefixAll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.GlobalSpecType_DestinationPrefixAll{` +
		`DestinationPrefixAll:` + fmt.Sprintf("%#v", this.DestinationPrefixAll) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_ProtocolUdp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.GlobalSpecType_ProtocolUdp{` +
		`ProtocolUdp:` + fmt.Sprintf("%#v", this.ProtocolUdp) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_ProtocolTcp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.GlobalSpecType_ProtocolTcp{` +
		`ProtocolTcp:` + fmt.Sprintf("%#v", this.ProtocolTcp) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_ProtocolAh) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.GlobalSpecType_ProtocolAh{` +
		`ProtocolAh:` + fmt.Sprintf("%#v", this.ProtocolAh) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_ProtocolEsp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.GlobalSpecType_ProtocolEsp{` +
		`ProtocolEsp:` + fmt.Sprintf("%#v", this.ProtocolEsp) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_ProtocolGre) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.GlobalSpecType_ProtocolGre{` +
		`ProtocolGre:` + fmt.Sprintf("%#v", this.ProtocolGre) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_ProtocolIcmp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.GlobalSpecType_ProtocolIcmp{` +
		`ProtocolIcmp:` + fmt.Sprintf("%#v", this.ProtocolIcmp) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_ProtocolIcmp6) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.GlobalSpecType_ProtocolIcmp6{` +
		`ProtocolIcmp6:` + fmt.Sprintf("%#v", this.ProtocolIcmp6) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_ProtocolIpv6) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.GlobalSpecType_ProtocolIpv6{` +
		`ProtocolIpv6:` + fmt.Sprintf("%#v", this.ProtocolIpv6) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_ProtocolAll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.GlobalSpecType_ProtocolAll{` +
		`ProtocolAll:` + fmt.Sprintf("%#v", this.ProtocolAll) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_ActionDeny) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.GlobalSpecType_ActionDeny{` +
		`ActionDeny:` + fmt.Sprintf("%#v", this.ActionDeny) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_ActionAllow) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.GlobalSpecType_ActionAllow{` +
		`ActionAllow:` + fmt.Sprintf("%#v", this.ActionAllow) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_StateOff) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.GlobalSpecType_StateOff{` +
		`StateOff:` + fmt.Sprintf("%#v", this.StateOff) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_StateOn) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.GlobalSpecType_StateOn{` +
		`StateOn:` + fmt.Sprintf("%#v", this.StateOn) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_FragmentsDeny) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.GlobalSpecType_FragmentsDeny{` +
		`FragmentsDeny:` + fmt.Sprintf("%#v", this.FragmentsDeny) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_FragmentsAllow) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.GlobalSpecType_FragmentsAllow{` +
		`FragmentsAllow:` + fmt.Sprintf("%#v", this.FragmentsAllow) + `}`}, ", ")
	return s
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 25)
	s = append(s, "&infraprotect_firewall_rule.CreateSpecType{")
	if this.Version != nil {
		s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	}
	if this.SourcePrefix != nil {
		s = append(s, "SourcePrefix: "+fmt.Sprintf("%#v", this.SourcePrefix)+",\n")
	}
	if this.DestinationPrefix != nil {
		s = append(s, "DestinationPrefix: "+fmt.Sprintf("%#v", this.DestinationPrefix)+",\n")
	}
	if this.Protocol != nil {
		s = append(s, "Protocol: "+fmt.Sprintf("%#v", this.Protocol)+",\n")
	}
	if this.Action != nil {
		s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	}
	if this.State != nil {
		s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	}
	if this.Fragments != nil {
		s = append(s, "Fragments: "+fmt.Sprintf("%#v", this.Fragments)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType_VersionIpv4) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.CreateSpecType_VersionIpv4{` +
		`VersionIpv4:` + fmt.Sprintf("%#v", this.VersionIpv4) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_VersionIpv6) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.CreateSpecType_VersionIpv6{` +
		`VersionIpv6:` + fmt.Sprintf("%#v", this.VersionIpv6) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_SourcePrefixSingle) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.CreateSpecType_SourcePrefixSingle{` +
		`SourcePrefixSingle:` + fmt.Sprintf("%#v", this.SourcePrefixSingle) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_SourcePrefixAll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.CreateSpecType_SourcePrefixAll{` +
		`SourcePrefixAll:` + fmt.Sprintf("%#v", this.SourcePrefixAll) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DestinationPrefixSingle) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.CreateSpecType_DestinationPrefixSingle{` +
		`DestinationPrefixSingle:` + fmt.Sprintf("%#v", this.DestinationPrefixSingle) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DestinationPrefixAll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.CreateSpecType_DestinationPrefixAll{` +
		`DestinationPrefixAll:` + fmt.Sprintf("%#v", this.DestinationPrefixAll) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_ProtocolUdp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.CreateSpecType_ProtocolUdp{` +
		`ProtocolUdp:` + fmt.Sprintf("%#v", this.ProtocolUdp) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_ProtocolTcp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.CreateSpecType_ProtocolTcp{` +
		`ProtocolTcp:` + fmt.Sprintf("%#v", this.ProtocolTcp) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_ProtocolAh) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.CreateSpecType_ProtocolAh{` +
		`ProtocolAh:` + fmt.Sprintf("%#v", this.ProtocolAh) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_ProtocolEsp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.CreateSpecType_ProtocolEsp{` +
		`ProtocolEsp:` + fmt.Sprintf("%#v", this.ProtocolEsp) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_ProtocolGre) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.CreateSpecType_ProtocolGre{` +
		`ProtocolGre:` + fmt.Sprintf("%#v", this.ProtocolGre) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_ProtocolIcmp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.CreateSpecType_ProtocolIcmp{` +
		`ProtocolIcmp:` + fmt.Sprintf("%#v", this.ProtocolIcmp) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_ProtocolIcmp6) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.CreateSpecType_ProtocolIcmp6{` +
		`ProtocolIcmp6:` + fmt.Sprintf("%#v", this.ProtocolIcmp6) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_ProtocolIpv6) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.CreateSpecType_ProtocolIpv6{` +
		`ProtocolIpv6:` + fmt.Sprintf("%#v", this.ProtocolIpv6) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_ProtocolAll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.CreateSpecType_ProtocolAll{` +
		`ProtocolAll:` + fmt.Sprintf("%#v", this.ProtocolAll) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_ActionDeny) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.CreateSpecType_ActionDeny{` +
		`ActionDeny:` + fmt.Sprintf("%#v", this.ActionDeny) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_ActionAllow) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.CreateSpecType_ActionAllow{` +
		`ActionAllow:` + fmt.Sprintf("%#v", this.ActionAllow) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_StateOff) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.CreateSpecType_StateOff{` +
		`StateOff:` + fmt.Sprintf("%#v", this.StateOff) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_StateOn) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.CreateSpecType_StateOn{` +
		`StateOn:` + fmt.Sprintf("%#v", this.StateOn) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_FragmentsDeny) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.CreateSpecType_FragmentsDeny{` +
		`FragmentsDeny:` + fmt.Sprintf("%#v", this.FragmentsDeny) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_FragmentsAllow) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.CreateSpecType_FragmentsAllow{` +
		`FragmentsAllow:` + fmt.Sprintf("%#v", this.FragmentsAllow) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 25)
	s = append(s, "&infraprotect_firewall_rule.ReplaceSpecType{")
	if this.Version != nil {
		s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	}
	if this.SourcePrefix != nil {
		s = append(s, "SourcePrefix: "+fmt.Sprintf("%#v", this.SourcePrefix)+",\n")
	}
	if this.DestinationPrefix != nil {
		s = append(s, "DestinationPrefix: "+fmt.Sprintf("%#v", this.DestinationPrefix)+",\n")
	}
	if this.Protocol != nil {
		s = append(s, "Protocol: "+fmt.Sprintf("%#v", this.Protocol)+",\n")
	}
	if this.Action != nil {
		s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	}
	if this.State != nil {
		s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	}
	if this.Fragments != nil {
		s = append(s, "Fragments: "+fmt.Sprintf("%#v", this.Fragments)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType_VersionIpv4) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.ReplaceSpecType_VersionIpv4{` +
		`VersionIpv4:` + fmt.Sprintf("%#v", this.VersionIpv4) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_VersionIpv6) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.ReplaceSpecType_VersionIpv6{` +
		`VersionIpv6:` + fmt.Sprintf("%#v", this.VersionIpv6) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_SourcePrefixSingle) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.ReplaceSpecType_SourcePrefixSingle{` +
		`SourcePrefixSingle:` + fmt.Sprintf("%#v", this.SourcePrefixSingle) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_SourcePrefixAll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.ReplaceSpecType_SourcePrefixAll{` +
		`SourcePrefixAll:` + fmt.Sprintf("%#v", this.SourcePrefixAll) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DestinationPrefixSingle) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.ReplaceSpecType_DestinationPrefixSingle{` +
		`DestinationPrefixSingle:` + fmt.Sprintf("%#v", this.DestinationPrefixSingle) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DestinationPrefixAll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.ReplaceSpecType_DestinationPrefixAll{` +
		`DestinationPrefixAll:` + fmt.Sprintf("%#v", this.DestinationPrefixAll) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_ProtocolUdp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.ReplaceSpecType_ProtocolUdp{` +
		`ProtocolUdp:` + fmt.Sprintf("%#v", this.ProtocolUdp) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_ProtocolTcp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.ReplaceSpecType_ProtocolTcp{` +
		`ProtocolTcp:` + fmt.Sprintf("%#v", this.ProtocolTcp) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_ProtocolAh) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.ReplaceSpecType_ProtocolAh{` +
		`ProtocolAh:` + fmt.Sprintf("%#v", this.ProtocolAh) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_ProtocolEsp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.ReplaceSpecType_ProtocolEsp{` +
		`ProtocolEsp:` + fmt.Sprintf("%#v", this.ProtocolEsp) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_ProtocolGre) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.ReplaceSpecType_ProtocolGre{` +
		`ProtocolGre:` + fmt.Sprintf("%#v", this.ProtocolGre) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_ProtocolIcmp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.ReplaceSpecType_ProtocolIcmp{` +
		`ProtocolIcmp:` + fmt.Sprintf("%#v", this.ProtocolIcmp) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_ProtocolIcmp6) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.ReplaceSpecType_ProtocolIcmp6{` +
		`ProtocolIcmp6:` + fmt.Sprintf("%#v", this.ProtocolIcmp6) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_ProtocolIpv6) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.ReplaceSpecType_ProtocolIpv6{` +
		`ProtocolIpv6:` + fmt.Sprintf("%#v", this.ProtocolIpv6) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_ProtocolAll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.ReplaceSpecType_ProtocolAll{` +
		`ProtocolAll:` + fmt.Sprintf("%#v", this.ProtocolAll) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_ActionDeny) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.ReplaceSpecType_ActionDeny{` +
		`ActionDeny:` + fmt.Sprintf("%#v", this.ActionDeny) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_ActionAllow) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.ReplaceSpecType_ActionAllow{` +
		`ActionAllow:` + fmt.Sprintf("%#v", this.ActionAllow) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_StateOff) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.ReplaceSpecType_StateOff{` +
		`StateOff:` + fmt.Sprintf("%#v", this.StateOff) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_StateOn) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.ReplaceSpecType_StateOn{` +
		`StateOn:` + fmt.Sprintf("%#v", this.StateOn) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_FragmentsDeny) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.ReplaceSpecType_FragmentsDeny{` +
		`FragmentsDeny:` + fmt.Sprintf("%#v", this.FragmentsDeny) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_FragmentsAllow) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.ReplaceSpecType_FragmentsAllow{` +
		`FragmentsAllow:` + fmt.Sprintf("%#v", this.FragmentsAllow) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 25)
	s = append(s, "&infraprotect_firewall_rule.GetSpecType{")
	if this.Version != nil {
		s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	}
	if this.SourcePrefix != nil {
		s = append(s, "SourcePrefix: "+fmt.Sprintf("%#v", this.SourcePrefix)+",\n")
	}
	if this.DestinationPrefix != nil {
		s = append(s, "DestinationPrefix: "+fmt.Sprintf("%#v", this.DestinationPrefix)+",\n")
	}
	if this.Protocol != nil {
		s = append(s, "Protocol: "+fmt.Sprintf("%#v", this.Protocol)+",\n")
	}
	if this.Action != nil {
		s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	}
	if this.State != nil {
		s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	}
	if this.Fragments != nil {
		s = append(s, "Fragments: "+fmt.Sprintf("%#v", this.Fragments)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_VersionIpv4) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.GetSpecType_VersionIpv4{` +
		`VersionIpv4:` + fmt.Sprintf("%#v", this.VersionIpv4) + `}`}, ", ")
	return s
}
func (this *GetSpecType_VersionIpv6) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.GetSpecType_VersionIpv6{` +
		`VersionIpv6:` + fmt.Sprintf("%#v", this.VersionIpv6) + `}`}, ", ")
	return s
}
func (this *GetSpecType_SourcePrefixSingle) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.GetSpecType_SourcePrefixSingle{` +
		`SourcePrefixSingle:` + fmt.Sprintf("%#v", this.SourcePrefixSingle) + `}`}, ", ")
	return s
}
func (this *GetSpecType_SourcePrefixAll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.GetSpecType_SourcePrefixAll{` +
		`SourcePrefixAll:` + fmt.Sprintf("%#v", this.SourcePrefixAll) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DestinationPrefixSingle) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.GetSpecType_DestinationPrefixSingle{` +
		`DestinationPrefixSingle:` + fmt.Sprintf("%#v", this.DestinationPrefixSingle) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DestinationPrefixAll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.GetSpecType_DestinationPrefixAll{` +
		`DestinationPrefixAll:` + fmt.Sprintf("%#v", this.DestinationPrefixAll) + `}`}, ", ")
	return s
}
func (this *GetSpecType_ProtocolUdp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.GetSpecType_ProtocolUdp{` +
		`ProtocolUdp:` + fmt.Sprintf("%#v", this.ProtocolUdp) + `}`}, ", ")
	return s
}
func (this *GetSpecType_ProtocolTcp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.GetSpecType_ProtocolTcp{` +
		`ProtocolTcp:` + fmt.Sprintf("%#v", this.ProtocolTcp) + `}`}, ", ")
	return s
}
func (this *GetSpecType_ProtocolAh) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.GetSpecType_ProtocolAh{` +
		`ProtocolAh:` + fmt.Sprintf("%#v", this.ProtocolAh) + `}`}, ", ")
	return s
}
func (this *GetSpecType_ProtocolEsp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.GetSpecType_ProtocolEsp{` +
		`ProtocolEsp:` + fmt.Sprintf("%#v", this.ProtocolEsp) + `}`}, ", ")
	return s
}
func (this *GetSpecType_ProtocolGre) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.GetSpecType_ProtocolGre{` +
		`ProtocolGre:` + fmt.Sprintf("%#v", this.ProtocolGre) + `}`}, ", ")
	return s
}
func (this *GetSpecType_ProtocolIcmp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.GetSpecType_ProtocolIcmp{` +
		`ProtocolIcmp:` + fmt.Sprintf("%#v", this.ProtocolIcmp) + `}`}, ", ")
	return s
}
func (this *GetSpecType_ProtocolIcmp6) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.GetSpecType_ProtocolIcmp6{` +
		`ProtocolIcmp6:` + fmt.Sprintf("%#v", this.ProtocolIcmp6) + `}`}, ", ")
	return s
}
func (this *GetSpecType_ProtocolIpv6) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.GetSpecType_ProtocolIpv6{` +
		`ProtocolIpv6:` + fmt.Sprintf("%#v", this.ProtocolIpv6) + `}`}, ", ")
	return s
}
func (this *GetSpecType_ProtocolAll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.GetSpecType_ProtocolAll{` +
		`ProtocolAll:` + fmt.Sprintf("%#v", this.ProtocolAll) + `}`}, ", ")
	return s
}
func (this *GetSpecType_ActionDeny) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.GetSpecType_ActionDeny{` +
		`ActionDeny:` + fmt.Sprintf("%#v", this.ActionDeny) + `}`}, ", ")
	return s
}
func (this *GetSpecType_ActionAllow) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.GetSpecType_ActionAllow{` +
		`ActionAllow:` + fmt.Sprintf("%#v", this.ActionAllow) + `}`}, ", ")
	return s
}
func (this *GetSpecType_StateOff) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.GetSpecType_StateOff{` +
		`StateOff:` + fmt.Sprintf("%#v", this.StateOff) + `}`}, ", ")
	return s
}
func (this *GetSpecType_StateOn) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.GetSpecType_StateOn{` +
		`StateOn:` + fmt.Sprintf("%#v", this.StateOn) + `}`}, ", ")
	return s
}
func (this *GetSpecType_FragmentsDeny) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.GetSpecType_FragmentsDeny{` +
		`FragmentsDeny:` + fmt.Sprintf("%#v", this.FragmentsDeny) + `}`}, ", ")
	return s
}
func (this *GetSpecType_FragmentsAllow) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.GetSpecType_FragmentsAllow{` +
		`FragmentsAllow:` + fmt.Sprintf("%#v", this.FragmentsAllow) + `}`}, ", ")
	return s
}
func (this *UDPProtocol) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&infraprotect_firewall_rule.UDPProtocol{")
	if this.SourcePort != nil {
		s = append(s, "SourcePort: "+fmt.Sprintf("%#v", this.SourcePort)+",\n")
	}
	if this.DestinationPort != nil {
		s = append(s, "DestinationPort: "+fmt.Sprintf("%#v", this.DestinationPort)+",\n")
	}
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UDPProtocol_SourcePortRange) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.UDPProtocol_SourcePortRange{` +
		`SourcePortRange:` + fmt.Sprintf("%#v", this.SourcePortRange) + `}`}, ", ")
	return s
}
func (this *UDPProtocol_SourcePortAll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.UDPProtocol_SourcePortAll{` +
		`SourcePortAll:` + fmt.Sprintf("%#v", this.SourcePortAll) + `}`}, ", ")
	return s
}
func (this *UDPProtocol_DestinationPortRange) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.UDPProtocol_DestinationPortRange{` +
		`DestinationPortRange:` + fmt.Sprintf("%#v", this.DestinationPortRange) + `}`}, ", ")
	return s
}
func (this *UDPProtocol_DestinationPortAll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.UDPProtocol_DestinationPortAll{` +
		`DestinationPortAll:` + fmt.Sprintf("%#v", this.DestinationPortAll) + `}`}, ", ")
	return s
}
func (this *TCPProtocol) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&infraprotect_firewall_rule.TCPProtocol{")
	if this.SourcePort != nil {
		s = append(s, "SourcePort: "+fmt.Sprintf("%#v", this.SourcePort)+",\n")
	}
	if this.DestinationPort != nil {
		s = append(s, "DestinationPort: "+fmt.Sprintf("%#v", this.DestinationPort)+",\n")
	}
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TCPProtocol_SourcePortRange) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.TCPProtocol_SourcePortRange{` +
		`SourcePortRange:` + fmt.Sprintf("%#v", this.SourcePortRange) + `}`}, ", ")
	return s
}
func (this *TCPProtocol_SourcePortAll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.TCPProtocol_SourcePortAll{` +
		`SourcePortAll:` + fmt.Sprintf("%#v", this.SourcePortAll) + `}`}, ", ")
	return s
}
func (this *TCPProtocol_DestinationPortRange) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.TCPProtocol_DestinationPortRange{` +
		`DestinationPortRange:` + fmt.Sprintf("%#v", this.DestinationPortRange) + `}`}, ", ")
	return s
}
func (this *TCPProtocol_DestinationPortAll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&infraprotect_firewall_rule.TCPProtocol_DestinationPortAll{` +
		`DestinationPortAll:` + fmt.Sprintf("%#v", this.DestinationPortAll) + `}`}, ", ")
	return s
}
func (this *ICMPProtocol) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&infraprotect_firewall_rule.ICMPProtocol{")
	s = append(s, "EchoRequest: "+fmt.Sprintf("%#v", this.EchoRequest)+",\n")
	s = append(s, "EchoReply: "+fmt.Sprintf("%#v", this.EchoReply)+",\n")
	s = append(s, "ParameterProblem: "+fmt.Sprintf("%#v", this.ParameterProblem)+",\n")
	s = append(s, "Redirect: "+fmt.Sprintf("%#v", this.Redirect)+",\n")
	s = append(s, "SourceQuench: "+fmt.Sprintf("%#v", this.SourceQuench)+",\n")
	s = append(s, "TimeExceeded: "+fmt.Sprintf("%#v", this.TimeExceeded)+",\n")
	s = append(s, "Unreachable: "+fmt.Sprintf("%#v", this.Unreachable)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ICMP6Protocol) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&infraprotect_firewall_rule.ICMP6Protocol{")
	s = append(s, "DestinationUnreachable: "+fmt.Sprintf("%#v", this.DestinationUnreachable)+",\n")
	s = append(s, "EchoReply: "+fmt.Sprintf("%#v", this.EchoReply)+",\n")
	s = append(s, "EchoRequest: "+fmt.Sprintf("%#v", this.EchoRequest)+",\n")
	s = append(s, "NeighborAdvertisement: "+fmt.Sprintf("%#v", this.NeighborAdvertisement)+",\n")
	s = append(s, "NeighborSolicit: "+fmt.Sprintf("%#v", this.NeighborSolicit)+",\n")
	s = append(s, "PacketTooBig: "+fmt.Sprintf("%#v", this.PacketTooBig)+",\n")
	s = append(s, "ParameterProblem: "+fmt.Sprintf("%#v", this.ParameterProblem)+",\n")
	s = append(s, "Redirect: "+fmt.Sprintf("%#v", this.Redirect)+",\n")
	s = append(s, "RouterAdvertisement: "+fmt.Sprintf("%#v", this.RouterAdvertisement)+",\n")
	s = append(s, "RouterSolicit: "+fmt.Sprintf("%#v", this.RouterSolicit)+",\n")
	s = append(s, "TimeExceeded: "+fmt.Sprintf("%#v", this.TimeExceeded)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Fragments != nil {
		{
			size := m.Fragments.Size()
			i -= size
			if _, err := m.Fragments.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.State != nil {
		{
			size := m.State.Size()
			i -= size
			if _, err := m.State.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Action != nil {
		{
			size := m.Action.Size()
			i -= size
			if _, err := m.Action.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Protocol != nil {
		{
			size := m.Protocol.Size()
			i -= size
			if _, err := m.Protocol.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.DestinationPrefix != nil {
		{
			size := m.DestinationPrefix.Size()
			i -= size
			if _, err := m.DestinationPrefix.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SourcePrefix != nil {
		{
			size := m.SourcePrefix.Size()
			i -= size
			if _, err := m.SourcePrefix.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Version != nil {
		{
			size := m.Version.Size()
			i -= size
			if _, err := m.Version.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType_VersionIpv4) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_VersionIpv4) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VersionIpv4 != nil {
		{
			size, err := m.VersionIpv4.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_VersionIpv6) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_VersionIpv6) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VersionIpv6 != nil {
		{
			size, err := m.VersionIpv6.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_SourcePrefixSingle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_SourcePrefixSingle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.SourcePrefixSingle)
	copy(dAtA[i:], m.SourcePrefixSingle)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.SourcePrefixSingle)))
	i--
	dAtA[i] = 0x2a
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_SourcePrefixAll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_SourcePrefixAll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SourcePrefixAll != nil {
		{
			size, err := m.SourcePrefixAll.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DestinationPrefixSingle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DestinationPrefixSingle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.DestinationPrefixSingle)
	copy(dAtA[i:], m.DestinationPrefixSingle)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.DestinationPrefixSingle)))
	i--
	dAtA[i] = 0x42
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DestinationPrefixAll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DestinationPrefixAll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DestinationPrefixAll != nil {
		{
			size, err := m.DestinationPrefixAll.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_ProtocolUdp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_ProtocolUdp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProtocolUdp != nil {
		{
			size, err := m.ProtocolUdp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_ProtocolTcp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_ProtocolTcp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProtocolTcp != nil {
		{
			size, err := m.ProtocolTcp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_ProtocolAh) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_ProtocolAh) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProtocolAh != nil {
		{
			size, err := m.ProtocolAh.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_ProtocolEsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_ProtocolEsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProtocolEsp != nil {
		{
			size, err := m.ProtocolEsp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_ProtocolGre) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_ProtocolGre) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProtocolGre != nil {
		{
			size, err := m.ProtocolGre.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_ProtocolIcmp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_ProtocolIcmp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProtocolIcmp != nil {
		{
			size, err := m.ProtocolIcmp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_ProtocolIcmp6) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_ProtocolIcmp6) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProtocolIcmp6 != nil {
		{
			size, err := m.ProtocolIcmp6.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_ProtocolIpv6) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_ProtocolIpv6) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProtocolIpv6 != nil {
		{
			size, err := m.ProtocolIpv6.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_ProtocolAll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_ProtocolAll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProtocolAll != nil {
		{
			size, err := m.ProtocolAll.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_ActionDeny) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_ActionDeny) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActionDeny != nil {
		{
			size, err := m.ActionDeny.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_ActionAllow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_ActionAllow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActionAllow != nil {
		{
			size, err := m.ActionAllow.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_StateOff) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_StateOff) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StateOff != nil {
		{
			size, err := m.StateOff.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_StateOn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_StateOn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StateOn != nil {
		{
			size, err := m.StateOn.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_FragmentsDeny) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_FragmentsDeny) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FragmentsDeny != nil {
		{
			size, err := m.FragmentsDeny.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_FragmentsAllow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_FragmentsAllow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FragmentsAllow != nil {
		{
			size, err := m.FragmentsAllow.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Fragments != nil {
		{
			size := m.Fragments.Size()
			i -= size
			if _, err := m.Fragments.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.State != nil {
		{
			size := m.State.Size()
			i -= size
			if _, err := m.State.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Action != nil {
		{
			size := m.Action.Size()
			i -= size
			if _, err := m.Action.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Protocol != nil {
		{
			size := m.Protocol.Size()
			i -= size
			if _, err := m.Protocol.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.DestinationPrefix != nil {
		{
			size := m.DestinationPrefix.Size()
			i -= size
			if _, err := m.DestinationPrefix.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SourcePrefix != nil {
		{
			size := m.SourcePrefix.Size()
			i -= size
			if _, err := m.SourcePrefix.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Version != nil {
		{
			size := m.Version.Size()
			i -= size
			if _, err := m.Version.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType_VersionIpv4) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_VersionIpv4) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VersionIpv4 != nil {
		{
			size, err := m.VersionIpv4.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_VersionIpv6) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_VersionIpv6) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VersionIpv6 != nil {
		{
			size, err := m.VersionIpv6.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_SourcePrefixSingle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_SourcePrefixSingle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.SourcePrefixSingle)
	copy(dAtA[i:], m.SourcePrefixSingle)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.SourcePrefixSingle)))
	i--
	dAtA[i] = 0x2a
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_SourcePrefixAll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_SourcePrefixAll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SourcePrefixAll != nil {
		{
			size, err := m.SourcePrefixAll.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DestinationPrefixSingle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DestinationPrefixSingle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.DestinationPrefixSingle)
	copy(dAtA[i:], m.DestinationPrefixSingle)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.DestinationPrefixSingle)))
	i--
	dAtA[i] = 0x42
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DestinationPrefixAll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DestinationPrefixAll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DestinationPrefixAll != nil {
		{
			size, err := m.DestinationPrefixAll.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_ProtocolUdp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_ProtocolUdp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProtocolUdp != nil {
		{
			size, err := m.ProtocolUdp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_ProtocolTcp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_ProtocolTcp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProtocolTcp != nil {
		{
			size, err := m.ProtocolTcp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_ProtocolAh) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_ProtocolAh) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProtocolAh != nil {
		{
			size, err := m.ProtocolAh.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_ProtocolEsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_ProtocolEsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProtocolEsp != nil {
		{
			size, err := m.ProtocolEsp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_ProtocolGre) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_ProtocolGre) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProtocolGre != nil {
		{
			size, err := m.ProtocolGre.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_ProtocolIcmp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_ProtocolIcmp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProtocolIcmp != nil {
		{
			size, err := m.ProtocolIcmp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_ProtocolIcmp6) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_ProtocolIcmp6) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProtocolIcmp6 != nil {
		{
			size, err := m.ProtocolIcmp6.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_ProtocolIpv6) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_ProtocolIpv6) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProtocolIpv6 != nil {
		{
			size, err := m.ProtocolIpv6.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_ProtocolAll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_ProtocolAll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProtocolAll != nil {
		{
			size, err := m.ProtocolAll.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_ActionDeny) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_ActionDeny) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActionDeny != nil {
		{
			size, err := m.ActionDeny.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_ActionAllow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_ActionAllow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActionAllow != nil {
		{
			size, err := m.ActionAllow.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_StateOff) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_StateOff) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StateOff != nil {
		{
			size, err := m.StateOff.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_StateOn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_StateOn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StateOn != nil {
		{
			size, err := m.StateOn.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_FragmentsDeny) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_FragmentsDeny) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FragmentsDeny != nil {
		{
			size, err := m.FragmentsDeny.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_FragmentsAllow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_FragmentsAllow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FragmentsAllow != nil {
		{
			size, err := m.FragmentsAllow.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Fragments != nil {
		{
			size := m.Fragments.Size()
			i -= size
			if _, err := m.Fragments.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.State != nil {
		{
			size := m.State.Size()
			i -= size
			if _, err := m.State.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Action != nil {
		{
			size := m.Action.Size()
			i -= size
			if _, err := m.Action.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Protocol != nil {
		{
			size := m.Protocol.Size()
			i -= size
			if _, err := m.Protocol.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.DestinationPrefix != nil {
		{
			size := m.DestinationPrefix.Size()
			i -= size
			if _, err := m.DestinationPrefix.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SourcePrefix != nil {
		{
			size := m.SourcePrefix.Size()
			i -= size
			if _, err := m.SourcePrefix.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Version != nil {
		{
			size := m.Version.Size()
			i -= size
			if _, err := m.Version.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType_VersionIpv4) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_VersionIpv4) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VersionIpv4 != nil {
		{
			size, err := m.VersionIpv4.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_VersionIpv6) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_VersionIpv6) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VersionIpv6 != nil {
		{
			size, err := m.VersionIpv6.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_SourcePrefixSingle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_SourcePrefixSingle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.SourcePrefixSingle)
	copy(dAtA[i:], m.SourcePrefixSingle)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.SourcePrefixSingle)))
	i--
	dAtA[i] = 0x2a
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_SourcePrefixAll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_SourcePrefixAll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SourcePrefixAll != nil {
		{
			size, err := m.SourcePrefixAll.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DestinationPrefixSingle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DestinationPrefixSingle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.DestinationPrefixSingle)
	copy(dAtA[i:], m.DestinationPrefixSingle)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.DestinationPrefixSingle)))
	i--
	dAtA[i] = 0x42
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DestinationPrefixAll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DestinationPrefixAll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DestinationPrefixAll != nil {
		{
			size, err := m.DestinationPrefixAll.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_ProtocolUdp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_ProtocolUdp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProtocolUdp != nil {
		{
			size, err := m.ProtocolUdp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_ProtocolTcp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_ProtocolTcp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProtocolTcp != nil {
		{
			size, err := m.ProtocolTcp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_ProtocolAh) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_ProtocolAh) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProtocolAh != nil {
		{
			size, err := m.ProtocolAh.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_ProtocolEsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_ProtocolEsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProtocolEsp != nil {
		{
			size, err := m.ProtocolEsp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_ProtocolGre) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_ProtocolGre) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProtocolGre != nil {
		{
			size, err := m.ProtocolGre.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_ProtocolIcmp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_ProtocolIcmp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProtocolIcmp != nil {
		{
			size, err := m.ProtocolIcmp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_ProtocolIcmp6) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_ProtocolIcmp6) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProtocolIcmp6 != nil {
		{
			size, err := m.ProtocolIcmp6.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_ProtocolIpv6) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_ProtocolIpv6) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProtocolIpv6 != nil {
		{
			size, err := m.ProtocolIpv6.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_ProtocolAll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_ProtocolAll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProtocolAll != nil {
		{
			size, err := m.ProtocolAll.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_ActionDeny) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_ActionDeny) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActionDeny != nil {
		{
			size, err := m.ActionDeny.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_ActionAllow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_ActionAllow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActionAllow != nil {
		{
			size, err := m.ActionAllow.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_StateOff) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_StateOff) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StateOff != nil {
		{
			size, err := m.StateOff.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_StateOn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_StateOn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StateOn != nil {
		{
			size, err := m.StateOn.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_FragmentsDeny) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_FragmentsDeny) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FragmentsDeny != nil {
		{
			size, err := m.FragmentsDeny.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_FragmentsAllow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_FragmentsAllow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FragmentsAllow != nil {
		{
			size, err := m.FragmentsAllow.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Fragments != nil {
		{
			size := m.Fragments.Size()
			i -= size
			if _, err := m.Fragments.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.State != nil {
		{
			size := m.State.Size()
			i -= size
			if _, err := m.State.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Action != nil {
		{
			size := m.Action.Size()
			i -= size
			if _, err := m.Action.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Protocol != nil {
		{
			size := m.Protocol.Size()
			i -= size
			if _, err := m.Protocol.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.DestinationPrefix != nil {
		{
			size := m.DestinationPrefix.Size()
			i -= size
			if _, err := m.DestinationPrefix.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SourcePrefix != nil {
		{
			size := m.SourcePrefix.Size()
			i -= size
			if _, err := m.SourcePrefix.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Version != nil {
		{
			size := m.Version.Size()
			i -= size
			if _, err := m.Version.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType_VersionIpv4) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_VersionIpv4) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VersionIpv4 != nil {
		{
			size, err := m.VersionIpv4.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_VersionIpv6) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_VersionIpv6) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VersionIpv6 != nil {
		{
			size, err := m.VersionIpv6.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_SourcePrefixSingle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_SourcePrefixSingle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.SourcePrefixSingle)
	copy(dAtA[i:], m.SourcePrefixSingle)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.SourcePrefixSingle)))
	i--
	dAtA[i] = 0x2a
	return len(dAtA) - i, nil
}
func (m *GetSpecType_SourcePrefixAll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_SourcePrefixAll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SourcePrefixAll != nil {
		{
			size, err := m.SourcePrefixAll.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DestinationPrefixSingle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DestinationPrefixSingle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.DestinationPrefixSingle)
	copy(dAtA[i:], m.DestinationPrefixSingle)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.DestinationPrefixSingle)))
	i--
	dAtA[i] = 0x42
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DestinationPrefixAll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DestinationPrefixAll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DestinationPrefixAll != nil {
		{
			size, err := m.DestinationPrefixAll.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_ProtocolUdp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_ProtocolUdp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProtocolUdp != nil {
		{
			size, err := m.ProtocolUdp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_ProtocolTcp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_ProtocolTcp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProtocolTcp != nil {
		{
			size, err := m.ProtocolTcp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_ProtocolAh) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_ProtocolAh) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProtocolAh != nil {
		{
			size, err := m.ProtocolAh.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_ProtocolEsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_ProtocolEsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProtocolEsp != nil {
		{
			size, err := m.ProtocolEsp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_ProtocolGre) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_ProtocolGre) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProtocolGre != nil {
		{
			size, err := m.ProtocolGre.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_ProtocolIcmp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_ProtocolIcmp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProtocolIcmp != nil {
		{
			size, err := m.ProtocolIcmp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_ProtocolIcmp6) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_ProtocolIcmp6) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProtocolIcmp6 != nil {
		{
			size, err := m.ProtocolIcmp6.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_ProtocolIpv6) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_ProtocolIpv6) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProtocolIpv6 != nil {
		{
			size, err := m.ProtocolIpv6.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_ProtocolAll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_ProtocolAll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProtocolAll != nil {
		{
			size, err := m.ProtocolAll.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_ActionDeny) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_ActionDeny) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActionDeny != nil {
		{
			size, err := m.ActionDeny.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_ActionAllow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_ActionAllow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActionAllow != nil {
		{
			size, err := m.ActionAllow.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_StateOff) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_StateOff) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StateOff != nil {
		{
			size, err := m.StateOff.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_StateOn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_StateOn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StateOn != nil {
		{
			size, err := m.StateOn.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_FragmentsDeny) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_FragmentsDeny) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FragmentsDeny != nil {
		{
			size, err := m.FragmentsDeny.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_FragmentsAllow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_FragmentsAllow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FragmentsAllow != nil {
		{
			size, err := m.FragmentsAllow.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *UDPProtocol) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UDPProtocol) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UDPProtocol) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x3a
	}
	if m.DestinationPort != nil {
		{
			size := m.DestinationPort.Size()
			i -= size
			if _, err := m.DestinationPort.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SourcePort != nil {
		{
			size := m.SourcePort.Size()
			i -= size
			if _, err := m.SourcePort.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *UDPProtocol_SourcePortRange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UDPProtocol_SourcePortRange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.SourcePortRange)
	copy(dAtA[i:], m.SourcePortRange)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.SourcePortRange)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *UDPProtocol_SourcePortAll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UDPProtocol_SourcePortAll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SourcePortAll != nil {
		{
			size, err := m.SourcePortAll.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *UDPProtocol_DestinationPortRange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UDPProtocol_DestinationPortRange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.DestinationPortRange)
	copy(dAtA[i:], m.DestinationPortRange)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.DestinationPortRange)))
	i--
	dAtA[i] = 0x2a
	return len(dAtA) - i, nil
}
func (m *UDPProtocol_DestinationPortAll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UDPProtocol_DestinationPortAll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DestinationPortAll != nil {
		{
			size, err := m.DestinationPortAll.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *TCPProtocol) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TCPProtocol) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TCPProtocol) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x3a
	}
	if m.DestinationPort != nil {
		{
			size := m.DestinationPort.Size()
			i -= size
			if _, err := m.DestinationPort.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SourcePort != nil {
		{
			size := m.SourcePort.Size()
			i -= size
			if _, err := m.SourcePort.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *TCPProtocol_SourcePortRange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TCPProtocol_SourcePortRange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.SourcePortRange)
	copy(dAtA[i:], m.SourcePortRange)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.SourcePortRange)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *TCPProtocol_SourcePortAll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TCPProtocol_SourcePortAll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SourcePortAll != nil {
		{
			size, err := m.SourcePortAll.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *TCPProtocol_DestinationPortRange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TCPProtocol_DestinationPortRange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.DestinationPortRange)
	copy(dAtA[i:], m.DestinationPortRange)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.DestinationPortRange)))
	i--
	dAtA[i] = 0x2a
	return len(dAtA) - i, nil
}
func (m *TCPProtocol_DestinationPortAll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TCPProtocol_DestinationPortAll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DestinationPortAll != nil {
		{
			size, err := m.DestinationPortAll.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *ICMPProtocol) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ICMPProtocol) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ICMPProtocol) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Unreachable {
		i--
		if m.Unreachable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.TimeExceeded {
		i--
		if m.TimeExceeded {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.SourceQuench {
		i--
		if m.SourceQuench {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Redirect {
		i--
		if m.Redirect {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.ParameterProblem {
		i--
		if m.ParameterProblem {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.EchoReply {
		i--
		if m.EchoReply {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.EchoRequest {
		i--
		if m.EchoRequest {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ICMP6Protocol) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ICMP6Protocol) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ICMP6Protocol) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimeExceeded {
		i--
		if m.TimeExceeded {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.RouterSolicit {
		i--
		if m.RouterSolicit {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.RouterAdvertisement {
		i--
		if m.RouterAdvertisement {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.Redirect {
		i--
		if m.Redirect {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.ParameterProblem {
		i--
		if m.ParameterProblem {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.PacketTooBig {
		i--
		if m.PacketTooBig {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.NeighborSolicit {
		i--
		if m.NeighborSolicit {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.NeighborAdvertisement {
		i--
		if m.NeighborAdvertisement {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.EchoRequest {
		i--
		if m.EchoRequest {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.EchoReply {
		i--
		if m.EchoReply {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.DestinationUnreachable {
		i--
		if m.DestinationUnreachable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != nil {
		n += m.Version.Size()
	}
	if m.SourcePrefix != nil {
		n += m.SourcePrefix.Size()
	}
	if m.DestinationPrefix != nil {
		n += m.DestinationPrefix.Size()
	}
	if m.Protocol != nil {
		n += m.Protocol.Size()
	}
	if m.Action != nil {
		n += m.Action.Size()
	}
	if m.State != nil {
		n += m.State.Size()
	}
	if m.Fragments != nil {
		n += m.Fragments.Size()
	}
	return n
}

func (m *GlobalSpecType_VersionIpv4) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VersionIpv4 != nil {
		l = m.VersionIpv4.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_VersionIpv6) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VersionIpv6 != nil {
		l = m.VersionIpv6.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_SourcePrefixSingle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SourcePrefixSingle)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *GlobalSpecType_SourcePrefixAll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SourcePrefixAll != nil {
		l = m.SourcePrefixAll.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DestinationPrefixSingle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DestinationPrefixSingle)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *GlobalSpecType_DestinationPrefixAll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DestinationPrefixAll != nil {
		l = m.DestinationPrefixAll.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_ProtocolUdp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProtocolUdp != nil {
		l = m.ProtocolUdp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_ProtocolTcp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProtocolTcp != nil {
		l = m.ProtocolTcp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_ProtocolAh) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProtocolAh != nil {
		l = m.ProtocolAh.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_ProtocolEsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProtocolEsp != nil {
		l = m.ProtocolEsp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_ProtocolGre) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProtocolGre != nil {
		l = m.ProtocolGre.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_ProtocolIcmp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProtocolIcmp != nil {
		l = m.ProtocolIcmp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_ProtocolIcmp6) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProtocolIcmp6 != nil {
		l = m.ProtocolIcmp6.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_ProtocolIpv6) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProtocolIpv6 != nil {
		l = m.ProtocolIpv6.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_ProtocolAll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProtocolAll != nil {
		l = m.ProtocolAll.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_ActionDeny) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActionDeny != nil {
		l = m.ActionDeny.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_ActionAllow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActionAllow != nil {
		l = m.ActionAllow.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_StateOff) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StateOff != nil {
		l = m.StateOff.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_StateOn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StateOn != nil {
		l = m.StateOn.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_FragmentsDeny) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FragmentsDeny != nil {
		l = m.FragmentsDeny.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_FragmentsAllow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FragmentsAllow != nil {
		l = m.FragmentsAllow.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != nil {
		n += m.Version.Size()
	}
	if m.SourcePrefix != nil {
		n += m.SourcePrefix.Size()
	}
	if m.DestinationPrefix != nil {
		n += m.DestinationPrefix.Size()
	}
	if m.Protocol != nil {
		n += m.Protocol.Size()
	}
	if m.Action != nil {
		n += m.Action.Size()
	}
	if m.State != nil {
		n += m.State.Size()
	}
	if m.Fragments != nil {
		n += m.Fragments.Size()
	}
	return n
}

func (m *CreateSpecType_VersionIpv4) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VersionIpv4 != nil {
		l = m.VersionIpv4.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_VersionIpv6) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VersionIpv6 != nil {
		l = m.VersionIpv6.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_SourcePrefixSingle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SourcePrefixSingle)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *CreateSpecType_SourcePrefixAll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SourcePrefixAll != nil {
		l = m.SourcePrefixAll.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DestinationPrefixSingle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DestinationPrefixSingle)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *CreateSpecType_DestinationPrefixAll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DestinationPrefixAll != nil {
		l = m.DestinationPrefixAll.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_ProtocolUdp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProtocolUdp != nil {
		l = m.ProtocolUdp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_ProtocolTcp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProtocolTcp != nil {
		l = m.ProtocolTcp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_ProtocolAh) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProtocolAh != nil {
		l = m.ProtocolAh.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_ProtocolEsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProtocolEsp != nil {
		l = m.ProtocolEsp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_ProtocolGre) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProtocolGre != nil {
		l = m.ProtocolGre.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_ProtocolIcmp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProtocolIcmp != nil {
		l = m.ProtocolIcmp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_ProtocolIcmp6) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProtocolIcmp6 != nil {
		l = m.ProtocolIcmp6.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_ProtocolIpv6) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProtocolIpv6 != nil {
		l = m.ProtocolIpv6.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_ProtocolAll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProtocolAll != nil {
		l = m.ProtocolAll.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_ActionDeny) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActionDeny != nil {
		l = m.ActionDeny.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_ActionAllow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActionAllow != nil {
		l = m.ActionAllow.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_StateOff) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StateOff != nil {
		l = m.StateOff.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_StateOn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StateOn != nil {
		l = m.StateOn.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_FragmentsDeny) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FragmentsDeny != nil {
		l = m.FragmentsDeny.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_FragmentsAllow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FragmentsAllow != nil {
		l = m.FragmentsAllow.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != nil {
		n += m.Version.Size()
	}
	if m.SourcePrefix != nil {
		n += m.SourcePrefix.Size()
	}
	if m.DestinationPrefix != nil {
		n += m.DestinationPrefix.Size()
	}
	if m.Protocol != nil {
		n += m.Protocol.Size()
	}
	if m.Action != nil {
		n += m.Action.Size()
	}
	if m.State != nil {
		n += m.State.Size()
	}
	if m.Fragments != nil {
		n += m.Fragments.Size()
	}
	return n
}

func (m *ReplaceSpecType_VersionIpv4) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VersionIpv4 != nil {
		l = m.VersionIpv4.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_VersionIpv6) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VersionIpv6 != nil {
		l = m.VersionIpv6.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_SourcePrefixSingle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SourcePrefixSingle)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *ReplaceSpecType_SourcePrefixAll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SourcePrefixAll != nil {
		l = m.SourcePrefixAll.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DestinationPrefixSingle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DestinationPrefixSingle)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *ReplaceSpecType_DestinationPrefixAll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DestinationPrefixAll != nil {
		l = m.DestinationPrefixAll.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_ProtocolUdp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProtocolUdp != nil {
		l = m.ProtocolUdp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_ProtocolTcp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProtocolTcp != nil {
		l = m.ProtocolTcp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_ProtocolAh) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProtocolAh != nil {
		l = m.ProtocolAh.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_ProtocolEsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProtocolEsp != nil {
		l = m.ProtocolEsp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_ProtocolGre) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProtocolGre != nil {
		l = m.ProtocolGre.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_ProtocolIcmp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProtocolIcmp != nil {
		l = m.ProtocolIcmp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_ProtocolIcmp6) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProtocolIcmp6 != nil {
		l = m.ProtocolIcmp6.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_ProtocolIpv6) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProtocolIpv6 != nil {
		l = m.ProtocolIpv6.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_ProtocolAll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProtocolAll != nil {
		l = m.ProtocolAll.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_ActionDeny) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActionDeny != nil {
		l = m.ActionDeny.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_ActionAllow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActionAllow != nil {
		l = m.ActionAllow.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_StateOff) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StateOff != nil {
		l = m.StateOff.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_StateOn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StateOn != nil {
		l = m.StateOn.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_FragmentsDeny) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FragmentsDeny != nil {
		l = m.FragmentsDeny.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_FragmentsAllow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FragmentsAllow != nil {
		l = m.FragmentsAllow.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != nil {
		n += m.Version.Size()
	}
	if m.SourcePrefix != nil {
		n += m.SourcePrefix.Size()
	}
	if m.DestinationPrefix != nil {
		n += m.DestinationPrefix.Size()
	}
	if m.Protocol != nil {
		n += m.Protocol.Size()
	}
	if m.Action != nil {
		n += m.Action.Size()
	}
	if m.State != nil {
		n += m.State.Size()
	}
	if m.Fragments != nil {
		n += m.Fragments.Size()
	}
	return n
}

func (m *GetSpecType_VersionIpv4) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VersionIpv4 != nil {
		l = m.VersionIpv4.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_VersionIpv6) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VersionIpv6 != nil {
		l = m.VersionIpv6.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_SourcePrefixSingle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SourcePrefixSingle)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *GetSpecType_SourcePrefixAll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SourcePrefixAll != nil {
		l = m.SourcePrefixAll.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DestinationPrefixSingle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DestinationPrefixSingle)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *GetSpecType_DestinationPrefixAll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DestinationPrefixAll != nil {
		l = m.DestinationPrefixAll.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_ProtocolUdp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProtocolUdp != nil {
		l = m.ProtocolUdp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_ProtocolTcp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProtocolTcp != nil {
		l = m.ProtocolTcp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_ProtocolAh) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProtocolAh != nil {
		l = m.ProtocolAh.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_ProtocolEsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProtocolEsp != nil {
		l = m.ProtocolEsp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_ProtocolGre) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProtocolGre != nil {
		l = m.ProtocolGre.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_ProtocolIcmp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProtocolIcmp != nil {
		l = m.ProtocolIcmp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_ProtocolIcmp6) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProtocolIcmp6 != nil {
		l = m.ProtocolIcmp6.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_ProtocolIpv6) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProtocolIpv6 != nil {
		l = m.ProtocolIpv6.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_ProtocolAll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProtocolAll != nil {
		l = m.ProtocolAll.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_ActionDeny) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActionDeny != nil {
		l = m.ActionDeny.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_ActionAllow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActionAllow != nil {
		l = m.ActionAllow.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_StateOff) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StateOff != nil {
		l = m.StateOff.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_StateOn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StateOn != nil {
		l = m.StateOn.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_FragmentsDeny) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FragmentsDeny != nil {
		l = m.FragmentsDeny.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_FragmentsAllow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FragmentsAllow != nil {
		l = m.FragmentsAllow.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *UDPProtocol) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SourcePort != nil {
		n += m.SourcePort.Size()
	}
	if m.DestinationPort != nil {
		n += m.DestinationPort.Size()
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *UDPProtocol_SourcePortRange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SourcePortRange)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *UDPProtocol_SourcePortAll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SourcePortAll != nil {
		l = m.SourcePortAll.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *UDPProtocol_DestinationPortRange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DestinationPortRange)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *UDPProtocol_DestinationPortAll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DestinationPortAll != nil {
		l = m.DestinationPortAll.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *TCPProtocol) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SourcePort != nil {
		n += m.SourcePort.Size()
	}
	if m.DestinationPort != nil {
		n += m.DestinationPort.Size()
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *TCPProtocol_SourcePortRange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SourcePortRange)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *TCPProtocol_SourcePortAll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SourcePortAll != nil {
		l = m.SourcePortAll.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *TCPProtocol_DestinationPortRange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DestinationPortRange)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *TCPProtocol_DestinationPortAll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DestinationPortAll != nil {
		l = m.DestinationPortAll.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ICMPProtocol) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EchoRequest {
		n += 2
	}
	if m.EchoReply {
		n += 2
	}
	if m.ParameterProblem {
		n += 2
	}
	if m.Redirect {
		n += 2
	}
	if m.SourceQuench {
		n += 2
	}
	if m.TimeExceeded {
		n += 2
	}
	if m.Unreachable {
		n += 2
	}
	return n
}

func (m *ICMP6Protocol) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DestinationUnreachable {
		n += 2
	}
	if m.EchoReply {
		n += 2
	}
	if m.EchoRequest {
		n += 2
	}
	if m.NeighborAdvertisement {
		n += 2
	}
	if m.NeighborSolicit {
		n += 2
	}
	if m.PacketTooBig {
		n += 2
	}
	if m.ParameterProblem {
		n += 2
	}
	if m.Redirect {
		n += 2
	}
	if m.RouterAdvertisement {
		n += 2
	}
	if m.RouterSolicit {
		n += 2
	}
	if m.TimeExceeded {
		n += 2
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`SourcePrefix:` + fmt.Sprintf("%v", this.SourcePrefix) + `,`,
		`DestinationPrefix:` + fmt.Sprintf("%v", this.DestinationPrefix) + `,`,
		`Protocol:` + fmt.Sprintf("%v", this.Protocol) + `,`,
		`Action:` + fmt.Sprintf("%v", this.Action) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Fragments:` + fmt.Sprintf("%v", this.Fragments) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_VersionIpv4) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_VersionIpv4{`,
		`VersionIpv4:` + strings.Replace(fmt.Sprintf("%v", this.VersionIpv4), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_VersionIpv6) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_VersionIpv6{`,
		`VersionIpv6:` + strings.Replace(fmt.Sprintf("%v", this.VersionIpv6), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_SourcePrefixSingle) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_SourcePrefixSingle{`,
		`SourcePrefixSingle:` + fmt.Sprintf("%v", this.SourcePrefixSingle) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_SourcePrefixAll) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_SourcePrefixAll{`,
		`SourcePrefixAll:` + strings.Replace(fmt.Sprintf("%v", this.SourcePrefixAll), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DestinationPrefixSingle) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DestinationPrefixSingle{`,
		`DestinationPrefixSingle:` + fmt.Sprintf("%v", this.DestinationPrefixSingle) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DestinationPrefixAll) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DestinationPrefixAll{`,
		`DestinationPrefixAll:` + strings.Replace(fmt.Sprintf("%v", this.DestinationPrefixAll), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_ProtocolUdp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_ProtocolUdp{`,
		`ProtocolUdp:` + strings.Replace(fmt.Sprintf("%v", this.ProtocolUdp), "UDPProtocol", "UDPProtocol", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_ProtocolTcp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_ProtocolTcp{`,
		`ProtocolTcp:` + strings.Replace(fmt.Sprintf("%v", this.ProtocolTcp), "TCPProtocol", "TCPProtocol", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_ProtocolAh) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_ProtocolAh{`,
		`ProtocolAh:` + strings.Replace(fmt.Sprintf("%v", this.ProtocolAh), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_ProtocolEsp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_ProtocolEsp{`,
		`ProtocolEsp:` + strings.Replace(fmt.Sprintf("%v", this.ProtocolEsp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_ProtocolGre) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_ProtocolGre{`,
		`ProtocolGre:` + strings.Replace(fmt.Sprintf("%v", this.ProtocolGre), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_ProtocolIcmp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_ProtocolIcmp{`,
		`ProtocolIcmp:` + strings.Replace(fmt.Sprintf("%v", this.ProtocolIcmp), "ICMPProtocol", "ICMPProtocol", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_ProtocolIcmp6) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_ProtocolIcmp6{`,
		`ProtocolIcmp6:` + strings.Replace(fmt.Sprintf("%v", this.ProtocolIcmp6), "ICMP6Protocol", "ICMP6Protocol", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_ProtocolIpv6) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_ProtocolIpv6{`,
		`ProtocolIpv6:` + strings.Replace(fmt.Sprintf("%v", this.ProtocolIpv6), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_ProtocolAll) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_ProtocolAll{`,
		`ProtocolAll:` + strings.Replace(fmt.Sprintf("%v", this.ProtocolAll), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_ActionDeny) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_ActionDeny{`,
		`ActionDeny:` + strings.Replace(fmt.Sprintf("%v", this.ActionDeny), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_ActionAllow) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_ActionAllow{`,
		`ActionAllow:` + strings.Replace(fmt.Sprintf("%v", this.ActionAllow), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_StateOff) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_StateOff{`,
		`StateOff:` + strings.Replace(fmt.Sprintf("%v", this.StateOff), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_StateOn) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_StateOn{`,
		`StateOn:` + strings.Replace(fmt.Sprintf("%v", this.StateOn), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_FragmentsDeny) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_FragmentsDeny{`,
		`FragmentsDeny:` + strings.Replace(fmt.Sprintf("%v", this.FragmentsDeny), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_FragmentsAllow) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_FragmentsAllow{`,
		`FragmentsAllow:` + strings.Replace(fmt.Sprintf("%v", this.FragmentsAllow), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`SourcePrefix:` + fmt.Sprintf("%v", this.SourcePrefix) + `,`,
		`DestinationPrefix:` + fmt.Sprintf("%v", this.DestinationPrefix) + `,`,
		`Protocol:` + fmt.Sprintf("%v", this.Protocol) + `,`,
		`Action:` + fmt.Sprintf("%v", this.Action) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Fragments:` + fmt.Sprintf("%v", this.Fragments) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_VersionIpv4) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_VersionIpv4{`,
		`VersionIpv4:` + strings.Replace(fmt.Sprintf("%v", this.VersionIpv4), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_VersionIpv6) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_VersionIpv6{`,
		`VersionIpv6:` + strings.Replace(fmt.Sprintf("%v", this.VersionIpv6), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_SourcePrefixSingle) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_SourcePrefixSingle{`,
		`SourcePrefixSingle:` + fmt.Sprintf("%v", this.SourcePrefixSingle) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_SourcePrefixAll) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_SourcePrefixAll{`,
		`SourcePrefixAll:` + strings.Replace(fmt.Sprintf("%v", this.SourcePrefixAll), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DestinationPrefixSingle) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DestinationPrefixSingle{`,
		`DestinationPrefixSingle:` + fmt.Sprintf("%v", this.DestinationPrefixSingle) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DestinationPrefixAll) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DestinationPrefixAll{`,
		`DestinationPrefixAll:` + strings.Replace(fmt.Sprintf("%v", this.DestinationPrefixAll), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_ProtocolUdp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_ProtocolUdp{`,
		`ProtocolUdp:` + strings.Replace(fmt.Sprintf("%v", this.ProtocolUdp), "UDPProtocol", "UDPProtocol", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_ProtocolTcp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_ProtocolTcp{`,
		`ProtocolTcp:` + strings.Replace(fmt.Sprintf("%v", this.ProtocolTcp), "TCPProtocol", "TCPProtocol", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_ProtocolAh) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_ProtocolAh{`,
		`ProtocolAh:` + strings.Replace(fmt.Sprintf("%v", this.ProtocolAh), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_ProtocolEsp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_ProtocolEsp{`,
		`ProtocolEsp:` + strings.Replace(fmt.Sprintf("%v", this.ProtocolEsp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_ProtocolGre) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_ProtocolGre{`,
		`ProtocolGre:` + strings.Replace(fmt.Sprintf("%v", this.ProtocolGre), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_ProtocolIcmp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_ProtocolIcmp{`,
		`ProtocolIcmp:` + strings.Replace(fmt.Sprintf("%v", this.ProtocolIcmp), "ICMPProtocol", "ICMPProtocol", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_ProtocolIcmp6) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_ProtocolIcmp6{`,
		`ProtocolIcmp6:` + strings.Replace(fmt.Sprintf("%v", this.ProtocolIcmp6), "ICMP6Protocol", "ICMP6Protocol", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_ProtocolIpv6) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_ProtocolIpv6{`,
		`ProtocolIpv6:` + strings.Replace(fmt.Sprintf("%v", this.ProtocolIpv6), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_ProtocolAll) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_ProtocolAll{`,
		`ProtocolAll:` + strings.Replace(fmt.Sprintf("%v", this.ProtocolAll), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_ActionDeny) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_ActionDeny{`,
		`ActionDeny:` + strings.Replace(fmt.Sprintf("%v", this.ActionDeny), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_ActionAllow) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_ActionAllow{`,
		`ActionAllow:` + strings.Replace(fmt.Sprintf("%v", this.ActionAllow), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_StateOff) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_StateOff{`,
		`StateOff:` + strings.Replace(fmt.Sprintf("%v", this.StateOff), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_StateOn) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_StateOn{`,
		`StateOn:` + strings.Replace(fmt.Sprintf("%v", this.StateOn), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_FragmentsDeny) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_FragmentsDeny{`,
		`FragmentsDeny:` + strings.Replace(fmt.Sprintf("%v", this.FragmentsDeny), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_FragmentsAllow) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_FragmentsAllow{`,
		`FragmentsAllow:` + strings.Replace(fmt.Sprintf("%v", this.FragmentsAllow), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`SourcePrefix:` + fmt.Sprintf("%v", this.SourcePrefix) + `,`,
		`DestinationPrefix:` + fmt.Sprintf("%v", this.DestinationPrefix) + `,`,
		`Protocol:` + fmt.Sprintf("%v", this.Protocol) + `,`,
		`Action:` + fmt.Sprintf("%v", this.Action) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Fragments:` + fmt.Sprintf("%v", this.Fragments) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_VersionIpv4) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_VersionIpv4{`,
		`VersionIpv4:` + strings.Replace(fmt.Sprintf("%v", this.VersionIpv4), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_VersionIpv6) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_VersionIpv6{`,
		`VersionIpv6:` + strings.Replace(fmt.Sprintf("%v", this.VersionIpv6), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_SourcePrefixSingle) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_SourcePrefixSingle{`,
		`SourcePrefixSingle:` + fmt.Sprintf("%v", this.SourcePrefixSingle) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_SourcePrefixAll) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_SourcePrefixAll{`,
		`SourcePrefixAll:` + strings.Replace(fmt.Sprintf("%v", this.SourcePrefixAll), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DestinationPrefixSingle) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DestinationPrefixSingle{`,
		`DestinationPrefixSingle:` + fmt.Sprintf("%v", this.DestinationPrefixSingle) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DestinationPrefixAll) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DestinationPrefixAll{`,
		`DestinationPrefixAll:` + strings.Replace(fmt.Sprintf("%v", this.DestinationPrefixAll), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_ProtocolUdp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_ProtocolUdp{`,
		`ProtocolUdp:` + strings.Replace(fmt.Sprintf("%v", this.ProtocolUdp), "UDPProtocol", "UDPProtocol", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_ProtocolTcp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_ProtocolTcp{`,
		`ProtocolTcp:` + strings.Replace(fmt.Sprintf("%v", this.ProtocolTcp), "TCPProtocol", "TCPProtocol", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_ProtocolAh) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_ProtocolAh{`,
		`ProtocolAh:` + strings.Replace(fmt.Sprintf("%v", this.ProtocolAh), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_ProtocolEsp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_ProtocolEsp{`,
		`ProtocolEsp:` + strings.Replace(fmt.Sprintf("%v", this.ProtocolEsp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_ProtocolGre) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_ProtocolGre{`,
		`ProtocolGre:` + strings.Replace(fmt.Sprintf("%v", this.ProtocolGre), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_ProtocolIcmp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_ProtocolIcmp{`,
		`ProtocolIcmp:` + strings.Replace(fmt.Sprintf("%v", this.ProtocolIcmp), "ICMPProtocol", "ICMPProtocol", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_ProtocolIcmp6) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_ProtocolIcmp6{`,
		`ProtocolIcmp6:` + strings.Replace(fmt.Sprintf("%v", this.ProtocolIcmp6), "ICMP6Protocol", "ICMP6Protocol", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_ProtocolIpv6) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_ProtocolIpv6{`,
		`ProtocolIpv6:` + strings.Replace(fmt.Sprintf("%v", this.ProtocolIpv6), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_ProtocolAll) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_ProtocolAll{`,
		`ProtocolAll:` + strings.Replace(fmt.Sprintf("%v", this.ProtocolAll), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_ActionDeny) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_ActionDeny{`,
		`ActionDeny:` + strings.Replace(fmt.Sprintf("%v", this.ActionDeny), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_ActionAllow) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_ActionAllow{`,
		`ActionAllow:` + strings.Replace(fmt.Sprintf("%v", this.ActionAllow), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_StateOff) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_StateOff{`,
		`StateOff:` + strings.Replace(fmt.Sprintf("%v", this.StateOff), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_StateOn) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_StateOn{`,
		`StateOn:` + strings.Replace(fmt.Sprintf("%v", this.StateOn), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_FragmentsDeny) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_FragmentsDeny{`,
		`FragmentsDeny:` + strings.Replace(fmt.Sprintf("%v", this.FragmentsDeny), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_FragmentsAllow) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_FragmentsAllow{`,
		`FragmentsAllow:` + strings.Replace(fmt.Sprintf("%v", this.FragmentsAllow), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`SourcePrefix:` + fmt.Sprintf("%v", this.SourcePrefix) + `,`,
		`DestinationPrefix:` + fmt.Sprintf("%v", this.DestinationPrefix) + `,`,
		`Protocol:` + fmt.Sprintf("%v", this.Protocol) + `,`,
		`Action:` + fmt.Sprintf("%v", this.Action) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Fragments:` + fmt.Sprintf("%v", this.Fragments) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_VersionIpv4) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_VersionIpv4{`,
		`VersionIpv4:` + strings.Replace(fmt.Sprintf("%v", this.VersionIpv4), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_VersionIpv6) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_VersionIpv6{`,
		`VersionIpv6:` + strings.Replace(fmt.Sprintf("%v", this.VersionIpv6), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_SourcePrefixSingle) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_SourcePrefixSingle{`,
		`SourcePrefixSingle:` + fmt.Sprintf("%v", this.SourcePrefixSingle) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_SourcePrefixAll) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_SourcePrefixAll{`,
		`SourcePrefixAll:` + strings.Replace(fmt.Sprintf("%v", this.SourcePrefixAll), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DestinationPrefixSingle) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DestinationPrefixSingle{`,
		`DestinationPrefixSingle:` + fmt.Sprintf("%v", this.DestinationPrefixSingle) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DestinationPrefixAll) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DestinationPrefixAll{`,
		`DestinationPrefixAll:` + strings.Replace(fmt.Sprintf("%v", this.DestinationPrefixAll), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_ProtocolUdp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_ProtocolUdp{`,
		`ProtocolUdp:` + strings.Replace(fmt.Sprintf("%v", this.ProtocolUdp), "UDPProtocol", "UDPProtocol", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_ProtocolTcp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_ProtocolTcp{`,
		`ProtocolTcp:` + strings.Replace(fmt.Sprintf("%v", this.ProtocolTcp), "TCPProtocol", "TCPProtocol", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_ProtocolAh) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_ProtocolAh{`,
		`ProtocolAh:` + strings.Replace(fmt.Sprintf("%v", this.ProtocolAh), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_ProtocolEsp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_ProtocolEsp{`,
		`ProtocolEsp:` + strings.Replace(fmt.Sprintf("%v", this.ProtocolEsp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_ProtocolGre) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_ProtocolGre{`,
		`ProtocolGre:` + strings.Replace(fmt.Sprintf("%v", this.ProtocolGre), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_ProtocolIcmp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_ProtocolIcmp{`,
		`ProtocolIcmp:` + strings.Replace(fmt.Sprintf("%v", this.ProtocolIcmp), "ICMPProtocol", "ICMPProtocol", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_ProtocolIcmp6) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_ProtocolIcmp6{`,
		`ProtocolIcmp6:` + strings.Replace(fmt.Sprintf("%v", this.ProtocolIcmp6), "ICMP6Protocol", "ICMP6Protocol", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_ProtocolIpv6) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_ProtocolIpv6{`,
		`ProtocolIpv6:` + strings.Replace(fmt.Sprintf("%v", this.ProtocolIpv6), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_ProtocolAll) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_ProtocolAll{`,
		`ProtocolAll:` + strings.Replace(fmt.Sprintf("%v", this.ProtocolAll), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_ActionDeny) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_ActionDeny{`,
		`ActionDeny:` + strings.Replace(fmt.Sprintf("%v", this.ActionDeny), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_ActionAllow) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_ActionAllow{`,
		`ActionAllow:` + strings.Replace(fmt.Sprintf("%v", this.ActionAllow), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_StateOff) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_StateOff{`,
		`StateOff:` + strings.Replace(fmt.Sprintf("%v", this.StateOff), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_StateOn) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_StateOn{`,
		`StateOn:` + strings.Replace(fmt.Sprintf("%v", this.StateOn), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_FragmentsDeny) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_FragmentsDeny{`,
		`FragmentsDeny:` + strings.Replace(fmt.Sprintf("%v", this.FragmentsDeny), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_FragmentsAllow) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_FragmentsAllow{`,
		`FragmentsAllow:` + strings.Replace(fmt.Sprintf("%v", this.FragmentsAllow), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UDPProtocol) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UDPProtocol{`,
		`SourcePort:` + fmt.Sprintf("%v", this.SourcePort) + `,`,
		`DestinationPort:` + fmt.Sprintf("%v", this.DestinationPort) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UDPProtocol_SourcePortRange) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UDPProtocol_SourcePortRange{`,
		`SourcePortRange:` + fmt.Sprintf("%v", this.SourcePortRange) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UDPProtocol_SourcePortAll) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UDPProtocol_SourcePortAll{`,
		`SourcePortAll:` + strings.Replace(fmt.Sprintf("%v", this.SourcePortAll), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UDPProtocol_DestinationPortRange) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UDPProtocol_DestinationPortRange{`,
		`DestinationPortRange:` + fmt.Sprintf("%v", this.DestinationPortRange) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UDPProtocol_DestinationPortAll) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UDPProtocol_DestinationPortAll{`,
		`DestinationPortAll:` + strings.Replace(fmt.Sprintf("%v", this.DestinationPortAll), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TCPProtocol) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TCPProtocol{`,
		`SourcePort:` + fmt.Sprintf("%v", this.SourcePort) + `,`,
		`DestinationPort:` + fmt.Sprintf("%v", this.DestinationPort) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TCPProtocol_SourcePortRange) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TCPProtocol_SourcePortRange{`,
		`SourcePortRange:` + fmt.Sprintf("%v", this.SourcePortRange) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TCPProtocol_SourcePortAll) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TCPProtocol_SourcePortAll{`,
		`SourcePortAll:` + strings.Replace(fmt.Sprintf("%v", this.SourcePortAll), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TCPProtocol_DestinationPortRange) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TCPProtocol_DestinationPortRange{`,
		`DestinationPortRange:` + fmt.Sprintf("%v", this.DestinationPortRange) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TCPProtocol_DestinationPortAll) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TCPProtocol_DestinationPortAll{`,
		`DestinationPortAll:` + strings.Replace(fmt.Sprintf("%v", this.DestinationPortAll), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ICMPProtocol) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ICMPProtocol{`,
		`EchoRequest:` + fmt.Sprintf("%v", this.EchoRequest) + `,`,
		`EchoReply:` + fmt.Sprintf("%v", this.EchoReply) + `,`,
		`ParameterProblem:` + fmt.Sprintf("%v", this.ParameterProblem) + `,`,
		`Redirect:` + fmt.Sprintf("%v", this.Redirect) + `,`,
		`SourceQuench:` + fmt.Sprintf("%v", this.SourceQuench) + `,`,
		`TimeExceeded:` + fmt.Sprintf("%v", this.TimeExceeded) + `,`,
		`Unreachable:` + fmt.Sprintf("%v", this.Unreachable) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ICMP6Protocol) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ICMP6Protocol{`,
		`DestinationUnreachable:` + fmt.Sprintf("%v", this.DestinationUnreachable) + `,`,
		`EchoReply:` + fmt.Sprintf("%v", this.EchoReply) + `,`,
		`EchoRequest:` + fmt.Sprintf("%v", this.EchoRequest) + `,`,
		`NeighborAdvertisement:` + fmt.Sprintf("%v", this.NeighborAdvertisement) + `,`,
		`NeighborSolicit:` + fmt.Sprintf("%v", this.NeighborSolicit) + `,`,
		`PacketTooBig:` + fmt.Sprintf("%v", this.PacketTooBig) + `,`,
		`ParameterProblem:` + fmt.Sprintf("%v", this.ParameterProblem) + `,`,
		`Redirect:` + fmt.Sprintf("%v", this.Redirect) + `,`,
		`RouterAdvertisement:` + fmt.Sprintf("%v", this.RouterAdvertisement) + `,`,
		`RouterSolicit:` + fmt.Sprintf("%v", this.RouterSolicit) + `,`,
		`TimeExceeded:` + fmt.Sprintf("%v", this.TimeExceeded) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionIpv4", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Version = &GlobalSpecType_VersionIpv4{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionIpv6", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Version = &GlobalSpecType_VersionIpv6{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourcePrefixSingle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourcePrefix = &GlobalSpecType_SourcePrefixSingle{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourcePrefixAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SourcePrefix = &GlobalSpecType_SourcePrefixAll{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationPrefixSingle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationPrefix = &GlobalSpecType_DestinationPrefixSingle{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationPrefixAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DestinationPrefix = &GlobalSpecType_DestinationPrefixAll{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolUdp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UDPProtocol{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Protocol = &GlobalSpecType_ProtocolUdp{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolTcp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TCPProtocol{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Protocol = &GlobalSpecType_ProtocolTcp{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolAh", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Protocol = &GlobalSpecType_ProtocolAh{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolEsp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Protocol = &GlobalSpecType_ProtocolEsp{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolGre", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Protocol = &GlobalSpecType_ProtocolGre{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolIcmp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ICMPProtocol{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Protocol = &GlobalSpecType_ProtocolIcmp{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolIcmp6", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ICMP6Protocol{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Protocol = &GlobalSpecType_ProtocolIcmp6{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolIpv6", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Protocol = &GlobalSpecType_ProtocolIpv6{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Protocol = &GlobalSpecType_ProtocolAll{v}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionDeny", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Action = &GlobalSpecType_ActionDeny{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionAllow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Action = &GlobalSpecType_ActionAllow{v}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateOff", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.State = &GlobalSpecType_StateOff{v}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateOn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.State = &GlobalSpecType_StateOn{v}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FragmentsDeny", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Fragments = &GlobalSpecType_FragmentsDeny{v}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FragmentsAllow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Fragments = &GlobalSpecType_FragmentsAllow{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionIpv4", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Version = &CreateSpecType_VersionIpv4{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionIpv6", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Version = &CreateSpecType_VersionIpv6{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourcePrefixSingle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourcePrefix = &CreateSpecType_SourcePrefixSingle{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourcePrefixAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SourcePrefix = &CreateSpecType_SourcePrefixAll{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationPrefixSingle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationPrefix = &CreateSpecType_DestinationPrefixSingle{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationPrefixAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DestinationPrefix = &CreateSpecType_DestinationPrefixAll{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolUdp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UDPProtocol{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Protocol = &CreateSpecType_ProtocolUdp{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolTcp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TCPProtocol{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Protocol = &CreateSpecType_ProtocolTcp{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolAh", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Protocol = &CreateSpecType_ProtocolAh{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolEsp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Protocol = &CreateSpecType_ProtocolEsp{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolGre", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Protocol = &CreateSpecType_ProtocolGre{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolIcmp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ICMPProtocol{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Protocol = &CreateSpecType_ProtocolIcmp{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolIcmp6", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ICMP6Protocol{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Protocol = &CreateSpecType_ProtocolIcmp6{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolIpv6", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Protocol = &CreateSpecType_ProtocolIpv6{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Protocol = &CreateSpecType_ProtocolAll{v}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionDeny", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Action = &CreateSpecType_ActionDeny{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionAllow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Action = &CreateSpecType_ActionAllow{v}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateOff", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.State = &CreateSpecType_StateOff{v}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateOn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.State = &CreateSpecType_StateOn{v}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FragmentsDeny", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Fragments = &CreateSpecType_FragmentsDeny{v}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FragmentsAllow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Fragments = &CreateSpecType_FragmentsAllow{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionIpv4", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Version = &ReplaceSpecType_VersionIpv4{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionIpv6", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Version = &ReplaceSpecType_VersionIpv6{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourcePrefixSingle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourcePrefix = &ReplaceSpecType_SourcePrefixSingle{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourcePrefixAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SourcePrefix = &ReplaceSpecType_SourcePrefixAll{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationPrefixSingle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationPrefix = &ReplaceSpecType_DestinationPrefixSingle{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationPrefixAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DestinationPrefix = &ReplaceSpecType_DestinationPrefixAll{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolUdp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UDPProtocol{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Protocol = &ReplaceSpecType_ProtocolUdp{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolTcp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TCPProtocol{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Protocol = &ReplaceSpecType_ProtocolTcp{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolAh", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Protocol = &ReplaceSpecType_ProtocolAh{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolEsp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Protocol = &ReplaceSpecType_ProtocolEsp{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolGre", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Protocol = &ReplaceSpecType_ProtocolGre{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolIcmp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ICMPProtocol{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Protocol = &ReplaceSpecType_ProtocolIcmp{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolIcmp6", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ICMP6Protocol{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Protocol = &ReplaceSpecType_ProtocolIcmp6{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolIpv6", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Protocol = &ReplaceSpecType_ProtocolIpv6{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Protocol = &ReplaceSpecType_ProtocolAll{v}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionDeny", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Action = &ReplaceSpecType_ActionDeny{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionAllow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Action = &ReplaceSpecType_ActionAllow{v}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateOff", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.State = &ReplaceSpecType_StateOff{v}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateOn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.State = &ReplaceSpecType_StateOn{v}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FragmentsDeny", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Fragments = &ReplaceSpecType_FragmentsDeny{v}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FragmentsAllow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Fragments = &ReplaceSpecType_FragmentsAllow{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionIpv4", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Version = &GetSpecType_VersionIpv4{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionIpv6", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Version = &GetSpecType_VersionIpv6{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourcePrefixSingle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourcePrefix = &GetSpecType_SourcePrefixSingle{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourcePrefixAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SourcePrefix = &GetSpecType_SourcePrefixAll{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationPrefixSingle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationPrefix = &GetSpecType_DestinationPrefixSingle{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationPrefixAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DestinationPrefix = &GetSpecType_DestinationPrefixAll{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolUdp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UDPProtocol{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Protocol = &GetSpecType_ProtocolUdp{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolTcp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TCPProtocol{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Protocol = &GetSpecType_ProtocolTcp{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolAh", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Protocol = &GetSpecType_ProtocolAh{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolEsp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Protocol = &GetSpecType_ProtocolEsp{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolGre", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Protocol = &GetSpecType_ProtocolGre{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolIcmp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ICMPProtocol{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Protocol = &GetSpecType_ProtocolIcmp{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolIcmp6", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ICMP6Protocol{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Protocol = &GetSpecType_ProtocolIcmp6{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolIpv6", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Protocol = &GetSpecType_ProtocolIpv6{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Protocol = &GetSpecType_ProtocolAll{v}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionDeny", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Action = &GetSpecType_ActionDeny{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionAllow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Action = &GetSpecType_ActionAllow{v}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateOff", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.State = &GetSpecType_StateOff{v}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateOn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.State = &GetSpecType_StateOn{v}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FragmentsDeny", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Fragments = &GetSpecType_FragmentsDeny{v}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FragmentsAllow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Fragments = &GetSpecType_FragmentsAllow{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UDPProtocol) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UDPProtocol: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UDPProtocol: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourcePortRange", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourcePort = &UDPProtocol_SourcePortRange{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourcePortAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SourcePort = &UDPProtocol_SourcePortAll{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationPortRange", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationPort = &UDPProtocol_DestinationPortRange{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationPortAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DestinationPort = &UDPProtocol_DestinationPortAll{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TCPProtocol) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TCPProtocol: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TCPProtocol: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourcePortRange", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourcePort = &TCPProtocol_SourcePortRange{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourcePortAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SourcePort = &TCPProtocol_SourcePortAll{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationPortRange", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationPort = &TCPProtocol_DestinationPortRange{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationPortAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DestinationPort = &TCPProtocol_DestinationPortAll{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ICMPProtocol) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ICMPProtocol: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ICMPProtocol: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EchoRequest", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EchoRequest = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EchoReply", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EchoReply = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParameterProblem", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ParameterProblem = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Redirect", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Redirect = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceQuench", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SourceQuench = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeExceeded", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TimeExceeded = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unreachable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Unreachable = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ICMP6Protocol) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ICMP6Protocol: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ICMP6Protocol: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationUnreachable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DestinationUnreachable = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EchoReply", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EchoReply = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EchoRequest", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EchoRequest = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeighborAdvertisement", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NeighborAdvertisement = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeighborSolicit", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NeighborSolicit = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketTooBig", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PacketTooBig = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParameterProblem", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ParameterProblem = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Redirect", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Redirect = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouterAdvertisement", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RouterAdvertisement = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouterSolicit", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RouterSolicit = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeExceeded", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TimeExceeded = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

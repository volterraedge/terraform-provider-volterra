// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package cloud_connect

import (
	"bytes"
	"context"
	"fmt"
	io "io"
	"net/http"
	"strings"

	"github.com/gogo/protobuf/proto"
	"github.com/grpc-ecosystem/grpc-gateway/runtime"
	"google.golang.org/grpc"

	"gopkg.volterra.us/stdlib/client"
	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/errors"
	"gopkg.volterra.us/stdlib/server"
	"gopkg.volterra.us/stdlib/svcfw"
)

var (
	_ = fmt.Sprintf("dummy for fmt import use")
)

// Create CloudDataCustomAPI GRPC Client satisfying server.CustomClient
type CloudDataCustomAPIGrpcClient struct {
	conn       *grpc.ClientConn
	grpcClient CloudDataCustomAPIClient
	// map of rpc name to its invocation
	rpcFns map[string]func(context.Context, string, ...grpc.CallOption) (proto.Message, error)
}

func (c *CloudDataCustomAPIGrpcClient) doRPCDiscoverVPC(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &DiscoverVPCRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.cloud_connect.DiscoverVPCRequest", yamlReq)
	}
	rsp, err := c.grpcClient.DiscoverVPC(ctx, req, opts...)
	return rsp, err
}

func (c *CloudDataCustomAPIGrpcClient) doRPCReApplyVPCAttachment(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &ReApplyVPCAttachmentRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.cloud_connect.ReApplyVPCAttachmentRequest", yamlReq)
	}
	rsp, err := c.grpcClient.ReApplyVPCAttachment(ctx, req, opts...)
	return rsp, err
}

func (c *CloudDataCustomAPIGrpcClient) DoRPC(ctx context.Context, rpc string, opts ...server.CustomCallOpt) (proto.Message, error) {
	rpcFn, exists := c.rpcFns[rpc]
	if !exists {
		return nil, fmt.Errorf("Error, no such rpc %s", rpc)
	}
	cco := server.NewCustomCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	if cco.YAMLReq == "" {
		return nil, fmt.Errorf("Error, empty request body")
	}
	ctx = client.AddHdrsToCtx(cco.Headers, ctx)

	rsp, err := rpcFn(ctx, cco.YAMLReq, cco.GrpcCallOpts...)
	if err != nil {
		return nil, errors.Wrap(err, "Doing custom RPC using GRPC")
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return rsp, nil
}

func NewCloudDataCustomAPIGrpcClient(cc *grpc.ClientConn) server.CustomClient {
	ccl := &CloudDataCustomAPIGrpcClient{
		conn:       cc,
		grpcClient: NewCloudDataCustomAPIClient(cc),
	}
	rpcFns := make(map[string]func(context.Context, string, ...grpc.CallOption) (proto.Message, error))
	rpcFns["DiscoverVPC"] = ccl.doRPCDiscoverVPC

	rpcFns["ReApplyVPCAttachment"] = ccl.doRPCReApplyVPCAttachment

	ccl.rpcFns = rpcFns

	return ccl
}

// Create CloudDataCustomAPI REST Client satisfying server.CustomClient
type CloudDataCustomAPIRestClient struct {
	baseURL string
	client  http.Client
	// map of rpc name to its invocation
	rpcFns map[string]func(context.Context, *server.CustomCallOpts) (proto.Message, error)
}

func (c *CloudDataCustomAPIRestClient) doRPCDiscoverVPC(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &DiscoverVPCRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.cloud_connect.DiscoverVPCRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("cred", fmt.Sprintf("%v", req.Cred))
		q.Add("provider", fmt.Sprintf("%v", req.Provider))
		q.Add("region", fmt.Sprintf("%v", req.Region))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &DiscoverVPCResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.cloud_connect.DiscoverVPCResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CloudDataCustomAPIRestClient) doRPCReApplyVPCAttachment(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &ReApplyVPCAttachmentRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.cloud_connect.ReApplyVPCAttachmentRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("cloud_connect", fmt.Sprintf("%v", req.CloudConnect))
		q.Add("provider", fmt.Sprintf("%v", req.Provider))
		q.Add("vpc_id", fmt.Sprintf("%v", req.VpcId))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &ReApplyVPCAttachmentResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.cloud_connect.ReApplyVPCAttachmentResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CloudDataCustomAPIRestClient) DoRPC(ctx context.Context, rpc string, opts ...server.CustomCallOpt) (proto.Message, error) {
	rpcFn, exists := c.rpcFns[rpc]
	if !exists {
		return nil, fmt.Errorf("Error, no such rpc %s", rpc)
	}
	cco := server.NewCustomCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	rsp, err := rpcFn(ctx, cco)
	if err != nil {
		return nil, errors.Wrap(err, "Doing custom RPC using Rest")
	}
	return rsp, nil
}

func NewCloudDataCustomAPIRestClient(baseURL string, hc http.Client) server.CustomClient {
	ccl := &CloudDataCustomAPIRestClient{
		baseURL: baseURL,
		client:  hc,
	}

	rpcFns := make(map[string]func(context.Context, *server.CustomCallOpts) (proto.Message, error))
	rpcFns["DiscoverVPC"] = ccl.doRPCDiscoverVPC

	rpcFns["ReApplyVPCAttachment"] = ccl.doRPCReApplyVPCAttachment

	ccl.rpcFns = rpcFns

	return ccl
}

// Create cloudDataCustomAPIInprocClient

// INPROC Client (satisfying CloudDataCustomAPIClient interface)
type cloudDataCustomAPIInprocClient struct {
	CloudDataCustomAPIServer
}

func (c *cloudDataCustomAPIInprocClient) DiscoverVPC(ctx context.Context, in *DiscoverVPCRequest, opts ...grpc.CallOption) (*DiscoverVPCResponse, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.cloud_connect.CloudDataCustomAPI.DiscoverVPC")
	return c.CloudDataCustomAPIServer.DiscoverVPC(ctx, in)
}
func (c *cloudDataCustomAPIInprocClient) ReApplyVPCAttachment(ctx context.Context, in *ReApplyVPCAttachmentRequest, opts ...grpc.CallOption) (*ReApplyVPCAttachmentResponse, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.cloud_connect.CloudDataCustomAPI.ReApplyVPCAttachment")
	return c.CloudDataCustomAPIServer.ReApplyVPCAttachment(ctx, in)
}

func NewCloudDataCustomAPIInprocClient(svc svcfw.Service) CloudDataCustomAPIClient {
	return &cloudDataCustomAPIInprocClient{CloudDataCustomAPIServer: NewCloudDataCustomAPIServer(svc)}
}

// RegisterGwCloudDataCustomAPIHandler registers with grpc-gw with an inproc-client backing so that
// rest to grpc happens without a grpc.Dial (thus avoiding additional certs for mTLS)
func RegisterGwCloudDataCustomAPIHandler(ctx context.Context, mux *runtime.ServeMux, svc interface{}) error {
	s, ok := svc.(svcfw.Service)
	if !ok {
		return fmt.Errorf("svc is not svcfw.Service")
	}
	return RegisterCloudDataCustomAPIHandlerClient(ctx, mux, NewCloudDataCustomAPIInprocClient(s))
}

// Create cloudDataCustomAPISrv

// SERVER (satisfying CloudDataCustomAPIServer interface)
type cloudDataCustomAPISrv struct {
	svc svcfw.Service
}

func (s *cloudDataCustomAPISrv) DiscoverVPC(ctx context.Context, in *DiscoverVPCRequest) (*DiscoverVPCResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.cloud_connect.CloudDataCustomAPI")
	cah, ok := ah.(CloudDataCustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CloudDataCustomAPIServer", ah)
	}

	var (
		rsp *DiscoverVPCResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.cloud_connect.DiscoverVPCRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CloudDataCustomAPI.DiscoverVPC' operation on 'cloud_connect'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()
	if err := s.svc.CustomAPIProcessDRef(ctx, in); err != nil {
		return nil, err
	}

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.cloud_connect.CloudDataCustomAPI.DiscoverVPC"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.DiscoverVPC(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.cloud_connect.DiscoverVPCResponse", rsp)...)

	return rsp, nil
}
func (s *cloudDataCustomAPISrv) ReApplyVPCAttachment(ctx context.Context, in *ReApplyVPCAttachmentRequest) (*ReApplyVPCAttachmentResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.cloud_connect.CloudDataCustomAPI")
	cah, ok := ah.(CloudDataCustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CloudDataCustomAPIServer", ah)
	}

	var (
		rsp *ReApplyVPCAttachmentResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.cloud_connect.ReApplyVPCAttachmentRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CloudDataCustomAPI.ReApplyVPCAttachment' operation on 'cloud_connect'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()
	if err := s.svc.CustomAPIProcessDRef(ctx, in); err != nil {
		return nil, err
	}

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.cloud_connect.CloudDataCustomAPI.ReApplyVPCAttachment"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.ReApplyVPCAttachment(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.cloud_connect.ReApplyVPCAttachmentResponse", rsp)...)

	return rsp, nil
}

func NewCloudDataCustomAPIServer(svc svcfw.Service) CloudDataCustomAPIServer {
	return &cloudDataCustomAPISrv{svc: svc}
}

var CloudDataCustomAPISwaggerJSON string = `{
    "swagger": "2.0",
    "info": {
        "title": "Cloud Connect",
        "description": "Cloud Connect related public APIs served by lucario.\nIt is always scoped by system namespace.",
        "version": "version not set"
    },
    "schemes": [
        "http",
        "https"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "tags": [],
    "paths": {
        "/public/namespaces/system/cloud_connect_reapply_vpc_attachment": {
            "post": {
                "summary": "ReApplyVPCAttachment",
                "description": "Re-applies VPC attachment in a cloud connect config.",
                "operationId": "ves.io.schema.cloud_connect.CloudDataCustomAPI.ReApplyVPCAttachment",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/cloud_connectReApplyVPCAttachmentResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/cloud_connectReApplyVPCAttachmentRequest"
                        }
                    }
                ],
                "tags": [
                    "CloudDataCustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-cloud_connect-clouddatacustomapi-reapplyvpcattachment"
                },
                "x-ves-proto-rpc": "ves.io.schema.cloud_connect.CloudDataCustomAPI.ReApplyVPCAttachment"
            },
            "x-displayname": "Cloud Connect Lucario CustomAPI",
            "x-ves-proto-service": "ves.io.schema.cloud_connect.CloudDataCustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/system/discover_vpc": {
            "post": {
                "summary": "Cloud Connect VPC Discovery",
                "description": "Returns all the vpcs for a specified cloud provider, region and cred.\nFor AWS it returns all the vpcs which are not attached to any transit gateway in that region.",
                "operationId": "ves.io.schema.cloud_connect.CloudDataCustomAPI.DiscoverVPC",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/cloud_connectDiscoverVPCResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/cloud_connectDiscoverVPCRequest"
                        }
                    }
                ],
                "tags": [
                    "CloudDataCustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-cloud_connect-clouddatacustomapi-discovervpc"
                },
                "x-ves-proto-rpc": "ves.io.schema.cloud_connect.CloudDataCustomAPI.DiscoverVPC"
            },
            "x-displayname": "Cloud Connect Lucario CustomAPI",
            "x-ves-proto-service": "ves.io.schema.cloud_connect.CloudDataCustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        }
    },
    "definitions": {
        "cloud_connectCloudConnectProviderType": {
            "type": "string",
            "description": "Cloud Connect Provider Type\n\n - AWS: AWS\n\nCloud connects backed by AWS cloud\n - AZURE: AZURE\n\nCloud connects backed by Azure cloud\n - GCP: GCP\n\nCloud connects backed by GCP cloud",
            "title": "Cloud Connect Provider",
            "enum": [
                "AWS",
                "AZURE",
                "GCP"
            ],
            "default": "AWS",
            "x-displayname": "Cloud Connect Provider",
            "x-ves-proto-enum": "ves.io.schema.cloud_connect.CloudConnectProviderType"
        },
        "cloud_connectDiscoverVPCRequest": {
            "type": "object",
            "description": "Request body to discover vpcs for a given cloud provider, region and cred.",
            "title": "DiscoverVPCRequest",
            "x-displayname": "Cloud Connect VPC Discovery Request",
            "x-ves-proto-message": "ves.io.schema.cloud_connect.DiscoverVPCRequest",
            "properties": {
                "cred": {
                    "description": " Cloud credential.",
                    "title": "Cloud Credential",
                    "$ref": "#/definitions/schemaviewsObjectRefType",
                    "x-displayname": "Cloud Credential"
                },
                "provider": {
                    "description": " Cloud connect backend provider.",
                    "title": "Cloud Provider",
                    "$ref": "#/definitions/cloud_connectCloudConnectProviderType",
                    "x-displayname": "Cloud Connect Provider"
                },
                "region": {
                    "type": "string",
                    "description": " Region.",
                    "title": "Region",
                    "x-displayname": "Region"
                }
            }
        },
        "cloud_connectDiscoverVPCResponse": {
            "type": "object",
            "description": "VPC discovery response body for a cloud provider.",
            "title": "DiscoverVPCResponse",
            "x-displayname": "Cloud Connect VPC Discovery Response",
            "x-ves-proto-message": "ves.io.schema.cloud_connect.DiscoverVPCResponse",
            "properties": {
                "discovered_vpc": {
                    "type": "array",
                    "description": " Discovered vpc",
                    "title": "Discovered VPC\nx-displayName: \"Discovered VPC\"\nDiscovered vpc",
                    "items": {
                        "$ref": "#/definitions/cloud_connectDiscoveredVPCType"
                    },
                    "x-displayname": "Discovered VPC"
                }
            }
        },
        "cloud_connectDiscoveredVPCType": {
            "type": "object",
            "description": "Discover VPC Type",
            "title": "DiscoverVPC Type",
            "x-displayname": "Discover VPC",
            "x-ves-proto-message": "ves.io.schema.cloud_connect.DiscoveredVPCType",
            "properties": {
                "cred": {
                    "description": " Cloud credential",
                    "title": "Credential",
                    "$ref": "#/definitions/schemaviewsObjectRefType",
                    "x-displayname": "Cloud Credential"
                },
                "provider": {
                    "description": " Cloud connect backend provider",
                    "title": "Cloud Provider",
                    "$ref": "#/definitions/cloud_connectCloudConnectProviderType",
                    "x-displayname": "Cloud Connect Provider"
                },
                "region": {
                    "type": "string",
                    "description": " Region",
                    "title": "Region",
                    "x-displayname": "Region"
                },
                "vpc_id": {
                    "type": "string",
                    "description": " VPC ID",
                    "title": "VPC ID",
                    "x-displayname": "VPC ID"
                },
                "vpc_name": {
                    "type": "string",
                    "description": " VPC Name",
                    "title": "VPC Name",
                    "x-displayname": "VPC Name"
                }
            }
        },
        "cloud_connectReApplyVPCAttachmentRequest": {
            "type": "object",
            "description": "Request of vpc attachment reapply event.",
            "title": "ReApplyVPCAttachmentRequest",
            "x-displayname": "ReApplyVPCAttachmentRequest",
            "x-ves-proto-message": "ves.io.schema.cloud_connect.ReApplyVPCAttachmentRequest",
            "properties": {
                "cloud_connect": {
                    "description": " Reference to a cloud connect object",
                    "title": "Cloud Connect reference",
                    "$ref": "#/definitions/schemaviewsObjectRefType",
                    "x-displayname": "Cloud Connect Reference"
                },
                "provider": {
                    "description": " Cloud connect backend provider",
                    "title": "Cloud Provider",
                    "$ref": "#/definitions/cloud_connectCloudConnectProviderType",
                    "x-displayname": "Cloud Connect Provider"
                },
                "vpc_id": {
                    "type": "string",
                    "description": " VPC ID",
                    "title": "VPC ID",
                    "x-displayname": "VPC ID"
                }
            }
        },
        "cloud_connectReApplyVPCAttachmentResponse": {
            "type": "object",
            "description": "Reponse of vpc attachment reapply event.",
            "title": "ReApplyVPCAttachmentResponse",
            "x-displayname": "ReApplyVPCAttachmentResponse",
            "x-ves-proto-message": "ves.io.schema.cloud_connect.ReApplyVPCAttachmentResponse"
        },
        "schemaviewsObjectRefType": {
            "type": "object",
            "description": "This type establishes a direct reference from one object(the referrer) to another(the referred).\nSuch a reference is in form of tenant/namespace/name",
            "title": "ObjectRefType",
            "x-displayname": "Object reference",
            "x-ves-proto-message": "ves.io.schema.views.ObjectRefType",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then name will hold the referred object's(e.g. route's) name.\n\nExample: - \"contacts-route\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.max_bytes: 128\n  ves.io.schema.rules.string.min_bytes: 1\n",
                    "title": "name",
                    "minLength": 1,
                    "maxLength": 128,
                    "x-displayname": "Name",
                    "x-ves-example": "contacts-route",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.max_bytes": "128",
                        "ves.io.schema.rules.string.min_bytes": "1"
                    }
                },
                "namespace": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then namespace will hold the referred object's(e.g. route's) namespace.\n\nExample: - \"ns1\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.max_bytes: 64\n",
                    "title": "namespace",
                    "maxLength": 64,
                    "x-displayname": "Namespace",
                    "x-ves-example": "ns1",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.max_bytes": "64"
                    }
                },
                "tenant": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then tenant will hold the referred object's(e.g. route's) tenant.\n\nExample: - \"acmecorp\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.max_bytes: 64\n",
                    "title": "tenant",
                    "maxLength": 64,
                    "x-displayname": "Tenant",
                    "x-ves-example": "acmecorp",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.max_bytes": "64"
                    }
                }
            }
        }
    },
    "x-displayname": "Cloud Connect",
    "x-ves-proto-file": "ves.io/schema/cloud_connect/public_customapi_lucario.proto"
}`

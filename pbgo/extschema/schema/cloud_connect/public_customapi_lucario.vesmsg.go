// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package cloud_connect

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *DiscoverVPCRequest) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DiscoverVPCRequest) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DiscoverVPCRequest) DeepCopy() *DiscoverVPCRequest {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DiscoverVPCRequest{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DiscoverVPCRequest) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DiscoverVPCRequest) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DiscoverVPCRequestValidator().Validate(ctx, m, opts...)
}

func (m *DiscoverVPCRequest) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetCredDRefInfo()

}

func (m *DiscoverVPCRequest) GetCredDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetCred()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("cloud_credentials.Object")
	dri := db.DRefInfo{
		RefdType:   "cloud_credentials.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "cred",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetCredDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *DiscoverVPCRequest) GetCredDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "cloud_credentials.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: cloud_credentials")
	}

	vref := m.GetCred()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "cloud_credentials.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

type ValidateDiscoverVPCRequest struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDiscoverVPCRequest) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DiscoverVPCRequest)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DiscoverVPCRequest got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["cred"]; exists {

		vOpts := append(opts, db.WithValidateField("cred"))
		if err := fv(ctx, m.GetCred(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["edge_site"]; exists {

		vOpts := append(opts, db.WithValidateField("edge_site"))
		if err := fv(ctx, m.GetEdgeSite(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["provider"]; exists {

		vOpts := append(opts, db.WithValidateField("provider"))
		if err := fv(ctx, m.GetProvider(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["region"]; exists {

		vOpts := append(opts, db.WithValidateField("region"))
		if err := fv(ctx, m.GetRegion(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDiscoverVPCRequestValidator = func() *ValidateDiscoverVPCRequest {
	v := &ValidateDiscoverVPCRequest{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["cred"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func DiscoverVPCRequestValidator() db.Validator {
	return DefaultDiscoverVPCRequestValidator
}

// augmented methods on protoc/std generated struct

func (m *DiscoverVPCResponse) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DiscoverVPCResponse) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DiscoverVPCResponse) DeepCopy() *DiscoverVPCResponse {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DiscoverVPCResponse{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DiscoverVPCResponse) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DiscoverVPCResponse) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DiscoverVPCResponseValidator().Validate(ctx, m, opts...)
}

func (m *DiscoverVPCResponse) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetDiscoveredVpcDRefInfo()

}

// GetDRefInfo for the field's type
func (m *DiscoverVPCResponse) GetDiscoveredVpcDRefInfo() ([]db.DRefInfo, error) {
	if m.GetDiscoveredVpc() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetDiscoveredVpc() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetDiscoveredVpc() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("discovered_vpc[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

type ValidateDiscoverVPCResponse struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDiscoverVPCResponse) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DiscoverVPCResponse)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DiscoverVPCResponse got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["discovered_vpc"]; exists {

		vOpts := append(opts, db.WithValidateField("discovered_vpc"))
		for idx, item := range m.GetDiscoveredVpc() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDiscoverVPCResponseValidator = func() *ValidateDiscoverVPCResponse {
	v := &ValidateDiscoverVPCResponse{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["discovered_vpc"] = DiscoveredVPCTypeValidator().Validate

	return v
}()

func DiscoverVPCResponseValidator() db.Validator {
	return DefaultDiscoverVPCResponseValidator
}

// augmented methods on protoc/std generated struct

func (m *DiscoveredVPCType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DiscoveredVPCType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DiscoveredVPCType) DeepCopy() *DiscoveredVPCType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DiscoveredVPCType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DiscoveredVPCType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DiscoveredVPCType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DiscoveredVPCTypeValidator().Validate(ctx, m, opts...)
}

func (m *DiscoveredVPCType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetCredDRefInfo()

}

func (m *DiscoveredVPCType) GetCredDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetCred()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("cloud_credentials.Object")
	dri := db.DRefInfo{
		RefdType:   "cloud_credentials.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "cred",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetCredDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *DiscoveredVPCType) GetCredDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "cloud_credentials.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: cloud_credentials")
	}

	vref := m.GetCred()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "cloud_credentials.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

type ValidateDiscoveredVPCType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDiscoveredVPCType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DiscoveredVPCType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DiscoveredVPCType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["cred"]; exists {

		vOpts := append(opts, db.WithValidateField("cred"))
		if err := fv(ctx, m.GetCred(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["provider"]; exists {

		vOpts := append(opts, db.WithValidateField("provider"))
		if err := fv(ctx, m.GetProvider(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["region"]; exists {

		vOpts := append(opts, db.WithValidateField("region"))
		if err := fv(ctx, m.GetRegion(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["vpc_id"]; exists {

		vOpts := append(opts, db.WithValidateField("vpc_id"))
		if err := fv(ctx, m.GetVpcId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["vpc_name"]; exists {

		vOpts := append(opts, db.WithValidateField("vpc_name"))
		if err := fv(ctx, m.GetVpcName(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDiscoveredVPCTypeValidator = func() *ValidateDiscoveredVPCType {
	v := &ValidateDiscoveredVPCType{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["cred"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func DiscoveredVPCTypeValidator() db.Validator {
	return DefaultDiscoveredVPCTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ReApplyVPCAttachmentRequest) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReApplyVPCAttachmentRequest) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ReApplyVPCAttachmentRequest) DeepCopy() *ReApplyVPCAttachmentRequest {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReApplyVPCAttachmentRequest{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReApplyVPCAttachmentRequest) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReApplyVPCAttachmentRequest) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReApplyVPCAttachmentRequestValidator().Validate(ctx, m, opts...)
}

func (m *ReApplyVPCAttachmentRequest) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetCloudConnectDRefInfo()

}

func (m *ReApplyVPCAttachmentRequest) GetCloudConnectDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetCloudConnect()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("cloud_connect.Object")
	dri := db.DRefInfo{
		RefdType:   "cloud_connect.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "cloud_connect",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetCloudConnectDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *ReApplyVPCAttachmentRequest) GetCloudConnectDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "cloud_connect.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: cloud_connect")
	}

	vref := m.GetCloudConnect()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "cloud_connect.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

type ValidateReApplyVPCAttachmentRequest struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReApplyVPCAttachmentRequest) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReApplyVPCAttachmentRequest)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReApplyVPCAttachmentRequest got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["cloud_connect"]; exists {

		vOpts := append(opts, db.WithValidateField("cloud_connect"))
		if err := fv(ctx, m.GetCloudConnect(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["provider"]; exists {

		vOpts := append(opts, db.WithValidateField("provider"))
		if err := fv(ctx, m.GetProvider(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["vpc_id"]; exists {

		vOpts := append(opts, db.WithValidateField("vpc_id"))
		if err := fv(ctx, m.GetVpcId(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReApplyVPCAttachmentRequestValidator = func() *ValidateReApplyVPCAttachmentRequest {
	v := &ValidateReApplyVPCAttachmentRequest{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["cloud_connect"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func ReApplyVPCAttachmentRequestValidator() db.Validator {
	return DefaultReApplyVPCAttachmentRequestValidator
}

// augmented methods on protoc/std generated struct

func (m *ReApplyVPCAttachmentResponse) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReApplyVPCAttachmentResponse) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ReApplyVPCAttachmentResponse) DeepCopy() *ReApplyVPCAttachmentResponse {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReApplyVPCAttachmentResponse{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReApplyVPCAttachmentResponse) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReApplyVPCAttachmentResponse) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReApplyVPCAttachmentResponseValidator().Validate(ctx, m, opts...)
}

type ValidateReApplyVPCAttachmentResponse struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReApplyVPCAttachmentResponse) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReApplyVPCAttachmentResponse)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReApplyVPCAttachmentResponse got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReApplyVPCAttachmentResponseValidator = func() *ValidateReApplyVPCAttachmentResponse {
	v := &ValidateReApplyVPCAttachmentResponse{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func ReApplyVPCAttachmentResponseValidator() db.Validator {
	return DefaultReApplyVPCAttachmentResponseValidator
}

// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package cloud_connect

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_site "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/site"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *CredentialsRequest) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CredentialsRequest) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CredentialsRequest) DeepCopy() *CredentialsRequest {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CredentialsRequest{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CredentialsRequest) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CredentialsRequest) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CredentialsRequestValidator().Validate(ctx, m, opts...)
}

type ValidateCredentialsRequest struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCredentialsRequest) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CredentialsRequest)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CredentialsRequest got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["provider"]; exists {

		vOpts := append(opts, db.WithValidateField("provider"))
		if err := fv(ctx, m.GetProvider(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCredentialsRequestValidator = func() *ValidateCredentialsRequest {
	v := &ValidateCredentialsRequest{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func CredentialsRequestValidator() db.Validator {
	return DefaultCredentialsRequestValidator
}

// augmented methods on protoc/std generated struct

func (m *CredentialsResponse) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CredentialsResponse) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CredentialsResponse) DeepCopy() *CredentialsResponse {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CredentialsResponse{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CredentialsResponse) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CredentialsResponse) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CredentialsResponseValidator().Validate(ctx, m, opts...)
}

func (m *CredentialsResponse) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetCredDRefInfo()

}

func (m *CredentialsResponse) GetCredDRefInfo() ([]db.DRefInfo, error) {
	vrefs := m.GetCred()
	if len(vrefs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(vrefs))
	for i, vref := range vrefs {
		if vref == nil {
			return nil, fmt.Errorf("CredentialsResponse.cred[%d] has a nil value", i)
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("cloud_credentials.Object")
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "cloud_credentials.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "cred",
			Ref:        vdRef,
		})
	}
	return drInfos, nil

}

// GetCredDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *CredentialsResponse) GetCredDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "cloud_credentials.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: cloud_credentials")
	}
	for i, vref := range m.GetCred() {
		if vref == nil {
			return nil, fmt.Errorf("CredentialsResponse.cred[%d] has a nil value", i)
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "cloud_credentials.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateCredentialsResponse struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCredentialsResponse) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CredentialsResponse)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CredentialsResponse got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["cred"]; exists {

		vOpts := append(opts, db.WithValidateField("cred"))
		for idx, item := range m.GetCred() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCredentialsResponseValidator = func() *ValidateCredentialsResponse {
	v := &ValidateCredentialsResponse{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["cred"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func CredentialsResponseValidator() db.Validator {
	return DefaultCredentialsResponseValidator
}

// augmented methods on protoc/std generated struct

func (m *EdgeListRequest) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *EdgeListRequest) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *EdgeListRequest) DeepCopy() *EdgeListRequest {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &EdgeListRequest{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *EdgeListRequest) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *EdgeListRequest) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return EdgeListRequestValidator().Validate(ctx, m, opts...)
}

type ValidateEdgeListRequest struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateEdgeListRequest) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*EdgeListRequest)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *EdgeListRequest got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultEdgeListRequestValidator = func() *ValidateEdgeListRequest {
	v := &ValidateEdgeListRequest{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func EdgeListRequestValidator() db.Validator {
	return DefaultEdgeListRequestValidator
}

// augmented methods on protoc/std generated struct

func (m *EdgeListResponse) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *EdgeListResponse) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *EdgeListResponse) DeepCopy() *EdgeListResponse {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &EdgeListResponse{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *EdgeListResponse) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *EdgeListResponse) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return EdgeListResponseValidator().Validate(ctx, m, opts...)
}

type ValidateEdgeListResponse struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateEdgeListResponse) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*EdgeListResponse)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *EdgeListResponse got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["edge_site"]; exists {

		vOpts := append(opts, db.WithValidateField("edge_site"))
		for idx, item := range m.GetEdgeSite() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultEdgeListResponseValidator = func() *ValidateEdgeListResponse {
	v := &ValidateEdgeListResponse{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["edge_site"] = EdgeSiteValidator().Validate

	return v
}()

func EdgeListResponseValidator() db.Validator {
	return DefaultEdgeListResponseValidator
}

// augmented methods on protoc/std generated struct

func (m *EdgeSite) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *EdgeSite) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *EdgeSite) DeepCopy() *EdgeSite {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &EdgeSite{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *EdgeSite) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *EdgeSite) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return EdgeSiteValidator().Validate(ctx, m, opts...)
}

type ValidateEdgeSite struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateEdgeSite) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*EdgeSite)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *EdgeSite got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["coordinates"]; exists {

		vOpts := append(opts, db.WithValidateField("coordinates"))
		if err := fv(ctx, m.GetCoordinates(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["edge_site"]; exists {

		vOpts := append(opts, db.WithValidateField("edge_site"))
		if err := fv(ctx, m.GetEdgeSite(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["provider"]; exists {

		vOpts := append(opts, db.WithValidateField("provider"))
		if err := fv(ctx, m.GetProvider(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["region"]; exists {

		vOpts := append(opts, db.WithValidateField("region"))
		if err := fv(ctx, m.GetRegion(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultEdgeSiteValidator = func() *ValidateEdgeSite {
	v := &ValidateEdgeSite{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["coordinates"] = ves_io_schema_site.CoordinatesValidator().Validate

	return v
}()

func EdgeSiteValidator() db.Validator {
	return DefaultEdgeSiteValidator
}

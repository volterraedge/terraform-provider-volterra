// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/cloud_connect/public_customapi_lucario.proto

// Cloud Connect
//
// x-displayName: "Cloud Connect"
// Cloud Connect related public APIs served by lucario.
// It is always scoped by system namespace.

package cloud_connect

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/site"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// DiscoverVPCRequest
//
// x-displayName: "Cloud Connect VPC Discovery Request"
// Request body to discover vpcs for a given cloud provider, region and cred.
type DiscoverVPCRequest struct {
	// Cloud Credential
	//
	// x-displayName: "Cloud Credential"
	// Cloud credential.
	Cred *views.ObjectRefType `protobuf:"bytes,1,opt,name=cred,proto3" json:"cred,omitempty"`
	// Cloud Provider
	//
	// x-displayName: "Cloud Connect Provider"
	// Cloud connect backend provider.
	Provider CloudConnectProviderType `protobuf:"varint,2,opt,name=provider,proto3,enum=ves.io.schema.cloud_connect.CloudConnectProviderType" json:"provider,omitempty"`
	// Region
	//
	// x-displayName: "Region"
	// Region.
	Region string `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
}

func (m *DiscoverVPCRequest) Reset()      { *m = DiscoverVPCRequest{} }
func (*DiscoverVPCRequest) ProtoMessage() {}
func (*DiscoverVPCRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf781e6c55ca0fa7, []int{0}
}
func (m *DiscoverVPCRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DiscoverVPCRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DiscoverVPCRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DiscoverVPCRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiscoverVPCRequest.Merge(m, src)
}
func (m *DiscoverVPCRequest) XXX_Size() int {
	return m.Size()
}
func (m *DiscoverVPCRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DiscoverVPCRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DiscoverVPCRequest proto.InternalMessageInfo

func (m *DiscoverVPCRequest) GetCred() *views.ObjectRefType {
	if m != nil {
		return m.Cred
	}
	return nil
}

func (m *DiscoverVPCRequest) GetProvider() CloudConnectProviderType {
	if m != nil {
		return m.Provider
	}
	return AWS
}

func (m *DiscoverVPCRequest) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

// DiscoverVPCResponse
//
// x-displayName: "Cloud Connect VPC Discovery Response"
// VPC discovery response body for a cloud provider.
type DiscoverVPCResponse struct {
	// Discovered VPC
	// x-displayName: "Discovered VPC"
	// Discovered vpc
	DiscoveredVpc []*DiscoveredVPCType `protobuf:"bytes,1,rep,name=discovered_vpc,json=discoveredVpc,proto3" json:"discovered_vpc,omitempty"`
}

func (m *DiscoverVPCResponse) Reset()      { *m = DiscoverVPCResponse{} }
func (*DiscoverVPCResponse) ProtoMessage() {}
func (*DiscoverVPCResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf781e6c55ca0fa7, []int{1}
}
func (m *DiscoverVPCResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DiscoverVPCResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DiscoverVPCResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DiscoverVPCResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiscoverVPCResponse.Merge(m, src)
}
func (m *DiscoverVPCResponse) XXX_Size() int {
	return m.Size()
}
func (m *DiscoverVPCResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DiscoverVPCResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DiscoverVPCResponse proto.InternalMessageInfo

func (m *DiscoverVPCResponse) GetDiscoveredVpc() []*DiscoveredVPCType {
	if m != nil {
		return m.DiscoveredVpc
	}
	return nil
}

// DiscoverVPC Type
//
// x-displayName: "Discover VPC"
// Discover VPC Type
type DiscoveredVPCType struct {
	// VPC Name
	//
	// x-displayName: "VPC Name"
	// VPC Name
	VpcName string `protobuf:"bytes,1,opt,name=vpc_name,json=vpcName,proto3" json:"vpc_name,omitempty"`
	// VPC ID
	//
	// x-displayName: "VPC ID"
	// VPC ID
	VpcId string `protobuf:"bytes,2,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
	// Region
	//
	// x-displayName: "Region"
	// Region
	Region string `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	// Credential
	//
	// x-displayName: "Cloud Credential"
	// Cloud credential
	Cred *views.ObjectRefType `protobuf:"bytes,4,opt,name=cred,proto3" json:"cred,omitempty"`
	// Cloud Provider
	//
	// x-displayName: "Cloud Connect Provider"
	// Cloud connect backend provider
	Provider CloudConnectProviderType `protobuf:"varint,5,opt,name=provider,proto3,enum=ves.io.schema.cloud_connect.CloudConnectProviderType" json:"provider,omitempty"`
}

func (m *DiscoveredVPCType) Reset()      { *m = DiscoveredVPCType{} }
func (*DiscoveredVPCType) ProtoMessage() {}
func (*DiscoveredVPCType) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf781e6c55ca0fa7, []int{2}
}
func (m *DiscoveredVPCType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DiscoveredVPCType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DiscoveredVPCType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DiscoveredVPCType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiscoveredVPCType.Merge(m, src)
}
func (m *DiscoveredVPCType) XXX_Size() int {
	return m.Size()
}
func (m *DiscoveredVPCType) XXX_DiscardUnknown() {
	xxx_messageInfo_DiscoveredVPCType.DiscardUnknown(m)
}

var xxx_messageInfo_DiscoveredVPCType proto.InternalMessageInfo

func (m *DiscoveredVPCType) GetVpcName() string {
	if m != nil {
		return m.VpcName
	}
	return ""
}

func (m *DiscoveredVPCType) GetVpcId() string {
	if m != nil {
		return m.VpcId
	}
	return ""
}

func (m *DiscoveredVPCType) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *DiscoveredVPCType) GetCred() *views.ObjectRefType {
	if m != nil {
		return m.Cred
	}
	return nil
}

func (m *DiscoveredVPCType) GetProvider() CloudConnectProviderType {
	if m != nil {
		return m.Provider
	}
	return AWS
}

// ReApplyVPCAttachmentRequest
//
// x-displayName: "ReApplyVPCAttachmentRequest"
// Request of vpc attachment reapply event.
type ReApplyVPCAttachmentRequest struct {
	// Cloud Connect reference
	//
	// x-displayName: "Cloud Connect Reference"
	// Reference to a cloud connect object
	CloudConnect *views.ObjectRefType `protobuf:"bytes,1,opt,name=cloud_connect,json=cloudConnect,proto3" json:"cloud_connect,omitempty"`
	// VPC ID
	//
	// x-displayName: "VPC ID"
	// VPC ID
	VpcId string `protobuf:"bytes,2,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
	// Cloud Provider
	//
	// x-displayName: "Cloud Connect Provider"
	// Cloud connect backend provider
	Provider CloudConnectProviderType `protobuf:"varint,3,opt,name=provider,proto3,enum=ves.io.schema.cloud_connect.CloudConnectProviderType" json:"provider,omitempty"`
}

func (m *ReApplyVPCAttachmentRequest) Reset()      { *m = ReApplyVPCAttachmentRequest{} }
func (*ReApplyVPCAttachmentRequest) ProtoMessage() {}
func (*ReApplyVPCAttachmentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf781e6c55ca0fa7, []int{3}
}
func (m *ReApplyVPCAttachmentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReApplyVPCAttachmentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReApplyVPCAttachmentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReApplyVPCAttachmentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReApplyVPCAttachmentRequest.Merge(m, src)
}
func (m *ReApplyVPCAttachmentRequest) XXX_Size() int {
	return m.Size()
}
func (m *ReApplyVPCAttachmentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReApplyVPCAttachmentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReApplyVPCAttachmentRequest proto.InternalMessageInfo

func (m *ReApplyVPCAttachmentRequest) GetCloudConnect() *views.ObjectRefType {
	if m != nil {
		return m.CloudConnect
	}
	return nil
}

func (m *ReApplyVPCAttachmentRequest) GetVpcId() string {
	if m != nil {
		return m.VpcId
	}
	return ""
}

func (m *ReApplyVPCAttachmentRequest) GetProvider() CloudConnectProviderType {
	if m != nil {
		return m.Provider
	}
	return AWS
}

// ReApplyVPCAttachmentResponse
//
// x-displayName: "ReApplyVPCAttachmentResponse"
// Reponse of vpc attachment reapply event.
type ReApplyVPCAttachmentResponse struct {
}

func (m *ReApplyVPCAttachmentResponse) Reset()      { *m = ReApplyVPCAttachmentResponse{} }
func (*ReApplyVPCAttachmentResponse) ProtoMessage() {}
func (*ReApplyVPCAttachmentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf781e6c55ca0fa7, []int{4}
}
func (m *ReApplyVPCAttachmentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReApplyVPCAttachmentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReApplyVPCAttachmentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReApplyVPCAttachmentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReApplyVPCAttachmentResponse.Merge(m, src)
}
func (m *ReApplyVPCAttachmentResponse) XXX_Size() int {
	return m.Size()
}
func (m *ReApplyVPCAttachmentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReApplyVPCAttachmentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReApplyVPCAttachmentResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*DiscoverVPCRequest)(nil), "ves.io.schema.cloud_connect.DiscoverVPCRequest")
	golang_proto.RegisterType((*DiscoverVPCRequest)(nil), "ves.io.schema.cloud_connect.DiscoverVPCRequest")
	proto.RegisterType((*DiscoverVPCResponse)(nil), "ves.io.schema.cloud_connect.DiscoverVPCResponse")
	golang_proto.RegisterType((*DiscoverVPCResponse)(nil), "ves.io.schema.cloud_connect.DiscoverVPCResponse")
	proto.RegisterType((*DiscoveredVPCType)(nil), "ves.io.schema.cloud_connect.DiscoveredVPCType")
	golang_proto.RegisterType((*DiscoveredVPCType)(nil), "ves.io.schema.cloud_connect.DiscoveredVPCType")
	proto.RegisterType((*ReApplyVPCAttachmentRequest)(nil), "ves.io.schema.cloud_connect.ReApplyVPCAttachmentRequest")
	golang_proto.RegisterType((*ReApplyVPCAttachmentRequest)(nil), "ves.io.schema.cloud_connect.ReApplyVPCAttachmentRequest")
	proto.RegisterType((*ReApplyVPCAttachmentResponse)(nil), "ves.io.schema.cloud_connect.ReApplyVPCAttachmentResponse")
	golang_proto.RegisterType((*ReApplyVPCAttachmentResponse)(nil), "ves.io.schema.cloud_connect.ReApplyVPCAttachmentResponse")
}

func init() {
	proto.RegisterFile("ves.io/schema/cloud_connect/public_customapi_lucario.proto", fileDescriptor_bf781e6c55ca0fa7)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/cloud_connect/public_customapi_lucario.proto", fileDescriptor_bf781e6c55ca0fa7)
}

var fileDescriptor_bf781e6c55ca0fa7 = []byte{
	// 831 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0x41, 0x6f, 0xdc, 0x44,
	0x14, 0xde, 0xd9, 0x4d, 0x43, 0x33, 0xa1, 0x95, 0x6a, 0x0a, 0xda, 0x6e, 0xa2, 0x61, 0xe5, 0x03,
	0x44, 0x05, 0xdb, 0x10, 0x54, 0x09, 0x72, 0x40, 0x4a, 0x37, 0x97, 0x4a, 0xa8, 0x6c, 0x0d, 0xe4,
	0x80, 0x84, 0x56, 0xb3, 0xe3, 0x17, 0x67, 0xa8, 0xed, 0x19, 0x66, 0xc6, 0x4e, 0x73, 0x40, 0xaa,
	0x7a, 0x85, 0x03, 0x12, 0x47, 0xfe, 0x00, 0xf0, 0x0b, 0x90, 0xca, 0xa1, 0x37, 0x7a, 0x01, 0x45,
	0x70, 0xe9, 0xb1, 0x71, 0x10, 0xe2, 0xd8, 0x0b, 0x57, 0x40, 0xf6, 0x7a, 0xb7, 0xeb, 0x6d, 0xb2,
	0x0a, 0x28, 0x37, 0x3f, 0x7f, 0xef, 0x7b, 0xfe, 0xde, 0xf7, 0xde, 0x78, 0xf0, 0x46, 0x06, 0xda,
	0xe5, 0xc2, 0xd3, 0x6c, 0x17, 0x62, 0xea, 0xb1, 0x48, 0xa4, 0xc1, 0x80, 0x89, 0x24, 0x01, 0x66,
	0x3c, 0x99, 0x0e, 0x23, 0xce, 0x06, 0x2c, 0xd5, 0x46, 0xc4, 0x54, 0xf2, 0x41, 0x94, 0x32, 0xaa,
	0xb8, 0x70, 0xa5, 0x12, 0x46, 0x58, 0x2b, 0x23, 0xae, 0x3b, 0xe2, 0xba, 0x35, 0x6e, 0xc7, 0x09,
	0xb9, 0xd9, 0x4d, 0x87, 0x2e, 0x13, 0xb1, 0x17, 0x8a, 0x50, 0x78, 0x25, 0x67, 0x98, 0xee, 0x94,
	0x51, 0x19, 0x94, 0x4f, 0xa3, 0x5a, 0x9d, 0xd5, 0x50, 0x88, 0x30, 0x02, 0x8f, 0x4a, 0xee, 0xd1,
	0x24, 0x11, 0x86, 0x1a, 0x2e, 0x12, 0x5d, 0xa1, 0xaf, 0xce, 0x53, 0x69, 0xf6, 0x25, 0x8c, 0x13,
	0x57, 0xea, 0x89, 0x42, 0x4e, 0x57, 0x21, 0x75, 0x50, 0x73, 0x03, 0x35, 0xf2, 0x95, 0x3a, 0x3e,
	0x0d, 0xad, 0xd6, 0xa1, 0x8c, 0x46, 0x3c, 0xa0, 0x06, 0x2a, 0xd4, 0x9e, 0x41, 0x41, 0x43, 0x92,
	0xcd, 0x7c, 0xbc, 0x3b, 0x93, 0xc3, 0x61, 0x6f, 0x50, 0xcf, 0x78, 0xf9, 0xd9, 0x0c, 0x3d, 0x2d,
	0xc2, 0xfe, 0x19, 0x61, 0x6b, 0x8b, 0x6b, 0x26, 0x32, 0x50, 0xdb, 0xfd, 0x9e, 0x0f, 0x9f, 0xa5,
	0xa0, 0x8d, 0xf5, 0x1e, 0x5e, 0x60, 0x0a, 0x82, 0x36, 0xea, 0xa2, 0xb5, 0xe5, 0x75, 0xdb, 0xad,
	0x4f, 0xa5, 0x2c, 0xe3, 0xbe, 0x3f, 0xfc, 0x14, 0x98, 0xf1, 0x61, 0xe7, 0xc3, 0x7d, 0x09, 0xd7,
	0x2f, 0x7f, 0xff, 0xf9, 0xa5, 0xca, 0x43, 0x05, 0x01, 0x24, 0x86, 0xd3, 0x48, 0xfb, 0x65, 0x15,
	0xeb, 0x16, 0x3e, 0x2f, 0x95, 0xc8, 0x78, 0x00, 0xaa, 0xdd, 0xec, 0xa2, 0xb5, 0x8b, 0xeb, 0xd7,
	0xdc, 0x39, 0x73, 0x76, 0x7b, 0x45, 0xd4, 0x1b, 0x05, 0xfd, 0x8a, 0x58, 0x7c, 0xc4, 0x9f, 0x94,
	0xb1, 0x5e, 0xc2, 0x8b, 0x0a, 0x42, 0x2e, 0x92, 0x76, 0xab, 0x8b, 0xd6, 0x96, 0xfc, 0x2a, 0xb2,
	0x23, 0xfc, 0x42, 0xad, 0x1d, 0x2d, 0x45, 0xa2, 0xc1, 0xfa, 0x08, 0x5f, 0x0c, 0xaa, 0xd7, 0x10,
	0x0c, 0x32, 0xc9, 0xda, 0xa8, 0xdb, 0x5a, 0x5b, 0x5e, 0x77, 0xe7, 0xea, 0xd8, 0x9a, 0x50, 0xb6,
	0xfb, 0xbd, 0x52, 0xc0, 0x85, 0xa7, 0x55, 0xb6, 0x25, 0xb3, 0xff, 0x46, 0xf8, 0xd2, 0x33, 0x49,
	0xd6, 0x15, 0x7c, 0x3e, 0x93, 0x6c, 0x90, 0xd0, 0x18, 0x4a, 0x03, 0x97, 0xfc, 0xe7, 0x32, 0xc9,
	0x6e, 0xd2, 0x18, 0xac, 0x17, 0xf1, 0x62, 0x01, 0xf1, 0xa0, 0xf4, 0x61, 0xc9, 0x3f, 0x97, 0x49,
	0x76, 0x23, 0x38, 0xa9, 0x9b, 0xc9, 0x18, 0x16, 0xce, 0x7c, 0x0c, 0xe7, 0xce, 0x64, 0x0c, 0xf6,
	0x1f, 0x08, 0xaf, 0xf8, 0xb0, 0x29, 0x65, 0xb4, 0xbf, 0xdd, 0xef, 0x6d, 0x1a, 0x43, 0xd9, 0x6e,
	0x0c, 0x89, 0x19, 0xef, 0xd1, 0x27, 0xf8, 0x42, 0xad, 0xe6, 0x7f, 0x5b, 0xa8, 0x3a, 0xf7, 0xee,
	0x8f, 0x08, 0xf9, 0xcf, 0xb3, 0x29, 0x51, 0x27, 0xd9, 0x39, 0xdd, 0x68, 0xeb, 0x6c, 0x1a, 0x25,
	0x78, 0xf5, 0xf8, 0x3e, 0x47, 0x0b, 0xb6, 0xfe, 0xd7, 0x02, 0xb6, 0xca, 0x32, 0x5b, 0xd4, 0xd0,
	0x5e, 0xf9, 0x73, 0xdb, 0xec, 0xdf, 0xb0, 0xfe, 0x41, 0x78, 0x79, 0x6a, 0x1f, 0x2d, 0xef, 0x54,
	0xfb, 0xf6, 0xf4, 0x20, 0x76, 0xde, 0x38, 0x3d, 0x61, 0xa4, 0xc4, 0xfe, 0x12, 0x3d, 0xfc, 0xa1,
	0x89, 0xf2, 0x9f, 0xda, 0x1f, 0xec, 0x5c, 0xbb, 0xc3, 0x1c, 0x0d, 0x2c, 0x55, 0x10, 0x83, 0xde,
	0x75, 0x86, 0x54, 0x73, 0xe6, 0xc4, 0x22, 0xe1, 0x46, 0xa8, 0xd7, 0xbb, 0xb3, 0xb0, 0x36, 0x34,
	0x09, 0xa8, 0x0a, 0x26, 0x19, 0x19, 0x68, 0x87, 0x0b, 0x27, 0x01, 0xb3, 0x27, 0xd4, 0x6d, 0x47,
	0x01, 0x0d, 0xee, 0xfd, 0xf6, 0xfb, 0xd7, 0xcd, 0xd7, 0xec, 0x57, 0xaa, 0xdf, 0xb8, 0x57, 0xec,
	0xb8, 0x96, 0x94, 0x81, 0xf6, 0xf4, 0xbe, 0x36, 0x10, 0x7b, 0xe3, 0x03, 0x52, 0x1c, 0xb2, 0x0d,
	0x74, 0xd5, 0xfa, 0xae, 0x89, 0x2f, 0x1f, 0xe7, 0x9c, 0xf5, 0xf6, 0xdc, 0xce, 0xe6, 0x2c, 0x55,
	0xe7, 0x9d, 0xff, 0xc1, 0xac, 0xcc, 0xf9, 0xa6, 0x30, 0xe6, 0xe6, 0xf1, 0xc6, 0xa4, 0x1a, 0xe6,
	0xb9, 0x52, 0xc2, 0x33, 0x96, 0xec, 0x29, 0x6e, 0xa0, 0xf4, 0xa4, 0x67, 0xbf, 0x7b, 0xb2, 0x27,
	0x35, 0x81, 0x03, 0x05, 0xb4, 0x10, 0x58, 0x18, 0x34, 0xa0, 0x13, 0x89, 0x1b, 0xe8, 0x6a, 0xe7,
	0xcd, 0x07, 0xf7, 0x51, 0xeb, 0xd7, 0xfb, 0xc8, 0x9e, 0xd7, 0xdf, 0xe8, 0x94, 0xdc, 0xfb, 0xa5,
	0xdd, 0x7a, 0xdc, 0x44, 0xd7, 0xbf, 0x40, 0x07, 0x87, 0xa4, 0xf1, 0xe8, 0x90, 0x34, 0x9e, 0x1c,
	0x12, 0x74, 0x37, 0x27, 0xe8, 0xdb, 0x9c, 0xa0, 0x87, 0x39, 0x41, 0x07, 0x39, 0x41, 0x8f, 0x73,
	0x82, 0xfe, 0xcc, 0x49, 0xe3, 0x49, 0x4e, 0xd0, 0x57, 0x47, 0xa4, 0xf1, 0xe0, 0x88, 0xa0, 0x83,
	0x23, 0xd2, 0x78, 0x74, 0x44, 0x1a, 0x1f, 0xdf, 0x0a, 0x85, 0xbc, 0x1d, 0xba, 0x99, 0x88, 0x0c,
	0x28, 0x45, 0xdd, 0x54, 0x7b, 0xe5, 0xc3, 0x8e, 0x50, 0xb1, 0x33, 0x5e, 0x7c, 0x67, 0x0c, 0x7b,
	0x72, 0x18, 0x0a, 0x0f, 0xee, 0x98, 0xf1, 0x4d, 0x77, 0xcc, 0xb5, 0x39, 0x5c, 0x2c, 0x2f, 0x95,
	0xb7, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x08, 0x01, 0xd1, 0x5c, 0x02, 0x08, 0x00, 0x00,
}

func (this *DiscoverVPCRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DiscoverVPCRequest)
	if !ok {
		that2, ok := that.(DiscoverVPCRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Cred.Equal(that1.Cred) {
		return false
	}
	if this.Provider != that1.Provider {
		return false
	}
	if this.Region != that1.Region {
		return false
	}
	return true
}
func (this *DiscoverVPCResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DiscoverVPCResponse)
	if !ok {
		that2, ok := that.(DiscoverVPCResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.DiscoveredVpc) != len(that1.DiscoveredVpc) {
		return false
	}
	for i := range this.DiscoveredVpc {
		if !this.DiscoveredVpc[i].Equal(that1.DiscoveredVpc[i]) {
			return false
		}
	}
	return true
}
func (this *DiscoveredVPCType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DiscoveredVPCType)
	if !ok {
		that2, ok := that.(DiscoveredVPCType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VpcName != that1.VpcName {
		return false
	}
	if this.VpcId != that1.VpcId {
		return false
	}
	if this.Region != that1.Region {
		return false
	}
	if !this.Cred.Equal(that1.Cred) {
		return false
	}
	if this.Provider != that1.Provider {
		return false
	}
	return true
}
func (this *ReApplyVPCAttachmentRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReApplyVPCAttachmentRequest)
	if !ok {
		that2, ok := that.(ReApplyVPCAttachmentRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CloudConnect.Equal(that1.CloudConnect) {
		return false
	}
	if this.VpcId != that1.VpcId {
		return false
	}
	if this.Provider != that1.Provider {
		return false
	}
	return true
}
func (this *ReApplyVPCAttachmentResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReApplyVPCAttachmentResponse)
	if !ok {
		that2, ok := that.(ReApplyVPCAttachmentResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *DiscoverVPCRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&cloud_connect.DiscoverVPCRequest{")
	if this.Cred != nil {
		s = append(s, "Cred: "+fmt.Sprintf("%#v", this.Cred)+",\n")
	}
	s = append(s, "Provider: "+fmt.Sprintf("%#v", this.Provider)+",\n")
	s = append(s, "Region: "+fmt.Sprintf("%#v", this.Region)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DiscoverVPCResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&cloud_connect.DiscoverVPCResponse{")
	if this.DiscoveredVpc != nil {
		s = append(s, "DiscoveredVpc: "+fmt.Sprintf("%#v", this.DiscoveredVpc)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DiscoveredVPCType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&cloud_connect.DiscoveredVPCType{")
	s = append(s, "VpcName: "+fmt.Sprintf("%#v", this.VpcName)+",\n")
	s = append(s, "VpcId: "+fmt.Sprintf("%#v", this.VpcId)+",\n")
	s = append(s, "Region: "+fmt.Sprintf("%#v", this.Region)+",\n")
	if this.Cred != nil {
		s = append(s, "Cred: "+fmt.Sprintf("%#v", this.Cred)+",\n")
	}
	s = append(s, "Provider: "+fmt.Sprintf("%#v", this.Provider)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReApplyVPCAttachmentRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&cloud_connect.ReApplyVPCAttachmentRequest{")
	if this.CloudConnect != nil {
		s = append(s, "CloudConnect: "+fmt.Sprintf("%#v", this.CloudConnect)+",\n")
	}
	s = append(s, "VpcId: "+fmt.Sprintf("%#v", this.VpcId)+",\n")
	s = append(s, "Provider: "+fmt.Sprintf("%#v", this.Provider)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReApplyVPCAttachmentResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&cloud_connect.ReApplyVPCAttachmentResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPublicCustomapiLucario(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CloudDataCustomAPIClient is the client API for CloudDataCustomAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CloudDataCustomAPIClient interface {
	// Cloud Connect VPC Discovery
	//
	// x-displayName: "Cloud Connect VPC Discovery"
	// Returns all the vpcs for a specified cloud provider, region and cred.
	// For AWS it returns all the vpcs which are not attached to any transit gateway in that region.
	DiscoverVPC(ctx context.Context, in *DiscoverVPCRequest, opts ...grpc.CallOption) (*DiscoverVPCResponse, error)
	// Re-apply VPC attachment
	//
	// x-displayName: "ReApplyVPCAttachment"
	// Re-applies VPC attachment in a cloud connect config.
	ReApplyVPCAttachment(ctx context.Context, in *ReApplyVPCAttachmentRequest, opts ...grpc.CallOption) (*ReApplyVPCAttachmentResponse, error)
}

type cloudDataCustomAPIClient struct {
	cc *grpc.ClientConn
}

func NewCloudDataCustomAPIClient(cc *grpc.ClientConn) CloudDataCustomAPIClient {
	return &cloudDataCustomAPIClient{cc}
}

func (c *cloudDataCustomAPIClient) DiscoverVPC(ctx context.Context, in *DiscoverVPCRequest, opts ...grpc.CallOption) (*DiscoverVPCResponse, error) {
	out := new(DiscoverVPCResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.cloud_connect.CloudDataCustomAPI/DiscoverVPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDataCustomAPIClient) ReApplyVPCAttachment(ctx context.Context, in *ReApplyVPCAttachmentRequest, opts ...grpc.CallOption) (*ReApplyVPCAttachmentResponse, error) {
	out := new(ReApplyVPCAttachmentResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.cloud_connect.CloudDataCustomAPI/ReApplyVPCAttachment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudDataCustomAPIServer is the server API for CloudDataCustomAPI service.
type CloudDataCustomAPIServer interface {
	// Cloud Connect VPC Discovery
	//
	// x-displayName: "Cloud Connect VPC Discovery"
	// Returns all the vpcs for a specified cloud provider, region and cred.
	// For AWS it returns all the vpcs which are not attached to any transit gateway in that region.
	DiscoverVPC(context.Context, *DiscoverVPCRequest) (*DiscoverVPCResponse, error)
	// Re-apply VPC attachment
	//
	// x-displayName: "ReApplyVPCAttachment"
	// Re-applies VPC attachment in a cloud connect config.
	ReApplyVPCAttachment(context.Context, *ReApplyVPCAttachmentRequest) (*ReApplyVPCAttachmentResponse, error)
}

// UnimplementedCloudDataCustomAPIServer can be embedded to have forward compatible implementations.
type UnimplementedCloudDataCustomAPIServer struct {
}

func (*UnimplementedCloudDataCustomAPIServer) DiscoverVPC(ctx context.Context, req *DiscoverVPCRequest) (*DiscoverVPCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscoverVPC not implemented")
}
func (*UnimplementedCloudDataCustomAPIServer) ReApplyVPCAttachment(ctx context.Context, req *ReApplyVPCAttachmentRequest) (*ReApplyVPCAttachmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReApplyVPCAttachment not implemented")
}

func RegisterCloudDataCustomAPIServer(s *grpc.Server, srv CloudDataCustomAPIServer) {
	s.RegisterService(&_CloudDataCustomAPI_serviceDesc, srv)
}

func _CloudDataCustomAPI_DiscoverVPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoverVPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDataCustomAPIServer).DiscoverVPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.cloud_connect.CloudDataCustomAPI/DiscoverVPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDataCustomAPIServer).DiscoverVPC(ctx, req.(*DiscoverVPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDataCustomAPI_ReApplyVPCAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReApplyVPCAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDataCustomAPIServer).ReApplyVPCAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.cloud_connect.CloudDataCustomAPI/ReApplyVPCAttachment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDataCustomAPIServer).ReApplyVPCAttachment(ctx, req.(*ReApplyVPCAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CloudDataCustomAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.cloud_connect.CloudDataCustomAPI",
	HandlerType: (*CloudDataCustomAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DiscoverVPC",
			Handler:    _CloudDataCustomAPI_DiscoverVPC_Handler,
		},
		{
			MethodName: "ReApplyVPCAttachment",
			Handler:    _CloudDataCustomAPI_ReApplyVPCAttachment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/cloud_connect/public_customapi_lucario.proto",
}

func (m *DiscoverVPCRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DiscoverVPCRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DiscoverVPCRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Region) > 0 {
		i -= len(m.Region)
		copy(dAtA[i:], m.Region)
		i = encodeVarintPublicCustomapiLucario(dAtA, i, uint64(len(m.Region)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Provider != 0 {
		i = encodeVarintPublicCustomapiLucario(dAtA, i, uint64(m.Provider))
		i--
		dAtA[i] = 0x10
	}
	if m.Cred != nil {
		{
			size, err := m.Cred.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiLucario(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DiscoverVPCResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DiscoverVPCResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DiscoverVPCResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DiscoveredVpc) > 0 {
		for iNdEx := len(m.DiscoveredVpc) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DiscoveredVpc[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapiLucario(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DiscoveredVPCType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DiscoveredVPCType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DiscoveredVPCType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Provider != 0 {
		i = encodeVarintPublicCustomapiLucario(dAtA, i, uint64(m.Provider))
		i--
		dAtA[i] = 0x28
	}
	if m.Cred != nil {
		{
			size, err := m.Cred.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiLucario(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Region) > 0 {
		i -= len(m.Region)
		copy(dAtA[i:], m.Region)
		i = encodeVarintPublicCustomapiLucario(dAtA, i, uint64(len(m.Region)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.VpcId) > 0 {
		i -= len(m.VpcId)
		copy(dAtA[i:], m.VpcId)
		i = encodeVarintPublicCustomapiLucario(dAtA, i, uint64(len(m.VpcId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.VpcName) > 0 {
		i -= len(m.VpcName)
		copy(dAtA[i:], m.VpcName)
		i = encodeVarintPublicCustomapiLucario(dAtA, i, uint64(len(m.VpcName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReApplyVPCAttachmentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReApplyVPCAttachmentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReApplyVPCAttachmentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Provider != 0 {
		i = encodeVarintPublicCustomapiLucario(dAtA, i, uint64(m.Provider))
		i--
		dAtA[i] = 0x18
	}
	if len(m.VpcId) > 0 {
		i -= len(m.VpcId)
		copy(dAtA[i:], m.VpcId)
		i = encodeVarintPublicCustomapiLucario(dAtA, i, uint64(len(m.VpcId)))
		i--
		dAtA[i] = 0x12
	}
	if m.CloudConnect != nil {
		{
			size, err := m.CloudConnect.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiLucario(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReApplyVPCAttachmentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReApplyVPCAttachmentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReApplyVPCAttachmentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintPublicCustomapiLucario(dAtA []byte, offset int, v uint64) int {
	offset -= sovPublicCustomapiLucario(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DiscoverVPCRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cred != nil {
		l = m.Cred.Size()
		n += 1 + l + sovPublicCustomapiLucario(uint64(l))
	}
	if m.Provider != 0 {
		n += 1 + sovPublicCustomapiLucario(uint64(m.Provider))
	}
	l = len(m.Region)
	if l > 0 {
		n += 1 + l + sovPublicCustomapiLucario(uint64(l))
	}
	return n
}

func (m *DiscoverVPCResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DiscoveredVpc) > 0 {
		for _, e := range m.DiscoveredVpc {
			l = e.Size()
			n += 1 + l + sovPublicCustomapiLucario(uint64(l))
		}
	}
	return n
}

func (m *DiscoveredVPCType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VpcName)
	if l > 0 {
		n += 1 + l + sovPublicCustomapiLucario(uint64(l))
	}
	l = len(m.VpcId)
	if l > 0 {
		n += 1 + l + sovPublicCustomapiLucario(uint64(l))
	}
	l = len(m.Region)
	if l > 0 {
		n += 1 + l + sovPublicCustomapiLucario(uint64(l))
	}
	if m.Cred != nil {
		l = m.Cred.Size()
		n += 1 + l + sovPublicCustomapiLucario(uint64(l))
	}
	if m.Provider != 0 {
		n += 1 + sovPublicCustomapiLucario(uint64(m.Provider))
	}
	return n
}

func (m *ReApplyVPCAttachmentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CloudConnect != nil {
		l = m.CloudConnect.Size()
		n += 1 + l + sovPublicCustomapiLucario(uint64(l))
	}
	l = len(m.VpcId)
	if l > 0 {
		n += 1 + l + sovPublicCustomapiLucario(uint64(l))
	}
	if m.Provider != 0 {
		n += 1 + sovPublicCustomapiLucario(uint64(m.Provider))
	}
	return n
}

func (m *ReApplyVPCAttachmentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovPublicCustomapiLucario(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPublicCustomapiLucario(x uint64) (n int) {
	return sovPublicCustomapiLucario(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *DiscoverVPCRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DiscoverVPCRequest{`,
		`Cred:` + strings.Replace(fmt.Sprintf("%v", this.Cred), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`Provider:` + fmt.Sprintf("%v", this.Provider) + `,`,
		`Region:` + fmt.Sprintf("%v", this.Region) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DiscoverVPCResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDiscoveredVpc := "[]*DiscoveredVPCType{"
	for _, f := range this.DiscoveredVpc {
		repeatedStringForDiscoveredVpc += strings.Replace(f.String(), "DiscoveredVPCType", "DiscoveredVPCType", 1) + ","
	}
	repeatedStringForDiscoveredVpc += "}"
	s := strings.Join([]string{`&DiscoverVPCResponse{`,
		`DiscoveredVpc:` + repeatedStringForDiscoveredVpc + `,`,
		`}`,
	}, "")
	return s
}
func (this *DiscoveredVPCType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DiscoveredVPCType{`,
		`VpcName:` + fmt.Sprintf("%v", this.VpcName) + `,`,
		`VpcId:` + fmt.Sprintf("%v", this.VpcId) + `,`,
		`Region:` + fmt.Sprintf("%v", this.Region) + `,`,
		`Cred:` + strings.Replace(fmt.Sprintf("%v", this.Cred), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`Provider:` + fmt.Sprintf("%v", this.Provider) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReApplyVPCAttachmentRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReApplyVPCAttachmentRequest{`,
		`CloudConnect:` + strings.Replace(fmt.Sprintf("%v", this.CloudConnect), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`VpcId:` + fmt.Sprintf("%v", this.VpcId) + `,`,
		`Provider:` + fmt.Sprintf("%v", this.Provider) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReApplyVPCAttachmentResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReApplyVPCAttachmentResponse{`,
		`}`,
	}, "")
	return s
}
func valueToStringPublicCustomapiLucario(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *DiscoverVPCRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiLucario
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiscoverVPCRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiscoverVPCRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cred", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiLucario
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiLucario
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiLucario
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cred == nil {
				m.Cred = &views.ObjectRefType{}
			}
			if err := m.Cred.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			m.Provider = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiLucario
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Provider |= CloudConnectProviderType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiLucario
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapiLucario
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiLucario
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiLucario(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiLucario
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiLucario
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DiscoverVPCResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiLucario
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiscoverVPCResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiscoverVPCResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscoveredVpc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiLucario
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiLucario
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiLucario
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DiscoveredVpc = append(m.DiscoveredVpc, &DiscoveredVPCType{})
			if err := m.DiscoveredVpc[len(m.DiscoveredVpc)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiLucario(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiLucario
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiLucario
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DiscoveredVPCType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiLucario
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiscoveredVPCType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiscoveredVPCType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpcName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiLucario
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapiLucario
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiLucario
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VpcName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpcId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiLucario
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapiLucario
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiLucario
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VpcId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiLucario
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapiLucario
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiLucario
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cred", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiLucario
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiLucario
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiLucario
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cred == nil {
				m.Cred = &views.ObjectRefType{}
			}
			if err := m.Cred.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			m.Provider = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiLucario
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Provider |= CloudConnectProviderType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiLucario(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiLucario
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiLucario
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReApplyVPCAttachmentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiLucario
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReApplyVPCAttachmentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReApplyVPCAttachmentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudConnect", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiLucario
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiLucario
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiLucario
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CloudConnect == nil {
				m.CloudConnect = &views.ObjectRefType{}
			}
			if err := m.CloudConnect.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpcId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiLucario
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapiLucario
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiLucario
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VpcId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			m.Provider = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiLucario
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Provider |= CloudConnectProviderType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiLucario(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiLucario
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiLucario
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReApplyVPCAttachmentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiLucario
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReApplyVPCAttachmentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReApplyVPCAttachmentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiLucario(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiLucario
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiLucario
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublicCustomapiLucario(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublicCustomapiLucario
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapiLucario
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapiLucario
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPublicCustomapiLucario
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPublicCustomapiLucario
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPublicCustomapiLucario
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPublicCustomapiLucario        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublicCustomapiLucario          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPublicCustomapiLucario = fmt.Errorf("proto: unexpected end of group")
)

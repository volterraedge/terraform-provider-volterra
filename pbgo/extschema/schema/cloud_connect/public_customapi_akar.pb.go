// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/cloud_connect/public_customapi_akar.proto

// Cloud Connect
//
// x-displayName: "Cloud Connect"
// Cloud Connect related public APIs served by akar.
// It is always scoped by system namespace.

package cloud_connect

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	site "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/site"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EdgeListRequest
//
// x-displayName: "Edge List Request"
// Request body that returns online edge sites both customer edge and cloud edge.
type EdgeListRequest struct {
}

func (m *EdgeListRequest) Reset()      { *m = EdgeListRequest{} }
func (*EdgeListRequest) ProtoMessage() {}
func (*EdgeListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_18169a6538a880e4, []int{0}
}
func (m *EdgeListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EdgeListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EdgeListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EdgeListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EdgeListRequest.Merge(m, src)
}
func (m *EdgeListRequest) XXX_Size() int {
	return m.Size()
}
func (m *EdgeListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EdgeListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EdgeListRequest proto.InternalMessageInfo

// EdgeListResponse
//
// x-displayName: "Edge List Response"
// Response body that returns online edge sites both customer edge and cloud edge.
type EdgeListResponse struct {
	// Edge Site
	//
	// x-displayName: "Edge Site"
	// Reference to a edge site
	EdgeSite []*EdgeSite `protobuf:"bytes,1,rep,name=edge_site,json=edgeSite,proto3" json:"edge_site,omitempty"`
}

func (m *EdgeListResponse) Reset()      { *m = EdgeListResponse{} }
func (*EdgeListResponse) ProtoMessage() {}
func (*EdgeListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_18169a6538a880e4, []int{1}
}
func (m *EdgeListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EdgeListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EdgeListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EdgeListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EdgeListResponse.Merge(m, src)
}
func (m *EdgeListResponse) XXX_Size() int {
	return m.Size()
}
func (m *EdgeListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EdgeListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EdgeListResponse proto.InternalMessageInfo

func (m *EdgeListResponse) GetEdgeSite() []*EdgeSite {
	if m != nil {
		return m.EdgeSite
	}
	return nil
}

// Edge Site
//
// x-displayName: "Edge Site"
// Reference to a edge site
type EdgeSite struct {
	// Edge Site
	//
	// x-displayName: "Egde Site Reference"
	// Reference to a edge site
	EdgeSite *schema.ObjectRefType `protobuf:"bytes,1,opt,name=edge_site,json=edgeSite,proto3" json:"edge_site,omitempty"`
	// Region
	//
	// x-displayName: "Region"
	// Edge site region
	Region string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	// Provider
	//
	// x-displayName: "Provider"
	// Edge site provider
	Provider CloudConnectProviderType `protobuf:"varint,3,opt,name=provider,proto3,enum=ves.io.schema.cloud_connect.CloudConnectProviderType" json:"provider,omitempty"`
	// Edge Coordinates
	//
	// x-displayName: "Edge Coordinates"
	// Edge Coordinates
	Coordinates *site.Coordinates `protobuf:"bytes,4,opt,name=coordinates,proto3" json:"coordinates,omitempty"`
}

func (m *EdgeSite) Reset()      { *m = EdgeSite{} }
func (*EdgeSite) ProtoMessage() {}
func (*EdgeSite) Descriptor() ([]byte, []int) {
	return fileDescriptor_18169a6538a880e4, []int{2}
}
func (m *EdgeSite) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EdgeSite) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EdgeSite.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EdgeSite) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EdgeSite.Merge(m, src)
}
func (m *EdgeSite) XXX_Size() int {
	return m.Size()
}
func (m *EdgeSite) XXX_DiscardUnknown() {
	xxx_messageInfo_EdgeSite.DiscardUnknown(m)
}

var xxx_messageInfo_EdgeSite proto.InternalMessageInfo

func (m *EdgeSite) GetEdgeSite() *schema.ObjectRefType {
	if m != nil {
		return m.EdgeSite
	}
	return nil
}

func (m *EdgeSite) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *EdgeSite) GetProvider() CloudConnectProviderType {
	if m != nil {
		return m.Provider
	}
	return AWS
}

func (m *EdgeSite) GetCoordinates() *site.Coordinates {
	if m != nil {
		return m.Coordinates
	}
	return nil
}

// CredentialsRequest
//
// x-displayName: "Edge Credentials Request"
// Request to return all the credentials for the matching cloud site type.
type CredentialsRequest struct {
	// Provider
	//
	// x-displayName: "Provider"
	// Edge site provider
	Provider CloudConnectProviderType `protobuf:"varint,3,opt,name=provider,proto3,enum=ves.io.schema.cloud_connect.CloudConnectProviderType" json:"provider,omitempty"`
}

func (m *CredentialsRequest) Reset()      { *m = CredentialsRequest{} }
func (*CredentialsRequest) ProtoMessage() {}
func (*CredentialsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_18169a6538a880e4, []int{3}
}
func (m *CredentialsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CredentialsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CredentialsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CredentialsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CredentialsRequest.Merge(m, src)
}
func (m *CredentialsRequest) XXX_Size() int {
	return m.Size()
}
func (m *CredentialsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CredentialsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CredentialsRequest proto.InternalMessageInfo

func (m *CredentialsRequest) GetProvider() CloudConnectProviderType {
	if m != nil {
		return m.Provider
	}
	return AWS
}

// CredentialsResponse
//
// x-displayName: "CredentialsResponse"
// Response that returns all the credentials for the matching provider.
type CredentialsResponse struct {
	// Credentials
	//
	// x-displayName: "Cloud Credentials"
	// Cloud credentials
	Cred []*views.ObjectRefType `protobuf:"bytes,1,rep,name=cred,proto3" json:"cred,omitempty"`
}

func (m *CredentialsResponse) Reset()      { *m = CredentialsResponse{} }
func (*CredentialsResponse) ProtoMessage() {}
func (*CredentialsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_18169a6538a880e4, []int{4}
}
func (m *CredentialsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CredentialsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CredentialsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CredentialsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CredentialsResponse.Merge(m, src)
}
func (m *CredentialsResponse) XXX_Size() int {
	return m.Size()
}
func (m *CredentialsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CredentialsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CredentialsResponse proto.InternalMessageInfo

func (m *CredentialsResponse) GetCred() []*views.ObjectRefType {
	if m != nil {
		return m.Cred
	}
	return nil
}

func init() {
	proto.RegisterType((*EdgeListRequest)(nil), "ves.io.schema.cloud_connect.EdgeListRequest")
	golang_proto.RegisterType((*EdgeListRequest)(nil), "ves.io.schema.cloud_connect.EdgeListRequest")
	proto.RegisterType((*EdgeListResponse)(nil), "ves.io.schema.cloud_connect.EdgeListResponse")
	golang_proto.RegisterType((*EdgeListResponse)(nil), "ves.io.schema.cloud_connect.EdgeListResponse")
	proto.RegisterType((*EdgeSite)(nil), "ves.io.schema.cloud_connect.EdgeSite")
	golang_proto.RegisterType((*EdgeSite)(nil), "ves.io.schema.cloud_connect.EdgeSite")
	proto.RegisterType((*CredentialsRequest)(nil), "ves.io.schema.cloud_connect.CredentialsRequest")
	golang_proto.RegisterType((*CredentialsRequest)(nil), "ves.io.schema.cloud_connect.CredentialsRequest")
	proto.RegisterType((*CredentialsResponse)(nil), "ves.io.schema.cloud_connect.CredentialsResponse")
	golang_proto.RegisterType((*CredentialsResponse)(nil), "ves.io.schema.cloud_connect.CredentialsResponse")
}

func init() {
	proto.RegisterFile("ves.io/schema/cloud_connect/public_customapi_akar.proto", fileDescriptor_18169a6538a880e4)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/cloud_connect/public_customapi_akar.proto", fileDescriptor_18169a6538a880e4)
}

var fileDescriptor_18169a6538a880e4 = []byte{
	// 737 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0x31, 0x4f, 0xdb, 0x5a,
	0x14, 0xce, 0x0d, 0x11, 0x02, 0x23, 0x3d, 0xc0, 0xef, 0xe9, 0x29, 0x2f, 0x20, 0x13, 0xf9, 0x09,
	0xbd, 0x0c, 0xd8, 0x46, 0x79, 0x42, 0x8c, 0x15, 0x44, 0x1d, 0x2a, 0x21, 0x15, 0x42, 0xd5, 0xa1,
	0x4b, 0x74, 0x63, 0x9f, 0x98, 0x5b, 0xe2, 0x7b, 0xdd, 0x7b, 0xaf, 0x03, 0xa8, 0x42, 0x42, 0x0c,
	0x5d, 0x3a, 0xb4, 0x52, 0x97, 0xfe, 0x84, 0xaa, 0xbf, 0xa0, 0x12, 0x1d, 0xd8, 0xca, 0x54, 0xa1,
	0x76, 0x61, 0x2c, 0x4e, 0x87, 0x8e, 0xac, 0xdd, 0xaa, 0x38, 0x0e, 0xd8, 0xa6, 0x0a, 0x2c, 0x6c,
	0xf7, 0xf8, 0x3b, 0xe7, 0x3b, 0xe7, 0xbb, 0xe7, 0xf3, 0x55, 0x96, 0x3b, 0x20, 0x4c, 0xc2, 0x2c,
	0x61, 0x6f, 0x81, 0x87, 0x2d, 0xbb, 0xcd, 0x02, 0xa7, 0x61, 0x33, 0x4a, 0xc1, 0x96, 0x96, 0x1f,
	0x34, 0xdb, 0xc4, 0x6e, 0xd8, 0x81, 0x90, 0xcc, 0xc3, 0x3e, 0x69, 0xe0, 0x6d, 0xcc, 0x4d, 0x9f,
	0x33, 0xc9, 0xd4, 0x99, 0x7e, 0xa1, 0xd9, 0x2f, 0x34, 0x53, 0x85, 0x25, 0xc3, 0x25, 0x72, 0x2b,
	0x68, 0x9a, 0x36, 0xf3, 0x2c, 0x97, 0xb9, 0xcc, 0x8a, 0x6a, 0x9a, 0x41, 0x2b, 0x8a, 0xa2, 0x20,
	0x3a, 0xf5, 0xb9, 0x4a, 0xb3, 0x2e, 0x63, 0x6e, 0x1b, 0x2c, 0xec, 0x13, 0x0b, 0x53, 0xca, 0x24,
	0x96, 0x84, 0x51, 0x11, 0xa3, 0xff, 0x0d, 0x1b, 0x51, 0xee, 0xf9, 0x30, 0x48, 0x9c, 0x49, 0x27,
	0x32, 0x3f, 0xc9, 0xa2, 0xa5, 0x41, 0x41, 0x24, 0xa4, 0x8a, 0xff, 0x49, 0xe3, 0x49, 0x68, 0x36,
	0x0d, 0x75, 0x70, 0x9b, 0x38, 0x58, 0x42, 0x8c, 0xea, 0x19, 0x14, 0x04, 0xd0, 0x4e, 0xa6, 0x79,
	0x39, 0x93, 0x43, 0x60, 0xa7, 0x91, 0xce, 0x98, 0xbb, 0x9e, 0x21, 0x92, 0x43, 0xe8, 0xd3, 0xca,
	0xe4, 0x7d, 0xc7, 0x85, 0x35, 0x22, 0x64, 0x1d, 0x9e, 0x05, 0x20, 0xa4, 0xfe, 0x58, 0x99, 0xba,
	0xfa, 0x24, 0x7c, 0x46, 0x05, 0xa8, 0xab, 0xca, 0x38, 0x38, 0x2e, 0x34, 0x7a, 0xfa, 0x8a, 0xa8,
	0x3c, 0x52, 0x99, 0xa8, 0xce, 0x9b, 0x43, 0x56, 0x65, 0xf6, 0x18, 0x36, 0x89, 0x84, 0xfa, 0x18,
	0xc4, 0x27, 0xfd, 0x27, 0x52, 0xc6, 0x06, 0x9f, 0xd5, 0x7b, 0x69, 0x42, 0x54, 0x99, 0xa8, 0xce,
	0x66, 0x08, 0x1f, 0x36, 0x9f, 0x82, 0x2d, 0xeb, 0xd0, 0x7a, 0xb4, 0xe7, 0xc3, 0x6a, 0xe1, 0xe0,
	0x23, 0x42, 0x57, 0x6c, 0xea, 0xdf, 0xca, 0x28, 0x07, 0x97, 0x30, 0x5a, 0xcc, 0x97, 0x51, 0x65,
	0xbc, 0x1e, 0x47, 0xea, 0x86, 0x32, 0xe6, 0x73, 0xd6, 0x21, 0x0e, 0xf0, 0xe2, 0x48, 0x19, 0x55,
	0xfe, 0xa8, 0x2e, 0x0d, 0x1d, 0xb4, 0xd6, 0x8b, 0x6a, 0xfd, 0x60, 0x3d, 0x2e, 0xec, 0x35, 0xac,
	0x5f, 0xd2, 0xa8, 0x2b, 0xca, 0x84, 0xcd, 0x18, 0x77, 0x08, 0xc5, 0x12, 0x44, 0xb1, 0x10, 0x4d,
	0x3b, 0x97, 0x61, 0xed, 0x09, 0x31, 0x6b, 0x57, 0x69, 0xf5, 0x64, 0x8d, 0xee, 0x2a, 0x6a, 0x8d,
	0x83, 0x03, 0x54, 0x12, 0xdc, 0x16, 0xf1, 0x4d, 0xdf, 0xc1, 0xac, 0xba, 0xad, 0xfc, 0x99, 0x6a,
	0x14, 0xef, 0x6f, 0x4d, 0x29, 0xd8, 0x1c, 0x9c, 0x78, 0x75, 0x7a, 0xa6, 0x4b, 0x64, 0x8b, 0xcc,
	0x7d, 0xff, 0xf5, 0x7e, 0x7f, 0x3a, 0xee, 0x9e, 0xe0, 0x8b, 0x58, 0xaa, 0x27, 0x05, 0x65, 0xb2,
	0xc6, 0x68, 0x8b, 0xb8, 0xb5, 0xe8, 0x1f, 0x5e, 0x59, 0x7f, 0xa0, 0x5e, 0xc4, 0xdb, 0xed, 0xd9,
	0x46, 0x5d, 0xb8, 0xd1, 0x1b, 0x09, 0xc3, 0x95, 0x8c, 0x5b, 0x66, 0xf7, 0xb5, 0xe8, 0x2f, 0xd0,
	0xc9, 0x87, 0x3c, 0x0a, 0x3f, 0x15, 0x37, 0x5b, 0x4b, 0xbb, 0xb6, 0x21, 0xc0, 0x0e, 0x38, 0x78,
	0x20, 0xb6, 0x8c, 0x26, 0x16, 0xc4, 0x36, 0x3c, 0x46, 0x89, 0x64, 0x7c, 0xa1, 0x9c, 0x85, 0x85,
	0xc4, 0xd4, 0xc1, 0xdc, 0xb9, 0xcc, 0xe8, 0x80, 0x30, 0x08, 0x33, 0x28, 0xc8, 0x1d, 0xc6, 0xb7,
	0x0d, 0x0e, 0xd8, 0x39, 0xfc, 0xfa, 0xfd, 0x4d, 0x7e, 0x5e, 0xfd, 0x37, 0x7e, 0xa4, 0x2c, 0x8a,
	0x3d, 0x10, 0x3e, 0xb6, 0x41, 0x58, 0x62, 0x4f, 0x48, 0xf0, 0xac, 0xc8, 0xb6, 0xed, 0x9e, 0xca,
	0x57, 0xf9, 0xfe, 0xcf, 0x93, 0xb8, 0x70, 0xd5, 0x1a, 0xbe, 0xc0, 0x6b, 0x1e, 0x28, 0x2d, 0xde,
	0xbe, 0x20, 0xd6, 0xff, 0xf6, 0xce, 0xf5, 0x2f, 0xab, 0x4b, 0x37, 0xe8, 0x4f, 0x78, 0xc2, 0x7a,
	0x3e, 0x30, 0xdf, 0x7e, 0x69, 0xf1, 0xf8, 0x08, 0x8d, 0x7c, 0x39, 0x42, 0xfa, 0x30, 0x4d, 0x7d,
	0x9f, 0x1d, 0x7e, 0x2e, 0xe6, 0xa7, 0xd0, 0xea, 0x4b, 0x74, 0x7a, 0xae, 0xe5, 0xce, 0xce, 0xb5,
	0xdc, 0xc5, 0xb9, 0x86, 0x0e, 0x42, 0x0d, 0xbd, 0x0b, 0x35, 0x74, 0x12, 0x6a, 0xe8, 0x34, 0xd4,
	0xd0, 0xb7, 0x50, 0x43, 0x3f, 0x42, 0x2d, 0x77, 0x11, 0x6a, 0xe8, 0x75, 0x57, 0xcb, 0x1d, 0x77,
	0x35, 0x74, 0xda, 0xd5, 0x72, 0x67, 0x5d, 0x2d, 0xf7, 0x64, 0xc3, 0x65, 0xfe, 0xb6, 0x6b, 0x76,
	0x58, 0x5b, 0x02, 0xe7, 0xd8, 0x0c, 0x84, 0x15, 0x1d, 0x5a, 0x8c, 0x7b, 0xc6, 0x60, 0x26, 0x63,
	0x00, 0x5b, 0x7e, 0xd3, 0x65, 0x16, 0xec, 0xca, 0xc1, 0x4b, 0xfd, 0x9b, 0x67, 0xbf, 0x39, 0x1a,
	0x3d, 0x8a, 0xff, 0xff, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x90, 0xd7, 0x35, 0x56, 0xbf, 0x06, 0x00,
	0x00,
}

func (this *EdgeListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EdgeListRequest)
	if !ok {
		that2, ok := that.(EdgeListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *EdgeListResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EdgeListResponse)
	if !ok {
		that2, ok := that.(EdgeListResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.EdgeSite) != len(that1.EdgeSite) {
		return false
	}
	for i := range this.EdgeSite {
		if !this.EdgeSite[i].Equal(that1.EdgeSite[i]) {
			return false
		}
	}
	return true
}
func (this *EdgeSite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EdgeSite)
	if !ok {
		that2, ok := that.(EdgeSite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EdgeSite.Equal(that1.EdgeSite) {
		return false
	}
	if this.Region != that1.Region {
		return false
	}
	if this.Provider != that1.Provider {
		return false
	}
	if !this.Coordinates.Equal(that1.Coordinates) {
		return false
	}
	return true
}
func (this *CredentialsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CredentialsRequest)
	if !ok {
		that2, ok := that.(CredentialsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Provider != that1.Provider {
		return false
	}
	return true
}
func (this *CredentialsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CredentialsResponse)
	if !ok {
		that2, ok := that.(CredentialsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Cred) != len(that1.Cred) {
		return false
	}
	for i := range this.Cred {
		if !this.Cred[i].Equal(that1.Cred[i]) {
			return false
		}
	}
	return true
}
func (this *EdgeListRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&cloud_connect.EdgeListRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EdgeListResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&cloud_connect.EdgeListResponse{")
	if this.EdgeSite != nil {
		s = append(s, "EdgeSite: "+fmt.Sprintf("%#v", this.EdgeSite)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EdgeSite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&cloud_connect.EdgeSite{")
	if this.EdgeSite != nil {
		s = append(s, "EdgeSite: "+fmt.Sprintf("%#v", this.EdgeSite)+",\n")
	}
	s = append(s, "Region: "+fmt.Sprintf("%#v", this.Region)+",\n")
	s = append(s, "Provider: "+fmt.Sprintf("%#v", this.Provider)+",\n")
	if this.Coordinates != nil {
		s = append(s, "Coordinates: "+fmt.Sprintf("%#v", this.Coordinates)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CredentialsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&cloud_connect.CredentialsRequest{")
	s = append(s, "Provider: "+fmt.Sprintf("%#v", this.Provider)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CredentialsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&cloud_connect.CredentialsResponse{")
	if this.Cred != nil {
		s = append(s, "Cred: "+fmt.Sprintf("%#v", this.Cred)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPublicCustomapiAkar(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ConfigCustomAPIClient is the client API for ConfigCustomAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConfigCustomAPIClient interface {
	// Edge List
	//
	// x-displayName: "Edge List"
	// Returns the online edge sites (Both Customer Edge and Cloud Edge)
	EdgeList(ctx context.Context, in *EdgeListRequest, opts ...grpc.CallOption) (*EdgeListResponse, error)
	// Cloud Credential
	//
	// x-displayName: "Cloud Credential"
	// Returns the cloud credential for the matching edge type
	EdgeCredentials(ctx context.Context, in *CredentialsRequest, opts ...grpc.CallOption) (*CredentialsResponse, error)
}

type configCustomAPIClient struct {
	cc *grpc.ClientConn
}

func NewConfigCustomAPIClient(cc *grpc.ClientConn) ConfigCustomAPIClient {
	return &configCustomAPIClient{cc}
}

func (c *configCustomAPIClient) EdgeList(ctx context.Context, in *EdgeListRequest, opts ...grpc.CallOption) (*EdgeListResponse, error) {
	out := new(EdgeListResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.cloud_connect.ConfigCustomAPI/EdgeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configCustomAPIClient) EdgeCredentials(ctx context.Context, in *CredentialsRequest, opts ...grpc.CallOption) (*CredentialsResponse, error) {
	out := new(CredentialsResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.cloud_connect.ConfigCustomAPI/EdgeCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigCustomAPIServer is the server API for ConfigCustomAPI service.
type ConfigCustomAPIServer interface {
	// Edge List
	//
	// x-displayName: "Edge List"
	// Returns the online edge sites (Both Customer Edge and Cloud Edge)
	EdgeList(context.Context, *EdgeListRequest) (*EdgeListResponse, error)
	// Cloud Credential
	//
	// x-displayName: "Cloud Credential"
	// Returns the cloud credential for the matching edge type
	EdgeCredentials(context.Context, *CredentialsRequest) (*CredentialsResponse, error)
}

// UnimplementedConfigCustomAPIServer can be embedded to have forward compatible implementations.
type UnimplementedConfigCustomAPIServer struct {
}

func (*UnimplementedConfigCustomAPIServer) EdgeList(ctx context.Context, req *EdgeListRequest) (*EdgeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EdgeList not implemented")
}
func (*UnimplementedConfigCustomAPIServer) EdgeCredentials(ctx context.Context, req *CredentialsRequest) (*CredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EdgeCredentials not implemented")
}

func RegisterConfigCustomAPIServer(s *grpc.Server, srv ConfigCustomAPIServer) {
	s.RegisterService(&_ConfigCustomAPI_serviceDesc, srv)
}

func _ConfigCustomAPI_EdgeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EdgeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigCustomAPIServer).EdgeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.cloud_connect.ConfigCustomAPI/EdgeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigCustomAPIServer).EdgeList(ctx, req.(*EdgeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigCustomAPI_EdgeCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigCustomAPIServer).EdgeCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.cloud_connect.ConfigCustomAPI/EdgeCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigCustomAPIServer).EdgeCredentials(ctx, req.(*CredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConfigCustomAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.cloud_connect.ConfigCustomAPI",
	HandlerType: (*ConfigCustomAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EdgeList",
			Handler:    _ConfigCustomAPI_EdgeList_Handler,
		},
		{
			MethodName: "EdgeCredentials",
			Handler:    _ConfigCustomAPI_EdgeCredentials_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/cloud_connect/public_customapi_akar.proto",
}

func (m *EdgeListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EdgeListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EdgeListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *EdgeListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EdgeListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EdgeListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EdgeSite) > 0 {
		for iNdEx := len(m.EdgeSite) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EdgeSite[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *EdgeSite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EdgeSite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EdgeSite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Coordinates != nil {
		{
			size, err := m.Coordinates.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Provider != 0 {
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(m.Provider))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Region) > 0 {
		i -= len(m.Region)
		copy(dAtA[i:], m.Region)
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(len(m.Region)))
		i--
		dAtA[i] = 0x12
	}
	if m.EdgeSite != nil {
		{
			size, err := m.EdgeSite.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CredentialsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CredentialsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CredentialsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Provider != 0 {
		i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(m.Provider))
		i--
		dAtA[i] = 0x18
	}
	return len(dAtA) - i, nil
}

func (m *CredentialsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CredentialsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CredentialsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cred) > 0 {
		for iNdEx := len(m.Cred) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Cred[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapiAkar(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintPublicCustomapiAkar(dAtA []byte, offset int, v uint64) int {
	offset -= sovPublicCustomapiAkar(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EdgeListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *EdgeListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EdgeSite) > 0 {
		for _, e := range m.EdgeSite {
			l = e.Size()
			n += 1 + l + sovPublicCustomapiAkar(uint64(l))
		}
	}
	return n
}

func (m *EdgeSite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EdgeSite != nil {
		l = m.EdgeSite.Size()
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	l = len(m.Region)
	if l > 0 {
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	if m.Provider != 0 {
		n += 1 + sovPublicCustomapiAkar(uint64(m.Provider))
	}
	if m.Coordinates != nil {
		l = m.Coordinates.Size()
		n += 1 + l + sovPublicCustomapiAkar(uint64(l))
	}
	return n
}

func (m *CredentialsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Provider != 0 {
		n += 1 + sovPublicCustomapiAkar(uint64(m.Provider))
	}
	return n
}

func (m *CredentialsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Cred) > 0 {
		for _, e := range m.Cred {
			l = e.Size()
			n += 1 + l + sovPublicCustomapiAkar(uint64(l))
		}
	}
	return n
}

func sovPublicCustomapiAkar(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPublicCustomapiAkar(x uint64) (n int) {
	return sovPublicCustomapiAkar(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *EdgeListRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EdgeListRequest{`,
		`}`,
	}, "")
	return s
}
func (this *EdgeListResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForEdgeSite := "[]*EdgeSite{"
	for _, f := range this.EdgeSite {
		repeatedStringForEdgeSite += strings.Replace(f.String(), "EdgeSite", "EdgeSite", 1) + ","
	}
	repeatedStringForEdgeSite += "}"
	s := strings.Join([]string{`&EdgeListResponse{`,
		`EdgeSite:` + repeatedStringForEdgeSite + `,`,
		`}`,
	}, "")
	return s
}
func (this *EdgeSite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EdgeSite{`,
		`EdgeSite:` + strings.Replace(fmt.Sprintf("%v", this.EdgeSite), "ObjectRefType", "schema.ObjectRefType", 1) + `,`,
		`Region:` + fmt.Sprintf("%v", this.Region) + `,`,
		`Provider:` + fmt.Sprintf("%v", this.Provider) + `,`,
		`Coordinates:` + strings.Replace(fmt.Sprintf("%v", this.Coordinates), "Coordinates", "site.Coordinates", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CredentialsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CredentialsRequest{`,
		`Provider:` + fmt.Sprintf("%v", this.Provider) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CredentialsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForCred := "[]*ObjectRefType{"
	for _, f := range this.Cred {
		repeatedStringForCred += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForCred += "}"
	s := strings.Join([]string{`&CredentialsResponse{`,
		`Cred:` + repeatedStringForCred + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPublicCustomapiAkar(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *EdgeListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiAkar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EdgeListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EdgeListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiAkar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EdgeListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiAkar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EdgeListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EdgeListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EdgeSite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EdgeSite = append(m.EdgeSite, &EdgeSite{})
			if err := m.EdgeSite[len(m.EdgeSite)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiAkar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EdgeSite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiAkar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EdgeSite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EdgeSite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EdgeSite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EdgeSite == nil {
				m.EdgeSite = &schema.ObjectRefType{}
			}
			if err := m.EdgeSite.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			m.Provider = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Provider |= CloudConnectProviderType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coordinates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Coordinates == nil {
				m.Coordinates = &site.Coordinates{}
			}
			if err := m.Coordinates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiAkar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CredentialsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiAkar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CredentialsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CredentialsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			m.Provider = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Provider |= CloudConnectProviderType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiAkar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CredentialsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapiAkar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CredentialsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CredentialsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cred", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cred = append(m.Cred, &views.ObjectRefType{})
			if err := m.Cred[len(m.Cred)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapiAkar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapiAkar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublicCustomapiAkar(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublicCustomapiAkar
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapiAkar
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPublicCustomapiAkar
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPublicCustomapiAkar
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPublicCustomapiAkar
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPublicCustomapiAkar        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublicCustomapiAkar          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPublicCustomapiAkar = fmt.Errorf("proto: unexpected end of group")
)

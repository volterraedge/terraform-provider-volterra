// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/cloud_connect/public_customapi.proto

// Cloud Connect
//
// x-displayName: "Cloud Connect"
// Cloud Connect APIs are used to get the data for cloud connect for all customer edges.
// Response includes in/out throughput metrics for all the tenant's Cloud Connect Sites
// It is always scoped by system namespace.

package cloud_connect

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Get Metrics Request
//
// x-displayName: "Get Metrics Request"
// Request to get cloud connect data
type GetMetricsRequest struct {
	// Name
	//
	// x-displayName: "Name"
	// x-required
	// x-example: "cloud_connect-1"
	// Cloud Connect name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// field_selector
	//
	// x-displayName: "Field Selector"
	//
	// Select fields to be returned in the response.
	// field_selector is used to specify the fields to be returned in the response, thereby limiting the
	// amount of data returned in the response.
	//
	// Note: Selecting many/all fields may impact the query latency.
	//
	// Optional: If not specified, only the following fields are returned in the response.
	// METRIC_TYPE_IN_BYTES, METRIC_TYPE_OUT_BYTES
	FieldSelector []FieldSelector `protobuf:"varint,2,rep,packed,name=field_selector,json=fieldSelector,proto3,enum=ves.io.schema.cloud_connect.FieldSelector" json:"field_selector,omitempty"`
	// start_time
	//
	// x-displayName: "Start Time"
	// x-example: "2019-09-23T12:30:11.733Z"
	//
	// start time of metric collection from which data will be considered to fetch cloud connect data.
	// Format: unix_timestamp|rfc 3339
	//
	// Optional: If not specified, then the start_time will be evaluated to end_time-10m
	//           If end_time is not specified, then the start_time will be evaluated to <current time>-10m
	StartTime string `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// end_time
	//
	// x-displayName: "End Time"
	// x-example: "2019-09-24T12:30:11.733Z"
	//
	// end time of metric collection from which data will be considered to fetch cloud connect data.
	// Format: unix_timestamp|rfc 3339
	//
	// Optional: If not specified, then the end_time will be evaluated to start_time+10m
	//           If start_time is not specified, then the end_time will be evaluated to <current time>
	EndTime string `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// step
	//
	// x-displayName: "Step"
	// x-example: "5m"
	//
	// step is the resolution width, which determines the number of the data points [x-axis (time)] to be returned in the response.
	// The timestamps in the response will be t1=start_time, t2=t1+step, ... tn=tn-1+step, where tn <= end_time.
	// Format: [0-9][smhd], where s - seconds, m - minutes, h - hours, d - days
	//
	// Optional: If not specified, then step size is evaluated to <end_time - start_time>
	Step string `protobuf:"bytes,5,opt,name=step,proto3" json:"step,omitempty"`
}

func (m *GetMetricsRequest) Reset()      { *m = GetMetricsRequest{} }
func (*GetMetricsRequest) ProtoMessage() {}
func (*GetMetricsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f06559f2a0429fbd, []int{0}
}
func (m *GetMetricsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMetricsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMetricsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMetricsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMetricsRequest.Merge(m, src)
}
func (m *GetMetricsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetMetricsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMetricsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetMetricsRequest proto.InternalMessageInfo

func (m *GetMetricsRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetMetricsRequest) GetFieldSelector() []FieldSelector {
	if m != nil {
		return m.FieldSelector
	}
	return nil
}

func (m *GetMetricsRequest) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *GetMetricsRequest) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

func (m *GetMetricsRequest) GetStep() string {
	if m != nil {
		return m.Step
	}
	return ""
}

// Get Metrics Response
//
// x-displayName: "Get Metrics Response"
// Get Metrics Response
type GetMetricsResponse struct {
	// Data
	//
	// x-displayName: "Data"
	// Metric data specified for the cloud connect
	Data []*MetricData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	// step
	//
	// x-displayName: "Step"
	// x-example: "30m"
	// Actual step size used in the response. It could be higher than the requested step due to metric rollups and the query duration.
	// Format: [0-9][smhd], where s - seconds, m - minutes, h - hours, d - days
	Step string `protobuf:"bytes,2,opt,name=step,proto3" json:"step,omitempty"`
}

func (m *GetMetricsResponse) Reset()      { *m = GetMetricsResponse{} }
func (*GetMetricsResponse) ProtoMessage() {}
func (*GetMetricsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f06559f2a0429fbd, []int{1}
}
func (m *GetMetricsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMetricsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMetricsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMetricsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMetricsResponse.Merge(m, src)
}
func (m *GetMetricsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetMetricsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMetricsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetMetricsResponse proto.InternalMessageInfo

func (m *GetMetricsResponse) GetData() []*MetricData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *GetMetricsResponse) GetStep() string {
	if m != nil {
		return m.Step
	}
	return ""
}

// List metrics Request
//
// x-displayName: "List Metrics Request"
// cloud_connect API is used to get the in/out throughput
// for the tenant's customer edges.
type ListMetricsRequest struct {
	// label_filter
	//
	// x-displayName: "Label Filter"
	//
	// List of label filter expressions of the form "label key" QueryOp "value".
	// Response will only contain data that matches all the conditions specified in the label_filter.
	//
	// Optional: If not specified, connectivity data for all sites will be returned in the response.
	LabelFilter []*LabelFilter `protobuf:"bytes,1,rep,name=label_filter,json=labelFilter,proto3" json:"label_filter,omitempty"`
	// field_selector
	//
	// x-displayName: "Field Selector"
	//
	// Select fields to be returned in the response.
	// field_selector is used to specify the fields to be returned in the response, thereby limiting the
	// amount of data returned in the response.
	//
	// Note: Selecting many/all fields may impact the query latency.
	//
	// Optional: If not specified, only the following fields are returned in the response.
	// METRIC_TYPE_IN_BYTES, METRIC_TYPE_OUT_BYTES
	FieldSelector []FieldSelector `protobuf:"varint,2,rep,packed,name=field_selector,json=fieldSelector,proto3,enum=ves.io.schema.cloud_connect.FieldSelector" json:"field_selector,omitempty"`
	// start_time
	//
	// x-displayName: "Start Time"
	// x-example: "2019-09-23T12:30:11.733Z"
	//
	// start time of metric collection from which data will be considered to fetch cloud connect data.
	// Format: unix_timestamp|rfc 3339
	//
	// Optional: If not specified, then the start_time will be evaluated to end_time-10m
	//           If end_time is not specified, then the start_time will be evaluated to <current time>-10m
	StartTime string `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// end_time
	//
	// x-displayName: "End Time"
	// x-example: "2019-09-24T12:30:11.733Z"
	//
	// end time of metric collection from which data will be considered to fetch cloud connect data.
	// Format: unix_timestamp|rfc 3339
	//
	// Optional: If not specified, then the end_time will be evaluated to start_time+10m
	//           If start_time is not specified, then the end_time will be evaluated to <current time>
	EndTime string `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// step
	//
	// x-displayName: "Step"
	// x-example: "5m"
	//
	// step is the resolution width, which determines the number of the data points [x-axis (time)] to be returned in the response.
	// The timestamps in the response will be t1=start_time, t2=t1+step, ... tn=tn-1+step, where tn <= end_time.
	// Format: [0-9][smhd], where s - seconds, m - minutes, h - hours, d - days
	//
	// Optional: If not specified, then step size is evaluated to <end_time - start_time>
	Step string `protobuf:"bytes,5,opt,name=step,proto3" json:"step,omitempty"`
}

func (m *ListMetricsRequest) Reset()      { *m = ListMetricsRequest{} }
func (*ListMetricsRequest) ProtoMessage() {}
func (*ListMetricsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f06559f2a0429fbd, []int{2}
}
func (m *ListMetricsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListMetricsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListMetricsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListMetricsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListMetricsRequest.Merge(m, src)
}
func (m *ListMetricsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListMetricsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListMetricsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListMetricsRequest proto.InternalMessageInfo

func (m *ListMetricsRequest) GetLabelFilter() []*LabelFilter {
	if m != nil {
		return m.LabelFilter
	}
	return nil
}

func (m *ListMetricsRequest) GetFieldSelector() []FieldSelector {
	if m != nil {
		return m.FieldSelector
	}
	return nil
}

func (m *ListMetricsRequest) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *ListMetricsRequest) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

func (m *ListMetricsRequest) GetStep() string {
	if m != nil {
		return m.Step
	}
	return ""
}

// List Metrics Response
//
// x-displayName: "List Metrics Response"
// Response for cloud connect API contains list of customer edges & cloud connects associated with the customer edge.
// Each cloud connect contains throughput data for a given cloud connect.
type ListMetricsResponse struct {
	// x-displayName: "Data"
	// metric data for the given metric.
	Data []*SegmentationData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	// Customer Edges
	//
	// x-displayName: "Customer Edges"
	// Cloud connect data for list of customer edges owned by a tenant.
	Edges []*EdgeData `protobuf:"bytes,2,rep,name=edges,proto3" json:"edges,omitempty"`
	// step
	//
	// x-displayName: "Step"
	// x-example: "30m"
	// Actual step size used in the response. It could be higher than the requested step due to metric rollups and the query duration.
	// Format: [0-9][smhd], where s - seconds, m - minutes, h - hours, d - days
	Step string `protobuf:"bytes,3,opt,name=step,proto3" json:"step,omitempty"`
}

func (m *ListMetricsResponse) Reset()      { *m = ListMetricsResponse{} }
func (*ListMetricsResponse) ProtoMessage() {}
func (*ListMetricsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f06559f2a0429fbd, []int{3}
}
func (m *ListMetricsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListMetricsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListMetricsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListMetricsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListMetricsResponse.Merge(m, src)
}
func (m *ListMetricsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListMetricsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListMetricsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListMetricsResponse proto.InternalMessageInfo

func (m *ListMetricsResponse) GetData() []*SegmentationData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ListMetricsResponse) GetEdges() []*EdgeData {
	if m != nil {
		return m.Edges
	}
	return nil
}

func (m *ListMetricsResponse) GetStep() string {
	if m != nil {
		return m.Step
	}
	return ""
}

// List Segment metrics Request
//
// x-displayName: "List Metrics Request"
// cloud_connect API is used to get the in/out throughput
// for the tenant's customer edges.
type ListSegmentMetricsRequest struct {
	// label_filter
	//
	// x-displayName: "Label Filter"
	//
	// List of label filter expressions of the form "label key" QueryOp "value".
	// Response will only contain data that matches all the conditions specified in the label_filter.
	//
	// Optional: If not specified, connectivity data for all sites will be returned in the response.
	LabelFilter []*LabelFilter `protobuf:"bytes,1,rep,name=label_filter,json=labelFilter,proto3" json:"label_filter,omitempty"`
	// field_selector
	//
	// x-displayName: "Field Selector"
	//
	// Select fields to be returned in the response.
	// field_selector is used to specify the fields to be returned in the response, thereby limiting the
	// amount of data returned in the response.
	//
	// Note: Selecting many/all fields may impact the query latency.
	//
	// Optional: If not specified, only the following fields are returned in the response.
	// METRIC_TYPE_IN_BYTES, METRIC_TYPE_OUT_BYTES
	FieldSelector []FieldSelector `protobuf:"varint,2,rep,packed,name=field_selector,json=fieldSelector,proto3,enum=ves.io.schema.cloud_connect.FieldSelector" json:"field_selector,omitempty"`
	// start_time
	//
	// x-displayName: "Start Time"
	// x-example: "2019-09-23T12:30:11.733Z"
	//
	// start time of metric collection from which data will be considered to fetch cloud connect data.
	// Format: unix_timestamp|rfc 3339
	//
	// Optional: If not specified, then the start_time will be evaluated to end_time-10m
	//           If end_time is not specified, then the start_time will be evaluated to <current time>-10m
	StartTime string `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// end_time
	//
	// x-displayName: "End Time"
	// x-example: "2019-09-24T12:30:11.733Z"
	//
	// end time of metric collection from which data will be considered to fetch cloud connect data.
	// Format: unix_timestamp|rfc 3339
	//
	// Optional: If not specified, then the end_time will be evaluated to start_time+10m
	//           If start_time is not specified, then the end_time will be evaluated to <current time>
	EndTime string `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// step
	//
	// x-displayName: "Step"
	// x-example: "5m"
	//
	// step is the resolution width, which determines the number of the data points [x-axis (time)] to be returned in the response.
	// The timestamps in the response will be t1=start_time, t2=t1+step, ... tn=tn-1+step, where tn <= end_time.
	// Format: [0-9][smhd], where s - seconds, m - minutes, h - hours, d - days
	//
	// Optional: If not specified, then step size is evaluated to <end_time - start_time>
	Step string `protobuf:"bytes,5,opt,name=step,proto3" json:"step,omitempty"`
}

func (m *ListSegmentMetricsRequest) Reset()      { *m = ListSegmentMetricsRequest{} }
func (*ListSegmentMetricsRequest) ProtoMessage() {}
func (*ListSegmentMetricsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f06559f2a0429fbd, []int{4}
}
func (m *ListSegmentMetricsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListSegmentMetricsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListSegmentMetricsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListSegmentMetricsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSegmentMetricsRequest.Merge(m, src)
}
func (m *ListSegmentMetricsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListSegmentMetricsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSegmentMetricsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListSegmentMetricsRequest proto.InternalMessageInfo

func (m *ListSegmentMetricsRequest) GetLabelFilter() []*LabelFilter {
	if m != nil {
		return m.LabelFilter
	}
	return nil
}

func (m *ListSegmentMetricsRequest) GetFieldSelector() []FieldSelector {
	if m != nil {
		return m.FieldSelector
	}
	return nil
}

func (m *ListSegmentMetricsRequest) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *ListSegmentMetricsRequest) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

func (m *ListSegmentMetricsRequest) GetStep() string {
	if m != nil {
		return m.Step
	}
	return ""
}

// List Segment Metrics Response
//
// x-displayName: "List Metrics Response"
// Response for cloud connect API contains list of customer edges & cloud connects associated with the customer edge.
// Each cloud connect contains throughput data for a given cloud connect.
type ListSegmentMetricsResponse struct {
	// x-displayName: "Data"
	// metric data for the given metric.
	Segment []*SegmentationData `protobuf:"bytes,1,rep,name=segment,proto3" json:"segment,omitempty"`
	// Customer Edges
	//
	// x-displayName: "Customer Edges"
	// Cloud connect data for list of customer edges owned by a tenant.
	Edges []*EdgeData `protobuf:"bytes,2,rep,name=edges,proto3" json:"edges,omitempty"`
	// step
	//
	// x-displayName: "Step"
	// x-example: "30m"
	// Actual step size used in the response. It could be higher than the requested step due to metric rollups and the query duration.
	// Format: [0-9][smhd], where s - seconds, m - minutes, h - hours, d - days
	Step string `protobuf:"bytes,3,opt,name=step,proto3" json:"step,omitempty"`
}

func (m *ListSegmentMetricsResponse) Reset()      { *m = ListSegmentMetricsResponse{} }
func (*ListSegmentMetricsResponse) ProtoMessage() {}
func (*ListSegmentMetricsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f06559f2a0429fbd, []int{5}
}
func (m *ListSegmentMetricsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListSegmentMetricsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListSegmentMetricsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListSegmentMetricsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSegmentMetricsResponse.Merge(m, src)
}
func (m *ListSegmentMetricsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListSegmentMetricsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSegmentMetricsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListSegmentMetricsResponse proto.InternalMessageInfo

func (m *ListSegmentMetricsResponse) GetSegment() []*SegmentationData {
	if m != nil {
		return m.Segment
	}
	return nil
}

func (m *ListSegmentMetricsResponse) GetEdges() []*EdgeData {
	if m != nil {
		return m.Edges
	}
	return nil
}

func (m *ListSegmentMetricsResponse) GetStep() string {
	if m != nil {
		return m.Step
	}
	return ""
}

func init() {
	proto.RegisterType((*GetMetricsRequest)(nil), "ves.io.schema.cloud_connect.GetMetricsRequest")
	golang_proto.RegisterType((*GetMetricsRequest)(nil), "ves.io.schema.cloud_connect.GetMetricsRequest")
	proto.RegisterType((*GetMetricsResponse)(nil), "ves.io.schema.cloud_connect.GetMetricsResponse")
	golang_proto.RegisterType((*GetMetricsResponse)(nil), "ves.io.schema.cloud_connect.GetMetricsResponse")
	proto.RegisterType((*ListMetricsRequest)(nil), "ves.io.schema.cloud_connect.ListMetricsRequest")
	golang_proto.RegisterType((*ListMetricsRequest)(nil), "ves.io.schema.cloud_connect.ListMetricsRequest")
	proto.RegisterType((*ListMetricsResponse)(nil), "ves.io.schema.cloud_connect.ListMetricsResponse")
	golang_proto.RegisterType((*ListMetricsResponse)(nil), "ves.io.schema.cloud_connect.ListMetricsResponse")
	proto.RegisterType((*ListSegmentMetricsRequest)(nil), "ves.io.schema.cloud_connect.ListSegmentMetricsRequest")
	golang_proto.RegisterType((*ListSegmentMetricsRequest)(nil), "ves.io.schema.cloud_connect.ListSegmentMetricsRequest")
	proto.RegisterType((*ListSegmentMetricsResponse)(nil), "ves.io.schema.cloud_connect.ListSegmentMetricsResponse")
	golang_proto.RegisterType((*ListSegmentMetricsResponse)(nil), "ves.io.schema.cloud_connect.ListSegmentMetricsResponse")
}

func init() {
	proto.RegisterFile("ves.io/schema/cloud_connect/public_customapi.proto", fileDescriptor_f06559f2a0429fbd)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/cloud_connect/public_customapi.proto", fileDescriptor_f06559f2a0429fbd)
}

var fileDescriptor_f06559f2a0429fbd = []byte{
	// 856 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x56, 0x31, 0x8f, 0xdc, 0x44,
	0x14, 0xde, 0xf1, 0xee, 0xe6, 0xb8, 0x59, 0x88, 0xc0, 0x34, 0xce, 0x26, 0xb2, 0x4e, 0x96, 0xa2,
	0x2c, 0x11, 0xb6, 0x4f, 0x8b, 0x42, 0x10, 0x81, 0x22, 0x07, 0x24, 0x42, 0x04, 0x01, 0x0e, 0x15,
	0xcd, 0x6a, 0x6c, 0xbf, 0xf5, 0x0d, 0xb1, 0x3d, 0x8e, 0x67, 0xbc, 0x24, 0x42, 0x48, 0xe8, 0x1a,
	0x90, 0x68, 0x50, 0x10, 0x52, 0x1a, 0x24, 0x1a, 0x24, 0xfe, 0x00, 0x12, 0x22, 0xcd, 0x41, 0xc3,
	0x55, 0xe8, 0x04, 0x4d, 0x4a, 0xce, 0x4b, 0x01, 0xdd, 0xf5, 0x34, 0xc8, 0x63, 0xef, 0xdd, 0xfa,
	0xee, 0x30, 0xcb, 0x49, 0xd7, 0x20, 0xba, 0x19, 0xbf, 0xef, 0x9b, 0xf7, 0xe6, 0x7b, 0xcf, 0xef,
	0x0d, 0x1e, 0x4e, 0x80, 0x5b, 0x94, 0xd9, 0xdc, 0x5b, 0x87, 0x88, 0xd8, 0x5e, 0xc8, 0x32, 0x7f,
	0xe4, 0xb1, 0x38, 0x06, 0x4f, 0xd8, 0x49, 0xe6, 0x86, 0xd4, 0x1b, 0x79, 0x19, 0x17, 0x2c, 0x22,
	0x09, 0xb5, 0x92, 0x94, 0x09, 0xa6, 0x9e, 0x2d, 0x39, 0x56, 0xc9, 0xb1, 0x6a, 0x9c, 0xbe, 0x19,
	0x50, 0xb1, 0x9e, 0xb9, 0x96, 0xc7, 0x22, 0x3b, 0x60, 0x01, 0xb3, 0x25, 0xc7, 0xcd, 0xc6, 0x72,
	0x27, 0x37, 0x72, 0x55, 0x9e, 0xd5, 0x3f, 0x17, 0x30, 0x16, 0x84, 0x60, 0x93, 0x84, 0xda, 0x24,
	0x8e, 0x99, 0x20, 0x82, 0xb2, 0x98, 0x57, 0xd6, 0x0b, 0x4d, 0xd1, 0x89, 0xbb, 0x09, 0xcc, 0x80,
	0x67, 0xeb, 0x40, 0x96, 0xcc, 0x9f, 0x72, 0xae, 0x6e, 0x9c, 0x90, 0x90, 0xfa, 0x44, 0x40, 0x65,
	0x35, 0x0e, 0x58, 0x81, 0x43, 0x3c, 0xa9, 0x9f, 0x60, 0x7c, 0xa4, 0xe0, 0x27, 0xae, 0x83, 0x78,
	0x1d, 0x44, 0x4a, 0x3d, 0xee, 0xc0, 0xed, 0x0c, 0xb8, 0x50, 0x55, 0xdc, 0x89, 0x49, 0x04, 0x1a,
	0x5a, 0x41, 0x83, 0x65, 0x47, 0xae, 0xd5, 0x10, 0x9f, 0x1e, 0x53, 0x08, 0xfd, 0x11, 0x87, 0x10,
	0x3c, 0xc1, 0x52, 0x4d, 0x59, 0x69, 0x0f, 0x4e, 0x0f, 0x2f, 0x5a, 0x0d, 0xa2, 0x59, 0xd7, 0x0a,
	0xca, 0xcd, 0x8a, 0xb1, 0x76, 0xe6, 0xbb, 0x3f, 0x36, 0xdb, 0xf8, 0x1e, 0x5a, 0x32, 0xba, 0x1b,
	0x48, 0x79, 0x1c, 0x15, 0xdb, 0xee, 0x3d, 0xa4, 0x68, 0xc8, 0x79, 0x6c, 0x3c, 0x8f, 0x54, 0x9f,
	0xc2, 0x98, 0x0b, 0x92, 0x8a, 0x91, 0xa0, 0x11, 0x68, 0xed, 0x22, 0x8e, 0x35, 0x2c, 0xe1, 0x69,
	0xfb, 0x7e, 0x07, 0x39, 0xcb, 0xd2, 0xfa, 0x36, 0x8d, 0x40, 0x3d, 0x8f, 0x1f, 0x81, 0xd8, 0x2f,
	0x81, 0x9d, 0x43, 0xc0, 0x25, 0x88, 0x7d, 0x09, 0xd3, 0x71, 0x87, 0x0b, 0x48, 0xb4, 0x6e, 0x0d,
	0xf2, 0x65, 0x07, 0x39, 0xf2, 0xbb, 0x71, 0x1b, 0xab, 0xf3, 0x42, 0xf0, 0x84, 0xc5, 0x1c, 0xd4,
	0x2b, 0xb8, 0xe3, 0x13, 0x41, 0x34, 0xb4, 0xd2, 0x1e, 0xf4, 0x86, 0x17, 0x1a, 0xef, 0x5a, 0x72,
	0x5f, 0x26, 0x82, 0x38, 0x92, 0xb4, 0xe7, 0x52, 0xa9, 0xb9, 0xdc, 0x55, 0x66, 0x2e, 0xbf, 0x57,
	0xb0, 0x7a, 0x83, 0xf2, 0x83, 0xea, 0xbf, 0x86, 0x1f, 0x0d, 0x89, 0x0b, 0xe1, 0x68, 0x4c, 0x43,
	0x01, 0x69, 0xe5, 0x7b, 0xd0, 0xe8, 0xfb, 0x46, 0x41, 0xb8, 0x26, 0xf1, 0x4e, 0x2f, 0xdc, 0xdf,
	0xfc, 0xe7, 0xd3, 0xf6, 0x0d, 0xc2, 0x4f, 0xd6, 0x34, 0xac, 0x12, 0x77, 0xb5, 0x96, 0x38, 0xb3,
	0xf1, 0xb6, 0x37, 0x21, 0x88, 0x20, 0x2e, 0x7f, 0xd0, 0xb9, 0xf4, 0x5d, 0xc1, 0x5d, 0xf0, 0x03,
	0xe0, 0x52, 0xb1, 0xde, 0xf0, 0x7c, 0xe3, 0x19, 0xaf, 0xf8, 0x01, 0x48, 0x6e, 0xc9, 0xd9, 0x8b,
	0xbb, 0xfd, 0x37, 0xb9, 0xdf, 0x52, 0xf0, 0x99, 0x22, 0xee, 0xca, 0xf7, 0xff, 0x25, 0x70, 0xfc,
	0x12, 0xf8, 0x01, 0xe1, 0xfe, 0x51, 0x52, 0x56, 0x95, 0x70, 0x1d, 0x2f, 0xf1, 0xd2, 0x72, 0xbc,
	0x62, 0x98, 0xb1, 0x4f, 0xb4, 0x1e, 0x86, 0x7f, 0x9e, 0xc2, 0xcb, 0x2f, 0xc9, 0x71, 0x74, 0xf5,
	0xcd, 0x57, 0xd5, 0x8f, 0x15, 0xdc, 0x9b, 0xab, 0x6a, 0xd5, 0x6e, 0xce, 0xfc, 0xa1, 0x1e, 0xd2,
	0x5f, 0x5d, 0x9c, 0x50, 0xca, 0x64, 0x7c, 0x8e, 0xb6, 0xbe, 0x55, 0x50, 0xfe, 0xa3, 0xe6, 0x8c,
	0x2f, 0xdd, 0xf1, 0x4c, 0x0e, 0x5e, 0x96, 0x42, 0x04, 0x7c, 0xdd, 0x74, 0x09, 0xa7, 0x9e, 0x19,
	0xb1, 0x98, 0x0a, 0x96, 0x3e, 0x7d, 0xd0, 0xca, 0x05, 0x89, 0x7d, 0x92, 0xfa, 0x7b, 0x80, 0x09,
	0x70, 0x93, 0x32, 0x33, 0x06, 0xf1, 0x1e, 0x4b, 0x6f, 0x99, 0x29, 0x10, 0x7f, 0xe3, 0x97, 0xdf,
	0x3e, 0x53, 0x2e, 0x19, 0xab, 0xd5, 0xdc, 0xb5, 0x8b, 0x81, 0xc2, 0x13, 0xe2, 0x01, 0xb7, 0xf9,
	0x5d, 0x2e, 0x20, 0xaa, 0x0f, 0x40, 0x6e, 0x47, 0x65, 0x70, 0xcf, 0xa3, 0x8b, 0x85, 0x14, 0x78,
	0xbf, 0x31, 0xab, 0x56, 0xe3, 0xc5, 0x0e, 0x8d, 0xb2, 0xbe, 0xbd, 0x30, 0xbe, 0xd2, 0xe1, 0xfe,
	0x49, 0x6a, 0xf0, 0x82, 0x71, 0x79, 0x61, 0x0d, 0xde, 0x2f, 0x10, 0x1f, 0xcc, 0x4b, 0xf1, 0x55,
	0x35, 0x2f, 0xea, 0x85, 0xae, 0x3e, 0xfb, 0x8f, 0xb9, 0x3e, 0xb2, 0xc9, 0xf4, 0x2f, 0xff, 0x6b,
	0x5e, 0x25, 0xd1, 0x17, 0x27, 0x5d, 0x2a, 0x2f, 0x1a, 0xcf, 0x2d, 0x2c, 0x53, 0xf5, 0x77, 0x8e,
	0xf6, 0x75, 0xea, 0xaf, 0x6e, 0x3e, 0x40, 0xed, 0x9f, 0x1f, 0x20, 0xa3, 0xe9, 0x7e, 0x6f, 0xb8,
	0xef, 0x82, 0x27, 0x36, 0x7e, 0xd2, 0x14, 0x0d, 0xad, 0x7d, 0x82, 0xb6, 0x77, 0xf4, 0xd6, 0xc3,
	0x1d, 0xbd, 0xb5, 0xbb, 0xa3, 0xa3, 0x0f, 0x73, 0x1d, 0x7d, 0x9d, 0xeb, 0x68, 0x2b, 0xd7, 0xd1,
	0x76, 0xae, 0xa3, 0x5f, 0x73, 0x1d, 0xfd, 0x9e, 0xeb, 0xad, 0xdd, 0x5c, 0x47, 0x9f, 0x4e, 0xf5,
	0xd6, 0xe6, 0x54, 0x47, 0xdb, 0x53, 0xbd, 0xf5, 0x70, 0xaa, 0xb7, 0xde, 0x79, 0x2b, 0x60, 0xc9,
	0xad, 0xc0, 0x9a, 0xb0, 0xa2, 0xd7, 0xa6, 0xc4, 0xca, 0xb8, 0x2d, 0x17, 0x63, 0x96, 0x46, 0x66,
	0x92, 0xb2, 0x09, 0xf5, 0x21, 0x35, 0x67, 0x66, 0x3b, 0x71, 0x03, 0x66, 0xc3, 0x1d, 0x51, 0x3d,
	0xca, 0x8e, 0x7a, 0xff, 0xb9, 0xa7, 0xe4, 0xdb, 0xec, 0x99, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff,
	0x38, 0x85, 0xec, 0xa7, 0xc3, 0x0a, 0x00, 0x00,
}

func (this *GetMetricsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetMetricsRequest)
	if !ok {
		that2, ok := that.(GetMetricsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.FieldSelector) != len(that1.FieldSelector) {
		return false
	}
	for i := range this.FieldSelector {
		if this.FieldSelector[i] != that1.FieldSelector[i] {
			return false
		}
	}
	if this.StartTime != that1.StartTime {
		return false
	}
	if this.EndTime != that1.EndTime {
		return false
	}
	if this.Step != that1.Step {
		return false
	}
	return true
}
func (this *GetMetricsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetMetricsResponse)
	if !ok {
		that2, ok := that.(GetMetricsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if !this.Data[i].Equal(that1.Data[i]) {
			return false
		}
	}
	if this.Step != that1.Step {
		return false
	}
	return true
}
func (this *ListMetricsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListMetricsRequest)
	if !ok {
		that2, ok := that.(ListMetricsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.LabelFilter) != len(that1.LabelFilter) {
		return false
	}
	for i := range this.LabelFilter {
		if !this.LabelFilter[i].Equal(that1.LabelFilter[i]) {
			return false
		}
	}
	if len(this.FieldSelector) != len(that1.FieldSelector) {
		return false
	}
	for i := range this.FieldSelector {
		if this.FieldSelector[i] != that1.FieldSelector[i] {
			return false
		}
	}
	if this.StartTime != that1.StartTime {
		return false
	}
	if this.EndTime != that1.EndTime {
		return false
	}
	if this.Step != that1.Step {
		return false
	}
	return true
}
func (this *ListMetricsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListMetricsResponse)
	if !ok {
		that2, ok := that.(ListMetricsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if !this.Data[i].Equal(that1.Data[i]) {
			return false
		}
	}
	if len(this.Edges) != len(that1.Edges) {
		return false
	}
	for i := range this.Edges {
		if !this.Edges[i].Equal(that1.Edges[i]) {
			return false
		}
	}
	if this.Step != that1.Step {
		return false
	}
	return true
}
func (this *ListSegmentMetricsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListSegmentMetricsRequest)
	if !ok {
		that2, ok := that.(ListSegmentMetricsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.LabelFilter) != len(that1.LabelFilter) {
		return false
	}
	for i := range this.LabelFilter {
		if !this.LabelFilter[i].Equal(that1.LabelFilter[i]) {
			return false
		}
	}
	if len(this.FieldSelector) != len(that1.FieldSelector) {
		return false
	}
	for i := range this.FieldSelector {
		if this.FieldSelector[i] != that1.FieldSelector[i] {
			return false
		}
	}
	if this.StartTime != that1.StartTime {
		return false
	}
	if this.EndTime != that1.EndTime {
		return false
	}
	if this.Step != that1.Step {
		return false
	}
	return true
}
func (this *ListSegmentMetricsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListSegmentMetricsResponse)
	if !ok {
		that2, ok := that.(ListSegmentMetricsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Segment) != len(that1.Segment) {
		return false
	}
	for i := range this.Segment {
		if !this.Segment[i].Equal(that1.Segment[i]) {
			return false
		}
	}
	if len(this.Edges) != len(that1.Edges) {
		return false
	}
	for i := range this.Edges {
		if !this.Edges[i].Equal(that1.Edges[i]) {
			return false
		}
	}
	if this.Step != that1.Step {
		return false
	}
	return true
}
func (this *GetMetricsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&cloud_connect.GetMetricsRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "FieldSelector: "+fmt.Sprintf("%#v", this.FieldSelector)+",\n")
	s = append(s, "StartTime: "+fmt.Sprintf("%#v", this.StartTime)+",\n")
	s = append(s, "EndTime: "+fmt.Sprintf("%#v", this.EndTime)+",\n")
	s = append(s, "Step: "+fmt.Sprintf("%#v", this.Step)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetMetricsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&cloud_connect.GetMetricsResponse{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "Step: "+fmt.Sprintf("%#v", this.Step)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListMetricsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&cloud_connect.ListMetricsRequest{")
	if this.LabelFilter != nil {
		s = append(s, "LabelFilter: "+fmt.Sprintf("%#v", this.LabelFilter)+",\n")
	}
	s = append(s, "FieldSelector: "+fmt.Sprintf("%#v", this.FieldSelector)+",\n")
	s = append(s, "StartTime: "+fmt.Sprintf("%#v", this.StartTime)+",\n")
	s = append(s, "EndTime: "+fmt.Sprintf("%#v", this.EndTime)+",\n")
	s = append(s, "Step: "+fmt.Sprintf("%#v", this.Step)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListMetricsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&cloud_connect.ListMetricsResponse{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	if this.Edges != nil {
		s = append(s, "Edges: "+fmt.Sprintf("%#v", this.Edges)+",\n")
	}
	s = append(s, "Step: "+fmt.Sprintf("%#v", this.Step)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListSegmentMetricsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&cloud_connect.ListSegmentMetricsRequest{")
	if this.LabelFilter != nil {
		s = append(s, "LabelFilter: "+fmt.Sprintf("%#v", this.LabelFilter)+",\n")
	}
	s = append(s, "FieldSelector: "+fmt.Sprintf("%#v", this.FieldSelector)+",\n")
	s = append(s, "StartTime: "+fmt.Sprintf("%#v", this.StartTime)+",\n")
	s = append(s, "EndTime: "+fmt.Sprintf("%#v", this.EndTime)+",\n")
	s = append(s, "Step: "+fmt.Sprintf("%#v", this.Step)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListSegmentMetricsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&cloud_connect.ListSegmentMetricsResponse{")
	if this.Segment != nil {
		s = append(s, "Segment: "+fmt.Sprintf("%#v", this.Segment)+",\n")
	}
	if this.Edges != nil {
		s = append(s, "Edges: "+fmt.Sprintf("%#v", this.Edges)+",\n")
	}
	s = append(s, "Step: "+fmt.Sprintf("%#v", this.Step)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPublicCustomapi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CustomAPIClient is the client API for CustomAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomAPIClient interface {
	// All Cloud Connect metrics
	//
	// x-displayName: "All Cloud Connect Metrics"
	// Cloud Connect APIs are used to get the data for cloud connect.
	ListMetrics(ctx context.Context, in *ListMetricsRequest, opts ...grpc.CallOption) (*ListMetricsResponse, error)
	// Cloud Connect metrics
	//
	// x-displayName: "Cloud Connect Metrics"
	// Cloud Connect Metrics quires metrics for a specified cloud connect.
	GetMetrics(ctx context.Context, in *GetMetricsRequest, opts ...grpc.CallOption) (*GetMetricsResponse, error)
	// All Cloud Connect Segment metrics
	//
	// x-displayName: "All Cloud Connect Segment Metrics"
	// Cloud Connect APIs are used to get the segment data for cloud connect.
	ListSegmentMetrics(ctx context.Context, in *ListSegmentMetricsRequest, opts ...grpc.CallOption) (*ListSegmentMetricsResponse, error)
}

type customAPIClient struct {
	cc *grpc.ClientConn
}

func NewCustomAPIClient(cc *grpc.ClientConn) CustomAPIClient {
	return &customAPIClient{cc}
}

func (c *customAPIClient) ListMetrics(ctx context.Context, in *ListMetricsRequest, opts ...grpc.CallOption) (*ListMetricsResponse, error) {
	out := new(ListMetricsResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.cloud_connect.CustomAPI/ListMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) GetMetrics(ctx context.Context, in *GetMetricsRequest, opts ...grpc.CallOption) (*GetMetricsResponse, error) {
	out := new(GetMetricsResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.cloud_connect.CustomAPI/GetMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) ListSegmentMetrics(ctx context.Context, in *ListSegmentMetricsRequest, opts ...grpc.CallOption) (*ListSegmentMetricsResponse, error) {
	out := new(ListSegmentMetricsResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.cloud_connect.CustomAPI/ListSegmentMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomAPIServer is the server API for CustomAPI service.
type CustomAPIServer interface {
	// All Cloud Connect metrics
	//
	// x-displayName: "All Cloud Connect Metrics"
	// Cloud Connect APIs are used to get the data for cloud connect.
	ListMetrics(context.Context, *ListMetricsRequest) (*ListMetricsResponse, error)
	// Cloud Connect metrics
	//
	// x-displayName: "Cloud Connect Metrics"
	// Cloud Connect Metrics quires metrics for a specified cloud connect.
	GetMetrics(context.Context, *GetMetricsRequest) (*GetMetricsResponse, error)
	// All Cloud Connect Segment metrics
	//
	// x-displayName: "All Cloud Connect Segment Metrics"
	// Cloud Connect APIs are used to get the segment data for cloud connect.
	ListSegmentMetrics(context.Context, *ListSegmentMetricsRequest) (*ListSegmentMetricsResponse, error)
}

// UnimplementedCustomAPIServer can be embedded to have forward compatible implementations.
type UnimplementedCustomAPIServer struct {
}

func (*UnimplementedCustomAPIServer) ListMetrics(ctx context.Context, req *ListMetricsRequest) (*ListMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMetrics not implemented")
}
func (*UnimplementedCustomAPIServer) GetMetrics(ctx context.Context, req *GetMetricsRequest) (*GetMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetrics not implemented")
}
func (*UnimplementedCustomAPIServer) ListSegmentMetrics(ctx context.Context, req *ListSegmentMetricsRequest) (*ListSegmentMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSegmentMetrics not implemented")
}

func RegisterCustomAPIServer(s *grpc.Server, srv CustomAPIServer) {
	s.RegisterService(&_CustomAPI_serviceDesc, srv)
}

func _CustomAPI_ListMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).ListMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.cloud_connect.CustomAPI/ListMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).ListMetrics(ctx, req.(*ListMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_GetMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).GetMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.cloud_connect.CustomAPI/GetMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).GetMetrics(ctx, req.(*GetMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_ListSegmentMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSegmentMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).ListSegmentMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.cloud_connect.CustomAPI/ListSegmentMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).ListSegmentMetrics(ctx, req.(*ListSegmentMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.cloud_connect.CustomAPI",
	HandlerType: (*CustomAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListMetrics",
			Handler:    _CustomAPI_ListMetrics_Handler,
		},
		{
			MethodName: "GetMetrics",
			Handler:    _CustomAPI_GetMetrics_Handler,
		},
		{
			MethodName: "ListSegmentMetrics",
			Handler:    _CustomAPI_ListSegmentMetrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/cloud_connect/public_customapi.proto",
}

func (m *GetMetricsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMetricsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMetricsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Step) > 0 {
		i -= len(m.Step)
		copy(dAtA[i:], m.Step)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Step)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.EndTime) > 0 {
		i -= len(m.EndTime)
		copy(dAtA[i:], m.EndTime)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.EndTime)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.StartTime) > 0 {
		i -= len(m.StartTime)
		copy(dAtA[i:], m.StartTime)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.StartTime)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FieldSelector) > 0 {
		dAtA2 := make([]byte, len(m.FieldSelector)*10)
		var j1 int
		for _, num := range m.FieldSelector {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetMetricsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMetricsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMetricsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Step) > 0 {
		i -= len(m.Step)
		copy(dAtA[i:], m.Step)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Step)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListMetricsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListMetricsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListMetricsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Step) > 0 {
		i -= len(m.Step)
		copy(dAtA[i:], m.Step)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Step)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.EndTime) > 0 {
		i -= len(m.EndTime)
		copy(dAtA[i:], m.EndTime)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.EndTime)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.StartTime) > 0 {
		i -= len(m.StartTime)
		copy(dAtA[i:], m.StartTime)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.StartTime)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FieldSelector) > 0 {
		dAtA4 := make([]byte, len(m.FieldSelector)*10)
		var j3 int
		for _, num := range m.FieldSelector {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LabelFilter) > 0 {
		for iNdEx := len(m.LabelFilter) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LabelFilter[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListMetricsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListMetricsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListMetricsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Step) > 0 {
		i -= len(m.Step)
		copy(dAtA[i:], m.Step)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Step)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Edges) > 0 {
		for iNdEx := len(m.Edges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Edges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListSegmentMetricsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListSegmentMetricsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListSegmentMetricsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Step) > 0 {
		i -= len(m.Step)
		copy(dAtA[i:], m.Step)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Step)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.EndTime) > 0 {
		i -= len(m.EndTime)
		copy(dAtA[i:], m.EndTime)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.EndTime)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.StartTime) > 0 {
		i -= len(m.StartTime)
		copy(dAtA[i:], m.StartTime)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.StartTime)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FieldSelector) > 0 {
		dAtA6 := make([]byte, len(m.FieldSelector)*10)
		var j5 int
		for _, num := range m.FieldSelector {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LabelFilter) > 0 {
		for iNdEx := len(m.LabelFilter) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LabelFilter[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListSegmentMetricsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListSegmentMetricsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListSegmentMetricsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Step) > 0 {
		i -= len(m.Step)
		copy(dAtA[i:], m.Step)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Step)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Edges) > 0 {
		for iNdEx := len(m.Edges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Edges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Segment) > 0 {
		for iNdEx := len(m.Segment) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Segment[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintPublicCustomapi(dAtA []byte, offset int, v uint64) int {
	offset -= sovPublicCustomapi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetMetricsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if len(m.FieldSelector) > 0 {
		l = 0
		for _, e := range m.FieldSelector {
			l += sovPublicCustomapi(uint64(e))
		}
		n += 1 + sovPublicCustomapi(uint64(l)) + l
	}
	l = len(m.StartTime)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.EndTime)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Step)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *GetMetricsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	l = len(m.Step)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *ListMetricsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LabelFilter) > 0 {
		for _, e := range m.LabelFilter {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	if len(m.FieldSelector) > 0 {
		l = 0
		for _, e := range m.FieldSelector {
			l += sovPublicCustomapi(uint64(e))
		}
		n += 1 + sovPublicCustomapi(uint64(l)) + l
	}
	l = len(m.StartTime)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.EndTime)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Step)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *ListMetricsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	if len(m.Edges) > 0 {
		for _, e := range m.Edges {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	l = len(m.Step)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *ListSegmentMetricsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LabelFilter) > 0 {
		for _, e := range m.LabelFilter {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	if len(m.FieldSelector) > 0 {
		l = 0
		for _, e := range m.FieldSelector {
			l += sovPublicCustomapi(uint64(e))
		}
		n += 1 + sovPublicCustomapi(uint64(l)) + l
	}
	l = len(m.StartTime)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.EndTime)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Step)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *ListSegmentMetricsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Segment) > 0 {
		for _, e := range m.Segment {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	if len(m.Edges) > 0 {
		for _, e := range m.Edges {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	l = len(m.Step)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func sovPublicCustomapi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPublicCustomapi(x uint64) (n int) {
	return sovPublicCustomapi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GetMetricsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetMetricsRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`FieldSelector:` + fmt.Sprintf("%v", this.FieldSelector) + `,`,
		`StartTime:` + fmt.Sprintf("%v", this.StartTime) + `,`,
		`EndTime:` + fmt.Sprintf("%v", this.EndTime) + `,`,
		`Step:` + fmt.Sprintf("%v", this.Step) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetMetricsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForData := "[]*MetricData{"
	for _, f := range this.Data {
		repeatedStringForData += strings.Replace(fmt.Sprintf("%v", f), "MetricData", "MetricData", 1) + ","
	}
	repeatedStringForData += "}"
	s := strings.Join([]string{`&GetMetricsResponse{`,
		`Data:` + repeatedStringForData + `,`,
		`Step:` + fmt.Sprintf("%v", this.Step) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListMetricsRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForLabelFilter := "[]*LabelFilter{"
	for _, f := range this.LabelFilter {
		repeatedStringForLabelFilter += strings.Replace(fmt.Sprintf("%v", f), "LabelFilter", "LabelFilter", 1) + ","
	}
	repeatedStringForLabelFilter += "}"
	s := strings.Join([]string{`&ListMetricsRequest{`,
		`LabelFilter:` + repeatedStringForLabelFilter + `,`,
		`FieldSelector:` + fmt.Sprintf("%v", this.FieldSelector) + `,`,
		`StartTime:` + fmt.Sprintf("%v", this.StartTime) + `,`,
		`EndTime:` + fmt.Sprintf("%v", this.EndTime) + `,`,
		`Step:` + fmt.Sprintf("%v", this.Step) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListMetricsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForData := "[]*SegmentationData{"
	for _, f := range this.Data {
		repeatedStringForData += strings.Replace(fmt.Sprintf("%v", f), "SegmentationData", "SegmentationData", 1) + ","
	}
	repeatedStringForData += "}"
	repeatedStringForEdges := "[]*EdgeData{"
	for _, f := range this.Edges {
		repeatedStringForEdges += strings.Replace(fmt.Sprintf("%v", f), "EdgeData", "EdgeData", 1) + ","
	}
	repeatedStringForEdges += "}"
	s := strings.Join([]string{`&ListMetricsResponse{`,
		`Data:` + repeatedStringForData + `,`,
		`Edges:` + repeatedStringForEdges + `,`,
		`Step:` + fmt.Sprintf("%v", this.Step) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListSegmentMetricsRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForLabelFilter := "[]*LabelFilter{"
	for _, f := range this.LabelFilter {
		repeatedStringForLabelFilter += strings.Replace(fmt.Sprintf("%v", f), "LabelFilter", "LabelFilter", 1) + ","
	}
	repeatedStringForLabelFilter += "}"
	s := strings.Join([]string{`&ListSegmentMetricsRequest{`,
		`LabelFilter:` + repeatedStringForLabelFilter + `,`,
		`FieldSelector:` + fmt.Sprintf("%v", this.FieldSelector) + `,`,
		`StartTime:` + fmt.Sprintf("%v", this.StartTime) + `,`,
		`EndTime:` + fmt.Sprintf("%v", this.EndTime) + `,`,
		`Step:` + fmt.Sprintf("%v", this.Step) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListSegmentMetricsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSegment := "[]*SegmentationData{"
	for _, f := range this.Segment {
		repeatedStringForSegment += strings.Replace(fmt.Sprintf("%v", f), "SegmentationData", "SegmentationData", 1) + ","
	}
	repeatedStringForSegment += "}"
	repeatedStringForEdges := "[]*EdgeData{"
	for _, f := range this.Edges {
		repeatedStringForEdges += strings.Replace(fmt.Sprintf("%v", f), "EdgeData", "EdgeData", 1) + ","
	}
	repeatedStringForEdges += "}"
	s := strings.Join([]string{`&ListSegmentMetricsResponse{`,
		`Segment:` + repeatedStringForSegment + `,`,
		`Edges:` + repeatedStringForEdges + `,`,
		`Step:` + fmt.Sprintf("%v", this.Step) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPublicCustomapi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GetMetricsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMetricsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMetricsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v FieldSelector
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicCustomapi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= FieldSelector(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.FieldSelector = append(m.FieldSelector, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicCustomapi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPublicCustomapi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPublicCustomapi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.FieldSelector) == 0 {
					m.FieldSelector = make([]FieldSelector, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v FieldSelector
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicCustomapi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= FieldSelector(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.FieldSelector = append(m.FieldSelector, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldSelector", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Step = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMetricsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMetricsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMetricsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &MetricData{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Step = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListMetricsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListMetricsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListMetricsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LabelFilter = append(m.LabelFilter, &LabelFilter{})
			if err := m.LabelFilter[len(m.LabelFilter)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v FieldSelector
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicCustomapi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= FieldSelector(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.FieldSelector = append(m.FieldSelector, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicCustomapi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPublicCustomapi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPublicCustomapi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.FieldSelector) == 0 {
					m.FieldSelector = make([]FieldSelector, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v FieldSelector
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicCustomapi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= FieldSelector(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.FieldSelector = append(m.FieldSelector, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldSelector", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Step = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListMetricsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListMetricsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListMetricsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &SegmentationData{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Edges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Edges = append(m.Edges, &EdgeData{})
			if err := m.Edges[len(m.Edges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Step = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListSegmentMetricsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListSegmentMetricsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListSegmentMetricsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LabelFilter = append(m.LabelFilter, &LabelFilter{})
			if err := m.LabelFilter[len(m.LabelFilter)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v FieldSelector
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicCustomapi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= FieldSelector(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.FieldSelector = append(m.FieldSelector, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicCustomapi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPublicCustomapi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPublicCustomapi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.FieldSelector) == 0 {
					m.FieldSelector = make([]FieldSelector, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v FieldSelector
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicCustomapi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= FieldSelector(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.FieldSelector = append(m.FieldSelector, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldSelector", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Step = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListSegmentMetricsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListSegmentMetricsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListSegmentMetricsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Segment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Segment = append(m.Segment, &SegmentationData{})
			if err := m.Segment[len(m.Segment)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Edges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Edges = append(m.Edges, &EdgeData{})
			if err := m.Edges[len(m.Edges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Step = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublicCustomapi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPublicCustomapi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPublicCustomapi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPublicCustomapi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPublicCustomapi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublicCustomapi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPublicCustomapi = fmt.Errorf("proto: unexpected end of group")
)

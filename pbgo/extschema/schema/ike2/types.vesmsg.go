// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package ike2

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema_views_ike_phase1_profile "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/ike_phase1_profile"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) IkeKeyLifetimeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ike_key_lifetime")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["authentication_algos"]; exists {

		vOpts := append(opts, db.WithValidateField("authentication_algos"))
		for idx, item := range m.GetAuthenticationAlgos() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["encryption_algos"]; exists {

		vOpts := append(opts, db.WithValidateField("encryption_algos"))
		for idx, item := range m.GetEncryptionAlgos() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["ike_key_lifetime"]; exists {
		val := m.GetIkeKeyLifetime()
		vOpts := append(opts,
			db.WithValidateField("ike_key_lifetime"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetIkeKeyLifetime().(type) {
	case *CreateSpecType_UseDefaultKeylifetime:
		if fv, exists := v.FldValidators["ike_key_lifetime.use_default_keylifetime"]; exists {
			val := m.GetIkeKeyLifetime().(*CreateSpecType_UseDefaultKeylifetime).UseDefaultKeylifetime
			vOpts := append(opts,
				db.WithValidateField("ike_key_lifetime"),
				db.WithValidateField("use_default_keylifetime"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_IkeKeylifetimeMinutes:
		if fv, exists := v.FldValidators["ike_key_lifetime.ike_keylifetime_minutes"]; exists {
			val := m.GetIkeKeyLifetime().(*CreateSpecType_IkeKeylifetimeMinutes).IkeKeylifetimeMinutes
			vOpts := append(opts,
				db.WithValidateField("ike_key_lifetime"),
				db.WithValidateField("ike_keylifetime_minutes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_IkeKeylifetimeHours:
		if fv, exists := v.FldValidators["ike_key_lifetime.ike_keylifetime_hours"]; exists {
			val := m.GetIkeKeyLifetime().(*CreateSpecType_IkeKeylifetimeHours).IkeKeylifetimeHours
			vOpts := append(opts,
				db.WithValidateField("ike_key_lifetime"),
				db.WithValidateField("ike_keylifetime_hours"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetPfsMode().(type) {
	case *CreateSpecType_DisablePfs:
		if fv, exists := v.FldValidators["pfs_mode.disable_pfs"]; exists {
			val := m.GetPfsMode().(*CreateSpecType_DisablePfs).DisablePfs
			vOpts := append(opts,
				db.WithValidateField("pfs_mode"),
				db.WithValidateField("disable_pfs"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_DhGroupSet:
		if fv, exists := v.FldValidators["pfs_mode.dh_group_set"]; exists {
			val := m.GetPfsMode().(*CreateSpecType_DhGroupSet).DhGroupSet
			vOpts := append(opts,
				db.WithValidateField("pfs_mode"),
				db.WithValidateField("dh_group_set"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhIkeKeyLifetime := v.IkeKeyLifetimeValidationRuleHandler
	rulesIkeKeyLifetime := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhIkeKeyLifetime(rulesIkeKeyLifetime)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.ike_key_lifetime: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ike_key_lifetime"] = vFn

	v.FldValidators["ike_key_lifetime.ike_keylifetime_minutes"] = ves_io_schema_views_ike_phase1_profile.InputMinutesValidator().Validate
	v.FldValidators["ike_key_lifetime.ike_keylifetime_hours"] = ves_io_schema_views_ike_phase1_profile.InputHoursValidator().Validate

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *DHGroups) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DHGroups) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DHGroups) DeepCopy() *DHGroups {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DHGroups{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DHGroups) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DHGroups) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DHGroupsValidator().Validate(ctx, m, opts...)
}

type ValidateDHGroups struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDHGroups) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DHGroups)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DHGroups got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["dh_groups"]; exists {

		vOpts := append(opts, db.WithValidateField("dh_groups"))
		for idx, item := range m.GetDhGroups() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDHGroupsValidator = func() *ValidateDHGroups {
	v := &ValidateDHGroups{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func DHGroupsValidator() db.Validator {
	return DefaultDHGroupsValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) IkeKeyLifetimeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ike_key_lifetime")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["authentication_algos"]; exists {

		vOpts := append(opts, db.WithValidateField("authentication_algos"))
		for idx, item := range m.GetAuthenticationAlgos() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["encryption_algos"]; exists {

		vOpts := append(opts, db.WithValidateField("encryption_algos"))
		for idx, item := range m.GetEncryptionAlgos() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["ike_key_lifetime"]; exists {
		val := m.GetIkeKeyLifetime()
		vOpts := append(opts,
			db.WithValidateField("ike_key_lifetime"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetIkeKeyLifetime().(type) {
	case *GetSpecType_UseDefaultKeylifetime:
		if fv, exists := v.FldValidators["ike_key_lifetime.use_default_keylifetime"]; exists {
			val := m.GetIkeKeyLifetime().(*GetSpecType_UseDefaultKeylifetime).UseDefaultKeylifetime
			vOpts := append(opts,
				db.WithValidateField("ike_key_lifetime"),
				db.WithValidateField("use_default_keylifetime"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_IkeKeylifetimeMinutes:
		if fv, exists := v.FldValidators["ike_key_lifetime.ike_keylifetime_minutes"]; exists {
			val := m.GetIkeKeyLifetime().(*GetSpecType_IkeKeylifetimeMinutes).IkeKeylifetimeMinutes
			vOpts := append(opts,
				db.WithValidateField("ike_key_lifetime"),
				db.WithValidateField("ike_keylifetime_minutes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_IkeKeylifetimeHours:
		if fv, exists := v.FldValidators["ike_key_lifetime.ike_keylifetime_hours"]; exists {
			val := m.GetIkeKeyLifetime().(*GetSpecType_IkeKeylifetimeHours).IkeKeylifetimeHours
			vOpts := append(opts,
				db.WithValidateField("ike_key_lifetime"),
				db.WithValidateField("ike_keylifetime_hours"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetPfsMode().(type) {
	case *GetSpecType_DisablePfs:
		if fv, exists := v.FldValidators["pfs_mode.disable_pfs"]; exists {
			val := m.GetPfsMode().(*GetSpecType_DisablePfs).DisablePfs
			vOpts := append(opts,
				db.WithValidateField("pfs_mode"),
				db.WithValidateField("disable_pfs"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_DhGroupSet:
		if fv, exists := v.FldValidators["pfs_mode.dh_group_set"]; exists {
			val := m.GetPfsMode().(*GetSpecType_DhGroupSet).DhGroupSet
			vOpts := append(opts,
				db.WithValidateField("pfs_mode"),
				db.WithValidateField("dh_group_set"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhIkeKeyLifetime := v.IkeKeyLifetimeValidationRuleHandler
	rulesIkeKeyLifetime := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhIkeKeyLifetime(rulesIkeKeyLifetime)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.ike_key_lifetime: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ike_key_lifetime"] = vFn

	v.FldValidators["ike_key_lifetime.ike_keylifetime_minutes"] = ves_io_schema_views_ike_phase1_profile.InputMinutesValidator().Validate
	v.FldValidators["ike_key_lifetime.ike_keylifetime_hours"] = ves_io_schema_views_ike_phase1_profile.InputHoursValidator().Validate

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) IkeKeyLifetimeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ike_key_lifetime")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["authentication_algos"]; exists {

		vOpts := append(opts, db.WithValidateField("authentication_algos"))
		for idx, item := range m.GetAuthenticationAlgos() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["encryption_algos"]; exists {

		vOpts := append(opts, db.WithValidateField("encryption_algos"))
		for idx, item := range m.GetEncryptionAlgos() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["ike_key_lifetime"]; exists {
		val := m.GetIkeKeyLifetime()
		vOpts := append(opts,
			db.WithValidateField("ike_key_lifetime"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetIkeKeyLifetime().(type) {
	case *GlobalSpecType_UseDefaultKeylifetime:
		if fv, exists := v.FldValidators["ike_key_lifetime.use_default_keylifetime"]; exists {
			val := m.GetIkeKeyLifetime().(*GlobalSpecType_UseDefaultKeylifetime).UseDefaultKeylifetime
			vOpts := append(opts,
				db.WithValidateField("ike_key_lifetime"),
				db.WithValidateField("use_default_keylifetime"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_IkeKeylifetimeMinutes:
		if fv, exists := v.FldValidators["ike_key_lifetime.ike_keylifetime_minutes"]; exists {
			val := m.GetIkeKeyLifetime().(*GlobalSpecType_IkeKeylifetimeMinutes).IkeKeylifetimeMinutes
			vOpts := append(opts,
				db.WithValidateField("ike_key_lifetime"),
				db.WithValidateField("ike_keylifetime_minutes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_IkeKeylifetimeHours:
		if fv, exists := v.FldValidators["ike_key_lifetime.ike_keylifetime_hours"]; exists {
			val := m.GetIkeKeyLifetime().(*GlobalSpecType_IkeKeylifetimeHours).IkeKeylifetimeHours
			vOpts := append(opts,
				db.WithValidateField("ike_key_lifetime"),
				db.WithValidateField("ike_keylifetime_hours"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetPfsMode().(type) {
	case *GlobalSpecType_DisablePfs:
		if fv, exists := v.FldValidators["pfs_mode.disable_pfs"]; exists {
			val := m.GetPfsMode().(*GlobalSpecType_DisablePfs).DisablePfs
			vOpts := append(opts,
				db.WithValidateField("pfs_mode"),
				db.WithValidateField("disable_pfs"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_DhGroupSet:
		if fv, exists := v.FldValidators["pfs_mode.dh_group_set"]; exists {
			val := m.GetPfsMode().(*GlobalSpecType_DhGroupSet).DhGroupSet
			vOpts := append(opts,
				db.WithValidateField("pfs_mode"),
				db.WithValidateField("dh_group_set"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhIkeKeyLifetime := v.IkeKeyLifetimeValidationRuleHandler
	rulesIkeKeyLifetime := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhIkeKeyLifetime(rulesIkeKeyLifetime)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.ike_key_lifetime: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ike_key_lifetime"] = vFn

	v.FldValidators["ike_key_lifetime.ike_keylifetime_minutes"] = ves_io_schema_views_ike_phase1_profile.InputMinutesValidator().Validate
	v.FldValidators["ike_key_lifetime.ike_keylifetime_hours"] = ves_io_schema_views_ike_phase1_profile.InputHoursValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) IkeKeyLifetimeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ike_key_lifetime")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["authentication_algos"]; exists {

		vOpts := append(opts, db.WithValidateField("authentication_algos"))
		for idx, item := range m.GetAuthenticationAlgos() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["encryption_algos"]; exists {

		vOpts := append(opts, db.WithValidateField("encryption_algos"))
		for idx, item := range m.GetEncryptionAlgos() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["ike_key_lifetime"]; exists {
		val := m.GetIkeKeyLifetime()
		vOpts := append(opts,
			db.WithValidateField("ike_key_lifetime"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetIkeKeyLifetime().(type) {
	case *ReplaceSpecType_UseDefaultKeylifetime:
		if fv, exists := v.FldValidators["ike_key_lifetime.use_default_keylifetime"]; exists {
			val := m.GetIkeKeyLifetime().(*ReplaceSpecType_UseDefaultKeylifetime).UseDefaultKeylifetime
			vOpts := append(opts,
				db.WithValidateField("ike_key_lifetime"),
				db.WithValidateField("use_default_keylifetime"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_IkeKeylifetimeMinutes:
		if fv, exists := v.FldValidators["ike_key_lifetime.ike_keylifetime_minutes"]; exists {
			val := m.GetIkeKeyLifetime().(*ReplaceSpecType_IkeKeylifetimeMinutes).IkeKeylifetimeMinutes
			vOpts := append(opts,
				db.WithValidateField("ike_key_lifetime"),
				db.WithValidateField("ike_keylifetime_minutes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_IkeKeylifetimeHours:
		if fv, exists := v.FldValidators["ike_key_lifetime.ike_keylifetime_hours"]; exists {
			val := m.GetIkeKeyLifetime().(*ReplaceSpecType_IkeKeylifetimeHours).IkeKeylifetimeHours
			vOpts := append(opts,
				db.WithValidateField("ike_key_lifetime"),
				db.WithValidateField("ike_keylifetime_hours"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetPfsMode().(type) {
	case *ReplaceSpecType_DisablePfs:
		if fv, exists := v.FldValidators["pfs_mode.disable_pfs"]; exists {
			val := m.GetPfsMode().(*ReplaceSpecType_DisablePfs).DisablePfs
			vOpts := append(opts,
				db.WithValidateField("pfs_mode"),
				db.WithValidateField("disable_pfs"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_DhGroupSet:
		if fv, exists := v.FldValidators["pfs_mode.dh_group_set"]; exists {
			val := m.GetPfsMode().(*ReplaceSpecType_DhGroupSet).DhGroupSet
			vOpts := append(opts,
				db.WithValidateField("pfs_mode"),
				db.WithValidateField("dh_group_set"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhIkeKeyLifetime := v.IkeKeyLifetimeValidationRuleHandler
	rulesIkeKeyLifetime := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhIkeKeyLifetime(rulesIkeKeyLifetime)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.ike_key_lifetime: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ike_key_lifetime"] = vFn

	v.FldValidators["ike_key_lifetime.ike_keylifetime_minutes"] = ves_io_schema_views_ike_phase1_profile.InputMinutesValidator().Validate
	v.FldValidators["ike_key_lifetime.ike_keylifetime_hours"] = ves_io_schema_views_ike_phase1_profile.InputHoursValidator().Validate

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetIkeKeyLifetimeToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.IkeKeyLifetime.(type) {
	case nil:
		o.IkeKeyLifetime = nil

	case *CreateSpecType_IkeKeylifetimeHours:
		o.IkeKeyLifetime = &GlobalSpecType_IkeKeylifetimeHours{IkeKeylifetimeHours: of.IkeKeylifetimeHours}

	case *CreateSpecType_IkeKeylifetimeMinutes:
		o.IkeKeyLifetime = &GlobalSpecType_IkeKeylifetimeMinutes{IkeKeylifetimeMinutes: of.IkeKeylifetimeMinutes}

	case *CreateSpecType_UseDefaultKeylifetime:
		o.IkeKeyLifetime = &GlobalSpecType_UseDefaultKeylifetime{UseDefaultKeylifetime: of.UseDefaultKeylifetime}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetIkeKeyLifetimeFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.IkeKeyLifetime.(type) {
	case nil:
		r.IkeKeyLifetime = nil

	case *GlobalSpecType_IkeKeylifetimeHours:
		r.IkeKeyLifetime = &CreateSpecType_IkeKeylifetimeHours{IkeKeylifetimeHours: of.IkeKeylifetimeHours}

	case *GlobalSpecType_IkeKeylifetimeMinutes:
		r.IkeKeyLifetime = &CreateSpecType_IkeKeylifetimeMinutes{IkeKeylifetimeMinutes: of.IkeKeylifetimeMinutes}

	case *GlobalSpecType_UseDefaultKeylifetime:
		r.IkeKeyLifetime = &CreateSpecType_UseDefaultKeylifetime{UseDefaultKeylifetime: of.UseDefaultKeylifetime}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetPfsModeToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.PfsMode.(type) {
	case nil:
		o.PfsMode = nil

	case *CreateSpecType_DhGroupSet:
		o.PfsMode = &GlobalSpecType_DhGroupSet{DhGroupSet: of.DhGroupSet}

	case *CreateSpecType_DisablePfs:
		o.PfsMode = &GlobalSpecType_DisablePfs{DisablePfs: of.DisablePfs}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetPfsModeFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.PfsMode.(type) {
	case nil:
		r.PfsMode = nil

	case *GlobalSpecType_DhGroupSet:
		r.PfsMode = &CreateSpecType_DhGroupSet{DhGroupSet: of.DhGroupSet}

	case *GlobalSpecType_DisablePfs:
		r.PfsMode = &CreateSpecType_DisablePfs{DisablePfs: of.DisablePfs}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *CreateSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.AuthenticationAlgos = f.GetAuthenticationAlgos()
	m.EncryptionAlgos = f.GetEncryptionAlgos()
	m.GetIkeKeyLifetimeFromGlobalSpecType(f)
	m.GetPfsModeFromGlobalSpecType(f)
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *CreateSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *CreateSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.AuthenticationAlgos = m1.AuthenticationAlgos
	f.EncryptionAlgos = m1.EncryptionAlgos
	m1.SetIkeKeyLifetimeToGlobalSpecType(f)
	m1.SetPfsModeToGlobalSpecType(f)
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *CreateSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetIkeKeyLifetimeToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.IkeKeyLifetime.(type) {
	case nil:
		o.IkeKeyLifetime = nil

	case *GetSpecType_IkeKeylifetimeHours:
		o.IkeKeyLifetime = &GlobalSpecType_IkeKeylifetimeHours{IkeKeylifetimeHours: of.IkeKeylifetimeHours}

	case *GetSpecType_IkeKeylifetimeMinutes:
		o.IkeKeyLifetime = &GlobalSpecType_IkeKeylifetimeMinutes{IkeKeylifetimeMinutes: of.IkeKeylifetimeMinutes}

	case *GetSpecType_UseDefaultKeylifetime:
		o.IkeKeyLifetime = &GlobalSpecType_UseDefaultKeylifetime{UseDefaultKeylifetime: of.UseDefaultKeylifetime}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetIkeKeyLifetimeFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.IkeKeyLifetime.(type) {
	case nil:
		r.IkeKeyLifetime = nil

	case *GlobalSpecType_IkeKeylifetimeHours:
		r.IkeKeyLifetime = &GetSpecType_IkeKeylifetimeHours{IkeKeylifetimeHours: of.IkeKeylifetimeHours}

	case *GlobalSpecType_IkeKeylifetimeMinutes:
		r.IkeKeyLifetime = &GetSpecType_IkeKeylifetimeMinutes{IkeKeylifetimeMinutes: of.IkeKeylifetimeMinutes}

	case *GlobalSpecType_UseDefaultKeylifetime:
		r.IkeKeyLifetime = &GetSpecType_UseDefaultKeylifetime{UseDefaultKeylifetime: of.UseDefaultKeylifetime}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetPfsModeToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.PfsMode.(type) {
	case nil:
		o.PfsMode = nil

	case *GetSpecType_DhGroupSet:
		o.PfsMode = &GlobalSpecType_DhGroupSet{DhGroupSet: of.DhGroupSet}

	case *GetSpecType_DisablePfs:
		o.PfsMode = &GlobalSpecType_DisablePfs{DisablePfs: of.DisablePfs}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetPfsModeFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.PfsMode.(type) {
	case nil:
		r.PfsMode = nil

	case *GlobalSpecType_DhGroupSet:
		r.PfsMode = &GetSpecType_DhGroupSet{DhGroupSet: of.DhGroupSet}

	case *GlobalSpecType_DisablePfs:
		r.PfsMode = &GetSpecType_DisablePfs{DisablePfs: of.DisablePfs}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.AuthenticationAlgos = f.GetAuthenticationAlgos()
	m.EncryptionAlgos = f.GetEncryptionAlgos()
	m.GetIkeKeyLifetimeFromGlobalSpecType(f)
	m.GetPfsModeFromGlobalSpecType(f)
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.AuthenticationAlgos = m1.AuthenticationAlgos
	f.EncryptionAlgos = m1.EncryptionAlgos
	m1.SetIkeKeyLifetimeToGlobalSpecType(f)
	m1.SetPfsModeToGlobalSpecType(f)
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetIkeKeyLifetimeToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.IkeKeyLifetime.(type) {
	case nil:
		o.IkeKeyLifetime = nil

	case *ReplaceSpecType_IkeKeylifetimeHours:
		o.IkeKeyLifetime = &GlobalSpecType_IkeKeylifetimeHours{IkeKeylifetimeHours: of.IkeKeylifetimeHours}

	case *ReplaceSpecType_IkeKeylifetimeMinutes:
		o.IkeKeyLifetime = &GlobalSpecType_IkeKeylifetimeMinutes{IkeKeylifetimeMinutes: of.IkeKeylifetimeMinutes}

	case *ReplaceSpecType_UseDefaultKeylifetime:
		o.IkeKeyLifetime = &GlobalSpecType_UseDefaultKeylifetime{UseDefaultKeylifetime: of.UseDefaultKeylifetime}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetIkeKeyLifetimeFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.IkeKeyLifetime.(type) {
	case nil:
		r.IkeKeyLifetime = nil

	case *GlobalSpecType_IkeKeylifetimeHours:
		r.IkeKeyLifetime = &ReplaceSpecType_IkeKeylifetimeHours{IkeKeylifetimeHours: of.IkeKeylifetimeHours}

	case *GlobalSpecType_IkeKeylifetimeMinutes:
		r.IkeKeyLifetime = &ReplaceSpecType_IkeKeylifetimeMinutes{IkeKeylifetimeMinutes: of.IkeKeylifetimeMinutes}

	case *GlobalSpecType_UseDefaultKeylifetime:
		r.IkeKeyLifetime = &ReplaceSpecType_UseDefaultKeylifetime{UseDefaultKeylifetime: of.UseDefaultKeylifetime}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetPfsModeToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.PfsMode.(type) {
	case nil:
		o.PfsMode = nil

	case *ReplaceSpecType_DhGroupSet:
		o.PfsMode = &GlobalSpecType_DhGroupSet{DhGroupSet: of.DhGroupSet}

	case *ReplaceSpecType_DisablePfs:
		o.PfsMode = &GlobalSpecType_DisablePfs{DisablePfs: of.DisablePfs}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetPfsModeFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.PfsMode.(type) {
	case nil:
		r.PfsMode = nil

	case *GlobalSpecType_DhGroupSet:
		r.PfsMode = &ReplaceSpecType_DhGroupSet{DhGroupSet: of.DhGroupSet}

	case *GlobalSpecType_DisablePfs:
		r.PfsMode = &ReplaceSpecType_DisablePfs{DisablePfs: of.DisablePfs}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *ReplaceSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.AuthenticationAlgos = f.GetAuthenticationAlgos()
	m.EncryptionAlgos = f.GetEncryptionAlgos()
	m.GetIkeKeyLifetimeFromGlobalSpecType(f)
	m.GetPfsModeFromGlobalSpecType(f)
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.AuthenticationAlgos = m1.AuthenticationAlgos
	f.EncryptionAlgos = m1.EncryptionAlgos
	m1.SetIkeKeyLifetimeToGlobalSpecType(f)
	m1.SetPfsModeToGlobalSpecType(f)
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

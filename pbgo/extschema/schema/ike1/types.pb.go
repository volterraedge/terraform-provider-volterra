// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/ike1/types.proto

package ike1

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	ike_phase1_profile "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/ike_phase1_profile"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GlobalSpecType
//
// x-displayName: "Global Specification"
// Shape of the External connector configuration specification
type GlobalSpecType struct {
	// Encryption Algorithms
	//
	// x-displayName: "Configure Encryption Algorithms"
	// Choose one or more encryption algorithms.
	EncryptionAlgos []schema.EncryptionAlgorithm `protobuf:"varint,1,rep,packed,name=encryption_algos,json=encryptionAlgos,proto3,enum=ves.io.schema.EncryptionAlgorithm" json:"encryption_algos,omitempty"`
	// Authentication Algorithms
	//
	// x-displayName: "Authentication Algorithms"
	// Choose one or more Authentication Algorithm. Use None option when using the aes-gcm or aes-ccm encryption algorithms.
	AuthenticationAlgos []schema.AuthenticationAlgorithm `protobuf:"varint,2,rep,packed,name=authentication_algos,json=authenticationAlgos,proto3,enum=ves.io.schema.AuthenticationAlgorithm" json:"authentication_algos,omitempty"`
	// PseudoRandomFunction
	//
	// x-displayName: "PseudoRandomFunction"
	// Select PseudoRandomFunction for IKE SA.
	Prf []schema.PseudoRandomFunction `protobuf:"varint,3,rep,packed,name=prf,proto3,enum=ves.io.schema.PseudoRandomFunction" json:"prf,omitempty"`
	// Diffie Hellman Groups
	//
	// x-displayName: "Diffie Hellman Groups"
	// Choose the acceptable Diffie Hellman (DH) Group or Groups that you are willing to accept as part of this profile.
	DhGroup []schema.DHGroup `protobuf:"varint,4,rep,packed,name=dh_group,json=dhGroup,proto3,enum=ves.io.schema.DHGroup" json:"dh_group,omitempty"`
	// Key LifeTime
	//
	// x-displayName: "Key LifeTime"
	// x-required
	// Amount of time before the IKE Security Association (SA) key needs to be renegotiated
	//
	// Types that are valid to be assigned to IkeKeyLifetime:
	//	*GlobalSpecType_UseDefaultKeylifetime
	//	*GlobalSpecType_IkeKeylifetimeMinutes
	//	*GlobalSpecType_IkeKeylifetimeHours
	IkeKeyLifetime isGlobalSpecType_IkeKeyLifetime `protobuf_oneof:"ike_key_lifetime"`
	// IKE Reauthentication
	//
	// x-displayName: "IKE Reauthentication"
	// x-required
	// Amount of time for IKE peers to reauthenticate one another
	//
	// Types that are valid to be assigned to IkeReauthTimeout:
	//	*GlobalSpecType_ReauthTimeoutHours
	//	*GlobalSpecType_ReauthTimeoutDays
	//	*GlobalSpecType_ReauthDisabled
	IkeReauthTimeout isGlobalSpecType_IkeReauthTimeout `protobuf_oneof:"ike_reauth_timeout"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_58f1d9377098e5a2, []int{0}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

type isGlobalSpecType_IkeKeyLifetime interface {
	isGlobalSpecType_IkeKeyLifetime()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_IkeReauthTimeout interface {
	isGlobalSpecType_IkeReauthTimeout()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_UseDefaultKeylifetime struct {
	UseDefaultKeylifetime *schema.Empty `protobuf:"bytes,6,opt,name=use_default_keylifetime,json=useDefaultKeylifetime,proto3,oneof" json:"use_default_keylifetime,omitempty"`
}
type GlobalSpecType_IkeKeylifetimeMinutes struct {
	IkeKeylifetimeMinutes *ike_phase1_profile.InputMinutes `protobuf:"bytes,7,opt,name=ike_keylifetime_minutes,json=ikeKeylifetimeMinutes,proto3,oneof" json:"ike_keylifetime_minutes,omitempty"`
}
type GlobalSpecType_IkeKeylifetimeHours struct {
	IkeKeylifetimeHours *ike_phase1_profile.InputHours `protobuf:"bytes,8,opt,name=ike_keylifetime_hours,json=ikeKeylifetimeHours,proto3,oneof" json:"ike_keylifetime_hours,omitempty"`
}
type GlobalSpecType_ReauthTimeoutHours struct {
	ReauthTimeoutHours *ike_phase1_profile.InputHours `protobuf:"bytes,12,opt,name=reauth_timeout_hours,json=reauthTimeoutHours,proto3,oneof" json:"reauth_timeout_hours,omitempty"`
}
type GlobalSpecType_ReauthTimeoutDays struct {
	ReauthTimeoutDays *ike_phase1_profile.InputDays `protobuf:"bytes,13,opt,name=reauth_timeout_days,json=reauthTimeoutDays,proto3,oneof" json:"reauth_timeout_days,omitempty"`
}
type GlobalSpecType_ReauthDisabled struct {
	ReauthDisabled *schema.Empty `protobuf:"bytes,14,opt,name=reauth_disabled,json=reauthDisabled,proto3,oneof" json:"reauth_disabled,omitempty"`
}

func (*GlobalSpecType_UseDefaultKeylifetime) isGlobalSpecType_IkeKeyLifetime() {}
func (*GlobalSpecType_IkeKeylifetimeMinutes) isGlobalSpecType_IkeKeyLifetime() {}
func (*GlobalSpecType_IkeKeylifetimeHours) isGlobalSpecType_IkeKeyLifetime()   {}
func (*GlobalSpecType_ReauthTimeoutHours) isGlobalSpecType_IkeReauthTimeout()  {}
func (*GlobalSpecType_ReauthTimeoutDays) isGlobalSpecType_IkeReauthTimeout()   {}
func (*GlobalSpecType_ReauthDisabled) isGlobalSpecType_IkeReauthTimeout()      {}

func (m *GlobalSpecType) GetIkeKeyLifetime() isGlobalSpecType_IkeKeyLifetime {
	if m != nil {
		return m.IkeKeyLifetime
	}
	return nil
}
func (m *GlobalSpecType) GetIkeReauthTimeout() isGlobalSpecType_IkeReauthTimeout {
	if m != nil {
		return m.IkeReauthTimeout
	}
	return nil
}

func (m *GlobalSpecType) GetEncryptionAlgos() []schema.EncryptionAlgorithm {
	if m != nil {
		return m.EncryptionAlgos
	}
	return nil
}

func (m *GlobalSpecType) GetAuthenticationAlgos() []schema.AuthenticationAlgorithm {
	if m != nil {
		return m.AuthenticationAlgos
	}
	return nil
}

func (m *GlobalSpecType) GetPrf() []schema.PseudoRandomFunction {
	if m != nil {
		return m.Prf
	}
	return nil
}

func (m *GlobalSpecType) GetDhGroup() []schema.DHGroup {
	if m != nil {
		return m.DhGroup
	}
	return nil
}

func (m *GlobalSpecType) GetUseDefaultKeylifetime() *schema.Empty {
	if x, ok := m.GetIkeKeyLifetime().(*GlobalSpecType_UseDefaultKeylifetime); ok {
		return x.UseDefaultKeylifetime
	}
	return nil
}

func (m *GlobalSpecType) GetIkeKeylifetimeMinutes() *ike_phase1_profile.InputMinutes {
	if x, ok := m.GetIkeKeyLifetime().(*GlobalSpecType_IkeKeylifetimeMinutes); ok {
		return x.IkeKeylifetimeMinutes
	}
	return nil
}

func (m *GlobalSpecType) GetIkeKeylifetimeHours() *ike_phase1_profile.InputHours {
	if x, ok := m.GetIkeKeyLifetime().(*GlobalSpecType_IkeKeylifetimeHours); ok {
		return x.IkeKeylifetimeHours
	}
	return nil
}

func (m *GlobalSpecType) GetReauthTimeoutHours() *ike_phase1_profile.InputHours {
	if x, ok := m.GetIkeReauthTimeout().(*GlobalSpecType_ReauthTimeoutHours); ok {
		return x.ReauthTimeoutHours
	}
	return nil
}

func (m *GlobalSpecType) GetReauthTimeoutDays() *ike_phase1_profile.InputDays {
	if x, ok := m.GetIkeReauthTimeout().(*GlobalSpecType_ReauthTimeoutDays); ok {
		return x.ReauthTimeoutDays
	}
	return nil
}

func (m *GlobalSpecType) GetReauthDisabled() *schema.Empty {
	if x, ok := m.GetIkeReauthTimeout().(*GlobalSpecType_ReauthDisabled); ok {
		return x.ReauthDisabled
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GlobalSpecType_UseDefaultKeylifetime)(nil),
		(*GlobalSpecType_IkeKeylifetimeMinutes)(nil),
		(*GlobalSpecType_IkeKeylifetimeHours)(nil),
		(*GlobalSpecType_ReauthTimeoutHours)(nil),
		(*GlobalSpecType_ReauthTimeoutDays)(nil),
		(*GlobalSpecType_ReauthDisabled)(nil),
	}
}

// CreateSpecType
//
// x-displayName: "Create IKE Phase1 Profile"
// Shape of the IKE Phase1 profile specification
type CreateSpecType struct {
	EncryptionAlgos     []schema.EncryptionAlgorithm     `protobuf:"varint,1,rep,packed,name=encryption_algos,json=encryptionAlgos,proto3,enum=ves.io.schema.EncryptionAlgorithm" json:"encryption_algos,omitempty"`
	AuthenticationAlgos []schema.AuthenticationAlgorithm `protobuf:"varint,2,rep,packed,name=authentication_algos,json=authenticationAlgos,proto3,enum=ves.io.schema.AuthenticationAlgorithm" json:"authentication_algos,omitempty"`
	Prf                 []schema.PseudoRandomFunction    `protobuf:"varint,3,rep,packed,name=prf,proto3,enum=ves.io.schema.PseudoRandomFunction" json:"prf,omitempty"`
	DhGroup             []schema.DHGroup                 `protobuf:"varint,4,rep,packed,name=dh_group,json=dhGroup,proto3,enum=ves.io.schema.DHGroup" json:"dh_group,omitempty"`
	// Types that are valid to be assigned to IkeKeyLifetime:
	//	*CreateSpecType_UseDefaultKeylifetime
	//	*CreateSpecType_IkeKeylifetimeMinutes
	//	*CreateSpecType_IkeKeylifetimeHours
	IkeKeyLifetime isCreateSpecType_IkeKeyLifetime `protobuf_oneof:"ike_key_lifetime"`
	// Types that are valid to be assigned to IkeReauthTimeout:
	//	*CreateSpecType_ReauthTimeoutHours
	//	*CreateSpecType_ReauthTimeoutDays
	//	*CreateSpecType_ReauthDisabled
	IkeReauthTimeout isCreateSpecType_IkeReauthTimeout `protobuf_oneof:"ike_reauth_timeout"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_58f1d9377098e5a2, []int{1}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

type isCreateSpecType_IkeKeyLifetime interface {
	isCreateSpecType_IkeKeyLifetime()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_IkeReauthTimeout interface {
	isCreateSpecType_IkeReauthTimeout()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSpecType_UseDefaultKeylifetime struct {
	UseDefaultKeylifetime *schema.Empty `protobuf:"bytes,6,opt,name=use_default_keylifetime,json=useDefaultKeylifetime,proto3,oneof" json:"use_default_keylifetime,omitempty"`
}
type CreateSpecType_IkeKeylifetimeMinutes struct {
	IkeKeylifetimeMinutes *ike_phase1_profile.InputMinutes `protobuf:"bytes,7,opt,name=ike_keylifetime_minutes,json=ikeKeylifetimeMinutes,proto3,oneof" json:"ike_keylifetime_minutes,omitempty"`
}
type CreateSpecType_IkeKeylifetimeHours struct {
	IkeKeylifetimeHours *ike_phase1_profile.InputHours `protobuf:"bytes,8,opt,name=ike_keylifetime_hours,json=ikeKeylifetimeHours,proto3,oneof" json:"ike_keylifetime_hours,omitempty"`
}
type CreateSpecType_ReauthTimeoutHours struct {
	ReauthTimeoutHours *ike_phase1_profile.InputHours `protobuf:"bytes,12,opt,name=reauth_timeout_hours,json=reauthTimeoutHours,proto3,oneof" json:"reauth_timeout_hours,omitempty"`
}
type CreateSpecType_ReauthTimeoutDays struct {
	ReauthTimeoutDays *ike_phase1_profile.InputDays `protobuf:"bytes,13,opt,name=reauth_timeout_days,json=reauthTimeoutDays,proto3,oneof" json:"reauth_timeout_days,omitempty"`
}
type CreateSpecType_ReauthDisabled struct {
	ReauthDisabled *schema.Empty `protobuf:"bytes,14,opt,name=reauth_disabled,json=reauthDisabled,proto3,oneof" json:"reauth_disabled,omitempty"`
}

func (*CreateSpecType_UseDefaultKeylifetime) isCreateSpecType_IkeKeyLifetime() {}
func (*CreateSpecType_IkeKeylifetimeMinutes) isCreateSpecType_IkeKeyLifetime() {}
func (*CreateSpecType_IkeKeylifetimeHours) isCreateSpecType_IkeKeyLifetime()   {}
func (*CreateSpecType_ReauthTimeoutHours) isCreateSpecType_IkeReauthTimeout()  {}
func (*CreateSpecType_ReauthTimeoutDays) isCreateSpecType_IkeReauthTimeout()   {}
func (*CreateSpecType_ReauthDisabled) isCreateSpecType_IkeReauthTimeout()      {}

func (m *CreateSpecType) GetIkeKeyLifetime() isCreateSpecType_IkeKeyLifetime {
	if m != nil {
		return m.IkeKeyLifetime
	}
	return nil
}
func (m *CreateSpecType) GetIkeReauthTimeout() isCreateSpecType_IkeReauthTimeout {
	if m != nil {
		return m.IkeReauthTimeout
	}
	return nil
}

func (m *CreateSpecType) GetEncryptionAlgos() []schema.EncryptionAlgorithm {
	if m != nil {
		return m.EncryptionAlgos
	}
	return nil
}

func (m *CreateSpecType) GetAuthenticationAlgos() []schema.AuthenticationAlgorithm {
	if m != nil {
		return m.AuthenticationAlgos
	}
	return nil
}

func (m *CreateSpecType) GetPrf() []schema.PseudoRandomFunction {
	if m != nil {
		return m.Prf
	}
	return nil
}

func (m *CreateSpecType) GetDhGroup() []schema.DHGroup {
	if m != nil {
		return m.DhGroup
	}
	return nil
}

func (m *CreateSpecType) GetUseDefaultKeylifetime() *schema.Empty {
	if x, ok := m.GetIkeKeyLifetime().(*CreateSpecType_UseDefaultKeylifetime); ok {
		return x.UseDefaultKeylifetime
	}
	return nil
}

func (m *CreateSpecType) GetIkeKeylifetimeMinutes() *ike_phase1_profile.InputMinutes {
	if x, ok := m.GetIkeKeyLifetime().(*CreateSpecType_IkeKeylifetimeMinutes); ok {
		return x.IkeKeylifetimeMinutes
	}
	return nil
}

func (m *CreateSpecType) GetIkeKeylifetimeHours() *ike_phase1_profile.InputHours {
	if x, ok := m.GetIkeKeyLifetime().(*CreateSpecType_IkeKeylifetimeHours); ok {
		return x.IkeKeylifetimeHours
	}
	return nil
}

func (m *CreateSpecType) GetReauthTimeoutHours() *ike_phase1_profile.InputHours {
	if x, ok := m.GetIkeReauthTimeout().(*CreateSpecType_ReauthTimeoutHours); ok {
		return x.ReauthTimeoutHours
	}
	return nil
}

func (m *CreateSpecType) GetReauthTimeoutDays() *ike_phase1_profile.InputDays {
	if x, ok := m.GetIkeReauthTimeout().(*CreateSpecType_ReauthTimeoutDays); ok {
		return x.ReauthTimeoutDays
	}
	return nil
}

func (m *CreateSpecType) GetReauthDisabled() *schema.Empty {
	if x, ok := m.GetIkeReauthTimeout().(*CreateSpecType_ReauthDisabled); ok {
		return x.ReauthDisabled
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CreateSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CreateSpecType_UseDefaultKeylifetime)(nil),
		(*CreateSpecType_IkeKeylifetimeMinutes)(nil),
		(*CreateSpecType_IkeKeylifetimeHours)(nil),
		(*CreateSpecType_ReauthTimeoutHours)(nil),
		(*CreateSpecType_ReauthTimeoutDays)(nil),
		(*CreateSpecType_ReauthDisabled)(nil),
	}
}

// ReplaceSpecType
//
// x-displayName: "Replace IKE Phase1 Profile  configuration"
// Shape of the IKE Phase1 profile  configuration specification
type ReplaceSpecType struct {
	EncryptionAlgos     []schema.EncryptionAlgorithm     `protobuf:"varint,1,rep,packed,name=encryption_algos,json=encryptionAlgos,proto3,enum=ves.io.schema.EncryptionAlgorithm" json:"encryption_algos,omitempty"`
	AuthenticationAlgos []schema.AuthenticationAlgorithm `protobuf:"varint,2,rep,packed,name=authentication_algos,json=authenticationAlgos,proto3,enum=ves.io.schema.AuthenticationAlgorithm" json:"authentication_algos,omitempty"`
	Prf                 []schema.PseudoRandomFunction    `protobuf:"varint,3,rep,packed,name=prf,proto3,enum=ves.io.schema.PseudoRandomFunction" json:"prf,omitempty"`
	DhGroup             []schema.DHGroup                 `protobuf:"varint,4,rep,packed,name=dh_group,json=dhGroup,proto3,enum=ves.io.schema.DHGroup" json:"dh_group,omitempty"`
	// Types that are valid to be assigned to IkeKeyLifetime:
	//	*ReplaceSpecType_UseDefaultKeylifetime
	//	*ReplaceSpecType_IkeKeylifetimeMinutes
	//	*ReplaceSpecType_IkeKeylifetimeHours
	IkeKeyLifetime isReplaceSpecType_IkeKeyLifetime `protobuf_oneof:"ike_key_lifetime"`
	// Types that are valid to be assigned to IkeReauthTimeout:
	//	*ReplaceSpecType_ReauthTimeoutHours
	//	*ReplaceSpecType_ReauthTimeoutDays
	//	*ReplaceSpecType_ReauthDisabled
	IkeReauthTimeout isReplaceSpecType_IkeReauthTimeout `protobuf_oneof:"ike_reauth_timeout"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_58f1d9377098e5a2, []int{2}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

type isReplaceSpecType_IkeKeyLifetime interface {
	isReplaceSpecType_IkeKeyLifetime()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_IkeReauthTimeout interface {
	isReplaceSpecType_IkeReauthTimeout()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplaceSpecType_UseDefaultKeylifetime struct {
	UseDefaultKeylifetime *schema.Empty `protobuf:"bytes,6,opt,name=use_default_keylifetime,json=useDefaultKeylifetime,proto3,oneof" json:"use_default_keylifetime,omitempty"`
}
type ReplaceSpecType_IkeKeylifetimeMinutes struct {
	IkeKeylifetimeMinutes *ike_phase1_profile.InputMinutes `protobuf:"bytes,7,opt,name=ike_keylifetime_minutes,json=ikeKeylifetimeMinutes,proto3,oneof" json:"ike_keylifetime_minutes,omitempty"`
}
type ReplaceSpecType_IkeKeylifetimeHours struct {
	IkeKeylifetimeHours *ike_phase1_profile.InputHours `protobuf:"bytes,8,opt,name=ike_keylifetime_hours,json=ikeKeylifetimeHours,proto3,oneof" json:"ike_keylifetime_hours,omitempty"`
}
type ReplaceSpecType_ReauthTimeoutHours struct {
	ReauthTimeoutHours *ike_phase1_profile.InputHours `protobuf:"bytes,12,opt,name=reauth_timeout_hours,json=reauthTimeoutHours,proto3,oneof" json:"reauth_timeout_hours,omitempty"`
}
type ReplaceSpecType_ReauthTimeoutDays struct {
	ReauthTimeoutDays *ike_phase1_profile.InputDays `protobuf:"bytes,13,opt,name=reauth_timeout_days,json=reauthTimeoutDays,proto3,oneof" json:"reauth_timeout_days,omitempty"`
}
type ReplaceSpecType_ReauthDisabled struct {
	ReauthDisabled *schema.Empty `protobuf:"bytes,14,opt,name=reauth_disabled,json=reauthDisabled,proto3,oneof" json:"reauth_disabled,omitempty"`
}

func (*ReplaceSpecType_UseDefaultKeylifetime) isReplaceSpecType_IkeKeyLifetime() {}
func (*ReplaceSpecType_IkeKeylifetimeMinutes) isReplaceSpecType_IkeKeyLifetime() {}
func (*ReplaceSpecType_IkeKeylifetimeHours) isReplaceSpecType_IkeKeyLifetime()   {}
func (*ReplaceSpecType_ReauthTimeoutHours) isReplaceSpecType_IkeReauthTimeout()  {}
func (*ReplaceSpecType_ReauthTimeoutDays) isReplaceSpecType_IkeReauthTimeout()   {}
func (*ReplaceSpecType_ReauthDisabled) isReplaceSpecType_IkeReauthTimeout()      {}

func (m *ReplaceSpecType) GetIkeKeyLifetime() isReplaceSpecType_IkeKeyLifetime {
	if m != nil {
		return m.IkeKeyLifetime
	}
	return nil
}
func (m *ReplaceSpecType) GetIkeReauthTimeout() isReplaceSpecType_IkeReauthTimeout {
	if m != nil {
		return m.IkeReauthTimeout
	}
	return nil
}

func (m *ReplaceSpecType) GetEncryptionAlgos() []schema.EncryptionAlgorithm {
	if m != nil {
		return m.EncryptionAlgos
	}
	return nil
}

func (m *ReplaceSpecType) GetAuthenticationAlgos() []schema.AuthenticationAlgorithm {
	if m != nil {
		return m.AuthenticationAlgos
	}
	return nil
}

func (m *ReplaceSpecType) GetPrf() []schema.PseudoRandomFunction {
	if m != nil {
		return m.Prf
	}
	return nil
}

func (m *ReplaceSpecType) GetDhGroup() []schema.DHGroup {
	if m != nil {
		return m.DhGroup
	}
	return nil
}

func (m *ReplaceSpecType) GetUseDefaultKeylifetime() *schema.Empty {
	if x, ok := m.GetIkeKeyLifetime().(*ReplaceSpecType_UseDefaultKeylifetime); ok {
		return x.UseDefaultKeylifetime
	}
	return nil
}

func (m *ReplaceSpecType) GetIkeKeylifetimeMinutes() *ike_phase1_profile.InputMinutes {
	if x, ok := m.GetIkeKeyLifetime().(*ReplaceSpecType_IkeKeylifetimeMinutes); ok {
		return x.IkeKeylifetimeMinutes
	}
	return nil
}

func (m *ReplaceSpecType) GetIkeKeylifetimeHours() *ike_phase1_profile.InputHours {
	if x, ok := m.GetIkeKeyLifetime().(*ReplaceSpecType_IkeKeylifetimeHours); ok {
		return x.IkeKeylifetimeHours
	}
	return nil
}

func (m *ReplaceSpecType) GetReauthTimeoutHours() *ike_phase1_profile.InputHours {
	if x, ok := m.GetIkeReauthTimeout().(*ReplaceSpecType_ReauthTimeoutHours); ok {
		return x.ReauthTimeoutHours
	}
	return nil
}

func (m *ReplaceSpecType) GetReauthTimeoutDays() *ike_phase1_profile.InputDays {
	if x, ok := m.GetIkeReauthTimeout().(*ReplaceSpecType_ReauthTimeoutDays); ok {
		return x.ReauthTimeoutDays
	}
	return nil
}

func (m *ReplaceSpecType) GetReauthDisabled() *schema.Empty {
	if x, ok := m.GetIkeReauthTimeout().(*ReplaceSpecType_ReauthDisabled); ok {
		return x.ReauthDisabled
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ReplaceSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ReplaceSpecType_UseDefaultKeylifetime)(nil),
		(*ReplaceSpecType_IkeKeylifetimeMinutes)(nil),
		(*ReplaceSpecType_IkeKeylifetimeHours)(nil),
		(*ReplaceSpecType_ReauthTimeoutHours)(nil),
		(*ReplaceSpecType_ReauthTimeoutDays)(nil),
		(*ReplaceSpecType_ReauthDisabled)(nil),
	}
}

// GetSpecType
//
// x-displayName: "Get IKE Phase1 profile  configuration"
// Shape of the IKE Phase1 Profile  configuration specification
type GetSpecType struct {
	EncryptionAlgos     []schema.EncryptionAlgorithm     `protobuf:"varint,1,rep,packed,name=encryption_algos,json=encryptionAlgos,proto3,enum=ves.io.schema.EncryptionAlgorithm" json:"encryption_algos,omitempty"`
	AuthenticationAlgos []schema.AuthenticationAlgorithm `protobuf:"varint,2,rep,packed,name=authentication_algos,json=authenticationAlgos,proto3,enum=ves.io.schema.AuthenticationAlgorithm" json:"authentication_algos,omitempty"`
	Prf                 []schema.PseudoRandomFunction    `protobuf:"varint,3,rep,packed,name=prf,proto3,enum=ves.io.schema.PseudoRandomFunction" json:"prf,omitempty"`
	DhGroup             []schema.DHGroup                 `protobuf:"varint,4,rep,packed,name=dh_group,json=dhGroup,proto3,enum=ves.io.schema.DHGroup" json:"dh_group,omitempty"`
	// Types that are valid to be assigned to IkeKeyLifetime:
	//	*GetSpecType_UseDefaultKeylifetime
	//	*GetSpecType_IkeKeylifetimeMinutes
	//	*GetSpecType_IkeKeylifetimeHours
	IkeKeyLifetime isGetSpecType_IkeKeyLifetime `protobuf_oneof:"ike_key_lifetime"`
	// Types that are valid to be assigned to IkeReauthTimeout:
	//	*GetSpecType_ReauthTimeoutHours
	//	*GetSpecType_ReauthTimeoutDays
	//	*GetSpecType_ReauthDisabled
	IkeReauthTimeout isGetSpecType_IkeReauthTimeout `protobuf_oneof:"ike_reauth_timeout"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_58f1d9377098e5a2, []int{3}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

type isGetSpecType_IkeKeyLifetime interface {
	isGetSpecType_IkeKeyLifetime()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_IkeReauthTimeout interface {
	isGetSpecType_IkeReauthTimeout()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_UseDefaultKeylifetime struct {
	UseDefaultKeylifetime *schema.Empty `protobuf:"bytes,6,opt,name=use_default_keylifetime,json=useDefaultKeylifetime,proto3,oneof" json:"use_default_keylifetime,omitempty"`
}
type GetSpecType_IkeKeylifetimeMinutes struct {
	IkeKeylifetimeMinutes *ike_phase1_profile.InputMinutes `protobuf:"bytes,7,opt,name=ike_keylifetime_minutes,json=ikeKeylifetimeMinutes,proto3,oneof" json:"ike_keylifetime_minutes,omitempty"`
}
type GetSpecType_IkeKeylifetimeHours struct {
	IkeKeylifetimeHours *ike_phase1_profile.InputHours `protobuf:"bytes,8,opt,name=ike_keylifetime_hours,json=ikeKeylifetimeHours,proto3,oneof" json:"ike_keylifetime_hours,omitempty"`
}
type GetSpecType_ReauthTimeoutHours struct {
	ReauthTimeoutHours *ike_phase1_profile.InputHours `protobuf:"bytes,12,opt,name=reauth_timeout_hours,json=reauthTimeoutHours,proto3,oneof" json:"reauth_timeout_hours,omitempty"`
}
type GetSpecType_ReauthTimeoutDays struct {
	ReauthTimeoutDays *ike_phase1_profile.InputDays `protobuf:"bytes,13,opt,name=reauth_timeout_days,json=reauthTimeoutDays,proto3,oneof" json:"reauth_timeout_days,omitempty"`
}
type GetSpecType_ReauthDisabled struct {
	ReauthDisabled *schema.Empty `protobuf:"bytes,14,opt,name=reauth_disabled,json=reauthDisabled,proto3,oneof" json:"reauth_disabled,omitempty"`
}

func (*GetSpecType_UseDefaultKeylifetime) isGetSpecType_IkeKeyLifetime() {}
func (*GetSpecType_IkeKeylifetimeMinutes) isGetSpecType_IkeKeyLifetime() {}
func (*GetSpecType_IkeKeylifetimeHours) isGetSpecType_IkeKeyLifetime()   {}
func (*GetSpecType_ReauthTimeoutHours) isGetSpecType_IkeReauthTimeout()  {}
func (*GetSpecType_ReauthTimeoutDays) isGetSpecType_IkeReauthTimeout()   {}
func (*GetSpecType_ReauthDisabled) isGetSpecType_IkeReauthTimeout()      {}

func (m *GetSpecType) GetIkeKeyLifetime() isGetSpecType_IkeKeyLifetime {
	if m != nil {
		return m.IkeKeyLifetime
	}
	return nil
}
func (m *GetSpecType) GetIkeReauthTimeout() isGetSpecType_IkeReauthTimeout {
	if m != nil {
		return m.IkeReauthTimeout
	}
	return nil
}

func (m *GetSpecType) GetEncryptionAlgos() []schema.EncryptionAlgorithm {
	if m != nil {
		return m.EncryptionAlgos
	}
	return nil
}

func (m *GetSpecType) GetAuthenticationAlgos() []schema.AuthenticationAlgorithm {
	if m != nil {
		return m.AuthenticationAlgos
	}
	return nil
}

func (m *GetSpecType) GetPrf() []schema.PseudoRandomFunction {
	if m != nil {
		return m.Prf
	}
	return nil
}

func (m *GetSpecType) GetDhGroup() []schema.DHGroup {
	if m != nil {
		return m.DhGroup
	}
	return nil
}

func (m *GetSpecType) GetUseDefaultKeylifetime() *schema.Empty {
	if x, ok := m.GetIkeKeyLifetime().(*GetSpecType_UseDefaultKeylifetime); ok {
		return x.UseDefaultKeylifetime
	}
	return nil
}

func (m *GetSpecType) GetIkeKeylifetimeMinutes() *ike_phase1_profile.InputMinutes {
	if x, ok := m.GetIkeKeyLifetime().(*GetSpecType_IkeKeylifetimeMinutes); ok {
		return x.IkeKeylifetimeMinutes
	}
	return nil
}

func (m *GetSpecType) GetIkeKeylifetimeHours() *ike_phase1_profile.InputHours {
	if x, ok := m.GetIkeKeyLifetime().(*GetSpecType_IkeKeylifetimeHours); ok {
		return x.IkeKeylifetimeHours
	}
	return nil
}

func (m *GetSpecType) GetReauthTimeoutHours() *ike_phase1_profile.InputHours {
	if x, ok := m.GetIkeReauthTimeout().(*GetSpecType_ReauthTimeoutHours); ok {
		return x.ReauthTimeoutHours
	}
	return nil
}

func (m *GetSpecType) GetReauthTimeoutDays() *ike_phase1_profile.InputDays {
	if x, ok := m.GetIkeReauthTimeout().(*GetSpecType_ReauthTimeoutDays); ok {
		return x.ReauthTimeoutDays
	}
	return nil
}

func (m *GetSpecType) GetReauthDisabled() *schema.Empty {
	if x, ok := m.GetIkeReauthTimeout().(*GetSpecType_ReauthDisabled); ok {
		return x.ReauthDisabled
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetSpecType_UseDefaultKeylifetime)(nil),
		(*GetSpecType_IkeKeylifetimeMinutes)(nil),
		(*GetSpecType_IkeKeylifetimeHours)(nil),
		(*GetSpecType_ReauthTimeoutHours)(nil),
		(*GetSpecType_ReauthTimeoutDays)(nil),
		(*GetSpecType_ReauthDisabled)(nil),
	}
}

func init() {
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.ike1.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.ike1.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.ike1.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.ike1.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.ike1.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.ike1.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.ike1.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.ike1.GetSpecType")
}

func init() { proto.RegisterFile("ves.io/schema/ike1/types.proto", fileDescriptor_58f1d9377098e5a2) }
func init() {
	golang_proto.RegisterFile("ves.io/schema/ike1/types.proto", fileDescriptor_58f1d9377098e5a2)
}

var fileDescriptor_58f1d9377098e5a2 = []byte{
	// 835 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x98, 0x4f, 0x6f, 0xe3, 0x44,
	0x18, 0xc6, 0x33, 0xf4, 0x4f, 0xa2, 0x29, 0xa4, 0x5d, 0xb7, 0xdd, 0x35, 0x01, 0x0d, 0x55, 0x91,
	0x50, 0x91, 0x52, 0x47, 0xc9, 0x2e, 0x7f, 0xb4, 0x87, 0x45, 0x1b, 0x0a, 0x0d, 0x8b, 0x16, 0xa1,
	0xb0, 0x42, 0x82, 0x8b, 0x35, 0xb1, 0x27, 0xf6, 0xa8, 0xb6, 0x67, 0xe4, 0x19, 0x17, 0x72, 0x40,
	0x42, 0x7b, 0xe0, 0xcc, 0xc7, 0xe0, 0x3b, 0xf8, 0xd2, 0x23, 0xe2, 0x14, 0x09, 0x0e, 0x3d, 0x52,
	0xf7, 0xc0, 0x1e, 0x7b, 0xde, 0x13, 0xf2, 0xd8, 0xdb, 0xc6, 0x4e, 0x84, 0x28, 0xcb, 0xa9, 0xf2,
	0xcd, 0x7e, 0x9f, 0xf7, 0x7d, 0x9e, 0x78, 0xde, 0xfc, 0x14, 0x39, 0x10, 0x1d, 0x13, 0x61, 0x50,
	0xd6, 0x11, 0x96, 0x4b, 0x7c, 0xdc, 0xa1, 0x47, 0xa4, 0xdb, 0x91, 0x13, 0x4e, 0x84, 0xc1, 0x43,
	0x26, 0x99, 0xa6, 0x65, 0xba, 0x91, 0xe9, 0x46, 0xaa, 0xb7, 0xf6, 0x1d, 0x2a, 0xdd, 0x68, 0x64,
	0x58, 0xcc, 0xef, 0x38, 0xcc, 0x61, 0x1d, 0xd5, 0x3a, 0x8a, 0xc6, 0xea, 0x4e, 0xdd, 0xa8, 0xab,
	0xcc, 0xa2, 0xd5, 0x2a, 0x46, 0x58, 0xe1, 0x84, 0xcb, 0x17, 0xda, 0x1b, 0x45, 0x8d, 0x71, 0x49,
	0x59, 0x90, 0x67, 0xb7, 0x5e, 0x2f, 0x8a, 0x33, 0x1f, 0xab, 0xf5, 0x66, 0x51, 0x3a, 0xc6, 0x1e,
	0xb5, 0xb1, 0x24, 0xb9, 0xba, 0x53, 0x52, 0x29, 0xf9, 0xce, 0x2c, 0x5a, 0xf7, 0xe6, 0x3b, 0x44,
	0xfa, 0xf0, 0x26, 0x77, 0xb1, 0x20, 0x5d, 0x93, 0x87, 0x6c, 0x4c, 0x3d, 0x52, 0xc8, 0x7c, 0x6b,
	0xd1, 0xcc, 0x4c, 0xc3, 0xee, 0x5f, 0x75, 0xd8, 0x3c, 0xf4, 0xd8, 0x08, 0x7b, 0x5f, 0x71, 0x62,
	0x3d, 0x99, 0x70, 0xa2, 0x7d, 0x0d, 0x37, 0x48, 0xa0, 0x9e, 0x98, 0xb2, 0xc0, 0xc4, 0x9e, 0xc3,
	0x84, 0x0e, 0x76, 0x96, 0xf6, 0x9a, 0xbd, 0x5d, 0xa3, 0x78, 0xb2, 0x9f, 0x5c, 0xb6, 0x3d, 0xf4,
	0x1c, 0x16, 0x52, 0xe9, 0xfa, 0xfd, 0xfa, 0xe9, 0x0f, 0xe0, 0x59, 0x0c, 0xc0, 0x70, 0x9d, 0x14,
	0x54, 0xa1, 0x8d, 0xe0, 0x16, 0x8e, 0xa4, 0x4b, 0x02, 0x49, 0x2d, 0x3c, 0xe3, 0xfd, 0x8a, 0xf2,
	0x7e, 0xa7, 0xe4, 0xfd, 0xb0, 0xd0, 0xba, 0xc0, 0x7f, 0x13, 0xcf, 0x75, 0x08, 0xed, 0x01, 0x5c,
	0xe2, 0xe1, 0x58, 0x5f, 0x52, 0x96, 0x6f, 0x97, 0x2c, 0xbf, 0x14, 0x24, 0xb2, 0xd9, 0x10, 0x07,
	0x36, 0xf3, 0x3f, 0x8d, 0x02, 0x2b, 0x1d, 0xbb, 0xf2, 0x4b, 0x07, 0xb5, 0xfb, 0xb0, 0x61, 0xbb,
	0xa6, 0x13, 0xb2, 0x88, 0xeb, 0xcb, 0xca, 0xe4, 0x76, 0xc9, 0xe4, 0x60, 0x70, 0x98, 0xaa, 0x57,
	0x73, 0x75, 0xdb, 0x55, 0x15, 0xed, 0x0b, 0x78, 0x27, 0x12, 0xc4, 0xb4, 0xc9, 0x18, 0x47, 0x9e,
	0x34, 0x8f, 0xc8, 0xc4, 0xa3, 0x63, 0x22, 0xa9, 0x4f, 0xf4, 0xd5, 0x1d, 0xb0, 0xb7, 0xd6, 0xdb,
	0x2a, 0x1f, 0x9f, 0xcf, 0xe5, 0x64, 0x50, 0x1b, 0x6e, 0x47, 0x82, 0x1c, 0x64, 0x53, 0x9f, 0x5f,
	0x0d, 0x69, 0x01, 0xbc, 0x93, 0x6e, 0x77, 0xc6, 0xc7, 0xf4, 0x69, 0x10, 0x49, 0x22, 0xf4, 0xba,
	0xf2, 0xbb, 0x57, 0xf2, 0x53, 0xdb, 0x35, 0xe6, 0xbf, 0x11, 0xc6, 0x67, 0x01, 0x8f, 0xe4, 0xe3,
	0x6c, 0x36, 0xcd, 0xa3, 0x47, 0x64, 0x26, 0x28, 0x17, 0x34, 0x17, 0x6e, 0x97, 0xf3, 0x5c, 0x16,
	0x85, 0x42, 0x6f, 0xa8, 0xb4, 0xde, 0xb5, 0xd2, 0x06, 0xe9, 0xe4, 0xa0, 0x36, 0xdc, 0x2c, 0x66,
	0xa9, 0xb2, 0x36, 0x86, 0x5b, 0x21, 0x49, 0xd7, 0x67, 0xa6, 0x35, 0x16, 0xc9, 0x3c, 0xe8, 0xd5,
	0xff, 0x1c, 0x04, 0x86, 0x5a, 0xe6, 0xf8, 0x24, 0x33, 0xcc, 0x72, 0x2c, 0xb8, 0x59, 0xca, 0xb1,
	0xf1, 0x44, 0xe8, 0xaf, 0xa9, 0x98, 0xee, 0xb5, 0x62, 0x0e, 0xf0, 0x24, 0x4d, 0xb9, 0x55, 0x48,
	0x49, 0x8b, 0xda, 0x47, 0x70, 0x3d, 0x0f, 0xb1, 0xa9, 0xc0, 0x23, 0x8f, 0xd8, 0x7a, 0xf3, 0x1f,
	0xd6, 0x0d, 0x86, 0xcd, 0xac, 0xfd, 0x20, 0xef, 0xee, 0xbf, 0x0b, 0x37, 0xf2, 0x73, 0x37, 0x2f,
	0x77, 0xbf, 0x7d, 0x12, 0x83, 0xd5, 0x69, 0x0c, 0x56, 0x92, 0x18, 0xac, 0xbc, 0xdf, 0xfe, 0xa0,
	0xfd, 0xe1, 0x45, 0x0c, 0x40, 0xdf, 0x80, 0x5a, 0xda, 0x5a, 0x7c, 0x28, 0x4d, 0x3f, 0x89, 0x41,
	0x73, 0x1a, 0x03, 0x98, 0xc4, 0xa0, 0xd1, 0xbd, 0xd7, 0xee, 0xde, 0x6d, 0x77, 0x7b, 0x69, 0xff,
	0xa3, 0xe5, 0xc6, 0xca, 0xc6, 0xea, 0xa3, 0xe5, 0x06, 0xdc, 0x58, 0xdb, 0xfd, 0xbd, 0x0e, 0x9b,
	0x1f, 0x87, 0x04, 0x4b, 0x72, 0x49, 0xfa, 0xe3, 0x97, 0x21, 0x7d, 0x1e, 0xf0, 0x6f, 0xfe, 0x0f,
	0xc0, 0x17, 0x73, 0xfd, 0xde, 0x75, 0xb9, 0xce, 0x70, 0xee, 0xfe, 0x5b, 0x9c, 0x2b, 0x8a, 0x2b,
	0x8a, 0x5f, 0x8a, 0xe2, 0xfb, 0xb7, 0x7e, 0x7b, 0x50, 0xfa, 0x21, 0xed, 0xef, 0x2d, 0x00, 0x7b,
	0xeb, 0xe9, 0x73, 0x30, 0x57, 0xed, 0xb7, 0x17, 0x72, 0x7d, 0xfb, 0xe9, 0x73, 0xb0, 0xa0, 0x5e,
	0xa0, 0xfa, 0x8f, 0x3a, 0x5c, 0x1f, 0x12, 0xee, 0x61, 0xab, 0xc2, 0xba, 0xc2, 0xba, 0xc2, 0xfa,
	0x86, 0x60, 0x3d, 0xad, 0xc3, 0xb5, 0x43, 0x22, 0x2b, 0xa4, 0x2b, 0xa4, 0x2b, 0xa4, 0x6f, 0x04,
	0xd2, 0xfd, 0x9f, 0xc0, 0xf4, 0x0c, 0xd5, 0x4e, 0xcf, 0x50, 0xed, 0xe2, 0x0c, 0x81, 0x1f, 0x13,
	0x04, 0x7e, 0x49, 0x10, 0xf8, 0x35, 0x41, 0x60, 0x9a, 0x20, 0x70, 0x9a, 0x20, 0xf0, 0x67, 0x82,
	0xc0, 0xb3, 0x04, 0xd5, 0x2e, 0x12, 0x04, 0x7e, 0x3e, 0x47, 0xb5, 0x93, 0x73, 0x04, 0xa6, 0xe7,
	0xa8, 0x76, 0x7a, 0x8e, 0x6a, 0xdf, 0x0e, 0x1c, 0xc6, 0x8f, 0x1c, 0xe3, 0x98, 0x79, 0x92, 0x84,
	0x21, 0x36, 0x22, 0xd1, 0x51, 0x17, 0x63, 0x16, 0xfa, 0xfb, 0x3c, 0x64, 0xc7, 0xd4, 0x26, 0xe1,
	0xfe, 0x0b, 0xb9, 0xc3, 0x47, 0x0e, 0xeb, 0x90, 0xef, 0x65, 0xfe, 0xe2, 0x3f, 0xf3, 0x57, 0xc9,
	0x68, 0x55, 0xbd, 0xf9, 0xdf, 0xfd, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xe7, 0x41, 0x12, 0x39, 0x47,
	0x11, 0x00, 0x00,
}

func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.EncryptionAlgos) != len(that1.EncryptionAlgos) {
		return false
	}
	for i := range this.EncryptionAlgos {
		if this.EncryptionAlgos[i] != that1.EncryptionAlgos[i] {
			return false
		}
	}
	if len(this.AuthenticationAlgos) != len(that1.AuthenticationAlgos) {
		return false
	}
	for i := range this.AuthenticationAlgos {
		if this.AuthenticationAlgos[i] != that1.AuthenticationAlgos[i] {
			return false
		}
	}
	if len(this.Prf) != len(that1.Prf) {
		return false
	}
	for i := range this.Prf {
		if this.Prf[i] != that1.Prf[i] {
			return false
		}
	}
	if len(this.DhGroup) != len(that1.DhGroup) {
		return false
	}
	for i := range this.DhGroup {
		if this.DhGroup[i] != that1.DhGroup[i] {
			return false
		}
	}
	if that1.IkeKeyLifetime == nil {
		if this.IkeKeyLifetime != nil {
			return false
		}
	} else if this.IkeKeyLifetime == nil {
		return false
	} else if !this.IkeKeyLifetime.Equal(that1.IkeKeyLifetime) {
		return false
	}
	if that1.IkeReauthTimeout == nil {
		if this.IkeReauthTimeout != nil {
			return false
		}
	} else if this.IkeReauthTimeout == nil {
		return false
	} else if !this.IkeReauthTimeout.Equal(that1.IkeReauthTimeout) {
		return false
	}
	return true
}
func (this *GlobalSpecType_UseDefaultKeylifetime) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_UseDefaultKeylifetime)
	if !ok {
		that2, ok := that.(GlobalSpecType_UseDefaultKeylifetime)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UseDefaultKeylifetime.Equal(that1.UseDefaultKeylifetime) {
		return false
	}
	return true
}
func (this *GlobalSpecType_IkeKeylifetimeMinutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_IkeKeylifetimeMinutes)
	if !ok {
		that2, ok := that.(GlobalSpecType_IkeKeylifetimeMinutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IkeKeylifetimeMinutes.Equal(that1.IkeKeylifetimeMinutes) {
		return false
	}
	return true
}
func (this *GlobalSpecType_IkeKeylifetimeHours) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_IkeKeylifetimeHours)
	if !ok {
		that2, ok := that.(GlobalSpecType_IkeKeylifetimeHours)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IkeKeylifetimeHours.Equal(that1.IkeKeylifetimeHours) {
		return false
	}
	return true
}
func (this *GlobalSpecType_ReauthTimeoutHours) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_ReauthTimeoutHours)
	if !ok {
		that2, ok := that.(GlobalSpecType_ReauthTimeoutHours)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ReauthTimeoutHours.Equal(that1.ReauthTimeoutHours) {
		return false
	}
	return true
}
func (this *GlobalSpecType_ReauthTimeoutDays) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_ReauthTimeoutDays)
	if !ok {
		that2, ok := that.(GlobalSpecType_ReauthTimeoutDays)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ReauthTimeoutDays.Equal(that1.ReauthTimeoutDays) {
		return false
	}
	return true
}
func (this *GlobalSpecType_ReauthDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_ReauthDisabled)
	if !ok {
		that2, ok := that.(GlobalSpecType_ReauthDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ReauthDisabled.Equal(that1.ReauthDisabled) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.EncryptionAlgos) != len(that1.EncryptionAlgos) {
		return false
	}
	for i := range this.EncryptionAlgos {
		if this.EncryptionAlgos[i] != that1.EncryptionAlgos[i] {
			return false
		}
	}
	if len(this.AuthenticationAlgos) != len(that1.AuthenticationAlgos) {
		return false
	}
	for i := range this.AuthenticationAlgos {
		if this.AuthenticationAlgos[i] != that1.AuthenticationAlgos[i] {
			return false
		}
	}
	if len(this.Prf) != len(that1.Prf) {
		return false
	}
	for i := range this.Prf {
		if this.Prf[i] != that1.Prf[i] {
			return false
		}
	}
	if len(this.DhGroup) != len(that1.DhGroup) {
		return false
	}
	for i := range this.DhGroup {
		if this.DhGroup[i] != that1.DhGroup[i] {
			return false
		}
	}
	if that1.IkeKeyLifetime == nil {
		if this.IkeKeyLifetime != nil {
			return false
		}
	} else if this.IkeKeyLifetime == nil {
		return false
	} else if !this.IkeKeyLifetime.Equal(that1.IkeKeyLifetime) {
		return false
	}
	if that1.IkeReauthTimeout == nil {
		if this.IkeReauthTimeout != nil {
			return false
		}
	} else if this.IkeReauthTimeout == nil {
		return false
	} else if !this.IkeReauthTimeout.Equal(that1.IkeReauthTimeout) {
		return false
	}
	return true
}
func (this *CreateSpecType_UseDefaultKeylifetime) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_UseDefaultKeylifetime)
	if !ok {
		that2, ok := that.(CreateSpecType_UseDefaultKeylifetime)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UseDefaultKeylifetime.Equal(that1.UseDefaultKeylifetime) {
		return false
	}
	return true
}
func (this *CreateSpecType_IkeKeylifetimeMinutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_IkeKeylifetimeMinutes)
	if !ok {
		that2, ok := that.(CreateSpecType_IkeKeylifetimeMinutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IkeKeylifetimeMinutes.Equal(that1.IkeKeylifetimeMinutes) {
		return false
	}
	return true
}
func (this *CreateSpecType_IkeKeylifetimeHours) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_IkeKeylifetimeHours)
	if !ok {
		that2, ok := that.(CreateSpecType_IkeKeylifetimeHours)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IkeKeylifetimeHours.Equal(that1.IkeKeylifetimeHours) {
		return false
	}
	return true
}
func (this *CreateSpecType_ReauthTimeoutHours) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_ReauthTimeoutHours)
	if !ok {
		that2, ok := that.(CreateSpecType_ReauthTimeoutHours)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ReauthTimeoutHours.Equal(that1.ReauthTimeoutHours) {
		return false
	}
	return true
}
func (this *CreateSpecType_ReauthTimeoutDays) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_ReauthTimeoutDays)
	if !ok {
		that2, ok := that.(CreateSpecType_ReauthTimeoutDays)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ReauthTimeoutDays.Equal(that1.ReauthTimeoutDays) {
		return false
	}
	return true
}
func (this *CreateSpecType_ReauthDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_ReauthDisabled)
	if !ok {
		that2, ok := that.(CreateSpecType_ReauthDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ReauthDisabled.Equal(that1.ReauthDisabled) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.EncryptionAlgos) != len(that1.EncryptionAlgos) {
		return false
	}
	for i := range this.EncryptionAlgos {
		if this.EncryptionAlgos[i] != that1.EncryptionAlgos[i] {
			return false
		}
	}
	if len(this.AuthenticationAlgos) != len(that1.AuthenticationAlgos) {
		return false
	}
	for i := range this.AuthenticationAlgos {
		if this.AuthenticationAlgos[i] != that1.AuthenticationAlgos[i] {
			return false
		}
	}
	if len(this.Prf) != len(that1.Prf) {
		return false
	}
	for i := range this.Prf {
		if this.Prf[i] != that1.Prf[i] {
			return false
		}
	}
	if len(this.DhGroup) != len(that1.DhGroup) {
		return false
	}
	for i := range this.DhGroup {
		if this.DhGroup[i] != that1.DhGroup[i] {
			return false
		}
	}
	if that1.IkeKeyLifetime == nil {
		if this.IkeKeyLifetime != nil {
			return false
		}
	} else if this.IkeKeyLifetime == nil {
		return false
	} else if !this.IkeKeyLifetime.Equal(that1.IkeKeyLifetime) {
		return false
	}
	if that1.IkeReauthTimeout == nil {
		if this.IkeReauthTimeout != nil {
			return false
		}
	} else if this.IkeReauthTimeout == nil {
		return false
	} else if !this.IkeReauthTimeout.Equal(that1.IkeReauthTimeout) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_UseDefaultKeylifetime) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_UseDefaultKeylifetime)
	if !ok {
		that2, ok := that.(ReplaceSpecType_UseDefaultKeylifetime)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UseDefaultKeylifetime.Equal(that1.UseDefaultKeylifetime) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_IkeKeylifetimeMinutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_IkeKeylifetimeMinutes)
	if !ok {
		that2, ok := that.(ReplaceSpecType_IkeKeylifetimeMinutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IkeKeylifetimeMinutes.Equal(that1.IkeKeylifetimeMinutes) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_IkeKeylifetimeHours) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_IkeKeylifetimeHours)
	if !ok {
		that2, ok := that.(ReplaceSpecType_IkeKeylifetimeHours)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IkeKeylifetimeHours.Equal(that1.IkeKeylifetimeHours) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_ReauthTimeoutHours) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_ReauthTimeoutHours)
	if !ok {
		that2, ok := that.(ReplaceSpecType_ReauthTimeoutHours)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ReauthTimeoutHours.Equal(that1.ReauthTimeoutHours) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_ReauthTimeoutDays) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_ReauthTimeoutDays)
	if !ok {
		that2, ok := that.(ReplaceSpecType_ReauthTimeoutDays)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ReauthTimeoutDays.Equal(that1.ReauthTimeoutDays) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_ReauthDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_ReauthDisabled)
	if !ok {
		that2, ok := that.(ReplaceSpecType_ReauthDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ReauthDisabled.Equal(that1.ReauthDisabled) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.EncryptionAlgos) != len(that1.EncryptionAlgos) {
		return false
	}
	for i := range this.EncryptionAlgos {
		if this.EncryptionAlgos[i] != that1.EncryptionAlgos[i] {
			return false
		}
	}
	if len(this.AuthenticationAlgos) != len(that1.AuthenticationAlgos) {
		return false
	}
	for i := range this.AuthenticationAlgos {
		if this.AuthenticationAlgos[i] != that1.AuthenticationAlgos[i] {
			return false
		}
	}
	if len(this.Prf) != len(that1.Prf) {
		return false
	}
	for i := range this.Prf {
		if this.Prf[i] != that1.Prf[i] {
			return false
		}
	}
	if len(this.DhGroup) != len(that1.DhGroup) {
		return false
	}
	for i := range this.DhGroup {
		if this.DhGroup[i] != that1.DhGroup[i] {
			return false
		}
	}
	if that1.IkeKeyLifetime == nil {
		if this.IkeKeyLifetime != nil {
			return false
		}
	} else if this.IkeKeyLifetime == nil {
		return false
	} else if !this.IkeKeyLifetime.Equal(that1.IkeKeyLifetime) {
		return false
	}
	if that1.IkeReauthTimeout == nil {
		if this.IkeReauthTimeout != nil {
			return false
		}
	} else if this.IkeReauthTimeout == nil {
		return false
	} else if !this.IkeReauthTimeout.Equal(that1.IkeReauthTimeout) {
		return false
	}
	return true
}
func (this *GetSpecType_UseDefaultKeylifetime) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_UseDefaultKeylifetime)
	if !ok {
		that2, ok := that.(GetSpecType_UseDefaultKeylifetime)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UseDefaultKeylifetime.Equal(that1.UseDefaultKeylifetime) {
		return false
	}
	return true
}
func (this *GetSpecType_IkeKeylifetimeMinutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_IkeKeylifetimeMinutes)
	if !ok {
		that2, ok := that.(GetSpecType_IkeKeylifetimeMinutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IkeKeylifetimeMinutes.Equal(that1.IkeKeylifetimeMinutes) {
		return false
	}
	return true
}
func (this *GetSpecType_IkeKeylifetimeHours) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_IkeKeylifetimeHours)
	if !ok {
		that2, ok := that.(GetSpecType_IkeKeylifetimeHours)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IkeKeylifetimeHours.Equal(that1.IkeKeylifetimeHours) {
		return false
	}
	return true
}
func (this *GetSpecType_ReauthTimeoutHours) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_ReauthTimeoutHours)
	if !ok {
		that2, ok := that.(GetSpecType_ReauthTimeoutHours)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ReauthTimeoutHours.Equal(that1.ReauthTimeoutHours) {
		return false
	}
	return true
}
func (this *GetSpecType_ReauthTimeoutDays) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_ReauthTimeoutDays)
	if !ok {
		that2, ok := that.(GetSpecType_ReauthTimeoutDays)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ReauthTimeoutDays.Equal(that1.ReauthTimeoutDays) {
		return false
	}
	return true
}
func (this *GetSpecType_ReauthDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_ReauthDisabled)
	if !ok {
		that2, ok := that.(GetSpecType_ReauthDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ReauthDisabled.Equal(that1.ReauthDisabled) {
		return false
	}
	return true
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&ike1.GlobalSpecType{")
	s = append(s, "EncryptionAlgos: "+fmt.Sprintf("%#v", this.EncryptionAlgos)+",\n")
	s = append(s, "AuthenticationAlgos: "+fmt.Sprintf("%#v", this.AuthenticationAlgos)+",\n")
	s = append(s, "Prf: "+fmt.Sprintf("%#v", this.Prf)+",\n")
	s = append(s, "DhGroup: "+fmt.Sprintf("%#v", this.DhGroup)+",\n")
	if this.IkeKeyLifetime != nil {
		s = append(s, "IkeKeyLifetime: "+fmt.Sprintf("%#v", this.IkeKeyLifetime)+",\n")
	}
	if this.IkeReauthTimeout != nil {
		s = append(s, "IkeReauthTimeout: "+fmt.Sprintf("%#v", this.IkeReauthTimeout)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_UseDefaultKeylifetime) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ike1.GlobalSpecType_UseDefaultKeylifetime{` +
		`UseDefaultKeylifetime:` + fmt.Sprintf("%#v", this.UseDefaultKeylifetime) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_IkeKeylifetimeMinutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ike1.GlobalSpecType_IkeKeylifetimeMinutes{` +
		`IkeKeylifetimeMinutes:` + fmt.Sprintf("%#v", this.IkeKeylifetimeMinutes) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_IkeKeylifetimeHours) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ike1.GlobalSpecType_IkeKeylifetimeHours{` +
		`IkeKeylifetimeHours:` + fmt.Sprintf("%#v", this.IkeKeylifetimeHours) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_ReauthTimeoutHours) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ike1.GlobalSpecType_ReauthTimeoutHours{` +
		`ReauthTimeoutHours:` + fmt.Sprintf("%#v", this.ReauthTimeoutHours) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_ReauthTimeoutDays) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ike1.GlobalSpecType_ReauthTimeoutDays{` +
		`ReauthTimeoutDays:` + fmt.Sprintf("%#v", this.ReauthTimeoutDays) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_ReauthDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ike1.GlobalSpecType_ReauthDisabled{` +
		`ReauthDisabled:` + fmt.Sprintf("%#v", this.ReauthDisabled) + `}`}, ", ")
	return s
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&ike1.CreateSpecType{")
	s = append(s, "EncryptionAlgos: "+fmt.Sprintf("%#v", this.EncryptionAlgos)+",\n")
	s = append(s, "AuthenticationAlgos: "+fmt.Sprintf("%#v", this.AuthenticationAlgos)+",\n")
	s = append(s, "Prf: "+fmt.Sprintf("%#v", this.Prf)+",\n")
	s = append(s, "DhGroup: "+fmt.Sprintf("%#v", this.DhGroup)+",\n")
	if this.IkeKeyLifetime != nil {
		s = append(s, "IkeKeyLifetime: "+fmt.Sprintf("%#v", this.IkeKeyLifetime)+",\n")
	}
	if this.IkeReauthTimeout != nil {
		s = append(s, "IkeReauthTimeout: "+fmt.Sprintf("%#v", this.IkeReauthTimeout)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType_UseDefaultKeylifetime) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ike1.CreateSpecType_UseDefaultKeylifetime{` +
		`UseDefaultKeylifetime:` + fmt.Sprintf("%#v", this.UseDefaultKeylifetime) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_IkeKeylifetimeMinutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ike1.CreateSpecType_IkeKeylifetimeMinutes{` +
		`IkeKeylifetimeMinutes:` + fmt.Sprintf("%#v", this.IkeKeylifetimeMinutes) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_IkeKeylifetimeHours) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ike1.CreateSpecType_IkeKeylifetimeHours{` +
		`IkeKeylifetimeHours:` + fmt.Sprintf("%#v", this.IkeKeylifetimeHours) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_ReauthTimeoutHours) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ike1.CreateSpecType_ReauthTimeoutHours{` +
		`ReauthTimeoutHours:` + fmt.Sprintf("%#v", this.ReauthTimeoutHours) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_ReauthTimeoutDays) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ike1.CreateSpecType_ReauthTimeoutDays{` +
		`ReauthTimeoutDays:` + fmt.Sprintf("%#v", this.ReauthTimeoutDays) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_ReauthDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ike1.CreateSpecType_ReauthDisabled{` +
		`ReauthDisabled:` + fmt.Sprintf("%#v", this.ReauthDisabled) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&ike1.ReplaceSpecType{")
	s = append(s, "EncryptionAlgos: "+fmt.Sprintf("%#v", this.EncryptionAlgos)+",\n")
	s = append(s, "AuthenticationAlgos: "+fmt.Sprintf("%#v", this.AuthenticationAlgos)+",\n")
	s = append(s, "Prf: "+fmt.Sprintf("%#v", this.Prf)+",\n")
	s = append(s, "DhGroup: "+fmt.Sprintf("%#v", this.DhGroup)+",\n")
	if this.IkeKeyLifetime != nil {
		s = append(s, "IkeKeyLifetime: "+fmt.Sprintf("%#v", this.IkeKeyLifetime)+",\n")
	}
	if this.IkeReauthTimeout != nil {
		s = append(s, "IkeReauthTimeout: "+fmt.Sprintf("%#v", this.IkeReauthTimeout)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType_UseDefaultKeylifetime) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ike1.ReplaceSpecType_UseDefaultKeylifetime{` +
		`UseDefaultKeylifetime:` + fmt.Sprintf("%#v", this.UseDefaultKeylifetime) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_IkeKeylifetimeMinutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ike1.ReplaceSpecType_IkeKeylifetimeMinutes{` +
		`IkeKeylifetimeMinutes:` + fmt.Sprintf("%#v", this.IkeKeylifetimeMinutes) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_IkeKeylifetimeHours) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ike1.ReplaceSpecType_IkeKeylifetimeHours{` +
		`IkeKeylifetimeHours:` + fmt.Sprintf("%#v", this.IkeKeylifetimeHours) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_ReauthTimeoutHours) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ike1.ReplaceSpecType_ReauthTimeoutHours{` +
		`ReauthTimeoutHours:` + fmt.Sprintf("%#v", this.ReauthTimeoutHours) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_ReauthTimeoutDays) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ike1.ReplaceSpecType_ReauthTimeoutDays{` +
		`ReauthTimeoutDays:` + fmt.Sprintf("%#v", this.ReauthTimeoutDays) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_ReauthDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ike1.ReplaceSpecType_ReauthDisabled{` +
		`ReauthDisabled:` + fmt.Sprintf("%#v", this.ReauthDisabled) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&ike1.GetSpecType{")
	s = append(s, "EncryptionAlgos: "+fmt.Sprintf("%#v", this.EncryptionAlgos)+",\n")
	s = append(s, "AuthenticationAlgos: "+fmt.Sprintf("%#v", this.AuthenticationAlgos)+",\n")
	s = append(s, "Prf: "+fmt.Sprintf("%#v", this.Prf)+",\n")
	s = append(s, "DhGroup: "+fmt.Sprintf("%#v", this.DhGroup)+",\n")
	if this.IkeKeyLifetime != nil {
		s = append(s, "IkeKeyLifetime: "+fmt.Sprintf("%#v", this.IkeKeyLifetime)+",\n")
	}
	if this.IkeReauthTimeout != nil {
		s = append(s, "IkeReauthTimeout: "+fmt.Sprintf("%#v", this.IkeReauthTimeout)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_UseDefaultKeylifetime) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ike1.GetSpecType_UseDefaultKeylifetime{` +
		`UseDefaultKeylifetime:` + fmt.Sprintf("%#v", this.UseDefaultKeylifetime) + `}`}, ", ")
	return s
}
func (this *GetSpecType_IkeKeylifetimeMinutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ike1.GetSpecType_IkeKeylifetimeMinutes{` +
		`IkeKeylifetimeMinutes:` + fmt.Sprintf("%#v", this.IkeKeylifetimeMinutes) + `}`}, ", ")
	return s
}
func (this *GetSpecType_IkeKeylifetimeHours) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ike1.GetSpecType_IkeKeylifetimeHours{` +
		`IkeKeylifetimeHours:` + fmt.Sprintf("%#v", this.IkeKeylifetimeHours) + `}`}, ", ")
	return s
}
func (this *GetSpecType_ReauthTimeoutHours) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ike1.GetSpecType_ReauthTimeoutHours{` +
		`ReauthTimeoutHours:` + fmt.Sprintf("%#v", this.ReauthTimeoutHours) + `}`}, ", ")
	return s
}
func (this *GetSpecType_ReauthTimeoutDays) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ike1.GetSpecType_ReauthTimeoutDays{` +
		`ReauthTimeoutDays:` + fmt.Sprintf("%#v", this.ReauthTimeoutDays) + `}`}, ", ")
	return s
}
func (this *GetSpecType_ReauthDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ike1.GetSpecType_ReauthDisabled{` +
		`ReauthDisabled:` + fmt.Sprintf("%#v", this.ReauthDisabled) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IkeReauthTimeout != nil {
		{
			size := m.IkeReauthTimeout.Size()
			i -= size
			if _, err := m.IkeReauthTimeout.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.IkeKeyLifetime != nil {
		{
			size := m.IkeKeyLifetime.Size()
			i -= size
			if _, err := m.IkeKeyLifetime.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.DhGroup) > 0 {
		dAtA2 := make([]byte, len(m.DhGroup)*10)
		var j1 int
		for _, num := range m.DhGroup {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintTypes(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Prf) > 0 {
		dAtA4 := make([]byte, len(m.Prf)*10)
		var j3 int
		for _, num := range m.Prf {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintTypes(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AuthenticationAlgos) > 0 {
		dAtA6 := make([]byte, len(m.AuthenticationAlgos)*10)
		var j5 int
		for _, num := range m.AuthenticationAlgos {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintTypes(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x12
	}
	if len(m.EncryptionAlgos) > 0 {
		dAtA8 := make([]byte, len(m.EncryptionAlgos)*10)
		var j7 int
		for _, num := range m.EncryptionAlgos {
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		i -= j7
		copy(dAtA[i:], dAtA8[:j7])
		i = encodeVarintTypes(dAtA, i, uint64(j7))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType_UseDefaultKeylifetime) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_UseDefaultKeylifetime) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UseDefaultKeylifetime != nil {
		{
			size, err := m.UseDefaultKeylifetime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_IkeKeylifetimeMinutes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_IkeKeylifetimeMinutes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IkeKeylifetimeMinutes != nil {
		{
			size, err := m.IkeKeylifetimeMinutes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_IkeKeylifetimeHours) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_IkeKeylifetimeHours) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IkeKeylifetimeHours != nil {
		{
			size, err := m.IkeKeylifetimeHours.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_ReauthTimeoutHours) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_ReauthTimeoutHours) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReauthTimeoutHours != nil {
		{
			size, err := m.ReauthTimeoutHours.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_ReauthTimeoutDays) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_ReauthTimeoutDays) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReauthTimeoutDays != nil {
		{
			size, err := m.ReauthTimeoutDays.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_ReauthDisabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_ReauthDisabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReauthDisabled != nil {
		{
			size, err := m.ReauthDisabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IkeReauthTimeout != nil {
		{
			size := m.IkeReauthTimeout.Size()
			i -= size
			if _, err := m.IkeReauthTimeout.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.IkeKeyLifetime != nil {
		{
			size := m.IkeKeyLifetime.Size()
			i -= size
			if _, err := m.IkeKeyLifetime.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.DhGroup) > 0 {
		dAtA16 := make([]byte, len(m.DhGroup)*10)
		var j15 int
		for _, num := range m.DhGroup {
			for num >= 1<<7 {
				dAtA16[j15] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j15++
			}
			dAtA16[j15] = uint8(num)
			j15++
		}
		i -= j15
		copy(dAtA[i:], dAtA16[:j15])
		i = encodeVarintTypes(dAtA, i, uint64(j15))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Prf) > 0 {
		dAtA18 := make([]byte, len(m.Prf)*10)
		var j17 int
		for _, num := range m.Prf {
			for num >= 1<<7 {
				dAtA18[j17] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j17++
			}
			dAtA18[j17] = uint8(num)
			j17++
		}
		i -= j17
		copy(dAtA[i:], dAtA18[:j17])
		i = encodeVarintTypes(dAtA, i, uint64(j17))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AuthenticationAlgos) > 0 {
		dAtA20 := make([]byte, len(m.AuthenticationAlgos)*10)
		var j19 int
		for _, num := range m.AuthenticationAlgos {
			for num >= 1<<7 {
				dAtA20[j19] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j19++
			}
			dAtA20[j19] = uint8(num)
			j19++
		}
		i -= j19
		copy(dAtA[i:], dAtA20[:j19])
		i = encodeVarintTypes(dAtA, i, uint64(j19))
		i--
		dAtA[i] = 0x12
	}
	if len(m.EncryptionAlgos) > 0 {
		dAtA22 := make([]byte, len(m.EncryptionAlgos)*10)
		var j21 int
		for _, num := range m.EncryptionAlgos {
			for num >= 1<<7 {
				dAtA22[j21] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j21++
			}
			dAtA22[j21] = uint8(num)
			j21++
		}
		i -= j21
		copy(dAtA[i:], dAtA22[:j21])
		i = encodeVarintTypes(dAtA, i, uint64(j21))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType_UseDefaultKeylifetime) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_UseDefaultKeylifetime) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UseDefaultKeylifetime != nil {
		{
			size, err := m.UseDefaultKeylifetime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_IkeKeylifetimeMinutes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_IkeKeylifetimeMinutes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IkeKeylifetimeMinutes != nil {
		{
			size, err := m.IkeKeylifetimeMinutes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_IkeKeylifetimeHours) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_IkeKeylifetimeHours) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IkeKeylifetimeHours != nil {
		{
			size, err := m.IkeKeylifetimeHours.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_ReauthTimeoutHours) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_ReauthTimeoutHours) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReauthTimeoutHours != nil {
		{
			size, err := m.ReauthTimeoutHours.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_ReauthTimeoutDays) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_ReauthTimeoutDays) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReauthTimeoutDays != nil {
		{
			size, err := m.ReauthTimeoutDays.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_ReauthDisabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_ReauthDisabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReauthDisabled != nil {
		{
			size, err := m.ReauthDisabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IkeReauthTimeout != nil {
		{
			size := m.IkeReauthTimeout.Size()
			i -= size
			if _, err := m.IkeReauthTimeout.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.IkeKeyLifetime != nil {
		{
			size := m.IkeKeyLifetime.Size()
			i -= size
			if _, err := m.IkeKeyLifetime.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.DhGroup) > 0 {
		dAtA30 := make([]byte, len(m.DhGroup)*10)
		var j29 int
		for _, num := range m.DhGroup {
			for num >= 1<<7 {
				dAtA30[j29] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j29++
			}
			dAtA30[j29] = uint8(num)
			j29++
		}
		i -= j29
		copy(dAtA[i:], dAtA30[:j29])
		i = encodeVarintTypes(dAtA, i, uint64(j29))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Prf) > 0 {
		dAtA32 := make([]byte, len(m.Prf)*10)
		var j31 int
		for _, num := range m.Prf {
			for num >= 1<<7 {
				dAtA32[j31] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j31++
			}
			dAtA32[j31] = uint8(num)
			j31++
		}
		i -= j31
		copy(dAtA[i:], dAtA32[:j31])
		i = encodeVarintTypes(dAtA, i, uint64(j31))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AuthenticationAlgos) > 0 {
		dAtA34 := make([]byte, len(m.AuthenticationAlgos)*10)
		var j33 int
		for _, num := range m.AuthenticationAlgos {
			for num >= 1<<7 {
				dAtA34[j33] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j33++
			}
			dAtA34[j33] = uint8(num)
			j33++
		}
		i -= j33
		copy(dAtA[i:], dAtA34[:j33])
		i = encodeVarintTypes(dAtA, i, uint64(j33))
		i--
		dAtA[i] = 0x12
	}
	if len(m.EncryptionAlgos) > 0 {
		dAtA36 := make([]byte, len(m.EncryptionAlgos)*10)
		var j35 int
		for _, num := range m.EncryptionAlgos {
			for num >= 1<<7 {
				dAtA36[j35] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j35++
			}
			dAtA36[j35] = uint8(num)
			j35++
		}
		i -= j35
		copy(dAtA[i:], dAtA36[:j35])
		i = encodeVarintTypes(dAtA, i, uint64(j35))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType_UseDefaultKeylifetime) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_UseDefaultKeylifetime) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UseDefaultKeylifetime != nil {
		{
			size, err := m.UseDefaultKeylifetime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_IkeKeylifetimeMinutes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_IkeKeylifetimeMinutes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IkeKeylifetimeMinutes != nil {
		{
			size, err := m.IkeKeylifetimeMinutes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_IkeKeylifetimeHours) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_IkeKeylifetimeHours) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IkeKeylifetimeHours != nil {
		{
			size, err := m.IkeKeylifetimeHours.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_ReauthTimeoutHours) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_ReauthTimeoutHours) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReauthTimeoutHours != nil {
		{
			size, err := m.ReauthTimeoutHours.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_ReauthTimeoutDays) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_ReauthTimeoutDays) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReauthTimeoutDays != nil {
		{
			size, err := m.ReauthTimeoutDays.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_ReauthDisabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_ReauthDisabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReauthDisabled != nil {
		{
			size, err := m.ReauthDisabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IkeReauthTimeout != nil {
		{
			size := m.IkeReauthTimeout.Size()
			i -= size
			if _, err := m.IkeReauthTimeout.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.IkeKeyLifetime != nil {
		{
			size := m.IkeKeyLifetime.Size()
			i -= size
			if _, err := m.IkeKeyLifetime.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.DhGroup) > 0 {
		dAtA44 := make([]byte, len(m.DhGroup)*10)
		var j43 int
		for _, num := range m.DhGroup {
			for num >= 1<<7 {
				dAtA44[j43] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j43++
			}
			dAtA44[j43] = uint8(num)
			j43++
		}
		i -= j43
		copy(dAtA[i:], dAtA44[:j43])
		i = encodeVarintTypes(dAtA, i, uint64(j43))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Prf) > 0 {
		dAtA46 := make([]byte, len(m.Prf)*10)
		var j45 int
		for _, num := range m.Prf {
			for num >= 1<<7 {
				dAtA46[j45] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j45++
			}
			dAtA46[j45] = uint8(num)
			j45++
		}
		i -= j45
		copy(dAtA[i:], dAtA46[:j45])
		i = encodeVarintTypes(dAtA, i, uint64(j45))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AuthenticationAlgos) > 0 {
		dAtA48 := make([]byte, len(m.AuthenticationAlgos)*10)
		var j47 int
		for _, num := range m.AuthenticationAlgos {
			for num >= 1<<7 {
				dAtA48[j47] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j47++
			}
			dAtA48[j47] = uint8(num)
			j47++
		}
		i -= j47
		copy(dAtA[i:], dAtA48[:j47])
		i = encodeVarintTypes(dAtA, i, uint64(j47))
		i--
		dAtA[i] = 0x12
	}
	if len(m.EncryptionAlgos) > 0 {
		dAtA50 := make([]byte, len(m.EncryptionAlgos)*10)
		var j49 int
		for _, num := range m.EncryptionAlgos {
			for num >= 1<<7 {
				dAtA50[j49] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j49++
			}
			dAtA50[j49] = uint8(num)
			j49++
		}
		i -= j49
		copy(dAtA[i:], dAtA50[:j49])
		i = encodeVarintTypes(dAtA, i, uint64(j49))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType_UseDefaultKeylifetime) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_UseDefaultKeylifetime) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UseDefaultKeylifetime != nil {
		{
			size, err := m.UseDefaultKeylifetime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_IkeKeylifetimeMinutes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_IkeKeylifetimeMinutes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IkeKeylifetimeMinutes != nil {
		{
			size, err := m.IkeKeylifetimeMinutes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_IkeKeylifetimeHours) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_IkeKeylifetimeHours) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IkeKeylifetimeHours != nil {
		{
			size, err := m.IkeKeylifetimeHours.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_ReauthTimeoutHours) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_ReauthTimeoutHours) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReauthTimeoutHours != nil {
		{
			size, err := m.ReauthTimeoutHours.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_ReauthTimeoutDays) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_ReauthTimeoutDays) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReauthTimeoutDays != nil {
		{
			size, err := m.ReauthTimeoutDays.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_ReauthDisabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_ReauthDisabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReauthDisabled != nil {
		{
			size, err := m.ReauthDisabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EncryptionAlgos) > 0 {
		l = 0
		for _, e := range m.EncryptionAlgos {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	if len(m.AuthenticationAlgos) > 0 {
		l = 0
		for _, e := range m.AuthenticationAlgos {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	if len(m.Prf) > 0 {
		l = 0
		for _, e := range m.Prf {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	if len(m.DhGroup) > 0 {
		l = 0
		for _, e := range m.DhGroup {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	if m.IkeKeyLifetime != nil {
		n += m.IkeKeyLifetime.Size()
	}
	if m.IkeReauthTimeout != nil {
		n += m.IkeReauthTimeout.Size()
	}
	return n
}

func (m *GlobalSpecType_UseDefaultKeylifetime) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UseDefaultKeylifetime != nil {
		l = m.UseDefaultKeylifetime.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_IkeKeylifetimeMinutes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IkeKeylifetimeMinutes != nil {
		l = m.IkeKeylifetimeMinutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_IkeKeylifetimeHours) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IkeKeylifetimeHours != nil {
		l = m.IkeKeylifetimeHours.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_ReauthTimeoutHours) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReauthTimeoutHours != nil {
		l = m.ReauthTimeoutHours.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_ReauthTimeoutDays) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReauthTimeoutDays != nil {
		l = m.ReauthTimeoutDays.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_ReauthDisabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReauthDisabled != nil {
		l = m.ReauthDisabled.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EncryptionAlgos) > 0 {
		l = 0
		for _, e := range m.EncryptionAlgos {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	if len(m.AuthenticationAlgos) > 0 {
		l = 0
		for _, e := range m.AuthenticationAlgos {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	if len(m.Prf) > 0 {
		l = 0
		for _, e := range m.Prf {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	if len(m.DhGroup) > 0 {
		l = 0
		for _, e := range m.DhGroup {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	if m.IkeKeyLifetime != nil {
		n += m.IkeKeyLifetime.Size()
	}
	if m.IkeReauthTimeout != nil {
		n += m.IkeReauthTimeout.Size()
	}
	return n
}

func (m *CreateSpecType_UseDefaultKeylifetime) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UseDefaultKeylifetime != nil {
		l = m.UseDefaultKeylifetime.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_IkeKeylifetimeMinutes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IkeKeylifetimeMinutes != nil {
		l = m.IkeKeylifetimeMinutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_IkeKeylifetimeHours) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IkeKeylifetimeHours != nil {
		l = m.IkeKeylifetimeHours.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_ReauthTimeoutHours) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReauthTimeoutHours != nil {
		l = m.ReauthTimeoutHours.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_ReauthTimeoutDays) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReauthTimeoutDays != nil {
		l = m.ReauthTimeoutDays.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_ReauthDisabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReauthDisabled != nil {
		l = m.ReauthDisabled.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EncryptionAlgos) > 0 {
		l = 0
		for _, e := range m.EncryptionAlgos {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	if len(m.AuthenticationAlgos) > 0 {
		l = 0
		for _, e := range m.AuthenticationAlgos {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	if len(m.Prf) > 0 {
		l = 0
		for _, e := range m.Prf {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	if len(m.DhGroup) > 0 {
		l = 0
		for _, e := range m.DhGroup {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	if m.IkeKeyLifetime != nil {
		n += m.IkeKeyLifetime.Size()
	}
	if m.IkeReauthTimeout != nil {
		n += m.IkeReauthTimeout.Size()
	}
	return n
}

func (m *ReplaceSpecType_UseDefaultKeylifetime) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UseDefaultKeylifetime != nil {
		l = m.UseDefaultKeylifetime.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_IkeKeylifetimeMinutes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IkeKeylifetimeMinutes != nil {
		l = m.IkeKeylifetimeMinutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_IkeKeylifetimeHours) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IkeKeylifetimeHours != nil {
		l = m.IkeKeylifetimeHours.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_ReauthTimeoutHours) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReauthTimeoutHours != nil {
		l = m.ReauthTimeoutHours.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_ReauthTimeoutDays) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReauthTimeoutDays != nil {
		l = m.ReauthTimeoutDays.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_ReauthDisabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReauthDisabled != nil {
		l = m.ReauthDisabled.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EncryptionAlgos) > 0 {
		l = 0
		for _, e := range m.EncryptionAlgos {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	if len(m.AuthenticationAlgos) > 0 {
		l = 0
		for _, e := range m.AuthenticationAlgos {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	if len(m.Prf) > 0 {
		l = 0
		for _, e := range m.Prf {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	if len(m.DhGroup) > 0 {
		l = 0
		for _, e := range m.DhGroup {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	if m.IkeKeyLifetime != nil {
		n += m.IkeKeyLifetime.Size()
	}
	if m.IkeReauthTimeout != nil {
		n += m.IkeReauthTimeout.Size()
	}
	return n
}

func (m *GetSpecType_UseDefaultKeylifetime) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UseDefaultKeylifetime != nil {
		l = m.UseDefaultKeylifetime.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_IkeKeylifetimeMinutes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IkeKeylifetimeMinutes != nil {
		l = m.IkeKeylifetimeMinutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_IkeKeylifetimeHours) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IkeKeylifetimeHours != nil {
		l = m.IkeKeylifetimeHours.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_ReauthTimeoutHours) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReauthTimeoutHours != nil {
		l = m.ReauthTimeoutHours.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_ReauthTimeoutDays) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReauthTimeoutDays != nil {
		l = m.ReauthTimeoutDays.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_ReauthDisabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReauthDisabled != nil {
		l = m.ReauthDisabled.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`EncryptionAlgos:` + fmt.Sprintf("%v", this.EncryptionAlgos) + `,`,
		`AuthenticationAlgos:` + fmt.Sprintf("%v", this.AuthenticationAlgos) + `,`,
		`Prf:` + fmt.Sprintf("%v", this.Prf) + `,`,
		`DhGroup:` + fmt.Sprintf("%v", this.DhGroup) + `,`,
		`IkeKeyLifetime:` + fmt.Sprintf("%v", this.IkeKeyLifetime) + `,`,
		`IkeReauthTimeout:` + fmt.Sprintf("%v", this.IkeReauthTimeout) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_UseDefaultKeylifetime) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_UseDefaultKeylifetime{`,
		`UseDefaultKeylifetime:` + strings.Replace(fmt.Sprintf("%v", this.UseDefaultKeylifetime), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_IkeKeylifetimeMinutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_IkeKeylifetimeMinutes{`,
		`IkeKeylifetimeMinutes:` + strings.Replace(fmt.Sprintf("%v", this.IkeKeylifetimeMinutes), "InputMinutes", "ike_phase1_profile.InputMinutes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_IkeKeylifetimeHours) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_IkeKeylifetimeHours{`,
		`IkeKeylifetimeHours:` + strings.Replace(fmt.Sprintf("%v", this.IkeKeylifetimeHours), "InputHours", "ike_phase1_profile.InputHours", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_ReauthTimeoutHours) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_ReauthTimeoutHours{`,
		`ReauthTimeoutHours:` + strings.Replace(fmt.Sprintf("%v", this.ReauthTimeoutHours), "InputHours", "ike_phase1_profile.InputHours", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_ReauthTimeoutDays) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_ReauthTimeoutDays{`,
		`ReauthTimeoutDays:` + strings.Replace(fmt.Sprintf("%v", this.ReauthTimeoutDays), "InputDays", "ike_phase1_profile.InputDays", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_ReauthDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_ReauthDisabled{`,
		`ReauthDisabled:` + strings.Replace(fmt.Sprintf("%v", this.ReauthDisabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`EncryptionAlgos:` + fmt.Sprintf("%v", this.EncryptionAlgos) + `,`,
		`AuthenticationAlgos:` + fmt.Sprintf("%v", this.AuthenticationAlgos) + `,`,
		`Prf:` + fmt.Sprintf("%v", this.Prf) + `,`,
		`DhGroup:` + fmt.Sprintf("%v", this.DhGroup) + `,`,
		`IkeKeyLifetime:` + fmt.Sprintf("%v", this.IkeKeyLifetime) + `,`,
		`IkeReauthTimeout:` + fmt.Sprintf("%v", this.IkeReauthTimeout) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_UseDefaultKeylifetime) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_UseDefaultKeylifetime{`,
		`UseDefaultKeylifetime:` + strings.Replace(fmt.Sprintf("%v", this.UseDefaultKeylifetime), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_IkeKeylifetimeMinutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_IkeKeylifetimeMinutes{`,
		`IkeKeylifetimeMinutes:` + strings.Replace(fmt.Sprintf("%v", this.IkeKeylifetimeMinutes), "InputMinutes", "ike_phase1_profile.InputMinutes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_IkeKeylifetimeHours) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_IkeKeylifetimeHours{`,
		`IkeKeylifetimeHours:` + strings.Replace(fmt.Sprintf("%v", this.IkeKeylifetimeHours), "InputHours", "ike_phase1_profile.InputHours", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_ReauthTimeoutHours) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_ReauthTimeoutHours{`,
		`ReauthTimeoutHours:` + strings.Replace(fmt.Sprintf("%v", this.ReauthTimeoutHours), "InputHours", "ike_phase1_profile.InputHours", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_ReauthTimeoutDays) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_ReauthTimeoutDays{`,
		`ReauthTimeoutDays:` + strings.Replace(fmt.Sprintf("%v", this.ReauthTimeoutDays), "InputDays", "ike_phase1_profile.InputDays", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_ReauthDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_ReauthDisabled{`,
		`ReauthDisabled:` + strings.Replace(fmt.Sprintf("%v", this.ReauthDisabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`EncryptionAlgos:` + fmt.Sprintf("%v", this.EncryptionAlgos) + `,`,
		`AuthenticationAlgos:` + fmt.Sprintf("%v", this.AuthenticationAlgos) + `,`,
		`Prf:` + fmt.Sprintf("%v", this.Prf) + `,`,
		`DhGroup:` + fmt.Sprintf("%v", this.DhGroup) + `,`,
		`IkeKeyLifetime:` + fmt.Sprintf("%v", this.IkeKeyLifetime) + `,`,
		`IkeReauthTimeout:` + fmt.Sprintf("%v", this.IkeReauthTimeout) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_UseDefaultKeylifetime) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_UseDefaultKeylifetime{`,
		`UseDefaultKeylifetime:` + strings.Replace(fmt.Sprintf("%v", this.UseDefaultKeylifetime), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_IkeKeylifetimeMinutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_IkeKeylifetimeMinutes{`,
		`IkeKeylifetimeMinutes:` + strings.Replace(fmt.Sprintf("%v", this.IkeKeylifetimeMinutes), "InputMinutes", "ike_phase1_profile.InputMinutes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_IkeKeylifetimeHours) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_IkeKeylifetimeHours{`,
		`IkeKeylifetimeHours:` + strings.Replace(fmt.Sprintf("%v", this.IkeKeylifetimeHours), "InputHours", "ike_phase1_profile.InputHours", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_ReauthTimeoutHours) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_ReauthTimeoutHours{`,
		`ReauthTimeoutHours:` + strings.Replace(fmt.Sprintf("%v", this.ReauthTimeoutHours), "InputHours", "ike_phase1_profile.InputHours", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_ReauthTimeoutDays) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_ReauthTimeoutDays{`,
		`ReauthTimeoutDays:` + strings.Replace(fmt.Sprintf("%v", this.ReauthTimeoutDays), "InputDays", "ike_phase1_profile.InputDays", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_ReauthDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_ReauthDisabled{`,
		`ReauthDisabled:` + strings.Replace(fmt.Sprintf("%v", this.ReauthDisabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`EncryptionAlgos:` + fmt.Sprintf("%v", this.EncryptionAlgos) + `,`,
		`AuthenticationAlgos:` + fmt.Sprintf("%v", this.AuthenticationAlgos) + `,`,
		`Prf:` + fmt.Sprintf("%v", this.Prf) + `,`,
		`DhGroup:` + fmt.Sprintf("%v", this.DhGroup) + `,`,
		`IkeKeyLifetime:` + fmt.Sprintf("%v", this.IkeKeyLifetime) + `,`,
		`IkeReauthTimeout:` + fmt.Sprintf("%v", this.IkeReauthTimeout) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_UseDefaultKeylifetime) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_UseDefaultKeylifetime{`,
		`UseDefaultKeylifetime:` + strings.Replace(fmt.Sprintf("%v", this.UseDefaultKeylifetime), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_IkeKeylifetimeMinutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_IkeKeylifetimeMinutes{`,
		`IkeKeylifetimeMinutes:` + strings.Replace(fmt.Sprintf("%v", this.IkeKeylifetimeMinutes), "InputMinutes", "ike_phase1_profile.InputMinutes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_IkeKeylifetimeHours) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_IkeKeylifetimeHours{`,
		`IkeKeylifetimeHours:` + strings.Replace(fmt.Sprintf("%v", this.IkeKeylifetimeHours), "InputHours", "ike_phase1_profile.InputHours", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_ReauthTimeoutHours) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_ReauthTimeoutHours{`,
		`ReauthTimeoutHours:` + strings.Replace(fmt.Sprintf("%v", this.ReauthTimeoutHours), "InputHours", "ike_phase1_profile.InputHours", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_ReauthTimeoutDays) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_ReauthTimeoutDays{`,
		`ReauthTimeoutDays:` + strings.Replace(fmt.Sprintf("%v", this.ReauthTimeoutDays), "InputDays", "ike_phase1_profile.InputDays", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_ReauthDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_ReauthDisabled{`,
		`ReauthDisabled:` + strings.Replace(fmt.Sprintf("%v", this.ReauthDisabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v schema.EncryptionAlgorithm
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= schema.EncryptionAlgorithm(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.EncryptionAlgos = append(m.EncryptionAlgos, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.EncryptionAlgos) == 0 {
					m.EncryptionAlgos = make([]schema.EncryptionAlgorithm, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v schema.EncryptionAlgorithm
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= schema.EncryptionAlgorithm(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.EncryptionAlgos = append(m.EncryptionAlgos, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptionAlgos", wireType)
			}
		case 2:
			if wireType == 0 {
				var v schema.AuthenticationAlgorithm
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= schema.AuthenticationAlgorithm(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AuthenticationAlgos = append(m.AuthenticationAlgos, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.AuthenticationAlgos) == 0 {
					m.AuthenticationAlgos = make([]schema.AuthenticationAlgorithm, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v schema.AuthenticationAlgorithm
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= schema.AuthenticationAlgorithm(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AuthenticationAlgos = append(m.AuthenticationAlgos, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthenticationAlgos", wireType)
			}
		case 3:
			if wireType == 0 {
				var v schema.PseudoRandomFunction
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= schema.PseudoRandomFunction(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Prf = append(m.Prf, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Prf) == 0 {
					m.Prf = make([]schema.PseudoRandomFunction, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v schema.PseudoRandomFunction
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= schema.PseudoRandomFunction(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Prf = append(m.Prf, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Prf", wireType)
			}
		case 4:
			if wireType == 0 {
				var v schema.DHGroup
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= schema.DHGroup(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DhGroup = append(m.DhGroup, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.DhGroup) == 0 {
					m.DhGroup = make([]schema.DHGroup, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v schema.DHGroup
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= schema.DHGroup(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DhGroup = append(m.DhGroup, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DhGroup", wireType)
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseDefaultKeylifetime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IkeKeyLifetime = &GlobalSpecType_UseDefaultKeylifetime{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IkeKeylifetimeMinutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ike_phase1_profile.InputMinutes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IkeKeyLifetime = &GlobalSpecType_IkeKeylifetimeMinutes{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IkeKeylifetimeHours", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ike_phase1_profile.InputHours{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IkeKeyLifetime = &GlobalSpecType_IkeKeylifetimeHours{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReauthTimeoutHours", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ike_phase1_profile.InputHours{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IkeReauthTimeout = &GlobalSpecType_ReauthTimeoutHours{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReauthTimeoutDays", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ike_phase1_profile.InputDays{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IkeReauthTimeout = &GlobalSpecType_ReauthTimeoutDays{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReauthDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IkeReauthTimeout = &GlobalSpecType_ReauthDisabled{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v schema.EncryptionAlgorithm
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= schema.EncryptionAlgorithm(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.EncryptionAlgos = append(m.EncryptionAlgos, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.EncryptionAlgos) == 0 {
					m.EncryptionAlgos = make([]schema.EncryptionAlgorithm, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v schema.EncryptionAlgorithm
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= schema.EncryptionAlgorithm(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.EncryptionAlgos = append(m.EncryptionAlgos, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptionAlgos", wireType)
			}
		case 2:
			if wireType == 0 {
				var v schema.AuthenticationAlgorithm
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= schema.AuthenticationAlgorithm(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AuthenticationAlgos = append(m.AuthenticationAlgos, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.AuthenticationAlgos) == 0 {
					m.AuthenticationAlgos = make([]schema.AuthenticationAlgorithm, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v schema.AuthenticationAlgorithm
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= schema.AuthenticationAlgorithm(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AuthenticationAlgos = append(m.AuthenticationAlgos, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthenticationAlgos", wireType)
			}
		case 3:
			if wireType == 0 {
				var v schema.PseudoRandomFunction
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= schema.PseudoRandomFunction(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Prf = append(m.Prf, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Prf) == 0 {
					m.Prf = make([]schema.PseudoRandomFunction, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v schema.PseudoRandomFunction
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= schema.PseudoRandomFunction(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Prf = append(m.Prf, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Prf", wireType)
			}
		case 4:
			if wireType == 0 {
				var v schema.DHGroup
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= schema.DHGroup(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DhGroup = append(m.DhGroup, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.DhGroup) == 0 {
					m.DhGroup = make([]schema.DHGroup, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v schema.DHGroup
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= schema.DHGroup(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DhGroup = append(m.DhGroup, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DhGroup", wireType)
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseDefaultKeylifetime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IkeKeyLifetime = &CreateSpecType_UseDefaultKeylifetime{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IkeKeylifetimeMinutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ike_phase1_profile.InputMinutes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IkeKeyLifetime = &CreateSpecType_IkeKeylifetimeMinutes{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IkeKeylifetimeHours", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ike_phase1_profile.InputHours{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IkeKeyLifetime = &CreateSpecType_IkeKeylifetimeHours{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReauthTimeoutHours", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ike_phase1_profile.InputHours{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IkeReauthTimeout = &CreateSpecType_ReauthTimeoutHours{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReauthTimeoutDays", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ike_phase1_profile.InputDays{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IkeReauthTimeout = &CreateSpecType_ReauthTimeoutDays{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReauthDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IkeReauthTimeout = &CreateSpecType_ReauthDisabled{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v schema.EncryptionAlgorithm
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= schema.EncryptionAlgorithm(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.EncryptionAlgos = append(m.EncryptionAlgos, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.EncryptionAlgos) == 0 {
					m.EncryptionAlgos = make([]schema.EncryptionAlgorithm, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v schema.EncryptionAlgorithm
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= schema.EncryptionAlgorithm(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.EncryptionAlgos = append(m.EncryptionAlgos, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptionAlgos", wireType)
			}
		case 2:
			if wireType == 0 {
				var v schema.AuthenticationAlgorithm
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= schema.AuthenticationAlgorithm(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AuthenticationAlgos = append(m.AuthenticationAlgos, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.AuthenticationAlgos) == 0 {
					m.AuthenticationAlgos = make([]schema.AuthenticationAlgorithm, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v schema.AuthenticationAlgorithm
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= schema.AuthenticationAlgorithm(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AuthenticationAlgos = append(m.AuthenticationAlgos, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthenticationAlgos", wireType)
			}
		case 3:
			if wireType == 0 {
				var v schema.PseudoRandomFunction
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= schema.PseudoRandomFunction(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Prf = append(m.Prf, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Prf) == 0 {
					m.Prf = make([]schema.PseudoRandomFunction, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v schema.PseudoRandomFunction
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= schema.PseudoRandomFunction(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Prf = append(m.Prf, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Prf", wireType)
			}
		case 4:
			if wireType == 0 {
				var v schema.DHGroup
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= schema.DHGroup(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DhGroup = append(m.DhGroup, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.DhGroup) == 0 {
					m.DhGroup = make([]schema.DHGroup, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v schema.DHGroup
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= schema.DHGroup(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DhGroup = append(m.DhGroup, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DhGroup", wireType)
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseDefaultKeylifetime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IkeKeyLifetime = &ReplaceSpecType_UseDefaultKeylifetime{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IkeKeylifetimeMinutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ike_phase1_profile.InputMinutes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IkeKeyLifetime = &ReplaceSpecType_IkeKeylifetimeMinutes{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IkeKeylifetimeHours", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ike_phase1_profile.InputHours{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IkeKeyLifetime = &ReplaceSpecType_IkeKeylifetimeHours{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReauthTimeoutHours", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ike_phase1_profile.InputHours{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IkeReauthTimeout = &ReplaceSpecType_ReauthTimeoutHours{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReauthTimeoutDays", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ike_phase1_profile.InputDays{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IkeReauthTimeout = &ReplaceSpecType_ReauthTimeoutDays{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReauthDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IkeReauthTimeout = &ReplaceSpecType_ReauthDisabled{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v schema.EncryptionAlgorithm
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= schema.EncryptionAlgorithm(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.EncryptionAlgos = append(m.EncryptionAlgos, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.EncryptionAlgos) == 0 {
					m.EncryptionAlgos = make([]schema.EncryptionAlgorithm, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v schema.EncryptionAlgorithm
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= schema.EncryptionAlgorithm(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.EncryptionAlgos = append(m.EncryptionAlgos, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptionAlgos", wireType)
			}
		case 2:
			if wireType == 0 {
				var v schema.AuthenticationAlgorithm
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= schema.AuthenticationAlgorithm(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AuthenticationAlgos = append(m.AuthenticationAlgos, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.AuthenticationAlgos) == 0 {
					m.AuthenticationAlgos = make([]schema.AuthenticationAlgorithm, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v schema.AuthenticationAlgorithm
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= schema.AuthenticationAlgorithm(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AuthenticationAlgos = append(m.AuthenticationAlgos, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthenticationAlgos", wireType)
			}
		case 3:
			if wireType == 0 {
				var v schema.PseudoRandomFunction
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= schema.PseudoRandomFunction(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Prf = append(m.Prf, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Prf) == 0 {
					m.Prf = make([]schema.PseudoRandomFunction, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v schema.PseudoRandomFunction
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= schema.PseudoRandomFunction(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Prf = append(m.Prf, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Prf", wireType)
			}
		case 4:
			if wireType == 0 {
				var v schema.DHGroup
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= schema.DHGroup(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DhGroup = append(m.DhGroup, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.DhGroup) == 0 {
					m.DhGroup = make([]schema.DHGroup, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v schema.DHGroup
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= schema.DHGroup(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DhGroup = append(m.DhGroup, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DhGroup", wireType)
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseDefaultKeylifetime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IkeKeyLifetime = &GetSpecType_UseDefaultKeylifetime{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IkeKeylifetimeMinutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ike_phase1_profile.InputMinutes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IkeKeyLifetime = &GetSpecType_IkeKeylifetimeMinutes{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IkeKeylifetimeHours", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ike_phase1_profile.InputHours{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IkeKeyLifetime = &GetSpecType_IkeKeylifetimeHours{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReauthTimeoutHours", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ike_phase1_profile.InputHours{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IkeReauthTimeout = &GetSpecType_ReauthTimeoutHours{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReauthTimeoutDays", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ike_phase1_profile.InputDays{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IkeReauthTimeout = &GetSpecType_ReauthTimeoutDays{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReauthDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IkeReauthTimeout = &GetSpecType_ReauthDisabled{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

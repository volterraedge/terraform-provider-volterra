// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package crudapi

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"strings"

	google_protobuf "github.com/gogo/protobuf/types"
	"github.com/grpc-ecosystem/grpc-gateway/runtime"
	multierror "github.com/hashicorp/go-multierror"
	"go.uber.org/zap"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"

	"gopkg.volterra.us/stdlib/client"
	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"
	"gopkg.volterra.us/stdlib/server"
	"gopkg.volterra.us/stdlib/svcfw"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	object "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_host"
)

var (
	_ = fmt.Sprintf("dummy for fmt import use")
)

// augment methods on Object<Oper>Req from api.pb.go

// EntryConverter
func (r *ObjectCreateReq) FromEntry(e db.Entry) {
	r.FromObject(e)
}

func (r *ObjectCreateReq) ToEntry(e db.Entry) {
	r.ToObject(e)
}

// db.Redactor
func (r *ObjectCreateReq) Redact(ctx context.Context) error {
	spec := r.GetSpec()
	if r, ok := interface{}(spec).(db.Redactor); ok {
		return r.Redact(ctx)
	}
	return nil
}

// create setters in object from request for oneof fields

// EntryConverter
func (r *ObjectReplaceReq) FromEntry(e db.Entry) {
	r.FromObject(e)
}

func (r *ObjectReplaceReq) ToEntry(e db.Entry) {
	r.ToObject(e)
}

// db.Redactor
func (r *ObjectReplaceReq) Redact(ctx context.Context) error {
	spec := r.GetSpec()
	if r, ok := interface{}(spec).(db.Redactor); ok {
		return r.Redact(ctx)
	}
	return nil
}

// create setters in object from request for oneof fields

// create setters in response from object for oneof fields

// create setters in response from object for oneof fields

// create setters in response from object for oneof fields

// CLIENT side

func NewObjectCreateReq(e db.Entry) (*ObjectCreateReq, error) {
	r := &ObjectCreateReq{}
	if e == nil {
		return r, nil
	}
	r.FromObject(e)
	return r, nil
}

func NewObjectReplaceReq(e db.Entry) (*ObjectReplaceReq, error) {
	r := &ObjectReplaceReq{}
	if e == nil {
		return r, nil
	}
	r.FromObject(e)
	uid, err := e.Key()
	if err != nil {
		// See if uid can be got from Metadata.Uid
		obj := e.(*object.DBObject)
		uid = obj.GetMetadata().GetUid()

	}
	r.ObjectUid = uid
	return r, nil
}

func NewObjectGetReq(uid string, opts ...server.CRUDCallOpt) *ObjectGetReq {
	ccOpts := server.NewCRUDCallOpts()
	for _, o := range opts {
		o(ccOpts)
	}
	req := &ObjectGetReq{ObjectUid: uid, AllBackrefs: ccOpts.AllBR, BackrefTypes: ccOpts.TypesBR}
	req.IncludeReferredId = ccOpts.IncludeReferredID
	return req
}

func newObjectListReqFrom(cco *server.CrudCallOpts) (*ObjectListReq, error) {
	r := &ObjectListReq{
		TenantFilter:      cco.TenantFilter,
		NamespaceFilter:   cco.NamespaceFilter,
		ReportFields:      cco.ReportFields,
		IncludeReferredId: cco.IncludeReferredID,
	}
	switch len(cco.LabelFilter) {
	case 0:
	case 1:
		r.LabelFilter = cco.LabelFilter[0]
	default:
		return nil, fmt.Errorf("Only one label selector expression can be provided, got %d: %s", len(cco.LabelFilter), cco.LabelFilter)
	}
	if cco.OutResourceVersion != nil {
		r.ResourceVersion = true
	}
	if cco.PageStart != "" {
		r.PageStart = cco.PageStart
	}
	if cco.PageLimit != 0 {
		r.PageLimit = cco.PageLimit
	}
	return r, nil
}

func NewObjectDeleteReq(uid string) *ObjectDeleteReq {
	return &ObjectDeleteReq{ObjectUid: uid}
}

// GRPC Client
type crudAPIGrpcClient struct {
	conn       *grpc.ClientConn
	grpcClient APIClient
}

func (c *crudAPIGrpcClient) Create(ctx context.Context, e db.Entry, opts ...server.CRUDCallOpt) (db.Entry, error) {

	req, err := NewObjectCreateReq(e)
	if err != nil {
		return nil, errors.Wrap(err, "Creating new create request")
	}

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	ctx = client.AddHdrsToCtx(cco.Headers, ctx)

	rsp, err := c.grpcClient.Create(ctx, req, cco.GrpcCallOpts...)
	if rsp != nil {
		if cco.OutCallResponse != nil {
			cco.OutCallResponse.ProtoMsg = rsp
		}
		o := object.NewDBObject(nil)
		rsp.ToObject(o)
		return o, err
	}
	return nil, err

}

func (c *crudAPIGrpcClient) Replace(ctx context.Context, e db.Entry, opts ...server.CRUDCallOpt) error {

	req, err := NewObjectReplaceReq(e)
	if err != nil {
		return errors.Wrap(err, "Creating new replace request")
	}

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	ctx = client.AddHdrsToCtx(cco.Headers, ctx)
	req.ResourceVersion = cco.ResourceVersion

	rsp, err := c.grpcClient.Replace(ctx, req, cco.GrpcCallOpts...)
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return err

}

func (c *crudAPIGrpcClient) GetRaw(ctx context.Context, key string, opts ...server.CRUDCallOpt) (*ObjectGetRsp, error) {
	req := NewObjectGetReq(key, opts...)

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	ctx = client.AddHdrsToCtx(cco.Headers, ctx)

	rsp, err := c.grpcClient.Get(ctx, req, cco.GrpcCallOpts...)
	if err != nil {
		return nil, errors.Wrap(err, "Getting from grpcClient")
	}
	if cco.OutResourceVersion != nil {
		*cco.OutResourceVersion = rsp.ResourceVersion
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return rsp, nil
}

func (c *crudAPIGrpcClient) Get(ctx context.Context, key string, opts ...server.CRUDCallOpt) (db.Entry, error) {

	rsp, err := c.GetRaw(ctx, key, opts...)
	if rsp != nil {
		o := object.NewDBObject(nil)
		rsp.ToObject(o)
		return o, err
	}
	return nil, err

}

func (c *crudAPIGrpcClient) GetDetail(ctx context.Context, key string, nef db.NewEntryFunc, opts ...server.CRUDCallOpt) (*server.GetResponse, error) {

	var merr *multierror.Error
	gRsp, err := c.GetRaw(ctx, key, opts...)
	if err != nil {
		merr = multierror.Append(merr, err)
	}
	if gRsp == nil {
		return nil, errors.ErrOrNil(merr)
	}
	respDetail := server.GetResponse{}
	respDetail.Entry = object.NewDBObject(nil)
	gRsp.ToObject(respDetail.Entry)
	respDetail.BackRefs, err = gRsp.GetBackrefs(nef)
	if err != nil {
		merr = multierror.Append(merr, err)
	}
	return &respDetail, errors.ErrOrNil(merr)

}

func (c *crudAPIGrpcClient) ListIDs(ctx context.Context, opts ...server.CRUDCallOpt) ([]string, error) {

	idSet := []string{}
	listRsp, err := c.List(ctx, opts...)
	if listRsp == nil {
		return idSet, err
	}
	for _, li := range listRsp.GetItems() {
		idSet = append(idSet, li.GetObjectUid())
	}
	return idSet, err

}

func (c *crudAPIGrpcClient) ListItems(ctx context.Context, opts ...server.CRUDCallOpt) ([]server.ListItem, error) {

	sliSet := []server.ListItem{}
	listRsp, err := c.List(ctx, opts...)
	if listRsp == nil {
		return sliSet, err
	}
	for _, li := range listRsp.GetItems() {
		sliSet = append(sliSet, li)
	}
	return sliSet, err

}

func (c *crudAPIGrpcClient) List(ctx context.Context, opts ...server.CRUDCallOpt) (*ObjectListRsp, error) {
	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	req, err := newObjectListReqFrom(cco)
	if err != nil {
		return nil, err
	}
	ctx = client.AddHdrsToCtx(cco.Headers, ctx)
	rsp, err := c.grpcClient.List(ctx, req, cco.GrpcCallOpts...)
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	if cco.OutResourceVersion != nil {
		*cco.OutResourceVersion = rsp.GetMetadata().GetResourceVersion()
	}
	if cco.OutNextPage != nil {
		*cco.OutNextPage = rsp.GetNextPage()
	}
	return rsp, err
}

func (c *crudAPIGrpcClient) ListStream(ctx context.Context, opts ...server.CRUDCallOpt) (server.ListStreamRsp, error) {

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	req, err := newObjectListReqFrom(cco)
	if err != nil {
		return nil, err
	}
	ctx = client.AddHdrsToCtx(cco.Headers, ctx)
	stream, err := c.grpcClient.ListStream(ctx, req, cco.GrpcCallOpts...)
	if err != nil {
		return nil, errors.Wrap(err, "Listing with grpc client")
	}
	lc := &crudAPIGrpcListStreamClient{stream}
	return lc, nil

}

func (c *crudAPIGrpcClient) Delete(ctx context.Context, key string, opts ...server.CRUDCallOpt) error {

	req := NewObjectDeleteReq(key)

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	ctx = client.AddHdrsToCtx(cco.Headers, ctx)

	rsp, err := c.grpcClient.Delete(ctx, req, cco.GrpcCallOpts...)
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return err

}

func NewCRUDAPIGrpcClient(cc *grpc.ClientConn) server.CRUDClient {
	ccl := &crudAPIGrpcClient{cc, NewAPIClient(cc)}
	return ccl
}

type crudAPIGrpcListStreamClient struct {
	stream API_ListStreamClient
}

func (lc *crudAPIGrpcListStreamClient) RecvIDs() ([]string, error) {
	idSet := []string{}
	rsp, err := lc.stream.Recv()
	if rsp == nil {
		return idSet, err
	}
	for _, li := range rsp.GetItems() {
		idSet = append(idSet, li.GetObjectUid())
	}
	return idSet, err
}

func (lc *crudAPIGrpcListStreamClient) RecvItems() ([]server.ListItem, error) {
	sliSet := []server.ListItem{}
	rsp, err := lc.stream.Recv()
	if rsp == nil {
		return sliSet, err
	}
	for _, li := range rsp.GetItems() {
		sliSet = append(sliSet, li)
	}
	return sliSet, err
}

// REST Client
type crudAPIRestClient struct {
	baseURL string
	client  http.Client
}

func (c *crudAPIRestClient) Create(ctx context.Context, e db.Entry, opts ...server.CRUDCallOpt) (db.Entry, error) {

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	if e != nil && cco.RequestJSON != "" {
		return nil, fmt.Errorf("Both entry and WithRequestJSON() specified")
	}
	if e == nil && cco.RequestJSON == "" {
		return nil, fmt.Errorf("Neither entry nor WithRequestJSON() specified")
	}

	// convert ves.io.examplesvc.objectone.crudapi to ves.io.examplesvc.objectone
	sl := strings.Split("ves.io.schema.virtual_host.crudapi", ".")
	t := strings.Join(sl[:len(sl)-1], ".")
	url := fmt.Sprintf("%s/%s/Objects", c.baseURL, t)

	var jsn string
	if cco.RequestJSON != "" {
		jsn = cco.RequestJSON
	} else {
		req, err := NewObjectCreateReq(e)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new create request")
		}
		j, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "RestClient Create")
		}
		jsn = j
	}

	hReq, err := http.NewRequest(http.MethodPost, url, bytes.NewBuffer([]byte(jsn)))
	if err != nil {
		return nil, err
	}
	client.AddHdrsToReq(cco.Headers, hReq)
	hReq.Header.Set("Content-Type", "application/json")

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, err
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := io.ReadAll(rsp.Body)
		if err != nil {
			return nil, fmt.Errorf("Unsuccessful POST at URL %s, status code %d, body %s, err %s", url, rsp.StatusCode, body, err.Error())
		}
		return nil, fmt.Errorf("Unsuccessful POST at URL %s, status code %d, body %s", url, rsp.StatusCode, body)
	}
	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "RestClient create")
	}

	rspo := &ObjectCreateRsp{}
	if err := codec.FromJSON(string(body), rspo); err != nil {
		return nil, errors.Wrap(err, "Converting json to response protobuf message")
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rspo
		cco.OutCallResponse.JSON = string(body)
	}
	o := object.NewDBObject(nil)
	rspo.ToObject(o)
	return o, nil

}

func (c *crudAPIRestClient) Replace(ctx context.Context, e db.Entry, opts ...server.CRUDCallOpt) error {

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	if e != nil && cco.RequestJSON != "" {
		return fmt.Errorf("Both entry and WithRequestJSON() specified")
	}
	if e == nil && cco.RequestJSON == "" {
		return fmt.Errorf("Neither entry nor WithRequestJSON() specified")
	}

	var jsn string
	if cco.RequestJSON != "" {
		jsn = cco.RequestJSON
	} else {
		rReq, err := NewObjectReplaceReq(e)
		if err != nil {
			return errors.Wrap(err, "Creating new replace request")
		}
		rReq.ResourceVersion = cco.ResourceVersion
		j, err := codec.ToJSON(rReq, codec.ToWithUseProtoFieldName())
		if err != nil {
			return errors.Wrap(err, "RestClient Replace")
		}
		jsn = j
	}

	var objUID string
	reqMap := make(map[string]interface{})
	if err := json.Unmarshal([]byte(jsn), &reqMap); err != nil {
		return errors.Wrapf(err, "Unmarshaling ReplaceJSONReq")
	}
	md, ok := reqMap["metadata"].(map[string]interface{})
	if !ok {
		return fmt.Errorf("Request %s does not have 'metadata'", jsn)
	}
	if val, ok := md["uid"].(string); ok {
		objUID = val
	} else {
		return fmt.Errorf("Request %s does not have 'metadata.uid'", jsn)
	}

	// convert ves.io.examplesvc.objectone.crudapi to ves.io.examplesvc.objectone
	sl := strings.Split("ves.io.schema.virtual_host.crudapi", ".")
	t := strings.Join(sl[:len(sl)-1], ".")
	url := fmt.Sprintf("%s/%s/Object/%s", c.baseURL, t, objUID)

	hReq, err := http.NewRequest(http.MethodPut, url, bytes.NewBuffer([]byte(jsn)))
	if err != nil {
		return errors.Wrap(err, "RestClient replace")
	}
	client.AddHdrsToReq(cco.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return errors.Wrap(err, "RestClient replace")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := io.ReadAll(rsp.Body)
		if err != nil {
			return fmt.Errorf("Unsuccessful POST at URL %s, status code %d, body %s, err %s", url, rsp.StatusCode, body, err.Error())
		}
		return fmt.Errorf("Unsuccessful PUT at URL %s, status code %d, body %s", url, rsp.StatusCode, body)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return errors.Wrap(err, "RestClient replace")
	}

	rspo := &ObjectReplaceRsp{}
	if err := codec.FromJSON(string(body), rspo); err != nil {
		return errors.Wrap(err, "Converting json to response protobuf message")
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rspo
		cco.OutCallResponse.JSON = string(body)
	}
	return nil

}

func (c *crudAPIRestClient) GetRaw(ctx context.Context, key string, opts ...server.CRUDCallOpt) (*ObjectGetRsp, error) {
	req := NewObjectGetReq(key, opts...)

	// convert ves.io.examplesvc.objectone.crudapi to ves.io.examplesvc.objectone
	sl := strings.Split("ves.io.schema.virtual_host.crudapi", ".")
	t := strings.Join(sl[:len(sl)-1], ".")
	url := fmt.Sprintf("%s/%s/Object/%s", c.baseURL, t, req.ObjectUid)

	hReq, err := http.NewRequest(http.MethodGet, url, nil)
	if err != nil {
		return nil, err
	}

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	client.AddHdrsToReq(cco.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "RestClient Get")
	}
	defer rsp.Body.Close()
	if rsp.StatusCode != http.StatusOK {
		body, err := io.ReadAll(rsp.Body)
		if err != nil {
			return nil, fmt.Errorf("Unsuccessful POST at URL %s, status code %d, body %s, err %s", url, rsp.StatusCode, body, err.Error())
		}
		return nil, fmt.Errorf("Unsuccessful GET at URL %s, status code %d, body %s", url, rsp.StatusCode, body)
	}
	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "RestClient Get")
	}

	rspo := &ObjectGetRsp{}
	if err := codec.FromJSON(string(body), rspo); err != nil {
		return nil, errors.Wrap(err, "Converting json to response protobuf message")
	}
	if cco.OutResourceVersion != nil {
		*cco.OutResourceVersion = rspo.ResourceVersion
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rspo
		cco.OutCallResponse.JSON = string(body)
	}
	return rspo, nil
}

func (c *crudAPIRestClient) Get(ctx context.Context, key string, opts ...server.CRUDCallOpt) (db.Entry, error) {

	gRsp, err := c.GetRaw(ctx, key, opts...)
	if gRsp != nil {
		o := object.NewDBObject(nil)
		gRsp.ToObject(o)
		return o, err
	}
	return nil, err

}

func (c *crudAPIRestClient) GetDetail(ctx context.Context, key string, nef db.NewEntryFunc, opts ...server.CRUDCallOpt) (*server.GetResponse, error) {

	var merr *multierror.Error
	gRsp, err := c.GetRaw(ctx, key, opts...)
	respDetail := server.GetResponse{}
	if err != nil {
		merr = multierror.Append(merr, err)
	}
	if gRsp != nil {
		respDetail.Entry = object.NewDBObject(nil)
		gRsp.ToObject(respDetail.Entry)
		respDetail.BackRefs, err = gRsp.GetBackrefs(nef)
		if err != nil {
			merr = multierror.Append(merr, err)
		}
		return &respDetail, errors.ErrOrNil(merr)
	}

	return nil, errors.ErrOrNil(merr)

}

func (c *crudAPIRestClient) ListIDs(ctx context.Context, opts ...server.CRUDCallOpt) ([]string, error) {

	idSet := []string{}
	listRsp, err := c.List(ctx, opts...)
	if listRsp == nil {
		return idSet, err
	}
	for _, li := range listRsp.GetItems() {
		idSet = append(idSet, li.GetObjectUid())
	}
	return idSet, err

}

func (c *crudAPIRestClient) ListItems(ctx context.Context, opts ...server.CRUDCallOpt) ([]server.ListItem, error) {

	sliSet := []server.ListItem{}
	listRsp, err := c.List(ctx, opts...)
	if listRsp == nil {
		return sliSet, err
	}
	for _, li := range listRsp.GetItems() {
		sliSet = append(sliSet, li)
	}
	return sliSet, err

}

func (c *crudAPIRestClient) List(ctx context.Context, opts ...server.CRUDCallOpt) (*ObjectListRsp, error) {
	// convert ves.io.examplesvc.objectone.crudapi to ves.io.examplesvc.objectone
	sl := strings.Split("ves.io.schema.virtual_host.crudapi", ".")
	t := strings.Join(sl[:len(sl)-1], ".")
	url := fmt.Sprintf("%s/%s/Objects", c.baseURL, t)

	hReq, err := http.NewRequest(http.MethodGet, url, nil)
	if err != nil {
		return nil, err
	}

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	client.AddHdrsToReq(cco.Headers, hReq)

	q := hReq.URL.Query()
	for _, fVal := range cco.TenantFilter {
		q.Add("tenant_filter", fVal)
	}
	for _, fVal := range cco.NamespaceFilter {
		q.Add("namespace_filter", fVal)
	}
	switch len(cco.LabelFilter) {
	case 0:
	case 1:
		q.Add("label_filter", cco.LabelFilter[0])
	default:
		return nil, fmt.Errorf("Only one label selector expression can be provided, got %d: %s", len(cco.LabelFilter), cco.LabelFilter)
	}

	for _, fName := range cco.ReportFields {
		q.Add("report_fields", fName)
	}

	if cco.IncludeReferredID {
		q.Add("include_referred_id", "true")
	}

	if cco.OutResourceVersion != nil {
		q.Add("resource_version", "true")
	}
	if cco.PageStart != "" {
		q.Add("page_start", cco.PageStart)
	}
	if cco.PageLimit != 0 {
		q.Add("page_limit", fmt.Sprintf("%d", cco.PageLimit))
	}

	hReq.URL.RawQuery += q.Encode()
	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, err
	}
	defer rsp.Body.Close()
	if rsp.StatusCode != http.StatusOK {
		body, err := io.ReadAll(rsp.Body)
		if err != nil {
			return nil, fmt.Errorf("Unsuccessful POST at URL %s, status code %d, body %s, err %s", url, rsp.StatusCode, body, err.Error())
		}
		return nil, fmt.Errorf("Unsuccessful List at URL %s, status code %d, body %s", url, rsp.StatusCode, body)
	}
	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "RestClient List")
	}

	rspo := &ObjectListRsp{}
	if err := codec.FromJSON(string(body), rspo); err != nil {
		return nil, errors.Wrap(err, "Converting json to response protobuf message")
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rspo
		cco.OutCallResponse.JSON = string(body)
	}
	if cco.OutResourceVersion != nil {
		*cco.OutResourceVersion = rspo.GetMetadata().GetResourceVersion()
	}
	if cco.OutNextPage != nil {
		*cco.OutNextPage = rspo.GetNextPage()
	}
	return rspo, nil
}

func (c *crudAPIRestClient) ListStream(ctx context.Context, opts ...server.CRUDCallOpt) (server.ListStreamRsp, error) {
	return nil, fmt.Errorf("Not implemented")
}

func (c *crudAPIRestClient) Delete(ctx context.Context, key string, opts ...server.CRUDCallOpt) error {

	dReq := NewObjectDeleteReq(key)

	// convert ves.io.examplesvc.objectone.crudapi to ves.io.examplesvc.objectone
	sl := strings.Split("ves.io.schema.virtual_host.crudapi", ".")
	t := strings.Join(sl[:len(sl)-1], ".")
	url := fmt.Sprintf("%s/%s/Object/%s", c.baseURL, t, dReq.ObjectUid)

	hReq, err := http.NewRequest(http.MethodDelete, url, nil)
	if err != nil {
		return errors.Wrap(err, "RestClient delete")
	}

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	client.AddHdrsToReq(cco.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return err
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := io.ReadAll(rsp.Body)
		if err != nil {
			return fmt.Errorf("Unsuccessful POST at URL %s, status code %d, body %s, err %s", url, rsp.StatusCode, body, err.Error())
		}
		return fmt.Errorf("Unsuccessful DELETE at URL %s, status code %d, body %s", url, rsp.StatusCode, body)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return errors.Wrap(err, "RestClient delete")
	}

	rspo := &ObjectDeleteRsp{}
	if err := codec.FromJSON(string(body), rspo); err != nil {
		return errors.Wrap(err, "Converting json to response protobuf message")
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rspo
		cco.OutCallResponse.JSON = string(body)
	}
	return nil

}

func NewCRUDAPIRestClient(baseURL string, cl http.Client) server.CRUDClient {
	var bURL string
	if strings.HasSuffix(baseURL, "/") {
		bURL = baseURL[:len(baseURL)-1]
	} else {
		bURL = baseURL
	}
	crcl := &crudAPIRestClient{bURL, cl}
	return crcl
}

// INPROC Client (satisfying APIClient interface)
type APIInprocClient struct {
	svc svcfw.Service
}

func (c *APIInprocClient) Create(ctx context.Context, req *ObjectCreateReq, opts ...grpc.CallOption) (*ObjectCreateRsp, error) {
	ah := c.svc.GetAPIHandler("ves.io.schema.virtual_host.crudapi.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		return nil, fmt.Errorf("No CRUD Server for ves.io.schema.virtual_host.crudapi")
	}

	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.virtual_host.crudapi.API.Create")
	return oah.Create(ctx, req)
}

func (c *APIInprocClient) Replace(ctx context.Context, req *ObjectReplaceReq, opts ...grpc.CallOption) (*ObjectReplaceRsp, error) {
	ah := c.svc.GetAPIHandler("ves.io.schema.virtual_host.crudapi.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		return nil, fmt.Errorf("No CRUD Server for ves.io.schema.virtual_host.crudapi")
	}

	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.virtual_host.crudapi.API.Replace")
	return oah.Replace(ctx, req)
}

func (c *APIInprocClient) Get(ctx context.Context, req *ObjectGetReq, opts ...grpc.CallOption) (*ObjectGetRsp, error) {
	ah := c.svc.GetAPIHandler("ves.io.schema.virtual_host.crudapi.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		return nil, fmt.Errorf("No CRUD Server for ves.io.schema.virtual_host.crudapi")
	}

	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.virtual_host.crudapi.API.Get")
	return oah.Get(ctx, req)
}

func (c *APIInprocClient) List(ctx context.Context, req *ObjectListReq, opts ...grpc.CallOption) (*ObjectListRsp, error) {
	ah := c.svc.GetAPIHandler("ves.io.schema.virtual_host.crudapi.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		return nil, fmt.Errorf("No CRUD Server for ves.io.schema.virtual_host.crudapi")
	}

	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.virtual_host.crudapi.API.List")
	return oah.List(ctx, req)
}

func (c *APIInprocClient) ListStream(ctx context.Context, req *ObjectListReq, opts ...grpc.CallOption) (API_ListStreamClient, error) {
	return nil, fmt.Errorf("ListStream Not implemented")
}

func (c *APIInprocClient) Delete(ctx context.Context, req *ObjectDeleteReq, opts ...grpc.CallOption) (*ObjectDeleteRsp, error) {
	ah := c.svc.GetAPIHandler("ves.io.schema.virtual_host.crudapi.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		return nil, fmt.Errorf("No CRUD Server for ves.io.schema.virtual_host.crudapi")
	}

	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.virtual_host.crudapi.API.Delete")
	return oah.Delete(ctx, req)
}

func NewAPIInprocClient(svc svcfw.Service) APIClient {
	return &APIInprocClient{svc: svc}
}

// INPROC CRUD Client (satisfying server.CRUDClient interface)
type crudAPIInprocClient struct {
	cl APIClient
}

func (c *crudAPIInprocClient) Create(ctx context.Context, e db.Entry, opts ...server.CRUDCallOpt) (db.Entry, error) {

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	req, err := NewObjectCreateReq(e)
	if err != nil {
		return nil, errors.Wrap(err, "Creating new create request")
	}

	rsp, err := c.cl.Create(ctx, req)
	if rsp != nil {
		if cco.OutCallResponse != nil {
			cco.OutCallResponse.ProtoMsg = rsp
		}
		o := object.NewDBObject(nil)
		rsp.ToObject(o)
		return o, err
	}
	return nil, err

}

func (c *crudAPIInprocClient) Replace(ctx context.Context, e db.Entry, opts ...server.CRUDCallOpt) error {

	req, err := NewObjectReplaceReq(e)
	if err != nil {
		return errors.Wrap(err, "Creating new replace request")
	}
	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	req.ResourceVersion = cco.ResourceVersion

	rsp, err := c.cl.Replace(ctx, req)
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return err

}

func (c *crudAPIInprocClient) GetRaw(ctx context.Context, key string, opts ...server.CRUDCallOpt) (*ObjectGetRsp, error) {
	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	req := NewObjectGetReq(key, opts...)
	rsp, err := c.cl.Get(ctx, req)
	if err != nil {
		return nil, err
	}
	if cco.OutResourceVersion != nil {
		*cco.OutResourceVersion = rsp.ResourceVersion
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return rsp, nil
}

func (c *crudAPIInprocClient) Get(ctx context.Context, key string, opts ...server.CRUDCallOpt) (db.Entry, error) {

	rsp, err := c.GetRaw(ctx, key, opts...)
	if rsp != nil {
		o := object.NewDBObject(nil)
		rsp.ToObject(o)
		return o, err
	}
	return nil, err

}

func (c *crudAPIInprocClient) GetDetail(ctx context.Context, key string, nef db.NewEntryFunc, opts ...server.CRUDCallOpt) (*server.GetResponse, error) {

	var merr *multierror.Error
	gRsp, err := c.GetRaw(ctx, key, opts...)
	respDetail := server.GetResponse{}
	if err != nil {
		merr = multierror.Append(merr, err)
	}
	if gRsp != nil {
		respDetail.Entry = object.NewDBObject(nil)
		gRsp.ToObject(respDetail.Entry)
		respDetail.BackRefs, err = gRsp.GetBackrefs(nef)
		if err != nil {
			merr = multierror.Append(merr, err)
		}
		return &respDetail, errors.ErrOrNil(merr)
	}

	return nil, errors.ErrOrNil(merr)

}

func (c *crudAPIInprocClient) ListIDs(ctx context.Context, opts ...server.CRUDCallOpt) ([]string, error) {

	idSet := []string{}
	listRsp, err := c.List(ctx, opts...)
	if listRsp == nil {
		return idSet, err
	}
	for _, li := range listRsp.GetItems() {
		idSet = append(idSet, li.GetObjectUid())
	}
	return idSet, err

}

func (c *crudAPIInprocClient) ListItems(ctx context.Context, opts ...server.CRUDCallOpt) ([]server.ListItem, error) {

	sliSet := []server.ListItem{}
	listRsp, err := c.List(ctx, opts...)
	if listRsp == nil {
		return sliSet, err
	}
	for _, li := range listRsp.GetItems() {
		sliSet = append(sliSet, li)
	}
	return sliSet, err

}

func (c *crudAPIInprocClient) List(ctx context.Context, opts ...server.CRUDCallOpt) (*ObjectListRsp, error) {
	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	req, err := newObjectListReqFrom(cco)
	if err != nil {
		return nil, err
	}
	rsp, err := c.cl.List(ctx, req)
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	if cco.OutResourceVersion != nil {
		*cco.OutResourceVersion = rsp.GetMetadata().GetResourceVersion()
	}
	if cco.OutNextPage != nil {
		*cco.OutNextPage = rsp.GetNextPage()
	}
	return rsp, err
}

func (c *crudAPIInprocClient) ListStream(ctx context.Context, opts ...server.CRUDCallOpt) (server.ListStreamRsp, error) {
	return nil, fmt.Errorf("Not implemented")
}

func (c *crudAPIInprocClient) Delete(ctx context.Context, key string, opts ...server.CRUDCallOpt) error {

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	req := NewObjectDeleteReq(key)
	rsp, err := c.cl.Delete(ctx, req)
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return err

}

func newCRUDAPIInprocClient(svc svcfw.Service) *crudAPIInprocClient {
	return &crudAPIInprocClient{cl: NewAPIInprocClient(svc)}
}

func NewCRUDAPIInprocClient(svc svcfw.Service) server.CRUDClient {
	return newCRUDAPIInprocClient(svc)
}

// SERVER side
type APISrv struct {
	oType   string
	tblName string
	sf      svcfw.Service

	opts *server.CrudServerOpts
	// derived from opts
	apiWrapper *server.DBAPIWrapper
}

func (s *APISrv) validateTransport(ctx context.Context) error {
	if s.sf.IsTransportNotSupported("ves.io.schema.virtual_host.crudapi.API", server.TransportFromContext(ctx)) {
		userMsg := fmt.Sprintf("ves.io.schema.virtual_host.crudapi.API not allowed in transport '%s'", server.TransportFromContext(ctx))
		err := svcfw.NewPermissionDeniedError(userMsg, fmt.Errorf(userMsg))
		return server.GRPCStatusFromError(err).Err()
	}
	return nil
}

func (s *APISrv) Create(ctx context.Context, req *ObjectCreateReq) (*ObjectCreateRsp, error) {
	if err := s.validateTransport(ctx); err != nil {
		return nil, err
	}
	if err := svcfw.FillOneofDefaultChoice(ctx, s.sf, req); err != nil {
		return nil, errors.Wrapf(err, "Filling oneof default choice")
	}
	if s.sf.Config().EnableAPIValidation {
		if rvFn := s.sf.GetRPCValidator("ves.io.schema.virtual_host.crudapi.API.Create"); rvFn != nil {
			if err := rvFn(ctx, req); err != nil {
				if !server.NoReqValidateFromContext(ctx) {
					return nil, errors.Wrap(err, "Validating private create request")
				}
				s.sf.Logger().Warn(server.NoReqValidateAcceptLog, zap.String("rpc_fqn", "ves.io.schema.virtual_host.crudapi.API.Create"), zap.Error(err))
			}
		}
	}
	obj := object.NewDBObject(nil)
	req.ToObject(obj)
	obj.SystemMetadata = &ves_io_schema.SystemObjectMetaType{}

	rsrcReq := &server.ResourceCreateRequest{Entry: obj}
	rsrcRsp, err := s.opts.RsrcHandler.CreateFn(ctx, rsrcReq, s.apiWrapper)
	if err != nil {
		return nil, server.GRPCStatusFromError(errors.Wrap(err, "Create")).Err()
	}
	rsp, err := NewObjectCreateRsp(rsrcRsp.Entry)
	if err != nil {
		return nil, status.Error(codes.ResourceExhausted, errors.Wrap(err, "Create with NewObjectCreateRsp").Error())
	}
	return rsp, nil
}

func (s *APISrv) Replace(ctx context.Context, req *ObjectReplaceReq) (*ObjectReplaceRsp, error) {
	if err := s.validateTransport(ctx); err != nil {
		return nil, err
	}
	if req.Spec == nil {
		return nil, fmt.Errorf("Nil spec in Replace Request")
	}
	if err := svcfw.FillOneofDefaultChoice(ctx, s.sf, req); err != nil {
		return nil, errors.Wrapf(err, "Filling oneof default choice")
	}
	if s.sf.Config().EnableAPIValidation {
		if rvFn := s.sf.GetRPCValidator("ves.io.schema.virtual_host.crudapi.API.Replace"); rvFn != nil {
			if err := rvFn(ctx, req); err != nil {
				if !server.NoReqValidateFromContext(ctx) {
					return nil, errors.Wrap(err, "Validating private replace request")
				}
				s.sf.Logger().Warn(server.NoReqValidateAcceptLog, zap.String("rpc_fqn", "ves.io.schema.virtual_host.crudapi.API.Replace"), zap.Error(err))
			}
		}
	}
	rsrcReq := &server.ResourceReplaceRequest{RequestMsg: req}
	rsrcRsp, err := s.opts.RsrcHandler.ReplaceFn(ctx, rsrcReq, s.apiWrapper)
	if err != nil {
		return nil, server.GRPCStatusFromError(errors.Wrap(err, "Replace")).Err()
	}
	rsp, err := NewObjectReplaceRsp(rsrcRsp.Entry)
	if err != nil {
		return nil, status.Error(codes.ResourceExhausted, errors.Wrap(err, "Replace with NewObjectReplaceRsp").Error())
	}
	return rsp, nil

}

func (s *APISrv) Get(ctx context.Context, req *ObjectGetReq) (*ObjectGetRsp, error) {
	if err := s.validateTransport(ctx); err != nil {
		return nil, err
	}
	if s.sf.Config().EnableAPIValidation {
		if rvFn := s.sf.GetRPCValidator("ves.io.schema.virtual_host.crudapi.API.Get"); rvFn != nil {
			if err := rvFn(ctx, req); err != nil {
				return nil, errors.Wrap(err, "Validating private get request")
			}
		}
	}
	key := req.ToUid()
	rsrcReq := &server.ResourceGetRequest{IsPublic: false, UID: key, AllBackRefs: req.AllBackrefs, BackRefTypes: req.BackrefTypes}
	rsrcReq.OmitReferredID = !req.IncludeReferredId
	rsrcRsp, err := s.opts.RsrcHandler.GetFn(ctx, rsrcReq, s.apiWrapper)
	if err != nil {
		return nil, server.GRPCStatusFromError(errors.Wrap(err, "Get")).Err()
	}
	rsp, err := NewObjectGetRsp(req, rsrcRsp)
	if err != nil {
		return nil, status.Error(codes.ResourceExhausted, errors.Wrap(err, "Get with NewObjectGetRsp").Error())
	}
	return rsp, nil
}

func (s *APISrv) List(ctx context.Context, req *ObjectListReq) (*ObjectListRsp, error) {
	if err := s.validateTransport(ctx); err != nil {
		return nil, err
	}
	if s.sf.Config().EnableAPIValidation {
		if rvFn := s.sf.GetRPCValidator("ves.io.schema.virtual_host.crudapi.API.List"); rvFn != nil {
			if err := rvFn(ctx, req); err != nil {
				return nil, errors.Wrap(err, "Validating private list request")
			}
		}
	}
	var merr error
	rsrcReq := &server.ResourceListRequest{
		TenantFilter:       req.TenantFilter,
		NamespaceFilter:    req.NamespaceFilter,
		LabelFilter:        req.LabelFilter,
		RspStreamed:        false,
		GetResourceVersion: req.ResourceVersion,
		OmitReferredID:     !req.IncludeReferredId,
		PageStart:          req.PageStart,
		PageLimit:          req.PageLimit,
	}
	rsrcRsp, err := s.opts.RsrcHandler.ListFn(ctx, rsrcReq, s.apiWrapper)
	if err != nil {
		merr = multierror.Append(merr, errors.Wrap(err, "List"))
	}
	rsp, err := NewObjectListRsp(req, rsrcRsp.Items)
	if err != nil {
		merr = multierror.Append(merr, err)
	}
	rsp.Metadata.ResourceVersion = rsrcRsp.ResourceVersion
	rsp.NextPage = rsrcRsp.NextPage
	return rsp, merr
}

func (s *APISrv) ListStream(req *ObjectListReq, stream API_ListStreamServer) error {
	var merr *multierror.Error
	rsrcReq := &server.ResourceListRequest{
		TenantFilter:    req.TenantFilter,
		NamespaceFilter: req.NamespaceFilter,
		LabelFilter:     req.LabelFilter,
		RspStreamed:     true,
	}
	rsrcRsp, err := s.opts.RsrcHandler.ListFn(stream.Context(), rsrcReq, s.apiWrapper)
	if err != nil {
		merr = multierror.Append(merr, errors.Wrap(err, "ListStream"))
	}
	streamSvr := &crudAPIListStreamServer{stream}
	for item := range rsrcRsp.ItemsCh {
		if err := streamSvr.SendResource(req, item); err != nil {
			merr = multierror.Append(merr, errors.Wrap(err, "Stream-Send"))
			continue
		}
	}
	return errors.ErrOrNil(merr)
}

func (s *APISrv) Delete(ctx context.Context, req *ObjectDeleteReq) (*ObjectDeleteRsp, error) {
	if err := s.validateTransport(ctx); err != nil {
		return nil, err
	}
	if s.sf.Config().EnableAPIValidation {
		if rvFn := s.sf.GetRPCValidator("ves.io.schema.virtual_host.crudapi.API.Delete"); rvFn != nil {
			if err := rvFn(ctx, req); err != nil {
				if !server.NoReqValidateFromContext(ctx) {
					return nil, errors.Wrap(err, "Validating private delete request")
				}
				s.sf.Logger().Warn(server.NoReqValidateAcceptLog, zap.String("rpc_fqn", "ves.io.schema.virtual_host.crudapi.API.Delete"), zap.Error(err))
			}
		}
	}
	key := req.ToUid()
	rsrcReq := &server.ResourceDeleteRequest{Key: key}
	_, err := s.opts.RsrcHandler.DeleteFn(ctx, rsrcReq, s.apiWrapper)
	if err != nil {
		return nil, server.GRPCStatusFromError(errors.Wrap(err, "Delete")).Err()
	}
	return &ObjectDeleteRsp{}, nil
}

// Assert that APISrv implements both the generated gRPC APIServer interface and the
// stdlib CRUDServer interface
var (
	_ APIServer = &APISrv{}
)

func NewCRUDAPIServer(oType string, tblName string, sf svcfw.Service, opts ...server.CRUDServerOpt) (server.APIHandler, string) {
	// convert ves.io.examplesvc.objectone.Object to
	//         ves.io.examplesvc.objectone.crudapi.API
	sl := strings.Split(oType, ".")
	csOpts := server.NewCRUDServerOpts()
	for _, o := range opts {
		o(csOpts)
	}
	wrapper := server.NewDBAPIWrapper(csOpts.APIWrapperOpts...)
	s := &APISrv{
		oType:      oType,
		tblName:    tblName,
		sf:         sf,
		opts:       csOpts,
		apiWrapper: wrapper,
	}
	return s, fmt.Sprintf("%s.crudapi.API", strings.Join(sl[:len(sl)-1], "."))
}

// implements both stdlib.server.ListStreamServer and API_ListStreamServer
type crudAPIListStreamServer struct {
	stream API_ListStreamServer
}

func (lc *crudAPIListStreamServer) Context() context.Context {
	return lc.stream.Context()
}

func (lc *crudAPIListStreamServer) SendResource(r *ObjectListReq, item *server.ResourceListResponseItem) error {
	lRsp, err := NewObjectListRsp(r, []*server.ResourceListResponseItem{item})
	if err != nil {
		return errors.Wrap(err, "SendResource with NewObjectListRsp")
	}
	if err := lc.Send(lRsp); err != nil {
		return errors.Wrap(err, "ListStreamServer.SendResource()")
	}
	return nil
}

func (lc *crudAPIListStreamServer) Send(o *ObjectListRsp) error {
	if err := lc.stream.Send(o); err != nil {
		return errors.Wrap(err, "ListStreamServer.Send()")
	}
	return nil
}

// Implement GetReq interface
func (r *ObjectGetReq) ToUid() string {
	return r.ObjectUid
}

func (r *ObjectGetReq) GetBackrefParam() (bool, []string) {
	return r.AllBackrefs, r.BackrefTypes
}

// Implement DeleteReq interface
func (r *ObjectDeleteReq) ToUid() string {
	return r.ObjectUid
}

func (r *ObjectCreateRsp) Key() string {
	return r.ObjectUid
}

func (r *ObjectGetRsp) GetBackrefs(ef db.NewEntryFunc) ([]db.Entry, error) {
	brEnts := []db.Entry{}
	bRefs := r.GetEntBackrefs()
	for _, br := range bRefs {
		// convert schema.ves.io/ves.io.examplesvc.objectone.Object to ves.io.examplesvc.objectone.Object
		sl := strings.Split(br.TypeUrl, "/")
		ot := sl[len(sl)-1]
		ent, err := ef(ot, db.OpWithSerializedBytes(br.Value))
		if err != nil {
			return nil, errors.Wrap(err, "NewEntry")
		}
		brEnts = append(brEnts, ent)
	}

	return brEnts, nil
}

// Implement server.ListItem interface on ObjectListRspItem
func (l *ObjectListRspItem) GetObjUid() string {
	return l.ObjectUid
}

// Implement server.SROListItem interface on ObjectListRspItem
func (l *ObjectListRspItem) GetObjTenant() string {
	return l.Tenant
}

func (l *ObjectListRspItem) GetObjNamespace() string {
	return l.Namespace
}

func (l *ObjectListRspItem) GetObjName() string {
	return l.Name
}

func (l *ObjectListRspItem) GetObjLabels() map[string]string {
	return l.Labels
}

// New<oper>Rsp, New<oper>RspFromJSON
func NewObjectCreateRsp(e db.Entry) (*ObjectCreateRsp, error) {
	rspo := &ObjectCreateRsp{}
	switch e.(type) {
	case nil:
		return rspo, nil
	}
	o, ok := e.(*object.DBObject)
	if !ok {
		return nil, fmt.Errorf("Entry not of type *object.DBObject in NewObjectCreateRsp")
	}
	key, err := e.Key()
	if err != nil {
		return nil, errors.Wrap(err, "CreateRsp getting Key()")
	}
	rspo.ObjectUid = key
	rspo.FromObject(o)
	return rspo, nil
}

func NewObjectReplaceRsp(e db.Entry) (*ObjectReplaceRsp, error) {
	rspo := &ObjectReplaceRsp{}
	switch e.(type) {
	case nil:
		return rspo, nil
	}
	o, ok := e.(*object.DBObject)
	if !ok {
		return nil, fmt.Errorf("Entry not of type *object.DBObject in NewObjectReplaceRsp")
	}
	rspo.FromObject(o)
	return rspo, nil
}

func NewObjectGetRsp(r *ObjectGetReq, rsrcRsp *server.ResourceGetResponse) (*ObjectGetRsp, error) {
	rspo := &ObjectGetRsp{}
	e := rsrcRsp.Entry
	brEntries := rsrcRsp.BackRefs
	if e == nil {
		return rspo, nil
	}
	o, ok := e.(*object.DBObject)
	if !ok {
		return nil, fmt.Errorf("entry not of type *object.DBObject in NewObjectGetRsp")
	}
	rspo.ResourceVersion = rsrcRsp.ResourceVersion
	rspo.FromObject(o)
	// Backref
	getBackrefsFunc := func() ([]*google_protobuf.Any, error) {
		var merr *multierror.Error
		var entBackrefs []*google_protobuf.Any
		for _, brEnt := range brEntries {
			brSer, err := brEnt.MarshalBytes()
			if err != nil {
				merr = multierror.Append(merr, err)
				continue
			}
			entBackrefs = append(entBackrefs, &google_protobuf.Any{TypeUrl: "schema.ves.io/" + brEnt.Type(), Value: brSer})
		}
		return entBackrefs, errors.ErrOrNil(merr)
	}
	entBackrefs, err := getBackrefsFunc()
	if err != nil {
		return nil, err
	}
	rspo.EntBackrefs = entBackrefs
	d, err := o.GetDB()
	if err != nil {
		return nil, errors.Wrap(err, "GetRsp")
	}
	statusObjs, err := object.FindObjectStatus(context.Background(), d, o.GetObjUid())
	if err != nil {
		return nil, errors.Wrap(err, "GetRsp")
	}
	rspo.Status = statusObjs
	return rspo, nil
}

func NewObjectListRsp(req *ObjectListReq, rsrcRspItems []*server.ResourceListResponseItem) (*ObjectListRsp, error) {
	if req == nil {
		return nil, fmt.Errorf("Nil ObjectListReq")
	}
	var errs error
	o := &ObjectListRsp{}
	o.Metadata = &ves_io_schema.ListMetaType{}
	o.Uids = []string{}
	o.Items = []*ObjectListRspItem{}
	for _, rsrcItem := range rsrcRspItems {
		if rsrcItem == nil {
			errs = multierror.Append(errs, fmt.Errorf("ResourceListResponseItem is nil"))
			continue
		}
		e := rsrcItem.Entry
		dbObj, ok := e.(*object.DBObject)
		if !ok {
			errs = multierror.Append(errs, fmt.Errorf("Expected %T, got %T: %v", &object.DBObject{}, e, e))
			continue
		}
		key, err := dbObj.Key()
		if err != nil {
			errs = multierror.Append(errs, errors.WithMessagef(err, "Key() %v FAILED", dbObj))
			continue
		}

		tenant := dbObj.GetSystemMetadata().GetTenant()
		namespace := dbObj.GetMetadata().GetNamespace()
		name := dbObj.GetMetadata().GetName()
		labels := dbObj.GetMetadata().GetLabels()

		// TODO: DEPRECATE setting to o.Uids
		o.Uids = append(o.Uids, key)

		item := &ObjectListRspItem{
			ObjectUid: key,
			Tenant:    tenant,
			Namespace: namespace,
			Name:      name,
			Labels:    labels,
		}
		if len(req.ReportFields) > 0 {
			item.FromObject(e)
		}
		o.Items = append(o.Items, item)
	}
	return o, errs
}

func NewObjectDeleteRsp(ec ErrorCode) (*ObjectDeleteRsp, error) {
	return &ObjectDeleteRsp{Err: ec}, nil
}

func RegisterGwAPIHandler(ctx context.Context, mux *runtime.ServeMux, svc interface{}) error {
	s, ok := svc.(svcfw.Service)
	if !ok {
		return fmt.Errorf("svc is not svcfw.Service")
	}
	return RegisterAPIHandlerClient(ctx, mux, NewAPIInprocClient(s))
}

var APISwaggerJSON string = `{
    "swagger": "2.0",
    "info": {
        "title": "ves.io/schema/virtual_host/crudapi/api.proto",
        "version": "version not set"
    },
    "schemes": [
        "http",
        "https"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "tags": [],
    "paths": {
        "/ves.io.schema.virtual_host/Object/{object_uid}": {
            "get": {
                "operationId": "ves.io.schema.virtual_host.crudapi.API.Get",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/crudapiObjectGetRsp"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "object_uid",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "all_backrefs",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "format": "boolean"
                    },
                    {
                        "name": "backref_types",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "include_referred_id",
                        "description": "in case of ref-by-name whether to report referred's uid.",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "format": "boolean"
                    }
                ],
                "tags": [
                    "API"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-virtual_host-crudapi-api-get"
                },
                "x-ves-proto-rpc": "ves.io.schema.virtual_host.crudapi.API.Get"
            },
            "delete": {
                "operationId": "ves.io.schema.virtual_host.crudapi.API.Delete",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/crudapiObjectDeleteRsp"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "object_uid",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "tags": [
                    "API"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-virtual_host-crudapi-api-delete"
                },
                "x-ves-proto-rpc": "ves.io.schema.virtual_host.crudapi.API.Delete"
            },
            "put": {
                "operationId": "ves.io.schema.virtual_host.crudapi.API.Replace",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/crudapiObjectReplaceRsp"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "object_uid",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/crudapiObjectReplaceReq"
                        }
                    }
                ],
                "tags": [
                    "API"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-virtual_host-crudapi-api-replace"
                },
                "x-ves-proto-rpc": "ves.io.schema.virtual_host.crudapi.API.Replace"
            },
            "x-displayname": "",
            "x-ves-object-kind": "virtual_host",
            "x-ves-object-type": "ves.io.schema.virtual_host.Object",
            "x-ves-proto-service": "ves.io.schema.virtual_host.crudapi.API",
            "x-ves-proto-service-type": "AUTO_CRUD"
        },
        "/ves.io.schema.virtual_host/Objects": {
            "get": {
                "operationId": "ves.io.schema.virtual_host.crudapi.API.List",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/crudapiObjectListRsp"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "tenant_filter",
                        "description": "Filters executed on server-side - all types of filters ANDed\nTenants to scope the listing of objects - if empty all tenants considered.",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "namespace_filter",
                        "description": "Namespaces to scope the listing of objects - if empty all namespaces considered.",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "label_filter",
                        "description": "k8s style label selector expression.",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "report_fields",
                        "description": "TODO: currently even if one specified implementation will return all fields.",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "resource_version",
                        "description": "Get the resource_version associated with the list.",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "format": "boolean"
                    },
                    {
                        "name": "include_referred_id",
                        "description": "in case of ref-by-name whether to report referred's uid.",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "format": "boolean"
                    },
                    {
                        "name": "page_start",
                        "description": "The value for PageStart indicating from very first entry. This will be ignored unless page_limit\nis also defined.",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "page_limit",
                        "description": "The maximum number of items to return in a single page. If this is greater than 0, and page_start is unset,\nthe first page will be returned.",
                        "in": "query",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "tags": [
                    "API"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-virtual_host-crudapi-api-list"
                },
                "x-ves-proto-rpc": "ves.io.schema.virtual_host.crudapi.API.List"
            },
            "post": {
                "operationId": "ves.io.schema.virtual_host.crudapi.API.Create",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/crudapiObjectCreateRsp"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/crudapiObjectCreateReq"
                        }
                    }
                ],
                "tags": [
                    "API"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-virtual_host-crudapi-api-create"
                },
                "x-ves-proto-rpc": "ves.io.schema.virtual_host.crudapi.API.Create"
            },
            "x-displayname": "",
            "x-ves-object-kind": "virtual_host",
            "x-ves-object-type": "ves.io.schema.virtual_host.Object",
            "x-ves-proto-service": "ves.io.schema.virtual_host.crudapi.API",
            "x-ves-proto-service-type": "AUTO_CRUD"
        },
        "/ves.io.schema.virtual_host/Objects/stream": {
            "get": {
                "operationId": "ves.io.schema.virtual_host.crudapi.API.ListStream",
                "responses": {
                    "200": {
                        "description": "A successful response.(streaming responses)",
                        "schema": {
                            "$ref": "#/x-stream-definitions/crudapiObjectListRsp"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "tenant_filter",
                        "description": "Filters executed on server-side - all types of filters ANDed\nTenants to scope the listing of objects - if empty all tenants considered.",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "namespace_filter",
                        "description": "Namespaces to scope the listing of objects - if empty all namespaces considered.",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "label_filter",
                        "description": "k8s style label selector expression.",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "report_fields",
                        "description": "TODO: currently even if one specified implementation will return all fields.",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "resource_version",
                        "description": "Get the resource_version associated with the list.",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "format": "boolean"
                    },
                    {
                        "name": "include_referred_id",
                        "description": "in case of ref-by-name whether to report referred's uid.",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "format": "boolean"
                    },
                    {
                        "name": "page_start",
                        "description": "The value for PageStart indicating from very first entry. This will be ignored unless page_limit\nis also defined.",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "page_limit",
                        "description": "The maximum number of items to return in a single page. If this is greater than 0, and page_start is unset,\nthe first page will be returned.",
                        "in": "query",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "tags": [
                    "API"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-virtual_host-crudapi-api-liststream"
                },
                "x-ves-proto-rpc": "ves.io.schema.virtual_host.crudapi.API.ListStream"
            },
            "x-displayname": "",
            "x-ves-object-kind": "virtual_host",
            "x-ves-object-type": "ves.io.schema.virtual_host.Object",
            "x-ves-proto-service": "ves.io.schema.virtual_host.crudapi.API",
            "x-ves-proto-service-type": "AUTO_CRUD"
        },
        "/ves.io.schema.virtual_host/introspect/read/Object/{object_uid}": {
            "get": {
                "operationId": "ves.io.schema.virtual_host.crudapi.API.Get",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/crudapiObjectGetRsp"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "object_uid",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "all_backrefs",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "format": "boolean"
                    },
                    {
                        "name": "backref_types",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "include_referred_id",
                        "description": "in case of ref-by-name whether to report referred's uid.",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "format": "boolean"
                    }
                ],
                "tags": [
                    "API"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-virtual_host-crudapi-api-get"
                },
                "x-ves-proto-rpc": "ves.io.schema.virtual_host.crudapi.API.Get"
            },
            "x-displayname": "",
            "x-ves-object-kind": "virtual_host",
            "x-ves-object-type": "ves.io.schema.virtual_host.Object",
            "x-ves-proto-service": "ves.io.schema.virtual_host.crudapi.API",
            "x-ves-proto-service-type": "AUTO_CRUD"
        },
        "/ves.io.schema.virtual_host/introspect/read/Objects": {
            "get": {
                "operationId": "ves.io.schema.virtual_host.crudapi.API.List",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/crudapiObjectListRsp"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "tenant_filter",
                        "description": "Filters executed on server-side - all types of filters ANDed\nTenants to scope the listing of objects - if empty all tenants considered.",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "namespace_filter",
                        "description": "Namespaces to scope the listing of objects - if empty all namespaces considered.",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "label_filter",
                        "description": "k8s style label selector expression.",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "report_fields",
                        "description": "TODO: currently even if one specified implementation will return all fields.",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "resource_version",
                        "description": "Get the resource_version associated with the list.",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "format": "boolean"
                    },
                    {
                        "name": "include_referred_id",
                        "description": "in case of ref-by-name whether to report referred's uid.",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "format": "boolean"
                    },
                    {
                        "name": "page_start",
                        "description": "The value for PageStart indicating from very first entry. This will be ignored unless page_limit\nis also defined.",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "page_limit",
                        "description": "The maximum number of items to return in a single page. If this is greater than 0, and page_start is unset,\nthe first page will be returned.",
                        "in": "query",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "tags": [
                    "API"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-virtual_host-crudapi-api-list"
                },
                "x-ves-proto-rpc": "ves.io.schema.virtual_host.crudapi.API.List"
            },
            "x-displayname": "",
            "x-ves-object-kind": "virtual_host",
            "x-ves-object-type": "ves.io.schema.virtual_host.Object",
            "x-ves-proto-service": "ves.io.schema.virtual_host.crudapi.API",
            "x-ves-proto-service-type": "AUTO_CRUD"
        },
        "/ves.io.schema.virtual_host/introspect/write/Object/{object_uid}": {
            "delete": {
                "operationId": "ves.io.schema.virtual_host.crudapi.API.Delete",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/crudapiObjectDeleteRsp"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "object_uid",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "tags": [
                    "API"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-virtual_host-crudapi-api-delete"
                },
                "x-ves-proto-rpc": "ves.io.schema.virtual_host.crudapi.API.Delete"
            },
            "put": {
                "operationId": "ves.io.schema.virtual_host.crudapi.API.Replace",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/crudapiObjectReplaceRsp"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "object_uid",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/crudapiObjectReplaceReq"
                        }
                    }
                ],
                "tags": [
                    "API"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-virtual_host-crudapi-api-replace"
                },
                "x-ves-proto-rpc": "ves.io.schema.virtual_host.crudapi.API.Replace"
            },
            "x-displayname": "",
            "x-ves-object-kind": "virtual_host",
            "x-ves-object-type": "ves.io.schema.virtual_host.Object",
            "x-ves-proto-service": "ves.io.schema.virtual_host.crudapi.API",
            "x-ves-proto-service-type": "AUTO_CRUD"
        },
        "/ves.io.schema.virtual_host/introspect/write/Objects": {
            "post": {
                "operationId": "ves.io.schema.virtual_host.crudapi.API.Create",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/crudapiObjectCreateRsp"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/crudapiObjectCreateReq"
                        }
                    }
                ],
                "tags": [
                    "API"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-virtual_host-crudapi-api-create"
                },
                "x-ves-proto-rpc": "ves.io.schema.virtual_host.crudapi.API.Create"
            },
            "x-displayname": "",
            "x-ves-object-kind": "virtual_host",
            "x-ves-object-type": "ves.io.schema.virtual_host.Object",
            "x-ves-proto-service": "ves.io.schema.virtual_host.crudapi.API",
            "x-ves-proto-service-type": "AUTO_CRUD"
        }
    },
    "definitions": {
        "authenticationCookieParams": {
            "type": "object",
            "description": "Specifies different cookie related config parameters for authentication",
            "title": "Cookie Parameters Config",
            "x-displayname": "Cookie Parameters",
            "x-ves-oneof-field-secret_choice": "[\"auth_hmac\",\"kms_key_hmac\"]",
            "x-ves-proto-message": "ves.io.schema.authentication.CookieParams",
            "properties": {
                "auth_hmac": {
                    "description": "Exclusive with [kms_key_hmac]\n HMAC pair provided as primary and secondary key",
                    "title": "HMAC pair",
                    "$ref": "#/definitions/authenticationHMACKeyPair",
                    "x-displayname": "HMAC primary \u0026 secondary key"
                },
                "cookie_expiry": {
                    "type": "integer",
                    "description": " specifies in seconds max duration of the allocated cookie. This maps to “Max-Age” attribute in the session cookie.\n This will act as an expiry duration on the client side after which client will not  be setting the\n cookie as part of the request.\n Default cookie expiry is 3600 seconds\n\nExample: - \"5000\"-\n\nValidation Rules:\n  ves.io.schema.rules.uint32.lte: 86400\n",
                    "title": "cookie expiry",
                    "format": "int64",
                    "x-displayname": "Cookie Expiry duration",
                    "x-ves-example": "5000",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.uint32.lte": "86400"
                    }
                },
                "cookie_refresh_interval": {
                    "type": "integer",
                    "description": " Specifies in seconds refresh interval for session cookie.\n This is used to keep the active user active and reduce re-login.\n When an incoming cookie's session expiry is still valid, and time to expire falls behind this interval,\n re-issue a cookie with new expiry and with the same original session expiry.\n Default refresh interval is 3000 seconds\n\nExample: - \"3600\"-\n\nValidation Rules:\n  ves.io.schema.rules.uint32.lte: 86400\n",
                    "title": "cookie refresh interval",
                    "format": "int64",
                    "x-displayname": "Cookie Refresh Interval",
                    "x-ves-example": "3600",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.uint32.lte": "86400"
                    }
                },
                "kms_key_hmac": {
                    "description": "Exclusive with [auth_hmac]\n HMAC configured using KMS_KEY",
                    "title": "kms_key",
                    "$ref": "#/definitions/authenticationKMSKeyRefType",
                    "x-displayname": "HMAC kms key"
                },
                "session_expiry": {
                    "type": "integer",
                    "description": " specifies in seconds max lifetime of an authenticated session after which the user will be forced to login again.\n Default session expiry is 86400 seconds(24 hours).\n\nExample: - \"36000\"-\n\nValidation Rules:\n  ves.io.schema.rules.uint32.lte: 1296000\n",
                    "title": "session expiry",
                    "format": "int64",
                    "x-displayname": "Session Expiry duration",
                    "x-ves-example": "36000",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.uint32.lte": "1296000"
                    }
                }
            }
        },
        "authenticationHMACKeyPair": {
            "type": "object",
            "description": "HMAC primary and secondary keys to be used for hashing the Cookie.\nEach key also have an associated expiry timestamp, beyond which key is invalid.",
            "title": "HMAC Key Pair",
            "x-displayname": "HMAC Key Pair",
            "x-ves-proto-message": "ves.io.schema.authentication.HMACKeyPair",
            "properties": {
                "prim_key": {
                    "description": " Primary HMAC Key\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "HMAC Primary Key",
                    "$ref": "#/definitions/schemaSecretType",
                    "x-displayname": "HMAC Primary Key",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "prim_key_expiry": {
                    "type": "string",
                    "description": " Primary HMAC Key Expiry time\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "HMAC Primary Key Expiry Time",
                    "format": "date-time",
                    "x-displayname": "HMAC Primary Key Expiry",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "sec_key": {
                    "description": " Secondary HMAC Key\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "HMAC Secondary Key",
                    "$ref": "#/definitions/schemaSecretType",
                    "x-displayname": "HMAC Secondary Key",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "sec_key_expiry": {
                    "type": "string",
                    "description": " Secondary HMAC Key Expiry time\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "HMAC Secondary Key Expiry Time",
                    "format": "date-time",
                    "x-displayname": "HMAC Secondary Key Expiry",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                }
            }
        },
        "authenticationKMSKeyRefType": {
            "type": "object",
            "description": "Reference to KMS Key Object",
            "title": "KMS Key Ref",
            "x-displayname": "KMS Key Reference",
            "x-ves-proto-message": "ves.io.schema.authentication.KMSKeyRefType"
        },
        "clusterLoadbalancerAlgorithm": {
            "type": "string",
            "description": "x-displayName: \"Load Balancer Algorithm\"\nDifferent load balancing algorithms supported\nWhen a connection to a endpoint in an upstream cluster is required, the load balancer uses loadbalancer_algorithm\nto determine which host is selected.\n\n - ROUND_ROBIN: ROUND_ROBIN\n\nx-displayName: \"Round Robin\"\nPolicy in which each healthy/available upstream endpoint is selected in round robin order.\n - LEAST_REQUEST: LEAST_REQUEST\n\nx-displayName: \"Least Request\"\nPolicy in which loadbalancer picks the upstream endpoint which has the fewest active requests\n - RING_HASH: RING_HASH\n\nx-displayName: \"Ring Hash\"\nPolicy implements consistent hashing to upstream endpoints using ring hash of endpoint names\nHash of the incoming request is calculated using request hash policy.\nThe ring/modulo hash load balancer implements consistent hashing to upstream hosts.\nThe algorithm is based on mapping all hosts onto a circle such that the addition or\nremoval of a host from the host set changes only affect 1/N requests. This technique\nis also commonly known as “ketama” hashing. A consistent hashing load balancer is only\neffective when protocol routing is used that specifies a value to hash on. The minimum\nring size governs the replication factor for each host in the ring. For example, if the\nminimum ring size is 1024 and there are 16 hosts, each host will be replicated 64 times.\n - RANDOM: RANDOM\n\nx-displayName: \"Random\"\nPolicy in which each available upstream endpoint is selected in random order.\nThe random load balancer selects a random healthy host. The random load balancer generally\nperforms better than round robin if no health checking policy is configured. Random selection\navoids bias towards the host in the set that comes after a failed host.\n - LB_OVERRIDE: Load Balancer Override\n\nx-displayName: \"Load Balancer Override\"\nHash policy is taken from from the load balancer which is using this origin pool",
            "title": "LoadbalancerAlgorithm",
            "enum": [
                "ROUND_ROBIN",
                "LEAST_REQUEST",
                "RING_HASH",
                "RANDOM",
                "LB_OVERRIDE"
            ],
            "default": "ROUND_ROBIN"
        },
        "crudapiObjectCreateReq": {
            "type": "object",
            "x-ves-proto-message": "ves.io.schema.virtual_host.crudapi.ObjectCreateReq",
            "properties": {
                "metadata": {
                    "$ref": "#/definitions/schemaObjectMetaType"
                },
                "spec": {
                    "$ref": "#/definitions/schemavirtual_hostSpecType"
                },
                "system_metadata": {
                    "$ref": "#/definitions/schemaSystemObjectMetaType"
                }
            }
        },
        "crudapiObjectCreateRsp": {
            "type": "object",
            "x-ves-proto-message": "ves.io.schema.virtual_host.crudapi.ObjectCreateRsp",
            "properties": {
                "err": {
                    "$ref": "#/definitions/virtual_hostcrudapiErrorCode"
                },
                "metadata": {
                    "$ref": "#/definitions/schemaObjectMetaType"
                },
                "object_uid": {
                    "type": "string"
                },
                "spec": {
                    "$ref": "#/definitions/schemavirtual_hostSpecType"
                },
                "system_metadata": {
                    "$ref": "#/definitions/schemaSystemObjectMetaType"
                }
            }
        },
        "crudapiObjectDeleteRsp": {
            "type": "object",
            "x-ves-proto-message": "ves.io.schema.virtual_host.crudapi.ObjectDeleteRsp",
            "properties": {
                "err": {
                    "$ref": "#/definitions/virtual_hostcrudapiErrorCode"
                }
            }
        },
        "crudapiObjectGetRsp": {
            "type": "object",
            "x-ves-proto-message": "ves.io.schema.virtual_host.crudapi.ObjectGetRsp",
            "properties": {
                "ent_backrefs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/protobufAny"
                    }
                },
                "err": {
                    "$ref": "#/definitions/virtual_hostcrudapiErrorCode"
                },
                "metadata": {
                    "$ref": "#/definitions/schemaObjectMetaType"
                },
                "resource_version": {
                    "type": "string"
                },
                "spec": {
                    "$ref": "#/definitions/schemavirtual_hostSpecType"
                },
                "status": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/virtual_hostStatusObject"
                    }
                },
                "system_metadata": {
                    "$ref": "#/definitions/schemaSystemObjectMetaType"
                }
            }
        },
        "crudapiObjectListRsp": {
            "type": "object",
            "x-ves-proto-message": "ves.io.schema.virtual_host.crudapi.ObjectListRsp",
            "properties": {
                "err": {
                    "$ref": "#/definitions/virtual_hostcrudapiErrorCode"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/crudapiObjectListRspItem"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/schemaListMetaType"
                },
                "next_page": {
                    "type": "string",
                    "title": "Will only be set if request included a page_limit and there are more pages beyond the current page"
                },
                "uids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "crudapiObjectListRspItem": {
            "type": "object",
            "x-ves-proto-message": "ves.io.schema.virtual_host.crudapi.ObjectListRspItem",
            "properties": {
                "labels": {
                    "type": "object"
                },
                "metadata": {
                    "title": "If ObjectListReq has any specified report_fields, it will appear in below fields",
                    "$ref": "#/definitions/schemaObjectMetaType"
                },
                "name": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "object_uid": {
                    "type": "string"
                },
                "spec": {
                    "$ref": "#/definitions/schemavirtual_hostSpecType"
                },
                "status": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/virtual_hostStatusObject"
                    }
                },
                "system_metadata": {
                    "$ref": "#/definitions/schemaSystemObjectMetaType"
                },
                "tenant": {
                    "type": "string"
                }
            }
        },
        "crudapiObjectReplaceReq": {
            "type": "object",
            "x-ves-proto-message": "ves.io.schema.virtual_host.crudapi.ObjectReplaceReq",
            "properties": {
                "metadata": {
                    "$ref": "#/definitions/schemaObjectMetaType"
                },
                "object_uid": {
                    "type": "string"
                },
                "resource_version": {
                    "type": "string"
                },
                "spec": {
                    "$ref": "#/definitions/schemavirtual_hostSpecType"
                }
            }
        },
        "crudapiObjectReplaceRsp": {
            "type": "object",
            "x-ves-proto-message": "ves.io.schema.virtual_host.crudapi.ObjectReplaceRsp",
            "properties": {
                "err": {
                    "$ref": "#/definitions/virtual_hostcrudapiErrorCode"
                },
                "metadata": {
                    "$ref": "#/definitions/schemaObjectMetaType"
                },
                "spec": {
                    "$ref": "#/definitions/schemavirtual_hostSpecType"
                },
                "system_metadata": {
                    "$ref": "#/definitions/schemaSystemObjectMetaType"
                }
            }
        },
        "ioschemaDownstreamTlsParamsType": {
            "type": "object",
            "description": "TLS configuration for downstream connections",
            "title": "DownstreamTlsParamsType",
            "x-displayname": "Downstream TLS Parameters",
            "x-ves-proto-message": "ves.io.schema.DownstreamTlsParamsType",
            "properties": {
                "common_params": {
                    "description": " Common TLS parameters used in both upstream and downstream connections",
                    "title": "common_params",
                    "$ref": "#/definitions/schemaTlsParamsType",
                    "x-displayname": "Common Parameters"
                },
                "require_client_certificate": {
                    "type": "boolean",
                    "description": " If true, F5XC will reject connections without a valid client\n certificate.",
                    "title": "require_client_certificate",
                    "format": "boolean",
                    "x-displayname": "Require Client Certificate(enable mTLS)"
                },
                "xfcc_header_elements": {
                    "type": "array",
                    "description": " X-Forwarded-Client-Cert header elements to be set in an mTLS enabled connections.\n If none are defined, the header will not be added.\n\nValidation Rules:\n  ves.io.schema.rules.repeated.items.enum.defined_only: true\n  ves.io.schema.rules.repeated.items.enum.not_in: [0]\n  ves.io.schema.rules.repeated.unique: true\n",
                    "title": "XFCC Header",
                    "items": {
                        "$ref": "#/definitions/schemaXfccElement"
                    },
                    "x-displayname": "XFCC Header",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.repeated.items.enum.defined_only": "true",
                        "ves.io.schema.rules.repeated.items.enum.not_in": "[0]",
                        "ves.io.schema.rules.repeated.unique": "true"
                    }
                }
            }
        },
        "ioschemaObjectRefType": {
            "type": "object",
            "description": "This type establishes a 'direct reference' from one object(the referrer) to another(the referred).\nSuch a reference is in form of tenant/namespace/name for public API and Uid for private API\nThis type of reference is called direct because the relation is explicit and concrete (as opposed\nto selector reference which builds a group based on labels of selectee objects)",
            "title": "ObjectRefType",
            "x-displayname": "Object reference",
            "x-ves-proto-message": "ves.io.schema.ObjectRefType",
            "properties": {
                "kind": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then kind will hold the referred object's kind (e.g. \"route\")\n\nExample: - \"virtual_site\"-",
                    "title": "kind",
                    "x-displayname": "Kind",
                    "x-ves-example": "virtual_site"
                },
                "name": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then name will hold the referred object's(e.g. route's) name.\n\nExample: - \"contactus-route\"-",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "contactus-route"
                },
                "namespace": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then namespace will hold the referred object's(e.g. route's) namespace.\n\nExample: - \"ns1\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "ns1"
                },
                "tenant": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then tenant will hold the referred object's(e.g. route's) tenant.\n\nExample: - \"acmecorp\"-",
                    "title": "tenant",
                    "x-displayname": "Tenant",
                    "x-ves-example": "acmecorp"
                },
                "uid": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then uid will hold the referred object's(e.g. route's) uid.\n\nExample: - \"d15f1fad-4d37-48c0-8706-df1824d76d31\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "d15f1fad-4d37-48c0-8706-df1824d76d31"
                }
            }
        },
        "protobufAny": {
            "type": "object",
            "description": "-Any- contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := \u0026pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an -Any- value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field -@type- which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n-value- which holds the custom JSON in addition to the -@type-\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }",
            "properties": {
                "type_url": {
                    "type": "string",
                    "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n-path/google.protobuf.Duration-). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme -http-, -https-, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, -https- is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than -http-, -https- (or the empty scheme) might be\nused with implementation specific semantics."
                },
                "value": {
                    "type": "string",
                    "description": "Must be a valid serialized protocol buffer of the above specified type.",
                    "format": "byte"
                }
            }
        },
        "protobufNullValue": {
            "type": "string",
            "description": "-NullValue- is a singleton enumeration to represent the null value for the\n-Value- type union.\n\n The JSON representation for -NullValue- is JSON -null-.\n\n - NULL_VALUE: Null value.",
            "enum": [
                "NULL_VALUE"
            ],
            "default": "NULL_VALUE"
        },
        "runtimeStreamError": {
            "type": "object",
            "properties": {
                "details": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/protobufAny"
                    }
                },
                "grpc_code": {
                    "type": "integer",
                    "format": "int32"
                },
                "http_code": {
                    "type": "integer",
                    "format": "int32"
                },
                "http_status": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "schemaAppFirewallRefType": {
            "type": "object",
            "description": "A list of references to the app_firewall configuration objects",
            "title": "AppFirewallRefType",
            "x-displayname": "App Firewall Reference",
            "x-ves-proto-message": "ves.io.schema.AppFirewallRefType",
            "properties": {
                "app_firewall": {
                    "type": "array",
                    "description": " References to an Application Firewall configuration object\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.num_items: 1\n",
                    "title": "app_firewall",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Application Firewall",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.num_items": "1"
                    }
                }
            }
        },
        "schemaBlindfoldSecretInfoType": {
            "type": "object",
            "description": "BlindfoldSecretInfoType specifies information about the Secret managed by F5XC Secret Management",
            "title": "BlindfoldSecretInfoType",
            "x-displayname": "Blindfold Secret",
            "x-ves-displayorder": "3,1,2",
            "x-ves-proto-message": "ves.io.schema.BlindfoldSecretInfoType",
            "properties": {
                "decryption_provider": {
                    "type": "string",
                    "description": " Name of the Secret Management Access object that contains information about the backend Secret Management service.\n\nExample: - \"value\"-",
                    "title": "Decryption Provider",
                    "x-displayname": "Decryption Provider",
                    "x-ves-example": "value"
                },
                "location": {
                    "type": "string",
                    "description": " Location is the uri_ref. It could be in url format for string:///\n Or it could be a path if the store provider is an http/https location\n\nExample: - \"string:///U2VjcmV0SW5mb3JtYXRpb24=\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.uri_ref: true\n",
                    "title": "Location",
                    "x-displayname": "Location",
                    "x-ves-example": "string:///U2VjcmV0SW5mb3JtYXRpb24=",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.uri_ref": "true"
                    }
                },
                "store_provider": {
                    "type": "string",
                    "description": " Name of the Secret Management Access object that contains information about the store to get encrypted bytes\n This field needs to be provided only if the url scheme is not string:///\n\nExample: - \"value\"-",
                    "title": "Store Provider",
                    "x-displayname": "Store Provider",
                    "x-ves-example": "value"
                }
            }
        },
        "schemaBufferConfigType": {
            "type": "object",
            "description": "Some upstream applications are not capable of handling streamed data. This config\nenables buffering the entire request before sending to upstream application. We can\nspecify the maximum buffer size and buffer interval with this config.\n\nBuffering can be enabled and disabled at VirtualHost and Route levels\nRoute level buffer configuration takes precedence.",
            "title": "BufferConfigType",
            "x-displayname": "Buffer Configuration",
            "x-ves-displayorder": "2,3,1",
            "x-ves-proto-message": "ves.io.schema.BufferConfigType",
            "properties": {
                "disabled": {
                    "type": "boolean",
                    "description": " Disable buffering for a particular route. This is useful when virtual-host\n has buffering, but we need to disable it on a specific route.\n The value of this field is ignored for virtual-host",
                    "title": "disable",
                    "format": "boolean",
                    "x-displayname": "Disable"
                },
                "max_request_bytes": {
                    "type": "integer",
                    "description": " The maximum request size that the filter will buffer before the connection\n manager will stop buffering and return a RequestEntityTooLarge (413) response.\n\nExample: - \"2048\"-\n\nValidation Rules:\n  ves.io.schema.rules.uint32.lte: 10485760\n",
                    "title": "max_request_bytes",
                    "format": "int64",
                    "x-displayname": "Max Request Bytes",
                    "x-ves-example": "2048",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.uint32.lte": "10485760"
                    }
                }
            }
        },
        "schemaCertificateParamsType": {
            "type": "object",
            "description": "Certificate Parameters for authentication, TLS ciphers, and trust store",
            "title": "CertificateParamsType",
            "x-displayname": "Certificate Parameters",
            "x-ves-displayorder": "1,2,3,4,5",
            "x-ves-proto-message": "ves.io.schema.CertificateParamsType",
            "properties": {
                "certificates": {
                    "type": "array",
                    "description": " Set of certificates\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.max_len: 32\n  ves.io.schema.rules.string.min_len: 1\n",
                    "title": "certificates",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType",
                        "minimum": 1,
                        "maximum": 32
                    },
                    "x-displayname": "Certificates",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.max_len": "32",
                        "ves.io.schema.rules.string.min_len": "1"
                    }
                },
                "cipher_suites": {
                    "type": "array",
                    "description": " The following list specifies the supported cipher suite\n   TLS_AES_128_GCM_SHA256\n   TLS_AES_256_GCM_SHA384\n   TLS_CHACHA20_POLY1305_SHA256\n   TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n   TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n   TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\n   TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n   TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n   TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\n   TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\n   TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\n   TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\n   TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\n   TLS_RSA_WITH_AES_128_CBC_SHA\n   TLS_RSA_WITH_AES_128_GCM_SHA256\n   TLS_RSA_WITH_AES_256_CBC_SHA\n   TLS_RSA_WITH_AES_256_GCM_SHA384\n\n If not specified, the default list:\n   TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n   TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\n   TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n   TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\n   TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n   TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n will be used.\n\nExample: - \"TLS_AES_128_GCM_SHA256\"-\n\nValidation Rules:\n  ves.io.schema.rules.repeated.items.string.in: [\\\"TLS_AES_128_GCM_SHA256\\\",\\\"TLS_AES_256_GCM_SHA384\\\",\\\"TLS_CHACHA20_POLY1305_SHA256\\\",\\\"TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\\\",\\\"TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\\\",\\\"TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\\\",\\\"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\\\",\\\"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\\\",\\\"TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\\\",\\\"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\\\",\\\"TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\\\",\\\"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\\\",\\\"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\\\",\\\"TLS_RSA_WITH_AES_128_CBC_SHA\\\",\\\"TLS_RSA_WITH_AES_128_GCM_SHA256\\\",\\\"TLS_RSA_WITH_AES_256_CBC_SHA\\\",\\\"TLS_RSA_WITH_AES_256_GCM_SHA384\\\"]\n  ves.io.schema.rules.repeated.unique: true\n",
                    "title": "cipher_suites",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Cipher Suites",
                    "x-ves-example": "TLS_AES_128_GCM_SHA256",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.repeated.items.string.in": "[\\\"TLS_AES_128_GCM_SHA256\\\",\\\"TLS_AES_256_GCM_SHA384\\\",\\\"TLS_CHACHA20_POLY1305_SHA256\\\",\\\"TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\\\",\\\"TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\\\",\\\"TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\\\",\\\"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\\\",\\\"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\\\",\\\"TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\\\",\\\"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\\\",\\\"TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\\\",\\\"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\\\",\\\"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\\\",\\\"TLS_RSA_WITH_AES_128_CBC_SHA\\\",\\\"TLS_RSA_WITH_AES_128_GCM_SHA256\\\",\\\"TLS_RSA_WITH_AES_256_CBC_SHA\\\",\\\"TLS_RSA_WITH_AES_256_GCM_SHA384\\\"]",
                        "ves.io.schema.rules.repeated.unique": "true"
                    }
                },
                "maximum_protocol_version": {
                    "description": " Maximum TLS protocol version.",
                    "title": "maximum_protocol_version",
                    "$ref": "#/definitions/schemaTlsProtocol",
                    "x-displayname": "Maximum TLS Version"
                },
                "minimum_protocol_version": {
                    "description": " Minimum TLS protocol version.",
                    "title": "minimum_protocol_version",
                    "$ref": "#/definitions/schemaTlsProtocol",
                    "x-displayname": "Minimum TLS Version"
                },
                "require_client_certificate": {
                    "type": "boolean",
                    "description": " If true, F5XC will reject connections without a valid client\n certificate.",
                    "title": "require_client_certificate",
                    "format": "boolean",
                    "x-displayname": "Require Client Certificate(enable mTLS)"
                },
                "validation_params": {
                    "description": " This includes URL for a trust store, whether SAN verification is required\n and list of Subject Alt Names for verification",
                    "title": "validation_params",
                    "$ref": "#/definitions/schemaTlsValidationParamsType",
                    "x-displayname": "Root CA Validation parameters"
                },
                "xfcc_header_elements": {
                    "type": "array",
                    "description": " X-Forwarded-Client-Cert header elements to be set in an mTLS enabled connections.\n If none are defined, the header will not be added.\n\nValidation Rules:\n  ves.io.schema.rules.repeated.items.enum.defined_only: true\n  ves.io.schema.rules.repeated.items.enum.not_in: [0]\n  ves.io.schema.rules.repeated.unique: true\n",
                    "title": "XFCC Header",
                    "items": {
                        "$ref": "#/definitions/schemaXfccElement"
                    },
                    "x-displayname": "XFCC Header",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.repeated.items.enum.defined_only": "true",
                        "ves.io.schema.rules.repeated.items.enum.not_in": "[0]",
                        "ves.io.schema.rules.repeated.unique": "true"
                    }
                }
            }
        },
        "schemaClearSecretInfoType": {
            "type": "object",
            "description": "ClearSecretInfoType specifies information about the Secret that is not encrypted.",
            "title": "ClearSecretInfoType",
            "x-displayname": "In-Clear Secret",
            "x-ves-displayorder": "2,1",
            "x-ves-proto-message": "ves.io.schema.ClearSecretInfoType",
            "properties": {
                "provider": {
                    "type": "string",
                    "description": " Name of the Secret Management Access object that contains information about the store to get encrypted bytes\n This field needs to be provided only if the url scheme is not string:///\n\nExample: - \"box-provider\"-",
                    "title": "Provider",
                    "x-displayname": "Provider",
                    "x-ves-example": "box-provider"
                },
                "url": {
                    "type": "string",
                    "description": " URL of the secret. Currently supported URL schemes is string:///.\n For string:/// scheme, Secret needs to be encoded Base64 format.\n When asked for this secret, caller will get Secret bytes after Base64 decoding.\n\nExample: - \"string:///U2VjcmV0SW5mb3JtYXRpb24=\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.max_bytes: 131072\n  ves.io.schema.rules.string.uri_ref: true\n",
                    "title": "URL",
                    "maxLength": 131072,
                    "x-displayname": "URL",
                    "x-ves-example": "string:///U2VjcmV0SW5mb3JtYXRpb24=",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.max_bytes": "131072",
                        "ves.io.schema.rules.string.uri_ref": "true"
                    }
                }
            }
        },
        "schemaConditionType": {
            "type": "object",
            "description": "Conditions are used in the object status to describe the current state of the\nobject, e.g. Ready, Succeeded, etc.",
            "title": "ConditionType",
            "x-displayname": "Status Condition",
            "x-ves-proto-message": "ves.io.schema.ConditionType",
            "properties": {
                "hostname": {
                    "type": "string",
                    "description": " Hostname of the instance of the site that sent the status",
                    "title": "hostname",
                    "x-displayname": "Hostname"
                },
                "last_update_time": {
                    "type": "string",
                    "description": " Last time the condition was updated",
                    "title": "last_update_time",
                    "format": "date-time",
                    "x-displayname": "Last Updated"
                },
                "reason": {
                    "type": "string",
                    "description": " x-reason: \"Insufficient memory in data plane\"\n A human readable string explaining the reason for reaching this condition\n\nExample: - \"value\"-",
                    "title": "reason",
                    "x-displayname": "Reason",
                    "x-ves-example": "value"
                },
                "service_name": {
                    "type": "string",
                    "description": " Name of the service that sent the status",
                    "title": "service name",
                    "x-displayname": "Service Name"
                },
                "status": {
                    "type": "string",
                    "description": " Status of the condition\n \"Success\" Validtion has succeded. Requested operation was successful.\n \"Failed\"  Validation has failed.\n \"Incomplete\" Validation of configuration has failed due to missing configuration.\n \"Installed\" Validation has passed and configuration has been installed in data path or K8s\n \"Down\" Configuration is operationally down. e.g. down interface\n \"Disabled\" Configuration is administratively disabled i.e. ObjectMetaType.Disable = true.\n \"NotApplicable\" Configuration is not applicable e.g. tenant service_policy_set(s) in system namespace are not applicable on REs\n\nExample: - \"Failed\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.in: [\\\"Success\\\",\\\"Failed\\\",\\\"Incomplete\\\",\\\"Installed\\\",\\\"Down\\\",\\\"Disabled\\\",\\\"NotApplicable\\\"]\n",
                    "title": "status",
                    "x-displayname": "Status",
                    "x-ves-example": "Failed",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.in": "[\\\"Success\\\",\\\"Failed\\\",\\\"Incomplete\\\",\\\"Installed\\\",\\\"Down\\\",\\\"Disabled\\\",\\\"NotApplicable\\\"]"
                    }
                },
                "type": {
                    "type": "string",
                    "description": " Type of the condition\n \"Validation\" represents validation user given configuration object\n \"Operational\" represents operational status of a given configuration object\n\nExample: - \"Operational\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.in: [\\\"Validation\\\",\\\"Operational\\\"]\n",
                    "title": "type",
                    "x-displayname": "Type",
                    "x-ves-example": "Operational",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.in": "[\\\"Validation\\\",\\\"Operational\\\"]"
                    }
                }
            }
        },
        "schemaCookieManipulationOptionType": {
            "type": "object",
            "description": "x-displayName: \"Cookie Protection\"\nSet Cookie protection attributes.",
            "title": "CookieManipulationOptionType",
            "properties": {
                "add_httponly": {
                    "description": "x-displayName: \"Add\"",
                    "title": "add_httponly",
                    "$ref": "#/definitions/schemaEmpty"
                },
                "add_secure": {
                    "description": "x-displayName: \"Add\"",
                    "title": "add_secure",
                    "$ref": "#/definitions/schemaEmpty"
                },
                "disable_tampering_protection": {
                    "description": "x-displayName: \"Disable\"",
                    "title": "disable",
                    "$ref": "#/definitions/schemaEmpty"
                },
                "enable_tampering_protection": {
                    "description": "x-displayName: \"Enable\"",
                    "title": "enable",
                    "$ref": "#/definitions/schemaEmpty"
                },
                "ignore_httponly": {
                    "description": "x-displayName: \"Ignore\"",
                    "title": "ignore_httponly",
                    "$ref": "#/definitions/schemaEmpty"
                },
                "ignore_max_age": {
                    "description": "x-displayName: \"Ignore Max Age\"\nIgnore max age attribute",
                    "title": "ignore_max_age",
                    "$ref": "#/definitions/schemaEmpty"
                },
                "ignore_samesite": {
                    "description": "x-displayName: \"Ignore\"\nIgnore Samesite attribute",
                    "title": "ignore_samesite",
                    "$ref": "#/definitions/schemaEmpty"
                },
                "ignore_secure": {
                    "description": "x-displayName: \"Ignore\"",
                    "title": "ignore_secure",
                    "$ref": "#/definitions/schemaEmpty"
                },
                "max_age_value": {
                    "type": "integer",
                    "description": "x-displayName: \"Add Max Age\"\nAdd max age attribute",
                    "title": "add_max_age",
                    "format": "int32"
                },
                "name": {
                    "type": "string",
                    "description": "x-displayName: \"Cookie Name\"\nx-example: \"value\"\nx-required\nName of the Cookie",
                    "title": "name"
                },
                "samesite_lax": {
                    "description": "x-displayName: \"Lax\"\nAdd Samesite attribute with Lax. Means that the cookie is not sent on cross-site requests",
                    "title": "lax",
                    "$ref": "#/definitions/schemaEmpty"
                },
                "samesite_none": {
                    "description": "x-displayName: \"None\"\nAdd Samesite attribute with None. Means that the browser sends the cookie with both cross-site and same-site requests",
                    "title": "none",
                    "$ref": "#/definitions/schemaEmpty"
                },
                "samesite_strict": {
                    "description": "x-displayName: \"Strict\"\nAdd Samesite attribute with Strict. Means that the browser sends the cookie only for same-site requests",
                    "title": "strict",
                    "$ref": "#/definitions/schemaEmpty"
                }
            }
        },
        "schemaCorsPolicy": {
            "type": "object",
            "description": "Cross-Origin Resource Sharing requests configuration specified at Virtual-host or\nRoute level. Route level configuration takes precedence.\n\nAn example of an Cross origin HTTP request\n    GET /resources/public-data/ HTTP/1.1\n    Host: bar.other\n    User-Agent: Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.5; en-US; rv:1.9.1b3pre) Gecko/20081130 Minefield/3.1b3pre\n    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\n    Accept-Language: en-us,en;q=0.5\n    Accept-Encoding: gzip,deflate\n    Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7\n    Connection: keep-alive\n    Referrer: http://foo.example/examples/access-control/simpleXSInvocation.html\n    Origin: http://foo.example\n\n\n    HTTP/1.1 200 OK\n    Date: Mon, 01 Dec 2008 00:23:53 GMT\n    Server: Apache/2.0.61\n    Access-Control-Allow-Origin: *\n    Keep-Alive: timeout=2, max=100\n    Connection: Keep-Alive\n    Transfer-Encoding: chunked\n    Content-Type: application/xml\n\nAn example for cross origin HTTP OPTIONS request with Access-Control-Request-* header\n\n    OPTIONS /resources/post-here/ HTTP/1.1\n    Host: bar.other\n    User-Agent: Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.5; en-US; rv:1.9.1b3pre) Gecko/20081130 Minefield/3.1b3pre\n    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\n    Accept-Language: en-us,en;q=0.5\n    Accept-Encoding: gzip,deflate\n    Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7\n    Connection: keep-alive\n    Origin: http://foo.example\n    Access-Control-Request-Method: POST\n    Access-Control-Request-Headers: X-PINGOTHER, Content-Type\n\n\n    HTTP/1.1 204 No Content\n    Date: Mon, 01 Dec 2008 01:15:39 GMT\n    Server: Apache/2.0.61 (Unix)\n    Access-Control-Allow-Origin: http://foo.example\n    Access-Control-Allow-Methods: POST, GET, OPTIONS\n    Access-Control-Allow-Headers: X-PINGOTHER, Content-Type\n    Access-Control-Max-Age: 86400\n    Vary: Accept-Encoding, Origin\n    Keep-Alive: timeout=2, max=100\n    Connection: Keep-Alive",
            "title": "CorsPolicy",
            "x-displayname": "CORS Policy",
            "x-ves-displayorder": "2,3,4,5,6,9,8,1",
            "x-ves-proto-message": "ves.io.schema.CorsPolicy",
            "properties": {
                "allow_credentials": {
                    "type": "boolean",
                    "description": " Specifies whether the resource allows credentials",
                    "title": "allow_credentials",
                    "format": "boolean",
                    "x-displayname": "Allow Credentials"
                },
                "allow_headers": {
                    "type": "string",
                    "description": " Specifies the content for the access-control-allow-headers header\n\nExample: - \"value\"-",
                    "title": "allow_headers",
                    "x-displayname": "Allow Headers",
                    "x-ves-example": "value"
                },
                "allow_methods": {
                    "type": "string",
                    "description": " Specifies the content for the access-control-allow-methods header\n\nExample: - \"GET\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.http_valid_methods: true\n",
                    "title": "allow_methods",
                    "x-displayname": "Allow Methods",
                    "x-ves-example": "GET",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.http_valid_methods": "true"
                    }
                },
                "allow_origin": {
                    "type": "array",
                    "description": " Specifies the origins that will be allowed to do CORS requests.\n An origin is allowed if either allow_origin or allow_origin_regex match\n\nExample: - \"value\"-\n\nValidation Rules:\n  ves.io.schema.rules.repeated.items.string.max_len: 256\n  ves.io.schema.rules.repeated.items.string.min_len: 1\n  ves.io.schema.rules.repeated.max_items: 128\n  ves.io.schema.rules.repeated.unique: true\n",
                    "title": "allow_origin",
                    "maxItems": 128,
                    "items": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256
                    },
                    "x-displayname": "Allow Origin",
                    "x-ves-example": "value",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.repeated.items.string.max_len": "256",
                        "ves.io.schema.rules.repeated.items.string.min_len": "1",
                        "ves.io.schema.rules.repeated.max_items": "128",
                        "ves.io.schema.rules.repeated.unique": "true"
                    }
                },
                "allow_origin_regex": {
                    "type": "array",
                    "description": " Specifies regex patterns that match allowed origins.\n An origin is allowed if either allow_origin or allow_origin_regex match\n\nExample: - \"value\"-\n\nValidation Rules:\n  ves.io.schema.rules.repeated.items.string.max_bytes: 256\n  ves.io.schema.rules.repeated.items.string.min_bytes: 1\n  ves.io.schema.rules.repeated.items.string.regex: true\n  ves.io.schema.rules.repeated.max_items: 16\n  ves.io.schema.rules.repeated.unique: true\n",
                    "title": "allow_origin_regex",
                    "maxItems": 16,
                    "items": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256
                    },
                    "x-displayname": "Allow Origin Regex",
                    "x-ves-example": "value",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.repeated.items.string.max_bytes": "256",
                        "ves.io.schema.rules.repeated.items.string.min_bytes": "1",
                        "ves.io.schema.rules.repeated.items.string.regex": "true",
                        "ves.io.schema.rules.repeated.max_items": "16",
                        "ves.io.schema.rules.repeated.unique": "true"
                    }
                },
                "disabled": {
                    "type": "boolean",
                    "description": " Disable the CorsPolicy for a particular route. This is useful when\n virtual-host has CorsPolicy, but we need to disable it on a specific route.\n The value of this field is ignored for virtual-host",
                    "title": "disabled",
                    "format": "boolean",
                    "x-displayname": "Disabled"
                },
                "expose_headers": {
                    "type": "string",
                    "description": " Specifies the content for the access-control-expose-headers header\n\nExample: - \"value\"-",
                    "title": "expose_headers",
                    "x-displayname": "Expose Headers",
                    "x-ves-example": "value"
                },
                "maximum_age": {
                    "type": "integer",
                    "description": " Specifies the content for the access-control-max-age header in seconds.\n This indicates the maximum number of seconds the results can be cached\n A value of -1 will disable caching.\n Maximum permitted value is 86400 seconds (24 hours)\n\nExample: - \"-1\"-\n\nValidation Rules:\n  ves.io.schema.rules.int32.gte: -1\n  ves.io.schema.rules.int32.lte: 86400\n",
                    "title": "maximum_age",
                    "format": "int32",
                    "x-displayname": "Maximum Age",
                    "x-ves-example": "-1",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.int32.gte": "-1",
                        "ves.io.schema.rules.int32.lte": "86400"
                    }
                }
            }
        },
        "schemaCsrfPolicy": {
            "type": "object",
            "description": "To mitigate CSRF attack , the policy checks where a request is coming from to determine if the request's origin is the same as its detination.The policy relies on two pieces of information used in determining if a request originated from the same host.\n\n1. The origin that caused the user agent to issue the request (source origin).\n2. The origin that the request is going to (target origin).\nWhen the policy evaluating a request, it ensures both pieces of information are present and compare their values. If the source origin is missing or origins do not match the request is rejected. The exception to this being if the source-origin has been added to they policy as valid.\nBecause CSRF attacks specifically target state-changing requests, the policy only acts on the HTTP requests that have state-changing method (PUT,POST, etc.).",
            "title": "CsrfPolicy",
            "x-displayname": "CSRF Policy",
            "x-ves-oneof-field-allowed_domains": "[\"all_load_balancer_domains\",\"custom_domain_list\",\"disabled\"]",
            "x-ves-proto-message": "ves.io.schema.CsrfPolicy",
            "properties": {
                "all_load_balancer_domains": {
                    "description": "Exclusive with [custom_domain_list disabled]\n Add All load balancer domains to source origin (allow) list.",
                    "title": "all_load_balancer_domains",
                    "$ref": "#/definitions/schemaEmpty",
                    "x-displayname": "All HTTP Loadbalancer Domains"
                },
                "custom_domain_list": {
                    "description": "Exclusive with [all_load_balancer_domains disabled]\n Add one or more domains to source origin (allow) list.\n\nExample: - \"abc.xyz.com\"-",
                    "title": "custom_domain_list",
                    "$ref": "#/definitions/schemaDomainNameList",
                    "x-displayname": "Specified domains",
                    "x-ves-example": "abc.xyz.com"
                },
                "disabled": {
                    "description": "Exclusive with [all_load_balancer_domains custom_domain_list]\n Allow all source origin domains.",
                    "title": "disabled",
                    "$ref": "#/definitions/schemaEmpty",
                    "x-displayname": "Disabled"
                }
            }
        },
        "schemaDomainNameList": {
            "type": "object",
            "description": "List of domain names used for Host header matching",
            "title": "List of Domain names",
            "x-displayname": "Domain name list",
            "x-ves-proto-message": "ves.io.schema.DomainNameList",
            "properties": {
                "domains": {
                    "type": "array",
                    "description": "\n A list of domain names that will be matched to loadbalancer.\n These domains are not used for SNI match.\n Wildcard names are supported in the suffix or prefix form.\n\nExample: - \"www.foo.com\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.items.string.max_len: 256\n  ves.io.schema.rules.repeated.items.string.min_len: 1\n  ves.io.schema.rules.repeated.items.string.vh_domain: true\n  ves.io.schema.rules.repeated.max_items: 32\n  ves.io.schema.rules.repeated.min_items: 1\n  ves.io.schema.rules.repeated.unique: true\n",
                    "title": "Domains",
                    "minItems": 1,
                    "maxItems": 32,
                    "items": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256
                    },
                    "x-displayname": "Domain names",
                    "x-ves-example": "www.foo.com",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.items.string.max_len": "256",
                        "ves.io.schema.rules.repeated.items.string.min_len": "1",
                        "ves.io.schema.rules.repeated.items.string.vh_domain": "true",
                        "ves.io.schema.rules.repeated.max_items": "32",
                        "ves.io.schema.rules.repeated.min_items": "1",
                        "ves.io.schema.rules.repeated.unique": "true"
                    }
                }
            }
        },
        "schemaDomainType": {
            "type": "object",
            "description": "Domains names",
            "title": "Domains",
            "x-displayname": "Domains",
            "x-ves-oneof-field-domain_choice": "[\"exact_value\",\"regex_value\",\"suffix_value\"]",
            "x-ves-proto-message": "ves.io.schema.DomainType",
            "properties": {
                "exact_value": {
                    "type": "string",
                    "description": "Exclusive with [regex_value suffix_value]\n Exact domain name.\n\nExample: - \"abc.zyz.com\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.hostname: true\n  ves.io.schema.rules.string.max_len: 256\n  ves.io.schema.rules.string.min_len: 1\n",
                    "title": "exact value",
                    "minLength": 1,
                    "maxLength": 256,
                    "x-displayname": "Exact Value",
                    "x-ves-example": "abc.zyz.com",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.hostname": "true",
                        "ves.io.schema.rules.string.max_len": "256",
                        "ves.io.schema.rules.string.min_len": "1"
                    }
                },
                "regex_value": {
                    "type": "string",
                    "description": "Exclusive with [exact_value suffix_value]\n Regular Expression value for the domain name\n\nExample: - \"([a-z]([-a-z0-9]*[a-z0-9])?)\\.com$'\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.max_len: 256\n  ves.io.schema.rules.string.min_len: 1\n  ves.io.schema.rules.string.regex: true\n",
                    "title": "regex values of Domains",
                    "minLength": 1,
                    "maxLength": 256,
                    "x-displayname": "Regex Values of Domains",
                    "x-ves-example": "([a-z]([-a-z0-9]*[a-z0-9])?)\\.com$'",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.max_len": "256",
                        "ves.io.schema.rules.string.min_len": "1",
                        "ves.io.schema.rules.string.regex": "true"
                    }
                },
                "suffix_value": {
                    "type": "string",
                    "description": "Exclusive with [exact_value regex_value]\n Suffix of domain name e.g \"xyz.com\" will match \"*.xyz.com\" and \"xyz.com\"\n\nExample: - \"xyz.com\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.hostname: true\n  ves.io.schema.rules.string.max_len: 256\n  ves.io.schema.rules.string.min_len: 1\n",
                    "title": "suffix value",
                    "minLength": 1,
                    "maxLength": 256,
                    "x-displayname": "Suffix Value",
                    "x-ves-example": "xyz.com",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.hostname": "true",
                        "ves.io.schema.rules.string.max_len": "256",
                        "ves.io.schema.rules.string.min_len": "1"
                    }
                }
            }
        },
        "schemaEmpty": {
            "type": "object",
            "description": "This can be used for messages where no values are needed",
            "title": "Empty",
            "x-displayname": "Empty",
            "x-ves-proto-message": "ves.io.schema.Empty"
        },
        "schemaHashAlgorithm": {
            "type": "string",
            "description": "Specifies the Hash Algorithm to be used\n\nInvalid hash algorithm\nsha256 hash algorithm\nsha1 hash algorithm",
            "title": "HashAlgoritm",
            "enum": [
                "INVALID_HASH_ALGORITHM",
                "SHA256",
                "SHA1"
            ],
            "default": "INVALID_HASH_ALGORITHM",
            "x-displayname": "Hash Algorithm",
            "x-ves-proto-enum": "ves.io.schema.HashAlgorithm"
        },
        "schemaHashAlgorithms": {
            "type": "object",
            "description": "Specifies the hash algorithms to be used",
            "title": "HashAlgorithms",
            "x-displayname": "Hash Algorithms",
            "x-ves-proto-message": "ves.io.schema.HashAlgorithms",
            "properties": {
                "hash_algorithms": {
                    "type": "array",
                    "description": " Ordered list of hash algorithms to be used.\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.max_items: 4\n  ves.io.schema.rules.repeated.min_items: 1\n  ves.io.schema.rules.repeated.unique: true\n",
                    "title": "Hash Algorithms",
                    "minItems": 1,
                    "maxItems": 4,
                    "items": {
                        "$ref": "#/definitions/schemaHashAlgorithm"
                    },
                    "x-displayname": "Hash Algorithms",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.max_items": "4",
                        "ves.io.schema.rules.repeated.min_items": "1",
                        "ves.io.schema.rules.repeated.unique": "true"
                    }
                }
            }
        },
        "schemaHeaderManipulationOptionType": {
            "type": "object",
            "description": "HTTP header is a key-value pair.\nThe name acts as key of HTTP header\nThe value acts as the data/value of HTTP header\nExample HTTP header\n    Host: user.volterra.com\nIn the above example, Host is the name or key of HTTP header\nIn the above example, user.volterra.com is the value of HTTP header",
            "title": "HeaderManipulationOptionType",
            "x-displayname": "Header Manipulation Option",
            "x-ves-oneof-field-value_choice": "[\"secret_value\",\"value\"]",
            "x-ves-proto-message": "ves.io.schema.HeaderManipulationOptionType",
            "properties": {
                "append": {
                    "type": "boolean",
                    "description": " Should the value be appended? If true, the value is appended to existing values.\n Default value is do not append",
                    "title": "append",
                    "format": "boolean",
                    "x-displayname": "Append"
                },
                "name": {
                    "type": "string",
                    "description": " Name of the HTTP header.\n\nExample: - \"value\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.max_len: 256\n",
                    "title": "name",
                    "maxLength": 256,
                    "x-displayname": "Name",
                    "x-ves-example": "value",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.max_len": "256"
                    }
                },
                "secret_value": {
                    "description": "Exclusive with [value]\n Secret Value of the HTTP header.",
                    "title": "Secret Value",
                    "$ref": "#/definitions/schemaSecretType",
                    "x-displayname": "Secret Value"
                },
                "value": {
                    "type": "string",
                    "description": "Exclusive with [secret_value]\n Value of the HTTP header.\n\nValidation Rules:\n  ves.io.schema.rules.string.max_len: 8096\n",
                    "title": "value",
                    "maxLength": 8096,
                    "x-displayname": "Value",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.max_len": "8096"
                    }
                }
            }
        },
        "schemaHeaderTransformationType": {
            "type": "object",
            "description": "x-displayName: \"Header Transformation\"\nHeader Transformation options for HTTP/1.1 request/response headers",
            "title": "HeaderTransformationType",
            "properties": {
                "default_header_transformation": {
                    "description": "x-displayName: \"Default\"\nNormalize the headers to lower case",
                    "title": "Default header transformation",
                    "$ref": "#/definitions/schemaEmpty"
                },
                "preserve_case_header_transformation": {
                    "description": "x-displayName: \"Preserve Case\"\nPreserves the original case of headers without any modifications.",
                    "title": "Preserve case header transformation",
                    "$ref": "#/definitions/schemaEmpty"
                },
                "proper_case_header_transformation": {
                    "description": "x-displayName: \"Proper Case\"\nNormalize the headers to proper case words. The fist character and any character\nfollowing a special character will be capitalized if it’s an alpha character.\nFor example, “content-type” becomes “Content-Type”, and “foo$b#$are” becomes “Foo$B#$Are”",
                    "title": "Proper case header transformation",
                    "$ref": "#/definitions/schemaEmpty"
                }
            }
        },
        "schemaInitializerType": {
            "type": "object",
            "description": "Initializer is information about an initializer that has not yet completed.",
            "title": "InitializerType",
            "x-displayname": "Initializer",
            "x-ves-proto-message": "ves.io.schema.InitializerType",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " name of the service that is responsible for initializing this object.",
                    "title": "name",
                    "x-displayname": "Name"
                }
            }
        },
        "schemaInitializersType": {
            "type": "object",
            "description": "Initializers tracks the progress of initialization of a configuration object",
            "title": "InitializersType",
            "x-displayname": "Initializers",
            "x-ves-proto-message": "ves.io.schema.InitializersType",
            "properties": {
                "pending": {
                    "type": "array",
                    "description": " Pending is a list of initializers that must execute in order before this object is initialized.\n When the last pending initializer is removed, and no failing result is set, the initializers\n struct will be set to nil and the object is considered as initialized and visible to all\n clients.",
                    "title": "pending",
                    "items": {
                        "$ref": "#/definitions/schemaInitializerType"
                    },
                    "x-displayname": "Pending"
                },
                "result": {
                    "description": " If result is set with the Failure field, the object will be persisted to storage and then deleted,\n ensuring that other clients can observe the deletion.",
                    "title": "result",
                    "$ref": "#/definitions/schemaStatusType",
                    "x-displayname": "Result"
                }
            }
        },
        "schemaListMetaType": {
            "type": "object",
            "description": "ListMetaType is metadata that all lists must have.",
            "title": "ListMetaType",
            "x-displayname": "List Metadata",
            "x-ves-proto-message": "ves.io.schema.ListMetaType"
        },
        "schemaObjectMetaType": {
            "type": "object",
            "description": "ObjectMetaType is metadata(common attributes) of an object that all configuration objects will have.\nThe information in this type can be specified by user during create and replace APIs.",
            "title": "ObjectMetaType",
            "x-displayname": "Metadata",
            "x-ves-proto-message": "ves.io.schema.ObjectMetaType",
            "properties": {
                "annotations": {
                    "type": "object",
                    "description": " Annotations is an unstructured key value map stored with a resource that may be\n set by external tools to store and retrieve arbitrary metadata. They are not\n queryable and should be preserved when modifying objects.\n\nExample: - \"value\"-\n\nValidation Rules:\n  ves.io.schema.rules.map.keys.string.max_len: 64\n  ves.io.schema.rules.map.keys.string.min_len: 1\n  ves.io.schema.rules.map.values.string.max_len: 1024\n  ves.io.schema.rules.map.values.string.min_len: 1\n",
                    "title": "annotations",
                    "x-displayname": "Annotations",
                    "x-ves-example": "value",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.map.keys.string.max_len": "64",
                        "ves.io.schema.rules.map.keys.string.min_len": "1",
                        "ves.io.schema.rules.map.values.string.max_len": "1024",
                        "ves.io.schema.rules.map.values.string.min_len": "1"
                    }
                },
                "description": {
                    "type": "string",
                    "description": " Human readable description for the object\n\nExample: - \"Virtual Host for acmecorp website\"-",
                    "title": "description",
                    "x-displayname": "Description",
                    "x-ves-example": "Virtual Host for acmecorp website"
                },
                "disable": {
                    "type": "boolean",
                    "description": " A value of true will administratively disable the object\n\nExample: - \"true\"-",
                    "title": "disable",
                    "format": "boolean",
                    "x-displayname": "Disable",
                    "x-ves-example": "true"
                },
                "labels": {
                    "type": "object",
                    "description": " Map of string keys and values that can be used to organize and categorize\n (scope and select) objects as chosen by the user. Values specified here will be used\n by selector expression\n\nExample: - \"value\"-",
                    "title": "labels",
                    "x-displayname": "Labels",
                    "x-ves-example": "value"
                },
                "name": {
                    "type": "string",
                    "description": " This is the name of configuration object. It has to be unique within the namespace.\n It can only be specified during create API and cannot be changed during replace API.\n The value of name has to follow DNS-1035 format.\n\nExample: - \"acmecorp-web\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "acmecorp-web",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "namespace": {
                    "type": "string",
                    "description": " This defines the workspace within which each the configuration object is to be created.\n Must be a DNS_LABEL format. For a namespace object itself, namespace value will be \"\"\n\nExample: - \"staging\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "staging"
                },
                "uid": {
                    "type": "string",
                    "description": " uid is the unique in time and space value for this object. Object create will fail if\n provided by the client and the value exists in the system. Typically generated by the\n server on successful creation of an object and is not allowed to change once populated.\n Shadowed by SystemObjectMeta's uid field.\n\nExample: - \"d15f1fad-4d37-48c0-8706-df1824d76d31\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "d15f1fad-4d37-48c0-8706-df1824d76d31"
                }
            }
        },
        "schemaRetryBackOff": {
            "type": "object",
            "description": "Specifies parameters that control retry back off.",
            "title": "RetryBackOff",
            "x-displayname": "Retry BackOff Interval",
            "x-ves-displayorder": "1,2",
            "x-ves-proto-message": "ves.io.schema.RetryBackOff",
            "properties": {
                "base_interval": {
                    "type": "integer",
                    "description": " Specifies the base interval between retries in milliseconds\n\nExample: - \"5\"-\n\nValidation Rules:\n  ves.io.schema.rules.uint32.gt: 0\n",
                    "title": "base_interval",
                    "format": "int64",
                    "x-displayname": "Base Retry Interval",
                    "x-ves-example": "5",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.uint32.gt": "0"
                    }
                },
                "max_interval": {
                    "type": "integer",
                    "description": " Specifies the maximum interval between retries in milliseconds.\n This parameter is optional, but must be greater than or equal\n to the base_interval if set. The default is 10 times the base_interval.\n\nExample: - \"60\"-",
                    "title": "max_interval",
                    "format": "int64",
                    "x-displayname": "Maximum Retry Interval",
                    "x-ves-example": "60"
                }
            }
        },
        "schemaRetryPolicyType": {
            "type": "object",
            "description": "Retry policy configuration for route destination.",
            "title": "RetryPolicyType",
            "x-displayname": "Retry Policy",
            "x-ves-displayorder": "1,6,2,3,4,5",
            "x-ves-proto-message": "ves.io.schema.RetryPolicyType",
            "properties": {
                "back_off": {
                    "description": " Specifies parameters that control retry back off.\n This parameter is optional, in which case the default base\n interval is 25 milliseconds. The default maximum interval is\n 10 times the base interval",
                    "title": "Retry BackOff",
                    "$ref": "#/definitions/schemaRetryBackOff",
                    "x-displayname": "Retry BackOff interval"
                },
                "num_retries": {
                    "type": "integer",
                    "description": " Specifies the allowed number of retries. Defaults to 1.\n Retries can be done any number of times. An exponential back-off algorithm\n is used between each retry\n\nExample: - \"3\"-\n\nValidation Rules:\n  ves.io.schema.rules.uint32.lte: 8\n",
                    "title": "num_retries",
                    "format": "int64",
                    "x-displayname": "Number of Retries",
                    "x-ves-example": "3",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.uint32.lte": "8"
                    }
                },
                "per_try_timeout": {
                    "type": "integer",
                    "description": " Specifies a non-zero timeout per retry attempt. In milliseconds\n\nExample: - \"1000\"-\n\nValidation Rules:\n  ves.io.schema.rules.uint32.lte: 600000\n",
                    "title": "per_try_timeout",
                    "format": "int64",
                    "x-displayname": "Per Try Timeout",
                    "x-ves-example": "1000",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.uint32.lte": "600000"
                    }
                },
                "retriable_status_codes": {
                    "type": "array",
                    "description": " HTTP status codes that should trigger a retry in addition to those specified by retry_on.\n\nExample: - \"403\"-\n\nValidation Rules:\n  ves.io.schema.rules.repeated.max_items: 16\n  ves.io.schema.rules.repeated.unique: true\n",
                    "title": "Retriable status Code",
                    "maxItems": 16,
                    "items": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "x-displayname": "Status Code to Retry",
                    "x-ves-example": "403",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.repeated.max_items": "16",
                        "ves.io.schema.rules.repeated.unique": "true"
                    }
                },
                "retry_condition": {
                    "type": "array",
                    "description": " Specifies the conditions under which retry takes place.\n Retries can be on different types of condition depending on application requirements.\n For example, network failure, all 5xx response codes, idempotent 4xx response codes, etc\n\n The possible values are\n\n \"5xx\"             : Retry will be done if the upstream server responds with any 5xx response code,\n                     or does not respond at all (disconnect/reset/read timeout).\n\n \"gateway-error\"   : Retry will be done only if the upstream server responds with 502, 503 or\n                     504 responses (Included in 5xx)\n\n \"connect-failure\" : Retry will be done if the request fails because of a connection failure to the\n                     upstream server (connect timeout, etc.). (Included in 5xx)\n\n \"refused-stream\"  : Retry is done if the upstream server resets the stream with a REFUSED_STREAM\n                     error code (Included in 5xx)\n\n \"retriable-4xx\"   : Retry is done if the upstream server responds with a retriable 4xx response code.\n                     The only response code in this category is HTTP CONFLICT (409)\n\n \"retriable-status-codes\" :  Retry is done if the upstream server responds with any response code\n                             matching one defined in retriable_status_codes field\n\n \"reset\"           : Retry is done if the upstream server does not respond at all\n                     (disconnect/reset/read timeout.)\n\nExample: - \"5xx\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.items.string.in: [\\\"5xx\\\",\\\"gateway-error\\\",\\\"connect-failure\\\",\\\"refused-stream\\\",\\\"retriable-4xx\\\",\\\"retriable-status-codes\\\",\\\"reset\\\"]\n  ves.io.schema.rules.repeated.max_items: 7\n  ves.io.schema.rules.repeated.min_items: 1\n  ves.io.schema.rules.repeated.unique: true\n",
                    "title": "retry_condition",
                    "minItems": 1,
                    "maxItems": 7,
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Retry Condition",
                    "x-ves-example": "5xx",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.items.string.in": "[\\\"5xx\\\",\\\"gateway-error\\\",\\\"connect-failure\\\",\\\"refused-stream\\\",\\\"retriable-4xx\\\",\\\"retriable-status-codes\\\",\\\"reset\\\"]",
                        "ves.io.schema.rules.repeated.max_items": "7",
                        "ves.io.schema.rules.repeated.min_items": "1",
                        "ves.io.schema.rules.repeated.unique": "true"
                    }
                }
            }
        },
        "schemaSecretEncodingType": {
            "type": "string",
            "description": "x-displayName: \"Secret Encoding\"\nSecretEncodingType defines the encoding type of the secret before handled by the Secret Management Service.\n\n - EncodingNone: x-displayName: \"None\"\nNo Encoding\n - EncodingBase64: Base64\n\nx-displayName: \"Base64\"\nBase64 encoding",
            "title": "SecretEncodingType",
            "enum": [
                "EncodingNone",
                "EncodingBase64"
            ],
            "default": "EncodingNone"
        },
        "schemaSecretType": {
            "type": "object",
            "description": "SecretType is used in an object to indicate a sensitive/confidential field",
            "title": "SecretType",
            "x-displayname": "Secret",
            "x-ves-oneof-field-secret_info_oneof": "[\"blindfold_secret_info\",\"clear_secret_info\"]",
            "x-ves-proto-message": "ves.io.schema.SecretType",
            "properties": {
                "blindfold_secret_info": {
                    "description": "Exclusive with [clear_secret_info]\n Blindfold Secret is used for the secrets managed by F5XC Secret Management Service",
                    "title": "Blindfold Secret",
                    "$ref": "#/definitions/schemaBlindfoldSecretInfoType",
                    "x-displayname": "Blindfold Secret"
                },
                "clear_secret_info": {
                    "description": "Exclusive with [blindfold_secret_info]\n Clear Secret is used for the secrets that are not encrypted",
                    "title": "Clear Secret",
                    "$ref": "#/definitions/schemaClearSecretInfoType",
                    "x-displayname": "Clear Secret"
                }
            }
        },
        "schemaStatusMetaType": {
            "type": "object",
            "description": "StatusMetaType is metadata that all status must have.",
            "title": "StatusMetaType",
            "x-displayname": "Metadata",
            "x-ves-proto-message": "ves.io.schema.StatusMetaType",
            "properties": {
                "creation_timestamp": {
                    "type": "string",
                    "description": " creation_timestamp is when the status object was created. It is used to find/tie-break\n for latest status object from same origin",
                    "title": "creation_timestamp",
                    "format": "date-time",
                    "x-displayname": "Creation Timestamp"
                },
                "creator_class": {
                    "type": "string",
                    "description": " Class of creator which created this StatusObject. This will be service's DNS FQDN.\n This will be set by the system based on client certificate information.\n\nExample: - \"ver.re1.int.ves.io\"-",
                    "title": "creator_class",
                    "x-displayname": "Creator Class",
                    "x-ves-example": "ver.re1.int.ves.io"
                },
                "creator_id": {
                    "type": "string",
                    "description": " ID of creator which created this StatusObject. This will be a concrete identifier for service (e.g.\n identifying the environment also). This will be set by the system based on client certificate\n information\n\nExample: - \"ver-instance-1\"-",
                    "title": "creator_id",
                    "x-displayname": "Creator ID",
                    "x-ves-example": "ver-instance-1"
                },
                "publish": {
                    "description": " Decides wether this status object will be propagated to user.",
                    "title": "publish",
                    "$ref": "#/definitions/schemaStatusPublishType",
                    "x-displayname": "Publish"
                },
                "status_id": {
                    "type": "string",
                    "description": " status_id is a field used by the generator to distinguish (if necessary) between two status\n objects for the same config object from the same site and same service and potentially same\n daemon(creator-id)",
                    "title": "status_id",
                    "x-displayname": "Status ID"
                },
                "uid": {
                    "type": "string",
                    "description": " uid is the unique in time and space value for a StatusObject.\n\nExample: - \"d15f1fad-4d37-48c0-8706-df1824d76d31\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "d15f1fad-4d37-48c0-8706-df1824d76d31"
                },
                "vtrp_id": {
                    "type": "string",
                    "description": " Origin of this status exchanged by VTRP.",
                    "title": "vtrp_id",
                    "x-displayname": "VTRP ID"
                },
                "vtrp_stale": {
                    "type": "boolean",
                    "description": " Indicate whether mars deems this object to be stale via graceful restart timer information",
                    "title": "vtrp_stale",
                    "format": "boolean",
                    "x-displayname": "VTRP Stale"
                }
            }
        },
        "schemaStatusPublishType": {
            "type": "string",
            "description": "StatusPublishType is all possible publish operations on a StatusObject\n\n - STATUS_DO_NOT_PUBLISH: Do Not Publish\n\nDo not propagate this status to user. This could be because status is only informational\n - STATUS_PUBLISH: Publish\n\nPropagate this status up to user as it might be actionable",
            "title": "StatusPublishType",
            "enum": [
                "STATUS_DO_NOT_PUBLISH",
                "STATUS_PUBLISH"
            ],
            "default": "STATUS_DO_NOT_PUBLISH",
            "x-displayname": "Status Publish Type",
            "x-ves-proto-enum": "ves.io.schema.StatusPublishType"
        },
        "schemaStatusType": {
            "type": "object",
            "description": "Status is a return value for calls that don't return other objects.",
            "title": "StatusType",
            "x-displayname": "Status",
            "x-ves-proto-message": "ves.io.schema.StatusType",
            "properties": {
                "code": {
                    "type": "integer",
                    "description": " Suggested HTTP return code for this status, 0 if not set.\n\nExample: - \"0\"-",
                    "title": "code",
                    "format": "int32",
                    "x-displayname": "Code",
                    "x-ves-example": "0"
                },
                "reason": {
                    "type": "string",
                    "description": " A human-readable description of why this operation is in the\n \"Failure\" status. If this value is empty there\n is no information available.\n\nExample: - \"value\"-",
                    "title": "reason",
                    "x-displayname": "Reason",
                    "x-ves-example": "value"
                },
                "status": {
                    "type": "string",
                    "description": " Status of the operation.\n One of: \"Success\" or \"Failure\".\n\nExample: - \"value\"-",
                    "title": "status",
                    "x-displayname": "Status",
                    "x-ves-example": "value"
                }
            }
        },
        "schemaSystemObjectMetaType": {
            "type": "object",
            "description": "SystemObjectMetaType is metadata generated or populated by the system for all persisted objects and\ncannot be updated directly by users.",
            "title": "SystemObjectMetaType",
            "x-displayname": "System Metadata",
            "x-ves-proto-message": "ves.io.schema.SystemObjectMetaType",
            "properties": {
                "creation_timestamp": {
                    "type": "string",
                    "description": " CreationTimestamp is a timestamp representing the server time when this object was\n created. It is not guaranteed to be set in happens-before order across separate operations.\n Clients may not set this value. It is represented in RFC3339 form and is in UTC.",
                    "title": "creation_timestamp",
                    "format": "date-time",
                    "x-displayname": "Creation Timestamp"
                },
                "creator_class": {
                    "type": "string",
                    "description": " A value identifying the class of the user or service which created this configuration object.\n\nExample: - \"value\"-",
                    "title": "creator_class",
                    "x-displayname": "Creator Class",
                    "x-ves-example": "value"
                },
                "creator_cookie": {
                    "type": "string",
                    "description": " This can used by the creator of the object for later audit for e.g. by storing the\n version identifying information of the object so at future it can be determined if\n version present at remote end is current or stale.\n\nExample: - \"value\"-",
                    "title": "creator_cookie",
                    "x-displayname": "Creator Cookie",
                    "x-ves-example": "value"
                },
                "creator_id": {
                    "type": "string",
                    "description": " A value identifying the exact user or service that created this configuration object\n\nExample: - \"value\"-",
                    "title": "creator_id",
                    "x-displayname": "Creator ID",
                    "x-ves-example": "value"
                },
                "deletion_timestamp": {
                    "type": "string",
                    "description": " DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This\n field is set by the server when a graceful deletion is requested by the user, and is not\n directly settable by a client. The resource is expected to be deleted (no longer visible\n from resource lists, and not reachable by name) after the time in this field, once the\n finalizers list is empty. As long as the finalizers list contains items, deletion is blocked.\n Once the deletionTimestamp is set, this value may not be unset or be set further into the\n future, although it may be shortened or the resource may be deleted prior to this time.\n For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react\n by sending a graceful termination signal to the containers in the pod. After that 30 seconds,\n the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup,\n remove the pod from the API. In the presence of network partitions, this object may still\n exist after this timestamp, until an administrator or automated process can determine the\n resource is fully terminated.\n If not set, graceful deletion of the object has not been requested.\n\n Populated by the system when a graceful deletion is requested.\n Read-only.",
                    "title": "deletion_timestamp",
                    "format": "date-time",
                    "x-displayname": "Deletion Timestamp"
                },
                "finalizers": {
                    "type": "array",
                    "description": " Must be empty before the object is deleted from the registry. Each entry\n is an identifier for the responsible component that will remove the entry\n from the list. If the deletionTimestamp of the object is non-nil, entries\n in this list can only be removed.\n\nExample: - \"value\"-",
                    "title": "finalizers",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Finalizers",
                    "x-ves-example": "value"
                },
                "initializers": {
                    "description": " An initializer is a controller which enforces some system invariant at object creation time.\n This field is a list of initializers that have not yet acted on this object. If nil or empty,\n this object has been completely initialized. Otherwise, the object is considered uninitialized\n and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to\n observe uninitialized objects.\n\n When an object is created, the system will populate this list with the current set of initializers.\n Only privileged users may set or modify this list. Once it is empty, it may not be modified further\n by any user.",
                    "title": "initializers",
                    "$ref": "#/definitions/schemaInitializersType",
                    "x-displayname": "Initializers"
                },
                "labels": {
                    "type": "object",
                    "description": " Map of string keys and values that can be used to organize and categorize\n (scope and select) objects as chosen by the operator or software. Values here can be interpreted\n by software(backend or frontend) to enable certain behavior e.g. things marked as soft-deleted(restorable).\n\nExample: - \"'ves.io/soft-deleted''true'\"-",
                    "title": "labels",
                    "x-displayname": "Labels",
                    "x-ves-example": "'ves.io/soft-deleted': 'true'"
                },
                "modification_timestamp": {
                    "type": "string",
                    "description": " ModificationTimestamp is a timestamp representing the server time when this object was\n last modified.",
                    "title": "modification_timestamp",
                    "format": "date-time",
                    "x-displayname": "Modification Timestamp"
                },
                "namespace": {
                    "type": "array",
                    "description": " The namespace this object belongs to. This is populated by the service based on the\n metadata.namespace field when an object is created.\n\nValidation Rules:\n  ves.io.schema.rules.repeated.max_items: 1\n",
                    "title": "namespace",
                    "maxItems": 1,
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Namespace Reference",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.repeated.max_items": "1"
                    }
                },
                "object_index": {
                    "type": "integer",
                    "description": " Unique index for the object. Some objects need a unique integer index to be allocated\n for each object type. This field will be populated for all objects that need it and will\n be zero otherwise.\n\nExample: - \"0\"-",
                    "title": "object_index",
                    "format": "int64",
                    "x-displayname": "Object Index",
                    "x-ves-example": "0"
                },
                "owner_view": {
                    "description": " Reference to the view object that owns this object.\n If there is no view owner, this field will be nil.\n If not nil, this object can only be edited/deleted through the view",
                    "title": "owner_view",
                    "$ref": "#/definitions/schemaViewRefType",
                    "x-displayname": "Owner View"
                },
                "sre_disable": {
                    "type": "boolean",
                    "description": " This should be set to true If VES/SRE operator wants to suppress an object from being\n presented to business-logic of a daemon(e.g. due to bad-form/issue-causing Object).\n This is meant only to be used in temporary situations for operational continuity till\n a fix is rolled out in business-logic.\n\nExample: - \"true\"-",
                    "title": "sre_disable",
                    "format": "boolean",
                    "x-displayname": "SRE Disable",
                    "x-ves-example": "true"
                },
                "tenant": {
                    "type": "string",
                    "description": " Tenant to which this configuration object belongs to. The value for this is found from\n presented credentials.\n\nExample: - \"acmecorp\"-",
                    "title": "tenant",
                    "x-displayname": "Tenant",
                    "x-ves-example": "acmecorp"
                },
                "trace_info": {
                    "type": "string",
                    "description": " trace_info holds information(\u003ctrace-id\u003e:\u003cspan-id\u003e:\u003cparent-span-id\u003e) of the request doing\n the object modification. This can be used on the watch side to create subsequent spans.\n This information can be used to co-relate activities across services (modulo state compression)\n for a synchronous API.\n\nExample: - \"value\"-",
                    "title": "trace_info",
                    "x-displayname": "Trace Info",
                    "x-ves-example": "value"
                },
                "uid": {
                    "type": "string",
                    "description": " uid is the unique in time and space value for this object. It is generated by\n the server on successful creation of an object and is not allowed to change on Replace\n API. The value of is taken from uid field of ObjectMetaType, if provided.\n\nExample: - \"d15f1fad-4d37-48c0-8706-df1824d76d31\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "d15f1fad-4d37-48c0-8706-df1824d76d31"
                },
                "vtrp_id": {
                    "type": "string",
                    "description": " Indicate origin of this object.",
                    "title": "vtrp_id",
                    "x-displayname": "VTRP ID"
                },
                "vtrp_stale": {
                    "type": "boolean",
                    "description": " Indicate whether mars deems this object to be stale via graceful restart timer information",
                    "title": "vtrp_stale",
                    "format": "boolean",
                    "x-displayname": "VTRP Stale"
                }
            }
        },
        "schemaTlsCertificateType": {
            "type": "object",
            "description": "Handle to fetch certificate and key",
            "title": "TlsCertificateType",
            "x-displayname": "TLS Certificate",
            "x-ves-oneof-field-ocsp_stapling_choice": "[\"custom_hash_algorithms\",\"disable_ocsp_stapling\",\"use_system_defaults\"]",
            "x-ves-proto-message": "ves.io.schema.TlsCertificateType",
            "properties": {
                "certificate_url": {
                    "type": "string",
                    "description": " TLS certificate.\n Certificate or certificate chain in PEM format including the PEM headers.\n\nExample: - \"value\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.certificate_url: true\n  ves.io.schema.rules.string.max_bytes: 131072\n  ves.io.schema.rules.string.min_bytes: 1\n",
                    "title": "certificate_url",
                    "minLength": 1,
                    "maxLength": 131072,
                    "x-displayname": "Certificate",
                    "x-ves-example": "value",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.certificate_url": "true",
                        "ves.io.schema.rules.string.max_bytes": "131072",
                        "ves.io.schema.rules.string.min_bytes": "1"
                    }
                },
                "custom_hash_algorithms": {
                    "description": "Exclusive with [disable_ocsp_stapling use_system_defaults]\n Use hash algorithms in the custom order. F5XC will try to fetch ocsp response from the CA in the given order. Additionally, LoadBalancer will not become active until ocspResponse cannot be fetched if the certificate has MustStaple extension set.",
                    "title": "Use Custom Order for Hash Algorithms",
                    "$ref": "#/definitions/schemaHashAlgorithms",
                    "x-displayname": "Use hash algorithms in custom order"
                },
                "description": {
                    "type": "string",
                    "description": " Description for the certificate\n\nExample: - \"Certificate used in production environment\"-",
                    "title": "description",
                    "x-displayname": "Description",
                    "x-ves-example": "Certificate used in production environment"
                },
                "disable_ocsp_stapling": {
                    "description": "Exclusive with [custom_hash_algorithms use_system_defaults]\n Disable OCSP Stapling. F5XC will not fetch and staple OCSP Response for this certificate.\n This is the default behavior if no choice is selected.",
                    "title": "Disable OCSP Stapling",
                    "$ref": "#/definitions/schemaEmpty",
                    "x-displayname": "Disable OCSP Stapling"
                },
                "private_key": {
                    "description": " TLS Private Key data in unencrypted PEM format including the PEM headers. The data may be optionally secured using BlindFold. TLS key has to match the accompanying certificate.\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "private_key",
                    "$ref": "#/definitions/schemaSecretType",
                    "x-displayname": "Private Key",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "use_system_defaults": {
                    "description": "Exclusive with [custom_hash_algorithms disable_ocsp_stapling]\n Use F5XC Default Settings to fetch and staple OCSP Response.\n OCSP Response will be stapled if it can be fetched. Additionally, LoadBalancer will not become active until ocspResponse cannot be fetched if the certificate has MustStaple extension set.\n F5XC will try to fetch OCSPResponse with sha256 and sha1 as HashAlgorithm, in that order.",
                    "title": "Fetch with F5XC default settings",
                    "$ref": "#/definitions/schemaEmpty",
                    "x-displayname": "Fetch with F5XC default settings"
                }
            }
        },
        "schemaTlsInterceptionPolicy": {
            "type": "object",
            "description": "Policy to enable or disable TLS interception.",
            "title": "TlsInterceptionPolicy",
            "x-displayname": "TLS Interception Policy",
            "x-ves-proto-message": "ves.io.schema.TlsInterceptionPolicy",
            "properties": {
                "interception_rules": {
                    "type": "array",
                    "description": " List of ordered rules to enable or disable for TLS interception\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.max_items: 32\n  ves.io.schema.rules.repeated.min_items: 1\n  ves.io.schema.rules.repeated.unique: true\n",
                    "title": "Interception Rules",
                    "minItems": 1,
                    "maxItems": 32,
                    "items": {
                        "$ref": "#/definitions/schemaTlsInterceptionRule"
                    },
                    "x-displayname": "TLS Interception Rules",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.max_items": "32",
                        "ves.io.schema.rules.repeated.min_items": "1",
                        "ves.io.schema.rules.repeated.unique": "true"
                    }
                }
            }
        },
        "schemaTlsInterceptionRule": {
            "type": "object",
            "description": "x-required\nRule to enable or disable TLS interception based on domain match",
            "title": "TlsInterceptionRule",
            "x-displayname": "TLS Interception Rule",
            "x-ves-oneof-field-enable_disable_choice": "[\"disable_interception\",\"enable_interception\"]",
            "x-ves-proto-message": "ves.io.schema.TlsInterceptionRule",
            "properties": {
                "disable_interception": {
                    "description": "Exclusive with [enable_interception]\n Disable Interception",
                    "title": "Disable Interception",
                    "$ref": "#/definitions/schemaEmpty",
                    "x-displayname": "Disable Interception"
                },
                "domain_match": {
                    "description": " Domain value or regular expression to match\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Domain Match",
                    "$ref": "#/definitions/schemaDomainType",
                    "x-displayname": "Match Domain",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "enable_interception": {
                    "description": "Exclusive with [disable_interception]\n Enable Interception",
                    "title": "Enable Interception",
                    "$ref": "#/definitions/schemaEmpty",
                    "x-displayname": "Enable Interception"
                }
            }
        },
        "schemaTlsInterceptionType": {
            "type": "object",
            "description": "Configuration to enable TLS interception",
            "title": "TlsInterceptionType",
            "x-displayname": "Configuration for TLS interception",
            "x-ves-oneof-field-interception_policy_choice": "[\"enable_for_all_domains\",\"policy\"]",
            "x-ves-oneof-field-signing_cert_choice": "[\"custom_certificate\",\"volterra_certificate\"]",
            "x-ves-oneof-field-trusted_ca_choice": "[\"trusted_ca_url\",\"volterra_trusted_ca\"]",
            "x-ves-proto-message": "ves.io.schema.TlsInterceptionType",
            "properties": {
                "custom_certificate": {
                    "description": "Exclusive with [volterra_certificate]\n Certificates for generating intermediate certificate for TLS interception.",
                    "title": "Custom Signing Certificate",
                    "$ref": "#/definitions/schemaTlsCertificateType",
                    "x-displayname": "Custom Signing Certificate"
                },
                "enable_for_all_domains": {
                    "description": "Exclusive with [policy]\n Enable interception for all domains",
                    "title": "Enable For All Domains",
                    "$ref": "#/definitions/schemaEmpty",
                    "x-displayname": "Enable For All Domains"
                },
                "policy": {
                    "description": "Exclusive with [enable_for_all_domains]\n Policy to enable/disable specific domains, with implicit enable all domains",
                    "title": "Policy for specific domains",
                    "$ref": "#/definitions/schemaTlsInterceptionPolicy",
                    "x-displayname": "Enable/Disable for Specific Domains"
                },
                "trusted_ca_url": {
                    "type": "string",
                    "description": "Exclusive with [volterra_trusted_ca]\n Custom Root CA Certificate for validating upstream server certificate\n\nValidation Rules:\n  ves.io.schema.rules.string.max_bytes: 131072\n  ves.io.schema.rules.string.uri_ref: true\n",
                    "title": "Custom Root CA Certificate",
                    "maxLength": 131072,
                    "x-displayname": "Custom Root CA Certificate",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.max_bytes": "131072",
                        "ves.io.schema.rules.string.uri_ref": "true"
                    }
                },
                "volterra_certificate": {
                    "description": "Exclusive with [custom_certificate]\n F5XC certificates for generating intermediate certificate for TLS interception.",
                    "title": "F5XC Signing Certificate",
                    "$ref": "#/definitions/schemaEmpty",
                    "x-displayname": "F5XC Signing Certificate"
                },
                "volterra_trusted_ca": {
                    "description": "Exclusive with [trusted_ca_url]\n F5XC Root CA Certificate for validating upstream server certificate",
                    "title": "F5XC List",
                    "$ref": "#/definitions/schemaEmpty",
                    "x-displayname": "F5XC Default Root CA Certificate"
                }
            }
        },
        "schemaTlsParamsType": {
            "type": "object",
            "description": "Information of different aspects for TLS authentication related to ciphers,\ncertificates and trust store",
            "title": "TlsParamsType",
            "x-displayname": "TLS Parameters",
            "x-ves-displayorder": "4,7,1,2,3",
            "x-ves-proto-message": "ves.io.schema.TlsParamsType",
            "properties": {
                "cipher_suites": {
                    "type": "array",
                    "description": " The following list specifies the supported cipher suite\n   TLS_AES_128_GCM_SHA256\n   TLS_AES_256_GCM_SHA384\n   TLS_CHACHA20_POLY1305_SHA256\n   TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n   TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n   TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\n   TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n   TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n   TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\n   TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\n   TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\n   TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\n   TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\n   TLS_RSA_WITH_AES_128_CBC_SHA\n   TLS_RSA_WITH_AES_128_GCM_SHA256\n   TLS_RSA_WITH_AES_256_CBC_SHA\n   TLS_RSA_WITH_AES_256_GCM_SHA384\n\n If not specified, the default list:\n   TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n   TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\n   TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n   TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\n   TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n   TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n will be used.\n\nExample: - \"TLS_AES_128_GCM_SHA256\"-\n\nValidation Rules:\n  ves.io.schema.rules.repeated.items.string.in: [\\\"TLS_AES_128_GCM_SHA256\\\",\\\"TLS_AES_256_GCM_SHA384\\\",\\\"TLS_CHACHA20_POLY1305_SHA256\\\",\\\"TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\\\",\\\"TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\\\",\\\"TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\\\",\\\"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\\\",\\\"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\\\",\\\"TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\\\",\\\"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\\\",\\\"TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\\\",\\\"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\\\",\\\"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\\\",\\\"TLS_RSA_WITH_AES_128_CBC_SHA\\\",\\\"TLS_RSA_WITH_AES_128_GCM_SHA256\\\",\\\"TLS_RSA_WITH_AES_256_CBC_SHA\\\",\\\"TLS_RSA_WITH_AES_256_GCM_SHA384\\\"]\n  ves.io.schema.rules.repeated.unique: true\n",
                    "title": "cipher_suites",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Cipher Suites",
                    "x-ves-example": "TLS_AES_128_GCM_SHA256",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.repeated.items.string.in": "[\\\"TLS_AES_128_GCM_SHA256\\\",\\\"TLS_AES_256_GCM_SHA384\\\",\\\"TLS_CHACHA20_POLY1305_SHA256\\\",\\\"TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\\\",\\\"TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\\\",\\\"TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\\\",\\\"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\\\",\\\"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\\\",\\\"TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\\\",\\\"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\\\",\\\"TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\\\",\\\"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\\\",\\\"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\\\",\\\"TLS_RSA_WITH_AES_128_CBC_SHA\\\",\\\"TLS_RSA_WITH_AES_128_GCM_SHA256\\\",\\\"TLS_RSA_WITH_AES_256_CBC_SHA\\\",\\\"TLS_RSA_WITH_AES_256_GCM_SHA384\\\"]",
                        "ves.io.schema.rules.repeated.unique": "true"
                    }
                },
                "maximum_protocol_version": {
                    "description": " Maximum TLS protocol version.",
                    "title": "maximum_protocol_version",
                    "$ref": "#/definitions/schemaTlsProtocol",
                    "x-displayname": "Maximum TLS Version"
                },
                "minimum_protocol_version": {
                    "description": " Minimum TLS protocol version.",
                    "title": "minimum_protocol_version",
                    "$ref": "#/definitions/schemaTlsProtocol",
                    "x-displayname": "Minimum TLS Version"
                },
                "tls_certificates": {
                    "type": "array",
                    "description": " Set of TLS certificates",
                    "title": "tls_certificates",
                    "items": {
                        "$ref": "#/definitions/schemaTlsCertificateType"
                    },
                    "x-displayname": "TLS Certificates"
                },
                "validation_params": {
                    "description": " This includes URL for a trust store, whether SAN verification is required\n and list of Subject Alt Names for verification",
                    "title": "validation_params",
                    "$ref": "#/definitions/schemaTlsValidationParamsType",
                    "x-displayname": "Root CA Validation parameters"
                }
            }
        },
        "schemaTlsProtocol": {
            "type": "string",
            "description": "TlsProtocol is enumeration of supported TLS versions\n\nF5 Distributed Cloud will choose the optimal TLS version.",
            "title": "TlsProtocol",
            "enum": [
                "TLS_AUTO",
                "TLSv1_0",
                "TLSv1_1",
                "TLSv1_2",
                "TLSv1_3"
            ],
            "default": "TLS_AUTO",
            "x-displayname": "TLS Protocol",
            "x-ves-proto-enum": "ves.io.schema.TlsProtocol"
        },
        "schemaTlsValidationParamsType": {
            "type": "object",
            "description": "This includes URL for a trust store, whether SAN verification is required\nand list of Subject Alt Names for verification",
            "title": "TlsValidationParamsType",
            "x-displayname": "TLS Certificate Validation Parameters",
            "x-ves-oneof-field-trusted_ca_choice": "[\"trusted_ca\",\"trusted_ca_url\"]",
            "x-ves-proto-message": "ves.io.schema.TlsValidationParamsType",
            "properties": {
                "skip_hostname_verification": {
                    "type": "boolean",
                    "description": " When True, skip verification of hostname i.e. CN/Subject Alt Name of certificate\n is not matched to the connecting hostname",
                    "title": "skip_hostname_verification",
                    "format": "boolean",
                    "x-displayname": "Skip verification of hostname"
                },
                "trusted_ca": {
                    "description": "Exclusive with [trusted_ca_url]\n Root CA Certificate",
                    "title": "trusted_ca",
                    "$ref": "#/definitions/schemaTrustedCAList",
                    "x-displayname": "Root CA Certificate"
                },
                "trusted_ca_url": {
                    "type": "string",
                    "description": "Exclusive with [trusted_ca]\n Inline Root CA Certificate\n\nValidation Rules:\n  ves.io.schema.rules.string.max_bytes: 131072\n  ves.io.schema.rules.string.truststore_url: true\n",
                    "title": "trusted_ca_url",
                    "maxLength": 131072,
                    "x-displayname": "Inline Root CA Certificate (legacy)",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.max_bytes": "131072",
                        "ves.io.schema.rules.string.truststore_url": "true"
                    }
                },
                "verify_subject_alt_names": {
                    "type": "array",
                    "description": " List of acceptable Subject Alt Names/CN in the peer's certificate.\n When skip_hostname_verification is false and verify_subject_alt_names is empty,\n the hostname of the peer will be used for matching against SAN/CN of peer's certificate\n\nExample: - \"value\"-",
                    "title": "verify_subject_alt_names",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "List of SANs for matching",
                    "x-ves-example": "value"
                }
            }
        },
        "schemaTrustedCAList": {
            "type": "object",
            "description": "Reference to Root CA Certificate",
            "title": "Root CA Certificate",
            "x-displayname": "Root CA Certificate Reference",
            "x-ves-proto-message": "ves.io.schema.TrustedCAList"
        },
        "schemaVaultSecretInfoType": {
            "type": "object",
            "description": "x-displayName: \"Vault Secret\"\nVaultSecretInfoType specifies information about the Secret managed by Hashicorp Vault.",
            "title": "VaultSecretInfoType",
            "properties": {
                "key": {
                    "type": "string",
                    "description": "x-displayName: \"Key\"\nx-example: \"key_pem\"\nKey of the individual secret. Vault Secrets are stored as key-value pair.\nIf user is only interested in one value from the map, this field should be set to the corresponding key.\nIf not provided entire secret will be returned.",
                    "title": "Key"
                },
                "location": {
                    "type": "string",
                    "description": "x-displayName: \"Location\"\nx-required\nx-example: \"v1/data/vhost_key\"\nPath to secret in Vault.",
                    "title": "Location"
                },
                "provider": {
                    "type": "string",
                    "description": "x-displayName: \"Provider\"\nx-required\nx-example: \"vault-vh-provider\"\nName of the Secret Management Access object that contains information about the backend Vault.",
                    "title": "Provider"
                },
                "secret_encoding": {
                    "description": "x-displayName: \"Secret Encoding\"\nThis field defines the encoding type of the secret BEFORE the secret is put into Hashicorp Vault.",
                    "title": "secret_encoding",
                    "$ref": "#/definitions/schemaSecretEncodingType"
                },
                "version": {
                    "type": "integer",
                    "description": "x-displayName: \"Version\"\nx-example: \"1\"\nVersion of the secret to be fetched. As vault secrets are versioned, user can specify this field to fetch specific version.\nIf not provided latest version will be returned.",
                    "title": "Version",
                    "format": "int64"
                }
            }
        },
        "schemaViewRefType": {
            "type": "object",
            "description": "ViewRefType represents a reference to a view",
            "title": "ViewRefType",
            "x-displayname": "View Reference",
            "x-ves-proto-message": "ves.io.schema.ViewRefType",
            "properties": {
                "kind": {
                    "type": "string",
                    "description": " Kind of the view object\n\nExample: - \"http_proxy\"-",
                    "title": "kind",
                    "x-displayname": "Kind",
                    "x-ves-example": "http_proxy"
                },
                "name": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then name will hold the referred object's(e.g. route's) name.\n\nExample: - \"contactus-route\"-",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "contactus-route"
                },
                "namespace": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then namespace will hold the referred object's(e.g. route's) namespace.\n\nExample: - \"ns1\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "ns1"
                },
                "uid": {
                    "type": "string",
                    "description": " UID of the view object\n\nExample: - \"f3744323-1adf-4aaa-a5dc-0707c1d1bd82\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "f3744323-1adf-4aaa-a5dc-0707c1d1bd82"
                }
            }
        },
        "schemaVirtualNetworkType": {
            "type": "string",
            "description": "Different types of virtual networks understood by the system\n\nVirtual-network of type VIRTUAL_NETWORK_SITE_LOCAL provides connectivity to public (outside) network.\nThis is an insecure network and is connected to public internet via NAT Gateways/firwalls\nVirtual-network of this type is local to every site. Two virtual networks of this type on different\nsites are neither related nor connected.\n\nConstraints:\nThere can be atmost one virtual network of this type in a given site.\nThis network type is supported on CE sites. This network is created automatically and present on all sites\nVirtual-network of type VIRTUAL_NETWORK_SITE_LOCAL_INSIDE is a private network inside site.\nIt is a secure network and is not connected to public network.\nVirtual-network of this type is local to every site. Two virtual networks of this type on different\nsites are neither related nor connected.\n\nConstraints:\nThere can be atmost one virtual network of this type in a given site.\nThis network type is supported on CE sites. This network is created during provisioning of site\nUser defined per-site virtual network. Scope of this virtual network is limited to the site.\nThis is not yet supported\nVirtual-network of type VIRTUAL_NETWORK_PUBLIC directly conects to the public internet.\nVirtual-network of this type is local to every site. Two virtual networks of this type on different sites are neither related nor connected.\n\nConstraints:\nThere can be atmost one virtual network of this type in a given site.\nThis network type is supported on RE sites only\nIt is an internally created by the system. They must not be created by user\nVirtual Neworks with global scope across different sites in F5XC domain.\nAn example global virtual-network called \"AIN Network\" is created for every tenant.\nfor volterra fabric\n\nConstraints:\nIt is currently only supported as internally created by the system.\nvK8s service network for a given tenant. Used to advertise a virtual host only to vk8s pods for that tenant\nConstraints:\nIt is an internally created by the system. Must not be created by user\nVER internal network for the site. It can only be used for virtual hosts with SMA_PROXY type proxy\nConstraints:\nIt is an internally created by the system. Must not be created by user\nVirtual-network of type VIRTUAL_NETWORK_SITE_LOCAL_INSIDE_OUTSIDE represents both\nVIRTUAL_NETWORK_SITE_LOCAL and VIRTUAL_NETWORK_SITE_LOCAL_INSIDE\n\nConstraints:\nThis network type is only meaningful in an advertise policy\nWhen virtual-network of type VIRTUAL_NETWORK_IP_AUTO is selected for\nan endpoint, VER will try to determine the network based on the provided\nIP address\n\nConstraints:\nThis network type is only meaningful in an endpoint\n\nVoltADN Private Network is used on volterra RE(s) to connect to customer private networks\nThis network is created by opening a support ticket\n\nThis network is per site srv6 network\nVER IP Fabric network for the site.\nThis Virtual network type is used for exposing virtual host on IP Fabric network on the VER site or\nfor endpoint in IP Fabric network\nConstraints:\nIt is an internally created by the system. Must not be created by user\nNetwork internally created for a segment\nConstraints:\nIt is an internally created by the system. Must not be created by user",
            "title": "VirtualNetworkType",
            "enum": [
                "VIRTUAL_NETWORK_SITE_LOCAL",
                "VIRTUAL_NETWORK_SITE_LOCAL_INSIDE",
                "VIRTUAL_NETWORK_PER_SITE",
                "VIRTUAL_NETWORK_PUBLIC",
                "VIRTUAL_NETWORK_GLOBAL",
                "VIRTUAL_NETWORK_SITE_SERVICE",
                "VIRTUAL_NETWORK_VER_INTERNAL",
                "VIRTUAL_NETWORK_SITE_LOCAL_INSIDE_OUTSIDE",
                "VIRTUAL_NETWORK_IP_AUTO",
                "VIRTUAL_NETWORK_VOLTADN_PRIVATE_NETWORK",
                "VIRTUAL_NETWORK_SRV6_NETWORK",
                "VIRTUAL_NETWORK_IP_FABRIC",
                "VIRTUAL_NETWORK_SEGMENT"
            ],
            "default": "VIRTUAL_NETWORK_SITE_LOCAL",
            "x-displayname": "Virtual Network Type",
            "x-ves-proto-enum": "ves.io.schema.VirtualNetworkType"
        },
        "schemaWafType": {
            "type": "object",
            "description": "WAF instance will be pointing to an app_firewall object",
            "title": "WafType",
            "x-displayname": "WAF Instance",
            "x-ves-oneof-field-ref_type": "[\"app_firewall\",\"disable_waf\",\"inherit_waf\"]",
            "x-ves-proto-message": "ves.io.schema.WafType",
            "properties": {
                "app_firewall": {
                    "description": "Exclusive with [disable_waf inherit_waf]\n A direct reference to an Application Firewall configuration object",
                    "title": "app_firewall",
                    "$ref": "#/definitions/schemaAppFirewallRefType",
                    "x-displayname": "Application Firewall"
                },
                "disable_waf": {
                    "description": "Exclusive with [app_firewall inherit_waf]\n Any Application Firewall configuration will not be enforced",
                    "title": "disable app firewall",
                    "$ref": "#/definitions/schemaEmpty",
                    "x-displayname": "Disabled"
                },
                "inherit_waf": {
                    "description": "Exclusive with [app_firewall disable_waf]\n Any Application Firewall configuration that was configured on a higher level will be enforced",
                    "title": "inherit app firewall",
                    "$ref": "#/definitions/schemaEmpty",
                    "x-displayname": "Inherit"
                }
            }
        },
        "schemaWingmanSecretInfoType": {
            "type": "object",
            "description": "x-displayName: \"Wingman Secret\"\nWingmanSecretInfoType specifies the handle to the wingman secret",
            "title": "WingmanSecretInfoType",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "x-displayName: \"Name\"\nx-required\nx-example: \"ChargeBack-API-Key\"\nName of the secret.",
                    "title": "Name"
                }
            }
        },
        "schemaXfccElement": {
            "type": "string",
            "description": "X-Forwarded-Client-Cert custom cookie elements\n\nThe entire client certificate in URL encoded PEM format.\nThe entire client certificate chain (including the leaf certificate) in URL encoded PEM format.\nThe Subject field of the current client certificate. The value is always double-quoted.\nThe URI type Subject Alternative Name field of the current client certificate.\nA client certificate may contain multiple URI type Subject Alternative Names,\neach will be a separate key-value pair.\nThe DNS type Subject Alternative Name field of the current client certificate.\nA client certificate may contain multiple DNS type Subject Alternative Names,\neach will be a separate key-value pair.",
            "title": "XfccElement",
            "enum": [
                "XFCC_NONE",
                "XFCC_CERT",
                "XFCC_CHAIN",
                "XFCC_SUBJECT",
                "XFCC_URI",
                "XFCC_DNS"
            ],
            "default": "XFCC_NONE",
            "x-displayname": "XFCC Elements",
            "x-ves-proto-enum": "ves.io.schema.XfccElement"
        },
        "schemaviewsObjectRefType": {
            "type": "object",
            "description": "This type establishes a direct reference from one object(the referrer) to another(the referred).\nSuch a reference is in form of tenant/namespace/name",
            "title": "ObjectRefType",
            "x-displayname": "Object reference",
            "x-ves-proto-message": "ves.io.schema.views.ObjectRefType",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then name will hold the referred object's(e.g. route's) name.\n\nExample: - \"contacts-route\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.max_bytes: 128\n  ves.io.schema.rules.string.min_bytes: 1\n",
                    "title": "name",
                    "minLength": 1,
                    "maxLength": 128,
                    "x-displayname": "Name",
                    "x-ves-example": "contacts-route",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.max_bytes": "128",
                        "ves.io.schema.rules.string.min_bytes": "1"
                    }
                },
                "namespace": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then namespace will hold the referred object's(e.g. route's) namespace.\n\nExample: - \"ns1\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.max_bytes: 64\n",
                    "title": "namespace",
                    "maxLength": 64,
                    "x-displayname": "Namespace",
                    "x-ves-example": "ns1",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.max_bytes": "64"
                    }
                },
                "tenant": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then tenant will hold the referred object's(e.g. route's) tenant.\n\nExample: - \"acmecorp\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.max_bytes: 64\n",
                    "title": "tenant",
                    "maxLength": 64,
                    "x-displayname": "Tenant",
                    "x-ves-example": "acmecorp",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.max_bytes": "64"
                    }
                }
            }
        },
        "schemavirtual_hostGlobalSpecType": {
            "type": "object",
            "description": "Configuration specification for VirtualHost",
            "title": "GlobalSpecType",
            "x-displayname": "Global Configuration Specification",
            "x-ves-oneof-field-authentication_choice": "[\"authentication\",\"no_authentication\"]",
            "x-ves-oneof-field-bot_defense_choice": "[]",
            "x-ves-oneof-field-challenge_type": "[\"captcha_challenge\",\"js_challenge\",\"no_challenge\"]",
            "x-ves-oneof-field-ddos_auto_mitigation_action": "[\"block\",\"ddos_js_challenge\",\"l7_ddos_action_default\"]",
            "x-ves-oneof-field-default_lb_choice": "[\"default_loadbalancer\",\"non_default_loadbalancer\"]",
            "x-ves-oneof-field-dns_zone_state_choice": "[\"not_ready\",\"ready\"]",
            "x-ves-oneof-field-path_normalize_choice": "[\"disable_path_normalize\",\"enable_path_normalize\"]",
            "x-ves-oneof-field-server_header_choice": "[\"append_server_name\",\"default_header\",\"pass_through\",\"server_name\"]",
            "x-ves-oneof-field-strict_sni_host_header_check_choice": "[]",
            "x-ves-oneof-field-tls_certificates_choice": "[\"tls_cert_params\",\"tls_parameters\"]",
            "x-ves-oneof-field-trust_client_ip_headers_choice": "[\"disable_trust_client_ip_headers\",\"enable_trust_client_ip_headers\"]",
            "x-ves-proto-message": "ves.io.schema.virtual_host.GlobalSpecType",
            "properties": {
                "add_location": {
                    "type": "boolean",
                    "description": " x-example: true\n Appends header x-volterra-location = \u003cre-site-name\u003e in responses. This configuration\n is ignored on CE sites.\n\nExample: - \"true\"-",
                    "title": "Add Site information",
                    "format": "boolean",
                    "x-displayname": "Add Location",
                    "x-ves-example": "true"
                },
                "advertise_policies": {
                    "type": "array",
                    "description": " Advertise Policy allows you to define networks or sites where you want a VIP for this virtual host to be advertised.\n Each Policy rule can have different parameters, like TLS configuration, ports, optionally ip address to be used for VIP.\n If advertise policy is not specified then no VIP is assigned for this virtual host.",
                    "title": "Advertise Policy",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Advertise Policies"
                },
                "append_server_name": {
                    "type": "string",
                    "description": "Exclusive with [default_header pass_through server_name]\n Specifies the value to be used for Server header if it is not already present.\n If Server Header is already present it is not overwritten. It is just passed.\n\nValidation Rules:\n  ves.io.schema.rules.string.max_len: 8096\n",
                    "title": "append_server_name",
                    "maxLength": 8096,
                    "x-displayname": "Append Server Name if absent",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.max_len": "8096"
                    }
                },
                "authentication": {
                    "description": "Exclusive with [no_authentication]\n Configure authentication details",
                    "title": "Authentication Enabled",
                    "$ref": "#/definitions/virtual_hostAuthenticationDetails",
                    "x-displayname": "Enable Authentication"
                },
                "auto_cert": {
                    "type": "boolean",
                    "description": " Automatically generated certificates. If this field is set, the user cannot specifi the TLS certificates",
                    "title": "Auto Certificates",
                    "format": "boolean",
                    "x-displayname": "Auto Certificates"
                },
                "auto_cert_error_msg": {
                    "type": "string",
                    "description": " Last encountered error message during certificate minting process.",
                    "title": "Auto Cert Error Message",
                    "x-displayname": "Auto Cert Error Message"
                },
                "auto_cert_info": {
                    "description": " Auto certificate related information",
                    "title": "Auto Cert Information",
                    "$ref": "#/definitions/virtual_hostAutoCertInfoType",
                    "x-displayname": "Auto Cert Information"
                },
                "auto_cert_state": {
                    "description": " State of auto certificate generation.",
                    "title": "Auto Cert State",
                    "$ref": "#/definitions/virtual_hostCertificationState",
                    "x-displayname": "Auto Cert State"
                },
                "block": {
                    "description": "Exclusive with [ddos_js_challenge l7_ddos_action_default]\n Block all suspicious sources",
                    "title": "Block",
                    "$ref": "#/definitions/schemaEmpty",
                    "x-displayname": "Block"
                },
                "buffer_policy": {
                    "description": " Some upstream applications are not capable of handling streamed data and high network latency.\n This config enables buffering the entire request before sending to upstream application. We can\n specify the maximum buffer size and buffer interval with this config.",
                    "title": "Buffer configuration for requests",
                    "$ref": "#/definitions/schemaBufferConfigType",
                    "x-displayname": "Buffer Policy"
                },
                "captcha_challenge": {
                    "description": "Exclusive with [js_challenge no_challenge]\n Configure Captcha challenge on Virtual Host",
                    "title": "Captcha Challenge",
                    "$ref": "#/definitions/virtual_hostCaptchaChallengeType",
                    "x-displayname": "Captcha Challenge"
                },
                "cdn_service": {
                    "description": " Configure CDN parameters",
                    "title": "CDN Parameters",
                    "$ref": "#/definitions/virtual_hostCdnServiceType",
                    "x-displayname": "CDN Parameters"
                },
                "compression_params": {
                    "description": " Enables loadbalancer to compress dispatched data from an upstream service upon client request.\n Only GZIP compression is supported",
                    "title": "Compression configuration",
                    "$ref": "#/definitions/virtual_hostCompressionType",
                    "x-displayname": "Compression Parameters"
                },
                "connection_idle_timeout": {
                    "type": "integer",
                    "description": " The idle timeout for downstream connections. The idle timeout is defined as the\n period in which there are no active requests. When the idle timeout is reached the connection\n will be closed. Note that request based timeouts mean that HTTP/2 PINGs will not keep the connection alive.\n This is specified in milliseconds. The default value is 2 minutes.\n\nExample: - \"60000\"-\n\nValidation Rules:\n  ves.io.schema.rules.uint32.lte: 600000\n",
                    "title": "Connection Idle Timeout",
                    "format": "int64",
                    "x-displayname": "Connection Idle Timeout",
                    "x-ves-example": "60000",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.uint32.lte": "600000"
                    }
                },
                "cors_policy": {
                    "description": " CORS is a mechanism that uses additional HTTP headers to tell a browser to let\n a web application running at one origin (domain) have permission to access selected\n resources from a server at a different origin",
                    "title": "Cross-Origin Resource Sharing (CORS) configuration for requests",
                    "$ref": "#/definitions/schemaCorsPolicy",
                    "x-displayname": "CORS Policy"
                },
                "csrf_policy": {
                    "description": " Cross-Site Request Forgery configuration.\n\n CSRF is a mechanism that checks if request received at the server is from legitimate user.",
                    "title": "csrf_policy",
                    "$ref": "#/definitions/schemaCsrfPolicy",
                    "x-displayname": "CSRF Policy"
                },
                "custom_errors": {
                    "type": "object",
                    "description": "\n Map of integer error codes as keys and string values that can be used to provide custom\n http pages for each error code.\n Key of the map can be either response code class or HTTP Error code. Response code classes\n for key is configured as follows\n 3 -- for 3xx response code class\n 4 -- for 4xx response code class\n 5 -- for 5xx response code class\n Value is the uri_ref. Currently supported URL schemes is string:///.\n For string:/// scheme, message needs to be encoded in Base64 format.\n You can specify this message as base64 encoded plain text message e.g. \"Access Denied\"\n or it can be HTML paragraph or a body string encoded as base64 string\n E.g. \"\u003cp\u003e Access Denied \u003c/p\u003e\". Base64 encoded string for this html is \"PHA+IEFjY2VzcyBEZW5pZWQgPC9wPg==\"\n Specific response code takes preference when both response code and response code class\n matches for a request.\n\n The configured custom errors are only applicable for loadbalancer generated errors.\n Errors returned from upstream server is propagated as is.\n\n F5XC provides default error pages for the errors generated by the loadbalancer. Content of\n these pages are not editable. User has an option to disable the use of default F5XC error pages\n\nExample: - \"value\"-\n\nValidation Rules:\n  ves.io.schema.rules.map.keys.uint32.gte: 3\n  ves.io.schema.rules.map.keys.uint32.lte: 599\n  ves.io.schema.rules.map.max_pairs: 16\n  ves.io.schema.rules.map.values.string.max_len: 65536\n  ves.io.schema.rules.map.values.string.uri_ref: true\n",
                    "title": "Custom Errors",
                    "x-displayname": "Custom Error Responses",
                    "x-ves-example": "value",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.map.keys.uint32.gte": "3",
                        "ves.io.schema.rules.map.keys.uint32.lte": "599",
                        "ves.io.schema.rules.map.max_pairs": "16",
                        "ves.io.schema.rules.map.values.string.max_len": "65536",
                        "ves.io.schema.rules.map.values.string.uri_ref": "true"
                    }
                },
                "ddos_js_challenge": {
                    "description": "Exclusive with [block l7_ddos_action_default]\n Serve JavaScript challenge to all suspicious sources",
                    "title": "JavaScript Challenge",
                    "$ref": "#/definitions/virtual_hostJavascriptChallengeType",
                    "x-displayname": "JavaScript Challenge"
                },
                "default_header": {
                    "description": "Exclusive with [append_server_name pass_through server_name]\n Specifies that the default value of \"volt-adc\" should be used for Server Header",
                    "title": "default_header",
                    "$ref": "#/definitions/schemaEmpty",
                    "x-displayname": "Default value for Server header"
                },
                "default_loadbalancer": {
                    "description": "Exclusive with [non_default_loadbalancer]\n",
                    "title": "Default load balancer",
                    "$ref": "#/definitions/schemaEmpty",
                    "x-displayname": "Yes"
                },
                "disable_default_error_pages": {
                    "type": "boolean",
                    "description": "\n An option to specify whether to disable using default F5XC error pages\n\nExample: - \"true\"-",
                    "title": "Disable use of default Error page",
                    "format": "boolean",
                    "x-displayname": "Disable default error pages",
                    "x-ves-example": "true"
                },
                "disable_dns_resolve": {
                    "type": "boolean",
                    "description": "\n Disable DNS resolution for domains specified in the virtual host\n\n When the  virtual host is configured as Dynamive Resolve Proxy (DRP), disable DNS resolution\n for domains configured.  This configuration is suitable for HTTP CONNECT proxy.\n\nExample: - \"false\"-",
                    "title": "Disable DNS Resolve",
                    "format": "boolean",
                    "x-displayname": "Disable DNS resolution",
                    "x-ves-example": "false"
                },
                "disable_path_normalize": {
                    "description": "Exclusive with [enable_path_normalize]\n Path normalization is disabled",
                    "title": "Disable Path normalization",
                    "$ref": "#/definitions/schemaEmpty",
                    "x-displayname": "Disable path normalization"
                },
                "disable_trust_client_ip_headers": {
                    "description": "Exclusive with [enable_trust_client_ip_headers]\n",
                    "title": "Disable",
                    "$ref": "#/definitions/schemaEmpty",
                    "x-displayname": "Disable"
                },
                "dns_domains": {
                    "type": "array",
                    "description": " Internal reference to dns_domain object\n\nValidation Rules:\n  ves.io.schema.rules.repeated.max_items: 256\n",
                    "title": "DNS domain refs",
                    "maxItems": 256,
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "DNS Domains",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.repeated.max_items": "256"
                    }
                },
                "dns_info": {
                    "type": "array",
                    "description": " DNS information for this virtual host",
                    "title": "DNS information",
                    "items": {
                        "$ref": "#/definitions/virtual_host_dns_infoDnsInfo"
                    },
                    "x-displayname": "DNS Information"
                },
                "dns_volterra_managed": {
                    "type": "boolean",
                    "description": " Is DNS for the specified domain managed by volterra. If this field is set, DNS record will be automatically added to the DNS domain.",
                    "title": "DNS F5XC Managed",
                    "format": "boolean",
                    "x-displayname": "DNS F5XC Managed"
                },
                "dns_zones": {
                    "type": "array",
                    "description": " Internal reference to dns_zone object\n\nValidation Rules:\n  ves.io.schema.rules.repeated.max_items: 256\n",
                    "title": "DNS Zone refs",
                    "maxItems": 256,
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "DNS Zone",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.repeated.max_items": "256"
                    }
                },
                "domains": {
                    "type": "array",
                    "description": " A list of domains (host/authority header) that will be matched to this virtual host.\n Wildcard hosts are supported in the suffix or prefix form\n\n Domain search order:\n  1. Exact domain names: www.foo.com.\n  2. Prefix domain wildcards: *.foo.com or *-bar.foo.com.\n  3. Special wildcard * matching any domain.\n\n Wildcard will not match empty string.\n e.g. *-bar.foo.com will match baz-bar.foo.com but not -bar.foo.com.\n The longest wildcards match first.\n Only a single virtual host in the entire route configuration can match on *.\n Also a domain must be unique across all virtual hosts within an advertise policy.\n\n Domains are also used for SNI matching if the virtual host proxy type is TCP_PROXY_WITH_SNI/HTTPS_PROXY\n Domains also indicate the list of names for which DNS resolution will be done by VER\n\nExample: - \"www.foo.com\"-\n\nValidation Rules:\n  ves.io.schema.rules.repeated.items.string.vh_domain: true\n  ves.io.schema.rules.repeated.max_items: 33\n  ves.io.schema.rules.repeated.unique: true\n",
                    "title": "domains",
                    "maxItems": 33,
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Domains",
                    "x-ves-example": "www.foo.com",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.repeated.items.string.vh_domain": "true",
                        "ves.io.schema.rules.repeated.max_items": "33",
                        "ves.io.schema.rules.repeated.unique": "true"
                    }
                },
                "dynamic_reverse_proxy": {
                    "description": " In this mode of proxy, virtual host will resolve the destination endpoint dynamically.\n\n The dynamic resolution is done using a predefined field in the request. This predefined\n field depends on the ProxyType configured on the Virtual Host.\n\n For HTTP traffic, i.e. with ProxyType as HTTP_PROXY or HTTPS_PROXY, virtual host will use the\n \"HOST\" http header from the request and perform DNS resolution to select destination endpoint.\n\n For TCP traffic with SNI, (If the ProxyType is TCP_PROXY_WITH_SNI), virtual host will perform DNS\n resolution using the SNI.\n\n The DNS resolution is performed in the virtual network specified in outside_network_type or\n outside_network\n\n In both modes of operation(either using Host header or SNI), the DNS resolution could return\n multiple addresses. First IPv4 address from such returned list is used as endpoint for the\n request. The DNS response is cached for 60s by default.",
                    "title": "Enable the dynamic resolution of the endpoint",
                    "$ref": "#/definitions/virtual_hostDynamicReverseProxyType",
                    "x-displayname": "Dynamic Reverse Proxy"
                },
                "enable_path_normalize": {
                    "description": "Exclusive with [disable_path_normalize]\n Path normalization is enabled",
                    "title": "Enable Path normalization",
                    "$ref": "#/definitions/schemaEmpty",
                    "x-displayname": "Enable path normalization"
                },
                "enable_trust_client_ip_headers": {
                    "description": "Exclusive with [disable_trust_client_ip_headers]\n",
                    "title": "Enable",
                    "$ref": "#/definitions/virtual_hostClientIPHeaders",
                    "x-displayname": "Enable"
                },
                "host_name": {
                    "type": "string",
                    "description": " Internally generated host name to be used for the virtual host\n\nExample: - \"ves-io-cf8684b9-a18f-4843-a24f-1f9ee8ea2776.ac.vh.ves.io\"-",
                    "title": "host name",
                    "x-displayname": "Host Name",
                    "x-ves-example": "ves-io-cf8684b9-a18f-4843-a24f-1f9ee8ea2776.ac.vh.ves.io"
                },
                "idle_timeout": {
                    "type": "integer",
                    "description": " Idle timeout is the amount of time that the loadbalancer will allow a stream to exist with\n no upstream or downstream activity.\n\n Idle timeout and Proxy Type:\n\n HTTP_PROXY, HTTPS_PROXY:\n Idle timer is started when the first byte is received on the connection.\n Each time an encode/decode event for headers or data is processed for the stream,\n the timer will be reset.\n If the timeout fires, the stream is terminated with a 504 (Gateway Timeout) error code if\n no upstream response header has been received, otherwise a stream reset occurs.\n The default idle timeout is 30 seconds\n\n TCP PROXY, TCP_PROXY_WITH_SNI, SMA_PROXY:\n The idle timeout is defined as the period in which there are no bytes sent or received on\n either the upstream or downstream connection.\n The default idle timeout is 1 hour.\n\n UDP PROXY:\n The idle timeout for sessions. Idle timeout is defined as the period in which there are no\n datagrams sent or received on the session.\n The default if not specified is 1 minute.\n\nExample: - \"2000\"-",
                    "title": "Idle timeout",
                    "format": "int64",
                    "x-displayname": "Idle timeout (in milliseconds)",
                    "x-ves-example": "2000"
                },
                "javascript_info": {
                    "description": " Custom JavaScript Configuration. Custom JavaScript code can be executed at various stages of request processing.",
                    "title": "javascript_info",
                    "$ref": "#/definitions/virtual_hostJavaScriptConfigType",
                    "x-displayname": "Javascript Info"
                },
                "js_challenge": {
                    "description": "Exclusive with [captcha_challenge no_challenge]\n Configure Javascript challenge on Virtual Host",
                    "title": "Javascript Challenge",
                    "$ref": "#/definitions/virtual_hostJavascriptChallengeType",
                    "x-displayname": "Javascript Challenge"
                },
                "jwt": {
                    "type": "array",
                    "description": " This HTTP filter specifies how to verify JSON Web Token (JWT). It will verify its signature,\n audiences and issuer",
                    "title": "JSON Web Token authentication (JWT) configuration for requests",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "JWT Config"
                },
                "l7_ddos_action_default": {
                    "description": "Exclusive with [block ddos_js_challenge]\n Block suspicious sources",
                    "title": "Default",
                    "$ref": "#/definitions/schemaEmpty",
                    "x-displayname": "Default"
                },
                "max_request_header_size": {
                    "type": "integer",
                    "description": "\n The maximum request header size in KiB for incoming connections.\n\n If un-configured, the default max request headers allowed is 60 KiB.\n\n Requests that exceed this limit will receive a 431 response.\n\n The max configurable limit is 96 KiB, based on current implementation constraints.\n\n Note:\n   a. This configuration parameter is applicable only for HTTP_PROXY and HTTPS_PROXY\n   b. When multiple HTTP_PROXY virtual hosts share the same advertise policy, the effective\n      \"maximum request header size\" for such virtual hosts is the highest value configured\n      on any of the virtual hosts\n\nExample: - \"42\"-\n\nValidation Rules:\n  ves.io.schema.rules.uint32.lte: 96\n",
                    "title": "Maximum request header size",
                    "format": "int64",
                    "x-displayname": "Maximum Request Header Size (KiB)",
                    "x-ves-example": "42",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.uint32.lte": "96"
                    }
                },
                "no_authentication": {
                    "description": "Exclusive with [authentication]\n Disable Authentication",
                    "title": "Disable Authentication",
                    "$ref": "#/definitions/schemaEmpty",
                    "x-displayname": "Disable Authentication"
                },
                "no_challenge": {
                    "description": "Exclusive with [captcha_challenge js_challenge]\n No challenge is enabled for this virtual host",
                    "title": "No Challenge",
                    "$ref": "#/definitions/schemaEmpty",
                    "x-displayname": "No Challenge"
                },
                "non_default_loadbalancer": {
                    "description": "Exclusive with [default_loadbalancer]\n",
                    "title": "Not a default load balancer",
                    "$ref": "#/definitions/schemaEmpty",
                    "x-displayname": "No"
                },
                "not_ready": {
                    "description": "Exclusive with [ready]\n",
                    "title": "DNS Zone config is not ready",
                    "$ref": "#/definitions/schemaEmpty",
                    "x-displayname": "Not Ready"
                },
                "pass_through": {
                    "description": "Exclusive with [append_server_name default_header server_name]\n Passes existing Server Header as is. If server header is absent, nothing is\n appended.",
                    "title": "pass_through",
                    "$ref": "#/definitions/schemaEmpty",
                    "x-displayname": "Pass existing Server header"
                },
                "proxy": {
                    "description": " Indicates whether the type of proxy is UDP/Secret Management Access",
                    "title": "Proxy Type",
                    "$ref": "#/definitions/virtual_hostProxyType",
                    "x-displayname": "Proxy Type"
                },
                "rate_limiter": {
                    "type": "array",
                    "description": " A reference to rate_limiter object.\n Requests to the virtual_host are rate limited based on the parameters specified in the rate_limiter.\n\nValidation Rules:\n  ves.io.schema.rules.repeated.max_items: 1\n",
                    "title": "rate_limiter",
                    "maxItems": 1,
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Rate Limiter",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.repeated.max_items": "1"
                    }
                },
                "rate_limiter_allowed_prefixes": {
                    "type": "array",
                    "description": " References to ip_prefix_set objects.\n Requests from source IP addresses that are covered by one of the allowed IP Prefixes are not subjected to rate limiting.\n\nValidation Rules:\n  ves.io.schema.rules.repeated.max_items: 4\n",
                    "title": "rate_limiter_allowed_prefixes",
                    "maxItems": 4,
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Rate Limiter Allowed Prefixes",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.repeated.max_items": "4"
                    }
                },
                "ready": {
                    "description": "Exclusive with [not_ready]\n",
                    "title": "DNS Zone config is not ready",
                    "$ref": "#/definitions/schemaEmpty",
                    "x-displayname": "Ready"
                },
                "request_headers_to_add": {
                    "type": "array",
                    "description": " Headers are key-value pairs to be added to HTTP request being routed towards upstream.\n Headers specified at this level are applied after headers from matched Route are applied\n\nValidation Rules:\n  ves.io.schema.rules.repeated.max_items: 32\n  ves.io.schema.rules.repeated.unique: true\n",
                    "title": "Headers to add in request",
                    "maxItems": 32,
                    "items": {
                        "$ref": "#/definitions/schemaHeaderManipulationOptionType"
                    },
                    "x-displayname": "Add Request Headers",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.repeated.max_items": "32",
                        "ves.io.schema.rules.repeated.unique": "true"
                    }
                },
                "request_headers_to_remove": {
                    "type": "array",
                    "description": " List of keys of Headers to be removed from the HTTP request being sent towards upstream.\n\nExample: - \"host\"-\n\nValidation Rules:\n  ves.io.schema.rules.repeated.max_items: 32\n  ves.io.schema.rules.repeated.unique: true\n",
                    "title": "Header to be removed from request",
                    "maxItems": 32,
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Remove Request Headers",
                    "x-ves-example": "host",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.repeated.max_items": "32",
                        "ves.io.schema.rules.repeated.unique": "true"
                    }
                },
                "response_headers_to_add": {
                    "type": "array",
                    "description": " Headers are key-value pairs to be added to HTTP response being sent towards downstream.\n Headers specified at this level are applied after headers from matched Route are applied\n\nValidation Rules:\n  ves.io.schema.rules.repeated.max_items: 32\n  ves.io.schema.rules.repeated.unique: true\n",
                    "title": "Headers to add in response",
                    "maxItems": 32,
                    "items": {
                        "$ref": "#/definitions/schemaHeaderManipulationOptionType"
                    },
                    "x-displayname": "Add Response Headers",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.repeated.max_items": "32",
                        "ves.io.schema.rules.repeated.unique": "true"
                    }
                },
                "response_headers_to_remove": {
                    "type": "array",
                    "description": " List of keys of Headers to be removed from the HTTP response being sent towards downstream.\n\nExample: - \"host\"-\n\nValidation Rules:\n  ves.io.schema.rules.repeated.max_items: 32\n  ves.io.schema.rules.repeated.unique: true\n",
                    "title": "Header to be removed from response",
                    "maxItems": 32,
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Remove Response Headers",
                    "x-ves-example": "host",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.repeated.max_items": "32",
                        "ves.io.schema.rules.repeated.unique": "true"
                    }
                },
                "retry_policy": {
                    "description": " Indicates that the virtual_host has a retry policy.",
                    "title": "retry_policy",
                    "$ref": "#/definitions/schemaRetryPolicyType",
                    "x-displayname": "Retry Policy"
                },
                "routes": {
                    "type": "array",
                    "description": " The list of routes that will be matched, in order, for incoming requests.\n The first route that matches will be used. Currently route object is redundant in case of TCP proxy but required.\n For TCP_PROXY/TCP_PROXY_WITH_SNI/SMA_PROXY VirtualHosts, the route object only specifies the cluster/weighted-cluster\n as route destination without any match condition. In other words, match condition in route object is ignored for\n TCP_PROXY/TCP_PROXY_WITH_SNI/SMA_PROXY VirtualHosts. Routes used for TCP_PROXY/TCP_PROXY_WITH_SNI/SMA_PROXY\n VirtualHosts cannot have DirectResponse or Redirect as actions.\n\nValidation Rules:\n  ves.io.schema.rules.repeated.max_items: 256\n",
                    "title": "routes",
                    "maxItems": 256,
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Routes",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.repeated.max_items": "256"
                    }
                },
                "server_name": {
                    "type": "string",
                    "description": "Exclusive with [append_server_name default_header pass_through]\n Specifies the value to be used for Server header inserted in responses.\n This will overwrite existing values if any for Server Header\n\nValidation Rules:\n  ves.io.schema.rules.string.max_len: 8096\n",
                    "title": "server_name",
                    "maxLength": 8096,
                    "x-displayname": "Server Name",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.max_len": "8096"
                    }
                },
                "slow_ddos_mitigation": {
                    "description": " A Low and Slow DDoS attack, also known as a slow-rate attack, involves what appears to be\n legitimate traffic at a very slow rate. This type of state exhaustion DDoS attack targets\n application and server resources and is difficult to distinguish from normal traffic.\n This configuration helps to mitigate such type of attacks.",
                    "title": "Slow DDOS Mitigation",
                    "$ref": "#/definitions/virtual_hostSlowDDoSMitigation",
                    "x-displayname": "Slow DDOS Mitigation"
                },
                "state": {
                    "description": " State of the virtual host",
                    "title": "Virtual Host state",
                    "$ref": "#/definitions/virtual_hostVirtualHostState",
                    "x-displayname": "Virtual Host State"
                },
                "tls_cert_params": {
                    "description": "Exclusive with [tls_parameters]\n TLS parameters for downstream connections. These parameters are used if not specified\n in advertise policy",
                    "$ref": "#/definitions/schemaCertificateParamsType",
                    "x-displayname": "TLS Parameters"
                },
                "tls_intercept": {
                    "description": "\n Specify TLS interception configuration for the virtual host",
                    "title": "TLS Interception",
                    "$ref": "#/definitions/schemaTlsInterceptionType",
                    "x-displayname": "TLS Interception"
                },
                "tls_parameters": {
                    "description": "Exclusive with [tls_cert_params]\n TLS parameters for downstream connections. These parameters are used if not specified\n in advertise policy",
                    "$ref": "#/definitions/ioschemaDownstreamTlsParamsType",
                    "x-displayname": "TLS Parameters"
                },
                "type": {
                    "description": " VirtualHostType indicates if virtual_host is used as VIRTUAL_SERVICE/LOAD_BALANCER/API_GATEWAY.\n Functionally, all types are same, this is mainly used for categorizing metrics and UI visualization.",
                    "title": "Virtual host type",
                    "$ref": "#/definitions/virtual_hostVirtualHostType",
                    "x-displayname": "Virtual Host Type"
                },
                "user_domains": {
                    "type": "array",
                    "description": " User Provided domains. Used internally.\n\nValidation Rules:\n  ves.io.schema.rules.repeated.items.string.min_bytes: 1\n  ves.io.schema.rules.repeated.max_items: 32\n  ves.io.schema.rules.repeated.unique: true\n",
                    "title": "User Domains",
                    "maxItems": 32,
                    "items": {
                        "type": "string",
                        "minLength": 1
                    },
                    "x-displayname": "User Provided Domains",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.repeated.items.string.min_bytes": "1",
                        "ves.io.schema.rules.repeated.max_items": "32",
                        "ves.io.schema.rules.repeated.unique": "true"
                    }
                },
                "user_identification": {
                    "type": "array",
                    "description": " A reference to user_identification object.\n The rules in the user_identification object are evaluated to determine the user identifier to be rate limited.\n\nValidation Rules:\n  ves.io.schema.rules.repeated.max_items: 1\n",
                    "title": "user_identification",
                    "maxItems": 1,
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "User Identification Policy",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.repeated.max_items": "1"
                    }
                },
                "volterra_cert": {
                    "type": "boolean",
                    "description": " F5XC managed certificates. If this field is set, the user cannot specifi the TLS certificates",
                    "title": "F5XC Certificates",
                    "format": "boolean",
                    "x-displayname": "F5XC Certificates"
                },
                "waf_type": {
                    "description": " WAF can be used to analyze inbound and outbound http/https traffic.\n WAF can be configured either in BLOCKing Mode or ALERTing Mode.\n In BLOCKing mode if WAF detects suspicious inbound/outbound traffic it blocks the request or response.\n In ALERTing mode if suspicious traffic is detected, WAF generates ALERTs with details on the\n suspicious traffic (instead of blocking traffic).\n\n waf_type is the App Firewall profile to use.",
                    "title": "Enable the WAF (Web Application Firewall) functionality for VirtualHost",
                    "$ref": "#/definitions/schemaWafType",
                    "x-displayname": "WAF Config"
                }
            }
        },
        "schemavirtual_hostSpecType": {
            "type": "object",
            "description": "Shape of the virtual host specification",
            "title": "Specification for Virtual Host",
            "x-displayname": "Specification",
            "x-ves-proto-message": "ves.io.schema.virtual_host.SpecType",
            "properties": {
                "gc_spec": {
                    "title": "gc_spec",
                    "$ref": "#/definitions/schemavirtual_hostGlobalSpecType",
                    "x-displayname": "GC Spec"
                }
            }
        },
        "virtual_hostApiSpec": {
            "type": "object",
            "description": "x-displayName: \"OpenAPI Specification\"\nOpenAPI specification settings",
            "title": "OpenAPI Specification",
            "properties": {
                "api_definition": {
                    "description": "x-displayName: \"API Definition\"\nx-required\nAPI definition is set on this vhost for enforcing OpenAPI on requests",
                    "title": "API Definition",
                    "$ref": "#/definitions/schemaviewsObjectRefType"
                },
                "disable_open_api_validation": {
                    "description": "x-displayName: \"Disable OpenApi Validation\"\nNo OpenApi Validation configuration for this VH",
                    "title": "Disable OpenApi Validation",
                    "$ref": "#/definitions/schemaEmpty"
                },
                "enable_open_api_validation": {
                    "description": "x-displayName: \"Specify OpenApi Validation Configuration\"\nOpenApi Validation configuration object",
                    "title": "Shape Bot Defense",
                    "$ref": "#/definitions/virtual_hostOpenApiValidationSettings"
                }
            }
        },
        "virtual_hostAuthenticationDetails": {
            "type": "object",
            "description": "Authentication related information. This allows to configure the URL to redirect after the authentication\nAuthentication Object Reference, configuration of cookie params etc",
            "title": "AuthenticationDetails",
            "x-displayname": "Authentication Details",
            "x-ves-oneof-field-cookie_params_choice": "[\"cookie_params\",\"use_auth_object_config\"]",
            "x-ves-oneof-field-redirect_url_choice": "[\"redirect_dynamic\",\"redirect_url\"]",
            "x-ves-proto-message": "ves.io.schema.virtual_host.AuthenticationDetails",
            "properties": {
                "auth_config": {
                    "type": "array",
                    "description": " Reference to Authentication Config Object\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.max_items: 1\n",
                    "title": "Authentication Object",
                    "maxItems": 1,
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Reference to Authentication Object",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.max_items": "1"
                    }
                },
                "cookie_params": {
                    "description": "Exclusive with [use_auth_object_config]\n Configure all Cookie params",
                    "title": "Cookie param configuration details",
                    "$ref": "#/definitions/authenticationCookieParams",
                    "x-displayname": "Configure Cookie Params"
                },
                "redirect_dynamic": {
                    "description": "Exclusive with [redirect_url]\n If redirect URL is set to dynamic , then the redirect URL will be obtained from the incoming request\n This URL must match with the redirect URL configured with the OIDC provider",
                    "title": "set the redirect URL dynamically",
                    "$ref": "#/definitions/schemaEmpty",
                    "x-displayname": "Set the Redirect URL dynamically"
                },
                "redirect_url": {
                    "type": "string",
                    "description": "Exclusive with [redirect_dynamic]\n\n user can provide a url for e.g https://abc.xyz.com where user gets redirected. This URL configured here\n must match with the redirect URL configured with the OIDC provider\n\nExample: - https://abc.xyz.com-\n\nValidation Rules:\n  ves.io.schema.rules.string.max_len: 128\n  ves.io.schema.rules.string.min_len: 1\n  ves.io.schema.rules.string.uri_ref: true\n",
                    "title": "Redirect URL",
                    "minLength": 1,
                    "maxLength": 128,
                    "x-displayname": "Configure Redirect URL",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.max_len": "128",
                        "ves.io.schema.rules.string.min_len": "1",
                        "ves.io.schema.rules.string.uri_ref": "true"
                    }
                },
                "use_auth_object_config": {
                    "description": "Exclusive with [cookie_params]\n Use the Cookie Params configured in Authentication Object",
                    "title": "Use the Cookie params configured in Authentication Config Object",
                    "$ref": "#/definitions/schemaEmpty",
                    "x-displayname": "Use from Authentication Object"
                }
            }
        },
        "virtual_hostAutoCertInfoType": {
            "type": "object",
            "description": "Information related to auto certificate",
            "title": "AutoCertInfoType",
            "x-displayname": "Auto Cert Information",
            "x-ves-proto-message": "ves.io.schema.virtual_host.AutoCertInfoType",
            "properties": {
                "auto_cert_expiry": {
                    "type": "string",
                    "description": " Auto certificate expiry timestamp",
                    "title": "Auto Cert Expiry Timestamp",
                    "format": "date-time",
                    "x-displayname": "Auto Cert Expiry Timestamp"
                },
                "auto_cert_issuer": {
                    "type": "string",
                    "description": " Issuer of the auto certificate",
                    "title": "Auto Cert Issuer",
                    "x-displayname": "Auto Cert Issuer"
                },
                "auto_cert_state": {
                    "description": " State of auto certificate generation.",
                    "title": "Auto Cert State",
                    "$ref": "#/definitions/virtual_hostCertificationState",
                    "x-displayname": "Auto Cert State"
                },
                "auto_cert_subject": {
                    "type": "string",
                    "description": " Subject of the auto certificate",
                    "title": "Auto Cert Subject",
                    "x-displayname": "Auto Cert Subject"
                },
                "dns_records": {
                    "type": "array",
                    "description": " DNS Records that are to be added by user in their DNS domain.\n Currently, this will be populated when auto certificates are\n desired but DNS delegation is not enabled.",
                    "title": "DNS Records",
                    "items": {
                        "$ref": "#/definitions/virtual_hostDNSRecord"
                    },
                    "x-displayname": "DNS Records"
                }
            }
        },
        "virtual_hostBotDefenseMode": {
            "type": "string",
            "description": "x-displayName: \"Bot Defense Mode\"\nBot Defense Mode Type\n\n - API_MODE: API\n\nx-displayName: \"API Mode\"\nBot Defense API Mode\n - INLINE_MODE: INLINE\n\nx-displayName: \"Inline Mode\"\nBot Defense INLINE Mode",
            "title": "Bot Defense Mode",
            "enum": [
                "API_MODE",
                "INLINE_MODE"
            ],
            "default": "API_MODE"
        },
        "virtual_hostCaptchaChallengeType": {
            "type": "object",
            "description": "\nEnables loadbalancer to perform captcha challenge\n\nCaptcha challenge will be based on Google Recaptcha.\n\nWith this feature enabled, only clients that pass the captcha challenge will be allowed to\ncomplete the HTTP request.\n\nWhen loadbalancer is configured to do Captcha Challenge, it will redirect the browser to an\nHTML page on every new HTTP request. This HTML page will have captcha challenge embedded in it.\nClient will be allowed to make the request only if the captcha challenge is successful.\nLoadbalancer will tag response header with a cookie to avoid Captcha challenge for subsequent requests.\n\nCAPTCHA is mainly used as a security check to ensure only human users can pass through.\nGenerally, computers or bots are not capable of solving a captcha.\n\nYou can enable either Javascript challenge or Captcha challenge on a virtual host",
            "title": "CaptchaChallengeType",
            "x-displayname": "Captcha Challenge Parameters",
            "x-ves-proto-message": "ves.io.schema.virtual_host.CaptchaChallengeType",
            "properties": {
                "cookie_expiry": {
                    "type": "integer",
                    "description": " Cookie expiration period, in seconds.\n An expired cookie causes the loadbalancer to issue a new challenge.\n\nExample: - \"1000\"-\n\nValidation Rules:\n  ves.io.schema.rules.uint32.gte: 1\n  ves.io.schema.rules.uint32.lte: 86400\n",
                    "title": "cookie_expiry",
                    "format": "int64",
                    "x-displayname": "Cookie Expiration Period",
                    "x-ves-example": "1000",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.uint32.gte": "1",
                        "ves.io.schema.rules.uint32.lte": "86400"
                    }
                },
                "custom_page": {
                    "type": "string",
                    "description": " Custom message is of type uri_ref. Currently supported URL schemes is string:///.\n For string:/// scheme, message needs to be encoded in Base64 format.\n You can specify this message as base64 encoded plain text message e.g. \"Please Wait..\"\n or it can be HTML paragraph or a body string encoded as base64 string\n E.g. \"\u003cp\u003e Please Wait \u003c/p\u003e\". Base64 encoded string for this html is \"PHA+IFBsZWFzZSBXYWl0IDwvcD4=\"\n\nExample: - \"string:///PHA+IFBsZWFzZSBXYWl0IDwvcD4=\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.max_len: 65536\n  ves.io.schema.rules.string.uri_ref: true\n",
                    "title": "custom_page",
                    "maxLength": 65536,
                    "x-displayname": "Custom message for Captcha Challenge",
                    "x-ves-example": "string:///PHA+IFBsZWFzZSBXYWl0IDwvcD4=",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.max_len": "65536",
                        "ves.io.schema.rules.string.uri_ref": "true"
                    }
                }
            }
        },
        "virtual_hostCdnServiceType": {
            "type": "object",
            "x-ves-oneof-field-content_choice": "[\"download_delivery\",\"live_streaming\"]",
            "x-ves-proto-message": "ves.io.schema.virtual_host.CdnServiceType",
            "properties": {
                "cache_ttl": {
                    "type": "integer",
                    "description": " The Cache TTL is the number of seconds after which cache content is no longer valid\n\nExample: - \"3600\"-",
                    "title": "Cache TTL values",
                    "format": "int64",
                    "x-displayname": "Cache TTL",
                    "x-ves-example": "3600"
                },
                "download_delivery": {
                    "description": "Exclusive with [live_streaming]\n Content type is download delivery",
                    "title": "Download Delivery",
                    "$ref": "#/definitions/schemaEmpty",
                    "x-displayname": "Download Delivery"
                },
                "live_streaming": {
                    "description": "Exclusive with [download_delivery]\n Content type is live streaming",
                    "title": "Live Streaming",
                    "$ref": "#/definitions/schemaEmpty",
                    "x-displayname": "Live Streaming"
                },
                "service_domains": {
                    "type": "array",
                    "description": " CNAME provided from service per domain",
                    "title": "Service Domains",
                    "items": {
                        "$ref": "#/definitions/virtual_hostServiceDomain"
                    },
                    "x-displayname": "Service Domains"
                }
            }
        },
        "virtual_hostCertificationState": {
            "type": "string",
            "description": "State of auto certification generation for the virtual host\n\n - AutoCertDisabled: Auto Cert Disabled\n\nAuto Certification is disabled.\n - DnsDomainVerification: Dns Domain Verification\n\nAuto Certification is waiting for domain verification.\n - AutoCertStarted: Auto Cert Started\n\nAuto Certificate generation action has started.\n - PreDomainChallengePending: Pre Domain Challenge Pending\n\nThe domains in the virtual host configuration are not still verified. This requires\nthe _acme-challenge TXT record in the domain to have the correct TXT.\n - DomainChallengeStarted: Domain Challenge Started\n\nDomain challenge process started.\n - DomainChallengePending: Domain Challenge Pending\n\nThe domains in the virtual host configuration are being verified. This requires\nthe _acme-challenge TXT record in the domain to have the correct TXT.\n - DomainChallengeVerified: Domain Challenge Verified\n\nAll the domains in the virtual host have been verified.\n - AutoCertFinalize: Auto Cert Finalize\n\nCertificate generation order is Ready and Finalized.\n - CertificateInvalid: Certificate Invalid\n\nCertificate is invalid\n - CertificateValid: Certificate Valid\n\nValid certificate generated and tls_parameters are updated\n - AutoCertNotApplicable: Auto Cert Not Applicable\n\nAuto certificate not applicable because virtual host does not use TLS\n - AutoCertRateLimited: Auto Cert Rate Limited\n\nAuto certificate not available because CA has rate limited the request\n - AutoCertGenerationRetry: Auto Cert Generation Retry\n\nAuto certificate generate failed in the previous attempt, will be retried automatically\n - AutoCertError: Auto Cert Error\n\nError in Certificate generation\nDefault State for Vhost State with Auto Certificate\n - AutoCertAccountRateLimited: Auto Cert Account Rate Limited\n\nAuto certificate not available because CA has rate limited the request\n - AutoCertDomainRateLimited: Auto Cert Domain Rate Limited\n\nAuto certificate not available because CA has rate limited the request\n - CertificateExpired: Certificate Expired\n\nCertificate has expired",
            "title": "Certification State",
            "enum": [
                "AutoCertDisabled",
                "DnsDomainVerification",
                "AutoCertStarted",
                "DomainChallengePending",
                "DomainChallengeVerified",
                "AutoCertFinalize",
                "CertificateInvalid",
                "CertificateValid",
                "AutoCertNotApplicable",
                "AutoCertRateLimited",
                "AutoCertGenerationRetry",
                "AutoCertError",
                "PreDomainChallengePending",
                "DomainChallengeStarted",
                "AutoCertInitialize",
                "AutoCertAccountRateLimited",
                "AutoCertDomainRateLimited",
                "CertificateExpired"
            ],
            "default": "AutoCertDisabled",
            "x-displayname": "Certification State",
            "x-ves-proto-enum": "ves.io.schema.virtual_host.CertificationState"
        },
        "virtual_hostClientIPHeaders": {
            "type": "object",
            "description": "List of Client IP Headers",
            "title": "Trust Client IP Headers List Type",
            "x-displayname": "Trust Client IP Headers List",
            "x-ves-proto-message": "ves.io.schema.virtual_host.ClientIPHeaders",
            "properties": {
                "client_ip_headers": {
                    "type": "array",
                    "description": " Define the list of one or more Client IP Headers.  Headers will be used in order from top to bottom, meaning\n if the first header is not present in the request, the system will proceed to check for the second header,\n and so on, until one of the listed headers is found. If none of the defined headers exist, or the value\n is not an IP address, then the system will use the source IP of the packet. If multiple defined headers with\n different names are present in the request, the value of the first header name in the configuration will be used.\n If multiple defined headers with the same name are present in the request, values of all those headers will be combined.\n The system will read the right-most IP address from header, if there are multiple ip addresses in the header value.\n For X-Forwarded-For header, the system will read the IP address(rightmost - 1), as the client ip\n\nExample: - \"Client-IP-Header\"-\n\nValidation Rules:\n  ves.io.schema.rules.repeated.items.string.max_bytes: 256\n  ves.io.schema.rules.repeated.items.string.min_bytes: 1\n  ves.io.schema.rules.repeated.max_items: 5\n  ves.io.schema.rules.repeated.unique: true\n",
                    "title": "Client IP Headers",
                    "maxItems": 5,
                    "items": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256
                    },
                    "x-displayname": "Client IP Headers",
                    "x-ves-example": "Client-IP-Header",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.repeated.items.string.max_bytes": "256",
                        "ves.io.schema.rules.repeated.items.string.min_bytes": "1",
                        "ves.io.schema.rules.repeated.max_items": "5",
                        "ves.io.schema.rules.repeated.unique": "true"
                    }
                }
            }
        },
        "virtual_hostCompressionType": {
            "type": "object",
            "description": "Enables loadbalancer to compress dispatched data from an upstream service upon client request.\nThe content is compressed and then sent to the client with the appropriate headers if either response and request allow.\nOnly GZIP compression is supported.\n\nBy default compression will be skipped when:\n\n  A request does NOT contain accept-encoding header.\n  A request includes accept-encoding header, but it does not contain “gzip” or “*”.\n  A request includes accept-encoding with “gzip” or “*” with the weight “q=0”. Note that the “gzip” will have a higher weight then “*”. For example, if accept-encoding is “gzip;q=0,*;q=1”, the filter will not compress. But if the header is set to “*;q=0,gzip;q=1”, the filter will compress.\n  A request whose accept-encoding header includes “identity”.\n  A response contains a content-encoding header.\n  A response contains a cache-control header whose value includes “no-transform”.\n  A response contains a transfer-encoding header whose value includes “gzip”.\n  A response does not contain a content-type value that matches one of the selected mime-types, which default to application/javascript, application/json, application/xhtml+xml, image/svg+xml, text/css, text/html, text/plain, text/xml.\n  Neither content-length nor transfer-encoding headers are present in the response.\n  Response size is smaller than 30 bytes (only applicable when transfer-encoding is not chunked).\n\nWhen compression is applied:\n\n  The content-length is removed from response headers.\n  Response headers contain “transfer-encoding: chunked” and do not contain “content-encoding” header.\n  The “vary: accept-encoding” header is inserted on every response.\n\nGZIP Compression Level:\n\nA value which is optimal balance between speed of compression and amount of compression is chosen.",
            "title": "CompressionType",
            "x-displayname": "Compression Parameters",
            "x-ves-proto-message": "ves.io.schema.virtual_host.CompressionType",
            "properties": {
                "content_length": {
                    "type": "integer",
                    "description": " Minimum response length, in bytes, which will trigger compression. The default value is 30.\n\nExample: - \"100\"-\n\nValidation Rules:\n  ves.io.schema.rules.uint32.gte: 30\n",
                    "title": "content_length",
                    "format": "int64",
                    "x-displayname": "Content Length",
                    "x-ves-example": "100",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.uint32.gte": "30"
                    }
                },
                "content_type": {
                    "type": "array",
                    "description": " Set of strings that allows specifying which mime-types yield compression\n When this field is not defined, compression will be applied\n to the following mime-types:\n     \"application/javascript\"\n     \"application/json\",\n     \"application/xhtml+xml\"\n     \"image/svg+xml\"\n     \"text/css\"\n     \"text/html\"\n     \"text/plain\"\n     \"text/xml\"\n\nExample: - \"application/json\"-\n\nValidation Rules:\n  ves.io.schema.rules.repeated.items.string.max_bytes: 256\n  ves.io.schema.rules.repeated.items.string.min_bytes: 1\n  ves.io.schema.rules.repeated.max_items: 50\n  ves.io.schema.rules.repeated.unique: true\n",
                    "title": "content_type",
                    "maxItems": 50,
                    "items": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 256
                    },
                    "x-displayname": "Content Type",
                    "x-ves-example": "application/json",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.repeated.items.string.max_bytes": "256",
                        "ves.io.schema.rules.repeated.items.string.min_bytes": "1",
                        "ves.io.schema.rules.repeated.max_items": "50",
                        "ves.io.schema.rules.repeated.unique": "true"
                    }
                },
                "disable_on_etag_header": {
                    "type": "boolean",
                    "description": " If true, disables compression when the response contains an etag header. When it is false,\n weak etags will be preserved and the ones that require strong validation will be removed.\n\nExample: - \"true\"-",
                    "title": "disable_on_etag_header",
                    "format": "boolean",
                    "x-displayname": "Disable On Etag Header",
                    "x-ves-example": "true"
                },
                "remove_accept_encoding_header": {
                    "type": "boolean",
                    "description": " If true, removes accept-encoding from the request headers before dispatching it to the upstream\n so that responses do not get compressed before reaching the filter.\n\nExample: - \"true\"-",
                    "title": "remove_accept_encoding_header",
                    "format": "boolean",
                    "x-displayname": "Remove Accept-Encoding Header",
                    "x-ves-example": "true"
                }
            }
        },
        "virtual_hostDNSCacheProfile": {
            "type": "object",
            "description": "x-displayName: \"DNS Cache\"\nDNS Cache specifies cache configuration",
            "title": "DNS Cache",
            "properties": {
                "cache_size": {
                    "type": "integer",
                    "description": "x-displayName: \"cache size\"\nx-example: \"1000\"\ncache size",
                    "title": "Cache size",
                    "format": "int64"
                },
                "disable_cache_profile": {
                    "description": "x-displayName: \"Disable\"",
                    "title": "Disable DNS Cache",
                    "$ref": "#/definitions/schemaEmpty"
                }
            }
        },
        "virtual_hostDNSDDoSProfile": {
            "type": "object",
            "description": "x-displayName: \"DDoS Protection\"\nDDoS Protection Rule for DNS",
            "title": "DDoS Protection",
            "properties": {
                "disable_ddos_mitigation": {
                    "description": "x-displayName: \"Disable\"",
                    "title": "Disable DDoS Protection",
                    "$ref": "#/definitions/schemaEmpty"
                },
                "enable_ddos_mitigation": {
                    "description": "x-displayName: \"Enable\"",
                    "title": "Enable DDoS Protection",
                    "$ref": "#/definitions/schemaEmpty"
                }
            }
        },
        "virtual_hostDNSProxyConfiguration": {
            "type": "object",
            "description": "x-displayName: \"DNS Proxy Configuration\"\nAdvanced DNS Proxy Configurations like DDoS, Cache are mapped to DNSProxyConfiguration for internal use",
            "title": "DNS Proxy Configuration",
            "properties": {
                "cache_profile": {
                    "description": "x-displayName: \"DNS Cache\"\nOptions for enabling and disabling the DNS cache profile for the DNS Proxy.\nOn enabling this feature, a default cache profile is applied to the DNS proxy\nwhich caches DNS replies from the origin DNS servers.",
                    "title": "DNS Cache",
                    "$ref": "#/definitions/virtual_hostDNSCacheProfile"
                },
                "ddos_profile": {
                    "description": "x-displayName: \"DDoS mitigation\"\nx-required\nOptions for enabling and disabling the DDoS profile for the DNS Proxy.\nOn enabling this feature, a default DDoS profile is applied to the DNS proxy\nto protect the origin DNS servers from external DDoS attacks.",
                    "title": "DDoS mitigation",
                    "$ref": "#/definitions/virtual_hostDNSDDoSProfile"
                },
                "irules": {
                    "type": "array",
                    "description": "x-displayName: \"iRules Ref\"\nOptions for attaching iRules to dns proxy",
                    "title": "iRules",
                    "items": {
                        "$ref": "#/definitions/schemaviewsObjectRefType"
                    }
                },
                "protocol_inspection": {
                    "description": "x-displayName: \"Protocol Inspection\"\nOptions for enabling and configuring protocol inspection configuration",
                    "title": "Protcol Inspection",
                    "$ref": "#/definitions/schemaviewsObjectRefType"
                }
            }
        },
        "virtual_hostDNSRecord": {
            "type": "object",
            "description": "Defines a DNS record",
            "title": "DNSRecord",
            "x-displayname": "DNS Record",
            "x-ves-proto-message": "ves.io.schema.virtual_host.DNSRecord",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " Name of the DNS record",
                    "title": "Name",
                    "x-displayname": "Name"
                },
                "type": {
                    "type": "string",
                    "description": " Type of the DNS record\n\nExample: - \"CNAME\"-",
                    "title": "Type",
                    "x-displayname": "Type",
                    "x-ves-example": "CNAME"
                },
                "value": {
                    "type": "string",
                    "description": " DNS record Value",
                    "title": "Value",
                    "x-displayname": "Value"
                }
            }
        },
        "virtual_hostDomainCertificates": {
            "type": "object",
            "description": "x-displayName: \"Domain Certificates\"\nThe certificates for a given domain per public key algorithm. A certificate is required for at least one of the algorithm types.",
            "title": "Domain-Certificates map",
            "properties": {
                "ecdsa_certificates": {
                    "type": "array",
                    "description": "x-displayName: \"ECDSA Certificate\"\nthe ECDSA certificate for the domain, if any",
                    "title": "ECDSA Certificate",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    }
                },
                "rsa_certificates": {
                    "type": "array",
                    "description": "x-displayName: \"RSA Certificate\"\nthe RSA certificate for the domain, if any",
                    "title": "RSA Certificate",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    }
                }
            }
        },
        "virtual_hostDynamicReverseProxyType": {
            "type": "object",
            "description": "In this mode of proxy, virtual host will resolve the destination endpoint dynamically.\n\nThe dynamic resolution is done using a predefined field in the request. This predefined\nfield depends on the ProxyType configured on the Virtual Host.\n\nFor HTTP traffic, i.e. with ProxyType as HTTP_PROXY or HTTPS_PROXY, virtual host will use the\n\"HOST\" http header from the request and perform DNS resolution to select destination endpoint.\n\nFor TCP traffic with SNI, (If the ProxyType is TCP_PROXY_WITH_SNI), virtual host will perform DNS\nresolution using the SNI.\n\nThe DNS resolution is performed in the virtual network specified in outside_network_type or\noutside_network\n\nIn both modes of operation(either using Host header or SNI), the DNS resolution could return\nmultiple addresses. First IPv4 address from such returned list is used as endpoint for the\nrequest. The DNS response is cached for 60s by default.",
            "title": "DynamicReverseProxyType",
            "x-displayname": "Dynamic Reverse Proxy Type",
            "x-ves-proto-message": "ves.io.schema.virtual_host.DynamicReverseProxyType",
            "properties": {
                "connection_timeout": {
                    "type": "integer",
                    "description": " The timeout for new network connections to upstream server.\n This is specified in milliseconds. The default value is 2000 (2 seconds)\n\nExample: - \"4000\"-\n\nValidation Rules:\n  ves.io.schema.rules.uint32.lte: 600000\n",
                    "title": "connection_timeout",
                    "format": "int64",
                    "x-displayname": "Connection Timeout",
                    "x-ves-example": "4000",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.uint32.lte": "600000"
                    }
                },
                "resolution_network": {
                    "type": "array",
                    "description": " Reference to virtual network where the endpoint is resolved.\n Reference is valid only when the network type is VIRTUAL_NETWORK_PER_SITE or\n VIRTUAL_NETWORK_GLOBAL. It is ignored for all other network types",
                    "title": "resolution_network",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Resolution Network"
                },
                "resolution_network_type": {
                    "description": " Type of the network to resolve the destination",
                    "title": "resolution_network_type",
                    "$ref": "#/definitions/schemaVirtualNetworkType",
                    "x-displayname": "Resolution Network Type"
                },
                "resolve_endpoint_dynamically": {
                    "type": "boolean",
                    "description": " x-example : true\n In this mode of proxy, virtual host will resolve the destination endpoint dynamically.\n\n The dynamic resolution is done using a predefined field in the request. This predefined\n field depends on the ProxyType configured on the Virtual Host.\n\n For HTTP traffic, i.e. with ProxyType as HTTP_PROXY or HTTPS_PROXY, virtual host will use the\n \"HOST\" http header from the request and perform DNS resolution to select destination endpoint.\n\n For TCP traffic with SNI, (If the ProxyType is TCP_PROXY_WITH_SNI), virtual host will perform DNS\n resolution using the SNI.\n\n The DNS resolution is performed in the virtual network specified in outside_network_type or\n outside_network\n\n In both modes of operation(either using Host header or SNI), the DNS resolution could return\n multiple addresses. First IPv4 address from such returned list is used as endpoint for the\n request. The DNS response is cached for 60s by default.",
                    "title": "Enable the dynamic resolution of the endpoint",
                    "format": "boolean",
                    "x-displayname": "Dynamic Endpoint Resolution"
                }
            }
        },
        "virtual_hostHttpProtocolOptions": {
            "type": "object",
            "description": "x-displayName: \"HTTP Protocol Configuration Options\"\nHTTP protocol configuration options for downstream connections",
            "title": "HttpProtocolOptions",
            "properties": {
                "http_protocol_enable_v1_only": {
                    "description": "x-displayName: \"HTTP/1.1\"\nEnable HTTP/1.1 for downstream connections",
                    "title": "http_protocol_enable_v1_only",
                    "$ref": "#/definitions/schemaEmpty"
                },
                "http_protocol_enable_v1_v2": {
                    "description": "x-displayName: \"HTTP/1.1 and HTTP/2\"\nEnable both HTTP/1.1 and HTTP/2 for downstream connections",
                    "title": "http_protocol_enable_v1_v2",
                    "$ref": "#/definitions/schemaEmpty"
                },
                "http_protocol_enable_v2_only": {
                    "description": "x-displayName: \"HTTP/2\"\nEnable HTTP/2 for downstream connections",
                    "title": "http_protocol_enable_v2_only",
                    "$ref": "#/definitions/schemaEmpty"
                }
            }
        },
        "virtual_hostHttpRedirectOptions": {
            "type": "object",
            "description": "x-displayName: \"HTTP Protocol Redirect Options to HTTPS\"\nHTTP protocol redirect options to https for downstream connections",
            "title": "HttpRedirectOptions"
        },
        "virtual_hostJavaScriptConfigType": {
            "type": "object",
            "description": "Custom JavaScript Configuration. Custom JavaScript code can be executed at various stages of request processing.",
            "title": "JavaScriptConfigType",
            "x-displayname": "JavaScript Configuration",
            "x-ves-proto-message": "ves.io.schema.virtual_host.JavaScriptConfigType",
            "properties": {
                "cache_prefix": {
                    "type": "string",
                    "description": " Identifier for data store to be used by JavaScript. Data store can be\n KeyValue store referred by script.\n\nExample: - \"value\"-",
                    "title": "CachePrefix",
                    "x-displayname": "Cache Identifier",
                    "x-ves-example": "value"
                },
                "custom_script_url": {
                    "type": "string",
                    "description": " URL of JavaScript that gets executed\n\nExample: - \"value\"-",
                    "title": "ScriptURL",
                    "x-displayname": "Path of Javascript",
                    "x-ves-example": "value"
                },
                "script_config": {
                    "type": "object",
                    "description": " Input passed to the script",
                    "title": "ScriptConfig",
                    "x-displayname": "Configuration for Script"
                }
            }
        },
        "virtual_hostJavascriptChallengeType": {
            "type": "object",
            "description": "\nEnables loadbalancer to perform client browser compatibility test by redirecting to a page\nwith Javascript.\n\nWith this feature enabled, only clients that are capable of executing Javascript(mostly browsers)\nwill be allowed to complete the HTTP request.\n\nWhen loadbalancer is configured to do Javascript Challenge, it will redirect the browser to an\nHTML page on every new HTTP request. This HTML page will have Javascript embedded in it.\nLoadbalancer chooses a set of random numbers for every new client and sends these numbers along with an\nencrypted answer with the request such that it embed these numbers as input in the Javascript.\nJavascript will run on the requestor browser and perform a complex Math operation.\nScript will submit the answer to loadbalancer. Loadbalancer will validate the answer by comparing the calculated\nanswer with the decrypted answer (which was encrypted when it was sent back as reply) and allow\nthe request to the upstream server only if the answer is correct.\nLoadbalancer will tag response header with a cookie to avoid Javascript challenge for subsequent requests.\n\nJavascript challenge serves following purposes\n   * Validate that the request is coming via a browser that is capable for running Javascript\n   * Force the browser to run a complex operation, f(X), that requires it to spend a large number\n     of CPU cycles. This is to slow down a potential DoS attacker by making it difficult to launch\n   a large request flood without having to spend even larger CPU cost at their end.\n\nYou can enable either Javascript challenge or Captcha challenge on a virtual host",
            "title": "JavascriptChallengeType",
            "x-displayname": "Javascript Challenge Parameters",
            "x-ves-proto-message": "ves.io.schema.virtual_host.JavascriptChallengeType",
            "properties": {
                "cookie_expiry": {
                    "type": "integer",
                    "description": " Cookie expiration period, in seconds.\n An expired cookie causes the loadbalancer to issue a new challenge.\n\nExample: - \"1000\"-\n\nValidation Rules:\n  ves.io.schema.rules.uint32.gte: 1\n  ves.io.schema.rules.uint32.lte: 86400\n",
                    "title": "cookie_expiry",
                    "format": "int64",
                    "x-displayname": "Cookie Expiration Period",
                    "x-ves-example": "1000",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.uint32.gte": "1",
                        "ves.io.schema.rules.uint32.lte": "86400"
                    }
                },
                "custom_page": {
                    "type": "string",
                    "description": " Custom message is of type uri_ref. Currently supported URL schemes is string:///.\n For string:/// scheme, message needs to be encoded in Base64 format.\n You can specify this message as base64 encoded plain text message e.g. \"Please Wait..\"\n or it can be HTML paragraph or a body string encoded as base64 string\n E.g. \"\u003cp\u003e Please Wait \u003c/p\u003e\". Base64 encoded string for this html is \"PHA+IFBsZWFzZSBXYWl0IDwvcD4=\"\n\nExample: - \"string:///PHA+IFBsZWFzZSBXYWl0IDwvcD4=\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.max_len: 65536\n  ves.io.schema.rules.string.uri_ref: true\n",
                    "title": "custom_page",
                    "maxLength": 65536,
                    "x-displayname": "Custom Message for Javascript Challenge",
                    "x-ves-example": "string:///PHA+IFBsZWFzZSBXYWl0IDwvcD4=",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.max_len": "65536",
                        "ves.io.schema.rules.string.uri_ref": "true"
                    }
                },
                "js_script_delay": {
                    "type": "integer",
                    "description": " Delay introduced by Javascript, in milliseconds.\n\nExample: - \"1000\"-\n\nValidation Rules:\n  ves.io.schema.rules.uint32.gte: 1000\n  ves.io.schema.rules.uint32.lte: 60000\n",
                    "title": "js_script_delay",
                    "format": "int64",
                    "x-displayname": "Javascript Delay",
                    "x-ves-example": "1000",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.uint32.gte": "1000",
                        "ves.io.schema.rules.uint32.lte": "60000"
                    }
                }
            }
        },
        "virtual_hostOpenApiValidationSettings": {
            "type": "object",
            "description": "x-displayName: \"OpenAPI Validation Settings\"\nx-required\nSettings in VH of enabled OpenAPI validation",
            "title": "OpenAPI Validation Settings",
            "properties": {
                "allow_only_specified_headers": {
                    "type": "boolean",
                    "description": "x-displayName: \"Fail Validation On Unspecified Header\"\nSet to fail validation on request/response with header that is not specified in the OpenAPI specification",
                    "title": "allow only specified header",
                    "format": "boolean"
                },
                "allow_only_specified_query_params": {
                    "type": "boolean",
                    "description": "x-displayName: \"Fail Validation On Unspecified Query Parameter\"\nSet to fail validation on request with query parameter that is not specified in the OpenAPI specification",
                    "title": "allow only specified query parameter",
                    "format": "boolean"
                },
                "fail_oversized_body_validation": {
                    "type": "boolean",
                    "description": "x-displayName: \"Fail Oversized Body Validation\"\nSet to fail validation on request/response with too long body",
                    "title": "fail oversized body validation",
                    "format": "boolean"
                }
            }
        },
        "virtual_hostPolicyBasedChallenge": {
            "type": "object",
            "description": "x-displayName: \"Policy Based Challenge\"\nSpecifies the settings for policy rule based challenge",
            "title": "policy based challenge",
            "properties": {
                "always_enable_captcha_challenge": {
                    "description": "x-displayName: \"Always enable Captcha Challenge\"\nEnable Captcha challenge for all requests.\nChallenge rules can be used to selectively disable Captcha challenge or enable JS challenge for some requests.",
                    "title": "always enable captcha challenge",
                    "$ref": "#/definitions/schemaEmpty"
                },
                "always_enable_js_challenge": {
                    "description": "x-displayName: \"Always enable JS Challenge\"\nEnable JS challenge for all requests.\nChallenge rules can be used to selectively disable JS challenge or enable Captcha challenge for some requests.",
                    "title": "always enable JS challenge",
                    "$ref": "#/definitions/schemaEmpty"
                },
                "captcha_challenge": {
                    "description": "x-displayName: \"Captcha Challenge\"\nConfigure Captcha challenge parameters",
                    "title": "Captcha Challenge",
                    "$ref": "#/definitions/virtual_hostCaptchaChallengeType"
                },
                "js_challenge": {
                    "description": "x-displayName: \"Javascript Challenge Parameters\"\nConfigure Javascript challenge parameters",
                    "title": "Javascript Challenge",
                    "$ref": "#/definitions/virtual_hostJavascriptChallengeType"
                },
                "malicious_user_mitigation": {
                    "type": "array",
                    "description": "x-displayName: \"Malicious User Mitigation\"\nSettings that specify the actions to be taken when malicious users are determined to be at different threat levels.\nUser's activity is monitored and continuously analyzed for malicious behavior. From this analysis, a threat level is assigned to each user.\nThe settings defined in malicious user mitigation specify what mitigation actions to take for users determined to be at different threat levels.",
                    "title": "Malicious User Mitigation",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    }
                },
                "no_challenge": {
                    "description": "x-displayName: \"No Challenge\"\nDisable JS and Captcha challenge for all requests.\nChallenge rules can be used to selectively enable JS or Captcha challenge for some requests.",
                    "title": "no_challenge",
                    "$ref": "#/definitions/schemaEmpty"
                },
                "temporary_user_blocking": {
                    "description": "x-displayName: \"Temporary User Blocking\"\nSpecifies configuration for temporary user blocking resulting from malicious user detection",
                    "title": "Temporary User Blocking",
                    "$ref": "#/definitions/virtual_hostTemporaryUserBlockingType"
                }
            }
        },
        "virtual_hostProxyType": {
            "type": "string",
            "description": "ProxyType tells the type of proxy to install for the virtual host.\n\nOnly the following combination of VirtualHosts within same AdvertisePolicy is permitted\n(None of them should have \"*\" in domains when used with other VirtualHosts in same AdvertisePolicy)\n1. Multiple TCP_PROXY_WITH_SNI and multiple HTTPS_PROXY\n2. Multiple HTTP_PROXY\n3. Multiple HTTPS_PROXY\n4. Multiple TCP_PROXY_WITH_SNI\n\nHTTPS_PROXY without TLS parameters is not permitted\nHTTP_PROXY/HTTPS_PROXY/TCP_PROXY_WITH_SNI/SMA_PROXY with empty domains is not permitted\nTCP_PROXY_WITH_SNI/SMA_PROXY should not have \"*\" in domains\n\n - HTTP_PROXY: HTTP_PROXY\n\nInstall HTTP proxy. HTTP Proxy is the default proxy installed.\n - TCP_PROXY: TCP_PROXY\n\nInstall TCP proxy\n - TCP_PROXY_WITH_SNI: TCP_PROXY_WITH_SNI\n\nInstall TCP proxy with SNI Routing\n - TLS_TCP_PROXY: TCP_PROXY\n\nInstall TCP proxy\n - TLS_TCP_PROXY_WITH_SNI: TCP_PROXY_WITH_SNI\n\nInstall TCP proxy with SNI Routing\n - HTTPS_PROXY: HTTPS_PROXY\n\nInstall HTTPS proxy\n - UDP_PROXY: UDP_PROXY\n\nInstall UDP proxy\n - SMA_PROXY: SMA_PROXY\n\nInstall Secret Management Access proxy\n - DNS_PROXY: DNS_PROXY\n\nInstall DNS proxy",
            "enum": [
                "UDP_PROXY",
                "SMA_PROXY",
                "DNS_PROXY"
            ],
            "default": "HTTP_PROXY",
            "x-displayname": "Type of Proxy",
            "x-ves-proto-enum": "ves.io.schema.virtual_host.ProxyType"
        },
        "virtual_hostServiceDomain": {
            "type": "object",
            "x-ves-proto-message": "ves.io.schema.virtual_host.ServiceDomain",
            "properties": {
                "domain": {
                    "type": "string",
                    "description": " Domain Name\n\nExample: - \"cdn.acmecorp.com\"-",
                    "title": "Domain Name",
                    "x-displayname": "Domain Name",
                    "x-ves-example": "cdn.acmecorp.com"
                },
                "service_domain": {
                    "type": "string",
                    "description": " Service Domain\n\nExample: - \"ves-io-cdn-cdn-acmecorp-com.demo1.ac.vh.volterra.us\"-",
                    "title": "Service Domain",
                    "x-displayname": "Service Domain",
                    "x-ves-example": "ves-io-cdn-cdn-acmecorp-com.demo1.ac.vh.volterra.us"
                }
            }
        },
        "virtual_hostShapeBotDefenseConfigType": {
            "type": "object",
            "description": "x-displayName: \"Shape Bot Defense Config for virtual host\"\nThis defines various configuration options for Shape Bot Defense per virtual host.",
            "title": "ShapeBotDefenseConfigType",
            "properties": {
                "api_auth_key": {
                    "description": "x-displayName: \"API auth key\"\nAPI auth key for Shared Shape Bot Defense instance. This value is set\non the tenant object from Shape Backend.",
                    "title": "API auth key for Shared Shape Instance",
                    "$ref": "#/definitions/schemaSecretType"
                },
                "application_id": {
                    "type": "string",
                    "description": "x-displayName: \"Application ID\"\nx-example: \"707a0c622df8414886a5ca71c46caf2f\"\nShape Bot Defense Application ID is used by shared instances.",
                    "title": "Application ID"
                },
                "blocking_pages": {
                    "type": "object",
                    "description": "x-displayName: \"Blocking Pages\"\nBlocking pages used by the Bot Defense Instance where the\nkey is an MD5 representation of the blocking page value.\nThe map entries are limited to the max number of protected endpoints.",
                    "title": "Blocking Pages"
                },
                "instance": {
                    "type": "array",
                    "description": "x-displayName: \"Shape Instance\"\nWhich Shape instance to use",
                    "title": "Shape Instance",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    }
                },
                "js_path": {
                    "type": "string",
                    "description": "x-displayName: \"JS Path\"\nJavaScript download path",
                    "title": "JS Path"
                },
                "mode": {
                    "description": "x-displayName: \"Bot Defense Mode\"\nBot Defense Mode Type",
                    "title": "Bot Defense Mode",
                    "$ref": "#/definitions/virtual_hostBotDefenseMode"
                },
                "reload_header_name": {
                    "type": "string",
                    "description": "x-displayName: \"SDK Config Header Name\"\nHeader that is used for SDK configuration sync",
                    "title": "Reload Header Name"
                },
                "timeout": {
                    "type": "integer",
                    "description": "x-displayName: \"Timeout\"\nx-example: 300\nThe timeout for the inference check, in milliseconds.",
                    "title": "timeout",
                    "format": "int64"
                }
            }
        },
        "virtual_hostSlowDDoSMitigation": {
            "type": "object",
            "description": "\"Slow and low\" attacks tie up server resources, leaving none available for servicing\nrequests from actual users.",
            "title": "Slow DDoS Mitigation",
            "x-displayname": "Slow DDoS Mitigation",
            "x-ves-oneof-field-request_timeout_choice": "[\"disable_request_timeout\",\"request_timeout\"]",
            "x-ves-proto-message": "ves.io.schema.virtual_host.SlowDDoSMitigation",
            "properties": {
                "disable_request_timeout": {
                    "description": "Exclusive with [request_timeout]\n",
                    "title": "No Timeout",
                    "$ref": "#/definitions/schemaEmpty",
                    "x-displayname": "No Timeout"
                },
                "request_headers_timeout": {
                    "type": "integer",
                    "description": " The amount of time the client has to send only the headers on the request stream before\n the stream is cancelled. The default value is 10000 milliseconds. This setting\n provides protection against Slowloris attacks.\n\nExample: - \"60000\"-\n\nValidation Rules:\n  ves.io.schema.rules.uint32.gte: 2000\n  ves.io.schema.rules.uint32.lte: 30000\n",
                    "title": "Request Headers Timeout",
                    "format": "int64",
                    "x-displayname": "Request Headers Timeout",
                    "x-ves-example": "60000",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.uint32.gte": "2000",
                        "ves.io.schema.rules.uint32.lte": "30000"
                    }
                },
                "request_timeout": {
                    "type": "integer",
                    "description": "Exclusive with [disable_request_timeout]\n\n\nExample: - \"60000\"-\n\nValidation Rules:\n  ves.io.schema.rules.uint32.gte: 2000\n  ves.io.schema.rules.uint32.lte: 300000\n",
                    "title": "Custom Timeout",
                    "format": "int64",
                    "x-displayname": "Custom Timeout",
                    "x-ves-example": "60000",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.uint32.gte": "2000",
                        "ves.io.schema.rules.uint32.lte": "300000"
                    }
                }
            }
        },
        "virtual_hostStatusObject": {
            "type": "object",
            "description": "Most recently observed status of object",
            "title": "Status of Virtual host",
            "x-ves-proto-message": "ves.io.schema.virtual_host.StatusObject",
            "properties": {
                "conditions": {
                    "type": "array",
                    "description": " Conditions",
                    "title": "conditions",
                    "items": {
                        "$ref": "#/definitions/schemaConditionType"
                    },
                    "x-displayname": "Conditions"
                },
                "metadata": {
                    "description": " Standard status's metadata",
                    "title": "metadata",
                    "$ref": "#/definitions/schemaStatusMetaType",
                    "x-displayname": "Metadata"
                },
                "object_refs": {
                    "type": "array",
                    "description": " Object reference",
                    "title": "object_refs",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Config Object"
                },
                "status": {
                    "type": "array",
                    "description": " VerStatusType shows list of other vhosts with which TLS coalescing is done",
                    "title": "ver_status",
                    "items": {
                        "$ref": "#/definitions/virtual_hostVerStatusType"
                    },
                    "x-displayname": "VER Status"
                }
            }
        },
        "virtual_hostTemporaryUserBlockingType": {
            "type": "object",
            "description": "x-displayName: \"Temporary User Blocking\"\n\nSpecifies configuration for temporary user blocking resulting from user behavior analysis.\n\nWhen Malicious User Mitigation is enabled from service policy rules, users' accessing the application will be analyzed for\nmalicious activity and the configured mitigation actions will be taken on identified malicious users.\nThese mitigation actions include setting up temporary blocking on that user.\nThis configuration specifies settings on how that blocking should be done by the loadbalancer.",
            "title": "TemporaryUserBlockingType",
            "properties": {
                "custom_page": {
                    "type": "string",
                    "description": "x-displayName: \"Custom Message for Temporary Blocking\"\nx-example: \"string:///PHA+IFBsZWFzZSBXYWl0IDwvcD4=\"\nCustom message is of type -uri_ref-. Currently supported URL schemes is -string:///-.\nFor -string:///- scheme, message needs to be encoded in Base64 format.\nYou can specify this message as base64 encoded plain text message e.g. \"Blocked..\"\nor it can be HTML paragraph or a body string encoded as base64 string\nE.g. \"\u003cp\u003e Blocked \u003c/p\u003e\". Base64 encoded string for this html is \"PHA+IFBsZWFzZSBXYWl0IDwvcD4=\"",
                    "title": "custom_page"
                }
            }
        },
        "virtual_hostVerStatusType": {
            "type": "object",
            "description": "This VER status is per site on which virtual host configuration is getting applied",
            "title": "VER status for Virtual Host",
            "x-displayname": "VER Status",
            "x-ves-proto-message": "ves.io.schema.virtual_host.VerStatusType",
            "properties": {
                "advertise_policy": {
                    "description": " AdvertisePolicy for which the coalescing is done.",
                    "title": "AdvertisePolicy",
                    "$ref": "#/definitions/schemaviewsObjectRefType",
                    "x-displayname": "Advertise policy name"
                },
                "coalesced_vhosts": {
                    "type": "array",
                    "description": " List of virtual hosts with which TLS coalescing is done\n\nValidation Rules:\n  ves.io.schema.rules.repeated.unique: true\n",
                    "title": "TLS coalesced virtual hosts",
                    "items": {
                        "$ref": "#/definitions/schemaviewsObjectRefType"
                    },
                    "x-displayname": "TLS Coalesced VirtualHosts",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.repeated.unique": "true"
                    }
                },
                "non_coalesced_vhosts": {
                    "type": "array",
                    "description": " List of virtual hosts having same server certificates and supposed to be\n coalesced but not coalesced due to mismatch is some configuration.\n\nValidation Rules:\n  ves.io.schema.rules.repeated.unique: true\n",
                    "title": "TLS coalescing skipped virtual hosts",
                    "items": {
                        "$ref": "#/definitions/schemaviewsObjectRefType"
                    },
                    "x-displayname": "TLS Coalescing skipped VirtualHosts",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.repeated.unique": "true"
                    }
                }
            }
        },
        "virtual_hostVirtualHostID": {
            "type": "object",
            "description": "x-displayName: \"Virtual Host Identifier\"\nVirtualHost Identification via its namespace and name",
            "title": "Virtual Host Identifier",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "x-displayName: \"Name\"\nx-example: \"frontend\"\nName of the VirtualHost",
                    "title": "Name"
                },
                "namespace": {
                    "type": "string",
                    "description": "x-displayName: \"Namespace\"\nx-example: \"ns1\"\nNamespace in which the VirtualHost is configured",
                    "title": "Namespace"
                }
            }
        },
        "virtual_hostVirtualHostState": {
            "type": "string",
            "description": "State of the virtual host\n\n - VIRTUAL_HOST_READY: VIRTUAL_HOST_READY\n\nVirtual host is ready to install\n - VIRTUAL_HOST_PENDING_VERIFICATION: VIRTUAL_HOST_PENDING_VERIFICATION\n\nVirtual host is verfication pending for some or all of its domains\n - VIRTUAL_HOST_VERIFICATION_FAILED: VIRTUAL_HOST_VERIFICATION_FAILED\n\nVirtual host has one or more domains for which verification failed\n - VIRTUAL_HOST_PENDING_DNS_DELEGATION: VIRTUAL_HOST_PENDING_DNS_DELEGATION\n\nVirtual host is pending DNS delegation\n - VIRTUAL_HOST_PENDING_A_RECORD: VIRTUAL_HOST_PENDING_A_RECORD\n\nVirtual host is waiting for one or more A records to be created\n - VIRTUAL_HOST_DNS_A_RECORD_ADDED: VIRTUAL_HOST_DNS_A_RECORD_ADDED\n\nDNS A record has been added for this Virtual host\n - VIRTUAL_HOST_INTERNET_NLB_PENDING_CREATION: VIRTUAL_HOST_INTERNET_NLB_PENDING_CREATION\n\nInternet facing NLB, is being created on the site/sites belonging to the virtual site\n - VIRTUAL_HOST_INTERNET_NLB_CREATION_FAILED: VIRTUAL_HOST_INTERNET_NLB_CREATION_FAILED\n\nInternet NLB creation failed on the site/sites. InternetNLBVIPStatus will have more information.",
            "title": "VirtualHostState",
            "enum": [
                "VIRTUAL_HOST_READY",
                "VIRTUAL_HOST_PENDING_VERIFICATION",
                "VIRTUAL_HOST_VERIFICATION_FAILED",
                "VIRTUAL_HOST_PENDING_DNS_DELEGATION",
                "VIRTUAL_HOST_PENDING_A_RECORD",
                "VIRTUAL_HOST_DNS_A_RECORD_ADDED",
                "VIRTUAL_HOST_INTERNET_NLB_PENDING_CREATION",
                "VIRTUAL_HOST_INTERNET_NLB_CREATION_FAILED"
            ],
            "default": "VIRTUAL_HOST_READY",
            "x-displayname": "Virtual Host State",
            "x-ves-proto-enum": "ves.io.schema.virtual_host.VirtualHostState"
        },
        "virtual_hostVirtualHostType": {
            "type": "string",
            "description": "VirtualHostType tells the type of virtual_host. Functionally, all types are same,\nthis is mainly used for categorizing metrics.\n\n - VIRTUAL_SERVICE: VirtualService\n\nVirtual Host used Virtual Service\n - HTTP_LOAD_BALANCER: HTTP LoadBalancer\n\nVirtual Host used as Load Balancer\n - API_GATEWAY: APIGateway\n\nVirtual Host used API Gateway\n - TCP_LOAD_BALANCER: TCP LoadBalancer\n\nVirtual Host used as Load Balancer\n - PROXY: Proxy\n\nVirtual Host used as Proxy\n - LOCAL_K8S_API_GATEWAY: LOCAL_K8S_API_GATEWAY\n\nInternal use only, used for k8s cluster api gateway on the site.\n - CDN_LOAD_BALANCER: CDN LoadBalancer\n\n Virtual Host used as Load Balancer",
            "title": "VirtualHostType",
            "enum": [
                "VIRTUAL_SERVICE",
                "HTTP_LOAD_BALANCER",
                "API_GATEWAY",
                "TCP_LOAD_BALANCER",
                "PROXY",
                "CDN_LOAD_BALANCER"
            ],
            "default": "VIRTUAL_SERVICE",
            "x-displayname": "Virtual Host Type",
            "x-ves-proto-enum": "ves.io.schema.virtual_host.VirtualHostType"
        },
        "virtual_host_dns_infoDnsInfo": {
            "type": "object",
            "description": "A message that contains DNS information for a given IP address",
            "title": "DNS information",
            "x-displayname": "DNS Information",
            "x-ves-proto-message": "ves.io.schema.virtual_host_dns_info.DnsInfo",
            "properties": {
                "ip_address": {
                    "type": "string",
                    "description": " IP address associated with virtual host\n\nValidation Rules:\n  ves.io.schema.rules.string.ip: true\n",
                    "title": "IP address",
                    "x-displayname": "IP Address",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.ip": "true"
                    }
                }
            }
        },
        "virtual_hostcrudapiErrorCode": {
            "type": "string",
            "enum": [
                "EOK",
                "ENOTFOUND",
                "EEXISTS",
                "EUNKNOWN"
            ],
            "default": "EOK",
            "x-displayname": "",
            "x-ves-proto-enum": "ves.io.schema.virtual_host.crudapi.ErrorCode"
        }
    },
    "x-displayname": "",
    "x-stream-definitions": {
        "crudapiObjectListRsp": {
            "properties": {
                "error": {
                    "$ref": "#/definitions/runtimeStreamError"
                },
                "result": {
                    "$ref": "#/definitions/crudapiObjectListRsp"
                }
            },
            "title": "Stream result of crudapiObjectListRsp",
            "type": "object"
        }
    },
    "x-ves-proto-file": "ves.io/schema/virtual_host/crudapi/api.proto"
}`

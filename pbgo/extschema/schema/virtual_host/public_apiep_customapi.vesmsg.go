// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package virtual_host

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"
	google_protobuf "github.com/gogo/protobuf/types"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema_app_type "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/app_type"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *APIEPActivityMetrics) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *APIEPActivityMetrics) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *APIEPActivityMetrics) DeepCopy() *APIEPActivityMetrics {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &APIEPActivityMetrics{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *APIEPActivityMetrics) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *APIEPActivityMetrics) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return APIEPActivityMetricsValidator().Validate(ctx, m, opts...)
}

type ValidateAPIEPActivityMetrics struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAPIEPActivityMetrics) ApiepUrlValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for apiep_url")
	}

	return validatorFn, nil
}

func (v *ValidateAPIEPActivityMetrics) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*APIEPActivityMetrics)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *APIEPActivityMetrics got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["apiep_url"]; exists {

		vOpts := append(opts, db.WithValidateField("apiep_url"))
		if err := fv(ctx, m.GetApiepUrl(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["method"]; exists {

		vOpts := append(opts, db.WithValidateField("method"))
		if err := fv(ctx, m.GetMethod(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["top_by_metric_value"]; exists {

		vOpts := append(opts, db.WithValidateField("top_by_metric_value"))
		if err := fv(ctx, m.GetTopByMetricValue(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAPIEPActivityMetricsValidator = func() *ValidateAPIEPActivityMetrics {
	v := &ValidateAPIEPActivityMetrics{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhApiepUrl := v.ApiepUrlValidationRuleHandler
	rulesApiepUrl := map[string]string{
		"ves.io.schema.rules.string.max_bytes":           "1024",
		"ves.io.schema.rules.string.min_bytes":           "1",
		"ves.io.schema.rules.string.templated_http_path": "true",
	}
	vFn, err = vrhApiepUrl(rulesApiepUrl)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for APIEPActivityMetrics.apiep_url: %s", err)
		panic(errMsg)
	}
	v.FldValidators["apiep_url"] = vFn

	return v
}()

func APIEPActivityMetricsValidator() db.Validator {
	return DefaultAPIEPActivityMetricsValidator
}

// augmented methods on protoc/std generated struct

func (m *APIEPSummaryFilter) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *APIEPSummaryFilter) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *APIEPSummaryFilter) DeepCopy() *APIEPSummaryFilter {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &APIEPSummaryFilter{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *APIEPSummaryFilter) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *APIEPSummaryFilter) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return APIEPSummaryFilterValidator().Validate(ctx, m, opts...)
}

type ValidateAPIEPSummaryFilter struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAPIEPSummaryFilter) DomainsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for domains")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for domains")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated domains")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items domains")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAPIEPSummaryFilter) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*APIEPSummaryFilter)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *APIEPSummaryFilter got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["apiep_category"]; exists {

		vOpts := append(opts, db.WithValidateField("apiep_category"))
		for idx, item := range m.GetApiepCategory() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["domains"]; exists {
		vOpts := append(opts, db.WithValidateField("domains"))
		if err := fv(ctx, m.GetDomains(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["end_time"]; exists {

		vOpts := append(opts, db.WithValidateField("end_time"))
		if err := fv(ctx, m.GetEndTime(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["start_time"]; exists {

		vOpts := append(opts, db.WithValidateField("start_time"))
		if err := fv(ctx, m.GetStartTime(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAPIEPSummaryFilterValidator = func() *ValidateAPIEPSummaryFilter {
	v := &ValidateAPIEPSummaryFilter{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDomains := v.DomainsValidationRuleHandler
	rulesDomains := map[string]string{
		"ves.io.schema.rules.repeated.items.string.max_len":   "256",
		"ves.io.schema.rules.repeated.items.string.min_len":   "1",
		"ves.io.schema.rules.repeated.items.string.vh_domain": "true",
		"ves.io.schema.rules.repeated.max_items":              "5",
		"ves.io.schema.rules.repeated.unique":                 "true",
	}
	vFn, err = vrhDomains(rulesDomains)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for APIEPSummaryFilter.domains: %s", err)
		panic(errMsg)
	}
	v.FldValidators["domains"] = vFn

	return v
}()

func APIEPSummaryFilterValidator() db.Validator {
	return DefaultAPIEPSummaryFilterValidator
}

// augmented methods on protoc/std generated struct

func (m *APIEndpoint) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *APIEndpoint) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *APIEndpoint) DeepCopy() *APIEndpoint {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &APIEndpoint{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *APIEndpoint) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *APIEndpoint) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return APIEndpointValidator().Validate(ctx, m, opts...)
}

type ValidateAPIEndpoint struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAPIEndpoint) CollapsedUrlValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for collapsed_url")
	}

	return validatorFn, nil
}

func (v *ValidateAPIEndpoint) MethodValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for method")
	}

	return validatorFn, nil
}

func (v *ValidateAPIEndpoint) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*APIEndpoint)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *APIEndpoint got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["collapsed_url"]; exists {

		vOpts := append(opts, db.WithValidateField("collapsed_url"))
		if err := fv(ctx, m.GetCollapsedUrl(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["method"]; exists {

		vOpts := append(opts, db.WithValidateField("method"))
		if err := fv(ctx, m.GetMethod(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAPIEndpointValidator = func() *ValidateAPIEndpoint {
	v := &ValidateAPIEndpoint{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhCollapsedUrl := v.CollapsedUrlValidationRuleHandler
	rulesCollapsedUrl := map[string]string{
		"ves.io.schema.rules.string.max_len": "256",
		"ves.io.schema.rules.string.min_len": "1",
	}
	vFn, err = vrhCollapsedUrl(rulesCollapsedUrl)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for APIEndpoint.collapsed_url: %s", err)
		panic(errMsg)
	}
	v.FldValidators["collapsed_url"] = vFn

	vrhMethod := v.MethodValidationRuleHandler
	rulesMethod := map[string]string{
		"ves.io.schema.rules.string.in": "[\"GET\", \"POST\", \"HEAD\", \"PUT\", \"DELETE\", \"OPTIONS\", \"REGISTER\", \"DEBUG\", \"PROPFIND\", \"PATCH\", \"CONNECT\", \"SEARCH\", \"INDEX\", \"TRACE\"]",
	}
	vFn, err = vrhMethod(rulesMethod)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for APIEndpoint.method: %s", err)
		panic(errMsg)
	}
	v.FldValidators["method"] = vFn

	return v
}()

func APIEndpointValidator() db.Validator {
	return DefaultAPIEndpointValidator
}

// augmented methods on protoc/std generated struct

func (m *APIEndpointLearntSchemaReq) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *APIEndpointLearntSchemaReq) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *APIEndpointLearntSchemaReq) DeepCopy() *APIEndpointLearntSchemaReq {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &APIEndpointLearntSchemaReq{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *APIEndpointLearntSchemaReq) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *APIEndpointLearntSchemaReq) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return APIEndpointLearntSchemaReqValidator().Validate(ctx, m, opts...)
}

type ValidateAPIEndpointLearntSchemaReq struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAPIEndpointLearntSchemaReq) DomainsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for domains")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for domains")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated domains")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items domains")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAPIEndpointLearntSchemaReq) ApiEndpointInfoRequestValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepEnumItemRules(rules)
	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema_app_type.ApiEndpointInfoRequest)
		return int32(i)
	}
	// ves_io_schema_app_type.ApiEndpointInfoRequest_name is generated in .pb.go
	itemValFn, err := db.NewEnumValidationRuleHandler(itemRules, ves_io_schema_app_type.ApiEndpointInfoRequest_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for api_endpoint_info_request")
	}
	itemsValidatorFn := func(ctx context.Context, elems []ves_io_schema_app_type.ApiEndpointInfoRequest, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for api_endpoint_info_request")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]ves_io_schema_app_type.ApiEndpointInfoRequest)
		if !ok {
			return fmt.Errorf("Repeated validation expected []ves_io_schema_app_type.ApiEndpointInfoRequest, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated api_endpoint_info_request")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items api_endpoint_info_request")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAPIEndpointLearntSchemaReq) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*APIEndpointLearntSchemaReq)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *APIEndpointLearntSchemaReq got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["api_endpoint_info_request"]; exists {
		vOpts := append(opts, db.WithValidateField("api_endpoint_info_request"))
		if err := fv(ctx, m.GetApiEndpointInfoRequest(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["collapsed_url"]; exists {

		vOpts := append(opts, db.WithValidateField("collapsed_url"))
		if err := fv(ctx, m.GetCollapsedUrl(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["domains"]; exists {
		vOpts := append(opts, db.WithValidateField("domains"))
		if err := fv(ctx, m.GetDomains(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["method"]; exists {

		vOpts := append(opts, db.WithValidateField("method"))
		if err := fv(ctx, m.GetMethod(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAPIEndpointLearntSchemaReqValidator = func() *ValidateAPIEndpointLearntSchemaReq {
	v := &ValidateAPIEndpointLearntSchemaReq{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDomains := v.DomainsValidationRuleHandler
	rulesDomains := map[string]string{
		"ves.io.schema.rules.repeated.items.string.max_len":   "256",
		"ves.io.schema.rules.repeated.items.string.min_len":   "1",
		"ves.io.schema.rules.repeated.items.string.vh_domain": "true",
		"ves.io.schema.rules.repeated.max_items":              "5",
		"ves.io.schema.rules.repeated.unique":                 "true",
	}
	vFn, err = vrhDomains(rulesDomains)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for APIEndpointLearntSchemaReq.domains: %s", err)
		panic(errMsg)
	}
	v.FldValidators["domains"] = vFn

	vrhApiEndpointInfoRequest := v.ApiEndpointInfoRequestValidationRuleHandler
	rulesApiEndpointInfoRequest := map[string]string{
		"ves.io.schema.rules.repeated.unique": "true",
	}
	vFn, err = vrhApiEndpointInfoRequest(rulesApiEndpointInfoRequest)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for APIEndpointLearntSchemaReq.api_endpoint_info_request: %s", err)
		panic(errMsg)
	}
	v.FldValidators["api_endpoint_info_request"] = vFn

	return v
}()

func APIEndpointLearntSchemaReqValidator() db.Validator {
	return DefaultAPIEndpointLearntSchemaReqValidator
}

// augmented methods on protoc/std generated struct

func (m *APIEndpointLearntSchemaRsp) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *APIEndpointLearntSchemaRsp) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *APIEndpointLearntSchemaRsp) DeepCopy() *APIEndpointLearntSchemaRsp {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &APIEndpointLearntSchemaRsp{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *APIEndpointLearntSchemaRsp) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *APIEndpointLearntSchemaRsp) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return APIEndpointLearntSchemaRspValidator().Validate(ctx, m, opts...)
}

type ValidateAPIEndpointLearntSchemaRsp struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAPIEndpointLearntSchemaRsp) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*APIEndpointLearntSchemaRsp)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *APIEndpointLearntSchemaRsp got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["api_specs"]; exists {

		vOpts := append(opts, db.WithValidateField("api_specs"))
		for key, value := range m.GetApiSpecs() {
			vOpts := append(vOpts, db.WithValidateMapKey(key))
			if err := fv(ctx, value, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["authentication"]; exists {

		vOpts := append(opts, db.WithValidateField("authentication"))
		if err := fv(ctx, m.GetAuthentication(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["discovered_openapi_spec"]; exists {

		vOpts := append(opts, db.WithValidateField("discovered_openapi_spec"))
		if err := fv(ctx, m.GetDiscoveredOpenapiSpec(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["discovered_schema"]; exists {

		vOpts := append(opts, db.WithValidateField("discovered_schema"))
		if err := fv(ctx, m.GetDiscoveredSchema(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["inventory_openapi_spec"]; exists {

		vOpts := append(opts, db.WithValidateField("inventory_openapi_spec"))
		if err := fv(ctx, m.GetInventoryOpenapiSpec(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["pdf_info"]; exists {

		vOpts := append(opts, db.WithValidateField("pdf_info"))
		if err := fv(ctx, m.GetPdfInfo(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["sensitive_data"]; exists {

		vOpts := append(opts, db.WithValidateField("sensitive_data"))
		for idx, item := range m.GetSensitiveData() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAPIEndpointLearntSchemaRspValidator = func() *ValidateAPIEndpointLearntSchemaRsp {
	v := &ValidateAPIEndpointLearntSchemaRsp{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func APIEndpointLearntSchemaRspValidator() db.Validator {
	return DefaultAPIEndpointLearntSchemaRspValidator
}

// augmented methods on protoc/std generated struct

func (m *APIEndpointPDFReq) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *APIEndpointPDFReq) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *APIEndpointPDFReq) DeepCopy() *APIEndpointPDFReq {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &APIEndpointPDFReq{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *APIEndpointPDFReq) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *APIEndpointPDFReq) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return APIEndpointPDFReqValidator().Validate(ctx, m, opts...)
}

type ValidateAPIEndpointPDFReq struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAPIEndpointPDFReq) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*APIEndpointPDFReq)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *APIEndpointPDFReq got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["collapsed_url"]; exists {

		vOpts := append(opts, db.WithValidateField("collapsed_url"))
		if err := fv(ctx, m.GetCollapsedUrl(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["method"]; exists {

		vOpts := append(opts, db.WithValidateField("method"))
		if err := fv(ctx, m.GetMethod(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAPIEndpointPDFReqValidator = func() *ValidateAPIEndpointPDFReq {
	v := &ValidateAPIEndpointPDFReq{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func APIEndpointPDFReqValidator() db.Validator {
	return DefaultAPIEndpointPDFReqValidator
}

// augmented methods on protoc/std generated struct

func (m *APIEndpointPDFRsp) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *APIEndpointPDFRsp) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *APIEndpointPDFRsp) DeepCopy() *APIEndpointPDFRsp {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &APIEndpointPDFRsp{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *APIEndpointPDFRsp) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *APIEndpointPDFRsp) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return APIEndpointPDFRspValidator().Validate(ctx, m, opts...)
}

type ValidateAPIEndpointPDFRsp struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAPIEndpointPDFRsp) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*APIEndpointPDFRsp)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *APIEndpointPDFRsp got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["pdf_info"]; exists {

		vOpts := append(opts, db.WithValidateField("pdf_info"))
		if err := fv(ctx, m.GetPdfInfo(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAPIEndpointPDFRspValidator = func() *ValidateAPIEndpointPDFRsp {
	v := &ValidateAPIEndpointPDFRsp{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func APIEndpointPDFRspValidator() db.Validator {
	return DefaultAPIEndpointPDFRspValidator
}

// augmented methods on protoc/std generated struct

func (m *APIEndpointReq) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *APIEndpointReq) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *APIEndpointReq) DeepCopy() *APIEndpointReq {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &APIEndpointReq{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *APIEndpointReq) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *APIEndpointReq) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return APIEndpointReqValidator().Validate(ctx, m, opts...)
}

type ValidateAPIEndpointReq struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAPIEndpointReq) ApiEndpointInfoRequestValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepEnumItemRules(rules)
	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema_app_type.ApiEndpointInfoRequest)
		return int32(i)
	}
	// ves_io_schema_app_type.ApiEndpointInfoRequest_name is generated in .pb.go
	itemValFn, err := db.NewEnumValidationRuleHandler(itemRules, ves_io_schema_app_type.ApiEndpointInfoRequest_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for api_endpoint_info_request")
	}
	itemsValidatorFn := func(ctx context.Context, elems []ves_io_schema_app_type.ApiEndpointInfoRequest, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for api_endpoint_info_request")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]ves_io_schema_app_type.ApiEndpointInfoRequest)
		if !ok {
			return fmt.Errorf("Repeated validation expected []ves_io_schema_app_type.ApiEndpointInfoRequest, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated api_endpoint_info_request")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items api_endpoint_info_request")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAPIEndpointReq) CollapsedUrlValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for collapsed_url")
	}

	return validatorFn, nil
}

func (v *ValidateAPIEndpointReq) MethodValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for method")
	}

	return validatorFn, nil
}

func (v *ValidateAPIEndpointReq) DomainsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for domains")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for domains")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated domains")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items domains")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAPIEndpointReq) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*APIEndpointReq)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *APIEndpointReq got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["api_endpoint_info_request"]; exists {
		vOpts := append(opts, db.WithValidateField("api_endpoint_info_request"))
		if err := fv(ctx, m.GetApiEndpointInfoRequest(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["collapsed_url"]; exists {

		vOpts := append(opts, db.WithValidateField("collapsed_url"))
		if err := fv(ctx, m.GetCollapsedUrl(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["domains"]; exists {
		vOpts := append(opts, db.WithValidateField("domains"))
		if err := fv(ctx, m.GetDomains(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["method"]; exists {

		vOpts := append(opts, db.WithValidateField("method"))
		if err := fv(ctx, m.GetMethod(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAPIEndpointReqValidator = func() *ValidateAPIEndpointReq {
	v := &ValidateAPIEndpointReq{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhApiEndpointInfoRequest := v.ApiEndpointInfoRequestValidationRuleHandler
	rulesApiEndpointInfoRequest := map[string]string{
		"ves.io.schema.rules.repeated.unique": "true",
	}
	vFn, err = vrhApiEndpointInfoRequest(rulesApiEndpointInfoRequest)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for APIEndpointReq.api_endpoint_info_request: %s", err)
		panic(errMsg)
	}
	v.FldValidators["api_endpoint_info_request"] = vFn

	vrhCollapsedUrl := v.CollapsedUrlValidationRuleHandler
	rulesCollapsedUrl := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhCollapsedUrl(rulesCollapsedUrl)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for APIEndpointReq.collapsed_url: %s", err)
		panic(errMsg)
	}
	v.FldValidators["collapsed_url"] = vFn

	vrhMethod := v.MethodValidationRuleHandler
	rulesMethod := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhMethod(rulesMethod)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for APIEndpointReq.method: %s", err)
		panic(errMsg)
	}
	v.FldValidators["method"] = vFn

	vrhDomains := v.DomainsValidationRuleHandler
	rulesDomains := map[string]string{
		"ves.io.schema.rules.repeated.items.string.max_len":   "256",
		"ves.io.schema.rules.repeated.items.string.min_len":   "1",
		"ves.io.schema.rules.repeated.items.string.vh_domain": "true",
		"ves.io.schema.rules.repeated.max_items":              "5",
		"ves.io.schema.rules.repeated.unique":                 "true",
	}
	vFn, err = vrhDomains(rulesDomains)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for APIEndpointReq.domains: %s", err)
		panic(errMsg)
	}
	v.FldValidators["domains"] = vFn

	return v
}()

func APIEndpointReqValidator() db.Validator {
	return DefaultAPIEndpointReqValidator
}

// augmented methods on protoc/std generated struct

func (m *APIEndpointRsp) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *APIEndpointRsp) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *APIEndpointRsp) DeepCopy() *APIEndpointRsp {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &APIEndpointRsp{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *APIEndpointRsp) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *APIEndpointRsp) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return APIEndpointRspValidator().Validate(ctx, m, opts...)
}

type ValidateAPIEndpointRsp struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAPIEndpointRsp) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*APIEndpointRsp)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *APIEndpointRsp got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["apiep"]; exists {

		vOpts := append(opts, db.WithValidateField("apiep"))
		if err := fv(ctx, m.GetApiep(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAPIEndpointRspValidator = func() *ValidateAPIEndpointRsp {
	v := &ValidateAPIEndpointRsp{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func APIEndpointRspValidator() db.Validator {
	return DefaultAPIEndpointRspValidator
}

// augmented methods on protoc/std generated struct

func (m *APIEndpointsReq) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *APIEndpointsReq) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *APIEndpointsReq) DeepCopy() *APIEndpointsReq {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &APIEndpointsReq{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *APIEndpointsReq) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *APIEndpointsReq) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return APIEndpointsReqValidator().Validate(ctx, m, opts...)
}

type ValidateAPIEndpointsReq struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAPIEndpointsReq) ApiEndpointInfoRequestValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepEnumItemRules(rules)
	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema_app_type.ApiEndpointInfoRequest)
		return int32(i)
	}
	// ves_io_schema_app_type.ApiEndpointInfoRequest_name is generated in .pb.go
	itemValFn, err := db.NewEnumValidationRuleHandler(itemRules, ves_io_schema_app_type.ApiEndpointInfoRequest_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for api_endpoint_info_request")
	}
	itemsValidatorFn := func(ctx context.Context, elems []ves_io_schema_app_type.ApiEndpointInfoRequest, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for api_endpoint_info_request")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]ves_io_schema_app_type.ApiEndpointInfoRequest)
		if !ok {
			return fmt.Errorf("Repeated validation expected []ves_io_schema_app_type.ApiEndpointInfoRequest, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated api_endpoint_info_request")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items api_endpoint_info_request")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAPIEndpointsReq) DomainsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for domains")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for domains")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated domains")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items domains")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAPIEndpointsReq) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*APIEndpointsReq)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *APIEndpointsReq got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["api_endpoint_info_request"]; exists {
		vOpts := append(opts, db.WithValidateField("api_endpoint_info_request"))
		if err := fv(ctx, m.GetApiEndpointInfoRequest(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["apiep_category"]; exists {

		vOpts := append(opts, db.WithValidateField("apiep_category"))
		for idx, item := range m.GetApiepCategory() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["domains"]; exists {
		vOpts := append(opts, db.WithValidateField("domains"))
		if err := fv(ctx, m.GetDomains(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["end_time"]; exists {

		vOpts := append(opts, db.WithValidateField("end_time"))
		if err := fv(ctx, m.GetEndTime(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["start_time"]; exists {

		vOpts := append(opts, db.WithValidateField("start_time"))
		if err := fv(ctx, m.GetStartTime(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAPIEndpointsReqValidator = func() *ValidateAPIEndpointsReq {
	v := &ValidateAPIEndpointsReq{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhApiEndpointInfoRequest := v.ApiEndpointInfoRequestValidationRuleHandler
	rulesApiEndpointInfoRequest := map[string]string{
		"ves.io.schema.rules.repeated.unique": "true",
	}
	vFn, err = vrhApiEndpointInfoRequest(rulesApiEndpointInfoRequest)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for APIEndpointsReq.api_endpoint_info_request: %s", err)
		panic(errMsg)
	}
	v.FldValidators["api_endpoint_info_request"] = vFn

	vrhDomains := v.DomainsValidationRuleHandler
	rulesDomains := map[string]string{
		"ves.io.schema.rules.repeated.items.string.max_len":   "256",
		"ves.io.schema.rules.repeated.items.string.min_len":   "1",
		"ves.io.schema.rules.repeated.items.string.vh_domain": "true",
		"ves.io.schema.rules.repeated.max_items":              "5",
		"ves.io.schema.rules.repeated.unique":                 "true",
	}
	vFn, err = vrhDomains(rulesDomains)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for APIEndpointsReq.domains: %s", err)
		panic(errMsg)
	}
	v.FldValidators["domains"] = vFn

	return v
}()

func APIEndpointsReqValidator() db.Validator {
	return DefaultAPIEndpointsReqValidator
}

// augmented methods on protoc/std generated struct

func (m *APIEndpointsRsp) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *APIEndpointsRsp) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *APIEndpointsRsp) DeepCopy() *APIEndpointsRsp {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &APIEndpointsRsp{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *APIEndpointsRsp) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *APIEndpointsRsp) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return APIEndpointsRspValidator().Validate(ctx, m, opts...)
}

type ValidateAPIEndpointsRsp struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAPIEndpointsRsp) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*APIEndpointsRsp)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *APIEndpointsRsp got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["apiep_list"]; exists {

		vOpts := append(opts, db.WithValidateField("apiep_list"))
		for idx, item := range m.GetApiepList() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAPIEndpointsRspValidator = func() *ValidateAPIEndpointsRsp {
	v := &ValidateAPIEndpointsRsp{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func APIEndpointsRspValidator() db.Validator {
	return DefaultAPIEndpointsRspValidator
}

// augmented methods on protoc/std generated struct

func (m *ApiEndpointsStatsReq) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ApiEndpointsStatsReq) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ApiEndpointsStatsReq) DeepCopy() *ApiEndpointsStatsReq {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ApiEndpointsStatsReq{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ApiEndpointsStatsReq) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ApiEndpointsStatsReq) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ApiEndpointsStatsReqValidator().Validate(ctx, m, opts...)
}

type ValidateApiEndpointsStatsReq struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateApiEndpointsStatsReq) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ApiEndpointsStatsReq)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ApiEndpointsStatsReq got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultApiEndpointsStatsReqValidator = func() *ValidateApiEndpointsStatsReq {
	v := &ValidateApiEndpointsStatsReq{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func ApiEndpointsStatsReqValidator() db.Validator {
	return DefaultApiEndpointsStatsReqValidator
}

// augmented methods on protoc/std generated struct

func (m *ApiEndpointsStatsRsp) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ApiEndpointsStatsRsp) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ApiEndpointsStatsRsp) DeepCopy() *ApiEndpointsStatsRsp {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ApiEndpointsStatsRsp{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ApiEndpointsStatsRsp) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ApiEndpointsStatsRsp) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ApiEndpointsStatsRspValidator().Validate(ctx, m, opts...)
}

type ValidateApiEndpointsStatsRsp struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateApiEndpointsStatsRsp) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ApiEndpointsStatsRsp)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ApiEndpointsStatsRsp got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["discovered"]; exists {

		vOpts := append(opts, db.WithValidateField("discovered"))
		if err := fv(ctx, m.GetDiscovered(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["inventory"]; exists {

		vOpts := append(opts, db.WithValidateField("inventory"))
		if err := fv(ctx, m.GetInventory(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["pii_detected"]; exists {

		vOpts := append(opts, db.WithValidateField("pii_detected"))
		if err := fv(ctx, m.GetPiiDetected(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["shadow"]; exists {

		vOpts := append(opts, db.WithValidateField("shadow"))
		if err := fv(ctx, m.GetShadow(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["total_endpoints"]; exists {

		vOpts := append(opts, db.WithValidateField("total_endpoints"))
		if err := fv(ctx, m.GetTotalEndpoints(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultApiEndpointsStatsRspValidator = func() *ValidateApiEndpointsStatsRsp {
	v := &ValidateApiEndpointsStatsRsp{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func ApiEndpointsStatsRspValidator() db.Validator {
	return DefaultApiEndpointsStatsRspValidator
}

// augmented methods on protoc/std generated struct

func (m *GetAPICallSummaryReq) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetAPICallSummaryReq) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetAPICallSummaryReq) DeepCopy() *GetAPICallSummaryReq {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetAPICallSummaryReq{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetAPICallSummaryReq) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetAPICallSummaryReq) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetAPICallSummaryReqValidator().Validate(ctx, m, opts...)
}

type ValidateGetAPICallSummaryReq struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetAPICallSummaryReq) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetAPICallSummaryReq)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetAPICallSummaryReq got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["apiep_summary_filter"]; exists {

		vOpts := append(opts, db.WithValidateField("apiep_summary_filter"))
		if err := fv(ctx, m.GetApiepSummaryFilter(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetAPICallSummaryReqValidator = func() *ValidateGetAPICallSummaryReq {
	v := &ValidateGetAPICallSummaryReq{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["apiep_summary_filter"] = APIEPSummaryFilterValidator().Validate

	return v
}()

func GetAPICallSummaryReqValidator() db.Validator {
	return DefaultGetAPICallSummaryReqValidator
}

// augmented methods on protoc/std generated struct

func (m *GetAPICallSummaryRsp) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetAPICallSummaryRsp) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetAPICallSummaryRsp) DeepCopy() *GetAPICallSummaryRsp {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetAPICallSummaryRsp{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetAPICallSummaryRsp) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetAPICallSummaryRsp) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetAPICallSummaryRspValidator().Validate(ctx, m, opts...)
}

type ValidateGetAPICallSummaryRsp struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetAPICallSummaryRsp) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetAPICallSummaryRsp)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetAPICallSummaryRsp got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["request_count_per_rsp_code"]; exists {

		vOpts := append(opts, db.WithValidateField("request_count_per_rsp_code"))
		for idx, item := range m.GetRequestCountPerRspCode() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["total_calls"]; exists {

		vOpts := append(opts, db.WithValidateField("total_calls"))
		if err := fv(ctx, m.GetTotalCalls(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetAPICallSummaryRspValidator = func() *ValidateGetAPICallSummaryRsp {
	v := &ValidateGetAPICallSummaryRsp{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func GetAPICallSummaryRspValidator() db.Validator {
	return DefaultGetAPICallSummaryRspValidator
}

// augmented methods on protoc/std generated struct

func (m *GetTopAPIEndpointsReq) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetTopAPIEndpointsReq) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetTopAPIEndpointsReq) DeepCopy() *GetTopAPIEndpointsReq {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetTopAPIEndpointsReq{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetTopAPIEndpointsReq) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetTopAPIEndpointsReq) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetTopAPIEndpointsReqValidator().Validate(ctx, m, opts...)
}

type ValidateGetTopAPIEndpointsReq struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetTopAPIEndpointsReq) TopByMetricValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(APIEPActivityMetricType)
		return int32(i)
	}
	// APIEPActivityMetricType_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, APIEPActivityMetricType_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for top_by_metric")
	}

	return validatorFn, nil
}

func (v *ValidateGetTopAPIEndpointsReq) TopkValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for topk")
	}

	return validatorFn, nil
}

func (v *ValidateGetTopAPIEndpointsReq) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetTopAPIEndpointsReq)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetTopAPIEndpointsReq got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["apiep_summary_filter"]; exists {

		vOpts := append(opts, db.WithValidateField("apiep_summary_filter"))
		if err := fv(ctx, m.GetApiepSummaryFilter(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["top_by_metric"]; exists {

		vOpts := append(opts, db.WithValidateField("top_by_metric"))
		if err := fv(ctx, m.GetTopByMetric(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["topk"]; exists {

		vOpts := append(opts, db.WithValidateField("topk"))
		if err := fv(ctx, m.GetTopk(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetTopAPIEndpointsReqValidator = func() *ValidateGetTopAPIEndpointsReq {
	v := &ValidateGetTopAPIEndpointsReq{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhTopByMetric := v.TopByMetricValidationRuleHandler
	rulesTopByMetric := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhTopByMetric(rulesTopByMetric)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetTopAPIEndpointsReq.top_by_metric: %s", err)
		panic(errMsg)
	}
	v.FldValidators["top_by_metric"] = vFn

	vrhTopk := v.TopkValidationRuleHandler
	rulesTopk := map[string]string{
		"ves.io.schema.rules.uint32.gte": "0",
		"ves.io.schema.rules.uint32.lte": "10",
	}
	vFn, err = vrhTopk(rulesTopk)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetTopAPIEndpointsReq.topk: %s", err)
		panic(errMsg)
	}
	v.FldValidators["topk"] = vFn

	v.FldValidators["apiep_summary_filter"] = APIEPSummaryFilterValidator().Validate

	return v
}()

func GetTopAPIEndpointsReqValidator() db.Validator {
	return DefaultGetTopAPIEndpointsReqValidator
}

// augmented methods on protoc/std generated struct

func (m *GetTopAPIEndpointsRsp) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetTopAPIEndpointsRsp) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetTopAPIEndpointsRsp) DeepCopy() *GetTopAPIEndpointsRsp {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetTopAPIEndpointsRsp{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetTopAPIEndpointsRsp) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetTopAPIEndpointsRsp) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetTopAPIEndpointsRspValidator().Validate(ctx, m, opts...)
}

type ValidateGetTopAPIEndpointsRsp struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetTopAPIEndpointsRsp) TopApiepsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for top_apieps")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*APIEPActivityMetrics, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := APIEPActivityMetricsValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for top_apieps")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*APIEPActivityMetrics)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*APIEPActivityMetrics, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated top_apieps")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items top_apieps")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetTopAPIEndpointsRsp) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetTopAPIEndpointsRsp)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetTopAPIEndpointsRsp got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["top_apieps"]; exists {
		vOpts := append(opts, db.WithValidateField("top_apieps"))
		if err := fv(ctx, m.GetTopApieps(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetTopAPIEndpointsRspValidator = func() *ValidateGetTopAPIEndpointsRsp {
	v := &ValidateGetTopAPIEndpointsRsp{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhTopApieps := v.TopApiepsValidationRuleHandler
	rulesTopApieps := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "10",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhTopApieps(rulesTopApieps)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetTopAPIEndpointsRsp.top_apieps: %s", err)
		panic(errMsg)
	}
	v.FldValidators["top_apieps"] = vFn

	return v
}()

func GetTopAPIEndpointsRspValidator() db.Validator {
	return DefaultGetTopAPIEndpointsRspValidator
}

// augmented methods on protoc/std generated struct

func (m *GetTopSensitiveDataReq) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetTopSensitiveDataReq) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetTopSensitiveDataReq) DeepCopy() *GetTopSensitiveDataReq {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetTopSensitiveDataReq{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetTopSensitiveDataReq) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetTopSensitiveDataReq) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetTopSensitiveDataReqValidator().Validate(ctx, m, opts...)
}

type ValidateGetTopSensitiveDataReq struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetTopSensitiveDataReq) DomainsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for domains")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for domains")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated domains")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items domains")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetTopSensitiveDataReq) TopkValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for topk")
	}

	return validatorFn, nil
}

func (v *ValidateGetTopSensitiveDataReq) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetTopSensitiveDataReq)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetTopSensitiveDataReq got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["apiep_category"]; exists {

		vOpts := append(opts, db.WithValidateField("apiep_category"))
		for idx, item := range m.GetApiepCategory() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["domains"]; exists {
		vOpts := append(opts, db.WithValidateField("domains"))
		if err := fv(ctx, m.GetDomains(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["topk"]; exists {

		vOpts := append(opts, db.WithValidateField("topk"))
		if err := fv(ctx, m.GetTopk(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetTopSensitiveDataReqValidator = func() *ValidateGetTopSensitiveDataReq {
	v := &ValidateGetTopSensitiveDataReq{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDomains := v.DomainsValidationRuleHandler
	rulesDomains := map[string]string{
		"ves.io.schema.rules.repeated.items.string.max_len":   "256",
		"ves.io.schema.rules.repeated.items.string.min_len":   "1",
		"ves.io.schema.rules.repeated.items.string.vh_domain": "true",
		"ves.io.schema.rules.repeated.max_items":              "5",
		"ves.io.schema.rules.repeated.unique":                 "true",
	}
	vFn, err = vrhDomains(rulesDomains)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetTopSensitiveDataReq.domains: %s", err)
		panic(errMsg)
	}
	v.FldValidators["domains"] = vFn

	vrhTopk := v.TopkValidationRuleHandler
	rulesTopk := map[string]string{
		"ves.io.schema.rules.uint32.gte": "0",
		"ves.io.schema.rules.uint32.lte": "10",
	}
	vFn, err = vrhTopk(rulesTopk)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetTopSensitiveDataReq.topk: %s", err)
		panic(errMsg)
	}
	v.FldValidators["topk"] = vFn

	return v
}()

func GetTopSensitiveDataReqValidator() db.Validator {
	return DefaultGetTopSensitiveDataReqValidator
}

// augmented methods on protoc/std generated struct

func (m *GetTopSensitiveDataRsp) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetTopSensitiveDataRsp) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetTopSensitiveDataRsp) DeepCopy() *GetTopSensitiveDataRsp {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetTopSensitiveDataRsp{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetTopSensitiveDataRsp) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetTopSensitiveDataRsp) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetTopSensitiveDataRspValidator().Validate(ctx, m, opts...)
}

type ValidateGetTopSensitiveDataRsp struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetTopSensitiveDataRsp) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetTopSensitiveDataRsp)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetTopSensitiveDataRsp got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["top_sensitive_data"]; exists {

		vOpts := append(opts, db.WithValidateField("top_sensitive_data"))
		for idx, item := range m.GetTopSensitiveData() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetTopSensitiveDataRspValidator = func() *ValidateGetTopSensitiveDataRsp {
	v := &ValidateGetTopSensitiveDataRsp{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func GetTopSensitiveDataRspValidator() db.Validator {
	return DefaultGetTopSensitiveDataRspValidator
}

// augmented methods on protoc/std generated struct

func (m *GetVulnerabilitiesReq) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetVulnerabilitiesReq) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetVulnerabilitiesReq) DeepCopy() *GetVulnerabilitiesReq {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetVulnerabilitiesReq{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetVulnerabilitiesReq) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetVulnerabilitiesReq) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetVulnerabilitiesReqValidator().Validate(ctx, m, opts...)
}

type ValidateGetVulnerabilitiesReq struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetVulnerabilitiesReq) DomainsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for domains")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for domains")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated domains")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items domains")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetVulnerabilitiesReq) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetVulnerabilitiesReq)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetVulnerabilitiesReq got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	switch m.GetContext().(type) {
	case *GetVulnerabilitiesReq_ApiEndpoint:
		if fv, exists := v.FldValidators["context.api_endpoint"]; exists {
			val := m.GetContext().(*GetVulnerabilitiesReq_ApiEndpoint).ApiEndpoint
			vOpts := append(opts,
				db.WithValidateField("context"),
				db.WithValidateField("api_endpoint"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["domains"]; exists {
		vOpts := append(opts, db.WithValidateField("domains"))
		if err := fv(ctx, m.GetDomains(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetVulnerabilitiesReqValidator = func() *ValidateGetVulnerabilitiesReq {
	v := &ValidateGetVulnerabilitiesReq{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDomains := v.DomainsValidationRuleHandler
	rulesDomains := map[string]string{
		"ves.io.schema.rules.repeated.items.string.max_len":   "256",
		"ves.io.schema.rules.repeated.items.string.min_len":   "1",
		"ves.io.schema.rules.repeated.items.string.vh_domain": "true",
		"ves.io.schema.rules.repeated.max_items":              "5",
		"ves.io.schema.rules.repeated.unique":                 "true",
	}
	vFn, err = vrhDomains(rulesDomains)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetVulnerabilitiesReq.domains: %s", err)
		panic(errMsg)
	}
	v.FldValidators["domains"] = vFn

	v.FldValidators["context.api_endpoint"] = APIEndpointValidator().Validate

	return v
}()

func GetVulnerabilitiesReqValidator() db.Validator {
	return DefaultGetVulnerabilitiesReqValidator
}

// augmented methods on protoc/std generated struct

func (m *GetVulnerabilitiesRsp) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetVulnerabilitiesRsp) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetVulnerabilitiesRsp) DeepCopy() *GetVulnerabilitiesRsp {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetVulnerabilitiesRsp{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetVulnerabilitiesRsp) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetVulnerabilitiesRsp) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetVulnerabilitiesRspValidator().Validate(ctx, m, opts...)
}

type ValidateGetVulnerabilitiesRsp struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetVulnerabilitiesRsp) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetVulnerabilitiesRsp)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetVulnerabilitiesRsp got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["vulnerabilities"]; exists {

		vOpts := append(opts, db.WithValidateField("vulnerabilities"))
		for idx, item := range m.GetVulnerabilities() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetVulnerabilitiesRspValidator = func() *ValidateGetVulnerabilitiesRsp {
	v := &ValidateGetVulnerabilitiesRsp{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func GetVulnerabilitiesRspValidator() db.Validator {
	return DefaultGetVulnerabilitiesRspValidator
}

// augmented methods on protoc/std generated struct

func (m *RequestCountPerResponseClass) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *RequestCountPerResponseClass) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *RequestCountPerResponseClass) DeepCopy() *RequestCountPerResponseClass {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &RequestCountPerResponseClass{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *RequestCountPerResponseClass) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *RequestCountPerResponseClass) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return RequestCountPerResponseClassValidator().Validate(ctx, m, opts...)
}

type ValidateRequestCountPerResponseClass struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateRequestCountPerResponseClass) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*RequestCountPerResponseClass)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *RequestCountPerResponseClass got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["count"]; exists {

		vOpts := append(opts, db.WithValidateField("count"))
		if err := fv(ctx, m.GetCount(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["rsp_code_class"]; exists {

		vOpts := append(opts, db.WithValidateField("rsp_code_class"))
		if err := fv(ctx, m.GetRspCodeClass(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultRequestCountPerResponseClassValidator = func() *ValidateRequestCountPerResponseClass {
	v := &ValidateRequestCountPerResponseClass{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func RequestCountPerResponseClassValidator() db.Validator {
	return DefaultRequestCountPerResponseClassValidator
}

// augmented methods on protoc/std generated struct

func (m *SensitiveDataCount) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SensitiveDataCount) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SensitiveDataCount) DeepCopy() *SensitiveDataCount {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SensitiveDataCount{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SensitiveDataCount) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SensitiveDataCount) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SensitiveDataCountValidator().Validate(ctx, m, opts...)
}

type ValidateSensitiveDataCount struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSensitiveDataCount) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SensitiveDataCount)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SensitiveDataCount got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["count"]; exists {

		vOpts := append(opts, db.WithValidateField("count"))
		if err := fv(ctx, m.GetCount(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["sensitive_data_type"]; exists {

		vOpts := append(opts, db.WithValidateField("sensitive_data_type"))
		if err := fv(ctx, m.GetSensitiveDataType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["type"]; exists {

		vOpts := append(opts, db.WithValidateField("type"))
		if err := fv(ctx, m.GetType(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSensitiveDataCountValidator = func() *ValidateSensitiveDataCount {
	v := &ValidateSensitiveDataCount{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func SensitiveDataCountValidator() db.Validator {
	return DefaultSensitiveDataCountValidator
}

// augmented methods on protoc/std generated struct

func (m *SwaggerSpecReq) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SwaggerSpecReq) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SwaggerSpecReq) DeepCopy() *SwaggerSpecReq {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SwaggerSpecReq{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SwaggerSpecReq) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SwaggerSpecReq) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SwaggerSpecReqValidator().Validate(ctx, m, opts...)
}

type ValidateSwaggerSpecReq struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSwaggerSpecReq) DomainsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for domains")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for domains")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated domains")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items domains")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateSwaggerSpecReq) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SwaggerSpecReq)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SwaggerSpecReq got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["domains"]; exists {
		vOpts := append(opts, db.WithValidateField("domains"))
		if err := fv(ctx, m.GetDomains(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSwaggerSpecReqValidator = func() *ValidateSwaggerSpecReq {
	v := &ValidateSwaggerSpecReq{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDomains := v.DomainsValidationRuleHandler
	rulesDomains := map[string]string{
		"ves.io.schema.rules.repeated.items.string.max_len":   "256",
		"ves.io.schema.rules.repeated.items.string.min_len":   "1",
		"ves.io.schema.rules.repeated.items.string.vh_domain": "true",
		"ves.io.schema.rules.repeated.max_items":              "5",
		"ves.io.schema.rules.repeated.unique":                 "true",
	}
	vFn, err = vrhDomains(rulesDomains)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SwaggerSpecReq.domains: %s", err)
		panic(errMsg)
	}
	v.FldValidators["domains"] = vFn

	return v
}()

func SwaggerSpecReqValidator() db.Validator {
	return DefaultSwaggerSpecReqValidator
}

// augmented methods on protoc/std generated struct

func (m *SwaggerSpecRsp) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SwaggerSpecRsp) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SwaggerSpecRsp) DeepCopy() *SwaggerSpecRsp {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SwaggerSpecRsp{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SwaggerSpecRsp) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SwaggerSpecRsp) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SwaggerSpecRspValidator().Validate(ctx, m, opts...)
}

type ValidateSwaggerSpecRsp struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSwaggerSpecRsp) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SwaggerSpecRsp)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SwaggerSpecRsp got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["swagger_spec"]; exists {

		vOpts := append(opts, db.WithValidateField("swagger_spec"))
		if err := fv(ctx, m.GetSwaggerSpec(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSwaggerSpecRspValidator = func() *ValidateSwaggerSpecRsp {
	v := &ValidateSwaggerSpecRsp{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func SwaggerSpecRspValidator() db.Validator {
	return DefaultSwaggerSpecRspValidator
}

// augmented methods on protoc/std generated struct

func (m *UpdateVulnerabilitiesStateReq) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *UpdateVulnerabilitiesStateReq) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *UpdateVulnerabilitiesStateReq) DeepCopy() *UpdateVulnerabilitiesStateReq {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &UpdateVulnerabilitiesStateReq{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *UpdateVulnerabilitiesStateReq) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *UpdateVulnerabilitiesStateReq) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return UpdateVulnerabilitiesStateReqValidator().Validate(ctx, m, opts...)
}

type ValidateUpdateVulnerabilitiesStateReq struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateUpdateVulnerabilitiesStateReq) DomainValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for domain")
	}

	return validatorFn, nil
}

func (v *ValidateUpdateVulnerabilitiesStateReq) VulnStateValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(VulnStatus)
		return int32(i)
	}
	// VulnStatus_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, VulnStatus_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for vuln_state")
	}

	return validatorFn, nil
}

func (v *ValidateUpdateVulnerabilitiesStateReq) VulnIdValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for vuln_id")
	}

	return validatorFn, nil
}

func (v *ValidateUpdateVulnerabilitiesStateReq) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*UpdateVulnerabilitiesStateReq)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *UpdateVulnerabilitiesStateReq got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	switch m.GetContext().(type) {
	case *UpdateVulnerabilitiesStateReq_ApiEndpoint:
		if fv, exists := v.FldValidators["context.api_endpoint"]; exists {
			val := m.GetContext().(*UpdateVulnerabilitiesStateReq_ApiEndpoint).ApiEndpoint
			vOpts := append(opts,
				db.WithValidateField("context"),
				db.WithValidateField("api_endpoint"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["domain"]; exists {

		vOpts := append(opts, db.WithValidateField("domain"))
		if err := fv(ctx, m.GetDomain(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["vuln_id"]; exists {

		vOpts := append(opts, db.WithValidateField("vuln_id"))
		if err := fv(ctx, m.GetVulnId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["vuln_state"]; exists {

		vOpts := append(opts, db.WithValidateField("vuln_state"))
		if err := fv(ctx, m.GetVulnState(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultUpdateVulnerabilitiesStateReqValidator = func() *ValidateUpdateVulnerabilitiesStateReq {
	v := &ValidateUpdateVulnerabilitiesStateReq{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDomain := v.DomainValidationRuleHandler
	rulesDomain := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhDomain(rulesDomain)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for UpdateVulnerabilitiesStateReq.domain: %s", err)
		panic(errMsg)
	}
	v.FldValidators["domain"] = vFn

	vrhVulnState := v.VulnStateValidationRuleHandler
	rulesVulnState := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhVulnState(rulesVulnState)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for UpdateVulnerabilitiesStateReq.vuln_state: %s", err)
		panic(errMsg)
	}
	v.FldValidators["vuln_state"] = vFn

	vrhVulnId := v.VulnIdValidationRuleHandler
	rulesVulnId := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhVulnId(rulesVulnId)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for UpdateVulnerabilitiesStateReq.vuln_id: %s", err)
		panic(errMsg)
	}
	v.FldValidators["vuln_id"] = vFn

	v.FldValidators["context.api_endpoint"] = APIEndpointValidator().Validate

	return v
}()

func UpdateVulnerabilitiesStateReqValidator() db.Validator {
	return DefaultUpdateVulnerabilitiesStateReqValidator
}

// augmented methods on protoc/std generated struct

func (m *UpdateVulnerabilitiesStateRsp) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *UpdateVulnerabilitiesStateRsp) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *UpdateVulnerabilitiesStateRsp) DeepCopy() *UpdateVulnerabilitiesStateRsp {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &UpdateVulnerabilitiesStateRsp{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *UpdateVulnerabilitiesStateRsp) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *UpdateVulnerabilitiesStateRsp) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return UpdateVulnerabilitiesStateRspValidator().Validate(ctx, m, opts...)
}

type ValidateUpdateVulnerabilitiesStateRsp struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateUpdateVulnerabilitiesStateRsp) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*UpdateVulnerabilitiesStateRsp)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *UpdateVulnerabilitiesStateRsp got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultUpdateVulnerabilitiesStateRspValidator = func() *ValidateUpdateVulnerabilitiesStateRsp {
	v := &ValidateUpdateVulnerabilitiesStateRsp{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func UpdateVulnerabilitiesStateRspValidator() db.Validator {
	return DefaultUpdateVulnerabilitiesStateRspValidator
}

// augmented methods on protoc/std generated struct

func (m *VulnEvidence) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *VulnEvidence) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *VulnEvidence) DeepCopy() *VulnEvidence {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &VulnEvidence{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *VulnEvidence) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *VulnEvidence) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return VulnEvidenceValidator().Validate(ctx, m, opts...)
}

// SetEndTime sets the field
func (m *VulnEvidence) SetEndTime(in *google_protobuf.Timestamp) {
	m.EndTime = in
}

// SetStartTime sets the field
func (m *VulnEvidence) SetStartTime(in *google_protobuf.Timestamp) {
	m.StartTime = in
}

type ValidateVulnEvidence struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateVulnEvidence) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*VulnEvidence)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *VulnEvidence got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["end_time"]; exists {

		vOpts := append(opts, db.WithValidateField("end_time"))
		if err := fv(ctx, m.GetEndTime(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["evidence_type"]; exists {

		vOpts := append(opts, db.WithValidateField("evidence_type"))
		if err := fv(ctx, m.GetEvidenceType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["samples"]; exists {

		vOpts := append(opts, db.WithValidateField("samples"))
		for idx, item := range m.GetSamples() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["start_time"]; exists {

		vOpts := append(opts, db.WithValidateField("start_time"))
		if err := fv(ctx, m.GetStartTime(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultVulnEvidenceValidator = func() *ValidateVulnEvidence {
	v := &ValidateVulnEvidence{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func VulnEvidenceValidator() db.Validator {
	return DefaultVulnEvidenceValidator
}

// augmented methods on protoc/std generated struct

func (m *VulnEvidenceSample) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *VulnEvidenceSample) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *VulnEvidenceSample) DeepCopy() *VulnEvidenceSample {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &VulnEvidenceSample{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *VulnEvidenceSample) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *VulnEvidenceSample) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return VulnEvidenceSampleValidator().Validate(ctx, m, opts...)
}

type ValidateVulnEvidenceSample struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateVulnEvidenceSample) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*VulnEvidenceSample)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *VulnEvidenceSample got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["details"]; exists {

		vOpts := append(opts, db.WithValidateField("details"))
		for idx, item := range m.GetDetails() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["req_id"]; exists {

		vOpts := append(opts, db.WithValidateField("req_id"))
		if err := fv(ctx, m.GetReqId(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultVulnEvidenceSampleValidator = func() *ValidateVulnEvidenceSample {
	v := &ValidateVulnEvidenceSample{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func VulnEvidenceSampleValidator() db.Validator {
	return DefaultVulnEvidenceSampleValidator
}

// augmented methods on protoc/std generated struct

func (m *VulnRisk) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *VulnRisk) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *VulnRisk) DeepCopy() *VulnRisk {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &VulnRisk{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *VulnRisk) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *VulnRisk) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return VulnRiskValidator().Validate(ctx, m, opts...)
}

type ValidateVulnRisk struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateVulnRisk) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*VulnRisk)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *VulnRisk got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["level"]; exists {

		vOpts := append(opts, db.WithValidateField("level"))
		if err := fv(ctx, m.GetLevel(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["score"]; exists {

		vOpts := append(opts, db.WithValidateField("score"))
		if err := fv(ctx, m.GetScore(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultVulnRiskValidator = func() *ValidateVulnRisk {
	v := &ValidateVulnRisk{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func VulnRiskValidator() db.Validator {
	return DefaultVulnRiskValidator
}

// augmented methods on protoc/std generated struct

func (m *Vulnerability) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *Vulnerability) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *Vulnerability) DeepCopy() *Vulnerability {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &Vulnerability{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *Vulnerability) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *Vulnerability) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return VulnerabilityValidator().Validate(ctx, m, opts...)
}

// SetCreationTime sets the field
func (m *Vulnerability) SetCreationTime(in *google_protobuf.Timestamp) {
	m.CreationTime = in
}

// SetLastObservedTime sets the field
func (m *Vulnerability) SetLastObservedTime(in *google_protobuf.Timestamp) {
	m.LastObservedTime = in
}

// SetStatusChangeTime sets the field
func (m *Vulnerability) SetStatusChangeTime(in *google_protobuf.Timestamp) {
	m.StatusChangeTime = in
}

type ValidateVulnerability struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateVulnerability) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*Vulnerability)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *Vulnerability got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["category"]; exists {

		vOpts := append(opts, db.WithValidateField("category"))
		if err := fv(ctx, m.GetCategory(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["context"]; exists {

		vOpts := append(opts, db.WithValidateField("context"))
		if err := fv(ctx, m.GetContext(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["creation_time"]; exists {

		vOpts := append(opts, db.WithValidateField("creation_time"))
		if err := fv(ctx, m.GetCreationTime(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["description"]; exists {

		vOpts := append(opts, db.WithValidateField("description"))
		if err := fv(ctx, m.GetDescription(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["domain"]; exists {

		vOpts := append(opts, db.WithValidateField("domain"))
		if err := fv(ctx, m.GetDomain(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["evidence"]; exists {

		vOpts := append(opts, db.WithValidateField("evidence"))
		if err := fv(ctx, m.GetEvidence(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["last_observed_time"]; exists {

		vOpts := append(opts, db.WithValidateField("last_observed_time"))
		if err := fv(ctx, m.GetLastObservedTime(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["remediation"]; exists {

		vOpts := append(opts, db.WithValidateField("remediation"))
		for idx, item := range m.GetRemediation() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["risk"]; exists {

		vOpts := append(opts, db.WithValidateField("risk"))
		if err := fv(ctx, m.GetRisk(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["status"]; exists {

		vOpts := append(opts, db.WithValidateField("status"))
		if err := fv(ctx, m.GetStatus(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["status_change_time"]; exists {

		vOpts := append(opts, db.WithValidateField("status_change_time"))
		if err := fv(ctx, m.GetStatusChangeTime(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["title"]; exists {

		vOpts := append(opts, db.WithValidateField("title"))
		if err := fv(ctx, m.GetTitle(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["vuln_id"]; exists {

		vOpts := append(opts, db.WithValidateField("vuln_id"))
		if err := fv(ctx, m.GetVulnId(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultVulnerabilityValidator = func() *ValidateVulnerability {
	v := &ValidateVulnerability{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func VulnerabilityValidator() db.Validator {
	return DefaultVulnerabilityValidator
}

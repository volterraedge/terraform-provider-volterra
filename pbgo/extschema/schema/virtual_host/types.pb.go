// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/virtual_host/types.proto

package virtual_host

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	authentication "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/authentication"
	cluster "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/cluster"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/service_policy"
	views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	virtual_host_dns_info "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_host_dns_info"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// VirtualHostType
//
// x-displayName: "Virtual Host Type"
// VirtualHostType tells the type of virtual_host. Functionally, all types are same,
// this is mainly used for categorizing metrics.
type VirtualHostType int32

const (
	// VirtualService
	//
	// x-displayName: "Virtual Service"
	// Virtual Host used Virtual Service
	VIRTUAL_SERVICE VirtualHostType = 0
	// HTTP LoadBalancer
	//
	// x-displayName: "HTTP Load Balancer"
	// Virtual Host used as Load Balancer
	HTTP_LOAD_BALANCER VirtualHostType = 1
	// APIGateway
	//
	// x-displayName: "API Gateway"
	// Virtual Host used API Gateway
	API_GATEWAY VirtualHostType = 2
	// TCP LoadBalancer
	//
	// x-displayName: "Load balancer"
	// Virtual Host used as Load Balancer
	TCP_LOAD_BALANCER VirtualHostType = 3
	// Proxy
	//
	// x-displayName: "Proxy"
	// Virtual Host used as Proxy
	PROXY VirtualHostType = 4
	// LOCAL_K8S_API_GATEWAY
	//
	// x-displayName: "Local K8s API Gateway"
	// Internal use only, used for k8s cluster api gateway on the site.
	LOCAL_K8S_API_GATEWAY VirtualHostType = 5
	// CDN LoadBalancer
	//
	// x-displayName: "CDN Load Balancer"
	//  Virtual Host used as Load Balancer
	CDN_LOAD_BALANCER VirtualHostType = 6
)

var VirtualHostType_name = map[int32]string{
	0: "VIRTUAL_SERVICE",
	1: "HTTP_LOAD_BALANCER",
	2: "API_GATEWAY",
	3: "TCP_LOAD_BALANCER",
	4: "PROXY",
	5: "LOCAL_K8S_API_GATEWAY",
	6: "CDN_LOAD_BALANCER",
}

var VirtualHostType_value = map[string]int32{
	"VIRTUAL_SERVICE":       0,
	"HTTP_LOAD_BALANCER":    1,
	"API_GATEWAY":           2,
	"TCP_LOAD_BALANCER":     3,
	"PROXY":                 4,
	"LOCAL_K8S_API_GATEWAY": 5,
	"CDN_LOAD_BALANCER":     6,
}

func (VirtualHostType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_df61af5ea37a6592, []int{0}
}

// ProxyType tells the type of proxy to install for the virtual host.
//
// x-displayName: "Type of Proxy"
// Only the following combination of VirtualHosts within same AdvertisePolicy is permitted
// (None of them should have "*" in domains when used with other VirtualHosts in same AdvertisePolicy)
// 1. Multiple TCP_PROXY_WITH_SNI and multiple HTTPS_PROXY
// 2. Multiple HTTP_PROXY
// 3. Multiple HTTPS_PROXY
// 4. Multiple TCP_PROXY_WITH_SNI
//
// HTTPS_PROXY without TLS parameters is not permitted
// HTTP_PROXY/HTTPS_PROXY/TCP_PROXY_WITH_SNI/SMA_PROXY with empty domains is not permitted
// TCP_PROXY_WITH_SNI/SMA_PROXY should not have "*" in domains
type ProxyType int32

const (
	// HTTP_PROXY
	//
	// x-displayName: "HTTP Proxy"
	// Install HTTP proxy. HTTP Proxy is the default proxy installed.
	HTTP_PROXY ProxyType = 0
	// TCP_PROXY
	//
	// x-displayName: "TCP Proxy"
	// Install TCP proxy
	TCP_PROXY ProxyType = 1
	// TCP_PROXY_WITH_SNI
	//
	// x-displayName: "TCP Proxy with SNI"
	// Install TCP proxy with SNI Routing
	TCP_PROXY_WITH_SNI ProxyType = 2
	// TCP_PROXY
	//
	// x-displayName: "TCP Proxy"
	// Install TCP proxy
	TLS_TCP_PROXY ProxyType = 6
	// TCP_PROXY_WITH_SNI
	//
	// x-displayName: "TCP Proxy with SNI"
	// Install TCP proxy with SNI Routing
	TLS_TCP_PROXY_WITH_SNI ProxyType = 7
	// HTTPS_PROXY
	//
	// x-displayName: "HTTPS Proxy"
	// Install HTTPS proxy
	HTTPS_PROXY ProxyType = 3
	// UDP_PROXY
	//
	// x-displayName: "UDP Proxy"
	// Install UDP proxy
	UDP_PROXY ProxyType = 4
	// SMA_PROXY
	//
	// x-displayName: "Secret Management Access Proxy"
	// Install Secret Management Access proxy
	SMA_PROXY ProxyType = 5
	// DNS_PROXY
	//
	// x-displayName: "DNS Proxy"
	// Install DNS proxy
	DNS_PROXY ProxyType = 8
)

var ProxyType_name = map[int32]string{
	0: "HTTP_PROXY",
	1: "TCP_PROXY",
	2: "TCP_PROXY_WITH_SNI",
	6: "TLS_TCP_PROXY",
	7: "TLS_TCP_PROXY_WITH_SNI",
	3: "HTTPS_PROXY",
	4: "UDP_PROXY",
	5: "SMA_PROXY",
	8: "DNS_PROXY",
}

var ProxyType_value = map[string]int32{
	"HTTP_PROXY":             0,
	"TCP_PROXY":              1,
	"TCP_PROXY_WITH_SNI":     2,
	"TLS_TCP_PROXY":          6,
	"TLS_TCP_PROXY_WITH_SNI": 7,
	"HTTPS_PROXY":            3,
	"UDP_PROXY":              4,
	"SMA_PROXY":              5,
	"DNS_PROXY":              8,
}

func (ProxyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_df61af5ea37a6592, []int{1}
}

// VirtualHostState
//
// x-displayName: "Virtual Host State"
// State of the virtual host
type VirtualHostState int32

const (
	// VIRTUAL_HOST_READY
	//
	// x-displayName: "Ready"
	// Virtual host is ready to install
	VIRTUAL_HOST_READY VirtualHostState = 0
	// VIRTUAL_HOST_PENDING_VERIFICATION
	//
	// x-displayName: "Pending Verification"
	// Virtual host is verfication pending for some or all of its domains
	VIRTUAL_HOST_PENDING_VERIFICATION VirtualHostState = 1
	// VIRTUAL_HOST_VERIFICATION_FAILED
	//
	// x-displayName: "Verification Failed"
	// Virtual host has one or more domains for which verification failed
	VIRTUAL_HOST_VERIFICATION_FAILED VirtualHostState = 2
	// VIRTUAL_HOST_PENDING_DNS_DELEGATION
	//
	// x-displayName: "Pending DNS delegation"
	// Virtual host is pending DNS delegation
	VIRTUAL_HOST_PENDING_DNS_DELEGATION VirtualHostState = 3
	// VIRTUAL_HOST_PENDING_A_RECORD
	//
	// x-displayName: "Pending A record"
	// Virtual host is waiting for one or more A records to be created
	VIRTUAL_HOST_PENDING_A_RECORD VirtualHostState = 4
	// VIRTUAL_HOST_DNS_A_RECORD_ADDED
	//
	// x-displayName: "DNS A record was added"
	// DNS A record has been added for this Virtual host
	VIRTUAL_HOST_DNS_A_RECORD_ADDED VirtualHostState = 5
	// VIRTUAL_HOST_INTERNET_NLB_PENDING_CREATION
	//
	// x-displayName: "Internet NLB is pending creation"
	// Internet facing NLB, is being created on the site/sites belonging to the virtual site
	VIRTUAL_HOST_INTERNET_NLB_PENDING_CREATION VirtualHostState = 6
	// VIRTUAL_HOST_INTERNET_NLB_CREATION_FAILED
	//
	// x-displayName: "Internet NLB creation failed"
	// Internet NLB creation failed on the site/sites. InternetNLBVIPStatus will have more information.
	VIRTUAL_HOST_INTERNET_NLB_CREATION_FAILED VirtualHostState = 7
)

var VirtualHostState_name = map[int32]string{
	0: "VIRTUAL_HOST_READY",
	1: "VIRTUAL_HOST_PENDING_VERIFICATION",
	2: "VIRTUAL_HOST_VERIFICATION_FAILED",
	3: "VIRTUAL_HOST_PENDING_DNS_DELEGATION",
	4: "VIRTUAL_HOST_PENDING_A_RECORD",
	5: "VIRTUAL_HOST_DNS_A_RECORD_ADDED",
	6: "VIRTUAL_HOST_INTERNET_NLB_PENDING_CREATION",
	7: "VIRTUAL_HOST_INTERNET_NLB_CREATION_FAILED",
}

var VirtualHostState_value = map[string]int32{
	"VIRTUAL_HOST_READY":                         0,
	"VIRTUAL_HOST_PENDING_VERIFICATION":          1,
	"VIRTUAL_HOST_VERIFICATION_FAILED":           2,
	"VIRTUAL_HOST_PENDING_DNS_DELEGATION":        3,
	"VIRTUAL_HOST_PENDING_A_RECORD":              4,
	"VIRTUAL_HOST_DNS_A_RECORD_ADDED":            5,
	"VIRTUAL_HOST_INTERNET_NLB_PENDING_CREATION": 6,
	"VIRTUAL_HOST_INTERNET_NLB_CREATION_FAILED":  7,
}

func (VirtualHostState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_df61af5ea37a6592, []int{2}
}

// Certification State
//
// x-displayName: "Certification State"
// State of auto certification generation for the virtual host
type CertificationState int32

const (
	// Auto Cert Disabled
	//
	// x-displayName: "Auto Cert Disabled"
	// Auto Certification is disabled.
	AutoCertDisabled CertificationState = 0
	// Dns Domain Verification
	//
	// x-displayName: "DnsDomainVerification"
	// Auto Certification is waiting for domain verification.
	DnsDomainVerification CertificationState = 1
	// Auto Cert Started
	//
	// x-displayName: "Auto Cert Started"
	// Auto Certificate generation action has started.
	AutoCertStarted CertificationState = 2
	// Pre Domain Challenge Pending
	//
	// x-displayName: "Pre Domain Challenge Pending"
	// The domains in the virtual host configuration are not still verified. This requires
	// the _acme-challenge TXT record in the domain to have the correct TXT.
	PreDomainChallengePending CertificationState = 12
	// Domain Challenge Started
	//
	// x-displayName: "Domain Challenge Started"
	// Domain challenge process started.
	DomainChallengeStarted CertificationState = 13
	// Domain Challenge Pending
	//
	// x-displayName: "Domain Challenge Pending"
	// The domains in the virtual host configuration are being verified. This requires
	// the _acme-challenge TXT record in the domain to have the correct TXT.
	DomainChallengePending CertificationState = 3
	// Domain Challenge Verified
	//
	// x-displayName: "Domain Challenge Verified"
	// All the domains in the virtual host have been verified.
	DomainChallengeVerified CertificationState = 4
	// Auto Cert Finalize
	//
	// x-displayName: "Auto Cert Finalize"
	// Certificate generation order is Ready and Finalized.
	AutoCertFinalize CertificationState = 5
	// Certificate Invalid
	//
	// x-displayName: "Certificate Invalid"
	// Certificate is invalid
	CertificateInvalid CertificationState = 6
	// Certificate Valid
	//
	// x-displayName: "Certificate Valid"
	// Valid certificate generated and tls_parameters are updated
	CertificateValid CertificationState = 7
	// Auto Cert Not Applicable
	//
	// x-displayName: "Not Applicable"
	// Auto certificate not applicable because virtual host does not use TLS
	AutoCertNotApplicable CertificationState = 8
	// Auto Cert Rate Limited
	//
	// x-displayName: "Rate Limited"
	// Auto certificate not available because CA has rate limited the request
	AutoCertRateLimited CertificationState = 9
	// Auto Cert Generation Retry
	//
	// x-displayName: "Auto Cert Generation Retry"
	// Auto certificate generate failed in the previous attempt, will be retried automatically
	AutoCertGenerationRetry CertificationState = 10
	// Auto Cert Error
	//
	// x-displayName: "Auto Cert Error"
	// Error in Certificate generation
	AutoCertError CertificationState = 11
	// x-displayName: "Auto Cert Initialize"
	// Default State for Vhost State with Auto Certificate
	AutoCertInitialize CertificationState = 14
	// Auto Cert Account Rate Limited
	//
	// x-displayName: "Account Rate Limited"
	// Auto certificate not available because CA has rate limited the request
	AutoCertAccountRateLimited CertificationState = 15
	// Auto Cert Domain Rate Limited
	//
	// x-displayName: "Domain Rate Limited"
	// Auto certificate not available because CA has rate limited the request
	AutoCertDomainRateLimited CertificationState = 16
	// Certificate Expired
	//
	// x-displayName: "Certificate Expired"
	// Certificate has expired
	CertificateExpired CertificationState = 17
)

var CertificationState_name = map[int32]string{
	0:  "AutoCertDisabled",
	1:  "DnsDomainVerification",
	2:  "AutoCertStarted",
	12: "PreDomainChallengePending",
	13: "DomainChallengeStarted",
	3:  "DomainChallengePending",
	4:  "DomainChallengeVerified",
	5:  "AutoCertFinalize",
	6:  "CertificateInvalid",
	7:  "CertificateValid",
	8:  "AutoCertNotApplicable",
	9:  "AutoCertRateLimited",
	10: "AutoCertGenerationRetry",
	11: "AutoCertError",
	14: "AutoCertInitialize",
	15: "AutoCertAccountRateLimited",
	16: "AutoCertDomainRateLimited",
	17: "CertificateExpired",
}

var CertificationState_value = map[string]int32{
	"AutoCertDisabled":           0,
	"DnsDomainVerification":      1,
	"AutoCertStarted":            2,
	"PreDomainChallengePending":  12,
	"DomainChallengeStarted":     13,
	"DomainChallengePending":     3,
	"DomainChallengeVerified":    4,
	"AutoCertFinalize":           5,
	"CertificateInvalid":         6,
	"CertificateValid":           7,
	"AutoCertNotApplicable":      8,
	"AutoCertRateLimited":        9,
	"AutoCertGenerationRetry":    10,
	"AutoCertError":              11,
	"AutoCertInitialize":         14,
	"AutoCertAccountRateLimited": 15,
	"AutoCertDomainRateLimited":  16,
	"CertificateExpired":         17,
}

func (CertificationState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_df61af5ea37a6592, []int{3}
}

// Bot Defense Mode
//
// x-displayName: "Bot Defense Mode"
// Bot Defense Mode Type
type BotDefenseMode int32

const (
	// API
	//
	// x-displayName: "API Mode"
	// Bot Defense API Mode
	API_MODE BotDefenseMode = 0
	// INLINE
	//
	// x-displayName: "Inline Mode"
	// Bot Defense INLINE Mode
	INLINE_MODE BotDefenseMode = 1
)

var BotDefenseMode_name = map[int32]string{
	0: "API_MODE",
	1: "INLINE_MODE",
}

var BotDefenseMode_value = map[string]int32{
	"API_MODE":    0,
	"INLINE_MODE": 1,
}

func (BotDefenseMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_df61af5ea37a6592, []int{4}
}

// Virtual Host Identifier
//
// x-displayName: "Virtual Host Identifier"
// VirtualHost Identification via its namespace and name
type VirtualHostID struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// Namespace in which the VirtualHost is configured
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Name
	//
	// x-displayName: "Name"
	// x-example: "frontend"
	// Name of the VirtualHost
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *VirtualHostID) Reset()      { *m = VirtualHostID{} }
func (*VirtualHostID) ProtoMessage() {}
func (*VirtualHostID) Descriptor() ([]byte, []int) {
	return fileDescriptor_df61af5ea37a6592, []int{0}
}
func (m *VirtualHostID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VirtualHostID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VirtualHostID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualHostID.Merge(m, src)
}
func (m *VirtualHostID) XXX_Size() int {
	return m.Size()
}
func (m *VirtualHostID) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualHostID.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualHostID proto.InternalMessageInfo

func (m *VirtualHostID) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *VirtualHostID) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// VER status for Virtual Host
//
// x-displayName: "VER Status"
// This VER status is per site on which virtual host configuration is getting applied
type VerStatusType struct {
	// TLS coalesced virtual hosts
	//
	// x-displayName: "TLS Coalesced VirtualHosts"
	// List of virtual hosts with which TLS coalescing is done
	CoalescedVirtualHosts []*VirtualHostID `protobuf:"bytes,1,rep,name=coalesced_virtual_hosts,json=coalescedVirtualHosts,proto3" json:"coalesced_virtual_hosts,omitempty"` // Deprecated: Do not use.
	// TLS coalescing skipped virtual hosts
	//
	// x-displayName: "TLS Coalescing skipped VirtualHosts"
	// List of virtual hosts having same server certificates and supposed to be
	// coalesced but not coalesced due to mismatch is some configuration.
	NonCoalescedVirtualHosts []*VirtualHostID `protobuf:"bytes,2,rep,name=non_coalesced_virtual_hosts,json=nonCoalescedVirtualHosts,proto3" json:"non_coalesced_virtual_hosts,omitempty"` // Deprecated: Do not use.
	// AdvertisePolicy
	//
	// x-displayName: "Advertise policy name"
	// AdvertisePolicy for which the coalescing is done.
	AdvertisePolicy *views.ObjectRefType `protobuf:"bytes,3,opt,name=advertise_policy,json=advertisePolicy,proto3" json:"advertise_policy,omitempty"`
	// TLS coalesced virtual hosts
	//
	// x-displayName: "TLS Coalesced VirtualHosts"
	// List of virtual hosts with which TLS coalescing is done
	CoalescedVhosts []*views.ObjectRefType `protobuf:"bytes,4,rep,name=coalesced_vhosts,json=coalescedVhosts,proto3" json:"coalesced_vhosts,omitempty"`
	// TLS coalescing skipped virtual hosts
	//
	// x-displayName: "TLS Coalescing skipped VirtualHosts"
	// List of virtual hosts having same server certificates and supposed to be
	// coalesced but not coalesced due to mismatch is some configuration.
	NonCoalescedVhosts []*views.ObjectRefType `protobuf:"bytes,5,rep,name=non_coalesced_vhosts,json=nonCoalescedVhosts,proto3" json:"non_coalesced_vhosts,omitempty"`
}

func (m *VerStatusType) Reset()      { *m = VerStatusType{} }
func (*VerStatusType) ProtoMessage() {}
func (*VerStatusType) Descriptor() ([]byte, []int) {
	return fileDescriptor_df61af5ea37a6592, []int{1}
}
func (m *VerStatusType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerStatusType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VerStatusType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerStatusType.Merge(m, src)
}
func (m *VerStatusType) XXX_Size() int {
	return m.Size()
}
func (m *VerStatusType) XXX_DiscardUnknown() {
	xxx_messageInfo_VerStatusType.DiscardUnknown(m)
}

var xxx_messageInfo_VerStatusType proto.InternalMessageInfo

// Deprecated: Do not use.
func (m *VerStatusType) GetCoalescedVirtualHosts() []*VirtualHostID {
	if m != nil {
		return m.CoalescedVirtualHosts
	}
	return nil
}

// Deprecated: Do not use.
func (m *VerStatusType) GetNonCoalescedVirtualHosts() []*VirtualHostID {
	if m != nil {
		return m.NonCoalescedVirtualHosts
	}
	return nil
}

func (m *VerStatusType) GetAdvertisePolicy() *views.ObjectRefType {
	if m != nil {
		return m.AdvertisePolicy
	}
	return nil
}

func (m *VerStatusType) GetCoalescedVhosts() []*views.ObjectRefType {
	if m != nil {
		return m.CoalescedVhosts
	}
	return nil
}

func (m *VerStatusType) GetNonCoalescedVhosts() []*views.ObjectRefType {
	if m != nil {
		return m.NonCoalescedVhosts
	}
	return nil
}

// JavaScriptConfigType
//
// x-displayName: "JavaScript Configuration"
// Custom JavaScript Configuration. Custom JavaScript code can be executed at various stages of request processing.
type JavaScriptConfigType struct {
	// CachePrefix
	//
	// x-displayName: "Cache Identifier"
	// x-example: "value"
	// Identifier for data store to be used by JavaScript. Data store can be
	// KeyValue store referred by script.
	CachePrefix string `protobuf:"bytes,1,opt,name=cache_prefix,json=cachePrefix,proto3" json:"cache_prefix,omitempty"`
	// ScriptConfig
	//
	// x-displayName: "Configuration for Script"
	// Input passed to the script
	ScriptConfig *types.Struct `protobuf:"bytes,2,opt,name=script_config,json=scriptConfig,proto3" json:"script_config,omitempty"`
	// ScriptURL
	//
	// x-displayName: "Path of Javascript"
	// x-example: "value"
	// URL of JavaScript that gets executed
	CustomScriptUrl string `protobuf:"bytes,3,opt,name=custom_script_url,json=customScriptUrl,proto3" json:"custom_script_url,omitempty"`
}

func (m *JavaScriptConfigType) Reset()      { *m = JavaScriptConfigType{} }
func (*JavaScriptConfigType) ProtoMessage() {}
func (*JavaScriptConfigType) Descriptor() ([]byte, []int) {
	return fileDescriptor_df61af5ea37a6592, []int{2}
}
func (m *JavaScriptConfigType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JavaScriptConfigType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *JavaScriptConfigType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JavaScriptConfigType.Merge(m, src)
}
func (m *JavaScriptConfigType) XXX_Size() int {
	return m.Size()
}
func (m *JavaScriptConfigType) XXX_DiscardUnknown() {
	xxx_messageInfo_JavaScriptConfigType.DiscardUnknown(m)
}

var xxx_messageInfo_JavaScriptConfigType proto.InternalMessageInfo

func (m *JavaScriptConfigType) GetCachePrefix() string {
	if m != nil {
		return m.CachePrefix
	}
	return ""
}

func (m *JavaScriptConfigType) GetScriptConfig() *types.Struct {
	if m != nil {
		return m.ScriptConfig
	}
	return nil
}

func (m *JavaScriptConfigType) GetCustomScriptUrl() string {
	if m != nil {
		return m.CustomScriptUrl
	}
	return ""
}

// DynamicReverseProxyType
//
// x-displayName: "Dynamic Reverse Proxy Type"
// In this mode of proxy, virtual host will resolve the destination endpoint dynamically.
//
// The dynamic resolution is done using a predefined field in the request. This predefined
// field depends on the ProxyType configured on the Virtual Host.
//
// For HTTP traffic, i.e. with ProxyType as HTTP_PROXY or HTTPS_PROXY, virtual host will use the
// "HOST" http header from the request and perform DNS resolution to select destination endpoint.
//
// For TCP traffic with SNI, (If the ProxyType is TCP_PROXY_WITH_SNI), virtual host will perform DNS
// resolution using the SNI.
//
// The DNS resolution is performed in the virtual network specified in outside_network_type or
// outside_network
//
// In both modes of operation(either using Host header or SNI), the DNS resolution could return
// multiple addresses. First IPv4 address from such returned list is used as endpoint for the
// request. The DNS response is cached for 60s by default.
type DynamicReverseProxyType struct {
	// Enable the dynamic resolution of the endpoint
	//
	// x-displayName: "Dynamic Endpoint Resolution"
	// x-example : true
	// In this mode of proxy, virtual host will resolve the destination endpoint dynamically.
	//
	// The dynamic resolution is done using a predefined field in the request. This predefined
	// field depends on the ProxyType configured on the Virtual Host.
	//
	// For HTTP traffic, i.e. with ProxyType as HTTP_PROXY or HTTPS_PROXY, virtual host will use the
	// "HOST" http header from the request and perform DNS resolution to select destination endpoint.
	//
	// For TCP traffic with SNI, (If the ProxyType is TCP_PROXY_WITH_SNI), virtual host will perform DNS
	// resolution using the SNI.
	//
	// The DNS resolution is performed in the virtual network specified in outside_network_type or
	// outside_network
	//
	// In both modes of operation(either using Host header or SNI), the DNS resolution could return
	// multiple addresses. First IPv4 address from such returned list is used as endpoint for the
	// request. The DNS response is cached for 60s by default.
	ResolveEndpointDynamically bool `protobuf:"varint,1,opt,name=resolve_endpoint_dynamically,json=resolveEndpointDynamically,proto3" json:"resolve_endpoint_dynamically,omitempty"`
	// resolution_network_type
	//
	// x-displayName: "Resolution Network Type"
	// Type of the network to resolve the destination
	ResolutionNetworkType schema.VirtualNetworkType `protobuf:"varint,2,opt,name=resolution_network_type,json=resolutionNetworkType,proto3,enum=ves.io.schema.VirtualNetworkType" json:"resolution_network_type,omitempty"`
	// resolution_network
	//
	// x-displayName: "Resolution Network"
	// Reference to virtual network where the endpoint is resolved.
	// Reference is valid only when the network type is VIRTUAL_NETWORK_PER_SITE or
	// VIRTUAL_NETWORK_GLOBAL. It is ignored for all other network types
	ResolutionNetwork []*schema.ObjectRefType `protobuf:"bytes,3,rep,name=resolution_network,json=resolutionNetwork,proto3" json:"resolution_network,omitempty"`
	// connection_timeout
	//
	// x-displayName: "Connection Timeout"
	// x-example: "4000"
	// The timeout for new network connections to upstream server.
	// This is specified in milliseconds. The default value is 2000 (2 seconds)
	ConnectionTimeout uint32 `protobuf:"varint,5,opt,name=connection_timeout,json=connectionTimeout,proto3" json:"connection_timeout,omitempty"`
}

func (m *DynamicReverseProxyType) Reset()      { *m = DynamicReverseProxyType{} }
func (*DynamicReverseProxyType) ProtoMessage() {}
func (*DynamicReverseProxyType) Descriptor() ([]byte, []int) {
	return fileDescriptor_df61af5ea37a6592, []int{3}
}
func (m *DynamicReverseProxyType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DynamicReverseProxyType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DynamicReverseProxyType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DynamicReverseProxyType.Merge(m, src)
}
func (m *DynamicReverseProxyType) XXX_Size() int {
	return m.Size()
}
func (m *DynamicReverseProxyType) XXX_DiscardUnknown() {
	xxx_messageInfo_DynamicReverseProxyType.DiscardUnknown(m)
}

var xxx_messageInfo_DynamicReverseProxyType proto.InternalMessageInfo

func (m *DynamicReverseProxyType) GetResolveEndpointDynamically() bool {
	if m != nil {
		return m.ResolveEndpointDynamically
	}
	return false
}

func (m *DynamicReverseProxyType) GetResolutionNetworkType() schema.VirtualNetworkType {
	if m != nil {
		return m.ResolutionNetworkType
	}
	return schema.VIRTUAL_NETWORK_SITE_LOCAL
}

func (m *DynamicReverseProxyType) GetResolutionNetwork() []*schema.ObjectRefType {
	if m != nil {
		return m.ResolutionNetwork
	}
	return nil
}

func (m *DynamicReverseProxyType) GetConnectionTimeout() uint32 {
	if m != nil {
		return m.ConnectionTimeout
	}
	return 0
}

// CompressionType
//
// x-displayName: "Compression Parameters"
// Enables loadbalancer to compress dispatched data from an upstream service upon client request.
// The content is compressed and then sent to the client with the appropriate headers if either response and request allow.
// Only GZIP compression is supported.
//
// By default compression will be skipped when:
//
//	A request does NOT contain accept-encoding header.
//	A request includes accept-encoding header, but it does not contain “gzip” or “*”.
//	A request includes accept-encoding with “gzip” or “*” with the weight “q=0”. Note that the “gzip” will have a higher weight then “*”. For example, if accept-encoding is “gzip;q=0,*;q=1”, the filter will not compress. But if the header is set to “*;q=0,gzip;q=1”, the filter will compress.
//	A request whose accept-encoding header includes “identity”.
//	A response contains a content-encoding header.
//	A response contains a cache-control header whose value includes “no-transform”.
//	A response contains a transfer-encoding header whose value includes “gzip”.
//	A response does not contain a content-type value that matches one of the selected mime-types, which default to application/javascript, application/json, application/xhtml+xml, image/svg+xml, text/css, text/html, text/plain, text/xml.
//	Neither content-length nor transfer-encoding headers are present in the response.
//	Response size is smaller than 30 bytes (only applicable when transfer-encoding is not chunked).
//
// When compression is applied:
//
//	The content-length is removed from response headers.
//	Response headers contain “transfer-encoding: chunked” and do not contain “content-encoding” header.
//	The “vary: accept-encoding” header is inserted on every response.
//
// GZIP Compression Level:
//
// A value which is optimal balance between speed of compression and amount of compression is chosen.
type CompressionType struct {
	// content_length
	//
	// x-displayName: "Content Length"
	// x-example: "100"
	// Minimum response length, in bytes, which will trigger compression. The default value is 30.
	ContentLength uint32 `protobuf:"varint,1,opt,name=content_length,json=contentLength,proto3" json:"content_length,omitempty"`
	// content_type
	//
	// x-displayName: "Content Type"
	// x-example: "application/json"
	// Set of strings that allows specifying which mime-types yield compression
	// When this field is not defined, compression will be applied
	// to the following mime-types:
	//     "application/javascript"
	//     "application/json",
	//     "application/xhtml+xml"
	//     "image/svg+xml"
	//     "text/css"
	//     "text/html"
	//     "text/plain"
	//     "text/xml"
	ContentType []string `protobuf:"bytes,2,rep,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	// disable_on_etag_header
	//
	// x-displayName: "Disable On Etag Header"
	// x-example: "true"
	// If true, disables compression when the response contains an etag header. When it is false,
	// weak etags will be preserved and the ones that require strong validation will be removed.
	DisableOnEtagHeader bool `protobuf:"varint,3,opt,name=disable_on_etag_header,json=disableOnEtagHeader,proto3" json:"disable_on_etag_header,omitempty"`
	// remove_accept_encoding_header
	//
	// x-displayName: "Remove Accept-Encoding Header"
	// x-example: "true"
	// If true, removes accept-encoding from the request headers before dispatching it to the upstream
	// so that responses do not get compressed before reaching the filter.
	RemoveAcceptEncodingHeader bool `protobuf:"varint,4,opt,name=remove_accept_encoding_header,json=removeAcceptEncodingHeader,proto3" json:"remove_accept_encoding_header,omitempty"`
}

func (m *CompressionType) Reset()      { *m = CompressionType{} }
func (*CompressionType) ProtoMessage() {}
func (*CompressionType) Descriptor() ([]byte, []int) {
	return fileDescriptor_df61af5ea37a6592, []int{4}
}
func (m *CompressionType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompressionType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CompressionType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompressionType.Merge(m, src)
}
func (m *CompressionType) XXX_Size() int {
	return m.Size()
}
func (m *CompressionType) XXX_DiscardUnknown() {
	xxx_messageInfo_CompressionType.DiscardUnknown(m)
}

var xxx_messageInfo_CompressionType proto.InternalMessageInfo

func (m *CompressionType) GetContentLength() uint32 {
	if m != nil {
		return m.ContentLength
	}
	return 0
}

func (m *CompressionType) GetContentType() []string {
	if m != nil {
		return m.ContentType
	}
	return nil
}

func (m *CompressionType) GetDisableOnEtagHeader() bool {
	if m != nil {
		return m.DisableOnEtagHeader
	}
	return false
}

func (m *CompressionType) GetRemoveAcceptEncodingHeader() bool {
	if m != nil {
		return m.RemoveAcceptEncodingHeader
	}
	return false
}

// JavascriptChallengeType
//
// x-displayName: "Javascript Challenge Parameters"
//
// Enables loadbalancer to perform client browser compatibility test by redirecting to a page
// with Javascript.
//
// With this feature enabled, only clients that are capable of executing Javascript(mostly browsers)
// will be allowed to complete the HTTP request.
//
// When loadbalancer is configured to do Javascript Challenge, it will redirect the browser to an
// HTML page on every new HTTP request. This HTML page will have Javascript embedded in it.
// Loadbalancer chooses a set of random numbers for every new client and sends these numbers along with an
// encrypted answer with the request such that it embed these numbers as input in the Javascript.
// Javascript will run on the requestor browser and perform a complex Math operation.
// Script will submit the answer to loadbalancer. Loadbalancer will validate the answer by comparing the calculated
// answer with the decrypted answer (which was encrypted when it was sent back as reply) and allow
// the request to the upstream server only if the answer is correct.
// Loadbalancer will tag response header with a cookie to avoid Javascript challenge for subsequent requests.
//
// Javascript challenge serves following purposes
//   - Validate that the request is coming via a browser that is capable for running Javascript
//   - Force the browser to run a complex operation, f(X), that requires it to spend a large number
//     of CPU cycles. This is to slow down a potential DoS attacker by making it difficult to launch
//     a large request flood without having to spend even larger CPU cost at their end.
//
// You can enable either Javascript challenge or Captcha challenge on a virtual host
type JavascriptChallengeType struct {
	// js_script_delay
	//
	// x-displayName: "Javascript Delay"
	// x-example: "1000"
	// Delay introduced by Javascript, in milliseconds.
	JsScriptDelay uint32 `protobuf:"varint,2,opt,name=js_script_delay,json=jsScriptDelay,proto3" json:"js_script_delay,omitempty"`
	// cookie_expiry
	//
	// x-displayName: "Cookie Expiration Period"
	// x-example: "1000"
	// Cookie expiration period, in seconds.
	// An expired cookie causes the loadbalancer to issue a new challenge.
	CookieExpiry uint32 `protobuf:"varint,3,opt,name=cookie_expiry,json=cookieExpiry,proto3" json:"cookie_expiry,omitempty"`
	// custom_page
	//
	// x-displayName: "Custom Message for Javascript Challenge"
	// x-example: "string:///PHA+IFBsZWFzZSBXYWl0IDwvcD4="
	// Custom message is of type uri_ref. Currently supported URL schemes is string:///.
	// For string:/// scheme, message needs to be encoded in Base64 format.
	// You can specify this message as base64 encoded plain text message e.g. "Please Wait.."
	// or it can be HTML paragraph or a body string encoded as base64 string
	// E.g. "<p> Please Wait </p>". Base64 encoded string for this html is "PHA+IFBsZWFzZSBXYWl0IDwvcD4="
	CustomPage string `protobuf:"bytes,4,opt,name=custom_page,json=customPage,proto3" json:"custom_page,omitempty"`
}

func (m *JavascriptChallengeType) Reset()      { *m = JavascriptChallengeType{} }
func (*JavascriptChallengeType) ProtoMessage() {}
func (*JavascriptChallengeType) Descriptor() ([]byte, []int) {
	return fileDescriptor_df61af5ea37a6592, []int{5}
}
func (m *JavascriptChallengeType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JavascriptChallengeType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *JavascriptChallengeType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JavascriptChallengeType.Merge(m, src)
}
func (m *JavascriptChallengeType) XXX_Size() int {
	return m.Size()
}
func (m *JavascriptChallengeType) XXX_DiscardUnknown() {
	xxx_messageInfo_JavascriptChallengeType.DiscardUnknown(m)
}

var xxx_messageInfo_JavascriptChallengeType proto.InternalMessageInfo

func (m *JavascriptChallengeType) GetJsScriptDelay() uint32 {
	if m != nil {
		return m.JsScriptDelay
	}
	return 0
}

func (m *JavascriptChallengeType) GetCookieExpiry() uint32 {
	if m != nil {
		return m.CookieExpiry
	}
	return 0
}

func (m *JavascriptChallengeType) GetCustomPage() string {
	if m != nil {
		return m.CustomPage
	}
	return ""
}

// CaptchaChallengeType
//
// x-displayName: "Captcha Challenge Parameters"
//
// # Enables loadbalancer to perform captcha challenge
//
// Captcha challenge will be based on Google Recaptcha.
//
// With this feature enabled, only clients that pass the captcha challenge will be allowed to
// complete the HTTP request.
//
// When loadbalancer is configured to do Captcha Challenge, it will redirect the browser to an
// HTML page on every new HTTP request. This HTML page will have captcha challenge embedded in it.
// Client will be allowed to make the request only if the captcha challenge is successful.
// Loadbalancer will tag response header with a cookie to avoid Captcha challenge for subsequent requests.
//
// CAPTCHA is mainly used as a security check to ensure only human users can pass through.
// Generally, computers or bots are not capable of solving a captcha.
//
// You can enable either Javascript challenge or Captcha challenge on a virtual host
type CaptchaChallengeType struct {
	// cookie_expiry
	//
	// x-displayName: "Cookie Expiration Period"
	// x-example: "1000"
	// Cookie expiration period, in seconds.
	// An expired cookie causes the loadbalancer to issue a new challenge.
	CookieExpiry uint32 `protobuf:"varint,2,opt,name=cookie_expiry,json=cookieExpiry,proto3" json:"cookie_expiry,omitempty"`
	// custom_page
	//
	// x-displayName: "Custom message for Captcha Challenge"
	// x-example: "string:///PHA+IFBsZWFzZSBXYWl0IDwvcD4="
	// Custom message is of type uri_ref. Currently supported URL schemes is string:///.
	// For string:/// scheme, message needs to be encoded in Base64 format.
	// You can specify this message as base64 encoded plain text message e.g. "Please Wait.."
	// or it can be HTML paragraph or a body string encoded as base64 string
	// E.g. "<p> Please Wait </p>". Base64 encoded string for this html is "PHA+IFBsZWFzZSBXYWl0IDwvcD4="
	CustomPage string `protobuf:"bytes,3,opt,name=custom_page,json=customPage,proto3" json:"custom_page,omitempty"`
}

func (m *CaptchaChallengeType) Reset()      { *m = CaptchaChallengeType{} }
func (*CaptchaChallengeType) ProtoMessage() {}
func (*CaptchaChallengeType) Descriptor() ([]byte, []int) {
	return fileDescriptor_df61af5ea37a6592, []int{6}
}
func (m *CaptchaChallengeType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CaptchaChallengeType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CaptchaChallengeType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CaptchaChallengeType.Merge(m, src)
}
func (m *CaptchaChallengeType) XXX_Size() int {
	return m.Size()
}
func (m *CaptchaChallengeType) XXX_DiscardUnknown() {
	xxx_messageInfo_CaptchaChallengeType.DiscardUnknown(m)
}

var xxx_messageInfo_CaptchaChallengeType proto.InternalMessageInfo

func (m *CaptchaChallengeType) GetCookieExpiry() uint32 {
	if m != nil {
		return m.CookieExpiry
	}
	return 0
}

func (m *CaptchaChallengeType) GetCustomPage() string {
	if m != nil {
		return m.CustomPage
	}
	return ""
}

// TemporaryUserBlockingType
//
// x-displayName: "Temporary User Blocking"
//
// Specifies configuration for temporary user blocking resulting from user behavior analysis.
//
// When Malicious User Mitigation is enabled from service policy rules, users' accessing the application will be analyzed for
// malicious activity and the configured mitigation actions will be taken on identified malicious users.
// These mitigation actions include setting up temporary blocking on that user.
// This configuration specifies settings on how that blocking should be done by the loadbalancer.
type TemporaryUserBlockingType struct {
	// custom_page
	//
	// x-displayName: "Custom Message for Temporary Blocking"
	// x-example: "string:///PHA+IFBsZWFzZSBXYWl0IDwvcD4="
	// Custom message is of type `uri_ref`. Currently supported URL schemes is `string:///`.
	// For `string:///` scheme, message needs to be encoded in Base64 format.
	// You can specify this message as base64 encoded plain text message e.g. "Blocked.."
	// or it can be HTML paragraph or a body string encoded as base64 string
	// E.g. "<p> Blocked </p>". Base64 encoded string for this html is "PHA+IFBsZWFzZSBXYWl0IDwvcD4="
	CustomPage string `protobuf:"bytes,1,opt,name=custom_page,json=customPage,proto3" json:"custom_page,omitempty"`
}

func (m *TemporaryUserBlockingType) Reset()      { *m = TemporaryUserBlockingType{} }
func (*TemporaryUserBlockingType) ProtoMessage() {}
func (*TemporaryUserBlockingType) Descriptor() ([]byte, []int) {
	return fileDescriptor_df61af5ea37a6592, []int{7}
}
func (m *TemporaryUserBlockingType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TemporaryUserBlockingType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TemporaryUserBlockingType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TemporaryUserBlockingType.Merge(m, src)
}
func (m *TemporaryUserBlockingType) XXX_Size() int {
	return m.Size()
}
func (m *TemporaryUserBlockingType) XXX_DiscardUnknown() {
	xxx_messageInfo_TemporaryUserBlockingType.DiscardUnknown(m)
}

var xxx_messageInfo_TemporaryUserBlockingType proto.InternalMessageInfo

func (m *TemporaryUserBlockingType) GetCustomPage() string {
	if m != nil {
		return m.CustomPage
	}
	return ""
}

// DNSRecord
//
// x-displayName: "DNS Record"
// Defines a DNS record
type DNSRecord struct {
	// Name
	//
	// x-displayName: "Name"
	// Name of the DNS record
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Type
	//
	// x-displayName: "Type"
	// x-example: "CNAME"
	// Type of the DNS record
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// Value
	//
	// x-displayName: "Value"
	// DNS record Value
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *DNSRecord) Reset()      { *m = DNSRecord{} }
func (*DNSRecord) ProtoMessage() {}
func (*DNSRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_df61af5ea37a6592, []int{8}
}
func (m *DNSRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DNSRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DNSRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNSRecord.Merge(m, src)
}
func (m *DNSRecord) XXX_Size() int {
	return m.Size()
}
func (m *DNSRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_DNSRecord.DiscardUnknown(m)
}

var xxx_messageInfo_DNSRecord proto.InternalMessageInfo

func (m *DNSRecord) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DNSRecord) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *DNSRecord) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// AutoCertInfoType
//
// x-displayName: "Auto Cert Information"
// Information related to auto certificate
type AutoCertInfoType struct {
	// Auto Cert State
	//
	// x-displayName: "Auto Cert State"
	// State of auto certificate generation.
	AutoCertState CertificationState `protobuf:"varint,1,opt,name=auto_cert_state,json=autoCertState,proto3,enum=ves.io.schema.virtual_host.CertificationState" json:"auto_cert_state,omitempty"`
	// Auto Cert Expiry Timestamp
	//
	// x-displayName: "Auto Cert Expiry Timestamp"
	// Auto certificate expiry timestamp
	AutoCertExpiry *types.Timestamp `protobuf:"bytes,2,opt,name=auto_cert_expiry,json=autoCertExpiry,proto3" json:"auto_cert_expiry,omitempty"`
	// Auto Cert Subject
	//
	// x-displayName: "Auto Cert Subject"
	// Subject of the auto certificate
	AutoCertSubject string `protobuf:"bytes,3,opt,name=auto_cert_subject,json=autoCertSubject,proto3" json:"auto_cert_subject,omitempty"`
	// Auto Cert Issuer
	//
	// x-displayName: "Auto Cert Issuer"
	// Issuer of the auto certificate
	AutoCertIssuer string `protobuf:"bytes,4,opt,name=auto_cert_issuer,json=autoCertIssuer,proto3" json:"auto_cert_issuer,omitempty"`
	// DNS Records
	//
	// x-displayName: "DNS Records"
	// DNS Records that are to be added by user in their DNS domain.
	// Currently, this will be populated when auto certificates are
	// desired but DNS delegation is not enabled.
	DnsRecords []*DNSRecord `protobuf:"bytes,5,rep,name=dns_records,json=dnsRecords,proto3" json:"dns_records,omitempty"`
	// Auto Cert State timestamp
	//
	// x-displayName: "Auto Cert State timestamp"
	// Record the time when Vhost entered this auto cert state
	StateStartTime *types.Timestamp `protobuf:"bytes,6,opt,name=state_start_time,json=stateStartTime,proto3" json:"state_start_time,omitempty"`
}

func (m *AutoCertInfoType) Reset()      { *m = AutoCertInfoType{} }
func (*AutoCertInfoType) ProtoMessage() {}
func (*AutoCertInfoType) Descriptor() ([]byte, []int) {
	return fileDescriptor_df61af5ea37a6592, []int{9}
}
func (m *AutoCertInfoType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AutoCertInfoType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AutoCertInfoType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AutoCertInfoType.Merge(m, src)
}
func (m *AutoCertInfoType) XXX_Size() int {
	return m.Size()
}
func (m *AutoCertInfoType) XXX_DiscardUnknown() {
	xxx_messageInfo_AutoCertInfoType.DiscardUnknown(m)
}

var xxx_messageInfo_AutoCertInfoType proto.InternalMessageInfo

func (m *AutoCertInfoType) GetAutoCertState() CertificationState {
	if m != nil {
		return m.AutoCertState
	}
	return AutoCertDisabled
}

func (m *AutoCertInfoType) GetAutoCertExpiry() *types.Timestamp {
	if m != nil {
		return m.AutoCertExpiry
	}
	return nil
}

func (m *AutoCertInfoType) GetAutoCertSubject() string {
	if m != nil {
		return m.AutoCertSubject
	}
	return ""
}

func (m *AutoCertInfoType) GetAutoCertIssuer() string {
	if m != nil {
		return m.AutoCertIssuer
	}
	return ""
}

func (m *AutoCertInfoType) GetDnsRecords() []*DNSRecord {
	if m != nil {
		return m.DnsRecords
	}
	return nil
}

func (m *AutoCertInfoType) GetStateStartTime() *types.Timestamp {
	if m != nil {
		return m.StateStartTime
	}
	return nil
}

// AuthenticationDetails
//
// x-displayName: "Authentication Details"
// Authentication related information. This allows to configure the URL to redirect after the authentication
// Authentication Object Reference, configuration of cookie params etc
type AuthenticationDetails struct {
	// Authentication Object
	//
	// x-displayName: "Reference to Authentication Object"
	// x-required
	// Reference to Authentication Config Object
	AuthConfig []*schema.ObjectRefType `protobuf:"bytes,1,rep,name=auth_config,json=authConfig,proto3" json:"auth_config,omitempty"`
	// Cookie Parameters Configuration
	//
	// x-displayName: "Cookie Parameters"
	//
	// Types that are valid to be assigned to CookieParamsChoice:
	//	*AuthenticationDetails_UseAuthObjectConfig
	//	*AuthenticationDetails_CookieParams
	CookieParamsChoice isAuthenticationDetails_CookieParamsChoice `protobuf_oneof:"cookie_params_choice"`
	// Redirect URL Choice
	//
	// x-displayName: "Redirect URL Configuration"
	// x-required
	// Select Redirect URL
	//
	// Types that are valid to be assigned to RedirectUrlChoice:
	//	*AuthenticationDetails_RedirectUrl
	//	*AuthenticationDetails_RedirectDynamic
	RedirectUrlChoice isAuthenticationDetails_RedirectUrlChoice `protobuf_oneof:"redirect_url_choice"`
}

func (m *AuthenticationDetails) Reset()      { *m = AuthenticationDetails{} }
func (*AuthenticationDetails) ProtoMessage() {}
func (*AuthenticationDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_df61af5ea37a6592, []int{10}
}
func (m *AuthenticationDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthenticationDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AuthenticationDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthenticationDetails.Merge(m, src)
}
func (m *AuthenticationDetails) XXX_Size() int {
	return m.Size()
}
func (m *AuthenticationDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthenticationDetails.DiscardUnknown(m)
}

var xxx_messageInfo_AuthenticationDetails proto.InternalMessageInfo

type isAuthenticationDetails_CookieParamsChoice interface {
	isAuthenticationDetails_CookieParamsChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAuthenticationDetails_RedirectUrlChoice interface {
	isAuthenticationDetails_RedirectUrlChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type AuthenticationDetails_UseAuthObjectConfig struct {
	UseAuthObjectConfig *schema.Empty `protobuf:"bytes,3,opt,name=use_auth_object_config,json=useAuthObjectConfig,proto3,oneof" json:"use_auth_object_config,omitempty"`
}
type AuthenticationDetails_CookieParams struct {
	CookieParams *authentication.CookieParams `protobuf:"bytes,4,opt,name=cookie_params,json=cookieParams,proto3,oneof" json:"cookie_params,omitempty"`
}
type AuthenticationDetails_RedirectUrl struct {
	RedirectUrl string `protobuf:"bytes,6,opt,name=redirect_url,json=redirectUrl,proto3,oneof" json:"redirect_url,omitempty"`
}
type AuthenticationDetails_RedirectDynamic struct {
	RedirectDynamic *schema.Empty `protobuf:"bytes,7,opt,name=redirect_dynamic,json=redirectDynamic,proto3,oneof" json:"redirect_dynamic,omitempty"`
}

func (*AuthenticationDetails_UseAuthObjectConfig) isAuthenticationDetails_CookieParamsChoice() {}
func (*AuthenticationDetails_CookieParams) isAuthenticationDetails_CookieParamsChoice()        {}
func (*AuthenticationDetails_RedirectUrl) isAuthenticationDetails_RedirectUrlChoice()          {}
func (*AuthenticationDetails_RedirectDynamic) isAuthenticationDetails_RedirectUrlChoice()      {}

func (m *AuthenticationDetails) GetCookieParamsChoice() isAuthenticationDetails_CookieParamsChoice {
	if m != nil {
		return m.CookieParamsChoice
	}
	return nil
}
func (m *AuthenticationDetails) GetRedirectUrlChoice() isAuthenticationDetails_RedirectUrlChoice {
	if m != nil {
		return m.RedirectUrlChoice
	}
	return nil
}

func (m *AuthenticationDetails) GetAuthConfig() []*schema.ObjectRefType {
	if m != nil {
		return m.AuthConfig
	}
	return nil
}

func (m *AuthenticationDetails) GetUseAuthObjectConfig() *schema.Empty {
	if x, ok := m.GetCookieParamsChoice().(*AuthenticationDetails_UseAuthObjectConfig); ok {
		return x.UseAuthObjectConfig
	}
	return nil
}

func (m *AuthenticationDetails) GetCookieParams() *authentication.CookieParams {
	if x, ok := m.GetCookieParamsChoice().(*AuthenticationDetails_CookieParams); ok {
		return x.CookieParams
	}
	return nil
}

func (m *AuthenticationDetails) GetRedirectUrl() string {
	if x, ok := m.GetRedirectUrlChoice().(*AuthenticationDetails_RedirectUrl); ok {
		return x.RedirectUrl
	}
	return ""
}

func (m *AuthenticationDetails) GetRedirectDynamic() *schema.Empty {
	if x, ok := m.GetRedirectUrlChoice().(*AuthenticationDetails_RedirectDynamic); ok {
		return x.RedirectDynamic
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AuthenticationDetails) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AuthenticationDetails_UseAuthObjectConfig)(nil),
		(*AuthenticationDetails_CookieParams)(nil),
		(*AuthenticationDetails_RedirectUrl)(nil),
		(*AuthenticationDetails_RedirectDynamic)(nil),
	}
}

// policy based challenge
//
// x-displayName: "Policy Based Challenge"
// Specifies the settings for policy rule based challenge
type PolicyBasedChallenge struct {
	// Javascript Challenge
	//
	// x-displayName: "Javascript Challenge Parameters"
	// Configure Javascript challenge parameters
	JsChallenge *JavascriptChallengeType `protobuf:"bytes,1,opt,name=js_challenge,json=jsChallenge,proto3" json:"js_challenge,omitempty"`
	// Captcha Challenge
	//
	// x-displayName: "Captcha Challenge"
	// Configure Captcha challenge parameters
	CaptchaChallenge *CaptchaChallengeType `protobuf:"bytes,2,opt,name=captcha_challenge,json=captchaChallenge,proto3" json:"captcha_challenge,omitempty"`
	// Temporary User Blocking
	//
	// x-displayName: "Temporary User Blocking"
	// Specifies configuration for temporary user blocking resulting from malicious user detection
	TemporaryUserBlocking *TemporaryUserBlockingType `protobuf:"bytes,3,opt,name=temporary_user_blocking,json=temporaryUserBlocking,proto3" json:"temporary_user_blocking,omitempty"`
	// challenge choice
	//
	// x-displayName: "Select Type of Challenge"
	// x-required
	// Select the default challenge type for all requests. This can be overriden using the challenge rule list.
	//
	// Types that are valid to be assigned to ChallengeChoice:
	//	*PolicyBasedChallenge_NoChallenge
	//	*PolicyBasedChallenge_AlwaysEnableJsChallenge
	//	*PolicyBasedChallenge_AlwaysEnableCaptchaChallenge
	ChallengeChoice isPolicyBasedChallenge_ChallengeChoice `protobuf_oneof:"challenge_choice"`
	// Malicious User Mitigation
	//
	// x-displayName: "Malicious User Mitigation"
	// Settings that specify the actions to be taken when malicious users are determined to be at different threat levels.
	// User's activity is monitored and continuously analyzed for malicious behavior. From this analysis, a threat level is assigned to each user.
	// The settings defined in malicious user mitigation specify what mitigation actions to take for users determined to be at different threat levels.
	MaliciousUserMitigation []*schema.ObjectRefType `protobuf:"bytes,8,rep,name=malicious_user_mitigation,json=maliciousUserMitigation,proto3" json:"malicious_user_mitigation,omitempty"`
}

func (m *PolicyBasedChallenge) Reset()      { *m = PolicyBasedChallenge{} }
func (*PolicyBasedChallenge) ProtoMessage() {}
func (*PolicyBasedChallenge) Descriptor() ([]byte, []int) {
	return fileDescriptor_df61af5ea37a6592, []int{11}
}
func (m *PolicyBasedChallenge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PolicyBasedChallenge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PolicyBasedChallenge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolicyBasedChallenge.Merge(m, src)
}
func (m *PolicyBasedChallenge) XXX_Size() int {
	return m.Size()
}
func (m *PolicyBasedChallenge) XXX_DiscardUnknown() {
	xxx_messageInfo_PolicyBasedChallenge.DiscardUnknown(m)
}

var xxx_messageInfo_PolicyBasedChallenge proto.InternalMessageInfo

type isPolicyBasedChallenge_ChallengeChoice interface {
	isPolicyBasedChallenge_ChallengeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type PolicyBasedChallenge_NoChallenge struct {
	NoChallenge *schema.Empty `protobuf:"bytes,5,opt,name=no_challenge,json=noChallenge,proto3,oneof" json:"no_challenge,omitempty"`
}
type PolicyBasedChallenge_AlwaysEnableJsChallenge struct {
	AlwaysEnableJsChallenge *schema.Empty `protobuf:"bytes,6,opt,name=always_enable_js_challenge,json=alwaysEnableJsChallenge,proto3,oneof" json:"always_enable_js_challenge,omitempty"`
}
type PolicyBasedChallenge_AlwaysEnableCaptchaChallenge struct {
	AlwaysEnableCaptchaChallenge *schema.Empty `protobuf:"bytes,7,opt,name=always_enable_captcha_challenge,json=alwaysEnableCaptchaChallenge,proto3,oneof" json:"always_enable_captcha_challenge,omitempty"`
}

func (*PolicyBasedChallenge_NoChallenge) isPolicyBasedChallenge_ChallengeChoice()                  {}
func (*PolicyBasedChallenge_AlwaysEnableJsChallenge) isPolicyBasedChallenge_ChallengeChoice()      {}
func (*PolicyBasedChallenge_AlwaysEnableCaptchaChallenge) isPolicyBasedChallenge_ChallengeChoice() {}

func (m *PolicyBasedChallenge) GetChallengeChoice() isPolicyBasedChallenge_ChallengeChoice {
	if m != nil {
		return m.ChallengeChoice
	}
	return nil
}

func (m *PolicyBasedChallenge) GetJsChallenge() *JavascriptChallengeType {
	if m != nil {
		return m.JsChallenge
	}
	return nil
}

func (m *PolicyBasedChallenge) GetCaptchaChallenge() *CaptchaChallengeType {
	if m != nil {
		return m.CaptchaChallenge
	}
	return nil
}

func (m *PolicyBasedChallenge) GetTemporaryUserBlocking() *TemporaryUserBlockingType {
	if m != nil {
		return m.TemporaryUserBlocking
	}
	return nil
}

func (m *PolicyBasedChallenge) GetNoChallenge() *schema.Empty {
	if x, ok := m.GetChallengeChoice().(*PolicyBasedChallenge_NoChallenge); ok {
		return x.NoChallenge
	}
	return nil
}

func (m *PolicyBasedChallenge) GetAlwaysEnableJsChallenge() *schema.Empty {
	if x, ok := m.GetChallengeChoice().(*PolicyBasedChallenge_AlwaysEnableJsChallenge); ok {
		return x.AlwaysEnableJsChallenge
	}
	return nil
}

func (m *PolicyBasedChallenge) GetAlwaysEnableCaptchaChallenge() *schema.Empty {
	if x, ok := m.GetChallengeChoice().(*PolicyBasedChallenge_AlwaysEnableCaptchaChallenge); ok {
		return x.AlwaysEnableCaptchaChallenge
	}
	return nil
}

func (m *PolicyBasedChallenge) GetMaliciousUserMitigation() []*schema.ObjectRefType {
	if m != nil {
		return m.MaliciousUserMitigation
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PolicyBasedChallenge) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PolicyBasedChallenge_NoChallenge)(nil),
		(*PolicyBasedChallenge_AlwaysEnableJsChallenge)(nil),
		(*PolicyBasedChallenge_AlwaysEnableCaptchaChallenge)(nil),
	}
}

// ShapeBotDefenseConfigType
//
// x-displayName: "Shape Bot Defense Config for virtual host"
// This defines various configuration options for Shape Bot Defense per virtual host.
type ShapeBotDefenseConfigType struct {
	// Application ID
	//
	// x-displayName: "Application ID"
	// x-example: "707a0c622df8414886a5ca71c46caf2f"
	// Shape Bot Defense Application ID is used by shared instances.
	ApplicationId string `protobuf:"bytes,1,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	// API auth key for Shared Shape Instance
	//
	// x-displayName: "API auth key"
	// API auth key for Shared Shape Bot Defense instance. This value is set
	// on the tenant object from Shape Backend.
	ApiAuthKey *schema.SecretType `protobuf:"bytes,2,opt,name=api_auth_key,json=apiAuthKey,proto3" json:"api_auth_key,omitempty"`
	// Shape Instance
	//
	// x-displayName: "Shape Instance"
	// Which Shape instance to use
	Instance []*schema.ObjectRefType `protobuf:"bytes,3,rep,name=instance,proto3" json:"instance,omitempty"`
	// timeout
	//
	// x-displayName: "Timeout"
	// x-example: 300
	// The timeout for the inference check, in milliseconds.
	Timeout uint32 `protobuf:"varint,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// Blocking Pages
	//
	// x-displayName: "Blocking Pages"
	// Blocking pages used by the Bot Defense Instance where the
	// key is an MD5 representation of the blocking page value.
	// The map entries are limited to the max number of protected endpoints.
	BlockingPages map[string]string `protobuf:"bytes,5,rep,name=blocking_pages,json=blockingPages,proto3" json:"blocking_pages,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Reload Header Name
	//
	// x-displayName: "SDK Config Header Name"
	// Header that is used for SDK configuration sync
	ReloadHeaderName string `protobuf:"bytes,6,opt,name=reload_header_name,json=reloadHeaderName,proto3" json:"reload_header_name,omitempty"`
	// JS Path
	//
	// x-displayName: "JS Path"
	// JavaScript download path
	JsPath string `protobuf:"bytes,7,opt,name=js_path,json=jsPath,proto3" json:"js_path,omitempty"`
	// Bot Defense Mode
	//
	// x-displayName: "Bot Defense Mode"
	// Bot Defense Mode Type
	Mode BotDefenseMode `protobuf:"varint,8,opt,name=mode,proto3,enum=ves.io.schema.virtual_host.BotDefenseMode" json:"mode,omitempty"`
}

func (m *ShapeBotDefenseConfigType) Reset()      { *m = ShapeBotDefenseConfigType{} }
func (*ShapeBotDefenseConfigType) ProtoMessage() {}
func (*ShapeBotDefenseConfigType) Descriptor() ([]byte, []int) {
	return fileDescriptor_df61af5ea37a6592, []int{12}
}
func (m *ShapeBotDefenseConfigType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShapeBotDefenseConfigType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ShapeBotDefenseConfigType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShapeBotDefenseConfigType.Merge(m, src)
}
func (m *ShapeBotDefenseConfigType) XXX_Size() int {
	return m.Size()
}
func (m *ShapeBotDefenseConfigType) XXX_DiscardUnknown() {
	xxx_messageInfo_ShapeBotDefenseConfigType.DiscardUnknown(m)
}

var xxx_messageInfo_ShapeBotDefenseConfigType proto.InternalMessageInfo

func (m *ShapeBotDefenseConfigType) GetApplicationId() string {
	if m != nil {
		return m.ApplicationId
	}
	return ""
}

func (m *ShapeBotDefenseConfigType) GetApiAuthKey() *schema.SecretType {
	if m != nil {
		return m.ApiAuthKey
	}
	return nil
}

func (m *ShapeBotDefenseConfigType) GetInstance() []*schema.ObjectRefType {
	if m != nil {
		return m.Instance
	}
	return nil
}

func (m *ShapeBotDefenseConfigType) GetTimeout() uint32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *ShapeBotDefenseConfigType) GetBlockingPages() map[string]string {
	if m != nil {
		return m.BlockingPages
	}
	return nil
}

func (m *ShapeBotDefenseConfigType) GetReloadHeaderName() string {
	if m != nil {
		return m.ReloadHeaderName
	}
	return ""
}

func (m *ShapeBotDefenseConfigType) GetJsPath() string {
	if m != nil {
		return m.JsPath
	}
	return ""
}

func (m *ShapeBotDefenseConfigType) GetMode() BotDefenseMode {
	if m != nil {
		return m.Mode
	}
	return API_MODE
}

type ServiceDomain struct {
	// Domain Name
	//
	// x-displayName: "Domain Name"
	// x-example: "cdn.acmecorp.com"
	// Domain Name
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	// Service Domain
	//
	// x-displayName: "Service Domain"
	// x-example: "ves-io-cdn-cdn-acmecorp-com.demo1.ac.vh.volterra.us"
	// Service Domain
	ServiceDomain string `protobuf:"bytes,2,opt,name=service_domain,json=serviceDomain,proto3" json:"service_domain,omitempty"`
	// Internal Service Domain
	//
	// x-displayName: "Internal Service Domain"
	// x-example: "cdn.f898e588-1995-4a41-838f-ec4025a0c87e.crt-f5.lilaccdn.net"
	// Internal Service Domain determined by Lilac
	InternalServiceDomain string `protobuf:"bytes,3,opt,name=internal_service_domain,json=internalServiceDomain,proto3" json:"internal_service_domain,omitempty"`
}

func (m *ServiceDomain) Reset()      { *m = ServiceDomain{} }
func (*ServiceDomain) ProtoMessage() {}
func (*ServiceDomain) Descriptor() ([]byte, []int) {
	return fileDescriptor_df61af5ea37a6592, []int{13}
}
func (m *ServiceDomain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceDomain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ServiceDomain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceDomain.Merge(m, src)
}
func (m *ServiceDomain) XXX_Size() int {
	return m.Size()
}
func (m *ServiceDomain) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceDomain.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceDomain proto.InternalMessageInfo

func (m *ServiceDomain) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *ServiceDomain) GetServiceDomain() string {
	if m != nil {
		return m.ServiceDomain
	}
	return ""
}

func (m *ServiceDomain) GetInternalServiceDomain() string {
	if m != nil {
		return m.InternalServiceDomain
	}
	return ""
}

type CdnServiceType struct {
	// Content Choice
	//
	// x-displayName: "Content Choice"
	// x-required
	// Type of contents that needs to be delivered
	//
	// Types that are valid to be assigned to ContentChoice:
	//	*CdnServiceType_DownloadDelivery
	//	*CdnServiceType_LiveStreaming
	ContentChoice isCdnServiceType_ContentChoice `protobuf_oneof:"content_choice"`
	// Cache TTL values
	//
	// x-displayName: "Cache TTL"
	// x-example: "3600"
	// The Cache TTL is the number of seconds after which cache content is no longer valid
	CacheTtl uint32 `protobuf:"varint,4,opt,name=cache_ttl,json=cacheTtl,proto3" json:"cache_ttl,omitempty"`
	// Service Domains
	//
	// x-displayName: "Service Domains"
	// CNAME provided from service per domain
	ServiceDomains []*ServiceDomain `protobuf:"bytes,5,rep,name=service_domains,json=serviceDomains,proto3" json:"service_domains,omitempty"`
}

func (m *CdnServiceType) Reset()      { *m = CdnServiceType{} }
func (*CdnServiceType) ProtoMessage() {}
func (*CdnServiceType) Descriptor() ([]byte, []int) {
	return fileDescriptor_df61af5ea37a6592, []int{14}
}
func (m *CdnServiceType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CdnServiceType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CdnServiceType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CdnServiceType.Merge(m, src)
}
func (m *CdnServiceType) XXX_Size() int {
	return m.Size()
}
func (m *CdnServiceType) XXX_DiscardUnknown() {
	xxx_messageInfo_CdnServiceType.DiscardUnknown(m)
}

var xxx_messageInfo_CdnServiceType proto.InternalMessageInfo

type isCdnServiceType_ContentChoice interface {
	isCdnServiceType_ContentChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CdnServiceType_DownloadDelivery struct {
	DownloadDelivery *schema.Empty `protobuf:"bytes,2,opt,name=download_delivery,json=downloadDelivery,proto3,oneof" json:"download_delivery,omitempty"`
}
type CdnServiceType_LiveStreaming struct {
	LiveStreaming *schema.Empty `protobuf:"bytes,3,opt,name=live_streaming,json=liveStreaming,proto3,oneof" json:"live_streaming,omitempty"`
}

func (*CdnServiceType_DownloadDelivery) isCdnServiceType_ContentChoice() {}
func (*CdnServiceType_LiveStreaming) isCdnServiceType_ContentChoice()    {}

func (m *CdnServiceType) GetContentChoice() isCdnServiceType_ContentChoice {
	if m != nil {
		return m.ContentChoice
	}
	return nil
}

func (m *CdnServiceType) GetDownloadDelivery() *schema.Empty {
	if x, ok := m.GetContentChoice().(*CdnServiceType_DownloadDelivery); ok {
		return x.DownloadDelivery
	}
	return nil
}

func (m *CdnServiceType) GetLiveStreaming() *schema.Empty {
	if x, ok := m.GetContentChoice().(*CdnServiceType_LiveStreaming); ok {
		return x.LiveStreaming
	}
	return nil
}

func (m *CdnServiceType) GetCacheTtl() uint32 {
	if m != nil {
		return m.CacheTtl
	}
	return 0
}

func (m *CdnServiceType) GetServiceDomains() []*ServiceDomain {
	if m != nil {
		return m.ServiceDomains
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CdnServiceType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CdnServiceType_DownloadDelivery)(nil),
		(*CdnServiceType_LiveStreaming)(nil),
	}
}

// Trust Client IP Headers List Type
//
// x-displayName: "Trust Client IP Headers List"
// List of Client IP Headers
type ClientIPHeaders struct {
	// Client IP Headers
	//
	// x-displayName: "Client IP Headers"
	// x-example: "Client-IP-Header"
	// Define the list of one or more Client IP Headers.  Headers will be used in order from top to bottom, meaning
	// if the first header is not present in the request, the system will proceed to check for the second header,
	// and so on, until one of the listed headers is found. If none of the defined headers exist, or the value
	// is not an IP address, then the system will use the source IP of the packet. If multiple defined headers with
	// different names are present in the request, the value of the first header name in the configuration will be used.
	// If multiple defined headers with the same name are present in the request, values of all those headers will be combined.
	// The system will read the right-most IP address from header, if there are multiple ip addresses in the header value.
	// For X-Forwarded-For header, the system will read the IP address(rightmost - 1), as the client ip
	ClientIpHeaders []string `protobuf:"bytes,1,rep,name=client_ip_headers,json=clientIpHeaders,proto3" json:"client_ip_headers,omitempty"`
}

func (m *ClientIPHeaders) Reset()      { *m = ClientIPHeaders{} }
func (*ClientIPHeaders) ProtoMessage() {}
func (*ClientIPHeaders) Descriptor() ([]byte, []int) {
	return fileDescriptor_df61af5ea37a6592, []int{15}
}
func (m *ClientIPHeaders) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientIPHeaders) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ClientIPHeaders) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientIPHeaders.Merge(m, src)
}
func (m *ClientIPHeaders) XXX_Size() int {
	return m.Size()
}
func (m *ClientIPHeaders) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientIPHeaders.DiscardUnknown(m)
}

var xxx_messageInfo_ClientIPHeaders proto.InternalMessageInfo

func (m *ClientIPHeaders) GetClientIpHeaders() []string {
	if m != nil {
		return m.ClientIpHeaders
	}
	return nil
}

// DNS Proxy Configuration
//
// x-displayName: "DNS Proxy Configuration"
// Advanced DNS Proxy Configurations like DDoS, Cache are mapped to DNSProxyConfiguration for internal use
type DNSProxyConfiguration struct {
	// DDoS mitigation
	//
	// x-displayName: "DDoS mitigation"
	// x-required
	// Options for enabling and disabling the DDoS profile for the DNS Proxy.
	// On enabling this feature, a default DDoS profile is applied to the DNS proxy
	// to protect the origin DNS servers from external DDoS attacks.
	DdosProfile *DNSDDoSProfile `protobuf:"bytes,7,opt,name=ddos_profile,json=ddosProfile,proto3" json:"ddos_profile,omitempty"`
	// DNS Cache
	//
	// x-displayName: "DNS Cache"
	// Options for enabling and disabling the DNS cache profile for the DNS Proxy.
	// On enabling this feature, a default cache profile is applied to the DNS proxy
	// which caches DNS replies from the origin DNS servers.
	CacheProfile *DNSCacheProfile `protobuf:"bytes,8,opt,name=cache_profile,json=cacheProfile,proto3" json:"cache_profile,omitempty"`
	// Protcol Inspection
	//
	// x-displayName: "Protocol Inspection"
	// Options for enabling and configuring protocol inspection configuration
	ProtocolInspection *views.ObjectRefType `protobuf:"bytes,9,opt,name=protocol_inspection,json=protocolInspection,proto3" json:"protocol_inspection,omitempty"`
	// iRules
	//
	// x-displayName: "iRules Ref"
	// Options for attaching iRules to dns proxy
	Irules []*views.ObjectRefType `protobuf:"bytes,10,rep,name=irules,proto3" json:"irules,omitempty"`
}

func (m *DNSProxyConfiguration) Reset()      { *m = DNSProxyConfiguration{} }
func (*DNSProxyConfiguration) ProtoMessage() {}
func (*DNSProxyConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_df61af5ea37a6592, []int{16}
}
func (m *DNSProxyConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DNSProxyConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DNSProxyConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNSProxyConfiguration.Merge(m, src)
}
func (m *DNSProxyConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *DNSProxyConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_DNSProxyConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_DNSProxyConfiguration proto.InternalMessageInfo

func (m *DNSProxyConfiguration) GetDdosProfile() *DNSDDoSProfile {
	if m != nil {
		return m.DdosProfile
	}
	return nil
}

func (m *DNSProxyConfiguration) GetCacheProfile() *DNSCacheProfile {
	if m != nil {
		return m.CacheProfile
	}
	return nil
}

func (m *DNSProxyConfiguration) GetProtocolInspection() *views.ObjectRefType {
	if m != nil {
		return m.ProtocolInspection
	}
	return nil
}

func (m *DNSProxyConfiguration) GetIrules() []*views.ObjectRefType {
	if m != nil {
		return m.Irules
	}
	return nil
}

// DDoS Protection
//
// x-displayName: "DDoS Protection"
// DDoS Protection Rule for DNS
type DNSDDoSProfile struct {
	// DDoS Protection Choice
	//
	// x-displayName: "DNS DDoS Protection"
	// Options for enabling and disabling the DNS DDoS profile for the DNS Proxy.
	// On enabling this feature, a default DDoS profile is applied to the DNS proxy
	// to protect the origin DNS servers from external DDoS attacks.
	//
	// Types that are valid to be assigned to DdosMitigationChoice:
	//	*DNSDDoSProfile_EnableDdosMitigation
	//	*DNSDDoSProfile_DisableDdosMitigation
	DdosMitigationChoice isDNSDDoSProfile_DdosMitigationChoice `protobuf_oneof:"ddos_mitigation_choice"`
}

func (m *DNSDDoSProfile) Reset()      { *m = DNSDDoSProfile{} }
func (*DNSDDoSProfile) ProtoMessage() {}
func (*DNSDDoSProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_df61af5ea37a6592, []int{17}
}
func (m *DNSDDoSProfile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DNSDDoSProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DNSDDoSProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNSDDoSProfile.Merge(m, src)
}
func (m *DNSDDoSProfile) XXX_Size() int {
	return m.Size()
}
func (m *DNSDDoSProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_DNSDDoSProfile.DiscardUnknown(m)
}

var xxx_messageInfo_DNSDDoSProfile proto.InternalMessageInfo

type isDNSDDoSProfile_DdosMitigationChoice interface {
	isDNSDDoSProfile_DdosMitigationChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type DNSDDoSProfile_EnableDdosMitigation struct {
	EnableDdosMitigation *schema.Empty `protobuf:"bytes,2,opt,name=enable_ddos_mitigation,json=enableDdosMitigation,proto3,oneof" json:"enable_ddos_mitigation,omitempty"`
}
type DNSDDoSProfile_DisableDdosMitigation struct {
	DisableDdosMitigation *schema.Empty `protobuf:"bytes,3,opt,name=disable_ddos_mitigation,json=disableDdosMitigation,proto3,oneof" json:"disable_ddos_mitigation,omitempty"`
}

func (*DNSDDoSProfile_EnableDdosMitigation) isDNSDDoSProfile_DdosMitigationChoice()  {}
func (*DNSDDoSProfile_DisableDdosMitigation) isDNSDDoSProfile_DdosMitigationChoice() {}

func (m *DNSDDoSProfile) GetDdosMitigationChoice() isDNSDDoSProfile_DdosMitigationChoice {
	if m != nil {
		return m.DdosMitigationChoice
	}
	return nil
}

func (m *DNSDDoSProfile) GetEnableDdosMitigation() *schema.Empty {
	if x, ok := m.GetDdosMitigationChoice().(*DNSDDoSProfile_EnableDdosMitigation); ok {
		return x.EnableDdosMitigation
	}
	return nil
}

func (m *DNSDDoSProfile) GetDisableDdosMitigation() *schema.Empty {
	if x, ok := m.GetDdosMitigationChoice().(*DNSDDoSProfile_DisableDdosMitigation); ok {
		return x.DisableDdosMitigation
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DNSDDoSProfile) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DNSDDoSProfile_EnableDdosMitigation)(nil),
		(*DNSDDoSProfile_DisableDdosMitigation)(nil),
	}
}

// DNS Cache
//
// x-displayName: "DNS Cache"
// DNS Cache specifies cache configuration
type DNSCacheProfile struct {
	// DNS Cache Choice
	//
	// x-required
	// x-displayName: "DNS Cache"
	// Options for enabling and disabling the DNS cache profile for the DNS Proxy.
	// On enabling this feature, a default cache profile is applied to the DNS proxy
	// which caches DNS replies from the origin DNS servers.
	//
	// Types that are valid to be assigned to CacheProfileChoice:
	//	*DNSCacheProfile_CacheSize
	//	*DNSCacheProfile_DisableCacheProfile
	CacheProfileChoice isDNSCacheProfile_CacheProfileChoice `protobuf_oneof:"cache_profile_choice"`
}

func (m *DNSCacheProfile) Reset()      { *m = DNSCacheProfile{} }
func (*DNSCacheProfile) ProtoMessage() {}
func (*DNSCacheProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_df61af5ea37a6592, []int{18}
}
func (m *DNSCacheProfile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DNSCacheProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DNSCacheProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNSCacheProfile.Merge(m, src)
}
func (m *DNSCacheProfile) XXX_Size() int {
	return m.Size()
}
func (m *DNSCacheProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_DNSCacheProfile.DiscardUnknown(m)
}

var xxx_messageInfo_DNSCacheProfile proto.InternalMessageInfo

type isDNSCacheProfile_CacheProfileChoice interface {
	isDNSCacheProfile_CacheProfileChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type DNSCacheProfile_CacheSize struct {
	CacheSize uint32 `protobuf:"varint,4,opt,name=cache_size,json=cacheSize,proto3,oneof" json:"cache_size,omitempty"`
}
type DNSCacheProfile_DisableCacheProfile struct {
	DisableCacheProfile *schema.Empty `protobuf:"bytes,3,opt,name=disable_cache_profile,json=disableCacheProfile,proto3,oneof" json:"disable_cache_profile,omitempty"`
}

func (*DNSCacheProfile_CacheSize) isDNSCacheProfile_CacheProfileChoice()           {}
func (*DNSCacheProfile_DisableCacheProfile) isDNSCacheProfile_CacheProfileChoice() {}

func (m *DNSCacheProfile) GetCacheProfileChoice() isDNSCacheProfile_CacheProfileChoice {
	if m != nil {
		return m.CacheProfileChoice
	}
	return nil
}

func (m *DNSCacheProfile) GetCacheSize() uint32 {
	if x, ok := m.GetCacheProfileChoice().(*DNSCacheProfile_CacheSize); ok {
		return x.CacheSize
	}
	return 0
}

func (m *DNSCacheProfile) GetDisableCacheProfile() *schema.Empty {
	if x, ok := m.GetCacheProfileChoice().(*DNSCacheProfile_DisableCacheProfile); ok {
		return x.DisableCacheProfile
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DNSCacheProfile) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DNSCacheProfile_CacheSize)(nil),
		(*DNSCacheProfile_DisableCacheProfile)(nil),
	}
}

// Slow DDoS Mitigation
//
// x-displayName: "Slow DDoS Mitigation"
// "Slow and low" attacks tie up server resources, leaving none available for servicing
// requests from actual users.
type SlowDDoSMitigation struct {
	// Request Headers Timeout
	//
	// x-displayName: "Request Headers Timeout"
	// x-example: "60000"
	// The amount of time the client has to send only the headers on the request stream before
	// the stream is cancelled. The default value is 10000 milliseconds. This setting
	// provides protection against Slowloris attacks.
	RequestHeadersTimeout uint32 `protobuf:"varint,2,opt,name=request_headers_timeout,json=requestHeadersTimeout,proto3" json:"request_headers_timeout,omitempty"`
	// Total Request Timeout
	//
	// x-displayName: "Total Request Timeout"
	// x-required
	// The amount of time allowed for the entire request stream to be received from the client, in milliseconds.
	// The stream is terminated with a HTTP 408 (Request Timeout) error code if request has not been completed.
	// The default value is 60000 milliseconds. This setting provides protection against Slow POST attacks.
	//
	// Types that are valid to be assigned to RequestTimeoutChoice:
	//	*SlowDDoSMitigation_RequestTimeout
	//	*SlowDDoSMitigation_DisableRequestTimeout
	RequestTimeoutChoice isSlowDDoSMitigation_RequestTimeoutChoice `protobuf_oneof:"request_timeout_choice"`
}

func (m *SlowDDoSMitigation) Reset()      { *m = SlowDDoSMitigation{} }
func (*SlowDDoSMitigation) ProtoMessage() {}
func (*SlowDDoSMitigation) Descriptor() ([]byte, []int) {
	return fileDescriptor_df61af5ea37a6592, []int{19}
}
func (m *SlowDDoSMitigation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SlowDDoSMitigation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SlowDDoSMitigation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SlowDDoSMitigation.Merge(m, src)
}
func (m *SlowDDoSMitigation) XXX_Size() int {
	return m.Size()
}
func (m *SlowDDoSMitigation) XXX_DiscardUnknown() {
	xxx_messageInfo_SlowDDoSMitigation.DiscardUnknown(m)
}

var xxx_messageInfo_SlowDDoSMitigation proto.InternalMessageInfo

type isSlowDDoSMitigation_RequestTimeoutChoice interface {
	isSlowDDoSMitigation_RequestTimeoutChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type SlowDDoSMitigation_RequestTimeout struct {
	RequestTimeout uint32 `protobuf:"varint,1,opt,name=request_timeout,json=requestTimeout,proto3,oneof" json:"request_timeout,omitempty"`
}
type SlowDDoSMitigation_DisableRequestTimeout struct {
	DisableRequestTimeout *schema.Empty `protobuf:"bytes,3,opt,name=disable_request_timeout,json=disableRequestTimeout,proto3,oneof" json:"disable_request_timeout,omitempty"`
}

func (*SlowDDoSMitigation_RequestTimeout) isSlowDDoSMitigation_RequestTimeoutChoice()        {}
func (*SlowDDoSMitigation_DisableRequestTimeout) isSlowDDoSMitigation_RequestTimeoutChoice() {}

func (m *SlowDDoSMitigation) GetRequestTimeoutChoice() isSlowDDoSMitigation_RequestTimeoutChoice {
	if m != nil {
		return m.RequestTimeoutChoice
	}
	return nil
}

func (m *SlowDDoSMitigation) GetRequestHeadersTimeout() uint32 {
	if m != nil {
		return m.RequestHeadersTimeout
	}
	return 0
}

func (m *SlowDDoSMitigation) GetRequestTimeout() uint32 {
	if x, ok := m.GetRequestTimeoutChoice().(*SlowDDoSMitigation_RequestTimeout); ok {
		return x.RequestTimeout
	}
	return 0
}

func (m *SlowDDoSMitigation) GetDisableRequestTimeout() *schema.Empty {
	if x, ok := m.GetRequestTimeoutChoice().(*SlowDDoSMitigation_DisableRequestTimeout); ok {
		return x.DisableRequestTimeout
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SlowDDoSMitigation) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SlowDDoSMitigation_RequestTimeout)(nil),
		(*SlowDDoSMitigation_DisableRequestTimeout)(nil),
	}
}

// Domain-Certificates map
//
// x-displayName: "Domain Certificates"
// The certificates for a given domain per public key algorithm. A certificate is required for at least one of the algorithm types.
type DomainCertificates struct {
	// RSA Certificate
	//
	// x-displayName: "RSA Certificate"
	// the RSA certificate for the domain, if any
	RsaCertificates []*schema.ObjectRefType `protobuf:"bytes,1,rep,name=rsa_certificates,json=rsaCertificates,proto3" json:"rsa_certificates,omitempty"`
	// ECDSA Certificate
	//
	// x-displayName: "ECDSA Certificate"
	// the ECDSA certificate for the domain, if any
	EcdsaCertificates []*schema.ObjectRefType `protobuf:"bytes,2,rep,name=ecdsa_certificates,json=ecdsaCertificates,proto3" json:"ecdsa_certificates,omitempty"`
}

func (m *DomainCertificates) Reset()      { *m = DomainCertificates{} }
func (*DomainCertificates) ProtoMessage() {}
func (*DomainCertificates) Descriptor() ([]byte, []int) {
	return fileDescriptor_df61af5ea37a6592, []int{20}
}
func (m *DomainCertificates) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DomainCertificates) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DomainCertificates) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DomainCertificates.Merge(m, src)
}
func (m *DomainCertificates) XXX_Size() int {
	return m.Size()
}
func (m *DomainCertificates) XXX_DiscardUnknown() {
	xxx_messageInfo_DomainCertificates.DiscardUnknown(m)
}

var xxx_messageInfo_DomainCertificates proto.InternalMessageInfo

func (m *DomainCertificates) GetRsaCertificates() []*schema.ObjectRefType {
	if m != nil {
		return m.RsaCertificates
	}
	return nil
}

func (m *DomainCertificates) GetEcdsaCertificates() []*schema.ObjectRefType {
	if m != nil {
		return m.EcdsaCertificates
	}
	return nil
}

// OpenAPI Specification
//
// x-displayName: "OpenAPI Specification"
// OpenAPI specification settings
type ApiSpec struct {
	// API Definition
	//
	// x-displayName: "API Definition"
	// x-required
	// API definition is set on this vhost for enforcing OpenAPI on requests
	ApiDefinition *views.ObjectRefType `protobuf:"bytes,1,opt,name=api_definition,json=apiDefinition,proto3" json:"api_definition,omitempty"`
	// Enable the OpenApi validation functionality for VirtualHost
	//
	// x-displayName: "OpenApi Validation Config"
	// x-required
	// OpenApi Validation configuration for the virtual host.
	//
	// Types that are valid to be assigned to OpenApiValidationChoice:
	//	*ApiSpec_DisableOpenApiValidation
	//	*ApiSpec_EnableOpenApiValidation
	OpenApiValidationChoice isApiSpec_OpenApiValidationChoice `protobuf_oneof:"open_api_validation_choice"`
}

func (m *ApiSpec) Reset()      { *m = ApiSpec{} }
func (*ApiSpec) ProtoMessage() {}
func (*ApiSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_df61af5ea37a6592, []int{21}
}
func (m *ApiSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApiSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ApiSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApiSpec.Merge(m, src)
}
func (m *ApiSpec) XXX_Size() int {
	return m.Size()
}
func (m *ApiSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ApiSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ApiSpec proto.InternalMessageInfo

type isApiSpec_OpenApiValidationChoice interface {
	isApiSpec_OpenApiValidationChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ApiSpec_DisableOpenApiValidation struct {
	DisableOpenApiValidation *schema.Empty `protobuf:"bytes,3,opt,name=disable_open_api_validation,json=disableOpenApiValidation,proto3,oneof" json:"disable_open_api_validation,omitempty"`
}
type ApiSpec_EnableOpenApiValidation struct {
	EnableOpenApiValidation *OpenApiValidationSettings `protobuf:"bytes,4,opt,name=enable_open_api_validation,json=enableOpenApiValidation,proto3,oneof" json:"enable_open_api_validation,omitempty"`
}

func (*ApiSpec_DisableOpenApiValidation) isApiSpec_OpenApiValidationChoice() {}
func (*ApiSpec_EnableOpenApiValidation) isApiSpec_OpenApiValidationChoice()  {}

func (m *ApiSpec) GetOpenApiValidationChoice() isApiSpec_OpenApiValidationChoice {
	if m != nil {
		return m.OpenApiValidationChoice
	}
	return nil
}

func (m *ApiSpec) GetApiDefinition() *views.ObjectRefType {
	if m != nil {
		return m.ApiDefinition
	}
	return nil
}

func (m *ApiSpec) GetDisableOpenApiValidation() *schema.Empty {
	if x, ok := m.GetOpenApiValidationChoice().(*ApiSpec_DisableOpenApiValidation); ok {
		return x.DisableOpenApiValidation
	}
	return nil
}

func (m *ApiSpec) GetEnableOpenApiValidation() *OpenApiValidationSettings {
	if x, ok := m.GetOpenApiValidationChoice().(*ApiSpec_EnableOpenApiValidation); ok {
		return x.EnableOpenApiValidation
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ApiSpec) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ApiSpec_DisableOpenApiValidation)(nil),
		(*ApiSpec_EnableOpenApiValidation)(nil),
	}
}

// OpenAPI Validation Settings
//
// x-displayName: "OpenAPI Validation Settings"
// x-required
// Settings in VH of enabled OpenAPI validation
type OpenApiValidationSettings struct {
	// fail oversized body validation
	//
	// x-displayName: "Fail Oversized Body Validation"
	// Set to fail validation on request/response with too long body
	FailOversizedBodyValidation bool `protobuf:"varint,4,opt,name=fail_oversized_body_validation,json=failOversizedBodyValidation,proto3" json:"fail_oversized_body_validation,omitempty"`
	// allow only specified query parameter
	//
	// x-displayName: "Fail Validation On Unspecified Query Parameter"
	// Set to fail validation on request with query parameter that is not specified in the OpenAPI specification
	AllowOnlySpecifiedQueryParams bool `protobuf:"varint,5,opt,name=allow_only_specified_query_params,json=allowOnlySpecifiedQueryParams,proto3" json:"allow_only_specified_query_params,omitempty"`
	// allow only specified header
	//
	// x-displayName: "Fail Validation On Unspecified Header"
	// Set to fail validation on request/response with header that is not specified in the OpenAPI specification
	AllowOnlySpecifiedHeaders bool `protobuf:"varint,6,opt,name=allow_only_specified_headers,json=allowOnlySpecifiedHeaders,proto3" json:"allow_only_specified_headers,omitempty"`
}

func (m *OpenApiValidationSettings) Reset()      { *m = OpenApiValidationSettings{} }
func (*OpenApiValidationSettings) ProtoMessage() {}
func (*OpenApiValidationSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_df61af5ea37a6592, []int{22}
}
func (m *OpenApiValidationSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OpenApiValidationSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *OpenApiValidationSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenApiValidationSettings.Merge(m, src)
}
func (m *OpenApiValidationSettings) XXX_Size() int {
	return m.Size()
}
func (m *OpenApiValidationSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenApiValidationSettings.DiscardUnknown(m)
}

var xxx_messageInfo_OpenApiValidationSettings proto.InternalMessageInfo

func (m *OpenApiValidationSettings) GetFailOversizedBodyValidation() bool {
	if m != nil {
		return m.FailOversizedBodyValidation
	}
	return false
}

func (m *OpenApiValidationSettings) GetAllowOnlySpecifiedQueryParams() bool {
	if m != nil {
		return m.AllowOnlySpecifiedQueryParams
	}
	return false
}

func (m *OpenApiValidationSettings) GetAllowOnlySpecifiedHeaders() bool {
	if m != nil {
		return m.AllowOnlySpecifiedHeaders
	}
	return false
}

// HttpProtocolOptions
//
// x-displayName: "HTTP Protocol Configuration Options"
// HTTP protocol configuration options for downstream connections
type HttpProtocolOptions struct {
	// HTTP Protocol Configuration
	//
	// x-displayName: "HTTP Protocol Configuration"
	// x-required
	// HTTP protocol configuration options for downstream connections
	//
	// Types that are valid to be assigned to HttpProtocolChoice:
	//	*HttpProtocolOptions_HttpProtocolEnableV1Only
	//	*HttpProtocolOptions_HttpProtocolEnableV2Only
	//	*HttpProtocolOptions_HttpProtocolEnableV1V2
	HttpProtocolChoice isHttpProtocolOptions_HttpProtocolChoice `protobuf_oneof:"http_protocol_choice"`
}

func (m *HttpProtocolOptions) Reset()      { *m = HttpProtocolOptions{} }
func (*HttpProtocolOptions) ProtoMessage() {}
func (*HttpProtocolOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_df61af5ea37a6592, []int{23}
}
func (m *HttpProtocolOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HttpProtocolOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *HttpProtocolOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpProtocolOptions.Merge(m, src)
}
func (m *HttpProtocolOptions) XXX_Size() int {
	return m.Size()
}
func (m *HttpProtocolOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpProtocolOptions.DiscardUnknown(m)
}

var xxx_messageInfo_HttpProtocolOptions proto.InternalMessageInfo

type isHttpProtocolOptions_HttpProtocolChoice interface {
	isHttpProtocolOptions_HttpProtocolChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type HttpProtocolOptions_HttpProtocolEnableV1Only struct {
	HttpProtocolEnableV1Only *schema.Empty `protobuf:"bytes,2,opt,name=http_protocol_enable_v1_only,json=httpProtocolEnableV1Only,proto3,oneof" json:"http_protocol_enable_v1_only,omitempty"`
}
type HttpProtocolOptions_HttpProtocolEnableV2Only struct {
	HttpProtocolEnableV2Only *schema.Empty `protobuf:"bytes,3,opt,name=http_protocol_enable_v2_only,json=httpProtocolEnableV2Only,proto3,oneof" json:"http_protocol_enable_v2_only,omitempty"`
}
type HttpProtocolOptions_HttpProtocolEnableV1V2 struct {
	HttpProtocolEnableV1V2 *schema.Empty `protobuf:"bytes,4,opt,name=http_protocol_enable_v1_v2,json=httpProtocolEnableV1V2,proto3,oneof" json:"http_protocol_enable_v1_v2,omitempty"`
}

func (*HttpProtocolOptions_HttpProtocolEnableV1Only) isHttpProtocolOptions_HttpProtocolChoice() {}
func (*HttpProtocolOptions_HttpProtocolEnableV2Only) isHttpProtocolOptions_HttpProtocolChoice() {}
func (*HttpProtocolOptions_HttpProtocolEnableV1V2) isHttpProtocolOptions_HttpProtocolChoice()   {}

func (m *HttpProtocolOptions) GetHttpProtocolChoice() isHttpProtocolOptions_HttpProtocolChoice {
	if m != nil {
		return m.HttpProtocolChoice
	}
	return nil
}

func (m *HttpProtocolOptions) GetHttpProtocolEnableV1Only() *schema.Empty {
	if x, ok := m.GetHttpProtocolChoice().(*HttpProtocolOptions_HttpProtocolEnableV1Only); ok {
		return x.HttpProtocolEnableV1Only
	}
	return nil
}

func (m *HttpProtocolOptions) GetHttpProtocolEnableV2Only() *schema.Empty {
	if x, ok := m.GetHttpProtocolChoice().(*HttpProtocolOptions_HttpProtocolEnableV2Only); ok {
		return x.HttpProtocolEnableV2Only
	}
	return nil
}

func (m *HttpProtocolOptions) GetHttpProtocolEnableV1V2() *schema.Empty {
	if x, ok := m.GetHttpProtocolChoice().(*HttpProtocolOptions_HttpProtocolEnableV1V2); ok {
		return x.HttpProtocolEnableV1V2
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*HttpProtocolOptions) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*HttpProtocolOptions_HttpProtocolEnableV1Only)(nil),
		(*HttpProtocolOptions_HttpProtocolEnableV2Only)(nil),
		(*HttpProtocolOptions_HttpProtocolEnableV1V2)(nil),
	}
}

// HttpRedirectOptions
//
// x-displayName: "HTTP Protocol Redirect Options to HTTPS"
// HTTP protocol redirect options to https for downstream connections
type HttpRedirectOptions struct {
}

func (m *HttpRedirectOptions) Reset()      { *m = HttpRedirectOptions{} }
func (*HttpRedirectOptions) ProtoMessage() {}
func (*HttpRedirectOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_df61af5ea37a6592, []int{24}
}
func (m *HttpRedirectOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HttpRedirectOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *HttpRedirectOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpRedirectOptions.Merge(m, src)
}
func (m *HttpRedirectOptions) XXX_Size() int {
	return m.Size()
}
func (m *HttpRedirectOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpRedirectOptions.DiscardUnknown(m)
}

var xxx_messageInfo_HttpRedirectOptions proto.InternalMessageInfo

// GlobalSpecType
//
// x-displayName: "Global Configuration Specification"
// Configuration specification for VirtualHost
type GlobalSpecType struct {
	// domains
	//
	// x-displayName: "Domains"
	// x-example: "www.foo.com"
	// A list of domains (host/authority header) that will be matched to this virtual host.
	// Wildcard hosts are supported in the suffix or prefix form
	//
	// Domain search order:
	//  1. Exact domain names: www.foo.com.
	//  2. Prefix domain wildcards: *.foo.com or *-bar.foo.com.
	//  3. Special wildcard * matching any domain.
	//
	// Wildcard will not match empty string.
	// e.g. *-bar.foo.com will match baz-bar.foo.com but not -bar.foo.com.
	// The longest wildcards match first.
	// Only a single virtual host in the entire route configuration can match on *.
	// Also a domain must be unique across all virtual hosts within an advertise policy.
	//
	// Domains are also used for SNI matching if the virtual host proxy type is TCP_PROXY_WITH_SNI/HTTPS_PROXY
	// Domains also indicate the list of names for which DNS resolution will be done by VER
	Domains []string `protobuf:"bytes,2,rep,name=domains,proto3" json:"domains,omitempty"`
	// routes
	//
	// x-displayName: "Routes"
	// The list of routes that will be matched, in order, for incoming requests.
	// The first route that matches will be used. Currently route object is redundant in case of TCP proxy but required.
	// For TCP_PROXY/TCP_PROXY_WITH_SNI/SMA_PROXY VirtualHosts, the route object only specifies the cluster/weighted-cluster
	// as route destination without any match condition. In other words, match condition in route object is ignored for
	// TCP_PROXY/TCP_PROXY_WITH_SNI/SMA_PROXY VirtualHosts. Routes used for TCP_PROXY/TCP_PROXY_WITH_SNI/SMA_PROXY
	// VirtualHosts cannot have DirectResponse or Redirect as actions.
	Routes []*schema.ObjectRefType `protobuf:"bytes,3,rep,name=routes,proto3" json:"routes,omitempty"`
	// javascript_info
	//
	// x-displayName: "Javascript Info"
	// Custom JavaScript Configuration. Custom JavaScript code can be executed at various stages of request processing.
	JavascriptInfo *JavaScriptConfigType `protobuf:"bytes,4,opt,name=javascript_info,json=javascriptInfo,proto3" json:"javascript_info,omitempty"`
	// Advertise Policy
	//
	// x-displayName: "Advertise Policies"
	// Advertise Policy allows you to define networks or sites where you want a VIP for this virtual host to be advertised.
	// Each Policy rule can have different parameters, like TLS configuration, ports, optionally ip address to be used for VIP.
	// If advertise policy is not specified then no VIP is assigned for this virtual host.
	AdvertisePolicies []*schema.ObjectRefType `protobuf:"bytes,5,rep,name=advertise_policies,json=advertisePolicies,proto3" json:"advertise_policies,omitempty"`
	// Headers to add in request
	//
	// x-displayName: "Add Request Headers"
	// Headers are key-value pairs to be added to HTTP request being routed towards upstream.
	// Headers specified at this level are applied after headers from matched Route are applied
	RequestHeadersToAdd []*schema.HeaderManipulationOptionType `protobuf:"bytes,6,rep,name=request_headers_to_add,json=requestHeadersToAdd,proto3" json:"request_headers_to_add,omitempty"`
	// Headers to add in response
	//
	// x-displayName: "Add Response Headers"
	// Headers are key-value pairs to be added to HTTP response being sent towards downstream.
	// Headers specified at this level are applied after headers from matched Route are applied
	ResponseHeadersToAdd []*schema.HeaderManipulationOptionType `protobuf:"bytes,7,rep,name=response_headers_to_add,json=responseHeadersToAdd,proto3" json:"response_headers_to_add,omitempty"`
	// Header to be removed from request
	//
	// x-displayName: "Remove Request Headers"
	// x-example: "host"
	// List of keys of Headers to be removed from the HTTP request being sent towards upstream.
	RequestHeadersToRemove []string `protobuf:"bytes,17,rep,name=request_headers_to_remove,json=requestHeadersToRemove,proto3" json:"request_headers_to_remove,omitempty"`
	// Header to be removed from response
	//
	// x-displayName: "Remove Response Headers"
	// x-example: "host"
	// List of keys of Headers to be removed from the HTTP response being sent towards downstream.
	ResponseHeadersToRemove []string `protobuf:"bytes,8,rep,name=response_headers_to_remove,json=responseHeadersToRemove,proto3" json:"response_headers_to_remove,omitempty"`
	// TLS parameters
	//
	// x-displayName: "TLS Configuration"
	// Select TLS Certificate objects, or specify TLS Certificate Parameters inline (legacy)
	//
	// Types that are valid to be assigned to TlsCertificatesChoice:
	//	*GlobalSpecType_TlsParameters
	//	*GlobalSpecType_TlsCertParams
	TlsCertificatesChoice isGlobalSpecType_TlsCertificatesChoice `protobuf_oneof:"tls_certificates_choice"`
	// Virtual host type
	//
	// x-displayName: "Virtual Host Type"
	// VirtualHostType indicates if virtual_host is used as VIRTUAL_SERVICE/LOAD_BALANCER/API_GATEWAY.
	// Functionally, all types are same, this is mainly used for categorizing metrics and UI visualization.
	Type VirtualHostType `protobuf:"varint,10,opt,name=type,proto3,enum=ves.io.schema.virtual_host.VirtualHostType" json:"type,omitempty"`
	// Buffer configuration for requests
	//
	// x-displayName: "Buffer Policy"
	// Some upstream applications are not capable of handling streamed data and high network latency.
	// This config enables buffering the entire request before sending to upstream application. We can
	// specify the maximum buffer size and buffer interval with this config.
	BufferPolicy *schema.BufferConfigType `protobuf:"bytes,12,opt,name=buffer_policy,json=bufferPolicy,proto3" json:"buffer_policy,omitempty"`
	// Cross-Origin Resource Sharing (CORS) configuration for requests
	//
	// x-displayName: "CORS Policy"
	// CORS is a mechanism that uses additional HTTP headers to tell a browser to let
	// a web application running at one origin (domain) have permission to access selected
	// resources from a server at a different origin
	CorsPolicy *schema.CorsPolicy `protobuf:"bytes,13,opt,name=cors_policy,json=corsPolicy,proto3" json:"cors_policy,omitempty"`
	// Proxy Type
	//
	// x-displayName: "Proxy Type"
	// Indicates whether the type of proxy is UDP/Secret Management Access
	Proxy ProxyType `protobuf:"varint,15,opt,name=proxy,proto3,enum=ves.io.schema.virtual_host.ProxyType" json:"proxy,omitempty"`
	// JSON Web Token authentication (JWT) configuration for requests
	//
	// x-displayName: "JWT Config"
	// This HTTP filter specifies how to verify JSON Web Token (JWT). It will verify its signature,
	// audiences and issuer
	Jwt []*schema.ObjectRefType `protobuf:"bytes,16,rep,name=jwt,proto3" json:"jwt,omitempty"`
	// Enable the WAF (Web Application Firewall) functionality for VirtualHost
	//
	// x-displayName: "WAF Config"
	// WAF can be used to analyze inbound and outbound http/https traffic.
	// WAF can be configured either in BLOCKing Mode or ALERTing Mode.
	// In BLOCKing mode if WAF detects suspicious inbound/outbound traffic it blocks the request or response.
	// In ALERTing mode if suspicious traffic is detected, WAF generates ALERTs with details on the
	// suspicious traffic (instead of blocking traffic).
	//
	// waf_type is the App Firewall profile to use.
	WafType *schema.WafType `protobuf:"bytes,18,opt,name=waf_type,json=wafType,proto3" json:"waf_type,omitempty"`
	// Enable the dynamic resolution of the endpoint
	//
	// x-displayName: "Dynamic Reverse Proxy"
	// In this mode of proxy, virtual host will resolve the destination endpoint dynamically.
	//
	// The dynamic resolution is done using a predefined field in the request. This predefined
	// field depends on the ProxyType configured on the Virtual Host.
	//
	// For HTTP traffic, i.e. with ProxyType as HTTP_PROXY or HTTPS_PROXY, virtual host will use the
	// "HOST" http header from the request and perform DNS resolution to select destination endpoint.
	//
	// For TCP traffic with SNI, (If the ProxyType is TCP_PROXY_WITH_SNI), virtual host will perform DNS
	// resolution using the SNI.
	//
	// The DNS resolution is performed in the virtual network specified in outside_network_type or
	// outside_network
	//
	// In both modes of operation(either using Host header or SNI), the DNS resolution could return
	// multiple addresses. First IPv4 address from such returned list is used as endpoint for the
	// request. The DNS response is cached for 60s by default.
	DynamicReverseProxy *DynamicReverseProxyType `protobuf:"bytes,19,opt,name=dynamic_reverse_proxy,json=dynamicReverseProxy,proto3" json:"dynamic_reverse_proxy,omitempty"`
	// Add Site information
	//
	// x-displayName: "Add Location"
	// x-example: "true"
	// x-example: true
	// Appends header x-volterra-location = <re-site-name> in responses. This configuration
	// is ignored on CE sites.
	AddLocation bool `protobuf:"varint,20,opt,name=add_location,json=addLocation,proto3" json:"add_location,omitempty"`
	// Compression configuration
	//
	// x-displayName: "Compression Parameters"
	// Enables loadbalancer to compress dispatched data from an upstream service upon client request.
	// Only GZIP compression is supported
	CompressionParams *CompressionType `protobuf:"bytes,21,opt,name=compression_params,json=compressionParams,proto3" json:"compression_params,omitempty"`
	// Custom Errors
	//
	// x-displayName: "Custom Error Responses"
	// x-example: "value"
	//
	// Map of integer error codes as keys and string values that can be used to provide custom
	// http pages for each error code.
	// Key of the map can be either response code class or HTTP Error code. Response code classes
	// for key is configured as follows
	// 3 -- for 3xx response code class
	// 4 -- for 4xx response code class
	// 5 -- for 5xx response code class
	// Value is the uri_ref. Currently supported URL schemes is string:///.
	// For string:/// scheme, message needs to be encoded in Base64 format.
	// You can specify this message as base64 encoded plain text message e.g. "Access Denied"
	// or it can be HTML paragraph or a body string encoded as base64 string
	// E.g. "<p> Access Denied </p>". Base64 encoded string for this html is "PHA+IEFjY2VzcyBEZW5pZWQgPC9wPg=="
	// Specific response code takes preference when both response code and response code class
	// matches for a request.
	//
	// The configured custom errors are only applicable for loadbalancer generated errors.
	// Errors returned from upstream server is propagated as is.
	//
	// F5XC provides default error pages for the errors generated by the loadbalancer. Content of
	// these pages are not editable. User has an option to disable the use of default F5XC error pages
	CustomErrors map[uint32]string `protobuf:"bytes,22,rep,name=custom_errors,json=customErrors,proto3" json:"custom_errors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Disable use of default Error page
	//
	// x-displayName: "Disable default error pages"
	// x-example: "true"
	//
	// An option to specify whether to disable using default F5XC error pages
	DisableDefaultErrorPages bool `protobuf:"varint,33,opt,name=disable_default_error_pages,json=disableDefaultErrorPages,proto3" json:"disable_default_error_pages,omitempty"`
	// Maximum request header size
	//
	// x-displayName: "Maximum Request Header Size (KiB)"
	// x-example: "42"
	//
	// The maximum request header size in KiB for incoming connections.
	//
	// If un-configured, the default max request headers allowed is 60 KiB.
	//
	// Requests that exceed this limit will receive a 431 response.
	//
	// The max configurable limit is 96 KiB, based on current implementation constraints.
	//
	// Note:
	//   a. This configuration parameter is applicable only for HTTP_PROXY and HTTPS_PROXY
	//   b. When multiple HTTP_PROXY virtual hosts share the same advertise policy, the effective
	//      "maximum request header size" for such virtual hosts is the highest value configured
	//      on any of the virtual hosts
	MaxRequestHeaderSize uint32 `protobuf:"varint,23,opt,name=max_request_header_size,json=maxRequestHeaderSize,proto3" json:"max_request_header_size,omitempty"`
	// Challenge choice
	//
	// x-displayName: "Select Type of Challenge"
	// x-required
	// Selection of different types of challenge at Virtual Host
	//
	// Types that are valid to be assigned to ChallengeType:
	//	*GlobalSpecType_NoChallenge
	//	*GlobalSpecType_JsChallenge
	//	*GlobalSpecType_CaptchaChallenge
	//	*GlobalSpecType_PolicyBasedChallenge
	ChallengeType isGlobalSpecType_ChallengeType `protobuf_oneof:"challenge_type"`
	// user_identification
	//
	// x-displayName: "User Identification Policy"
	// A reference to user_identification object.
	// The rules in the user_identification object are evaluated to determine the user identifier to be rate limited.
	UserIdentification []*schema.ObjectRefType `protobuf:"bytes,25,rep,name=user_identification,json=userIdentification,proto3" json:"user_identification,omitempty"`
	// rate_limiter
	//
	// x-displayName: "Rate Limiter"
	// A reference to rate_limiter object.
	// Requests to the virtual_host are rate limited based on the parameters specified in the rate_limiter.
	RateLimiter []*schema.ObjectRefType `protobuf:"bytes,26,rep,name=rate_limiter,json=rateLimiter,proto3" json:"rate_limiter,omitempty"`
	// rate_limiter_allowed_prefixes
	//
	// x-displayName: "Rate Limiter Allowed Prefixes"
	// References to ip_prefix_set objects.
	// Requests from source IP addresses that are covered by one of the allowed IP Prefixes are not subjected to rate limiting.
	RateLimiterAllowedPrefixes []*schema.ObjectRefType `protobuf:"bytes,27,rep,name=rate_limiter_allowed_prefixes,json=rateLimiterAllowedPrefixes,proto3" json:"rate_limiter_allowed_prefixes,omitempty"`
	// retry_policy
	//
	// x-displayName: "Retry Policy"
	// Indicates that the virtual_host has a retry policy.
	RetryPolicy *schema.RetryPolicyType `protobuf:"bytes,28,opt,name=retry_policy,json=retryPolicy,proto3" json:"retry_policy,omitempty"`
	// Temporary User Blocking
	//
	// x-displayName: "Temporary User Blocking"
	// Specifies configuration for temporary user blocking resulting from malicious user detection
	TemporaryUserBlocking *TemporaryUserBlockingType `protobuf:"bytes,35,opt,name=temporary_user_blocking,json=temporaryUserBlocking,proto3" json:"temporary_user_blocking,omitempty"` // Deprecated: Do not use.
	// Malicious User Mitigation
	//
	// x-displayName: "Malicious User Mitigation"
	// Settings that specify the actions to be taken when malicious users are determined to be at different threat levels.
	// User's activity is monitored and continuously analyzed for malicious behavior. From this analysis, a threat level is assigned to each user.
	// The settings defined in malicious user mitigation specify what mitigation actions to take for users determined to be at different threat levels.
	MaliciousUserMitigation []*schema.ObjectRefType `protobuf:"bytes,36,rep,name=malicious_user_mitigation,json=maliciousUserMitigation,proto3" json:"malicious_user_mitigation,omitempty"` // Deprecated: Do not use.
	// TLS Interception
	//
	// x-displayName: "TLS Interception"
	//
	// Specify TLS interception configuration for the virtual host
	TlsIntercept *schema.TlsInterceptionType `protobuf:"bytes,37,opt,name=tls_intercept,json=tlsIntercept,proto3" json:"tls_intercept,omitempty"`
	// Authentication Configuration
	//
	// x-displayName: "Authentication Details"
	// Enable or Disable Authentication
	//
	// Types that are valid to be assigned to AuthenticationChoice:
	//	*GlobalSpecType_NoAuthentication
	//	*GlobalSpecType_Authentication
	AuthenticationChoice isGlobalSpecType_AuthenticationChoice `protobuf_oneof:"authentication_choice"`
	// Idle timeout
	//
	// x-displayName: "Idle timeout (in milliseconds)"
	// x-example: "2000"
	// Idle timeout is the amount of time that the loadbalancer will allow a stream to exist with
	// no upstream or downstream activity.
	//
	// Idle timeout and Proxy Type:
	//
	// HTTP_PROXY, HTTPS_PROXY:
	// Idle timer is started when the first byte is received on the connection.
	// Each time an encode/decode event for headers or data is processed for the stream,
	// the timer will be reset.
	// If the timeout fires, the stream is terminated with a 504 (Gateway Timeout) error code if
	// no upstream response header has been received, otherwise a stream reset occurs.
	// The default idle timeout is 30 seconds
	//
	// TCP PROXY, TCP_PROXY_WITH_SNI, SMA_PROXY:
	// The idle timeout is defined as the period in which there are no bytes sent or received on
	// either the upstream or downstream connection.
	// The default idle timeout is 1 hour.
	//
	// UDP PROXY:
	// The idle timeout for sessions. Idle timeout is defined as the period in which there are no
	// datagrams sent or received on the session.
	// The default if not specified is 1 minute.
	IdleTimeout uint32 `protobuf:"varint,32,opt,name=idle_timeout,json=idleTimeout,proto3" json:"idle_timeout,omitempty"`
	// Disable DNS Resolve
	//
	// x-displayName: "Disable DNS resolution"
	// x-example: "false"
	//
	// Disable DNS resolution for domains specified in the virtual host
	//
	// When the  virtual host is configured as Dynamive Resolve Proxy (DRP), disable DNS resolution
	// for domains configured.  This configuration is suitable for HTTP CONNECT proxy.
	DisableDnsResolve bool `protobuf:"varint,34,opt,name=disable_dns_resolve,json=disableDnsResolve,proto3" json:"disable_dns_resolve,omitempty"`
	// Server Header configuration
	//
	// x-displayName: "Server Header value to be used in response"
	// Specify Server Header value to be used in responses
	//
	// Types that are valid to be assigned to ServerHeaderChoice:
	//	*GlobalSpecType_DefaultHeader
	//	*GlobalSpecType_ServerName
	//	*GlobalSpecType_AppendServerName
	//	*GlobalSpecType_PassThrough
	ServerHeaderChoice isGlobalSpecType_ServerHeaderChoice `protobuf_oneof:"server_header_choice"`
	// Normalize Path
	//
	// x-displayName: "Path normalize"
	//
	// Should paths be normalized before any processing of requests.
	//
	// In addition to path normalization according to RFC 3986, adjacent slashes in the path
	// will be merged into one when this flag is enabled.
	//
	// It should be noted that normalized path is sent to the origin server.
	//
	// For HTTP loadbalancer, this configuration is ignored and path normalization is always enabled
	//
	// See Normalization and Comparison <https://tools.ietf.org/html/rfc3986#section-6> for details of normalization.
	// Note that VER does not perform case normalization <https://tools.ietf.org/html/rfc3986#section-6.2.2.1>
	//
	// Types that are valid to be assigned to PathNormalizeChoice:
	//	*GlobalSpecType_EnablePathNormalize
	//	*GlobalSpecType_DisablePathNormalize
	PathNormalizeChoice isGlobalSpecType_PathNormalizeChoice `protobuf_oneof:"path_normalize_choice"`
	// Strict check of SNI and Host header
	//
	// x-displayName: "Strict SNI and Host header check"
	//
	// F5XC allows request only if Server Name Indication(SNI) and Host header match.
	// The domains for which this check needs to be bypassed can be configured here.
	//
	// Types that are valid to be assigned to StrictSniHostHeaderCheckChoice:
	//	*GlobalSpecType_EnableStrictSniHostHeaderCheck
	//	*GlobalSpecType_AdditionalDomains
	StrictSniHostHeaderCheckChoice isGlobalSpecType_StrictSniHostHeaderCheckChoice `protobuf_oneof:"strict_sni_host_header_check_choice"`
	// CDN Parameters
	//
	// x-displayName: "CDN Parameters"
	// Configure CDN parameters
	CdnService *CdnServiceType `protobuf:"bytes,54,opt,name=cdn_service,json=cdnService,proto3" json:"cdn_service,omitempty"`
	// Trusted Client IP Headers
	//
	// x-displayName: "Trusted Client IP Headers"
	// x-required
	// The system uses the real client IP address that initiated the connection to the platform as source IP, instead of the proxy’s IP address, when this feature is enabled.
	//
	// Types that are valid to be assigned to TrustClientIpHeadersChoice:
	//	*GlobalSpecType_DisableTrustClientIpHeaders
	//	*GlobalSpecType_EnableTrustClientIpHeaders
	TrustClientIpHeadersChoice isGlobalSpecType_TrustClientIpHeadersChoice `protobuf_oneof:"trust_client_ip_headers_choice"`
	// Default Load Balancer
	//
	// x-displayName: "Default Load Balancer"
	//
	// Designate the Load balancer as default for clients that don't present
	// the SNI header in TLS handshake.
	//
	// Types that are valid to be assigned to DefaultLbChoice:
	//	*GlobalSpecType_NonDefaultLoadbalancer
	//	*GlobalSpecType_DefaultLoadbalancer
	DefaultLbChoice isGlobalSpecType_DefaultLbChoice `protobuf_oneof:"default_lb_choice"`
	// Header transformation
	//
	// x-displayName: "Header Transformation Configuration"
	// Header transformation options for response headers to the client
	HeaderTransformationType *schema.HeaderTransformationType `protobuf:"bytes,79,opt,name=header_transformation_type,json=headerTransformationType,proto3" json:"header_transformation_type,omitempty"`
	// Cookie to modify from response
	//
	// x-displayName: "Modify Set-Cookie Response Header"
	// List of cookies to be modified from the HTTP response being sent towards downstream.
	CookiesToModify []*schema.CookieManipulationOptionType `protobuf:"bytes,81,rep,name=cookies_to_modify,json=cookiesToModify,proto3" json:"cookies_to_modify,omitempty"`
	// Connection Idle Timeout
	//
	// x-displayName: "Connection Idle Timeout"
	// x-example: "60000"
	// The idle timeout for downstream connections. The idle timeout is defined as the
	// period in which there are no active requests. When the idle timeout is reached the connection
	// will be closed. Note that request based timeouts mean that HTTP/2 PINGs will not keep the connection alive.
	// This is specified in milliseconds. The default value is 2 minutes.
	ConnectionIdleTimeout uint32 `protobuf:"varint,82,opt,name=connection_idle_timeout,json=connectionIdleTimeout,proto3" json:"connection_idle_timeout,omitempty"`
	// http_protocol_options
	//
	// x-displayName: "HTTP Protocol Configuration"
	// HTTP protocol configuration options for downstream connections.
	HttpProtocolOptions *HttpProtocolOptions `protobuf:"bytes,89,opt,name=http_protocol_options,json=httpProtocolOptions,proto3" json:"http_protocol_options,omitempty"`
	// L7 DDoS Auto Mitigation Action
	//
	// x-displayName: "Select Type of L7 DDoS Auto Mitigation Action"
	// Selection of different types of L7 DDoS Auto Mitigation Action at Virtual Host
	//
	// Types that are valid to be assigned to DdosAutoMitigationAction:
	//	*GlobalSpecType_Block
	//	*GlobalSpecType_DdosJsChallenge
	//	*GlobalSpecType_L7DdosActionDefault
	DdosAutoMitigationAction isGlobalSpecType_DdosAutoMitigationAction `protobuf_oneof:"ddos_auto_mitigation_action"`
	// DNS F5XC Managed
	//
	// x-displayName: "DNS F5XC Managed"
	// Is DNS for the specified domain managed by volterra. If this field is set, DNS record will be automatically added to the DNS domain.
	DnsVolterraManaged bool `protobuf:"varint,1000,opt,name=dns_volterra_managed,json=dnsVolterraManaged,proto3" json:"dns_volterra_managed,omitempty"`
	// DNS domain refs
	//
	// x-displayName: "DNS Domains"
	// Internal reference to dns_domain object
	DnsDomains []*schema.ObjectRefType `protobuf:"bytes,1001,rep,name=dns_domains,json=dnsDomains,proto3" json:"dns_domains,omitempty"`
	// Auto Certificates
	//
	// x-displayName: "Auto Certificates"
	// Automatically generated certificates. If this field is set, the user cannot specifi the TLS certificates
	AutoCert bool `protobuf:"varint,1002,opt,name=auto_cert,json=autoCert,proto3" json:"auto_cert,omitempty"`
	// Virtual Host state
	//
	// x-displayName: "Virtual Host State"
	// State of the virtual host
	State VirtualHostState `protobuf:"varint,1003,opt,name=state,proto3,enum=ves.io.schema.virtual_host.VirtualHostState" json:"state,omitempty"`
	// host name
	//
	// x-displayName: "Host Name"
	// x-example: "ves-io-cf8684b9-a18f-4843-a24f-1f9ee8ea2776.ac.vh.ves.io"
	// Internally generated host name to be used for the virtual host
	HostName string `protobuf:"bytes,1004,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	// DNS information
	//
	// x-displayName: "DNS Information"
	// DNS information for this virtual host
	DnsInfo []*virtual_host_dns_info.DnsInfo `protobuf:"bytes,1005,rep,name=dns_info,json=dnsInfo,proto3" json:"dns_info,omitempty"`
	// Auto Cert State
	//
	// x-displayName: "Auto Cert State"
	// State of auto certificate generation.
	AutoCertState CertificationState `protobuf:"varint,1006,opt,name=auto_cert_state,json=autoCertState,proto3,enum=ves.io.schema.virtual_host.CertificationState" json:"auto_cert_state,omitempty"` // Deprecated: Do not use.
	// Auto Cert Information
	//
	// x-displayName: "Auto Cert Information"
	// Auto certificate related information
	AutoCertInfo *AutoCertInfoType `protobuf:"bytes,1010,opt,name=auto_cert_info,json=autoCertInfo,proto3" json:"auto_cert_info,omitempty"`
	// Auto Cert Error Message
	//
	// x-displayName: "Auto Cert Error Message"
	// Last encountered error message during certificate minting process.
	AutoCertErrorMsg string `protobuf:"bytes,1026,opt,name=auto_cert_error_msg,json=autoCertErrorMsg,proto3" json:"auto_cert_error_msg,omitempty"`
	// User Domains
	//
	// x-displayName: "User Provided Domains"
	// User Provided domains. Used internally.
	UserDomains []string `protobuf:"bytes,1011,rep,name=user_domains,json=userDomains,proto3" json:"user_domains,omitempty"`
	// Service Policy Sets
	//
	// x-displayName: "Service Policy Sets"
	// Per VH service policy sets, created by system via policies in the http load balancer and http connect view.
	ServicePolicySets []*schema.ObjectRefType `protobuf:"bytes,1012,rep,name=service_policy_sets,json=servicePolicySets,proto3" json:"service_policy_sets,omitempty"`
	// loadbalancer_algorithm
	//
	// x-displayName: "LoadBalancer Algorithm"
	// When a connection to a endpoint in an upstream cluster is required, the loadbalancer uses
	// loadbalancer_algorithm to determine which host is selected.
	LoadbalancerAlgorithm cluster.LoadbalancerAlgorithm `protobuf:"varint,1013,opt,name=loadbalancer_algorithm,json=loadbalancerAlgorithm,proto3,enum=ves.io.schema.cluster.LoadbalancerAlgorithm" json:"loadbalancer_algorithm,omitempty"`
	// F5XC Certificates
	//
	// x-displayName: "F5XC Certificates"
	// F5XC managed certificates. If this field is set, the user cannot specifi the TLS certificates
	VolterraCert bool `protobuf:"varint,1014,opt,name=volterra_cert,json=volterraCert,proto3" json:"volterra_cert,omitempty"`
	// Enable the Shape Bot Defense functionality for VirtualHost
	//
	// x-displayName: "Shape Bot Defense Config"
	// Shape Bot Defense configuration for the virtual host.
	//
	// Types that are valid to be assigned to BotDefenseChoice:
	//	*GlobalSpecType_DisableBotDefense
	//	*GlobalSpecType_BotDefense
	BotDefenseChoice isGlobalSpecType_BotDefenseChoice `protobuf_oneof:"bot_defense_choice"`
	// IP Reputation Check Flag
	//
	// x-displayName: "IP reputation Check Flag"
	// IP reputation check flag to hint if ip reputation needs to be queried
	CheckIpReputation bool `protobuf:"varint,1018,opt,name=check_ip_reputation,json=checkIpReputation,proto3" json:"check_ip_reputation,omitempty"`
	// Fast ACL
	//
	// x-displayName: "Fast ACL"
	// Fast ACL applied on this vhost for blocking sources on network level
	FastAcl []*schema.ObjectRefType `protobuf:"bytes,1019,rep,name=fast_acl,json=fastAcl,proto3" json:"fast_acl,omitempty"`
	// L7 ACL
	//
	// x-displayName: "L7 ACL"
	// L7 ACL applied on this vhost for blocking requests on application level
	L7Acl []*schema.ObjectRefType `protobuf:"bytes,1020,rep,name=l7_acl,json=l7Acl,proto3" json:"l7_acl,omitempty"`
	// DNS Zone refs
	//
	// x-displayName: "DNS Zone"
	// Internal reference to dns_zone object
	DnsZones []*schema.ObjectRefType `protobuf:"bytes,1021,rep,name=dns_zones,json=dnsZones,proto3" json:"dns_zones,omitempty"`
	// csrf_policy
	//
	// x-displayName: "CSRF Policy"
	// Cross-Site Request Forgery configuration.
	//
	// CSRF is a mechanism that checks if request received at the server is from legitimate user.
	CsrfPolicy *schema.CsrfPolicy `protobuf:"bytes,80,opt,name=csrf_policy,json=csrfPolicy,proto3" json:"csrf_policy,omitempty"`
	// Advanced DNS Proxy Configuration
	//
	// x-displayName: "Advanced DNS Proxy Configuration"
	// Advanced DNS Proxy Configurations like DDoS, Cache are mapped to DNSProxyConfiguration for internal use
	DnsProxyConfiguration *DNSProxyConfiguration `protobuf:"bytes,1200,opt,name=dns_proxy_configuration,json=dnsProxyConfiguration,proto3" json:"dns_proxy_configuration,omitempty"`
	// DNS Zone state
	//
	// x-displayName: "DNS Zone state"
	//
	// DNS Zone state
	//
	// Types that are valid to be assigned to DnsZoneStateChoice:
	//	*GlobalSpecType_NotReady
	//	*GlobalSpecType_Ready
	DnsZoneStateChoice isGlobalSpecType_DnsZoneStateChoice `protobuf_oneof:"dns_zone_state_choice"`
	// Custom Cert Expiry Timestamp
	//
	// x-displayName: "Custom Cert Expiry Timestamp"
	// Custom certificate expiry timestamp
	CustomCertExpiry *types.Timestamp `protobuf:"bytes,1025,opt,name=custom_cert_expiry,json=customCertExpiry,proto3" json:"custom_cert_expiry,omitempty"`
	// Slow DDOS Mitigation
	//
	// x-displayName: "Slow DDOS Mitigation"
	// A Low and Slow DDoS attack, also known as a slow-rate attack, involves what appears to be
	// legitimate traffic at a very slow rate. This type of state exhaustion DDoS attack targets
	// application and server resources and is difficult to distinguish from normal traffic.
	// This configuration helps to mitigate such type of attacks.
	SlowDdosMitigation *SlowDDoSMitigation `protobuf:"bytes,83,opt,name=slow_ddos_mitigation,json=slowDdosMitigation,proto3" json:"slow_ddos_mitigation,omitempty"`
	// OpenAPI Specification
	//
	// x-displayName: "OpenAPI Specification"
	// OpenAPI specification settings
	ApiSpec *ApiSpec `protobuf:"bytes,84,opt,name=api_spec,json=apiSpec,proto3" json:"api_spec,omitempty"`
	// Domain-to-Certificate map
	//
	// x-displayName: "Domain-to-Certificates by Algorithm"
	// x-example: "N/A"
	// a map-of-Virtual-Host-domain-name to Domain-Certificates
	// (only relevant when tls_certificates_choice oneof is CertificateParamsType,
	// which contains repeated Certificate refs)
	DomainCertMap map[string]*DomainCertificates `protobuf:"bytes,88,rep,name=domain_cert_map,json=domainCertMap,proto3" json:"domain_cert_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Http Redirect Options
	//
	// x-displayName: "HttpRedirectOptions"
	// HTTP traffic redirection options to HTTPS
	HttpRedirectOptions *HttpRedirectOptions `protobuf:"bytes,1027,opt,name=http_redirect_options,json=httpRedirectOptions,proto3" json:"http_redirect_options,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_df61af5ea37a6592, []int{25}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

type isGlobalSpecType_TlsCertificatesChoice interface {
	isGlobalSpecType_TlsCertificatesChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_ChallengeType interface {
	isGlobalSpecType_ChallengeType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_AuthenticationChoice interface {
	isGlobalSpecType_AuthenticationChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_ServerHeaderChoice interface {
	isGlobalSpecType_ServerHeaderChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_PathNormalizeChoice interface {
	isGlobalSpecType_PathNormalizeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_StrictSniHostHeaderCheckChoice interface {
	isGlobalSpecType_StrictSniHostHeaderCheckChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_TrustClientIpHeadersChoice interface {
	isGlobalSpecType_TrustClientIpHeadersChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_DefaultLbChoice interface {
	isGlobalSpecType_DefaultLbChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_DdosAutoMitigationAction interface {
	isGlobalSpecType_DdosAutoMitigationAction()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_BotDefenseChoice interface {
	isGlobalSpecType_BotDefenseChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_DnsZoneStateChoice interface {
	isGlobalSpecType_DnsZoneStateChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_TlsParameters struct {
	TlsParameters *schema.DownstreamTlsParamsType `protobuf:"bytes,9,opt,name=tls_parameters,json=tlsParameters,proto3,oneof" json:"tls_parameters,omitempty"`
}
type GlobalSpecType_TlsCertParams struct {
	TlsCertParams *schema.CertificateParamsType `protobuf:"bytes,86,opt,name=tls_cert_params,json=tlsCertParams,proto3,oneof" json:"tls_cert_params,omitempty"`
}
type GlobalSpecType_NoChallenge struct {
	NoChallenge *schema.Empty `protobuf:"bytes,31,opt,name=no_challenge,json=noChallenge,proto3,oneof" json:"no_challenge,omitempty"`
}
type GlobalSpecType_JsChallenge struct {
	JsChallenge *JavascriptChallengeType `protobuf:"bytes,24,opt,name=js_challenge,json=jsChallenge,proto3,oneof" json:"js_challenge,omitempty"`
}
type GlobalSpecType_CaptchaChallenge struct {
	CaptchaChallenge *CaptchaChallengeType `protobuf:"bytes,29,opt,name=captcha_challenge,json=captchaChallenge,proto3,oneof" json:"captcha_challenge,omitempty"`
}
type GlobalSpecType_PolicyBasedChallenge struct {
	PolicyBasedChallenge *PolicyBasedChallenge `protobuf:"bytes,41,opt,name=policy_based_challenge,json=policyBasedChallenge,proto3,oneof" json:"policy_based_challenge,omitempty"`
}
type GlobalSpecType_NoAuthentication struct {
	NoAuthentication *schema.Empty `protobuf:"bytes,39,opt,name=no_authentication,json=noAuthentication,proto3,oneof" json:"no_authentication,omitempty"`
}
type GlobalSpecType_Authentication struct {
	Authentication *AuthenticationDetails `protobuf:"bytes,40,opt,name=authentication,proto3,oneof" json:"authentication,omitempty"`
}
type GlobalSpecType_DefaultHeader struct {
	DefaultHeader *schema.Empty `protobuf:"bytes,43,opt,name=default_header,json=defaultHeader,proto3,oneof" json:"default_header,omitempty"`
}
type GlobalSpecType_ServerName struct {
	ServerName string `protobuf:"bytes,44,opt,name=server_name,json=serverName,proto3,oneof" json:"server_name,omitempty"`
}
type GlobalSpecType_AppendServerName struct {
	AppendServerName string `protobuf:"bytes,45,opt,name=append_server_name,json=appendServerName,proto3,oneof" json:"append_server_name,omitempty"`
}
type GlobalSpecType_PassThrough struct {
	PassThrough *schema.Empty `protobuf:"bytes,46,opt,name=pass_through,json=passThrough,proto3,oneof" json:"pass_through,omitempty"`
}
type GlobalSpecType_EnablePathNormalize struct {
	EnablePathNormalize *schema.Empty `protobuf:"bytes,48,opt,name=enable_path_normalize,json=enablePathNormalize,proto3,oneof" json:"enable_path_normalize,omitempty"`
}
type GlobalSpecType_DisablePathNormalize struct {
	DisablePathNormalize *schema.Empty `protobuf:"bytes,49,opt,name=disable_path_normalize,json=disablePathNormalize,proto3,oneof" json:"disable_path_normalize,omitempty"`
}
type GlobalSpecType_EnableStrictSniHostHeaderCheck struct {
	EnableStrictSniHostHeaderCheck *schema.Empty `protobuf:"bytes,51,opt,name=enable_strict_sni_host_header_check,json=enableStrictSniHostHeaderCheck,proto3,oneof" json:"enable_strict_sni_host_header_check,omitempty"`
}
type GlobalSpecType_AdditionalDomains struct {
	AdditionalDomains *schema.DomainNameList `protobuf:"bytes,53,opt,name=additional_domains,json=additionalDomains,proto3,oneof" json:"additional_domains,omitempty"`
}
type GlobalSpecType_DisableTrustClientIpHeaders struct {
	DisableTrustClientIpHeaders *schema.Empty `protobuf:"bytes,74,opt,name=disable_trust_client_ip_headers,json=disableTrustClientIpHeaders,proto3,oneof" json:"disable_trust_client_ip_headers,omitempty"`
}
type GlobalSpecType_EnableTrustClientIpHeaders struct {
	EnableTrustClientIpHeaders *ClientIPHeaders `protobuf:"bytes,75,opt,name=enable_trust_client_ip_headers,json=enableTrustClientIpHeaders,proto3,oneof" json:"enable_trust_client_ip_headers,omitempty"`
}
type GlobalSpecType_NonDefaultLoadbalancer struct {
	NonDefaultLoadbalancer *schema.Empty `protobuf:"bytes,77,opt,name=non_default_loadbalancer,json=nonDefaultLoadbalancer,proto3,oneof" json:"non_default_loadbalancer,omitempty"`
}
type GlobalSpecType_DefaultLoadbalancer struct {
	DefaultLoadbalancer *schema.Empty `protobuf:"bytes,78,opt,name=default_loadbalancer,json=defaultLoadbalancer,proto3,oneof" json:"default_loadbalancer,omitempty"`
}
type GlobalSpecType_Block struct {
	Block *schema.Empty `protobuf:"bytes,91,opt,name=block,proto3,oneof" json:"block,omitempty"`
}
type GlobalSpecType_DdosJsChallenge struct {
	DdosJsChallenge *JavascriptChallengeType `protobuf:"bytes,92,opt,name=ddos_js_challenge,json=ddosJsChallenge,proto3,oneof" json:"ddos_js_challenge,omitempty"`
}
type GlobalSpecType_L7DdosActionDefault struct {
	L7DdosActionDefault *schema.Empty `protobuf:"bytes,93,opt,name=l7_ddos_action_default,json=l7DdosActionDefault,proto3,oneof" json:"l7_ddos_action_default,omitempty"`
}
type GlobalSpecType_DisableBotDefense struct {
	DisableBotDefense *schema.Empty `protobuf:"bytes,1016,opt,name=disable_bot_defense,json=disableBotDefense,proto3,oneof" json:"disable_bot_defense,omitempty"`
}
type GlobalSpecType_BotDefense struct {
	BotDefense *ShapeBotDefenseConfigType `protobuf:"bytes,1017,opt,name=bot_defense,json=botDefense,proto3,oneof" json:"bot_defense,omitempty"`
}
type GlobalSpecType_NotReady struct {
	NotReady *schema.Empty `protobuf:"bytes,1023,opt,name=not_ready,json=notReady,proto3,oneof" json:"not_ready,omitempty"`
}
type GlobalSpecType_Ready struct {
	Ready *schema.Empty `protobuf:"bytes,1024,opt,name=ready,proto3,oneof" json:"ready,omitempty"`
}

func (*GlobalSpecType_TlsParameters) isGlobalSpecType_TlsCertificatesChoice()      {}
func (*GlobalSpecType_TlsCertParams) isGlobalSpecType_TlsCertificatesChoice()      {}
func (*GlobalSpecType_NoChallenge) isGlobalSpecType_ChallengeType()                {}
func (*GlobalSpecType_JsChallenge) isGlobalSpecType_ChallengeType()                {}
func (*GlobalSpecType_CaptchaChallenge) isGlobalSpecType_ChallengeType()           {}
func (*GlobalSpecType_PolicyBasedChallenge) isGlobalSpecType_ChallengeType()       {}
func (*GlobalSpecType_NoAuthentication) isGlobalSpecType_AuthenticationChoice()    {}
func (*GlobalSpecType_Authentication) isGlobalSpecType_AuthenticationChoice()      {}
func (*GlobalSpecType_DefaultHeader) isGlobalSpecType_ServerHeaderChoice()         {}
func (*GlobalSpecType_ServerName) isGlobalSpecType_ServerHeaderChoice()            {}
func (*GlobalSpecType_AppendServerName) isGlobalSpecType_ServerHeaderChoice()      {}
func (*GlobalSpecType_PassThrough) isGlobalSpecType_ServerHeaderChoice()           {}
func (*GlobalSpecType_EnablePathNormalize) isGlobalSpecType_PathNormalizeChoice()  {}
func (*GlobalSpecType_DisablePathNormalize) isGlobalSpecType_PathNormalizeChoice() {}
func (*GlobalSpecType_EnableStrictSniHostHeaderCheck) isGlobalSpecType_StrictSniHostHeaderCheckChoice() {
}
func (*GlobalSpecType_AdditionalDomains) isGlobalSpecType_StrictSniHostHeaderCheckChoice()       {}
func (*GlobalSpecType_DisableTrustClientIpHeaders) isGlobalSpecType_TrustClientIpHeadersChoice() {}
func (*GlobalSpecType_EnableTrustClientIpHeaders) isGlobalSpecType_TrustClientIpHeadersChoice()  {}
func (*GlobalSpecType_NonDefaultLoadbalancer) isGlobalSpecType_DefaultLbChoice()                 {}
func (*GlobalSpecType_DefaultLoadbalancer) isGlobalSpecType_DefaultLbChoice()                    {}
func (*GlobalSpecType_Block) isGlobalSpecType_DdosAutoMitigationAction()                         {}
func (*GlobalSpecType_DdosJsChallenge) isGlobalSpecType_DdosAutoMitigationAction()               {}
func (*GlobalSpecType_L7DdosActionDefault) isGlobalSpecType_DdosAutoMitigationAction()           {}
func (*GlobalSpecType_DisableBotDefense) isGlobalSpecType_BotDefenseChoice()                     {}
func (*GlobalSpecType_BotDefense) isGlobalSpecType_BotDefenseChoice()                            {}
func (*GlobalSpecType_NotReady) isGlobalSpecType_DnsZoneStateChoice()                            {}
func (*GlobalSpecType_Ready) isGlobalSpecType_DnsZoneStateChoice()                               {}

func (m *GlobalSpecType) GetTlsCertificatesChoice() isGlobalSpecType_TlsCertificatesChoice {
	if m != nil {
		return m.TlsCertificatesChoice
	}
	return nil
}
func (m *GlobalSpecType) GetChallengeType() isGlobalSpecType_ChallengeType {
	if m != nil {
		return m.ChallengeType
	}
	return nil
}
func (m *GlobalSpecType) GetAuthenticationChoice() isGlobalSpecType_AuthenticationChoice {
	if m != nil {
		return m.AuthenticationChoice
	}
	return nil
}
func (m *GlobalSpecType) GetServerHeaderChoice() isGlobalSpecType_ServerHeaderChoice {
	if m != nil {
		return m.ServerHeaderChoice
	}
	return nil
}
func (m *GlobalSpecType) GetPathNormalizeChoice() isGlobalSpecType_PathNormalizeChoice {
	if m != nil {
		return m.PathNormalizeChoice
	}
	return nil
}
func (m *GlobalSpecType) GetStrictSniHostHeaderCheckChoice() isGlobalSpecType_StrictSniHostHeaderCheckChoice {
	if m != nil {
		return m.StrictSniHostHeaderCheckChoice
	}
	return nil
}
func (m *GlobalSpecType) GetTrustClientIpHeadersChoice() isGlobalSpecType_TrustClientIpHeadersChoice {
	if m != nil {
		return m.TrustClientIpHeadersChoice
	}
	return nil
}
func (m *GlobalSpecType) GetDefaultLbChoice() isGlobalSpecType_DefaultLbChoice {
	if m != nil {
		return m.DefaultLbChoice
	}
	return nil
}
func (m *GlobalSpecType) GetDdosAutoMitigationAction() isGlobalSpecType_DdosAutoMitigationAction {
	if m != nil {
		return m.DdosAutoMitigationAction
	}
	return nil
}
func (m *GlobalSpecType) GetBotDefenseChoice() isGlobalSpecType_BotDefenseChoice {
	if m != nil {
		return m.BotDefenseChoice
	}
	return nil
}
func (m *GlobalSpecType) GetDnsZoneStateChoice() isGlobalSpecType_DnsZoneStateChoice {
	if m != nil {
		return m.DnsZoneStateChoice
	}
	return nil
}

func (m *GlobalSpecType) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *GlobalSpecType) GetRoutes() []*schema.ObjectRefType {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *GlobalSpecType) GetJavascriptInfo() *JavaScriptConfigType {
	if m != nil {
		return m.JavascriptInfo
	}
	return nil
}

func (m *GlobalSpecType) GetAdvertisePolicies() []*schema.ObjectRefType {
	if m != nil {
		return m.AdvertisePolicies
	}
	return nil
}

func (m *GlobalSpecType) GetRequestHeadersToAdd() []*schema.HeaderManipulationOptionType {
	if m != nil {
		return m.RequestHeadersToAdd
	}
	return nil
}

func (m *GlobalSpecType) GetResponseHeadersToAdd() []*schema.HeaderManipulationOptionType {
	if m != nil {
		return m.ResponseHeadersToAdd
	}
	return nil
}

func (m *GlobalSpecType) GetRequestHeadersToRemove() []string {
	if m != nil {
		return m.RequestHeadersToRemove
	}
	return nil
}

func (m *GlobalSpecType) GetResponseHeadersToRemove() []string {
	if m != nil {
		return m.ResponseHeadersToRemove
	}
	return nil
}

func (m *GlobalSpecType) GetTlsParameters() *schema.DownstreamTlsParamsType {
	if x, ok := m.GetTlsCertificatesChoice().(*GlobalSpecType_TlsParameters); ok {
		return x.TlsParameters
	}
	return nil
}

func (m *GlobalSpecType) GetTlsCertParams() *schema.CertificateParamsType {
	if x, ok := m.GetTlsCertificatesChoice().(*GlobalSpecType_TlsCertParams); ok {
		return x.TlsCertParams
	}
	return nil
}

func (m *GlobalSpecType) GetType() VirtualHostType {
	if m != nil {
		return m.Type
	}
	return VIRTUAL_SERVICE
}

func (m *GlobalSpecType) GetBufferPolicy() *schema.BufferConfigType {
	if m != nil {
		return m.BufferPolicy
	}
	return nil
}

func (m *GlobalSpecType) GetCorsPolicy() *schema.CorsPolicy {
	if m != nil {
		return m.CorsPolicy
	}
	return nil
}

func (m *GlobalSpecType) GetProxy() ProxyType {
	if m != nil {
		return m.Proxy
	}
	return HTTP_PROXY
}

func (m *GlobalSpecType) GetJwt() []*schema.ObjectRefType {
	if m != nil {
		return m.Jwt
	}
	return nil
}

func (m *GlobalSpecType) GetWafType() *schema.WafType {
	if m != nil {
		return m.WafType
	}
	return nil
}

func (m *GlobalSpecType) GetDynamicReverseProxy() *DynamicReverseProxyType {
	if m != nil {
		return m.DynamicReverseProxy
	}
	return nil
}

func (m *GlobalSpecType) GetAddLocation() bool {
	if m != nil {
		return m.AddLocation
	}
	return false
}

func (m *GlobalSpecType) GetCompressionParams() *CompressionType {
	if m != nil {
		return m.CompressionParams
	}
	return nil
}

func (m *GlobalSpecType) GetCustomErrors() map[uint32]string {
	if m != nil {
		return m.CustomErrors
	}
	return nil
}

func (m *GlobalSpecType) GetDisableDefaultErrorPages() bool {
	if m != nil {
		return m.DisableDefaultErrorPages
	}
	return false
}

func (m *GlobalSpecType) GetMaxRequestHeaderSize() uint32 {
	if m != nil {
		return m.MaxRequestHeaderSize
	}
	return 0
}

func (m *GlobalSpecType) GetNoChallenge() *schema.Empty {
	if x, ok := m.GetChallengeType().(*GlobalSpecType_NoChallenge); ok {
		return x.NoChallenge
	}
	return nil
}

func (m *GlobalSpecType) GetJsChallenge() *JavascriptChallengeType {
	if x, ok := m.GetChallengeType().(*GlobalSpecType_JsChallenge); ok {
		return x.JsChallenge
	}
	return nil
}

func (m *GlobalSpecType) GetCaptchaChallenge() *CaptchaChallengeType {
	if x, ok := m.GetChallengeType().(*GlobalSpecType_CaptchaChallenge); ok {
		return x.CaptchaChallenge
	}
	return nil
}

func (m *GlobalSpecType) GetPolicyBasedChallenge() *PolicyBasedChallenge {
	if x, ok := m.GetChallengeType().(*GlobalSpecType_PolicyBasedChallenge); ok {
		return x.PolicyBasedChallenge
	}
	return nil
}

func (m *GlobalSpecType) GetUserIdentification() []*schema.ObjectRefType {
	if m != nil {
		return m.UserIdentification
	}
	return nil
}

func (m *GlobalSpecType) GetRateLimiter() []*schema.ObjectRefType {
	if m != nil {
		return m.RateLimiter
	}
	return nil
}

func (m *GlobalSpecType) GetRateLimiterAllowedPrefixes() []*schema.ObjectRefType {
	if m != nil {
		return m.RateLimiterAllowedPrefixes
	}
	return nil
}

func (m *GlobalSpecType) GetRetryPolicy() *schema.RetryPolicyType {
	if m != nil {
		return m.RetryPolicy
	}
	return nil
}

// Deprecated: Do not use.
func (m *GlobalSpecType) GetTemporaryUserBlocking() *TemporaryUserBlockingType {
	if m != nil {
		return m.TemporaryUserBlocking
	}
	return nil
}

// Deprecated: Do not use.
func (m *GlobalSpecType) GetMaliciousUserMitigation() []*schema.ObjectRefType {
	if m != nil {
		return m.MaliciousUserMitigation
	}
	return nil
}

func (m *GlobalSpecType) GetTlsIntercept() *schema.TlsInterceptionType {
	if m != nil {
		return m.TlsIntercept
	}
	return nil
}

func (m *GlobalSpecType) GetNoAuthentication() *schema.Empty {
	if x, ok := m.GetAuthenticationChoice().(*GlobalSpecType_NoAuthentication); ok {
		return x.NoAuthentication
	}
	return nil
}

func (m *GlobalSpecType) GetAuthentication() *AuthenticationDetails {
	if x, ok := m.GetAuthenticationChoice().(*GlobalSpecType_Authentication); ok {
		return x.Authentication
	}
	return nil
}

func (m *GlobalSpecType) GetIdleTimeout() uint32 {
	if m != nil {
		return m.IdleTimeout
	}
	return 0
}

func (m *GlobalSpecType) GetDisableDnsResolve() bool {
	if m != nil {
		return m.DisableDnsResolve
	}
	return false
}

func (m *GlobalSpecType) GetDefaultHeader() *schema.Empty {
	if x, ok := m.GetServerHeaderChoice().(*GlobalSpecType_DefaultHeader); ok {
		return x.DefaultHeader
	}
	return nil
}

func (m *GlobalSpecType) GetServerName() string {
	if x, ok := m.GetServerHeaderChoice().(*GlobalSpecType_ServerName); ok {
		return x.ServerName
	}
	return ""
}

func (m *GlobalSpecType) GetAppendServerName() string {
	if x, ok := m.GetServerHeaderChoice().(*GlobalSpecType_AppendServerName); ok {
		return x.AppendServerName
	}
	return ""
}

func (m *GlobalSpecType) GetPassThrough() *schema.Empty {
	if x, ok := m.GetServerHeaderChoice().(*GlobalSpecType_PassThrough); ok {
		return x.PassThrough
	}
	return nil
}

func (m *GlobalSpecType) GetEnablePathNormalize() *schema.Empty {
	if x, ok := m.GetPathNormalizeChoice().(*GlobalSpecType_EnablePathNormalize); ok {
		return x.EnablePathNormalize
	}
	return nil
}

func (m *GlobalSpecType) GetDisablePathNormalize() *schema.Empty {
	if x, ok := m.GetPathNormalizeChoice().(*GlobalSpecType_DisablePathNormalize); ok {
		return x.DisablePathNormalize
	}
	return nil
}

func (m *GlobalSpecType) GetEnableStrictSniHostHeaderCheck() *schema.Empty {
	if x, ok := m.GetStrictSniHostHeaderCheckChoice().(*GlobalSpecType_EnableStrictSniHostHeaderCheck); ok {
		return x.EnableStrictSniHostHeaderCheck
	}
	return nil
}

func (m *GlobalSpecType) GetAdditionalDomains() *schema.DomainNameList {
	if x, ok := m.GetStrictSniHostHeaderCheckChoice().(*GlobalSpecType_AdditionalDomains); ok {
		return x.AdditionalDomains
	}
	return nil
}

func (m *GlobalSpecType) GetCdnService() *CdnServiceType {
	if m != nil {
		return m.CdnService
	}
	return nil
}

func (m *GlobalSpecType) GetDisableTrustClientIpHeaders() *schema.Empty {
	if x, ok := m.GetTrustClientIpHeadersChoice().(*GlobalSpecType_DisableTrustClientIpHeaders); ok {
		return x.DisableTrustClientIpHeaders
	}
	return nil
}

func (m *GlobalSpecType) GetEnableTrustClientIpHeaders() *ClientIPHeaders {
	if x, ok := m.GetTrustClientIpHeadersChoice().(*GlobalSpecType_EnableTrustClientIpHeaders); ok {
		return x.EnableTrustClientIpHeaders
	}
	return nil
}

func (m *GlobalSpecType) GetNonDefaultLoadbalancer() *schema.Empty {
	if x, ok := m.GetDefaultLbChoice().(*GlobalSpecType_NonDefaultLoadbalancer); ok {
		return x.NonDefaultLoadbalancer
	}
	return nil
}

func (m *GlobalSpecType) GetDefaultLoadbalancer() *schema.Empty {
	if x, ok := m.GetDefaultLbChoice().(*GlobalSpecType_DefaultLoadbalancer); ok {
		return x.DefaultLoadbalancer
	}
	return nil
}

func (m *GlobalSpecType) GetHeaderTransformationType() *schema.HeaderTransformationType {
	if m != nil {
		return m.HeaderTransformationType
	}
	return nil
}

func (m *GlobalSpecType) GetCookiesToModify() []*schema.CookieManipulationOptionType {
	if m != nil {
		return m.CookiesToModify
	}
	return nil
}

func (m *GlobalSpecType) GetConnectionIdleTimeout() uint32 {
	if m != nil {
		return m.ConnectionIdleTimeout
	}
	return 0
}

func (m *GlobalSpecType) GetHttpProtocolOptions() *HttpProtocolOptions {
	if m != nil {
		return m.HttpProtocolOptions
	}
	return nil
}

func (m *GlobalSpecType) GetBlock() *schema.Empty {
	if x, ok := m.GetDdosAutoMitigationAction().(*GlobalSpecType_Block); ok {
		return x.Block
	}
	return nil
}

func (m *GlobalSpecType) GetDdosJsChallenge() *JavascriptChallengeType {
	if x, ok := m.GetDdosAutoMitigationAction().(*GlobalSpecType_DdosJsChallenge); ok {
		return x.DdosJsChallenge
	}
	return nil
}

func (m *GlobalSpecType) GetL7DdosActionDefault() *schema.Empty {
	if x, ok := m.GetDdosAutoMitigationAction().(*GlobalSpecType_L7DdosActionDefault); ok {
		return x.L7DdosActionDefault
	}
	return nil
}

func (m *GlobalSpecType) GetDnsVolterraManaged() bool {
	if m != nil {
		return m.DnsVolterraManaged
	}
	return false
}

func (m *GlobalSpecType) GetDnsDomains() []*schema.ObjectRefType {
	if m != nil {
		return m.DnsDomains
	}
	return nil
}

func (m *GlobalSpecType) GetAutoCert() bool {
	if m != nil {
		return m.AutoCert
	}
	return false
}

func (m *GlobalSpecType) GetState() VirtualHostState {
	if m != nil {
		return m.State
	}
	return VIRTUAL_HOST_READY
}

func (m *GlobalSpecType) GetHostName() string {
	if m != nil {
		return m.HostName
	}
	return ""
}

func (m *GlobalSpecType) GetDnsInfo() []*virtual_host_dns_info.DnsInfo {
	if m != nil {
		return m.DnsInfo
	}
	return nil
}

// Deprecated: Do not use.
func (m *GlobalSpecType) GetAutoCertState() CertificationState {
	if m != nil {
		return m.AutoCertState
	}
	return AutoCertDisabled
}

func (m *GlobalSpecType) GetAutoCertInfo() *AutoCertInfoType {
	if m != nil {
		return m.AutoCertInfo
	}
	return nil
}

func (m *GlobalSpecType) GetAutoCertErrorMsg() string {
	if m != nil {
		return m.AutoCertErrorMsg
	}
	return ""
}

func (m *GlobalSpecType) GetUserDomains() []string {
	if m != nil {
		return m.UserDomains
	}
	return nil
}

func (m *GlobalSpecType) GetServicePolicySets() []*schema.ObjectRefType {
	if m != nil {
		return m.ServicePolicySets
	}
	return nil
}

func (m *GlobalSpecType) GetLoadbalancerAlgorithm() cluster.LoadbalancerAlgorithm {
	if m != nil {
		return m.LoadbalancerAlgorithm
	}
	return cluster.ROUND_ROBIN
}

func (m *GlobalSpecType) GetVolterraCert() bool {
	if m != nil {
		return m.VolterraCert
	}
	return false
}

func (m *GlobalSpecType) GetDisableBotDefense() *schema.Empty {
	if x, ok := m.GetBotDefenseChoice().(*GlobalSpecType_DisableBotDefense); ok {
		return x.DisableBotDefense
	}
	return nil
}

func (m *GlobalSpecType) GetBotDefense() *ShapeBotDefenseConfigType {
	if x, ok := m.GetBotDefenseChoice().(*GlobalSpecType_BotDefense); ok {
		return x.BotDefense
	}
	return nil
}

func (m *GlobalSpecType) GetCheckIpReputation() bool {
	if m != nil {
		return m.CheckIpReputation
	}
	return false
}

func (m *GlobalSpecType) GetFastAcl() []*schema.ObjectRefType {
	if m != nil {
		return m.FastAcl
	}
	return nil
}

func (m *GlobalSpecType) GetL7Acl() []*schema.ObjectRefType {
	if m != nil {
		return m.L7Acl
	}
	return nil
}

func (m *GlobalSpecType) GetDnsZones() []*schema.ObjectRefType {
	if m != nil {
		return m.DnsZones
	}
	return nil
}

func (m *GlobalSpecType) GetCsrfPolicy() *schema.CsrfPolicy {
	if m != nil {
		return m.CsrfPolicy
	}
	return nil
}

func (m *GlobalSpecType) GetDnsProxyConfiguration() *DNSProxyConfiguration {
	if m != nil {
		return m.DnsProxyConfiguration
	}
	return nil
}

func (m *GlobalSpecType) GetNotReady() *schema.Empty {
	if x, ok := m.GetDnsZoneStateChoice().(*GlobalSpecType_NotReady); ok {
		return x.NotReady
	}
	return nil
}

func (m *GlobalSpecType) GetReady() *schema.Empty {
	if x, ok := m.GetDnsZoneStateChoice().(*GlobalSpecType_Ready); ok {
		return x.Ready
	}
	return nil
}

func (m *GlobalSpecType) GetCustomCertExpiry() *types.Timestamp {
	if m != nil {
		return m.CustomCertExpiry
	}
	return nil
}

func (m *GlobalSpecType) GetSlowDdosMitigation() *SlowDDoSMitigation {
	if m != nil {
		return m.SlowDdosMitigation
	}
	return nil
}

func (m *GlobalSpecType) GetApiSpec() *ApiSpec {
	if m != nil {
		return m.ApiSpec
	}
	return nil
}

func (m *GlobalSpecType) GetDomainCertMap() map[string]*DomainCertificates {
	if m != nil {
		return m.DomainCertMap
	}
	return nil
}

func (m *GlobalSpecType) GetHttpRedirectOptions() *HttpRedirectOptions {
	if m != nil {
		return m.HttpRedirectOptions
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GlobalSpecType_TlsParameters)(nil),
		(*GlobalSpecType_TlsCertParams)(nil),
		(*GlobalSpecType_NoChallenge)(nil),
		(*GlobalSpecType_JsChallenge)(nil),
		(*GlobalSpecType_CaptchaChallenge)(nil),
		(*GlobalSpecType_PolicyBasedChallenge)(nil),
		(*GlobalSpecType_NoAuthentication)(nil),
		(*GlobalSpecType_Authentication)(nil),
		(*GlobalSpecType_DefaultHeader)(nil),
		(*GlobalSpecType_ServerName)(nil),
		(*GlobalSpecType_AppendServerName)(nil),
		(*GlobalSpecType_PassThrough)(nil),
		(*GlobalSpecType_EnablePathNormalize)(nil),
		(*GlobalSpecType_DisablePathNormalize)(nil),
		(*GlobalSpecType_EnableStrictSniHostHeaderCheck)(nil),
		(*GlobalSpecType_AdditionalDomains)(nil),
		(*GlobalSpecType_DisableTrustClientIpHeaders)(nil),
		(*GlobalSpecType_EnableTrustClientIpHeaders)(nil),
		(*GlobalSpecType_NonDefaultLoadbalancer)(nil),
		(*GlobalSpecType_DefaultLoadbalancer)(nil),
		(*GlobalSpecType_Block)(nil),
		(*GlobalSpecType_DdosJsChallenge)(nil),
		(*GlobalSpecType_L7DdosActionDefault)(nil),
		(*GlobalSpecType_DisableBotDefense)(nil),
		(*GlobalSpecType_BotDefense)(nil),
		(*GlobalSpecType_NotReady)(nil),
		(*GlobalSpecType_Ready)(nil),
	}
}

// DNS Virtual Host Status Type
//
// x-displayName: "DNS Virtual Host Status"
// DNS related Virtual Host status
type DNSVHostStatusType struct {
	// Virtual Host state
	//
	// x-displayName: "Virtual Host State"
	// State of the virtual host
	State VirtualHostState `protobuf:"varint,1,opt,name=state,proto3,enum=ves.io.schema.virtual_host.VirtualHostState" json:"state,omitempty"`
	// Existing Certificate Status
	//
	// x-displayName: "Existing Certificate Status"
	// x-example: "Certificate Valid or Certificate Expired or Certificate Invalid"
	// Status of Existing Auto Certficate
	ExistingCertificateState string `protobuf:"bytes,5,opt,name=existing_certificate_state,json=existingCertificateState,proto3" json:"existing_certificate_state,omitempty"`
	// Certificate Renewal Status
	//
	// x-displayName: "Certificate Renewal Status"
	// State of auto certificate generation.
	RenewCertificateState CertificationState `protobuf:"varint,6,opt,name=renew_certificate_state,json=renewCertificateState,proto3,enum=ves.io.schema.virtual_host.CertificationState" json:"renew_certificate_state,omitempty"`
	// Error Description
	//
	// x-displayName: "Error Description"
	// x-example: "value"
	// Description of error during DNS configuration
	ErrorDescription string `protobuf:"bytes,3,opt,name=error_description,json=errorDescription,proto3" json:"error_description,omitempty"`
	// Suggested Action
	//
	// x-displayName: "Suggested Action"
	// x-example: "value"
	// Suggested action for customer on error
	SuggestedAction string `protobuf:"bytes,4,opt,name=suggested_action,json=suggestedAction,proto3" json:"suggested_action,omitempty"`
}

func (m *DNSVHostStatusType) Reset()      { *m = DNSVHostStatusType{} }
func (*DNSVHostStatusType) ProtoMessage() {}
func (*DNSVHostStatusType) Descriptor() ([]byte, []int) {
	return fileDescriptor_df61af5ea37a6592, []int{26}
}
func (m *DNSVHostStatusType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DNSVHostStatusType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DNSVHostStatusType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNSVHostStatusType.Merge(m, src)
}
func (m *DNSVHostStatusType) XXX_Size() int {
	return m.Size()
}
func (m *DNSVHostStatusType) XXX_DiscardUnknown() {
	xxx_messageInfo_DNSVHostStatusType.DiscardUnknown(m)
}

var xxx_messageInfo_DNSVHostStatusType proto.InternalMessageInfo

func (m *DNSVHostStatusType) GetState() VirtualHostState {
	if m != nil {
		return m.State
	}
	return VIRTUAL_HOST_READY
}

func (m *DNSVHostStatusType) GetExistingCertificateState() string {
	if m != nil {
		return m.ExistingCertificateState
	}
	return ""
}

func (m *DNSVHostStatusType) GetRenewCertificateState() CertificationState {
	if m != nil {
		return m.RenewCertificateState
	}
	return AutoCertDisabled
}

func (m *DNSVHostStatusType) GetErrorDescription() string {
	if m != nil {
		return m.ErrorDescription
	}
	return ""
}

func (m *DNSVHostStatusType) GetSuggestedAction() string {
	if m != nil {
		return m.SuggestedAction
	}
	return ""
}

// Create virtual host
//
// x-displayName: "Create Virtual Host"
// Creates virtual host in a given namespace.
type CreateSpecType struct {
	Domains                 []string                               `protobuf:"bytes,2,rep,name=domains,proto3" json:"domains,omitempty"`
	Routes                  []*schema.ObjectRefType                `protobuf:"bytes,3,rep,name=routes,proto3" json:"routes,omitempty"`
	AdvertisePolicies       []*schema.ObjectRefType                `protobuf:"bytes,5,rep,name=advertise_policies,json=advertisePolicies,proto3" json:"advertise_policies,omitempty"`
	RequestHeadersToAdd     []*schema.HeaderManipulationOptionType `protobuf:"bytes,6,rep,name=request_headers_to_add,json=requestHeadersToAdd,proto3" json:"request_headers_to_add,omitempty"`
	ResponseHeadersToAdd    []*schema.HeaderManipulationOptionType `protobuf:"bytes,7,rep,name=response_headers_to_add,json=responseHeadersToAdd,proto3" json:"response_headers_to_add,omitempty"`
	RequestHeadersToRemove  []string                               `protobuf:"bytes,17,rep,name=request_headers_to_remove,json=requestHeadersToRemove,proto3" json:"request_headers_to_remove,omitempty"`
	ResponseHeadersToRemove []string                               `protobuf:"bytes,8,rep,name=response_headers_to_remove,json=responseHeadersToRemove,proto3" json:"response_headers_to_remove,omitempty"`
	// Types that are valid to be assigned to TlsCertificatesChoice:
	//	*CreateSpecType_TlsParameters
	//	*CreateSpecType_TlsCertParams
	TlsCertificatesChoice    isCreateSpecType_TlsCertificatesChoice `protobuf_oneof:"tls_certificates_choice"`
	BufferPolicy             *schema.BufferConfigType               `protobuf:"bytes,12,opt,name=buffer_policy,json=bufferPolicy,proto3" json:"buffer_policy,omitempty"`
	CorsPolicy               *schema.CorsPolicy                     `protobuf:"bytes,13,opt,name=cors_policy,json=corsPolicy,proto3" json:"cors_policy,omitempty"`
	Proxy                    ProxyType                              `protobuf:"varint,15,opt,name=proxy,proto3,enum=ves.io.schema.virtual_host.ProxyType" json:"proxy,omitempty"`
	WafType                  *schema.WafType                        `protobuf:"bytes,18,opt,name=waf_type,json=wafType,proto3" json:"waf_type,omitempty"`
	DynamicReverseProxy      *DynamicReverseProxyType               `protobuf:"bytes,19,opt,name=dynamic_reverse_proxy,json=dynamicReverseProxy,proto3" json:"dynamic_reverse_proxy,omitempty"`
	AddLocation              bool                                   `protobuf:"varint,20,opt,name=add_location,json=addLocation,proto3" json:"add_location,omitempty"`
	CompressionParams        *CompressionType                       `protobuf:"bytes,21,opt,name=compression_params,json=compressionParams,proto3" json:"compression_params,omitempty"`
	CustomErrors             map[uint32]string                      `protobuf:"bytes,22,rep,name=custom_errors,json=customErrors,proto3" json:"custom_errors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DisableDefaultErrorPages bool                                   `protobuf:"varint,33,opt,name=disable_default_error_pages,json=disableDefaultErrorPages,proto3" json:"disable_default_error_pages,omitempty"`
	MaxRequestHeaderSize     uint32                                 `protobuf:"varint,23,opt,name=max_request_header_size,json=maxRequestHeaderSize,proto3" json:"max_request_header_size,omitempty"`
	// Types that are valid to be assigned to ChallengeType:
	//	*CreateSpecType_NoChallenge
	//	*CreateSpecType_JsChallenge
	//	*CreateSpecType_CaptchaChallenge
	ChallengeType              isCreateSpecType_ChallengeType `protobuf_oneof:"challenge_type"`
	UserIdentification         []*schema.ObjectRefType        `protobuf:"bytes,25,rep,name=user_identification,json=userIdentification,proto3" json:"user_identification,omitempty"`
	RateLimiter                []*schema.ObjectRefType        `protobuf:"bytes,26,rep,name=rate_limiter,json=rateLimiter,proto3" json:"rate_limiter,omitempty"`
	RateLimiterAllowedPrefixes []*schema.ObjectRefType        `protobuf:"bytes,27,rep,name=rate_limiter_allowed_prefixes,json=rateLimiterAllowedPrefixes,proto3" json:"rate_limiter_allowed_prefixes,omitempty"`
	RetryPolicy                *schema.RetryPolicyType        `protobuf:"bytes,28,opt,name=retry_policy,json=retryPolicy,proto3" json:"retry_policy,omitempty"`
	IdleTimeout                uint32                         `protobuf:"varint,32,opt,name=idle_timeout,json=idleTimeout,proto3" json:"idle_timeout,omitempty"`
	DisableDnsResolve          bool                           `protobuf:"varint,34,opt,name=disable_dns_resolve,json=disableDnsResolve,proto3" json:"disable_dns_resolve,omitempty"`
	TemporaryUserBlocking      *TemporaryUserBlockingType     `protobuf:"bytes,35,opt,name=temporary_user_blocking,json=temporaryUserBlocking,proto3" json:"temporary_user_blocking,omitempty"`
	// Types that are valid to be assigned to AuthenticationChoice:
	//	*CreateSpecType_NoAuthentication
	//	*CreateSpecType_Authentication
	AuthenticationChoice isCreateSpecType_AuthenticationChoice `protobuf_oneof:"authentication_choice"`
	// Types that are valid to be assigned to ServerHeaderChoice:
	//	*CreateSpecType_DefaultHeader
	//	*CreateSpecType_ServerName
	//	*CreateSpecType_AppendServerName
	//	*CreateSpecType_PassThrough
	ServerHeaderChoice isCreateSpecType_ServerHeaderChoice `protobuf_oneof:"server_header_choice"`
	// Types that are valid to be assigned to PathNormalizeChoice:
	//	*CreateSpecType_EnablePathNormalize
	//	*CreateSpecType_DisablePathNormalize
	PathNormalizeChoice isCreateSpecType_PathNormalizeChoice `protobuf_oneof:"path_normalize_choice"`
	// Types that are valid to be assigned to StrictSniHostHeaderCheckChoice:
	//	*CreateSpecType_EnableStrictSniHostHeaderCheck
	//	*CreateSpecType_AdditionalDomains
	StrictSniHostHeaderCheckChoice isCreateSpecType_StrictSniHostHeaderCheckChoice `protobuf_oneof:"strict_sni_host_header_check_choice"`
	// Types that are valid to be assigned to DefaultLbChoice:
	//	*CreateSpecType_NonDefaultLoadbalancer
	//	*CreateSpecType_DefaultLoadbalancer
	DefaultLbChoice          isCreateSpecType_DefaultLbChoice       `protobuf_oneof:"default_lb_choice"`
	HeaderTransformationType *schema.HeaderTransformationType       `protobuf:"bytes,79,opt,name=header_transformation_type,json=headerTransformationType,proto3" json:"header_transformation_type,omitempty"`
	CsrfPolicy               *schema.CsrfPolicy                     `protobuf:"bytes,80,opt,name=csrf_policy,json=csrfPolicy,proto3" json:"csrf_policy,omitempty"`
	CookiesToModify          []*schema.CookieManipulationOptionType `protobuf:"bytes,81,rep,name=cookies_to_modify,json=cookiesToModify,proto3" json:"cookies_to_modify,omitempty"`
	ConnectionIdleTimeout    uint32                                 `protobuf:"varint,82,opt,name=connection_idle_timeout,json=connectionIdleTimeout,proto3" json:"connection_idle_timeout,omitempty"`
	DnsProxyConfiguration    *DNSProxyConfiguration                 `protobuf:"bytes,1200,opt,name=dns_proxy_configuration,json=dnsProxyConfiguration,proto3" json:"dns_proxy_configuration,omitempty"`
	SlowDdosMitigation       *SlowDDoSMitigation                    `protobuf:"bytes,83,opt,name=slow_ddos_mitigation,json=slowDdosMitigation,proto3" json:"slow_ddos_mitigation,omitempty"`
	ApiSpec                  *ApiSpec                               `protobuf:"bytes,84,opt,name=api_spec,json=apiSpec,proto3" json:"api_spec,omitempty"`
	DomainCertMap            map[string]*DomainCertificates         `protobuf:"bytes,88,rep,name=domain_cert_map,json=domainCertMap,proto3" json:"domain_cert_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_df61af5ea37a6592, []int{27}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

type isCreateSpecType_TlsCertificatesChoice interface {
	isCreateSpecType_TlsCertificatesChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_ChallengeType interface {
	isCreateSpecType_ChallengeType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_AuthenticationChoice interface {
	isCreateSpecType_AuthenticationChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_ServerHeaderChoice interface {
	isCreateSpecType_ServerHeaderChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_PathNormalizeChoice interface {
	isCreateSpecType_PathNormalizeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_StrictSniHostHeaderCheckChoice interface {
	isCreateSpecType_StrictSniHostHeaderCheckChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_DefaultLbChoice interface {
	isCreateSpecType_DefaultLbChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSpecType_TlsParameters struct {
	TlsParameters *schema.DownstreamTlsParamsType `protobuf:"bytes,9,opt,name=tls_parameters,json=tlsParameters,proto3,oneof" json:"tls_parameters,omitempty"`
}
type CreateSpecType_TlsCertParams struct {
	TlsCertParams *schema.CertificateParamsType `protobuf:"bytes,86,opt,name=tls_cert_params,json=tlsCertParams,proto3,oneof" json:"tls_cert_params,omitempty"`
}
type CreateSpecType_NoChallenge struct {
	NoChallenge *schema.Empty `protobuf:"bytes,31,opt,name=no_challenge,json=noChallenge,proto3,oneof" json:"no_challenge,omitempty"`
}
type CreateSpecType_JsChallenge struct {
	JsChallenge *JavascriptChallengeType `protobuf:"bytes,24,opt,name=js_challenge,json=jsChallenge,proto3,oneof" json:"js_challenge,omitempty"`
}
type CreateSpecType_CaptchaChallenge struct {
	CaptchaChallenge *CaptchaChallengeType `protobuf:"bytes,29,opt,name=captcha_challenge,json=captchaChallenge,proto3,oneof" json:"captcha_challenge,omitempty"`
}
type CreateSpecType_NoAuthentication struct {
	NoAuthentication *schema.Empty `protobuf:"bytes,39,opt,name=no_authentication,json=noAuthentication,proto3,oneof" json:"no_authentication,omitempty"`
}
type CreateSpecType_Authentication struct {
	Authentication *AuthenticationDetails `protobuf:"bytes,40,opt,name=authentication,proto3,oneof" json:"authentication,omitempty"`
}
type CreateSpecType_DefaultHeader struct {
	DefaultHeader *schema.Empty `protobuf:"bytes,43,opt,name=default_header,json=defaultHeader,proto3,oneof" json:"default_header,omitempty"`
}
type CreateSpecType_ServerName struct {
	ServerName string `protobuf:"bytes,44,opt,name=server_name,json=serverName,proto3,oneof" json:"server_name,omitempty"`
}
type CreateSpecType_AppendServerName struct {
	AppendServerName string `protobuf:"bytes,45,opt,name=append_server_name,json=appendServerName,proto3,oneof" json:"append_server_name,omitempty"`
}
type CreateSpecType_PassThrough struct {
	PassThrough *schema.Empty `protobuf:"bytes,46,opt,name=pass_through,json=passThrough,proto3,oneof" json:"pass_through,omitempty"`
}
type CreateSpecType_EnablePathNormalize struct {
	EnablePathNormalize *schema.Empty `protobuf:"bytes,48,opt,name=enable_path_normalize,json=enablePathNormalize,proto3,oneof" json:"enable_path_normalize,omitempty"`
}
type CreateSpecType_DisablePathNormalize struct {
	DisablePathNormalize *schema.Empty `protobuf:"bytes,49,opt,name=disable_path_normalize,json=disablePathNormalize,proto3,oneof" json:"disable_path_normalize,omitempty"`
}
type CreateSpecType_EnableStrictSniHostHeaderCheck struct {
	EnableStrictSniHostHeaderCheck *schema.Empty `protobuf:"bytes,51,opt,name=enable_strict_sni_host_header_check,json=enableStrictSniHostHeaderCheck,proto3,oneof" json:"enable_strict_sni_host_header_check,omitempty"`
}
type CreateSpecType_AdditionalDomains struct {
	AdditionalDomains *schema.DomainNameList `protobuf:"bytes,53,opt,name=additional_domains,json=additionalDomains,proto3,oneof" json:"additional_domains,omitempty"`
}
type CreateSpecType_NonDefaultLoadbalancer struct {
	NonDefaultLoadbalancer *schema.Empty `protobuf:"bytes,77,opt,name=non_default_loadbalancer,json=nonDefaultLoadbalancer,proto3,oneof" json:"non_default_loadbalancer,omitempty"`
}
type CreateSpecType_DefaultLoadbalancer struct {
	DefaultLoadbalancer *schema.Empty `protobuf:"bytes,78,opt,name=default_loadbalancer,json=defaultLoadbalancer,proto3,oneof" json:"default_loadbalancer,omitempty"`
}

func (*CreateSpecType_TlsParameters) isCreateSpecType_TlsCertificatesChoice()      {}
func (*CreateSpecType_TlsCertParams) isCreateSpecType_TlsCertificatesChoice()      {}
func (*CreateSpecType_NoChallenge) isCreateSpecType_ChallengeType()                {}
func (*CreateSpecType_JsChallenge) isCreateSpecType_ChallengeType()                {}
func (*CreateSpecType_CaptchaChallenge) isCreateSpecType_ChallengeType()           {}
func (*CreateSpecType_NoAuthentication) isCreateSpecType_AuthenticationChoice()    {}
func (*CreateSpecType_Authentication) isCreateSpecType_AuthenticationChoice()      {}
func (*CreateSpecType_DefaultHeader) isCreateSpecType_ServerHeaderChoice()         {}
func (*CreateSpecType_ServerName) isCreateSpecType_ServerHeaderChoice()            {}
func (*CreateSpecType_AppendServerName) isCreateSpecType_ServerHeaderChoice()      {}
func (*CreateSpecType_PassThrough) isCreateSpecType_ServerHeaderChoice()           {}
func (*CreateSpecType_EnablePathNormalize) isCreateSpecType_PathNormalizeChoice()  {}
func (*CreateSpecType_DisablePathNormalize) isCreateSpecType_PathNormalizeChoice() {}
func (*CreateSpecType_EnableStrictSniHostHeaderCheck) isCreateSpecType_StrictSniHostHeaderCheckChoice() {
}
func (*CreateSpecType_AdditionalDomains) isCreateSpecType_StrictSniHostHeaderCheckChoice() {}
func (*CreateSpecType_NonDefaultLoadbalancer) isCreateSpecType_DefaultLbChoice()           {}
func (*CreateSpecType_DefaultLoadbalancer) isCreateSpecType_DefaultLbChoice()              {}

func (m *CreateSpecType) GetTlsCertificatesChoice() isCreateSpecType_TlsCertificatesChoice {
	if m != nil {
		return m.TlsCertificatesChoice
	}
	return nil
}
func (m *CreateSpecType) GetChallengeType() isCreateSpecType_ChallengeType {
	if m != nil {
		return m.ChallengeType
	}
	return nil
}
func (m *CreateSpecType) GetAuthenticationChoice() isCreateSpecType_AuthenticationChoice {
	if m != nil {
		return m.AuthenticationChoice
	}
	return nil
}
func (m *CreateSpecType) GetServerHeaderChoice() isCreateSpecType_ServerHeaderChoice {
	if m != nil {
		return m.ServerHeaderChoice
	}
	return nil
}
func (m *CreateSpecType) GetPathNormalizeChoice() isCreateSpecType_PathNormalizeChoice {
	if m != nil {
		return m.PathNormalizeChoice
	}
	return nil
}
func (m *CreateSpecType) GetStrictSniHostHeaderCheckChoice() isCreateSpecType_StrictSniHostHeaderCheckChoice {
	if m != nil {
		return m.StrictSniHostHeaderCheckChoice
	}
	return nil
}
func (m *CreateSpecType) GetDefaultLbChoice() isCreateSpecType_DefaultLbChoice {
	if m != nil {
		return m.DefaultLbChoice
	}
	return nil
}

func (m *CreateSpecType) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *CreateSpecType) GetRoutes() []*schema.ObjectRefType {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *CreateSpecType) GetAdvertisePolicies() []*schema.ObjectRefType {
	if m != nil {
		return m.AdvertisePolicies
	}
	return nil
}

func (m *CreateSpecType) GetRequestHeadersToAdd() []*schema.HeaderManipulationOptionType {
	if m != nil {
		return m.RequestHeadersToAdd
	}
	return nil
}

func (m *CreateSpecType) GetResponseHeadersToAdd() []*schema.HeaderManipulationOptionType {
	if m != nil {
		return m.ResponseHeadersToAdd
	}
	return nil
}

func (m *CreateSpecType) GetRequestHeadersToRemove() []string {
	if m != nil {
		return m.RequestHeadersToRemove
	}
	return nil
}

func (m *CreateSpecType) GetResponseHeadersToRemove() []string {
	if m != nil {
		return m.ResponseHeadersToRemove
	}
	return nil
}

func (m *CreateSpecType) GetTlsParameters() *schema.DownstreamTlsParamsType {
	if x, ok := m.GetTlsCertificatesChoice().(*CreateSpecType_TlsParameters); ok {
		return x.TlsParameters
	}
	return nil
}

func (m *CreateSpecType) GetTlsCertParams() *schema.CertificateParamsType {
	if x, ok := m.GetTlsCertificatesChoice().(*CreateSpecType_TlsCertParams); ok {
		return x.TlsCertParams
	}
	return nil
}

func (m *CreateSpecType) GetBufferPolicy() *schema.BufferConfigType {
	if m != nil {
		return m.BufferPolicy
	}
	return nil
}

func (m *CreateSpecType) GetCorsPolicy() *schema.CorsPolicy {
	if m != nil {
		return m.CorsPolicy
	}
	return nil
}

func (m *CreateSpecType) GetProxy() ProxyType {
	if m != nil {
		return m.Proxy
	}
	return HTTP_PROXY
}

func (m *CreateSpecType) GetWafType() *schema.WafType {
	if m != nil {
		return m.WafType
	}
	return nil
}

func (m *CreateSpecType) GetDynamicReverseProxy() *DynamicReverseProxyType {
	if m != nil {
		return m.DynamicReverseProxy
	}
	return nil
}

func (m *CreateSpecType) GetAddLocation() bool {
	if m != nil {
		return m.AddLocation
	}
	return false
}

func (m *CreateSpecType) GetCompressionParams() *CompressionType {
	if m != nil {
		return m.CompressionParams
	}
	return nil
}

func (m *CreateSpecType) GetCustomErrors() map[uint32]string {
	if m != nil {
		return m.CustomErrors
	}
	return nil
}

func (m *CreateSpecType) GetDisableDefaultErrorPages() bool {
	if m != nil {
		return m.DisableDefaultErrorPages
	}
	return false
}

func (m *CreateSpecType) GetMaxRequestHeaderSize() uint32 {
	if m != nil {
		return m.MaxRequestHeaderSize
	}
	return 0
}

func (m *CreateSpecType) GetNoChallenge() *schema.Empty {
	if x, ok := m.GetChallengeType().(*CreateSpecType_NoChallenge); ok {
		return x.NoChallenge
	}
	return nil
}

func (m *CreateSpecType) GetJsChallenge() *JavascriptChallengeType {
	if x, ok := m.GetChallengeType().(*CreateSpecType_JsChallenge); ok {
		return x.JsChallenge
	}
	return nil
}

func (m *CreateSpecType) GetCaptchaChallenge() *CaptchaChallengeType {
	if x, ok := m.GetChallengeType().(*CreateSpecType_CaptchaChallenge); ok {
		return x.CaptchaChallenge
	}
	return nil
}

func (m *CreateSpecType) GetUserIdentification() []*schema.ObjectRefType {
	if m != nil {
		return m.UserIdentification
	}
	return nil
}

func (m *CreateSpecType) GetRateLimiter() []*schema.ObjectRefType {
	if m != nil {
		return m.RateLimiter
	}
	return nil
}

func (m *CreateSpecType) GetRateLimiterAllowedPrefixes() []*schema.ObjectRefType {
	if m != nil {
		return m.RateLimiterAllowedPrefixes
	}
	return nil
}

func (m *CreateSpecType) GetRetryPolicy() *schema.RetryPolicyType {
	if m != nil {
		return m.RetryPolicy
	}
	return nil
}

func (m *CreateSpecType) GetIdleTimeout() uint32 {
	if m != nil {
		return m.IdleTimeout
	}
	return 0
}

func (m *CreateSpecType) GetDisableDnsResolve() bool {
	if m != nil {
		return m.DisableDnsResolve
	}
	return false
}

func (m *CreateSpecType) GetTemporaryUserBlocking() *TemporaryUserBlockingType {
	if m != nil {
		return m.TemporaryUserBlocking
	}
	return nil
}

func (m *CreateSpecType) GetNoAuthentication() *schema.Empty {
	if x, ok := m.GetAuthenticationChoice().(*CreateSpecType_NoAuthentication); ok {
		return x.NoAuthentication
	}
	return nil
}

func (m *CreateSpecType) GetAuthentication() *AuthenticationDetails {
	if x, ok := m.GetAuthenticationChoice().(*CreateSpecType_Authentication); ok {
		return x.Authentication
	}
	return nil
}

func (m *CreateSpecType) GetDefaultHeader() *schema.Empty {
	if x, ok := m.GetServerHeaderChoice().(*CreateSpecType_DefaultHeader); ok {
		return x.DefaultHeader
	}
	return nil
}

func (m *CreateSpecType) GetServerName() string {
	if x, ok := m.GetServerHeaderChoice().(*CreateSpecType_ServerName); ok {
		return x.ServerName
	}
	return ""
}

func (m *CreateSpecType) GetAppendServerName() string {
	if x, ok := m.GetServerHeaderChoice().(*CreateSpecType_AppendServerName); ok {
		return x.AppendServerName
	}
	return ""
}

func (m *CreateSpecType) GetPassThrough() *schema.Empty {
	if x, ok := m.GetServerHeaderChoice().(*CreateSpecType_PassThrough); ok {
		return x.PassThrough
	}
	return nil
}

func (m *CreateSpecType) GetEnablePathNormalize() *schema.Empty {
	if x, ok := m.GetPathNormalizeChoice().(*CreateSpecType_EnablePathNormalize); ok {
		return x.EnablePathNormalize
	}
	return nil
}

func (m *CreateSpecType) GetDisablePathNormalize() *schema.Empty {
	if x, ok := m.GetPathNormalizeChoice().(*CreateSpecType_DisablePathNormalize); ok {
		return x.DisablePathNormalize
	}
	return nil
}

func (m *CreateSpecType) GetEnableStrictSniHostHeaderCheck() *schema.Empty {
	if x, ok := m.GetStrictSniHostHeaderCheckChoice().(*CreateSpecType_EnableStrictSniHostHeaderCheck); ok {
		return x.EnableStrictSniHostHeaderCheck
	}
	return nil
}

func (m *CreateSpecType) GetAdditionalDomains() *schema.DomainNameList {
	if x, ok := m.GetStrictSniHostHeaderCheckChoice().(*CreateSpecType_AdditionalDomains); ok {
		return x.AdditionalDomains
	}
	return nil
}

func (m *CreateSpecType) GetNonDefaultLoadbalancer() *schema.Empty {
	if x, ok := m.GetDefaultLbChoice().(*CreateSpecType_NonDefaultLoadbalancer); ok {
		return x.NonDefaultLoadbalancer
	}
	return nil
}

func (m *CreateSpecType) GetDefaultLoadbalancer() *schema.Empty {
	if x, ok := m.GetDefaultLbChoice().(*CreateSpecType_DefaultLoadbalancer); ok {
		return x.DefaultLoadbalancer
	}
	return nil
}

func (m *CreateSpecType) GetHeaderTransformationType() *schema.HeaderTransformationType {
	if m != nil {
		return m.HeaderTransformationType
	}
	return nil
}

func (m *CreateSpecType) GetCsrfPolicy() *schema.CsrfPolicy {
	if m != nil {
		return m.CsrfPolicy
	}
	return nil
}

func (m *CreateSpecType) GetCookiesToModify() []*schema.CookieManipulationOptionType {
	if m != nil {
		return m.CookiesToModify
	}
	return nil
}

func (m *CreateSpecType) GetConnectionIdleTimeout() uint32 {
	if m != nil {
		return m.ConnectionIdleTimeout
	}
	return 0
}

func (m *CreateSpecType) GetDnsProxyConfiguration() *DNSProxyConfiguration {
	if m != nil {
		return m.DnsProxyConfiguration
	}
	return nil
}

func (m *CreateSpecType) GetSlowDdosMitigation() *SlowDDoSMitigation {
	if m != nil {
		return m.SlowDdosMitigation
	}
	return nil
}

func (m *CreateSpecType) GetApiSpec() *ApiSpec {
	if m != nil {
		return m.ApiSpec
	}
	return nil
}

func (m *CreateSpecType) GetDomainCertMap() map[string]*DomainCertificates {
	if m != nil {
		return m.DomainCertMap
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CreateSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CreateSpecType_TlsParameters)(nil),
		(*CreateSpecType_TlsCertParams)(nil),
		(*CreateSpecType_NoChallenge)(nil),
		(*CreateSpecType_JsChallenge)(nil),
		(*CreateSpecType_CaptchaChallenge)(nil),
		(*CreateSpecType_NoAuthentication)(nil),
		(*CreateSpecType_Authentication)(nil),
		(*CreateSpecType_DefaultHeader)(nil),
		(*CreateSpecType_ServerName)(nil),
		(*CreateSpecType_AppendServerName)(nil),
		(*CreateSpecType_PassThrough)(nil),
		(*CreateSpecType_EnablePathNormalize)(nil),
		(*CreateSpecType_DisablePathNormalize)(nil),
		(*CreateSpecType_EnableStrictSniHostHeaderCheck)(nil),
		(*CreateSpecType_AdditionalDomains)(nil),
		(*CreateSpecType_NonDefaultLoadbalancer)(nil),
		(*CreateSpecType_DefaultLoadbalancer)(nil),
	}
}

// Replace virtual host
//
// x-displayName: "Replace Virtual Host"
// Replace a given virtual host in a given namespace.
type ReplaceSpecType struct {
	Domains                 []string                               `protobuf:"bytes,2,rep,name=domains,proto3" json:"domains,omitempty"`
	Routes                  []*schema.ObjectRefType                `protobuf:"bytes,3,rep,name=routes,proto3" json:"routes,omitempty"`
	AdvertisePolicies       []*schema.ObjectRefType                `protobuf:"bytes,5,rep,name=advertise_policies,json=advertisePolicies,proto3" json:"advertise_policies,omitempty"`
	RequestHeadersToAdd     []*schema.HeaderManipulationOptionType `protobuf:"bytes,6,rep,name=request_headers_to_add,json=requestHeadersToAdd,proto3" json:"request_headers_to_add,omitempty"`
	ResponseHeadersToAdd    []*schema.HeaderManipulationOptionType `protobuf:"bytes,7,rep,name=response_headers_to_add,json=responseHeadersToAdd,proto3" json:"response_headers_to_add,omitempty"`
	RequestHeadersToRemove  []string                               `protobuf:"bytes,17,rep,name=request_headers_to_remove,json=requestHeadersToRemove,proto3" json:"request_headers_to_remove,omitempty"`
	ResponseHeadersToRemove []string                               `protobuf:"bytes,8,rep,name=response_headers_to_remove,json=responseHeadersToRemove,proto3" json:"response_headers_to_remove,omitempty"`
	// Types that are valid to be assigned to TlsCertificatesChoice:
	//
	//	*ReplaceSpecType_TlsParameters
	//	*ReplaceSpecType_TlsCertParams
	TlsCertificatesChoice    isReplaceSpecType_TlsCertificatesChoice `protobuf_oneof:"tls_certificates_choice"`
	BufferPolicy             *schema.BufferConfigType                `protobuf:"bytes,12,opt,name=buffer_policy,json=bufferPolicy,proto3" json:"buffer_policy,omitempty"`
	CorsPolicy               *schema.CorsPolicy                      `protobuf:"bytes,13,opt,name=cors_policy,json=corsPolicy,proto3" json:"cors_policy,omitempty"`
	Proxy                    ProxyType                               `protobuf:"varint,15,opt,name=proxy,proto3,enum=ves.io.schema.virtual_host.ProxyType" json:"proxy,omitempty"`
	WafType                  *schema.WafType                         `protobuf:"bytes,18,opt,name=waf_type,json=wafType,proto3" json:"waf_type,omitempty"`
	DynamicReverseProxy      *DynamicReverseProxyType                `protobuf:"bytes,19,opt,name=dynamic_reverse_proxy,json=dynamicReverseProxy,proto3" json:"dynamic_reverse_proxy,omitempty"`
	AddLocation              bool                                    `protobuf:"varint,20,opt,name=add_location,json=addLocation,proto3" json:"add_location,omitempty"`
	CompressionParams        *CompressionType                        `protobuf:"bytes,21,opt,name=compression_params,json=compressionParams,proto3" json:"compression_params,omitempty"`
	CustomErrors             map[uint32]string                       `protobuf:"bytes,22,rep,name=custom_errors,json=customErrors,proto3" json:"custom_errors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DisableDefaultErrorPages bool                                    `protobuf:"varint,33,opt,name=disable_default_error_pages,json=disableDefaultErrorPages,proto3" json:"disable_default_error_pages,omitempty"`
	MaxRequestHeaderSize     uint32                                  `protobuf:"varint,23,opt,name=max_request_header_size,json=maxRequestHeaderSize,proto3" json:"max_request_header_size,omitempty"`
	// Types that are valid to be assigned to ChallengeType:
	//
	//	*ReplaceSpecType_NoChallenge
	//	*ReplaceSpecType_JsChallenge
	//	*ReplaceSpecType_CaptchaChallenge
	ChallengeType              isReplaceSpecType_ChallengeType `protobuf_oneof:"challenge_type"`
	UserIdentification         []*schema.ObjectRefType         `protobuf:"bytes,25,rep,name=user_identification,json=userIdentification,proto3" json:"user_identification,omitempty"`
	RateLimiter                []*schema.ObjectRefType         `protobuf:"bytes,26,rep,name=rate_limiter,json=rateLimiter,proto3" json:"rate_limiter,omitempty"`
	RateLimiterAllowedPrefixes []*schema.ObjectRefType         `protobuf:"bytes,27,rep,name=rate_limiter_allowed_prefixes,json=rateLimiterAllowedPrefixes,proto3" json:"rate_limiter_allowed_prefixes,omitempty"`
	RetryPolicy                *schema.RetryPolicyType         `protobuf:"bytes,28,opt,name=retry_policy,json=retryPolicy,proto3" json:"retry_policy,omitempty"`
	IdleTimeout                uint32                          `protobuf:"varint,32,opt,name=idle_timeout,json=idleTimeout,proto3" json:"idle_timeout,omitempty"`
	DisableDnsResolve          bool                            `protobuf:"varint,34,opt,name=disable_dns_resolve,json=disableDnsResolve,proto3" json:"disable_dns_resolve,omitempty"`
	TemporaryUserBlocking      *TemporaryUserBlockingType      `protobuf:"bytes,35,opt,name=temporary_user_blocking,json=temporaryUserBlocking,proto3" json:"temporary_user_blocking,omitempty"`
	// Types that are valid to be assigned to AuthenticationChoice:
	//
	//	*ReplaceSpecType_NoAuthentication
	//	*ReplaceSpecType_Authentication
	AuthenticationChoice isReplaceSpecType_AuthenticationChoice `protobuf_oneof:"authentication_choice"`
	// Types that are valid to be assigned to ServerHeaderChoice:
	//
	//	*ReplaceSpecType_DefaultHeader
	//	*ReplaceSpecType_ServerName
	//	*ReplaceSpecType_AppendServerName
	//	*ReplaceSpecType_PassThrough
	ServerHeaderChoice isReplaceSpecType_ServerHeaderChoice `protobuf_oneof:"server_header_choice"`
	// Types that are valid to be assigned to PathNormalizeChoice:
	//
	//	*ReplaceSpecType_EnablePathNormalize
	//	*ReplaceSpecType_DisablePathNormalize
	PathNormalizeChoice isReplaceSpecType_PathNormalizeChoice `protobuf_oneof:"path_normalize_choice"`
	// Types that are valid to be assigned to StrictSniHostHeaderCheckChoice:
	//
	//	*ReplaceSpecType_EnableStrictSniHostHeaderCheck
	//	*ReplaceSpecType_AdditionalDomains
	StrictSniHostHeaderCheckChoice isReplaceSpecType_StrictSniHostHeaderCheckChoice `protobuf_oneof:"strict_sni_host_header_check_choice"`
	// Types that are valid to be assigned to DefaultLbChoice:
	//
	//	*ReplaceSpecType_NonDefaultLoadbalancer
	//	*ReplaceSpecType_DefaultLoadbalancer
	DefaultLbChoice          isReplaceSpecType_DefaultLbChoice      `protobuf_oneof:"default_lb_choice"`
	HeaderTransformationType *schema.HeaderTransformationType       `protobuf:"bytes,79,opt,name=header_transformation_type,json=headerTransformationType,proto3" json:"header_transformation_type,omitempty"`
	CsrfPolicy               *schema.CsrfPolicy                     `protobuf:"bytes,80,opt,name=csrf_policy,json=csrfPolicy,proto3" json:"csrf_policy,omitempty"`
	CookiesToModify          []*schema.CookieManipulationOptionType `protobuf:"bytes,81,rep,name=cookies_to_modify,json=cookiesToModify,proto3" json:"cookies_to_modify,omitempty"`
	ConnectionIdleTimeout    uint32                                 `protobuf:"varint,82,opt,name=connection_idle_timeout,json=connectionIdleTimeout,proto3" json:"connection_idle_timeout,omitempty"`
	DnsProxyConfiguration    *DNSProxyConfiguration                 `protobuf:"bytes,1200,opt,name=dns_proxy_configuration,json=dnsProxyConfiguration,proto3" json:"dns_proxy_configuration,omitempty"`
	SlowDdosMitigation       *SlowDDoSMitigation                    `protobuf:"bytes,83,opt,name=slow_ddos_mitigation,json=slowDdosMitigation,proto3" json:"slow_ddos_mitigation,omitempty"`
	ApiSpec                  *ApiSpec                               `protobuf:"bytes,84,opt,name=api_spec,json=apiSpec,proto3" json:"api_spec,omitempty"`
	DomainCertMap            map[string]*DomainCertificates         `protobuf:"bytes,88,rep,name=domain_cert_map,json=domainCertMap,proto3" json:"domain_cert_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_df61af5ea37a6592, []int{28}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

type isReplaceSpecType_TlsCertificatesChoice interface {
	isReplaceSpecType_TlsCertificatesChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_ChallengeType interface {
	isReplaceSpecType_ChallengeType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_AuthenticationChoice interface {
	isReplaceSpecType_AuthenticationChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_ServerHeaderChoice interface {
	isReplaceSpecType_ServerHeaderChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_PathNormalizeChoice interface {
	isReplaceSpecType_PathNormalizeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_StrictSniHostHeaderCheckChoice interface {
	isReplaceSpecType_StrictSniHostHeaderCheckChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_DefaultLbChoice interface {
	isReplaceSpecType_DefaultLbChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplaceSpecType_TlsParameters struct {
	TlsParameters *schema.DownstreamTlsParamsType `protobuf:"bytes,9,opt,name=tls_parameters,json=tlsParameters,proto3,oneof" json:"tls_parameters,omitempty"`
}
type ReplaceSpecType_TlsCertParams struct {
	TlsCertParams *schema.CertificateParamsType `protobuf:"bytes,86,opt,name=tls_cert_params,json=tlsCertParams,proto3,oneof" json:"tls_cert_params,omitempty"`
}
type ReplaceSpecType_NoChallenge struct {
	NoChallenge *schema.Empty `protobuf:"bytes,31,opt,name=no_challenge,json=noChallenge,proto3,oneof" json:"no_challenge,omitempty"`
}
type ReplaceSpecType_JsChallenge struct {
	JsChallenge *JavascriptChallengeType `protobuf:"bytes,24,opt,name=js_challenge,json=jsChallenge,proto3,oneof" json:"js_challenge,omitempty"`
}
type ReplaceSpecType_CaptchaChallenge struct {
	CaptchaChallenge *CaptchaChallengeType `protobuf:"bytes,29,opt,name=captcha_challenge,json=captchaChallenge,proto3,oneof" json:"captcha_challenge,omitempty"`
}
type ReplaceSpecType_NoAuthentication struct {
	NoAuthentication *schema.Empty `protobuf:"bytes,39,opt,name=no_authentication,json=noAuthentication,proto3,oneof" json:"no_authentication,omitempty"`
}
type ReplaceSpecType_Authentication struct {
	Authentication *AuthenticationDetails `protobuf:"bytes,40,opt,name=authentication,proto3,oneof" json:"authentication,omitempty"`
}
type ReplaceSpecType_DefaultHeader struct {
	DefaultHeader *schema.Empty `protobuf:"bytes,43,opt,name=default_header,json=defaultHeader,proto3,oneof" json:"default_header,omitempty"`
}
type ReplaceSpecType_ServerName struct {
	ServerName string `protobuf:"bytes,44,opt,name=server_name,json=serverName,proto3,oneof" json:"server_name,omitempty"`
}
type ReplaceSpecType_AppendServerName struct {
	AppendServerName string `protobuf:"bytes,45,opt,name=append_server_name,json=appendServerName,proto3,oneof" json:"append_server_name,omitempty"`
}
type ReplaceSpecType_PassThrough struct {
	PassThrough *schema.Empty `protobuf:"bytes,46,opt,name=pass_through,json=passThrough,proto3,oneof" json:"pass_through,omitempty"`
}
type ReplaceSpecType_EnablePathNormalize struct {
	EnablePathNormalize *schema.Empty `protobuf:"bytes,48,opt,name=enable_path_normalize,json=enablePathNormalize,proto3,oneof" json:"enable_path_normalize,omitempty"`
}
type ReplaceSpecType_DisablePathNormalize struct {
	DisablePathNormalize *schema.Empty `protobuf:"bytes,49,opt,name=disable_path_normalize,json=disablePathNormalize,proto3,oneof" json:"disable_path_normalize,omitempty"`
}
type ReplaceSpecType_EnableStrictSniHostHeaderCheck struct {
	EnableStrictSniHostHeaderCheck *schema.Empty `protobuf:"bytes,51,opt,name=enable_strict_sni_host_header_check,json=enableStrictSniHostHeaderCheck,proto3,oneof" json:"enable_strict_sni_host_header_check,omitempty"`
}
type ReplaceSpecType_AdditionalDomains struct {
	AdditionalDomains *schema.DomainNameList `protobuf:"bytes,53,opt,name=additional_domains,json=additionalDomains,proto3,oneof" json:"additional_domains,omitempty"`
}
type ReplaceSpecType_NonDefaultLoadbalancer struct {
	NonDefaultLoadbalancer *schema.Empty `protobuf:"bytes,77,opt,name=non_default_loadbalancer,json=nonDefaultLoadbalancer,proto3,oneof" json:"non_default_loadbalancer,omitempty"`
}
type ReplaceSpecType_DefaultLoadbalancer struct {
	DefaultLoadbalancer *schema.Empty `protobuf:"bytes,78,opt,name=default_loadbalancer,json=defaultLoadbalancer,proto3,oneof" json:"default_loadbalancer,omitempty"`
}

func (*ReplaceSpecType_TlsParameters) isReplaceSpecType_TlsCertificatesChoice()      {}
func (*ReplaceSpecType_TlsCertParams) isReplaceSpecType_TlsCertificatesChoice()      {}
func (*ReplaceSpecType_NoChallenge) isReplaceSpecType_ChallengeType()                {}
func (*ReplaceSpecType_JsChallenge) isReplaceSpecType_ChallengeType()                {}
func (*ReplaceSpecType_CaptchaChallenge) isReplaceSpecType_ChallengeType()           {}
func (*ReplaceSpecType_NoAuthentication) isReplaceSpecType_AuthenticationChoice()    {}
func (*ReplaceSpecType_Authentication) isReplaceSpecType_AuthenticationChoice()      {}
func (*ReplaceSpecType_DefaultHeader) isReplaceSpecType_ServerHeaderChoice()         {}
func (*ReplaceSpecType_ServerName) isReplaceSpecType_ServerHeaderChoice()            {}
func (*ReplaceSpecType_AppendServerName) isReplaceSpecType_ServerHeaderChoice()      {}
func (*ReplaceSpecType_PassThrough) isReplaceSpecType_ServerHeaderChoice()           {}
func (*ReplaceSpecType_EnablePathNormalize) isReplaceSpecType_PathNormalizeChoice()  {}
func (*ReplaceSpecType_DisablePathNormalize) isReplaceSpecType_PathNormalizeChoice() {}
func (*ReplaceSpecType_EnableStrictSniHostHeaderCheck) isReplaceSpecType_StrictSniHostHeaderCheckChoice() {
}
func (*ReplaceSpecType_AdditionalDomains) isReplaceSpecType_StrictSniHostHeaderCheckChoice() {}
func (*ReplaceSpecType_NonDefaultLoadbalancer) isReplaceSpecType_DefaultLbChoice()           {}
func (*ReplaceSpecType_DefaultLoadbalancer) isReplaceSpecType_DefaultLbChoice()              {}

func (m *ReplaceSpecType) GetTlsCertificatesChoice() isReplaceSpecType_TlsCertificatesChoice {
	if m != nil {
		return m.TlsCertificatesChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetChallengeType() isReplaceSpecType_ChallengeType {
	if m != nil {
		return m.ChallengeType
	}
	return nil
}
func (m *ReplaceSpecType) GetAuthenticationChoice() isReplaceSpecType_AuthenticationChoice {
	if m != nil {
		return m.AuthenticationChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetServerHeaderChoice() isReplaceSpecType_ServerHeaderChoice {
	if m != nil {
		return m.ServerHeaderChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetPathNormalizeChoice() isReplaceSpecType_PathNormalizeChoice {
	if m != nil {
		return m.PathNormalizeChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetStrictSniHostHeaderCheckChoice() isReplaceSpecType_StrictSniHostHeaderCheckChoice {
	if m != nil {
		return m.StrictSniHostHeaderCheckChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetDefaultLbChoice() isReplaceSpecType_DefaultLbChoice {
	if m != nil {
		return m.DefaultLbChoice
	}
	return nil
}

func (m *ReplaceSpecType) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *ReplaceSpecType) GetRoutes() []*schema.ObjectRefType {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *ReplaceSpecType) GetAdvertisePolicies() []*schema.ObjectRefType {
	if m != nil {
		return m.AdvertisePolicies
	}
	return nil
}

func (m *ReplaceSpecType) GetRequestHeadersToAdd() []*schema.HeaderManipulationOptionType {
	if m != nil {
		return m.RequestHeadersToAdd
	}
	return nil
}

func (m *ReplaceSpecType) GetResponseHeadersToAdd() []*schema.HeaderManipulationOptionType {
	if m != nil {
		return m.ResponseHeadersToAdd
	}
	return nil
}

func (m *ReplaceSpecType) GetRequestHeadersToRemove() []string {
	if m != nil {
		return m.RequestHeadersToRemove
	}
	return nil
}

func (m *ReplaceSpecType) GetResponseHeadersToRemove() []string {
	if m != nil {
		return m.ResponseHeadersToRemove
	}
	return nil
}

func (m *ReplaceSpecType) GetTlsParameters() *schema.DownstreamTlsParamsType {
	if x, ok := m.GetTlsCertificatesChoice().(*ReplaceSpecType_TlsParameters); ok {
		return x.TlsParameters
	}
	return nil
}

func (m *ReplaceSpecType) GetTlsCertParams() *schema.CertificateParamsType {
	if x, ok := m.GetTlsCertificatesChoice().(*ReplaceSpecType_TlsCertParams); ok {
		return x.TlsCertParams
	}
	return nil
}

func (m *ReplaceSpecType) GetBufferPolicy() *schema.BufferConfigType {
	if m != nil {
		return m.BufferPolicy
	}
	return nil
}

func (m *ReplaceSpecType) GetCorsPolicy() *schema.CorsPolicy {
	if m != nil {
		return m.CorsPolicy
	}
	return nil
}

func (m *ReplaceSpecType) GetProxy() ProxyType {
	if m != nil {
		return m.Proxy
	}
	return HTTP_PROXY
}

func (m *ReplaceSpecType) GetWafType() *schema.WafType {
	if m != nil {
		return m.WafType
	}
	return nil
}

func (m *ReplaceSpecType) GetDynamicReverseProxy() *DynamicReverseProxyType {
	if m != nil {
		return m.DynamicReverseProxy
	}
	return nil
}

func (m *ReplaceSpecType) GetAddLocation() bool {
	if m != nil {
		return m.AddLocation
	}
	return false
}

func (m *ReplaceSpecType) GetCompressionParams() *CompressionType {
	if m != nil {
		return m.CompressionParams
	}
	return nil
}

func (m *ReplaceSpecType) GetCustomErrors() map[uint32]string {
	if m != nil {
		return m.CustomErrors
	}
	return nil
}

func (m *ReplaceSpecType) GetDisableDefaultErrorPages() bool {
	if m != nil {
		return m.DisableDefaultErrorPages
	}
	return false
}

func (m *ReplaceSpecType) GetMaxRequestHeaderSize() uint32 {
	if m != nil {
		return m.MaxRequestHeaderSize
	}
	return 0
}

func (m *ReplaceSpecType) GetNoChallenge() *schema.Empty {
	if x, ok := m.GetChallengeType().(*ReplaceSpecType_NoChallenge); ok {
		return x.NoChallenge
	}
	return nil
}

func (m *ReplaceSpecType) GetJsChallenge() *JavascriptChallengeType {
	if x, ok := m.GetChallengeType().(*ReplaceSpecType_JsChallenge); ok {
		return x.JsChallenge
	}
	return nil
}

func (m *ReplaceSpecType) GetCaptchaChallenge() *CaptchaChallengeType {
	if x, ok := m.GetChallengeType().(*ReplaceSpecType_CaptchaChallenge); ok {
		return x.CaptchaChallenge
	}
	return nil
}

func (m *ReplaceSpecType) GetUserIdentification() []*schema.ObjectRefType {
	if m != nil {
		return m.UserIdentification
	}
	return nil
}

func (m *ReplaceSpecType) GetRateLimiter() []*schema.ObjectRefType {
	if m != nil {
		return m.RateLimiter
	}
	return nil
}

func (m *ReplaceSpecType) GetRateLimiterAllowedPrefixes() []*schema.ObjectRefType {
	if m != nil {
		return m.RateLimiterAllowedPrefixes
	}
	return nil
}

func (m *ReplaceSpecType) GetRetryPolicy() *schema.RetryPolicyType {
	if m != nil {
		return m.RetryPolicy
	}
	return nil
}

func (m *ReplaceSpecType) GetIdleTimeout() uint32 {
	if m != nil {
		return m.IdleTimeout
	}
	return 0
}

func (m *ReplaceSpecType) GetDisableDnsResolve() bool {
	if m != nil {
		return m.DisableDnsResolve
	}
	return false
}

func (m *ReplaceSpecType) GetTemporaryUserBlocking() *TemporaryUserBlockingType {
	if m != nil {
		return m.TemporaryUserBlocking
	}
	return nil
}

func (m *ReplaceSpecType) GetNoAuthentication() *schema.Empty {
	if x, ok := m.GetAuthenticationChoice().(*ReplaceSpecType_NoAuthentication); ok {
		return x.NoAuthentication
	}
	return nil
}

func (m *ReplaceSpecType) GetAuthentication() *AuthenticationDetails {
	if x, ok := m.GetAuthenticationChoice().(*ReplaceSpecType_Authentication); ok {
		return x.Authentication
	}
	return nil
}

func (m *ReplaceSpecType) GetDefaultHeader() *schema.Empty {
	if x, ok := m.GetServerHeaderChoice().(*ReplaceSpecType_DefaultHeader); ok {
		return x.DefaultHeader
	}
	return nil
}

func (m *ReplaceSpecType) GetServerName() string {
	if x, ok := m.GetServerHeaderChoice().(*ReplaceSpecType_ServerName); ok {
		return x.ServerName
	}
	return ""
}

func (m *ReplaceSpecType) GetAppendServerName() string {
	if x, ok := m.GetServerHeaderChoice().(*ReplaceSpecType_AppendServerName); ok {
		return x.AppendServerName
	}
	return ""
}

func (m *ReplaceSpecType) GetPassThrough() *schema.Empty {
	if x, ok := m.GetServerHeaderChoice().(*ReplaceSpecType_PassThrough); ok {
		return x.PassThrough
	}
	return nil
}

func (m *ReplaceSpecType) GetEnablePathNormalize() *schema.Empty {
	if x, ok := m.GetPathNormalizeChoice().(*ReplaceSpecType_EnablePathNormalize); ok {
		return x.EnablePathNormalize
	}
	return nil
}

func (m *ReplaceSpecType) GetDisablePathNormalize() *schema.Empty {
	if x, ok := m.GetPathNormalizeChoice().(*ReplaceSpecType_DisablePathNormalize); ok {
		return x.DisablePathNormalize
	}
	return nil
}

func (m *ReplaceSpecType) GetEnableStrictSniHostHeaderCheck() *schema.Empty {
	if x, ok := m.GetStrictSniHostHeaderCheckChoice().(*ReplaceSpecType_EnableStrictSniHostHeaderCheck); ok {
		return x.EnableStrictSniHostHeaderCheck
	}
	return nil
}

func (m *ReplaceSpecType) GetAdditionalDomains() *schema.DomainNameList {
	if x, ok := m.GetStrictSniHostHeaderCheckChoice().(*ReplaceSpecType_AdditionalDomains); ok {
		return x.AdditionalDomains
	}
	return nil
}

func (m *ReplaceSpecType) GetNonDefaultLoadbalancer() *schema.Empty {
	if x, ok := m.GetDefaultLbChoice().(*ReplaceSpecType_NonDefaultLoadbalancer); ok {
		return x.NonDefaultLoadbalancer
	}
	return nil
}

func (m *ReplaceSpecType) GetDefaultLoadbalancer() *schema.Empty {
	if x, ok := m.GetDefaultLbChoice().(*ReplaceSpecType_DefaultLoadbalancer); ok {
		return x.DefaultLoadbalancer
	}
	return nil
}

func (m *ReplaceSpecType) GetHeaderTransformationType() *schema.HeaderTransformationType {
	if m != nil {
		return m.HeaderTransformationType
	}
	return nil
}

func (m *ReplaceSpecType) GetCsrfPolicy() *schema.CsrfPolicy {
	if m != nil {
		return m.CsrfPolicy
	}
	return nil
}

func (m *ReplaceSpecType) GetCookiesToModify() []*schema.CookieManipulationOptionType {
	if m != nil {
		return m.CookiesToModify
	}
	return nil
}

func (m *ReplaceSpecType) GetConnectionIdleTimeout() uint32 {
	if m != nil {
		return m.ConnectionIdleTimeout
	}
	return 0
}

func (m *ReplaceSpecType) GetDnsProxyConfiguration() *DNSProxyConfiguration {
	if m != nil {
		return m.DnsProxyConfiguration
	}
	return nil
}

func (m *ReplaceSpecType) GetSlowDdosMitigation() *SlowDDoSMitigation {
	if m != nil {
		return m.SlowDdosMitigation
	}
	return nil
}

func (m *ReplaceSpecType) GetApiSpec() *ApiSpec {
	if m != nil {
		return m.ApiSpec
	}
	return nil
}

func (m *ReplaceSpecType) GetDomainCertMap() map[string]*DomainCertificates {
	if m != nil {
		return m.DomainCertMap
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ReplaceSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ReplaceSpecType_TlsParameters)(nil),
		(*ReplaceSpecType_TlsCertParams)(nil),
		(*ReplaceSpecType_NoChallenge)(nil),
		(*ReplaceSpecType_JsChallenge)(nil),
		(*ReplaceSpecType_CaptchaChallenge)(nil),
		(*ReplaceSpecType_NoAuthentication)(nil),
		(*ReplaceSpecType_Authentication)(nil),
		(*ReplaceSpecType_DefaultHeader)(nil),
		(*ReplaceSpecType_ServerName)(nil),
		(*ReplaceSpecType_AppendServerName)(nil),
		(*ReplaceSpecType_PassThrough)(nil),
		(*ReplaceSpecType_EnablePathNormalize)(nil),
		(*ReplaceSpecType_DisablePathNormalize)(nil),
		(*ReplaceSpecType_EnableStrictSniHostHeaderCheck)(nil),
		(*ReplaceSpecType_AdditionalDomains)(nil),
		(*ReplaceSpecType_NonDefaultLoadbalancer)(nil),
		(*ReplaceSpecType_DefaultLoadbalancer)(nil),
	}
}

// Get virtual host
//
// x-displayName: "Get Virtual Host"
// Get virtual host from a given namespace.
type GetSpecType struct {
	Domains                 []string                               `protobuf:"bytes,2,rep,name=domains,proto3" json:"domains,omitempty"`
	Routes                  []*schema.ObjectRefType                `protobuf:"bytes,3,rep,name=routes,proto3" json:"routes,omitempty"`
	AdvertisePolicies       []*schema.ObjectRefType                `protobuf:"bytes,5,rep,name=advertise_policies,json=advertisePolicies,proto3" json:"advertise_policies,omitempty"`
	RequestHeadersToAdd     []*schema.HeaderManipulationOptionType `protobuf:"bytes,6,rep,name=request_headers_to_add,json=requestHeadersToAdd,proto3" json:"request_headers_to_add,omitempty"`
	ResponseHeadersToAdd    []*schema.HeaderManipulationOptionType `protobuf:"bytes,7,rep,name=response_headers_to_add,json=responseHeadersToAdd,proto3" json:"response_headers_to_add,omitempty"`
	RequestHeadersToRemove  []string                               `protobuf:"bytes,17,rep,name=request_headers_to_remove,json=requestHeadersToRemove,proto3" json:"request_headers_to_remove,omitempty"`
	ResponseHeadersToRemove []string                               `protobuf:"bytes,8,rep,name=response_headers_to_remove,json=responseHeadersToRemove,proto3" json:"response_headers_to_remove,omitempty"`
	// Types that are valid to be assigned to TlsCertificatesChoice:
	//
	//	*GetSpecType_TlsParameters
	//	*GetSpecType_TlsCertParams
	TlsCertificatesChoice    isGetSpecType_TlsCertificatesChoice `protobuf_oneof:"tls_certificates_choice"`
	Type                     VirtualHostType                     `protobuf:"varint,10,opt,name=type,proto3,enum=ves.io.schema.virtual_host.VirtualHostType" json:"type,omitempty"`
	BufferPolicy             *schema.BufferConfigType            `protobuf:"bytes,12,opt,name=buffer_policy,json=bufferPolicy,proto3" json:"buffer_policy,omitempty"`
	CorsPolicy               *schema.CorsPolicy                  `protobuf:"bytes,13,opt,name=cors_policy,json=corsPolicy,proto3" json:"cors_policy,omitempty"`
	Proxy                    ProxyType                           `protobuf:"varint,15,opt,name=proxy,proto3,enum=ves.io.schema.virtual_host.ProxyType" json:"proxy,omitempty"`
	WafType                  *schema.WafType                     `protobuf:"bytes,18,opt,name=waf_type,json=wafType,proto3" json:"waf_type,omitempty"`
	DynamicReverseProxy      *DynamicReverseProxyType            `protobuf:"bytes,19,opt,name=dynamic_reverse_proxy,json=dynamicReverseProxy,proto3" json:"dynamic_reverse_proxy,omitempty"`
	AddLocation              bool                                `protobuf:"varint,20,opt,name=add_location,json=addLocation,proto3" json:"add_location,omitempty"`
	CompressionParams        *CompressionType                    `protobuf:"bytes,21,opt,name=compression_params,json=compressionParams,proto3" json:"compression_params,omitempty"`
	CustomErrors             map[uint32]string                   `protobuf:"bytes,22,rep,name=custom_errors,json=customErrors,proto3" json:"custom_errors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DisableDefaultErrorPages bool                                `protobuf:"varint,33,opt,name=disable_default_error_pages,json=disableDefaultErrorPages,proto3" json:"disable_default_error_pages,omitempty"`
	MaxRequestHeaderSize     uint32                              `protobuf:"varint,23,opt,name=max_request_header_size,json=maxRequestHeaderSize,proto3" json:"max_request_header_size,omitempty"`
	// Types that are valid to be assigned to ChallengeType:
	//
	//	*GetSpecType_NoChallenge
	//	*GetSpecType_JsChallenge
	//	*GetSpecType_CaptchaChallenge
	ChallengeType              isGetSpecType_ChallengeType `protobuf_oneof:"challenge_type"`
	UserIdentification         []*schema.ObjectRefType     `protobuf:"bytes,25,rep,name=user_identification,json=userIdentification,proto3" json:"user_identification,omitempty"`
	RateLimiter                []*schema.ObjectRefType     `protobuf:"bytes,26,rep,name=rate_limiter,json=rateLimiter,proto3" json:"rate_limiter,omitempty"`
	RateLimiterAllowedPrefixes []*schema.ObjectRefType     `protobuf:"bytes,27,rep,name=rate_limiter_allowed_prefixes,json=rateLimiterAllowedPrefixes,proto3" json:"rate_limiter_allowed_prefixes,omitempty"`
	RetryPolicy                *schema.RetryPolicyType     `protobuf:"bytes,28,opt,name=retry_policy,json=retryPolicy,proto3" json:"retry_policy,omitempty"`
	IdleTimeout                uint32                      `protobuf:"varint,32,opt,name=idle_timeout,json=idleTimeout,proto3" json:"idle_timeout,omitempty"`
	TemporaryUserBlocking      *TemporaryUserBlockingType  `protobuf:"bytes,35,opt,name=temporary_user_blocking,json=temporaryUserBlocking,proto3" json:"temporary_user_blocking,omitempty"`
	// Types that are valid to be assigned to AuthenticationChoice:
	//
	//	*GetSpecType_NoAuthentication
	//	*GetSpecType_Authentication
	AuthenticationChoice isGetSpecType_AuthenticationChoice `protobuf_oneof:"authentication_choice"`
	// Types that are valid to be assigned to ServerHeaderChoice:
	//
	//	*GetSpecType_DefaultHeader
	//	*GetSpecType_ServerName
	//	*GetSpecType_AppendServerName
	//	*GetSpecType_PassThrough
	ServerHeaderChoice isGetSpecType_ServerHeaderChoice `protobuf_oneof:"server_header_choice"`
	// Types that are valid to be assigned to PathNormalizeChoice:
	//
	//	*GetSpecType_EnablePathNormalize
	//	*GetSpecType_DisablePathNormalize
	PathNormalizeChoice isGetSpecType_PathNormalizeChoice `protobuf_oneof:"path_normalize_choice"`
	// Types that are valid to be assigned to StrictSniHostHeaderCheckChoice:
	//
	//	*GetSpecType_EnableStrictSniHostHeaderCheck
	//	*GetSpecType_AdditionalDomains
	StrictSniHostHeaderCheckChoice isGetSpecType_StrictSniHostHeaderCheckChoice `protobuf_oneof:"strict_sni_host_header_check_choice"`
	// Types that are valid to be assigned to DefaultLbChoice:
	//
	//	*GetSpecType_NonDefaultLoadbalancer
	//	*GetSpecType_DefaultLoadbalancer
	DefaultLbChoice          isGetSpecType_DefaultLbChoice          `protobuf_oneof:"default_lb_choice"`
	HeaderTransformationType *schema.HeaderTransformationType       `protobuf:"bytes,79,opt,name=header_transformation_type,json=headerTransformationType,proto3" json:"header_transformation_type,omitempty"`
	CookiesToModify          []*schema.CookieManipulationOptionType `protobuf:"bytes,81,rep,name=cookies_to_modify,json=cookiesToModify,proto3" json:"cookies_to_modify,omitempty"`
	ConnectionIdleTimeout    uint32                                 `protobuf:"varint,82,opt,name=connection_idle_timeout,json=connectionIdleTimeout,proto3" json:"connection_idle_timeout,omitempty"`
	State                    VirtualHostState                       `protobuf:"varint,1003,opt,name=state,proto3,enum=ves.io.schema.virtual_host.VirtualHostState" json:"state,omitempty"`
	HostName                 string                                 `protobuf:"bytes,1004,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	DnsInfo                  []*virtual_host_dns_info.DnsInfo       `protobuf:"bytes,1005,rep,name=dns_info,json=dnsInfo,proto3" json:"dns_info,omitempty"`
	AutoCertInfo             *AutoCertInfoType                      `protobuf:"bytes,1010,opt,name=auto_cert_info,json=autoCertInfo,proto3" json:"auto_cert_info,omitempty"`
	AutoCertErrorMsg         string                                 `protobuf:"bytes,1025,opt,name=auto_cert_error_msg,json=autoCertErrorMsg,proto3" json:"auto_cert_error_msg,omitempty"`
	DisableDnsResolve        bool                                   `protobuf:"varint,34,opt,name=disable_dns_resolve,json=disableDnsResolve,proto3" json:"disable_dns_resolve,omitempty"`
	CdnService               *CdnServiceType                        `protobuf:"bytes,54,opt,name=cdn_service,json=cdnService,proto3" json:"cdn_service,omitempty"`
	CsrfPolicy               *schema.CsrfPolicy                     `protobuf:"bytes,80,opt,name=csrf_policy,json=csrfPolicy,proto3" json:"csrf_policy,omitempty"`
	DnsProxyConfiguration    *DNSProxyConfiguration                 `protobuf:"bytes,1200,opt,name=dns_proxy_configuration,json=dnsProxyConfiguration,proto3" json:"dns_proxy_configuration,omitempty"`
	// Types that are valid to be assigned to DnsZoneStateChoice:
	//
	//	*GetSpecType_NotReady
	//	*GetSpecType_Ready
	DnsZoneStateChoice isGetSpecType_DnsZoneStateChoice `protobuf_oneof:"dns_zone_state_choice"`
	SlowDdosMitigation *SlowDDoSMitigation              `protobuf:"bytes,83,opt,name=slow_ddos_mitigation,json=slowDdosMitigation,proto3" json:"slow_ddos_mitigation,omitempty"`
	ApiSpec            *ApiSpec                         `protobuf:"bytes,84,opt,name=api_spec,json=apiSpec,proto3" json:"api_spec,omitempty"`
	DomainCertMap      map[string]*DomainCertificates   `protobuf:"bytes,88,rep,name=domain_cert_map,json=domainCertMap,proto3" json:"domain_cert_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_df61af5ea37a6592, []int{29}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

type isGetSpecType_TlsCertificatesChoice interface {
	isGetSpecType_TlsCertificatesChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_ChallengeType interface {
	isGetSpecType_ChallengeType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_AuthenticationChoice interface {
	isGetSpecType_AuthenticationChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_ServerHeaderChoice interface {
	isGetSpecType_ServerHeaderChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_PathNormalizeChoice interface {
	isGetSpecType_PathNormalizeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_StrictSniHostHeaderCheckChoice interface {
	isGetSpecType_StrictSniHostHeaderCheckChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_DefaultLbChoice interface {
	isGetSpecType_DefaultLbChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_DnsZoneStateChoice interface {
	isGetSpecType_DnsZoneStateChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_TlsParameters struct {
	TlsParameters *schema.DownstreamTlsParamsType `protobuf:"bytes,9,opt,name=tls_parameters,json=tlsParameters,proto3,oneof" json:"tls_parameters,omitempty"`
}
type GetSpecType_TlsCertParams struct {
	TlsCertParams *schema.CertificateParamsType `protobuf:"bytes,86,opt,name=tls_cert_params,json=tlsCertParams,proto3,oneof" json:"tls_cert_params,omitempty"`
}
type GetSpecType_NoChallenge struct {
	NoChallenge *schema.Empty `protobuf:"bytes,31,opt,name=no_challenge,json=noChallenge,proto3,oneof" json:"no_challenge,omitempty"`
}
type GetSpecType_JsChallenge struct {
	JsChallenge *JavascriptChallengeType `protobuf:"bytes,24,opt,name=js_challenge,json=jsChallenge,proto3,oneof" json:"js_challenge,omitempty"`
}
type GetSpecType_CaptchaChallenge struct {
	CaptchaChallenge *CaptchaChallengeType `protobuf:"bytes,29,opt,name=captcha_challenge,json=captchaChallenge,proto3,oneof" json:"captcha_challenge,omitempty"`
}
type GetSpecType_NoAuthentication struct {
	NoAuthentication *schema.Empty `protobuf:"bytes,39,opt,name=no_authentication,json=noAuthentication,proto3,oneof" json:"no_authentication,omitempty"`
}
type GetSpecType_Authentication struct {
	Authentication *AuthenticationDetails `protobuf:"bytes,40,opt,name=authentication,proto3,oneof" json:"authentication,omitempty"`
}
type GetSpecType_DefaultHeader struct {
	DefaultHeader *schema.Empty `protobuf:"bytes,43,opt,name=default_header,json=defaultHeader,proto3,oneof" json:"default_header,omitempty"`
}
type GetSpecType_ServerName struct {
	ServerName string `protobuf:"bytes,44,opt,name=server_name,json=serverName,proto3,oneof" json:"server_name,omitempty"`
}
type GetSpecType_AppendServerName struct {
	AppendServerName string `protobuf:"bytes,45,opt,name=append_server_name,json=appendServerName,proto3,oneof" json:"append_server_name,omitempty"`
}
type GetSpecType_PassThrough struct {
	PassThrough *schema.Empty `protobuf:"bytes,46,opt,name=pass_through,json=passThrough,proto3,oneof" json:"pass_through,omitempty"`
}
type GetSpecType_EnablePathNormalize struct {
	EnablePathNormalize *schema.Empty `protobuf:"bytes,48,opt,name=enable_path_normalize,json=enablePathNormalize,proto3,oneof" json:"enable_path_normalize,omitempty"`
}
type GetSpecType_DisablePathNormalize struct {
	DisablePathNormalize *schema.Empty `protobuf:"bytes,49,opt,name=disable_path_normalize,json=disablePathNormalize,proto3,oneof" json:"disable_path_normalize,omitempty"`
}
type GetSpecType_EnableStrictSniHostHeaderCheck struct {
	EnableStrictSniHostHeaderCheck *schema.Empty `protobuf:"bytes,51,opt,name=enable_strict_sni_host_header_check,json=enableStrictSniHostHeaderCheck,proto3,oneof" json:"enable_strict_sni_host_header_check,omitempty"`
}
type GetSpecType_AdditionalDomains struct {
	AdditionalDomains *schema.DomainNameList `protobuf:"bytes,53,opt,name=additional_domains,json=additionalDomains,proto3,oneof" json:"additional_domains,omitempty"`
}
type GetSpecType_NonDefaultLoadbalancer struct {
	NonDefaultLoadbalancer *schema.Empty `protobuf:"bytes,77,opt,name=non_default_loadbalancer,json=nonDefaultLoadbalancer,proto3,oneof" json:"non_default_loadbalancer,omitempty"`
}
type GetSpecType_DefaultLoadbalancer struct {
	DefaultLoadbalancer *schema.Empty `protobuf:"bytes,78,opt,name=default_loadbalancer,json=defaultLoadbalancer,proto3,oneof" json:"default_loadbalancer,omitempty"`
}
type GetSpecType_NotReady struct {
	NotReady *schema.Empty `protobuf:"bytes,1023,opt,name=not_ready,json=notReady,proto3,oneof" json:"not_ready,omitempty"`
}
type GetSpecType_Ready struct {
	Ready *schema.Empty `protobuf:"bytes,1024,opt,name=ready,proto3,oneof" json:"ready,omitempty"`
}

func (*GetSpecType_TlsParameters) isGetSpecType_TlsCertificatesChoice()                           {}
func (*GetSpecType_TlsCertParams) isGetSpecType_TlsCertificatesChoice()                           {}
func (*GetSpecType_NoChallenge) isGetSpecType_ChallengeType()                                     {}
func (*GetSpecType_JsChallenge) isGetSpecType_ChallengeType()                                     {}
func (*GetSpecType_CaptchaChallenge) isGetSpecType_ChallengeType()                                {}
func (*GetSpecType_NoAuthentication) isGetSpecType_AuthenticationChoice()                         {}
func (*GetSpecType_Authentication) isGetSpecType_AuthenticationChoice()                           {}
func (*GetSpecType_DefaultHeader) isGetSpecType_ServerHeaderChoice()                              {}
func (*GetSpecType_ServerName) isGetSpecType_ServerHeaderChoice()                                 {}
func (*GetSpecType_AppendServerName) isGetSpecType_ServerHeaderChoice()                           {}
func (*GetSpecType_PassThrough) isGetSpecType_ServerHeaderChoice()                                {}
func (*GetSpecType_EnablePathNormalize) isGetSpecType_PathNormalizeChoice()                       {}
func (*GetSpecType_DisablePathNormalize) isGetSpecType_PathNormalizeChoice()                      {}
func (*GetSpecType_EnableStrictSniHostHeaderCheck) isGetSpecType_StrictSniHostHeaderCheckChoice() {}
func (*GetSpecType_AdditionalDomains) isGetSpecType_StrictSniHostHeaderCheckChoice()              {}
func (*GetSpecType_NonDefaultLoadbalancer) isGetSpecType_DefaultLbChoice()                        {}
func (*GetSpecType_DefaultLoadbalancer) isGetSpecType_DefaultLbChoice()                           {}
func (*GetSpecType_NotReady) isGetSpecType_DnsZoneStateChoice()                                   {}
func (*GetSpecType_Ready) isGetSpecType_DnsZoneStateChoice()                                      {}

func (m *GetSpecType) GetTlsCertificatesChoice() isGetSpecType_TlsCertificatesChoice {
	if m != nil {
		return m.TlsCertificatesChoice
	}
	return nil
}
func (m *GetSpecType) GetChallengeType() isGetSpecType_ChallengeType {
	if m != nil {
		return m.ChallengeType
	}
	return nil
}
func (m *GetSpecType) GetAuthenticationChoice() isGetSpecType_AuthenticationChoice {
	if m != nil {
		return m.AuthenticationChoice
	}
	return nil
}
func (m *GetSpecType) GetServerHeaderChoice() isGetSpecType_ServerHeaderChoice {
	if m != nil {
		return m.ServerHeaderChoice
	}
	return nil
}
func (m *GetSpecType) GetPathNormalizeChoice() isGetSpecType_PathNormalizeChoice {
	if m != nil {
		return m.PathNormalizeChoice
	}
	return nil
}
func (m *GetSpecType) GetStrictSniHostHeaderCheckChoice() isGetSpecType_StrictSniHostHeaderCheckChoice {
	if m != nil {
		return m.StrictSniHostHeaderCheckChoice
	}
	return nil
}
func (m *GetSpecType) GetDefaultLbChoice() isGetSpecType_DefaultLbChoice {
	if m != nil {
		return m.DefaultLbChoice
	}
	return nil
}
func (m *GetSpecType) GetDnsZoneStateChoice() isGetSpecType_DnsZoneStateChoice {
	if m != nil {
		return m.DnsZoneStateChoice
	}
	return nil
}

func (m *GetSpecType) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *GetSpecType) GetRoutes() []*schema.ObjectRefType {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *GetSpecType) GetAdvertisePolicies() []*schema.ObjectRefType {
	if m != nil {
		return m.AdvertisePolicies
	}
	return nil
}

func (m *GetSpecType) GetRequestHeadersToAdd() []*schema.HeaderManipulationOptionType {
	if m != nil {
		return m.RequestHeadersToAdd
	}
	return nil
}

func (m *GetSpecType) GetResponseHeadersToAdd() []*schema.HeaderManipulationOptionType {
	if m != nil {
		return m.ResponseHeadersToAdd
	}
	return nil
}

func (m *GetSpecType) GetRequestHeadersToRemove() []string {
	if m != nil {
		return m.RequestHeadersToRemove
	}
	return nil
}

func (m *GetSpecType) GetResponseHeadersToRemove() []string {
	if m != nil {
		return m.ResponseHeadersToRemove
	}
	return nil
}

func (m *GetSpecType) GetTlsParameters() *schema.DownstreamTlsParamsType {
	if x, ok := m.GetTlsCertificatesChoice().(*GetSpecType_TlsParameters); ok {
		return x.TlsParameters
	}
	return nil
}

func (m *GetSpecType) GetTlsCertParams() *schema.CertificateParamsType {
	if x, ok := m.GetTlsCertificatesChoice().(*GetSpecType_TlsCertParams); ok {
		return x.TlsCertParams
	}
	return nil
}

func (m *GetSpecType) GetType() VirtualHostType {
	if m != nil {
		return m.Type
	}
	return VIRTUAL_SERVICE
}

func (m *GetSpecType) GetBufferPolicy() *schema.BufferConfigType {
	if m != nil {
		return m.BufferPolicy
	}
	return nil
}

func (m *GetSpecType) GetCorsPolicy() *schema.CorsPolicy {
	if m != nil {
		return m.CorsPolicy
	}
	return nil
}

func (m *GetSpecType) GetProxy() ProxyType {
	if m != nil {
		return m.Proxy
	}
	return HTTP_PROXY
}

func (m *GetSpecType) GetWafType() *schema.WafType {
	if m != nil {
		return m.WafType
	}
	return nil
}

func (m *GetSpecType) GetDynamicReverseProxy() *DynamicReverseProxyType {
	if m != nil {
		return m.DynamicReverseProxy
	}
	return nil
}

func (m *GetSpecType) GetAddLocation() bool {
	if m != nil {
		return m.AddLocation
	}
	return false
}

func (m *GetSpecType) GetCompressionParams() *CompressionType {
	if m != nil {
		return m.CompressionParams
	}
	return nil
}

func (m *GetSpecType) GetCustomErrors() map[uint32]string {
	if m != nil {
		return m.CustomErrors
	}
	return nil
}

func (m *GetSpecType) GetDisableDefaultErrorPages() bool {
	if m != nil {
		return m.DisableDefaultErrorPages
	}
	return false
}

func (m *GetSpecType) GetMaxRequestHeaderSize() uint32 {
	if m != nil {
		return m.MaxRequestHeaderSize
	}
	return 0
}

func (m *GetSpecType) GetNoChallenge() *schema.Empty {
	if x, ok := m.GetChallengeType().(*GetSpecType_NoChallenge); ok {
		return x.NoChallenge
	}
	return nil
}

func (m *GetSpecType) GetJsChallenge() *JavascriptChallengeType {
	if x, ok := m.GetChallengeType().(*GetSpecType_JsChallenge); ok {
		return x.JsChallenge
	}
	return nil
}

func (m *GetSpecType) GetCaptchaChallenge() *CaptchaChallengeType {
	if x, ok := m.GetChallengeType().(*GetSpecType_CaptchaChallenge); ok {
		return x.CaptchaChallenge
	}
	return nil
}

func (m *GetSpecType) GetUserIdentification() []*schema.ObjectRefType {
	if m != nil {
		return m.UserIdentification
	}
	return nil
}

func (m *GetSpecType) GetRateLimiter() []*schema.ObjectRefType {
	if m != nil {
		return m.RateLimiter
	}
	return nil
}

func (m *GetSpecType) GetRateLimiterAllowedPrefixes() []*schema.ObjectRefType {
	if m != nil {
		return m.RateLimiterAllowedPrefixes
	}
	return nil
}

func (m *GetSpecType) GetRetryPolicy() *schema.RetryPolicyType {
	if m != nil {
		return m.RetryPolicy
	}
	return nil
}

func (m *GetSpecType) GetIdleTimeout() uint32 {
	if m != nil {
		return m.IdleTimeout
	}
	return 0
}

func (m *GetSpecType) GetTemporaryUserBlocking() *TemporaryUserBlockingType {
	if m != nil {
		return m.TemporaryUserBlocking
	}
	return nil
}

func (m *GetSpecType) GetNoAuthentication() *schema.Empty {
	if x, ok := m.GetAuthenticationChoice().(*GetSpecType_NoAuthentication); ok {
		return x.NoAuthentication
	}
	return nil
}

func (m *GetSpecType) GetAuthentication() *AuthenticationDetails {
	if x, ok := m.GetAuthenticationChoice().(*GetSpecType_Authentication); ok {
		return x.Authentication
	}
	return nil
}

func (m *GetSpecType) GetDefaultHeader() *schema.Empty {
	if x, ok := m.GetServerHeaderChoice().(*GetSpecType_DefaultHeader); ok {
		return x.DefaultHeader
	}
	return nil
}

func (m *GetSpecType) GetServerName() string {
	if x, ok := m.GetServerHeaderChoice().(*GetSpecType_ServerName); ok {
		return x.ServerName
	}
	return ""
}

func (m *GetSpecType) GetAppendServerName() string {
	if x, ok := m.GetServerHeaderChoice().(*GetSpecType_AppendServerName); ok {
		return x.AppendServerName
	}
	return ""
}

func (m *GetSpecType) GetPassThrough() *schema.Empty {
	if x, ok := m.GetServerHeaderChoice().(*GetSpecType_PassThrough); ok {
		return x.PassThrough
	}
	return nil
}

func (m *GetSpecType) GetEnablePathNormalize() *schema.Empty {
	if x, ok := m.GetPathNormalizeChoice().(*GetSpecType_EnablePathNormalize); ok {
		return x.EnablePathNormalize
	}
	return nil
}

func (m *GetSpecType) GetDisablePathNormalize() *schema.Empty {
	if x, ok := m.GetPathNormalizeChoice().(*GetSpecType_DisablePathNormalize); ok {
		return x.DisablePathNormalize
	}
	return nil
}

func (m *GetSpecType) GetEnableStrictSniHostHeaderCheck() *schema.Empty {
	if x, ok := m.GetStrictSniHostHeaderCheckChoice().(*GetSpecType_EnableStrictSniHostHeaderCheck); ok {
		return x.EnableStrictSniHostHeaderCheck
	}
	return nil
}

func (m *GetSpecType) GetAdditionalDomains() *schema.DomainNameList {
	if x, ok := m.GetStrictSniHostHeaderCheckChoice().(*GetSpecType_AdditionalDomains); ok {
		return x.AdditionalDomains
	}
	return nil
}

func (m *GetSpecType) GetNonDefaultLoadbalancer() *schema.Empty {
	if x, ok := m.GetDefaultLbChoice().(*GetSpecType_NonDefaultLoadbalancer); ok {
		return x.NonDefaultLoadbalancer
	}
	return nil
}

func (m *GetSpecType) GetDefaultLoadbalancer() *schema.Empty {
	if x, ok := m.GetDefaultLbChoice().(*GetSpecType_DefaultLoadbalancer); ok {
		return x.DefaultLoadbalancer
	}
	return nil
}

func (m *GetSpecType) GetHeaderTransformationType() *schema.HeaderTransformationType {
	if m != nil {
		return m.HeaderTransformationType
	}
	return nil
}

func (m *GetSpecType) GetCookiesToModify() []*schema.CookieManipulationOptionType {
	if m != nil {
		return m.CookiesToModify
	}
	return nil
}

func (m *GetSpecType) GetConnectionIdleTimeout() uint32 {
	if m != nil {
		return m.ConnectionIdleTimeout
	}
	return 0
}

func (m *GetSpecType) GetState() VirtualHostState {
	if m != nil {
		return m.State
	}
	return VIRTUAL_HOST_READY
}

func (m *GetSpecType) GetHostName() string {
	if m != nil {
		return m.HostName
	}
	return ""
}

func (m *GetSpecType) GetDnsInfo() []*virtual_host_dns_info.DnsInfo {
	if m != nil {
		return m.DnsInfo
	}
	return nil
}

func (m *GetSpecType) GetAutoCertInfo() *AutoCertInfoType {
	if m != nil {
		return m.AutoCertInfo
	}
	return nil
}

func (m *GetSpecType) GetAutoCertErrorMsg() string {
	if m != nil {
		return m.AutoCertErrorMsg
	}
	return ""
}

func (m *GetSpecType) GetDisableDnsResolve() bool {
	if m != nil {
		return m.DisableDnsResolve
	}
	return false
}

func (m *GetSpecType) GetCdnService() *CdnServiceType {
	if m != nil {
		return m.CdnService
	}
	return nil
}

func (m *GetSpecType) GetCsrfPolicy() *schema.CsrfPolicy {
	if m != nil {
		return m.CsrfPolicy
	}
	return nil
}

func (m *GetSpecType) GetDnsProxyConfiguration() *DNSProxyConfiguration {
	if m != nil {
		return m.DnsProxyConfiguration
	}
	return nil
}

func (m *GetSpecType) GetNotReady() *schema.Empty {
	if x, ok := m.GetDnsZoneStateChoice().(*GetSpecType_NotReady); ok {
		return x.NotReady
	}
	return nil
}

func (m *GetSpecType) GetReady() *schema.Empty {
	if x, ok := m.GetDnsZoneStateChoice().(*GetSpecType_Ready); ok {
		return x.Ready
	}
	return nil
}

func (m *GetSpecType) GetSlowDdosMitigation() *SlowDDoSMitigation {
	if m != nil {
		return m.SlowDdosMitigation
	}
	return nil
}

func (m *GetSpecType) GetApiSpec() *ApiSpec {
	if m != nil {
		return m.ApiSpec
	}
	return nil
}

func (m *GetSpecType) GetDomainCertMap() map[string]*DomainCertificates {
	if m != nil {
		return m.DomainCertMap
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetSpecType_TlsParameters)(nil),
		(*GetSpecType_TlsCertParams)(nil),
		(*GetSpecType_NoChallenge)(nil),
		(*GetSpecType_JsChallenge)(nil),
		(*GetSpecType_CaptchaChallenge)(nil),
		(*GetSpecType_NoAuthentication)(nil),
		(*GetSpecType_Authentication)(nil),
		(*GetSpecType_DefaultHeader)(nil),
		(*GetSpecType_ServerName)(nil),
		(*GetSpecType_AppendServerName)(nil),
		(*GetSpecType_PassThrough)(nil),
		(*GetSpecType_EnablePathNormalize)(nil),
		(*GetSpecType_DisablePathNormalize)(nil),
		(*GetSpecType_EnableStrictSniHostHeaderCheck)(nil),
		(*GetSpecType_AdditionalDomains)(nil),
		(*GetSpecType_NonDefaultLoadbalancer)(nil),
		(*GetSpecType_DefaultLoadbalancer)(nil),
		(*GetSpecType_NotReady)(nil),
		(*GetSpecType_Ready)(nil),
	}
}

func init() {
	proto.RegisterEnum("ves.io.schema.virtual_host.VirtualHostType", VirtualHostType_name, VirtualHostType_value)
	golang_proto.RegisterEnum("ves.io.schema.virtual_host.VirtualHostType", VirtualHostType_name, VirtualHostType_value)
	proto.RegisterEnum("ves.io.schema.virtual_host.ProxyType", ProxyType_name, ProxyType_value)
	golang_proto.RegisterEnum("ves.io.schema.virtual_host.ProxyType", ProxyType_name, ProxyType_value)
	proto.RegisterEnum("ves.io.schema.virtual_host.VirtualHostState", VirtualHostState_name, VirtualHostState_value)
	golang_proto.RegisterEnum("ves.io.schema.virtual_host.VirtualHostState", VirtualHostState_name, VirtualHostState_value)
	proto.RegisterEnum("ves.io.schema.virtual_host.CertificationState", CertificationState_name, CertificationState_value)
	golang_proto.RegisterEnum("ves.io.schema.virtual_host.CertificationState", CertificationState_name, CertificationState_value)
	proto.RegisterEnum("ves.io.schema.virtual_host.BotDefenseMode", BotDefenseMode_name, BotDefenseMode_value)
	golang_proto.RegisterEnum("ves.io.schema.virtual_host.BotDefenseMode", BotDefenseMode_name, BotDefenseMode_value)
	proto.RegisterType((*VirtualHostID)(nil), "ves.io.schema.virtual_host.VirtualHostID")
	golang_proto.RegisterType((*VirtualHostID)(nil), "ves.io.schema.virtual_host.VirtualHostID")
	proto.RegisterType((*VerStatusType)(nil), "ves.io.schema.virtual_host.VerStatusType")
	golang_proto.RegisterType((*VerStatusType)(nil), "ves.io.schema.virtual_host.VerStatusType")
	proto.RegisterType((*JavaScriptConfigType)(nil), "ves.io.schema.virtual_host.JavaScriptConfigType")
	golang_proto.RegisterType((*JavaScriptConfigType)(nil), "ves.io.schema.virtual_host.JavaScriptConfigType")
	proto.RegisterType((*DynamicReverseProxyType)(nil), "ves.io.schema.virtual_host.DynamicReverseProxyType")
	golang_proto.RegisterType((*DynamicReverseProxyType)(nil), "ves.io.schema.virtual_host.DynamicReverseProxyType")
	proto.RegisterType((*CompressionType)(nil), "ves.io.schema.virtual_host.CompressionType")
	golang_proto.RegisterType((*CompressionType)(nil), "ves.io.schema.virtual_host.CompressionType")
	proto.RegisterType((*JavascriptChallengeType)(nil), "ves.io.schema.virtual_host.JavascriptChallengeType")
	golang_proto.RegisterType((*JavascriptChallengeType)(nil), "ves.io.schema.virtual_host.JavascriptChallengeType")
	proto.RegisterType((*CaptchaChallengeType)(nil), "ves.io.schema.virtual_host.CaptchaChallengeType")
	golang_proto.RegisterType((*CaptchaChallengeType)(nil), "ves.io.schema.virtual_host.CaptchaChallengeType")
	proto.RegisterType((*TemporaryUserBlockingType)(nil), "ves.io.schema.virtual_host.TemporaryUserBlockingType")
	golang_proto.RegisterType((*TemporaryUserBlockingType)(nil), "ves.io.schema.virtual_host.TemporaryUserBlockingType")
	proto.RegisterType((*DNSRecord)(nil), "ves.io.schema.virtual_host.DNSRecord")
	golang_proto.RegisterType((*DNSRecord)(nil), "ves.io.schema.virtual_host.DNSRecord")
	proto.RegisterType((*AutoCertInfoType)(nil), "ves.io.schema.virtual_host.AutoCertInfoType")
	golang_proto.RegisterType((*AutoCertInfoType)(nil), "ves.io.schema.virtual_host.AutoCertInfoType")
	proto.RegisterType((*AuthenticationDetails)(nil), "ves.io.schema.virtual_host.AuthenticationDetails")
	golang_proto.RegisterType((*AuthenticationDetails)(nil), "ves.io.schema.virtual_host.AuthenticationDetails")
	proto.RegisterType((*PolicyBasedChallenge)(nil), "ves.io.schema.virtual_host.PolicyBasedChallenge")
	golang_proto.RegisterType((*PolicyBasedChallenge)(nil), "ves.io.schema.virtual_host.PolicyBasedChallenge")
	proto.RegisterType((*ShapeBotDefenseConfigType)(nil), "ves.io.schema.virtual_host.ShapeBotDefenseConfigType")
	golang_proto.RegisterType((*ShapeBotDefenseConfigType)(nil), "ves.io.schema.virtual_host.ShapeBotDefenseConfigType")
	proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.virtual_host.ShapeBotDefenseConfigType.BlockingPagesEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.virtual_host.ShapeBotDefenseConfigType.BlockingPagesEntry")
	proto.RegisterType((*ServiceDomain)(nil), "ves.io.schema.virtual_host.ServiceDomain")
	golang_proto.RegisterType((*ServiceDomain)(nil), "ves.io.schema.virtual_host.ServiceDomain")
	proto.RegisterType((*CdnServiceType)(nil), "ves.io.schema.virtual_host.CdnServiceType")
	golang_proto.RegisterType((*CdnServiceType)(nil), "ves.io.schema.virtual_host.CdnServiceType")
	proto.RegisterType((*ClientIPHeaders)(nil), "ves.io.schema.virtual_host.ClientIPHeaders")
	golang_proto.RegisterType((*ClientIPHeaders)(nil), "ves.io.schema.virtual_host.ClientIPHeaders")
	proto.RegisterType((*DNSProxyConfiguration)(nil), "ves.io.schema.virtual_host.DNSProxyConfiguration")
	golang_proto.RegisterType((*DNSProxyConfiguration)(nil), "ves.io.schema.virtual_host.DNSProxyConfiguration")
	proto.RegisterType((*DNSDDoSProfile)(nil), "ves.io.schema.virtual_host.DNSDDoSProfile")
	golang_proto.RegisterType((*DNSDDoSProfile)(nil), "ves.io.schema.virtual_host.DNSDDoSProfile")
	proto.RegisterType((*DNSCacheProfile)(nil), "ves.io.schema.virtual_host.DNSCacheProfile")
	golang_proto.RegisterType((*DNSCacheProfile)(nil), "ves.io.schema.virtual_host.DNSCacheProfile")
	proto.RegisterType((*SlowDDoSMitigation)(nil), "ves.io.schema.virtual_host.SlowDDoSMitigation")
	golang_proto.RegisterType((*SlowDDoSMitigation)(nil), "ves.io.schema.virtual_host.SlowDDoSMitigation")
	proto.RegisterType((*DomainCertificates)(nil), "ves.io.schema.virtual_host.DomainCertificates")
	golang_proto.RegisterType((*DomainCertificates)(nil), "ves.io.schema.virtual_host.DomainCertificates")
	proto.RegisterType((*ApiSpec)(nil), "ves.io.schema.virtual_host.ApiSpec")
	golang_proto.RegisterType((*ApiSpec)(nil), "ves.io.schema.virtual_host.ApiSpec")
	proto.RegisterType((*OpenApiValidationSettings)(nil), "ves.io.schema.virtual_host.OpenApiValidationSettings")
	golang_proto.RegisterType((*OpenApiValidationSettings)(nil), "ves.io.schema.virtual_host.OpenApiValidationSettings")
	proto.RegisterType((*HttpProtocolOptions)(nil), "ves.io.schema.virtual_host.HttpProtocolOptions")
	golang_proto.RegisterType((*HttpProtocolOptions)(nil), "ves.io.schema.virtual_host.HttpProtocolOptions")
	proto.RegisterType((*HttpRedirectOptions)(nil), "ves.io.schema.virtual_host.HttpRedirectOptions")
	golang_proto.RegisterType((*HttpRedirectOptions)(nil), "ves.io.schema.virtual_host.HttpRedirectOptions")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.virtual_host.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.virtual_host.GlobalSpecType")
	proto.RegisterMapType((map[uint32]string)(nil), "ves.io.schema.virtual_host.GlobalSpecType.CustomErrorsEntry")
	golang_proto.RegisterMapType((map[uint32]string)(nil), "ves.io.schema.virtual_host.GlobalSpecType.CustomErrorsEntry")
	proto.RegisterMapType((map[string]*DomainCertificates)(nil), "ves.io.schema.virtual_host.GlobalSpecType.DomainCertMapEntry")
	golang_proto.RegisterMapType((map[string]*DomainCertificates)(nil), "ves.io.schema.virtual_host.GlobalSpecType.DomainCertMapEntry")
	proto.RegisterType((*DNSVHostStatusType)(nil), "ves.io.schema.virtual_host.DNSVHostStatusType")
	golang_proto.RegisterType((*DNSVHostStatusType)(nil), "ves.io.schema.virtual_host.DNSVHostStatusType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.virtual_host.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.virtual_host.CreateSpecType")
	proto.RegisterMapType((map[uint32]string)(nil), "ves.io.schema.virtual_host.CreateSpecType.CustomErrorsEntry")
	golang_proto.RegisterMapType((map[uint32]string)(nil), "ves.io.schema.virtual_host.CreateSpecType.CustomErrorsEntry")
	proto.RegisterMapType((map[string]*DomainCertificates)(nil), "ves.io.schema.virtual_host.CreateSpecType.DomainCertMapEntry")
	golang_proto.RegisterMapType((map[string]*DomainCertificates)(nil), "ves.io.schema.virtual_host.CreateSpecType.DomainCertMapEntry")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.virtual_host.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.virtual_host.ReplaceSpecType")
	proto.RegisterMapType((map[uint32]string)(nil), "ves.io.schema.virtual_host.ReplaceSpecType.CustomErrorsEntry")
	golang_proto.RegisterMapType((map[uint32]string)(nil), "ves.io.schema.virtual_host.ReplaceSpecType.CustomErrorsEntry")
	proto.RegisterMapType((map[string]*DomainCertificates)(nil), "ves.io.schema.virtual_host.ReplaceSpecType.DomainCertMapEntry")
	golang_proto.RegisterMapType((map[string]*DomainCertificates)(nil), "ves.io.schema.virtual_host.ReplaceSpecType.DomainCertMapEntry")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.virtual_host.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.virtual_host.GetSpecType")
	proto.RegisterMapType((map[uint32]string)(nil), "ves.io.schema.virtual_host.GetSpecType.CustomErrorsEntry")
	golang_proto.RegisterMapType((map[uint32]string)(nil), "ves.io.schema.virtual_host.GetSpecType.CustomErrorsEntry")
	proto.RegisterMapType((map[string]*DomainCertificates)(nil), "ves.io.schema.virtual_host.GetSpecType.DomainCertMapEntry")
	golang_proto.RegisterMapType((map[string]*DomainCertificates)(nil), "ves.io.schema.virtual_host.GetSpecType.DomainCertMapEntry")
}

func init() {
	proto.RegisterFile("ves.io/schema/virtual_host/types.proto", fileDescriptor_df61af5ea37a6592)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/virtual_host/types.proto", fileDescriptor_df61af5ea37a6592)
}

var fileDescriptor_df61af5ea37a6592 = []byte{
	// 7472 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x7d, 0x5b, 0x6c, 0x1c, 0x57,
	0x9a, 0x1e, 0x0f, 0xd9, 0xcd, 0x6e, 0x1e, 0xde, 0x8a, 0x87, 0xb7, 0x12, 0x25, 0x53, 0x2d, 0xca,
	0x96, 0x68, 0xba, 0xc5, 0x4b, 0x93, 0x14, 0x45, 0xcd, 0xd8, 0xe3, 0x6e, 0x36, 0x2d, 0x92, 0xa6,
	0x28, 0xba, 0x48, 0xd3, 0x97, 0x99, 0x9d, 0x72, 0xb1, 0xeb, 0x90, 0x2c, 0xa9, 0x58, 0xd5, 0xae,
	0xaa, 0xa6, 0xc4, 0x49, 0x08, 0x78, 0x1d, 0x24, 0xd9, 0xf8, 0x61, 0x77, 0xe2, 0x04, 0x08, 0xe0,
	0xa7, 0x64, 0xf7, 0x21, 0x89, 0x16, 0x08, 0xf6, 0x25, 0x40, 0xb2, 0xed, 0x00, 0xc2, 0x00, 0x83,
	0x1d, 0xec, 0xc3, 0x86, 0x41, 0x16, 0x88, 0x31, 0xc8, 0x83, 0x87, 0x83, 0x05, 0xbc, 0x93, 0x64,
	0x63, 0x4c, 0x36, 0x59, 0xc7, 0xc9, 0xee, 0x04, 0xe7, 0x52, 0xd5, 0x55, 0xd5, 0xd5, 0x4d, 0x8a,
	0x92, 0x27, 0x73, 0xe1, 0x0b, 0xd1, 0x7d, 0xce, 0xff, 0x7f, 0xe7, 0x52, 0xe7, 0xfc, 0xe7, 0x3f,
	0xdf, 0xff, 0x57, 0x13, 0x5e, 0xd9, 0xc3, 0xf6, 0xa8, 0x66, 0x8e, 0xd9, 0x85, 0x1d, 0xbc, 0xab,
	0x8c, 0xed, 0x69, 0x96, 0x53, 0x52, 0x74, 0x79, 0xc7, 0xb4, 0x9d, 0x31, 0x67, 0xbf, 0x88, 0xed,
	0xd1, 0xa2, 0x65, 0x3a, 0x26, 0x1a, 0x60, 0x72, 0xa3, 0x4c, 0x6e, 0xd4, 0x2f, 0x37, 0x70, 0x6d,
	0x5b, 0x73, 0x76, 0x4a, 0x9b, 0xa3, 0x05, 0x73, 0x77, 0x6c, 0xdb, 0xdc, 0x36, 0xc7, 0xa8, 0xca,
	0x66, 0x69, 0x8b, 0x7e, 0xa3, 0x5f, 0xe8, 0x27, 0x06, 0x35, 0x70, 0x61, 0xdb, 0x34, 0xb7, 0x75,
	0x5c, 0x91, 0xb2, 0x1d, 0xab, 0x54, 0x70, 0x78, 0xed, 0xc5, 0x70, 0xad, 0xa3, 0xed, 0x62, 0xdb,
	0x51, 0x76, 0x8b, 0x5c, 0x60, 0x38, 0xd8, 0x63, 0xa5, 0xe4, 0xec, 0x60, 0xc3, 0xd1, 0x0a, 0x8a,
	0xa3, 0x99, 0x86, 0xbf, 0xcf, 0x03, 0x83, 0x41, 0xc9, 0x02, 0xb6, 0x1c, 0xd9, 0x5f, 0x7f, 0x29,
	0x54, 0xaf, 0x97, 0x6c, 0x07, 0x5b, 0x01, 0x88, 0xfe, 0xa0, 0x88, 0x81, 0xdd, 0x6e, 0x9e, 0x0f,
	0x56, 0x98, 0x45, 0xd2, 0xba, 0x1d, 0xdd, 0x45, 0x1b, 0x5b, 0x7b, 0x5a, 0x01, 0xcb, 0x45, 0x53,
	0xd7, 0x0a, 0xfb, 0x01, 0xfc, 0x73, 0x41, 0x49, 0x7f, 0xd5, 0x85, 0xd0, 0x93, 0x51, 0x74, 0x4d,
	0x55, 0x1c, 0xcc, 0x6b, 0x53, 0xe1, 0xe7, 0x86, 0xef, 0xcb, 0xc1, 0x4e, 0x5c, 0xac, 0x96, 0xb0,
	0x03, 0x0d, 0x8c, 0xd7, 0x7e, 0xf4, 0xb2, 0x6a, 0xd8, 0xb2, 0x66, 0x6c, 0x99, 0x63, 0xe6, 0xe6,
	0x5d, 0xec, 0x3e, 0x9b, 0xa1, 0x2c, 0x6c, 0xdf, 0x60, 0x52, 0x0b, 0xa6, 0xed, 0x2c, 0xe6, 0xd1,
	0x05, 0xd8, 0x62, 0x28, 0xbb, 0xd8, 0x2e, 0x2a, 0x05, 0x2c, 0x82, 0x14, 0x18, 0x6e, 0x91, 0x2a,
	0x05, 0x08, 0xc1, 0x18, 0xf9, 0x22, 0x36, 0xd2, 0x0a, 0xfa, 0x79, 0xe8, 0xb3, 0x38, 0x6c, 0xdf,
	0xc0, 0xd6, 0x9a, 0xa3, 0x38, 0x25, 0x7b, 0x7d, 0xbf, 0x88, 0xd1, 0x3f, 0x02, 0xb0, 0xbf, 0x60,
	0x2a, 0x3a, 0xb6, 0x0b, 0x58, 0x95, 0xfd, 0xbd, 0xb0, 0x45, 0x90, 0x6a, 0x1a, 0x6e, 0xcd, 0x3c,
	0x3f, 0x5a, 0x7b, 0xf1, 0x8d, 0x06, 0x3a, 0x94, 0x1b, 0xff, 0xe4, 0x00, 0x7c, 0x56, 0x06, 0xe0,
	0x0f, 0xff, 0xfc, 0x51, 0x13, 0xfc, 0x10, 0x24, 0x86, 0xe2, 0x56, 0xd3, 0xf0, 0x7b, 0x8d, 0xe4,
	0x6b, 0xcb, 0x87, 0xa0, 0x79, 0x28, 0x66, 0x35, 0xa6, 0x68, 0x65, 0xfc, 0x43, 0xd0, 0x28, 0x02,
	0x11, 0x48, 0xbd, 0x5e, 0xdb, 0x3e, 0x24, 0x1b, 0x7d, 0x04, 0xe0, 0x79, 0xc3, 0x34, 0xe4, 0x5a,
	0x3d, 0x6b, 0xfc, 0xea, 0x7b, 0x26, 0x1a, 0xa6, 0x31, 0x17, 0xd9, 0xb9, 0xdb, 0x50, 0x50, 0xd4,
	0x3d, 0x6c, 0x39, 0x9a, 0xed, 0xae, 0x2a, 0xb1, 0x29, 0x05, 0x86, 0x5b, 0x33, 0x43, 0x55, 0x1d,
	0xc2, 0xf7, 0xed, 0xd1, 0x3b, 0xf4, 0x21, 0x4a, 0x78, 0x8b, 0x4c, 0xb8, 0xd4, 0xe9, 0xe9, 0xae,
	0x52, 0x55, 0xf4, 0x16, 0x14, 0x7c, 0xc3, 0x64, 0xe3, 0x8b, 0xd1, 0xf1, 0x9d, 0x00, 0x2e, 0x07,
	0x2b, 0x9d, 0x96, 0x3a, 0x2b, 0x93, 0x49, 0x61, 0xd0, 0x3b, 0xb0, 0x27, 0x34, 0x8b, 0x0c, 0x3e,
	0x7e, 0x2a, 0x78, 0x14, 0x98, 0x11, 0x8a, 0x74, 0xf3, 0x9f, 0x80, 0x3f, 0x2e, 0x83, 0x0f, 0x01,
	0xbc, 0x02, 0x85, 0xac, 0x3b, 0xae, 0x14, 0x1b, 0xd8, 0x00, 0xaa, 0x9e, 0x27, 0x38, 0x06, 0xfb,
	0x3d, 0x88, 0x14, 0x9f, 0xd5, 0x14, 0x9d, 0xd6, 0x5c, 0x4f, 0xf5, 0x3c, 0x08, 0x71, 0x38, 0x03,
	0xcf, 0xaf, 0x98, 0xc6, 0xb5, 0x42, 0x0d, 0x25, 0x31, 0x7a, 0x84, 0x42, 0x7c, 0xe8, 0xf7, 0x00,
	0xec, 0x59, 0x52, 0xf6, 0x94, 0xb5, 0x82, 0xa5, 0x15, 0x9d, 0x39, 0xd3, 0xd8, 0xd2, 0xb6, 0xe9,
	0x8a, 0xbf, 0x04, 0xdb, 0x0a, 0x4a, 0x61, 0x07, 0xcb, 0x45, 0x0b, 0x6f, 0x69, 0x0f, 0xf8, 0xc6,
	0x69, 0xa5, 0x65, 0xab, 0xb4, 0x08, 0x7d, 0x1d, 0xb6, 0xdb, 0x54, 0x4d, 0x2e, 0x50, 0x3d, 0xba,
	0x87, 0x5a, 0x33, 0xfd, 0xa3, 0xcc, 0x3a, 0x8e, 0xba, 0xd6, 0x71, 0x74, 0x8d, 0xda, 0x4e, 0xa9,
	0xcd, 0xf6, 0x35, 0x82, 0x46, 0x60, 0x57, 0xa1, 0x64, 0x3b, 0xe6, 0xae, 0xcc, 0x41, 0x4a, 0x96,
	0x4e, 0x17, 0x48, 0x8b, 0xd4, 0xc9, 0x2a, 0x58, 0x9f, 0x5e, 0xb7, 0xf4, 0xa1, 0x3f, 0x6b, 0x84,
	0xfd, 0xf9, 0x7d, 0x43, 0xd9, 0xd5, 0x0a, 0x12, 0xde, 0xc3, 0x96, 0x8d, 0x57, 0x2d, 0xf3, 0xc1,
	0x3e, 0xed, 0xe8, 0xcb, 0xf0, 0x82, 0x85, 0x6d, 0x53, 0xdf, 0xc3, 0x32, 0x36, 0xd4, 0xa2, 0xa9,
	0x19, 0x8e, 0xac, 0x32, 0x59, 0x45, 0xd7, 0xf7, 0x69, 0xc7, 0x93, 0xd2, 0x00, 0x97, 0x99, 0xe7,
	0x22, 0xf9, 0x8a, 0x04, 0x7a, 0x0b, 0xf6, 0xd3, 0xda, 0x12, 0xb1, 0x4c, 0xb2, 0x81, 0x9d, 0xfb,
	0xa6, 0x75, 0x8f, 0x1a, 0x61, 0x3a, 0xa2, 0x8e, 0xcc, 0xa5, 0xd0, 0x12, 0xe0, 0x93, 0xbb, 0xc2,
	0x24, 0xe9, 0x7a, 0xed, 0xad, 0x20, 0xf8, 0x8a, 0x91, 0x0c, 0x51, 0x35, 0xb4, 0xd8, 0x44, 0x17,
	0xd6, 0x85, 0x10, 0x6a, 0x70, 0x49, 0xa1, 0x87, 0x07, 0x9d, 0xee, 0x4e, 0xe5, 0x7a, 0x52, 0x57,
	0x55, 0x23, 0xe8, 0x15, 0x88, 0x0a, 0xa6, 0x61, 0xe0, 0x02, 0x6d, 0x80, 0x1c, 0x43, 0x66, 0xc9,
	0x11, 0xe3, 0x29, 0x30, 0xdc, 0x9e, 0xeb, 0xff, 0x61, 0x19, 0xc4, 0x32, 0xe3, 0xe3, 0xe3, 0xbf,
	0xf5, 0x31, 0x68, 0x20, 0x2b, 0xb4, 0x79, 0x24, 0x26, 0x3e, 0xfa, 0xf7, 0xcf, 0x4a, 0x5d, 0x15,
	0x95, 0x75, 0xa6, 0xb1, 0x14, 0x4b, 0xc6, 0x84, 0xf8, 0xd0, 0x3f, 0x6c, 0x84, 0x9d, 0x73, 0xe6,
	0x6e, 0xd1, 0xc2, 0xb6, 0x4d, 0x2a, 0xc9, 0x10, 0xc6, 0x61, 0x47, 0xc1, 0x34, 0x1c, 0x6c, 0x38,
	0xb2, 0x8e, 0x8d, 0x6d, 0x67, 0x87, 0xce, 0x68, 0x7b, 0xae, 0x85, 0x20, 0xc6, 0x46, 0x1a, 0x87,
	0x07, 0xa5, 0x76, 0x2e, 0xb0, 0x4c, 0xeb, 0xd1, 0x3a, 0x6c, 0x73, 0x35, 0xf8, 0x24, 0x36, 0x0d,
	0xb7, 0xe4, 0x26, 0x4e, 0x64, 0x54, 0x84, 0x8c, 0x6f, 0x2b, 0xb5, 0x72, 0x18, 0xda, 0x8f, 0x49,
	0xd8, 0xa7, 0x6a, 0xb6, 0xb2, 0xa9, 0x63, 0xd9, 0x34, 0x64, 0xec, 0x28, 0xdb, 0xf2, 0x0e, 0x56,
	0x54, 0x6c, 0xd1, 0x45, 0x93, 0x94, 0xba, 0x79, 0xed, 0x1d, 0x63, 0xde, 0x51, 0xb6, 0x17, 0x68,
	0x15, 0xca, 0xc2, 0x67, 0x2c, 0xbc, 0x6b, 0xee, 0x61, 0x59, 0x29, 0x14, 0x70, 0xd1, 0x91, 0xb1,
	0x51, 0x30, 0x55, 0xcd, 0xf0, 0x74, 0x63, 0xee, 0xea, 0x20, 0x42, 0x59, 0x2a, 0x33, 0xcf, 0x45,
	0x18, 0xc4, 0xd0, 0x3f, 0x6b, 0x84, 0xfd, 0x64, 0x87, 0xf0, 0xc5, 0xbb, 0xa3, 0xe8, 0x64, 0x1a,
	0x30, 0xed, 0xd3, 0x2b, 0xb0, 0xf3, 0xae, 0xed, 0xae, 0x5f, 0x15, 0xeb, 0xca, 0x3e, 0x5d, 0x31,
	0xed, 0xb9, 0x41, 0x32, 0xf5, 0xd3, 0xe3, 0xe3, 0xe3, 0x5f, 0x94, 0x41, 0x83, 0x3b, 0xfd, 0x2d,
	0x23, 0x09, 0xf1, 0xd3, 0x3f, 0x6d, 0x1a, 0xfe, 0x2c, 0x21, 0xb5, 0xdf, 0xb5, 0xd9, 0xea, 0xce,
	0x13, 0x25, 0x94, 0x83, 0xed, 0x05, 0xd3, 0xbc, 0xa7, 0x61, 0x19, 0x3f, 0x28, 0x6a, 0x16, 0x33,
	0x94, 0xed, 0xb9, 0x67, 0x08, 0xca, 0xe4, 0x75, 0x0f, 0x85, 0xce, 0x52, 0x72, 0xa4, 0x59, 0x7c,
	0xef, 0xf7, 0xe2, 0xc3, 0x40, 0x6a, 0x63, 0x3a, 0xf3, 0x54, 0x05, 0xe5, 0x61, 0x2b, 0xdf, 0x4f,
	0x45, 0x65, 0x1b, 0xd3, 0x81, 0xb5, 0xe4, 0x2e, 0x7f, 0x51, 0x06, 0xb1, 0xdf, 0xfd, 0x18, 0xb4,
	0x2b, 0x76, 0x41, 0xd3, 0xd2, 0xa9, 0x4d, 0xc5, 0xc6, 0xd7, 0xa7, 0x68, 0x67, 0xac, 0x84, 0xf8,
	0xde, 0x7b, 0xb1, 0xef, 0x02, 0x20, 0x41, 0xa6, 0xb7, 0xaa, 0x6c, 0xe3, 0x9b, 0xa3, 0xdf, 0x2b,
	0x83, 0x11, 0x38, 0x0c, 0x2f, 0x56, 0x86, 0x9c, 0xf2, 0xc6, 0x9c, 0x5a, 0x55, 0x2c, 0x65, 0x17,
	0x3b, 0xd8, 0xb2, 0x51, 0x3c, 0x93, 0x9e, 0x4c, 0x4f, 0x2d, 0xc5, 0x92, 0x40, 0x68, 0x1c, 0xfa,
	0x0f, 0x00, 0xf6, 0xcc, 0x29, 0x45, 0xa7, 0xb0, 0xa3, 0x04, 0x27, 0xa8, 0x6a, 0x60, 0x8d, 0x4f,
	0x3c, 0xb0, 0xa6, 0xd3, 0x0d, 0xec, 0xf9, 0xef, 0x95, 0xc1, 0x73, 0xf0, 0x32, 0xbc, 0xc0, 0xfb,
	0x19, 0x3d, 0xaa, 0xa6, 0x4c, 0x7a, 0x92, 0x8f, 0xe9, 0xbb, 0x00, 0x9e, 0x5b, 0xc7, 0xbb, 0x45,
	0xd3, 0x52, 0xac, 0xfd, 0xd7, 0x6d, 0x6c, 0xe5, 0x74, 0xb3, 0x70, 0x4f, 0x33, 0x98, 0x79, 0x0c,
	0x75, 0x0a, 0x9c, 0xae, 0x53, 0xd7, 0xbe, 0x57, 0x06, 0xcf, 0xc3, 0xab, 0x70, 0xc8, 0x6b, 0x28,
	0x45, 0x5a, 0x4a, 0xb9, 0x4d, 0xf9, 0xbb, 0x06, 0x26, 0x86, 0x16, 0x61, 0x4b, 0x7e, 0x65, 0x4d,
	0xc2, 0x05, 0xd3, 0x52, 0x3d, 0xc7, 0x05, 0x54, 0x1c, 0x17, 0x52, 0xe6, 0x99, 0xad, 0x16, 0x89,
	0x7e, 0x46, 0x3d, 0x30, 0xbe, 0xa7, 0xe8, 0x25, 0x3e, 0x71, 0x12, 0xfb, 0x32, 0xf4, 0xaf, 0x9b,
	0xa0, 0x90, 0x2d, 0x39, 0xe6, 0x1c, 0xb6, 0x9c, 0x45, 0x63, 0xcb, 0xa4, 0x83, 0x32, 0x60, 0xa7,
	0x52, 0x72, 0x4c, 0x99, 0x3a, 0xa1, 0xb6, 0xa3, 0x38, 0x0c, 0xbd, 0x23, 0x33, 0x5a, 0xcf, 0x85,
	0x20, 0x10, 0xda, 0x16, 0xf7, 0x6d, 0x89, 0xcf, 0x84, 0x73, 0x7d, 0x3f, 0x2c, 0x03, 0x54, 0x81,
	0xd7, 0x1c, 0x4d, 0xd1, 0xb5, 0xef, 0x60, 0xa9, 0x5d, 0xe1, 0x65, 0x54, 0x0c, 0xe5, 0xa1, 0x50,
	0x69, 0xcf, 0xb7, 0x40, 0x5a, 0x33, 0x03, 0x55, 0x67, 0xc8, 0xba, 0xeb, 0x61, 0x4b, 0x1d, 0x2e,
	0x08, 0x5f, 0x1f, 0x23, 0xb0, 0xcb, 0xd7, 0xeb, 0x12, 0xb5, 0xa2, 0xee, 0x41, 0xe2, 0xb5, 0xc7,
	0x8a, 0xd1, 0xb0, 0xbf, 0x45, 0xcd, 0xb6, 0x4b, 0xdc, 0x04, 0xb4, 0x54, 0x50, 0x17, 0x69, 0x29,
	0x7a, 0x05, 0xb6, 0x12, 0xff, 0xd2, 0xa2, 0x93, 0xed, 0xfa, 0x02, 0xcf, 0xd5, 0x9b, 0x07, 0xef,
	0xd1, 0x48, 0x50, 0x35, 0x6c, 0xf6, 0x91, 0xba, 0x41, 0x74, 0x26, 0xc9, 0x7c, 0x12, 0xd7, 0x5e,
	0xdb, 0xc5, 0x62, 0xf3, 0x71, 0x63, 0xcc, 0x25, 0xb8, 0x23, 0x26, 0x75, 0x50, 0xe5, 0x35, 0xa2,
	0x4b, 0x6a, 0x87, 0x7e, 0x3f, 0x06, 0x7b, 0xb3, 0x81, 0xdb, 0x44, 0x1e, 0x3b, 0x8a, 0xa6, 0xdb,
	0xe8, 0x6d, 0xd8, 0x4a, 0xae, 0x19, 0xee, 0x59, 0x0c, 0x4e, 0x70, 0xc6, 0x9c, 0x7f, 0x78, 0xd0,
	0x11, 0xbc, 0x9a, 0x78, 0x66, 0x18, 0x48, 0x90, 0xd4, 0xf0, 0xb3, 0xfa, 0x55, 0xd8, 0x57, 0xb2,
	0xb1, 0x4c, 0xf1, 0x99, 0xb3, 0xed, 0x36, 0xc3, 0x3c, 0xba, 0x9e, 0x50, 0x33, 0xf3, 0xbb, 0x45,
	0x67, 0x7f, 0xa1, 0x41, 0xea, 0x2e, 0xd9, 0x98, 0xf4, 0x96, 0x35, 0xcb, 0xc1, 0x5e, 0xf3, 0x6c,
	0x42, 0x91, 0xac, 0x6e, 0x9b, 0x3e, 0x80, 0xd6, 0xcc, 0x48, 0x08, 0x23, 0xd8, 0xb1, 0xd1, 0x39,
	0xaa, 0x42, 0xf7, 0x83, 0xbd, 0xd0, 0xe0, 0x9a, 0x08, 0xf6, 0x1d, 0xbd, 0x02, 0xdb, 0x2c, 0xac,
	0x6a, 0x16, 0xe9, 0x18, 0x71, 0x23, 0x9a, 0xe9, 0x76, 0xbc, 0xf4, 0x45, 0x19, 0xd0, 0x63, 0x26,
	0x6e, 0x35, 0x89, 0xef, 0x51, 0x1b, 0x13, 0xb3, 0x1a, 0x05, 0xc0, 0x8b, 0xbe, 0x0b, 0xc0, 0x02,
	0x90, 0x5a, 0x5d, 0xc5, 0xd7, 0x2d, 0x1d, 0x65, 0xa1, 0xe0, 0xe1, 0x70, 0x1f, 0x42, 0x4c, 0xd4,
	0x19, 0x21, 0x90, 0x3a, 0x5d, 0x79, 0xee, 0x50, 0x70, 0x03, 0xda, 0x0b, 0x3b, 0x82, 0x4f, 0x09,
	0x35, 0x4d, 0xa4, 0x33, 0xb0, 0x0b, 0xb6, 0x49, 0x5c, 0x3e, 0xf5, 0xba, 0xb4, 0x8c, 0xc0, 0x74,
	0xee, 0x2a, 0xec, 0x09, 0xcc, 0x86, 0x5c, 0xd8, 0x31, 0xb5, 0x02, 0x46, 0x9d, 0x8f, 0xca, 0xa0,
	0xe9, 0xb0, 0x0c, 0x1a, 0x8f, 0xca, 0xa0, 0x69, 0x32, 0x3d, 0x95, 0xbb, 0x02, 0xbb, 0xfd, 0x63,
	0xf4, 0xcb, 0x35, 0x1f, 0x96, 0x41, 0x9c, 0xc8, 0x5d, 0x4f, 0xcf, 0x2c, 0xc5, 0x92, 0x8d, 0x42,
	0xd3, 0x52, 0x2c, 0x19, 0x17, 0x9a, 0x87, 0xfe, 0x32, 0x0e, 0x7b, 0x98, 0x9b, 0x99, 0x53, 0x6c,
	0xac, 0x7a, 0x26, 0x0f, 0x7d, 0x0b, 0xb6, 0xdd, 0x25, 0x4d, 0xf1, 0xef, 0x74, 0x9b, 0xb7, 0x66,
	0x26, 0xeb, 0x2d, 0xef, 0x1a, 0x67, 0x60, 0x2e, 0x76, 0x48, 0xd6, 0x69, 0xeb, 0x5d, 0xbb, 0x82,
	0x5e, 0x80, 0x5d, 0x05, 0x66, 0x65, 0x7d, 0x4d, 0xb0, 0x8d, 0x3d, 0x5e, 0xd7, 0x92, 0x44, 0x1c,
	0x21, 0x1c, 0x5f, 0x28, 0x84, 0xea, 0x90, 0x0d, 0xfb, 0x1d, 0xd7, 0x6a, 0xca, 0x25, 0x1b, 0x5b,
	0xf2, 0x26, 0xb7, 0x9a, 0x7c, 0x51, 0x4e, 0xd7, 0x6b, 0xaa, 0xa6, 0x65, 0xe7, 0xed, 0xf5, 0x3a,
	0x51, 0x02, 0x68, 0x16, 0xb6, 0x19, 0xa6, 0x6f, 0x50, 0xf1, 0xba, 0xcb, 0xbf, 0xd5, 0x30, 0x2b,
	0xfd, 0x5d, 0x83, 0x03, 0x8a, 0x7e, 0x5f, 0xd9, 0xb7, 0x65, 0x6c, 0x50, 0x2f, 0x26, 0xf0, 0x00,
	0x9a, 0xeb, 0x02, 0xf5, 0x33, 0xcd, 0x79, 0xaa, 0xb8, 0xe4, 0x9b, 0xe9, 0xdf, 0x80, 0x17, 0x83,
	0xa0, 0xd5, 0xf3, 0x9e, 0xa8, 0x8b, 0x7c, 0xc1, 0x8f, 0x1c, 0x9e, 0x7f, 0xf4, 0xf7, 0x01, 0x3c,
	0xb7, 0xab, 0xe8, 0x5a, 0x41, 0x33, 0x4b, 0x36, 0x9b, 0xe4, 0x5d, 0xcd, 0xd1, 0xb6, 0xe9, 0x92,
	0x16, 0x93, 0x27, 0x30, 0x31, 0xd7, 0x1e, 0x1e, 0xd4, 0x46, 0xf0, 0xdd, 0x36, 0xb9, 0xd1, 0xe9,
	0xf7, 0x64, 0xc9, 0xb4, 0xdf, 0xf6, 0x24, 0x73, 0xcf, 0x41, 0xc1, 0x1b, 0x92, 0xbb, 0xf4, 0xbb,
	0x1e, 0x95, 0x41, 0xfc, 0xb0, 0x0c, 0x62, 0x47, 0x65, 0x10, 0x9f, 0x4e, 0xb3, 0xc5, 0x4f, 0xdc,
	0xd8, 0xdf, 0x8e, 0xc3, 0x73, 0x6b, 0x3b, 0x4a, 0x11, 0xe7, 0x4c, 0x27, 0x8f, 0xb7, 0xb0, 0x61,
	0x63, 0xdf, 0xcd, 0x66, 0x1c, 0x76, 0x28, 0xc5, 0xa2, 0xce, 0x37, 0xa6, 0xac, 0xa9, 0xfc, 0xf4,
	0x6e, 0xe1, 0x06, 0x42, 0x4c, 0x49, 0xed, 0x3e, 0x81, 0x45, 0x15, 0x7d, 0x0d, 0xb6, 0x29, 0x45,
	0x8d, 0x99, 0xbf, 0x7b, 0xd8, 0x3d, 0xa3, 0xce, 0x85, 0x06, 0xbe, 0x86, 0x0b, 0x16, 0xa6, 0xbe,
	0xaa, 0x04, 0x95, 0xa2, 0x46, 0xf6, 0xff, 0xab, 0x78, 0x1f, 0xbd, 0x0d, 0x93, 0x9a, 0x61, 0x3b,
	0x8a, 0x51, 0xc0, 0x27, 0x72, 0xfc, 0x53, 0x0f, 0x0f, 0x06, 0x6c, 0xd2, 0x79, 0x79, 0xd3, 0x24,
	0x4e, 0x25, 0xed, 0xbe, 0xec, 0x42, 0x7c, 0x72, 0x00, 0x24, 0x0f, 0x0f, 0xdd, 0x80, 0x09, 0xd7,
	0xe5, 0x8f, 0x31, 0xbf, 0xf3, 0x51, 0x19, 0x80, 0x1f, 0x12, 0x8b, 0x11, 0x74, 0x3d, 0x89, 0xe7,
	0xff, 0xe9, 0x9f, 0x36, 0x49, 0xae, 0x38, 0xfa, 0x5d, 0x00, 0x3b, 0xdc, 0xfd, 0x42, 0x5d, 0x18,
	0xf7, 0x88, 0x5b, 0xa8, 0xb7, 0x6b, 0x6a, 0x4e, 0xea, 0xa8, 0xbb, 0x43, 0x88, 0x5b, 0x63, 0xcf,
	0x1b, 0x8e, 0xb5, 0x9f, 0x9b, 0xf0, 0x3d, 0xde, 0xd6, 0x8f, 0x40, 0x72, 0xa8, 0xd9, 0x8a, 0x09,
	0x29, 0x31, 0x45, 0xfb, 0xf3, 0x11, 0x68, 0x12, 0x98, 0x49, 0x86, 0x1f, 0x81, 0xc4, 0x08, 0xb5,
	0xd0, 0x29, 0xa9, 0x7d, 0xd3, 0x0f, 0x83, 0xd2, 0xe4, 0xf6, 0xa4, 0x9b, 0x8a, 0xca, 0xbd, 0x75,
	0x99, 0x3a, 0x3c, 0xd4, 0xb8, 0x4b, 0x02, 0xab, 0x61, 0x4e, 0xfa, 0x0a, 0x71, 0x7e, 0xfa, 0x61,
	0xe2, 0xae, 0x2d, 0x17, 0x15, 0x67, 0x87, 0xae, 0xf9, 0x16, 0xa9, 0xf9, 0xae, 0xbd, 0xaa, 0x38,
	0x3b, 0xe8, 0x25, 0x18, 0xdb, 0x35, 0x55, 0x2c, 0x26, 0xa9, 0x2f, 0x33, 0x52, 0x6f, 0x80, 0x95,
	0xb1, 0xdd, 0x36, 0x55, 0x2c, 0x51, 0xbd, 0x81, 0x97, 0x21, 0xaa, 0x1e, 0x1e, 0x12, 0x60, 0x13,
	0x59, 0x0b, 0xcc, 0xfd, 0x22, 0x1f, 0x2b, 0x9e, 0x56, 0xa3, 0xcf, 0xd3, 0xba, 0xd9, 0x78, 0x03,
	0x0c, 0xfd, 0x0e, 0x80, 0xed, 0x6b, 0x8c, 0x60, 0xcb, 0x9b, 0xbb, 0x8a, 0x66, 0xa0, 0x3e, 0xd8,
	0xac, 0xd2, 0x4f, 0x1c, 0x80, 0x7f, 0x43, 0xcf, 0xc1, 0x0e, 0x97, 0x89, 0xe3, 0xf5, 0x0c, 0xac,
	0xdd, 0x0e, 0xa8, 0x7f, 0x03, 0xf6, 0x6b, 0x86, 0x83, 0x2d, 0x43, 0xd1, 0xe5, 0x90, 0x3c, 0xf3,
	0x8f, 0x3d, 0x07, 0xa2, 0xd7, 0x95, 0x0b, 0xb4, 0x3f, 0xf4, 0xaf, 0x1a, 0x61, 0xc7, 0x9c, 0x6a,
	0xf0, 0x42, 0xba, 0x2f, 0xe6, 0x60, 0x97, 0x6a, 0xde, 0x37, 0xe8, 0x7c, 0xab, 0x58, 0xd7, 0xf6,
	0xb0, 0xe7, 0x8e, 0xd5, 0xb2, 0x1e, 0x82, 0xab, 0x90, 0xe7, 0xf2, 0xe8, 0x45, 0xd8, 0x41, 0x3e,
	0xc9, 0xb6, 0x63, 0x61, 0x65, 0xb7, 0x62, 0x8c, 0x6b, 0x21, 0xb4, 0x13, 0xe9, 0x35, 0x57, 0x18,
	0x9d, 0x87, 0x2d, 0x8c, 0x75, 0x70, 0x1c, 0x9d, 0x2d, 0x69, 0x29, 0x49, 0x0b, 0xd6, 0x1d, 0x1d,
	0x49, 0xb0, 0x33, 0x38, 0x56, 0x77, 0xcd, 0xd6, 0x65, 0xb8, 0x02, 0xe3, 0x96, 0x3a, 0x02, 0xf3,
	0x68, 0xe7, 0x2e, 0x55, 0x6e, 0xb7, 0xbe, 0x03, 0xb5, 0x91, 0x9c, 0x01, 0xe4, 0x40, 0xad, 0x5c,
	0x07, 0x54, 0xd8, 0x39, 0xa7, 0x6b, 0xd8, 0x70, 0x16, 0x57, 0xd9, 0x9a, 0xb3, 0xd1, 0x6b, 0xb0,
	0xab, 0x40, 0x8b, 0x64, 0xad, 0xc8, 0x57, 0x28, 0x63, 0x03, 0x5b, 0x72, 0xcf, 0x91, 0x95, 0xdd,
	0xf6, 0x21, 0x68, 0x19, 0x4a, 0x58, 0xe4, 0x8c, 0x60, 0xd7, 0x5d, 0x6a, 0xe4, 0xe2, 0x01, 0x2a,
	0x8a, 0x41, 0x16, 0x39, 0xe4, 0xd0, 0xef, 0x34, 0xc1, 0xde, 0xfc, 0xca, 0x1a, 0x65, 0x37, 0xd8,
	0xee, 0x2a, 0x59, 0xcc, 0x7f, 0x58, 0x83, 0x6d, 0xaa, 0x6a, 0xda, 0x72, 0xd1, 0x32, 0xb7, 0x34,
	0xdd, 0x35, 0xeb, 0x23, 0xc7, 0x38, 0xa4, 0xf9, 0xbc, 0x49, 0xc0, 0x88, 0x86, 0x7b, 0x50, 0x13,
	0x14, 0x5e, 0x84, 0x36, 0x60, 0xbb, 0x4b, 0xf2, 0x30, 0xd4, 0x24, 0x45, 0x7d, 0xe1, 0x18, 0xd4,
	0x39, 0x46, 0x02, 0xf9, 0x61, 0xdb, 0x0a, 0xbe, 0x32, 0x74, 0x0f, 0x76, 0x53, 0xa7, 0xb6, 0x60,
	0xea, 0xc4, 0x72, 0x15, 0x19, 0xd7, 0x20, 0xb6, 0x9c, 0x94, 0xfe, 0xcb, 0xf5, 0x3d, 0x3c, 0x88,
	0x42, 0x90, 0x90, 0x5b, 0xb8, 0xe8, 0x95, 0xa1, 0x6f, 0xc1, 0x66, 0xcd, 0x2a, 0xe9, 0xd8, 0x16,
	0xe1, 0x89, 0x09, 0xbb, 0xd4, 0xc3, 0x83, 0x38, 0x55, 0x3a, 0xf4, 0x9f, 0x3f, 0x82, 0xef, 0xd1,
	0x70, 0xcc, 0xa1, 0x4f, 0x00, 0xec, 0x08, 0x4e, 0x24, 0x5a, 0x86, 0x7d, 0xfc, 0xb4, 0xa5, 0x4f,
	0xc4, 0x77, 0x22, 0xd6, 0xdf, 0x2d, 0x3d, 0x4c, 0x2b, 0xaf, 0x9a, 0x76, 0xe5, 0x64, 0x43, 0x2b,
	0xb0, 0xdf, 0xe5, 0x35, 0xc2, 0x70, 0xf5, 0xb7, 0x4e, 0x2f, 0x57, 0x0b, 0xe2, 0xe5, 0x86, 0x60,
	0x5f, 0x08, 0xc7, 0x5d, 0xd9, 0x49, 0xee, 0x52, 0x02, 0xbe, 0xa4, 0xff, 0x04, 0xc0, 0xce, 0xd0,
	0xd3, 0x44, 0x59, 0x08, 0xd9, 0x8a, 0xb0, 0xb5, 0xef, 0x60, 0x7e, 0xa8, 0xa4, 0xc8, 0x6d, 0x7d,
	0x62, 0x3c, 0x33, 0xf5, 0x79, 0x19, 0x00, 0x7e, 0xaa, 0xb4, 0x92, 0xa9, 0x4a, 0x8c, 0xc4, 0xc5,
	0xf7, 0x56, 0x87, 0xc1, 0x42, 0x83, 0xc4, 0xb6, 0xed, 0x9a, 0xf6, 0x1d, 0x8c, 0x96, 0xa0, 0xdb,
	0x33, 0x39, 0xb8, 0xb8, 0x8e, 0xb9, 0x2b, 0x70, 0xa5, 0xc0, 0xe2, 0x4a, 0xc1, 0x9e, 0x00, 0x46,
	0x8d, 0xa1, 0x30, 0xa7, 0x77, 0xe8, 0x0f, 0x1b, 0x21, 0x5a, 0xd3, 0xcd, 0xfb, 0xe4, 0x61, 0xf9,
	0x66, 0xf8, 0x0d, 0xd8, 0x6f, 0xe1, 0x77, 0x4b, 0xd8, 0x76, 0xdc, 0x5d, 0xea, 0x11, 0x65, 0x8c,
	0x8e, 0xb8, 0xf8, 0xc3, 0x32, 0x88, 0x4f, 0x8c, 0x47, 0xd0, 0x35, 0x7f, 0xf0, 0x13, 0x30, 0x7c,
	0xd8, 0x29, 0xf5, 0x72, 0x7d, 0xbe, 0x4d, 0x39, 0x69, 0x86, 0x96, 0x60, 0xa7, 0x0b, 0xec, 0x02,
	0x82, 0x0a, 0xe0, 0xf5, 0x28, 0xc0, 0x4f, 0xff, 0x39, 0x1a, 0x3e, 0xec, 0x5c, 0x68, 0x90, 0x3a,
	0xb8, 0xa6, 0x8b, 0xe5, 0x5b, 0x06, 0x61, 0xcc, 0x93, 0x2d, 0x03, 0x29, 0x80, 0x97, 0x7b, 0x1e,
	0xf6, 0x85, 0x70, 0xfc, 0x06, 0x0e, 0x70, 0xb7, 0xa9, 0x69, 0x82, 0x1a, 0x38, 0xe2, 0x34, 0x1d,
	0x02, 0x88, 0x98, 0x55, 0xac, 0x5c, 0xe8, 0x31, 0xb9, 0x56, 0x0a, 0x96, 0xad, 0xd0, 0x0b, 0xb3,
	0x5b, 0x76, 0xa2, 0xbb, 0x65, 0x57, 0xb5, 0x73, 0xd7, 0x69, 0xd9, 0x4a, 0x00, 0xfb, 0xdb, 0x10,
	0xe1, 0x82, 0x1a, 0x46, 0x6f, 0x3c, 0x1d, 0x7a, 0x17, 0x85, 0xf2, 0xe3, 0x0f, 0xfd, 0xbd, 0x26,
	0x98, 0xc8, 0x16, 0xb5, 0xb5, 0x22, 0x2e, 0xa0, 0x02, 0xf1, 0xfa, 0x34, 0xe2, 0x4f, 0x69, 0x86,
	0x46, 0x77, 0x17, 0x38, 0xb1, 0x35, 0x12, 0xc9, 0x3d, 0x39, 0xa0, 0xec, 0x9e, 0xae, 0xed, 0x4a,
	0x51, 0xcb, 0x7b, 0xa5, 0xe8, 0xdb, 0xf0, 0xbc, 0xc7, 0x51, 0x16, 0xb1, 0x21, 0x13, 0x25, 0x1e,
	0x13, 0x3b, 0x66, 0x3f, 0x7b, 0x07, 0xf6, 0x42, 0x83, 0x24, 0xba, 0x4c, 0x66, 0x11, 0x1b, 0xd9,
	0xa2, 0xb6, 0xe1, 0x01, 0xa0, 0x03, 0x38, 0xc0, 0x2d, 0x4f, 0x14, 0x7c, 0xec, 0xf8, 0x6b, 0x4f,
	0x15, 0xe4, 0x1a, 0x76, 0x1c, 0xcd, 0xd8, 0xb6, 0xfd, 0xed, 0xf7, 0xb3, 0x36, 0xaa, 0x64, 0x73,
	0x13, 0x70, 0x20, 0xa2, 0x5d, 0x77, 0x5d, 0x75, 0x87, 0x6e, 0xac, 0x9f, 0xb3, 0xed, 0x49, 0x36,
	0xe6, 0x5f, 0x03, 0x78, 0xae, 0x66, 0xd3, 0x68, 0x0e, 0x0e, 0x6e, 0x29, 0x9a, 0x2e, 0x9b, 0x7b,
	0xd8, 0x22, 0x66, 0x47, 0x95, 0x37, 0x4d, 0x75, 0x3f, 0x3c, 0xb2, 0xa4, 0x74, 0x9e, 0x48, 0xdd,
	0x71, 0x85, 0x72, 0xa6, 0xba, 0xef, 0x9b, 0x9a, 0x05, 0x78, 0x49, 0xd1, 0x75, 0xf3, 0xbe, 0x6c,
	0x1a, 0xfa, 0xbe, 0x4c, 0x0e, 0x07, 0x6d, 0x4b, 0xc3, 0xaa, 0xfc, 0x6e, 0x09, 0x5b, 0xfb, 0x2e,
	0xd3, 0x10, 0xa7, 0x38, 0xcf, 0x50, 0xc1, 0x3b, 0x86, 0xbe, 0xbf, 0xe6, 0x8a, 0xbd, 0x46, 0xa4,
	0x38, 0x99, 0xf0, 0x0d, 0x78, 0x21, 0x12, 0xc9, 0x3d, 0xe1, 0x9b, 0x29, 0xc8, 0xb9, 0x6a, 0x10,
	0x6e, 0x1d, 0xfc, 0x26, 0x69, 0x29, 0x96, 0x6c, 0x12, 0x62, 0x43, 0x87, 0x8d, 0xb0, 0x7b, 0xc1,
	0x71, 0x8a, 0xab, 0xfc, 0xf4, 0xba, 0xc3, 0x82, 0xa0, 0x68, 0x03, 0x5e, 0xd8, 0x71, 0x9c, 0xa2,
	0xec, 0x1d, 0x75, 0xfc, 0xe9, 0xee, 0x4d, 0xd0, 0xc6, 0x8f, 0x39, 0x4f, 0xc4, 0x1d, 0x1f, 0x24,
	0xbb, 0xc1, 0x6d, 0x4c, 0x90, 0x1e, 0xd5, 0xc6, 0xcd, 0x30, 0xdc, 0xa6, 0xc7, 0xc6, 0xcd, 0x50,
	0x5c, 0x09, 0x0e, 0xd4, 0xea, 0xef, 0x5e, 0x86, 0xaf, 0xbf, 0x5a, 0xa8, 0x7d, 0x51, 0xbd, 0xdd,
	0xc8, 0xdc, 0x8c, 0xfd, 0xf4, 0x25, 0x30, 0x91, 0x7b, 0x1e, 0xf6, 0x04, 0x91, 0x7d, 0x77, 0xbc,
	0x18, 0xf7, 0xc6, 0x02, 0x94, 0x73, 0x2f, 0x9b, 0x51, 0x97, 0x4e, 0xe1, 0x33, 0x3a, 0xf4, 0x6f,
	0x5f, 0x86, 0x1d, 0xb7, 0x74, 0x73, 0x53, 0xd1, 0xc9, 0x63, 0xa1, 0x7e, 0xed, 0x8b, 0x30, 0xe1,
	0xba, 0x8b, 0x2c, 0x12, 0x71, 0xd9, 0x1f, 0x89, 0xf8, 0xad, 0xc6, 0x8a, 0x11, 0xb9, 0xe4, 0x3b,
	0xff, 0x5d, 0x1d, 0xb4, 0x08, 0x9b, 0x2d, 0xb3, 0x44, 0x0c, 0xd3, 0x49, 0x6e, 0x6f, 0xdd, 0x0f,
	0x0f, 0xe2, 0x54, 0x9c, 0xde, 0x72, 0x3e, 0x24, 0xb7, 0x9c, 0x46, 0x89, 0x03, 0xa0, 0xb7, 0x60,
	0xe7, 0x5d, 0x8f, 0x45, 0xa1, 0xa1, 0x6b, 0x3e, 0x67, 0xe3, 0xc7, 0x11, 0x2f, 0xe1, 0xf0, 0x9c,
	0xd4, 0x51, 0x01, 0x5a, 0x34, 0xb6, 0x4c, 0xf4, 0x0e, 0x44, 0xa1, 0x28, 0xa2, 0xe6, 0x5d, 0xe9,
	0x8e, 0xed, 0x71, 0x55, 0x00, 0x52, 0xea, 0x0a, 0x86, 0x5f, 0x35, 0x6c, 0xa3, 0xbd, 0xca, 0x81,
	0xe2, 0x9d, 0xa2, 0xa6, 0xac, 0xa8, 0xaa, 0xd8, 0x4c, 0x5b, 0x09, 0x3b, 0x8d, 0x6c, 0x37, 0xdc,
	0x56, 0x0c, 0xad, 0x58, 0xd2, 0xe9, 0x1e, 0x65, 0xcf, 0x88, 0x36, 0xda, 0xe3, 0xcd, 0x79, 0xca,
	0x37, 0xe7, 0xdd, 0xa1, 0x63, 0xd6, 0xcc, 0xaa, 0x2a, 0x7a, 0x40, 0xa3, 0x73, 0x45, 0x93, 0xdc,
	0x82, 0x43, 0x0d, 0x27, 0x9e, 0x56, 0xc3, 0x3d, 0x6e, 0x0b, 0x81, 0x96, 0xef, 0xc0, 0x73, 0x11,
	0x23, 0x66, 0xa1, 0x22, 0xb1, 0x8b, 0x2e, 0xa5, 0x68, 0xb8, 0xbe, 0xf0, 0x38, 0x24, 0xaa, 0x83,
	0x5e, 0x83, 0x03, 0x51, 0x43, 0xe1, 0x88, 0xc9, 0x3a, 0x88, 0xfd, 0x55, 0x1d, 0xe4, 0x90, 0x77,
	0x60, 0x87, 0xa3, 0xdb, 0xcc, 0xbe, 0xd1, 0x38, 0x01, 0x77, 0xb2, 0xaf, 0x84, 0x26, 0x25, 0x6f,
	0xde, 0x37, 0xd8, 0x9d, 0x6c, 0x5d, 0xb7, 0x99, 0xa1, 0x23, 0xf3, 0x41, 0x6e, 0x60, 0x0e, 0x2f,
	0x60, 0x61, 0x86, 0x15, 0xd8, 0x49, 0x00, 0x29, 0x41, 0xce, 0xad, 0xe6, 0x06, 0x45, 0x7c, 0x36,
	0x84, 0xe8, 0x3b, 0x69, 0xab, 0xf0, 0x48, 0x9d, 0x67, 0x4d, 0x59, 0x48, 0x02, 0xd2, 0xcb, 0xf7,
	0x0b, 0x27, 0xcc, 0x45, 0xa0, 0x6b, 0x9c, 0xc5, 0x2f, 0x96, 0x60, 0xfb, 0x66, 0x69, 0x6b, 0x0b,
	0x5b, 0x6e, 0x12, 0x41, 0x1b, 0xed, 0xce, 0xc5, 0x10, 0x52, 0x8e, 0xca, 0x54, 0x76, 0x88, 0x7b,
	0x2f, 0x61, 0xba, 0x3c, 0x89, 0xe0, 0x65, 0xd8, 0x5a, 0x30, 0x2d, 0xdb, 0x45, 0x6a, 0x8f, 0xe4,
	0x71, 0xe6, 0x4c, 0xcb, 0xe6, 0xa4, 0x29, 0xc3, 0x80, 0x05, 0xaf, 0x04, 0x7d, 0x0d, 0xc6, 0x8b,
	0xe4, 0x72, 0x26, 0x76, 0xd2, 0xf1, 0xd4, 0x0d, 0x08, 0x78, 0x31, 0x6a, 0x89, 0xe9, 0xa0, 0xeb,
	0xb0, 0xe9, 0xee, 0x7d, 0x47, 0x14, 0x4e, 0xb0, 0x2b, 0x9b, 0x1f, 0x1e, 0x10, 0x59, 0x89, 0xfc,
	0x41, 0x13, 0x30, 0x79, 0x5f, 0xd9, 0x62, 0xc1, 0x54, 0x44, 0xfb, 0xdc, 0x17, 0x52, 0x7e, 0x43,
	0x61, 0x69, 0x13, 0x89, 0xfb, 0xec, 0x03, 0xda, 0x85, 0xbd, 0x9c, 0xc0, 0x96, 0x2d, 0x16, 0x31,
	0x97, 0x59, 0xbf, 0xbb, 0x8f, 0x67, 0x7a, 0x6b, 0x44, 0xda, 0xf9, 0x6c, 0x74, 0xab, 0xd5, 0xd5,
	0xe8, 0x12, 0x6c, 0x53, 0x54, 0x55, 0xd6, 0x4d, 0xc6, 0x99, 0x89, 0x3d, 0xf4, 0x8c, 0x6c, 0x55,
	0x54, 0x75, 0x99, 0x17, 0x11, 0x0b, 0x55, 0xa8, 0x84, 0x96, 0xdd, 0xb5, 0xd5, 0x7b, 0xfc, 0x85,
	0x33, 0x14, 0x90, 0xe6, 0xdd, 0xe8, 0xf2, 0x81, 0xf1, 0xa5, 0xf6, 0xfb, 0x31, 0xd8, 0xce, 0x83,
	0x72, 0xd8, 0xb2, 0x4c, 0xcb, 0x16, 0xfb, 0xe8, 0x4c, 0x7f, 0xbd, 0x1e, 0x7a, 0xf0, 0xb0, 0x18,
	0x9d, 0xa3, 0xfa, 0xf3, 0x54, 0x9d, 0xd1, 0x58, 0x7f, 0x44, 0xef, 0x19, 0x91, 0x51, 0xbd, 0xb6,
	0x8f, 0xc8, 0x05, 0x7f, 0x24, 0x2e, 0xfe, 0xa7, 0xd8, 0x70, 0x13, 0xdd, 0xad, 0x1f, 0xb9, 0xb7,
	0xc8, 0x8e, 0x8f, 0x40, 0xeb, 0x48, 0x25, 0xea, 0x77, 0xf4, 0xe9, 0xf7, 0x9b, 0xbe, 0x0f, 0x3e,
	0xf8, 0x18, 0x3c, 0x02, 0xe8, 0xdf, 0x81, 0x9f, 0x94, 0xc1, 0xbf, 0x01, 0x0b, 0xeb, 0xeb, 0xab,
	0x29, 0xda, 0x50, 0xaa, 0x60, 0xaa, 0x38, 0x45, 0xd9, 0xa2, 0xd4, 0x64, 0x7a, 0x2a, 0x3d, 0x9d,
	0x32, 0xad, 0xd4, 0x26, 0x76, 0xee, 0x63, 0x6c, 0xa4, 0x26, 0xc7, 0xc7, 0x53, 0x8a, 0xa1, 0xa6,
	0xa6, 0x67, 0x67, 0x47, 0x53, 0xf3, 0xdb, 0xa3, 0xa9, 0x0d, 0x2a, 0x37, 0x95, 0x7a, 0x31, 0x35,
	0xf5, 0xe0, 0x01, 0x91, 0x54, 0x74, 0x3d, 0x35, 0x35, 0x3e, 0x7e, 0x6d, 0x6a, 0x76, 0x36, 0x85,
	0x3d, 0x3c, 0x3b, 0x9d, 0x9a, 0x4e, 0xbd, 0x98, 0x9a, 0xae, 0xc8, 0x4c, 0x8f, 0x8f, 0x5f, 0x9b,
	0x0e, 0xca, 0x8c, 0xa6, 0xde, 0x32, 0x4b, 0xa9, 0x82, 0x62, 0xa4, 0x14, 0xdd, 0x36, 0x53, 0xcc,
	0xd7, 0xd9, 0x4f, 0x29, 0x46, 0x0a, 0x3f, 0x50, 0x0a, 0x8e, 0x4f, 0x34, 0xa5, 0x6b, 0xf7, 0x70,
	0x6a, 0x6a, 0x7c, 0x6a, 0x94, 0x0c, 0xa5, 0xe7, 0x83, 0x8f, 0x81, 0x80, 0x3a, 0x8e, 0xca, 0x00,
	0xb2, 0x11, 0xcc, 0x99, 0x2a, 0x26, 0x15, 0xf0, 0x83, 0x8f, 0x41, 0x33, 0x8a, 0xfd, 0xa0, 0x0c,
	0x1a, 0xc8, 0xd7, 0xe6, 0x0f, 0x3e, 0x06, 0x8d, 0x49, 0x3a, 0xfa, 0xec, 0x07, 0x1f, 0x83, 0x17,
	0x07, 0xbe, 0xf6, 0x93, 0x32, 0x98, 0x59, 0x73, 0x2c, 0xcd, 0xd8, 0x4e, 0x59, 0x98, 0x3c, 0x3f,
	0x6c, 0x10, 0x27, 0x90, 0xb7, 0xe4, 0x5a, 0xb9, 0x74, 0xaa, 0x64, 0x97, 0x14, 0x5d, 0xdf, 0x4f,
	0x29, 0xa9, 0x1d, 0x67, 0x57, 0xa7, 0x5d, 0x20, 0x28, 0xcf, 0x7c, 0xf0, 0x31, 0x38, 0x37, 0xd0,
	0x7f, 0x54, 0x06, 0xdd, 0xac, 0x61, 0x89, 0x6b, 0xa4, 0x88, 0x3b, 0xe8, 0xf5, 0x60, 0x80, 0xf4,
	0x20, 0xe6, 0xfb, 0xfa, 0x88, 0x71, 0x14, 0xbe, 0x87, 0x8b, 0x5e, 0xac, 0xf8, 0xea, 0x2a, 0xde,
	0x52, 0x4a, 0xba, 0xc3, 0x56, 0x0d, 0x67, 0x43, 0x2f, 0xd1, 0x15, 0xec, 0xba, 0xe2, 0x79, 0x26,
	0x41, 0x55, 0x19, 0x37, 0xf9, 0x32, 0xec, 0xdf, 0x55, 0x1e, 0xc8, 0xc1, 0x03, 0x82, 0xdd, 0x9a,
	0xfb, 0x03, 0xf9, 0x11, 0xe2, 0x3b, 0x52, 0xcf, 0xae, 0xf2, 0x40, 0xf2, 0x1f, 0x09, 0xf4, 0x9e,
	0x1c, 0x8e, 0x25, 0x5c, 0xac, 0x1b, 0x68, 0x0a, 0xc4, 0x12, 0xbe, 0x1d, 0x0a, 0xdf, 0x88, 0x4f,
	0x18, 0xbe, 0x59, 0x08, 0x05, 0x70, 0x70, 0x54, 0x00, 0xe7, 0x99, 0x27, 0x09, 0xe0, 0x2c, 0x44,
	0x85, 0x70, 0xde, 0x85, 0x7d, 0xcc, 0x12, 0xcb, 0x64, 0x4f, 0xa9, 0xbe, 0xb6, 0x9e, 0x3f, 0xbe,
	0xad, 0xa8, 0xb8, 0x56, 0xe5, 0x16, 0x03, 0xa4, 0x9e, 0x62, 0x54, 0xe0, 0xcb, 0x84, 0xdd, 0x34,
	0x08, 0xa1, 0xa9, 0x64, 0xe1, 0xb9, 0x51, 0x6b, 0xf1, 0xdc, 0xc9, 0x88, 0xf9, 0x28, 0x5d, 0xdf,
	0x15, 0x14, 0x91, 0xea, 0xc5, 0x40, 0x2d, 0x7a, 0x1b, 0xb6, 0x59, 0x8a, 0x83, 0x65, 0x5d, 0xdb,
	0xd5, 0x1c, 0x6c, 0x89, 0x03, 0x27, 0x68, 0xe9, 0xdc, 0xc3, 0x83, 0x80, 0x92, 0xaf, 0x89, 0x56,
	0x52, 0xbe, 0xcc, 0x8a, 0xd1, 0xdf, 0x82, 0xcf, 0xf8, 0xc5, 0x64, 0x7a, 0x25, 0xc1, 0x2a, 0x4f,
	0xd9, 0xc2, 0xb6, 0x78, 0xfe, 0x04, 0x8d, 0x0d, 0x3c, 0x3c, 0x68, 0xd7, 0x8a, 0x5c, 0x47, 0xb6,
	0xb1, 0xe3, 0xb5, 0x16, 0x93, 0x06, 0x7c, 0xad, 0x65, 0x19, 0xf8, 0x2a, 0xc7, 0x46, 0xb7, 0x60,
	0x9b, 0x85, 0x1d, 0x72, 0xb7, 0x62, 0x87, 0xe9, 0x05, 0xfa, 0xc8, 0x06, 0x43, 0x6d, 0x49, 0x44,
	0x84, 0x3d, 0x2a, 0x7f, 0xb4, 0xd0, 0xaa, 0x14, 0xa3, 0xbf, 0x5d, 0x3b, 0x90, 0x77, 0xf9, 0x49,
	0x02, 0x79, 0xed, 0x9f, 0x1c, 0x00, 0xd2, 0x1a, 0x59, 0x0f, 0x62, 0xcd, 0x88, 0xde, 0x3f, 0xa8,
	0x1b, 0xe2, 0x7a, 0xf6, 0x04, 0x13, 0x38, 0xf6, 0x58, 0x21, 0x2e, 0xb1, 0x76, 0x90, 0x0b, 0xdd,
	0x82, 0xc4, 0x79, 0x92, 0x29, 0x63, 0x5f, 0xc0, 0x45, 0x47, 0x7c, 0x2e, 0x92, 0xa2, 0x58, 0xd7,
	0xed, 0x45, 0x57, 0x84, 0x1f, 0x8a, 0x52, 0x9b, 0xe3, 0x2b, 0x44, 0x73, 0xb0, 0xcb, 0x30, 0xe5,
	0x60, 0x04, 0x5d, 0xbc, 0x5a, 0xc7, 0xbe, 0x34, 0x4a, 0x82, 0x61, 0x86, 0x22, 0xd6, 0x0a, 0x0c,
	0x25, 0x07, 0x88, 0xc3, 0x14, 0x61, 0xa2, 0xde, 0xe3, 0x88, 0xcc, 0x4d, 0xe0, 0x26, 0xa0, 0x51,
	0x0a, 0x01, 0xa2, 0xab, 0xb0, 0x4d, 0x53, 0x75, 0xec, 0x31, 0x5d, 0x29, 0x6a, 0x39, 0x63, 0x5f,
	0x94, 0x41, 0x83, 0xd4, 0x4a, 0x6a, 0x5c, 0x76, 0x6c, 0x14, 0x76, 0x7b, 0xc6, 0x9a, 0x66, 0x65,
	0xd0, 0x64, 0x3e, 0x71, 0x88, 0x1a, 0xe9, 0x2e, 0xd7, 0x48, 0x1b, 0xb6, 0xc4, 0x2a, 0xd0, 0x8b,
	0xb0, 0xc3, 0x35, 0xea, 0x3c, 0xd1, 0xeb, 0x85, 0x3a, 0xa3, 0x6f, 0x92, 0xda, 0xb9, 0x34, 0x4f,
	0x1b, 0xbb, 0x06, 0x5b, 0x6d, 0x6c, 0xed, 0xb9, 0x11, 0xa7, 0x34, 0x0d, 0xa9, 0x40, 0x37, 0x95,
	0xe0, 0x9f, 0x7e, 0x63, 0xa1, 0x49, 0x82, 0x4c, 0x80, 0x46, 0x9e, 0x6e, 0x42, 0xa4, 0x14, 0x8b,
	0xd8, 0x50, 0x65, 0xbf, 0xd6, 0xb5, 0x08, 0x2d, 0x81, 0xc9, 0xad, 0x55, 0x74, 0x67, 0x61, 0x5b,
	0x51, 0xb1, 0x6d, 0xd9, 0xd9, 0xb1, 0xcc, 0xd2, 0xf6, 0x8e, 0x38, 0x5a, 0xb7, 0x9f, 0xad, 0x44,
	0x76, 0x9d, 0x89, 0xa2, 0x25, 0xd8, 0xcb, 0xef, 0xdf, 0x45, 0xc5, 0xd9, 0x91, 0x0d, 0xd3, 0xda,
	0xa5, 0x69, 0x36, 0xe2, 0x78, 0x1d, 0x8c, 0x98, 0xd4, 0xcd, 0x94, 0x56, 0x15, 0x67, 0x67, 0xc5,
	0x55, 0x41, 0xcb, 0x95, 0xec, 0xba, 0x10, 0xd8, 0x44, 0x5d, 0xb0, 0x1e, 0xae, 0x15, 0x44, 0xd3,
	0xe0, 0x65, 0xde, 0x33, 0xdb, 0xb1, 0xb4, 0x82, 0x23, 0xdb, 0x86, 0xc6, 0x72, 0xb6, 0xf9, 0x39,
	0x59, 0xd8, 0xc1, 0x85, 0x7b, 0xe2, 0x64, 0x1d, 0x3e, 0x2c, 0x46, 0xcd, 0x78, 0x5c, 0x1a, 0x64,
	0x40, 0x6b, 0x14, 0x67, 0xcd, 0xd0, 0xc8, 0xed, 0x80, 0x3d, 0xa5, 0x39, 0x82, 0x81, 0xd6, 0xc9,
	0xc5, 0x57, 0xa5, 0xf4, 0x9b, 0xa2, 0x7b, 0x71, 0xa1, 0x69, 0x8a, 0xfc, 0x4c, 0xd5, 0x25, 0x88,
	0xd4, 0x92, 0x69, 0x5f, 0xd6, 0x6c, 0xc7, 0x6b, 0xa2, 0xab, 0x02, 0xc0, 0xc3, 0x42, 0xe8, 0x55,
	0xd8, 0x5a, 0x50, 0x0d, 0x37, 0xb4, 0x26, 0x5e, 0x3f, 0x3e, 0xd8, 0x12, 0x0c, 0xa6, 0x49, 0xb0,
	0xe0, 0x7d, 0x47, 0xdf, 0x82, 0x17, 0xdd, 0xb9, 0x75, 0xac, 0x92, 0xed, 0xc8, 0xd5, 0x51, 0xa3,
	0xa5, 0x3a, 0x93, 0xdc, 0x2c, 0xb9, 0x8e, 0xca, 0x3a, 0xd1, 0x9e, 0x0b, 0x86, 0x8c, 0xd0, 0xbb,
	0x90, 0x4f, 0x51, 0x4d, 0xf0, 0x57, 0x4f, 0xe0, 0x63, 0x07, 0x43, 0x5b, 0x0b, 0xcd, 0x12, 0x27,
	0x1a, 0x23, 0x9b, 0x5c, 0x85, 0xa2, 0x61, 0x1a, 0x9e, 0xdb, 0xa4, 0x9b, 0x8a, 0xba, 0xa9, 0xe8,
	0x8a, 0x51, 0xc0, 0x96, 0x78, 0xbb, 0xce, 0x48, 0x12, 0x52, 0x9f, 0x41, 0x8c, 0x02, 0x55, 0x5b,
	0xf6, 0x69, 0xa1, 0x45, 0xd8, 0x13, 0x89, 0xb6, 0x52, 0x17, 0xad, 0x5b, 0x8d, 0x80, 0xba, 0x07,
	0x07, 0xf8, 0x22, 0x73, 0x2c, 0xc5, 0xb0, 0xb7, 0xc8, 0xa2, 0x64, 0xc9, 0xb1, 0xe4, 0xfa, 0x74,
	0x87, 0x02, 0x5e, 0x8d, 0xa4, 0x0c, 0xd6, 0x03, 0xf2, 0xec, 0xb8, 0xa2, 0x2c, 0xaf, 0xb8, 0x53,
	0xa3, 0x1e, 0xfd, 0x5d, 0x00, 0xbb, 0x58, 0xfa, 0x0e, 0xbd, 0xc9, 0xef, 0x9a, 0xaa, 0xb6, 0xb5,
	0x2f, 0xbe, 0x16, 0xc9, 0x4b, 0xb0, 0x0c, 0xa6, 0x1a, 0xbc, 0x44, 0xda, 0x77, 0x50, 0x44, 0xc7,
	0x0d, 0x53, 0xc1, 0x14, 0x76, 0xda, 0xe6, 0xba, 0x79, 0x9b, 0xb6, 0x88, 0x6e, 0xc1, 0x7e, 0x5f,
	0x1a, 0x70, 0xc0, 0xa6, 0x4a, 0xd4, 0xa6, 0x76, 0x12, 0x9b, 0xea, 0xcf, 0x01, 0xee, 0xad, 0xc8,
	0x2f, 0xfa, 0x0c, 0xad, 0x0e, 0x7b, 0x83, 0x3c, 0x1c, 0x7f, 0x5f, 0x43, 0x7c, 0x8b, 0x4e, 0xdc,
	0x58, 0xbd, 0x45, 0x14, 0xc1, 0x70, 0x56, 0xe2, 0xd0, 0xdd, 0x3b, 0x11, 0xfc, 0x67, 0x1a, 0xc6,
	0xe9, 0x59, 0x2f, 0x7e, 0xb3, 0xce, 0x73, 0x4e, 0x4a, 0x4c, 0x08, 0x6d, 0xc3, 0x2e, 0x1a, 0xd9,
	0x0a, 0xb8, 0xbe, 0xdf, 0x7a, 0x52, 0xd7, 0x37, 0x29, 0x75, 0x12, 0x54, 0x7f, 0x56, 0xcd, 0xab,
	0xb0, 0x4f, 0x9f, 0x61, 0xd1, 0x38, 0x85, 0xcd, 0x28, 0x5f, 0x68, 0xe2, 0x6f, 0xd4, 0xed, 0x67,
	0xb7, 0x3e, 0x93, 0x57, 0x4d, 0x3b, 0x5b, 0x60, 0x67, 0x1f, 0x55, 0x41, 0x13, 0xb0, 0x87, 0x1c,
	0x59, 0x7b, 0xa6, 0xee, 0x60, 0xcb, 0x52, 0xe4, 0x5d, 0xc5, 0x50, 0xb6, 0xb1, 0x2a, 0x7e, 0x96,
	0xa0, 0x87, 0x17, 0x52, 0x0d, 0x7b, 0x83, 0xd7, 0xdd, 0x66, 0x55, 0xe8, 0x4d, 0x96, 0x7b, 0xe8,
	0x1a, 0xb3, 0x3f, 0x4f, 0x9c, 0xc0, 0x0b, 0x11, 0x1f, 0x1e, 0xc0, 0x8a, 0x92, 0x9f, 0x7d, 0x24,
	0xc5, 0xae, 0x5d, 0xbb, 0x00, 0x5b, 0xbc, 0xfc, 0x47, 0xf1, 0x27, 0xac, 0x07, 0x49, 0x37, 0xf3,
	0x11, 0xcd, 0xc1, 0x38, 0xcb, 0xfa, 0xfc, 0x2f, 0x09, 0xca, 0x6e, 0xa4, 0x4f, 0xc8, 0xd6, 0xd0,
	0x6c, 0x4e, 0x89, 0xe9, 0x92, 0x26, 0xa8, 0xa5, 0xa7, 0x67, 0xe0, 0x7f, 0x65, 0x99, 0x18, 0x49,
	0x52, 0x42, 0x8f, 0xbb, 0x05, 0x98, 0x74, 0x5f, 0xdb, 0x11, 0xff, 0x1b, 0x1b, 0x57, 0xbd, 0x56,
	0xbc, 0x77, 0x7c, 0x46, 0xf3, 0x86, 0xbd, 0x68, 0x6c, 0x99, 0x52, 0x42, 0x65, 0x1f, 0xd0, 0xbb,
	0xd5, 0xc9, 0xaa, 0x7f, 0x91, 0x38, 0x55, 0xb6, 0xaa, 0x18, 0x9d, 0xad, 0x2a, 0x82, 0x70, 0xbe,
	0xea, 0x1a, 0xf5, 0x88, 0xdc, 0xec, 0x51, 0x32, 0x84, 0x9f, 0xb2, 0x30, 0x7c, 0xfa, 0x18, 0x97,
	0x28, 0x90, 0x66, 0x2b, 0xb5, 0x29, 0xbe, 0x12, 0xe2, 0xda, 0xf8, 0x92, 0x60, 0xe9, 0x0d, 0x74,
	0xd7, 0xde, 0x16, 0xdf, 0x4f, 0xb2, 0x34, 0x17, 0x2f, 0xd9, 0x95, 0xd4, 0xdc, 0xb6, 0xb7, 0xd1,
	0x2b, 0xb0, 0x8d, 0xfa, 0x98, 0xee, 0xea, 0xf8, 0x1f, 0x09, 0xca, 0x1b, 0x0e, 0xd5, 0xc8, 0xa7,
	0xf7, 0x9b, 0x8d, 0x56, 0xa2, 0xe8, 0x2e, 0x85, 0x12, 0xec, 0x0e, 0xbe, 0xf3, 0x45, 0x7c, 0x7f,
	0x5b, 0xfc, 0xcb, 0x93, 0x2c, 0xb6, 0x2b, 0x0f, 0x0f, 0x50, 0xb5, 0x72, 0xd8, 0xd7, 0x8d, 0x4b,
	0x5d, 0x5c, 0x88, 0x79, 0xfa, 0x6b, 0xd8, 0xb1, 0xd1, 0x2e, 0xec, 0xf3, 0x5b, 0x78, 0x59, 0xd1,
	0xb7, 0x4d, 0x4b, 0x73, 0x76, 0x76, 0xc5, 0xff, 0x19, 0xbd, 0xe8, 0xf8, 0x1b, 0x6f, 0xa3, 0x7e,
	0x23, 0x9f, 0x75, 0x95, 0x7c, 0x79, 0x2e, 0x7a, 0x54, 0x3d, 0x7a, 0x16, 0xb6, 0x7b, 0x3b, 0x8f,
	0x2e, 0xfa, 0xff, 0xc5, 0x16, 0x7d, 0x9b, 0x5b, 0x4a, 0x17, 0xfe, 0x6a, 0xc5, 0xbd, 0xf4, 0x25,
	0x5d, 0x89, 0x5f, 0x24, 0x4e, 0x12, 0xb0, 0x6b, 0xf1, 0x1c, 0xd0, 0x4a, 0xf6, 0x10, 0xda, 0x84,
	0xad, 0x7e, 0xa4, 0xff, 0x9d, 0x38, 0xfe, 0x26, 0x53, 0x33, 0xb9, 0xca, 0xdf, 0x14, 0xdc, 0xac,
	0xb4, 0x71, 0x03, 0x76, 0x53, 0x3f, 0x8a, 0x9c, 0xf5, 0x16, 0x2e, 0x96, 0x1c, 0xe6, 0xa5, 0x7f,
	0x49, 0x47, 0x58, 0x99, 0x99, 0x2e, 0x2a, 0xb4, 0x58, 0x94, 0x3c, 0x11, 0xb4, 0x01, 0x93, 0x5b,
	0x8a, 0xed, 0xc8, 0x4a, 0x41, 0x17, 0xff, 0xcf, 0x49, 0x1e, 0xf8, 0x85, 0x87, 0x07, 0x9e, 0x46,
	0x75, 0xe8, 0x35, 0x41, 0xaa, 0xb2, 0x05, 0x1d, 0xad, 0xc2, 0x66, 0x7d, 0x86, 0xa2, 0xfe, 0xdf,
	0xc4, 0xc9, 0xae, 0x9e, 0x5c, 0xbe, 0x1a, 0x33, 0xae, 0xcf, 0x10, 0x44, 0x09, 0xb6, 0x10, 0x13,
	0xf0, 0x1d, 0xd3, 0xc0, 0xb6, 0xf8, 0xd7, 0x27, 0x01, 0xed, 0x7b, 0x78, 0x90, 0x74, 0x55, 0xfc,
	0x66, 0x90, 0x14, 0xbe, 0x4d, 0x60, 0x28, 0x0b, 0x6c, 0x5b, 0x5b, 0xee, 0xc5, 0x75, 0x35, 0x9a,
	0x05, 0xb6, 0xad, 0xad, 0x10, 0x0b, 0xec, 0x95, 0x20, 0x1b, 0xf6, 0x93, 0x26, 0x28, 0xa3, 0xca,
	0x33, 0xa1, 0x79, 0x9e, 0x8e, 0xf8, 0x07, 0x2d, 0xc7, 0x5f, 0x92, 0x22, 0x33, 0x7c, 0x7c, 0x4b,
	0x59, 0x35, 0xec, 0x88, 0x0c, 0xa0, 0x29, 0xd8, 0x62, 0x98, 0x8e, 0x6c, 0x61, 0x45, 0xdd, 0x17,
	0x7f, 0x56, 0x2f, 0xad, 0x13, 0x4a, 0x49, 0xc3, 0x74, 0x24, 0x22, 0x88, 0xae, 0xc1, 0x38, 0xd3,
	0x78, 0x2f, 0x59, 0x57, 0x83, 0x49, 0x21, 0x09, 0x22, 0x4e, 0xa1, 0xfa, 0x93, 0xf2, 0x7f, 0x33,
	0x79, 0xf2, 0x8c, 0x75, 0x81, 0xe9, 0xfb, 0x12, 0xf4, 0xdf, 0x81, 0x3d, 0xb6, 0x6e, 0xde, 0xaf,
	0x4a, 0x6f, 0x59, 0xa3, 0xa0, 0x75, 0xad, 0x75, 0x75, 0x36, 0x87, 0x84, 0x08, 0x56, 0x28, 0x87,
	0xe6, 0x16, 0x4c, 0x2a, 0x45, 0x8d, 0xc6, 0x6a, 0xc5, 0x75, 0x8a, 0x7a, 0xb9, 0xae, 0x45, 0x66,
	0x39, 0x01, 0x95, 0x3e, 0x27, 0x14, 0x9e, 0x25, 0x60, 0xc0, 0x4e, 0x66, 0x57, 0xd9, 0xf0, 0x77,
	0x95, 0xa2, 0xf8, 0x26, 0x5d, 0x73, 0x2f, 0x3e, 0x06, 0x87, 0x5c, 0xc9, 0xa2, 0xb8, 0xad, 0x14,
	0x19, 0x89, 0xec, 0xb5, 0xd4, 0xae, 0xfa, 0x2b, 0xd1, 0x2e, 0x77, 0xb7, 0xbc, 0xcc, 0x6e, 0xd7,
	0xdd, 0xfa, 0x3b, 0xc9, 0x93, 0xf9, 0x5b, 0xa1, 0xf8, 0x67, 0xc8, 0xdf, 0x0a, 0xd5, 0x0e, 0x7c,
	0x03, 0x76, 0x55, 0x11, 0xdc, 0xfe, 0x44, 0xc6, 0xf6, 0x63, 0x12, 0x19, 0x07, 0x8a, 0xfe, 0x1c,
	0x11, 0x77, 0x74, 0x11, 0xa9, 0x90, 0x79, 0x3f, 0xc2, 0x31, 0xcf, 0xb8, 0x3a, 0xe9, 0xc4, 0xd7,
	0x62, 0x6e, 0x0c, 0xf6, 0xbb, 0xf1, 0x28, 0xb7, 0xda, 0x8d, 0x0d, 0xf7, 0xfc, 0x80, 0x25, 0xb2,
	0xbc, 0x7e, 0x54, 0x06, 0xb1, 0xd9, 0xf4, 0x8d, 0xeb, 0x9f, 0x97, 0x01, 0xc8, 0x5d, 0x81, 0x1d,
	0x95, 0x4c, 0x61, 0xf6, 0x06, 0xcc, 0xa3, 0x32, 0xb8, 0x78, 0x58, 0x06, 0x83, 0x47, 0x65, 0x90,
	0x9c, 0x9c, 0x48, 0x67, 0xa6, 0xd2, 0x99, 0xd9, 0xdc, 0x08, 0xec, 0x0d, 0xb2, 0x11, 0xfe, 0x90,
	0xf3, 0xd5, 0xc3, 0x32, 0xb8, 0x72, 0x54, 0x06, 0xf1, 0xc9, 0xd9, 0xf4, 0xd4, 0x78, 0x6e, 0x0c,
	0xf6, 0xf0, 0x9b, 0xbd, 0x77, 0x7f, 0xa5, 0xa2, 0xfd, 0x8f, 0xca, 0xe0, 0x85, 0xc3, 0x32, 0x18,
	0x39, 0x2a, 0x83, 0xd6, 0xa9, 0xc9, 0xf4, 0xd4, 0x54, 0x7a, 0x6a, 0x3a, 0x3d, 0x75, 0x9d, 0x80,
	0x07, 0xaf, 0xd1, 0x7e, 0xf0, 0xf1, 0xc3, 0x32, 0x18, 0x23, 0xe0, 0x53, 0x37, 0xd2, 0x53, 0xb3,
	0xb9, 0xaf, 0xc3, 0xcb, 0xf5, 0x6e, 0xc9, 0xae, 0x66, 0xef, 0xa3, 0x32, 0x98, 0x3c, 0x2c, 0x83,
	0x0c, 0xcd, 0x76, 0x9e, 0x48, 0x4f, 0x4f, 0xd2, 0xe1, 0x4e, 0xc2, 0xc1, 0x1a, 0xf7, 0x3e, 0x7f,
	0x93, 0x4b, 0x87, 0x65, 0xb0, 0x48, 0x14, 0x67, 0xa6, 0xd2, 0x33, 0xd3, 0xb9, 0x2b, 0xb0, 0xcb,
	0xbb, 0x6e, 0x6d, 0xfa, 0xe5, 0x6e, 0x1f, 0x96, 0xc1, 0x32, 0x95, 0x9b, 0x49, 0xcf, 0xdc, 0xc8,
	0x8d, 0xc1, 0xf3, 0xcc, 0x0b, 0x26, 0x0e, 0x8a, 0x2f, 0xa1, 0x8c, 0x79, 0xc5, 0x48, 0x38, 0x2c,
	0x83, 0xb7, 0xc9, 0xa4, 0xce, 0x4e, 0xa6, 0x67, 0x27, 0xd2, 0xb3, 0x99, 0xdc, 0x04, 0x44, 0xfe,
	0xac, 0x65, 0x8e, 0x7c, 0xfe, 0x51, 0x19, 0x7c, 0x91, 0x38, 0x2c, 0x83, 0xbf, 0x4a, 0x1c, 0x95,
	0x41, 0xcb, 0xc4, 0xf8, 0xc4, 0xf5, 0xf4, 0xc4, 0xf8, 0xc4, 0x0c, 0x1d, 0xc0, 0x38, 0xec, 0x75,
	0xcd, 0x35, 0x73, 0xe3, 0xfc, 0x93, 0xfb, 0x33, 0xa2, 0xf5, 0x37, 0x5c, 0x2b, 0x33, 0x99, 0x9e,
	0x18, 0xcf, 0x4c, 0x79, 0xf9, 0x15, 0xaf, 0x0b, 0x1b, 0x4b, 0xb1, 0xe4, 0xa0, 0x70, 0x71, 0x29,
	0x96, 0xbc, 0x22, 0x5c, 0x5d, 0x8a, 0x25, 0x47, 0x84, 0x17, 0x96, 0x62, 0xc9, 0x31, 0x61, 0x7c,
	0x29, 0x96, 0xcc, 0x08, 0x93, 0x4b, 0xb1, 0xe4, 0x94, 0x30, 0xbd, 0x14, 0x4b, 0x2e, 0x0a, 0x4b,
	0x4b, 0xb1, 0xe4, 0xb2, 0x70, 0x7b, 0x29, 0x96, 0x7c, 0x5b, 0xf8, 0xe6, 0x52, 0x73, 0xf2, 0xaf,
	0x12, 0xc2, 0x17, 0x89, 0xa5, 0xe6, 0xe4, 0xdf, 0x24, 0x84, 0x9f, 0x25, 0x96, 0x62, 0xc9, 0x37,
	0x84, 0x37, 0x87, 0xfe, 0x73, 0x23, 0x44, 0xf9, 0x95, 0xb5, 0x0d, 0xd7, 0xa5, 0xe5, 0xef, 0x7e,
	0xe7, 0x5c, 0xaf, 0x18, 0x9c, 0xde, 0x29, 0xfe, 0x3a, 0x1c, 0xc0, 0x0f, 0x34, 0xdb, 0xd1, 0x8c,
	0x6d, 0xff, 0x52, 0xe6, 0x7e, 0x6b, 0x9c, 0x6e, 0x1c, 0xd1, 0x95, 0xf0, 0x6d, 0x05, 0xe6, 0x77,
	0x6e, 0xc1, 0x7e, 0x0b, 0x1b, 0xf8, 0x7e, 0x84, 0x6a, 0xf3, 0x69, 0x3c, 0x5e, 0xa9, 0x97, 0xc2,
	0x55, 0xb5, 0xf3, 0x02, 0xec, 0x62, 0x0e, 0xa8, 0x8a, 0xd9, 0x7d, 0xc9, 0x4d, 0x5a, 0x6a, 0x91,
	0x04, 0x5a, 0x91, 0xaf, 0x94, 0xa3, 0xe7, 0xa1, 0x60, 0x97, 0xb6, 0xb7, 0xb1, 0xed, 0x60, 0x95,
	0x2f, 0x08, 0xfe, 0x2a, 0x55, 0xa7, 0x57, 0xce, 0x6e, 0x42, 0x3c, 0x09, 0xe8, 0xfb, 0x43, 0xb0,
	0x63, 0xce, 0xc2, 0xa4, 0x35, 0x37, 0x35, 0x43, 0x0c, 0xa5, 0x66, 0x54, 0xb2, 0x2e, 0x5e, 0x7a,
	0xac, 0xac, 0x8b, 0xa4, 0x9b, 0x75, 0xe1, 0xa5, 0x5a, 0x7c, 0xf5, 0xf9, 0x10, 0xef, 0x3c, 0xc5,
	0x7c, 0x88, 0xe8, 0xcc, 0x87, 0xcd, 0xa7, 0x99, 0xf9, 0x50, 0x23, 0xc7, 0x61, 0xf6, 0xd8, 0x1c,
	0x87, 0x9a, 0xd9, 0x0c, 0x5f, 0x3b, 0x3e, 0x9b, 0xe1, 0x97, 0x38, 0x6f, 0x21, 0x7f, 0xba, 0xb4,
	0x83, 0x50, 0xc2, 0xc1, 0xcd, 0xc7, 0x4b, 0x38, 0x08, 0xa4, 0x1a, 0x2c, 0x9e, 0x26, 0xd5, 0x20,
	0xd7, 0x46, 0x13, 0x73, 0xdf, 0x07, 0xb1, 0x81, 0xc6, 0x58, 0xdc, 0x4d, 0x3c, 0x38, 0x45, 0x02,
	0xc1, 0xf6, 0xd3, 0x4f, 0x20, 0x38, 0x75, 0xea, 0xc0, 0xdb, 0x4f, 0x29, 0x75, 0x20, 0x2a, 0x69,
	0x40, 0x39, 0x45, 0xce, 0x40, 0xd0, 0x8a, 0x55, 0xe7, 0x0c, 0x3c, 0xdd, 0x48, 0xf3, 0xf4, 0x31,
	0x91, 0xe6, 0xa7, 0x1f, 0x5e, 0x7e, 0xf3, 0xa9, 0x85, 0x97, 0xc3, 0x81, 0x65, 0xf9, 0x29, 0x06,
	0x96, 0x23, 0x43, 0xca, 0xf8, 0xf4, 0xf1, 0xdd, 0xbe, 0xe8, 0xf8, 0x6e, 0x64, 0x54, 0x77, 0xf5,
	0x14, 0x51, 0xdd, 0xce, 0x50, 0x54, 0x37, 0x18, 0xcb, 0x7d, 0xf7, 0x69, 0xc4, 0x72, 0x85, 0x70,
	0x2c, 0xf7, 0xe7, 0x13, 0xc1, 0xbd, 0x14, 0x15, 0xc6, 0x7b, 0xb2, 0x00, 0xde, 0xee, 0x57, 0x13,
	0x14, 0xae, 0x15, 0x05, 0x7e, 0x2a, 0x01, 0xd3, 0x6f, 0x3e, 0xb5, 0x80, 0x69, 0x44, 0xa8, 0xf4,
	0x09, 0x23, 0x9a, 0x97, 0x22, 0x22, 0x9a, 0xa1, 0x28, 0xe6, 0x68, 0xed, 0x28, 0xe6, 0xaf, 0x4f,
	0xe4, 0xb2, 0xf0, 0xc4, 0x91, 0xcb, 0x13, 0xc4, 0x2c, 0x57, 0x4e, 0x1d, 0xb3, 0x8c, 0x8e, 0x56,
	0x9e, 0x36, 0x1e, 0xd7, 0xfc, 0x54, 0xe3, 0x71, 0xcd, 0xd1, 0xf1, 0x38, 0xfc, 0x14, 0xe3, 0x71,
	0x75, 0x22, 0x71, 0x37, 0x1f, 0x8f, 0xd4, 0x0b, 0xd0, 0x79, 0x6f, 0x3c, 0x9d, 0x20, 0x5e, 0x75,
	0x58, 0xee, 0xfa, 0x31, 0x61, 0xb9, 0x5a, 0x51, 0xb8, 0xbb, 0x5f, 0x01, 0xbf, 0x58, 0x8b, 0x56,
	0xfc, 0xea, 0xd9, 0xb9, 0x97, 0x4e, 0xc5, 0xce, 0x55, 0x48, 0x39, 0x7c, 0x2a, 0x52, 0x2e, 0xe4,
	0xa4, 0x55, 0xd3, 0x56, 0x21, 0x2e, 0xee, 0x97, 0x90, 0x1c, 0xbb, 0xb9, 0xfd, 0xc7, 0x2f, 0x85,
	0xde, 0x76, 0xf8, 0xe9, 0x4b, 0x6b, 0x13, 0xd3, 0xe9, 0x4c, 0x7a, 0x32, 0x3d, 0x9d, 0xbe, 0x31,
	0x9d, 0x9e, 0xb8, 0x91, 0x9e, 0x98, 0x4d, 0x4f, 0xde, 0x48, 0x5f, 0x4f, 0x4f, 0xcc, 0xa4, 0x67,
	0xd2, 0x37, 0xd2, 0x13, 0x99, 0xf4, 0xc4, 0x64, 0x3a, 0x33, 0x9e, 0xce, 0xdc, 0x48, 0x67, 0x26,
	0xd2, 0x99, 0x4c, 0x7a, 0x72, 0x32, 0x9d, 0x99, 0x4c, 0x4f, 0x8e, 0xa7, 0x27, 0xa7, 0xd3, 0x99,
	0xeb, 0xe9, 0xcc, 0x4c, 0x3a, 0x33, 0x9d, 0x9e, 0xcc, 0xa4, 0x27, 0xa7, 0xd2, 0x33, 0xd7, 0xd3,
	0x33, 0xb3, 0xe9, 0x1b, 0x99, 0xdc, 0xf5, 0xda, 0x2c, 0xdc, 0xf9, 0xf7, 0xbf, 0x04, 0xb5, 0x2a,
	0x73, 0xcf, 0x56, 0x91, 0x71, 0xe8, 0xfd, 0x2f, 0x41, 0xa8, 0x2c, 0x97, 0xa9, 0x45, 0xc5, 0x9d,
	0x7b, 0xff, 0x4b, 0x10, 0x5d, 0x95, 0x1b, 0xaf, 0x41, 0xc9, 0x89, 0xef, 0x7f, 0x09, 0x22, 0x6b,
	0x48, 0x2b, 0xd1, 0x9c, 0x1c, 0x6d, 0x25, 0xb2, 0x2a, 0xb7, 0x72, 0x32, 0x6e, 0xee, 0xea, 0xfb,
	0x5f, 0x82, 0x93, 0x08, 0xe6, 0x46, 0xa2, 0x88, 0xb7, 0xde, 0xf7, 0xbf, 0x04, 0xd5, 0xc5, 0x21,
	0x0a, 0x8b, 0x91, 0x57, 0x6f, 0x08, 0x6f, 0x0e, 0xfd, 0xc9, 0x10, 0xec, 0x94, 0x70, 0x51, 0x57,
	0x0a, 0x67, 0x44, 0xca, 0x19, 0x91, 0x72, 0x46, 0xa4, 0x9c, 0x11, 0x29, 0xbf, 0x10, 0x44, 0xca,
	0x66, 0x34, 0x91, 0x52, 0xf7, 0x8c, 0x0e, 0x99, 0xb1, 0x33, 0x26, 0xe5, 0x8c, 0x49, 0xf9, 0xf5,
	0x66, 0x52, 0xbe, 0xb2, 0x84, 0xe8, 0x33, 0x3e, 0xe5, 0x8c, 0x4f, 0x39, 0xe3, 0x53, 0xce, 0xf8,
	0x94, 0x33, 0x3e, 0xe5, 0x8c, 0x4f, 0xd9, 0xaa, 0xc5, 0xa7, 0xbc, 0xf4, 0x38, 0xbe, 0xda, 0x19,
	0xa1, 0x72, 0x46, 0xa8, 0xfc, 0x6a, 0x10, 0x2a, 0xff, 0xf8, 0x2a, 0x6c, 0xbd, 0x85, 0x9d, 0x33,
	0x32, 0xe5, 0x8c, 0x4c, 0xf9, 0x95, 0xff, 0x35, 0x8d, 0xff, 0xff, 0x6c, 0xcc, 0x13, 0xfd, 0x82,
	0xc6, 0x19, 0xff, 0x52, 0x93, 0x7f, 0xf9, 0x76, 0x34, 0xff, 0x32, 0x5b, 0x37, 0x71, 0xb9, 0x62,
	0xf5, 0xce, 0xb8, 0x97, 0x33, 0xee, 0xe5, 0x97, 0x92, 0x7b, 0xc9, 0x9e, 0x86, 0x7b, 0x79, 0xec,
	0xfc, 0x95, 0x33, 0xfe, 0xe4, 0x8c, 0x3f, 0x39, 0xe3, 0x4f, 0xce, 0xf8, 0x93, 0x13, 0xf3, 0x27,
	0xbf, 0x70, 0x1c, 0xc8, 0x2f, 0xd5, 0xcb, 0xbd, 0x3f, 0xcf, 0x37, 0x6d, 0x7f, 0xb3, 0xd6, 0x9b,
	0xb6, 0x8f, 0xcb, 0xb1, 0x3f, 0xd5, 0x1f, 0x8d, 0x78, 0x12, 0xfe, 0xed, 0xe7, 0x49, 0x77, 0x9d,
	0xfc, 0xad, 0xc4, 0xc4, 0x63, 0xbf, 0x95, 0x98, 0x70, 0xdf, 0x4a, 0xfc, 0xc5, 0xe7, 0xd4, 0x36,
	0x6b, 0x71, 0x6a, 0x37, 0x4f, 0xea, 0x7f, 0xff, 0x4a, 0xf2, 0x69, 0x77, 0x23, 0xf8, 0xb4, 0x8d,
	0x89, 0xf1, 0xf4, 0x19, 0xa5, 0xf6, 0x2b, 0x41, 0xa9, 0x91, 0xfe, 0x46, 0xbf, 0xbc, 0x47, 0xfb,
	0x1b, 0x59, 0x15, 0x41, 0xc3, 0x35, 0x27, 0xff, 0x22, 0x21, 0xfc, 0xf7, 0xd0, 0xeb, 0x78, 0x23,
	0xff, 0x12, 0xc0, 0xce, 0x10, 0x89, 0x81, 0xba, 0x61, 0xe7, 0xc6, 0xa2, 0xb4, 0xfe, 0x7a, 0x76,
	0x59, 0x5e, 0x9b, 0x97, 0x36, 0x16, 0xe7, 0xe6, 0x85, 0x06, 0xd4, 0x07, 0xd1, 0xc2, 0xfa, 0xfa,
	0xaa, 0xbc, 0x7c, 0x27, 0x9b, 0x97, 0x73, 0xd9, 0xe5, 0xec, 0xca, 0xdc, 0xbc, 0x24, 0x00, 0xd4,
	0x09, 0x5b, 0xb3, 0xab, 0x8b, 0xf2, 0xad, 0xec, 0xfa, 0xfc, 0x1b, 0xd9, 0xb7, 0x84, 0x46, 0xd4,
	0x0b, 0xbb, 0xd6, 0xe7, 0xc2, 0x72, 0x4d, 0xa8, 0x05, 0xc6, 0x57, 0xa5, 0x3b, 0x6f, 0xbe, 0x25,
	0xc4, 0xd0, 0x45, 0xd8, 0xbb, 0x7c, 0x67, 0x2e, 0xbb, 0x2c, 0xbf, 0x7a, 0x63, 0x4d, 0xf6, 0x2b,
	0xc7, 0xd9, 0x6f, 0x08, 0x12, 0x88, 0xb9, 0xfc, 0x4a, 0x08, 0xa2, 0x79, 0xe4, 0x3f, 0x02, 0xd8,
	0x52, 0xf9, 0x97, 0x94, 0x3d, 0x10, 0xd2, 0x0e, 0x31, 0xd4, 0x06, 0xae, 0xda, 0x0d, 0x5b, 0x48,
	0xeb, 0xac, 0x10, 0xf0, 0xc2, 0x0b, 0x10, 0x79, 0x85, 0xf2, 0x1b, 0x8b, 0xeb, 0x0b, 0xf2, 0xda,
	0xca, 0xa2, 0xd0, 0xc8, 0x6b, 0xfb, 0x61, 0xfb, 0xfa, 0xf2, 0x9a, 0x5c, 0x51, 0xe3, 0x3f, 0x65,
	0x88, 0x52, 0xb0, 0x2f, 0x50, 0x51, 0x51, 0x4d, 0x78, 0x1d, 0x6d, 0x25, 0x7d, 0x58, 0xe3, 0x8a,
	0x4d, 0xbc, 0xb8, 0x1d, 0xb6, 0xbc, 0x9e, 0x77, 0xd1, 0x62, 0xe4, 0xeb, 0xda, 0xed, 0x2c, 0xff,
	0x1a, 0x27, 0x5f, 0xf3, 0x2b, 0xae, 0x4a, 0x72, 0xe4, 0x8f, 0x1a, 0xa1, 0x10, 0xf6, 0x04, 0xc8,
	0x6c, 0xbb, 0x8f, 0x60, 0xe1, 0xce, 0xda, 0xba, 0x2c, 0xcd, 0x67, 0xf3, 0x6f, 0x09, 0x0d, 0xe8,
	0x39, 0x78, 0x29, 0x50, 0xbe, 0x3a, 0xbf, 0x92, 0x5f, 0x5c, 0xb9, 0x25, 0x6f, 0xcc, 0x4b, 0x8b,
	0xaf, 0x2c, 0xce, 0x65, 0xd7, 0x17, 0xef, 0xac, 0x08, 0x00, 0x3d, 0x0b, 0x53, 0x01, 0x31, 0x7f,
	0xb5, 0xfc, 0x4a, 0x76, 0x71, 0x79, 0x3e, 0x2f, 0x34, 0xa2, 0xab, 0xf0, 0x72, 0x24, 0x18, 0xe9,
	0x5d, 0x7e, 0x7e, 0x79, 0xfe, 0x16, 0x83, 0x6b, 0x42, 0x97, 0xe0, 0x33, 0x91, 0x82, 0x59, 0x59,
	0x9a, 0x9f, 0xbb, 0x23, 0xe5, 0x85, 0x18, 0xba, 0x0c, 0x2f, 0x06, 0x44, 0x08, 0x86, 0x5b, 0x2d,
	0x67, 0xf3, 0xf9, 0xf9, 0xbc, 0x10, 0x47, 0xa3, 0x70, 0x24, 0x20, 0xb4, 0xb8, 0xb2, 0x3e, 0x2f,
	0xad, 0xcc, 0xaf, 0xcb, 0x2b, 0xcb, 0x39, 0x0f, 0x74, 0x4e, 0x9a, 0x67, 0xed, 0x36, 0xa3, 0x6b,
	0xf0, 0xf9, 0xda, 0xf2, 0xae, 0x9c, 0x3b, 0x9e, 0xc4, 0xc8, 0x9f, 0x35, 0x41, 0x54, 0xfd, 0x1e,
	0x26, 0xea, 0xa9, 0xfc, 0x13, 0xbe, 0x3c, 0x73, 0x27, 0x54, 0xa1, 0x01, 0x9d, 0x83, 0xbd, 0x79,
	0xf7, 0x27, 0x5b, 0x36, 0xb0, 0xe5, 0xe9, 0x08, 0x64, 0x0d, 0x75, 0x66, 0x2b, 0x3f, 0x49, 0x62,
	0x39, 0x58, 0x15, 0x1a, 0xd1, 0x33, 0xf0, 0xdc, 0xaa, 0xc5, 0xff, 0xa3, 0x89, 0xc7, 0x21, 0xac,
	0x62, 0x43, 0xd5, 0x8c, 0x6d, 0xa1, 0x0d, 0x0d, 0xc0, 0xbe, 0x50, 0x9d, 0xab, 0xda, 0x1e, 0x51,
	0xe7, 0xea, 0x35, 0xa1, 0xf3, 0xb0, 0x3f, 0x54, 0xc7, 0x3a, 0x83, 0x55, 0x21, 0xe6, 0xef, 0xf9,
	0x2b, 0x9a, 0x41, 0xed, 0x91, 0x10, 0x27, 0x6b, 0xc3, 0x77, 0x12, 0x2c, 0x1a, 0xf4, 0x27, 0xdc,
	0x85, 0x66, 0x22, 0xed, 0x2b, 0xa7, 0xbf, 0xda, 0x2e, 0x24, 0xc8, 0x38, 0x5d, 0x8c, 0x15, 0xd3,
	0xc9, 0xb2, 0x7f, 0xb9, 0xb4, 0xa9, 0x63, 0x21, 0x89, 0xfa, 0x61, 0xb7, 0x5b, 0x25, 0x79, 0x57,
	0x7f, 0x55, 0x68, 0x21, 0x9d, 0x72, 0x2b, 0x6e, 0x61, 0x03, 0x73, 0xdf, 0x84, 0xdc, 0xe5, 0x05,
	0x88, 0xba, 0x60, 0x7b, 0xd6, 0xef, 0xc4, 0x09, 0xad, 0xa4, 0x47, 0xd5, 0xbf, 0xec, 0x22, 0x74,
	0xa0, 0x41, 0x38, 0xe0, 0x96, 0x67, 0x0b, 0x05, 0xb3, 0x64, 0x04, 0xda, 0xe9, 0x24, 0x73, 0xea,
	0x3d, 0x19, 0xf6, 0x9f, 0x63, 0x7c, 0xd5, 0x42, 0x68, 0xa0, 0xf4, 0x77, 0x0e, 0xb0, 0x2a, 0x74,
	0x8d, 0x8c, 0xc1, 0x8e, 0xe0, 0xbf, 0x10, 0x42, 0x6d, 0x30, 0x49, 0xec, 0xc8, 0xed, 0x3b, 0x79,
	0x62, 0xaa, 0x3a, 0x61, 0xeb, 0xe2, 0xca, 0xf2, 0xe2, 0xca, 0x3c, 0x2b, 0x00, 0xb9, 0xdf, 0x06,
	0x87, 0x3f, 0x1a, 0x6c, 0xf8, 0xe4, 0x47, 0x83, 0x0d, 0x9f, 0xff, 0x68, 0x10, 0xbc, 0x77, 0x34,
	0x08, 0xfe, 0xc5, 0xd1, 0x20, 0xf8, 0xc1, 0xd1, 0x20, 0x38, 0x3c, 0x1a, 0x04, 0x9f, 0x1c, 0x0d,
	0x82, 0x4f, 0x8f, 0x06, 0xc1, 0x67, 0x47, 0x83, 0x0d, 0x9f, 0x1f, 0x0d, 0x82, 0xef, 0xfe, 0x78,
	0xb0, 0xe1, 0xd1, 0x8f, 0x07, 0xc1, 0xe1, 0x8f, 0x07, 0x1b, 0x3e, 0xf9, 0xf1, 0x60, 0xc3, 0xdb,
	0xab, 0xdb, 0x66, 0xf1, 0xde, 0xf6, 0xa8, 0xfb, 0x63, 0x26, 0xa3, 0x25, 0x7b, 0x8c, 0x7e, 0x20,
	0x77, 0x91, 0x6b, 0x45, 0xcb, 0xdc, 0xd3, 0x54, 0x6c, 0x5d, 0x73, 0xab, 0xc7, 0x8a, 0x9b, 0xdb,
	0xe6, 0x18, 0x7e, 0xe0, 0xb8, 0xff, 0xf3, 0xbb, 0xfa, 0x9f, 0x6a, 0x6f, 0x36, 0xd3, 0xdf, 0x76,
	0x98, 0xfc, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb5, 0xce, 0x19, 0xd7, 0x74, 0x7d, 0x00, 0x00,
}

func (x VirtualHostType) String() string {
	s, ok := VirtualHostType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ProxyType) String() string {
	s, ok := ProxyType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x VirtualHostState) String() string {
	s, ok := VirtualHostState_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x CertificationState) String() string {
	s, ok := CertificationState_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x BotDefenseMode) String() string {
	s, ok := BotDefenseMode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *VirtualHostID) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VirtualHostID)
	if !ok {
		that2, ok := that.(VirtualHostID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *VerStatusType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VerStatusType)
	if !ok {
		that2, ok := that.(VerStatusType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.CoalescedVirtualHosts) != len(that1.CoalescedVirtualHosts) {
		return false
	}
	for i := range this.CoalescedVirtualHosts {
		if !this.CoalescedVirtualHosts[i].Equal(that1.CoalescedVirtualHosts[i]) {
			return false
		}
	}
	if len(this.NonCoalescedVirtualHosts) != len(that1.NonCoalescedVirtualHosts) {
		return false
	}
	for i := range this.NonCoalescedVirtualHosts {
		if !this.NonCoalescedVirtualHosts[i].Equal(that1.NonCoalescedVirtualHosts[i]) {
			return false
		}
	}
	if !this.AdvertisePolicy.Equal(that1.AdvertisePolicy) {
		return false
	}
	if len(this.CoalescedVhosts) != len(that1.CoalescedVhosts) {
		return false
	}
	for i := range this.CoalescedVhosts {
		if !this.CoalescedVhosts[i].Equal(that1.CoalescedVhosts[i]) {
			return false
		}
	}
	if len(this.NonCoalescedVhosts) != len(that1.NonCoalescedVhosts) {
		return false
	}
	for i := range this.NonCoalescedVhosts {
		if !this.NonCoalescedVhosts[i].Equal(that1.NonCoalescedVhosts[i]) {
			return false
		}
	}
	return true
}
func (this *JavaScriptConfigType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*JavaScriptConfigType)
	if !ok {
		that2, ok := that.(JavaScriptConfigType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CachePrefix != that1.CachePrefix {
		return false
	}
	if !this.ScriptConfig.Equal(that1.ScriptConfig) {
		return false
	}
	if this.CustomScriptUrl != that1.CustomScriptUrl {
		return false
	}
	return true
}
func (this *DynamicReverseProxyType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DynamicReverseProxyType)
	if !ok {
		that2, ok := that.(DynamicReverseProxyType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ResolveEndpointDynamically != that1.ResolveEndpointDynamically {
		return false
	}
	if this.ResolutionNetworkType != that1.ResolutionNetworkType {
		return false
	}
	if len(this.ResolutionNetwork) != len(that1.ResolutionNetwork) {
		return false
	}
	for i := range this.ResolutionNetwork {
		if !this.ResolutionNetwork[i].Equal(that1.ResolutionNetwork[i]) {
			return false
		}
	}
	if this.ConnectionTimeout != that1.ConnectionTimeout {
		return false
	}
	return true
}
func (this *CompressionType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CompressionType)
	if !ok {
		that2, ok := that.(CompressionType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ContentLength != that1.ContentLength {
		return false
	}
	if len(this.ContentType) != len(that1.ContentType) {
		return false
	}
	for i := range this.ContentType {
		if this.ContentType[i] != that1.ContentType[i] {
			return false
		}
	}
	if this.DisableOnEtagHeader != that1.DisableOnEtagHeader {
		return false
	}
	if this.RemoveAcceptEncodingHeader != that1.RemoveAcceptEncodingHeader {
		return false
	}
	return true
}
func (this *JavascriptChallengeType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*JavascriptChallengeType)
	if !ok {
		that2, ok := that.(JavascriptChallengeType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.JsScriptDelay != that1.JsScriptDelay {
		return false
	}
	if this.CookieExpiry != that1.CookieExpiry {
		return false
	}
	if this.CustomPage != that1.CustomPage {
		return false
	}
	return true
}
func (this *CaptchaChallengeType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CaptchaChallengeType)
	if !ok {
		that2, ok := that.(CaptchaChallengeType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CookieExpiry != that1.CookieExpiry {
		return false
	}
	if this.CustomPage != that1.CustomPage {
		return false
	}
	return true
}
func (this *TemporaryUserBlockingType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TemporaryUserBlockingType)
	if !ok {
		that2, ok := that.(TemporaryUserBlockingType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CustomPage != that1.CustomPage {
		return false
	}
	return true
}
func (this *DNSRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DNSRecord)
	if !ok {
		that2, ok := that.(DNSRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *AutoCertInfoType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AutoCertInfoType)
	if !ok {
		that2, ok := that.(AutoCertInfoType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AutoCertState != that1.AutoCertState {
		return false
	}
	if !this.AutoCertExpiry.Equal(that1.AutoCertExpiry) {
		return false
	}
	if this.AutoCertSubject != that1.AutoCertSubject {
		return false
	}
	if this.AutoCertIssuer != that1.AutoCertIssuer {
		return false
	}
	if len(this.DnsRecords) != len(that1.DnsRecords) {
		return false
	}
	for i := range this.DnsRecords {
		if !this.DnsRecords[i].Equal(that1.DnsRecords[i]) {
			return false
		}
	}
	if !this.StateStartTime.Equal(that1.StateStartTime) {
		return false
	}
	return true
}
func (this *AuthenticationDetails) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AuthenticationDetails)
	if !ok {
		that2, ok := that.(AuthenticationDetails)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.AuthConfig) != len(that1.AuthConfig) {
		return false
	}
	for i := range this.AuthConfig {
		if !this.AuthConfig[i].Equal(that1.AuthConfig[i]) {
			return false
		}
	}
	if that1.CookieParamsChoice == nil {
		if this.CookieParamsChoice != nil {
			return false
		}
	} else if this.CookieParamsChoice == nil {
		return false
	} else if !this.CookieParamsChoice.Equal(that1.CookieParamsChoice) {
		return false
	}
	if that1.RedirectUrlChoice == nil {
		if this.RedirectUrlChoice != nil {
			return false
		}
	} else if this.RedirectUrlChoice == nil {
		return false
	} else if !this.RedirectUrlChoice.Equal(that1.RedirectUrlChoice) {
		return false
	}
	return true
}
func (this *AuthenticationDetails_UseAuthObjectConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AuthenticationDetails_UseAuthObjectConfig)
	if !ok {
		that2, ok := that.(AuthenticationDetails_UseAuthObjectConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UseAuthObjectConfig.Equal(that1.UseAuthObjectConfig) {
		return false
	}
	return true
}
func (this *AuthenticationDetails_CookieParams) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AuthenticationDetails_CookieParams)
	if !ok {
		that2, ok := that.(AuthenticationDetails_CookieParams)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CookieParams.Equal(that1.CookieParams) {
		return false
	}
	return true
}
func (this *AuthenticationDetails_RedirectUrl) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AuthenticationDetails_RedirectUrl)
	if !ok {
		that2, ok := that.(AuthenticationDetails_RedirectUrl)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RedirectUrl != that1.RedirectUrl {
		return false
	}
	return true
}
func (this *AuthenticationDetails_RedirectDynamic) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AuthenticationDetails_RedirectDynamic)
	if !ok {
		that2, ok := that.(AuthenticationDetails_RedirectDynamic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RedirectDynamic.Equal(that1.RedirectDynamic) {
		return false
	}
	return true
}
func (this *PolicyBasedChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PolicyBasedChallenge)
	if !ok {
		that2, ok := that.(PolicyBasedChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JsChallenge.Equal(that1.JsChallenge) {
		return false
	}
	if !this.CaptchaChallenge.Equal(that1.CaptchaChallenge) {
		return false
	}
	if !this.TemporaryUserBlocking.Equal(that1.TemporaryUserBlocking) {
		return false
	}
	if that1.ChallengeChoice == nil {
		if this.ChallengeChoice != nil {
			return false
		}
	} else if this.ChallengeChoice == nil {
		return false
	} else if !this.ChallengeChoice.Equal(that1.ChallengeChoice) {
		return false
	}
	if len(this.MaliciousUserMitigation) != len(that1.MaliciousUserMitigation) {
		return false
	}
	for i := range this.MaliciousUserMitigation {
		if !this.MaliciousUserMitigation[i].Equal(that1.MaliciousUserMitigation[i]) {
			return false
		}
	}
	return true
}
func (this *PolicyBasedChallenge_NoChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PolicyBasedChallenge_NoChallenge)
	if !ok {
		that2, ok := that.(PolicyBasedChallenge_NoChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoChallenge.Equal(that1.NoChallenge) {
		return false
	}
	return true
}
func (this *PolicyBasedChallenge_AlwaysEnableJsChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PolicyBasedChallenge_AlwaysEnableJsChallenge)
	if !ok {
		that2, ok := that.(PolicyBasedChallenge_AlwaysEnableJsChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AlwaysEnableJsChallenge.Equal(that1.AlwaysEnableJsChallenge) {
		return false
	}
	return true
}
func (this *PolicyBasedChallenge_AlwaysEnableCaptchaChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PolicyBasedChallenge_AlwaysEnableCaptchaChallenge)
	if !ok {
		that2, ok := that.(PolicyBasedChallenge_AlwaysEnableCaptchaChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AlwaysEnableCaptchaChallenge.Equal(that1.AlwaysEnableCaptchaChallenge) {
		return false
	}
	return true
}
func (this *ShapeBotDefenseConfigType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ShapeBotDefenseConfigType)
	if !ok {
		that2, ok := that.(ShapeBotDefenseConfigType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ApplicationId != that1.ApplicationId {
		return false
	}
	if !this.ApiAuthKey.Equal(that1.ApiAuthKey) {
		return false
	}
	if len(this.Instance) != len(that1.Instance) {
		return false
	}
	for i := range this.Instance {
		if !this.Instance[i].Equal(that1.Instance[i]) {
			return false
		}
	}
	if this.Timeout != that1.Timeout {
		return false
	}
	if len(this.BlockingPages) != len(that1.BlockingPages) {
		return false
	}
	for i := range this.BlockingPages {
		if this.BlockingPages[i] != that1.BlockingPages[i] {
			return false
		}
	}
	if this.ReloadHeaderName != that1.ReloadHeaderName {
		return false
	}
	if this.JsPath != that1.JsPath {
		return false
	}
	if this.Mode != that1.Mode {
		return false
	}
	return true
}
func (this *ServiceDomain) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceDomain)
	if !ok {
		that2, ok := that.(ServiceDomain)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	if this.ServiceDomain != that1.ServiceDomain {
		return false
	}
	if this.InternalServiceDomain != that1.InternalServiceDomain {
		return false
	}
	return true
}
func (this *CdnServiceType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CdnServiceType)
	if !ok {
		that2, ok := that.(CdnServiceType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ContentChoice == nil {
		if this.ContentChoice != nil {
			return false
		}
	} else if this.ContentChoice == nil {
		return false
	} else if !this.ContentChoice.Equal(that1.ContentChoice) {
		return false
	}
	if this.CacheTtl != that1.CacheTtl {
		return false
	}
	if len(this.ServiceDomains) != len(that1.ServiceDomains) {
		return false
	}
	for i := range this.ServiceDomains {
		if !this.ServiceDomains[i].Equal(that1.ServiceDomains[i]) {
			return false
		}
	}
	return true
}
func (this *CdnServiceType_DownloadDelivery) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CdnServiceType_DownloadDelivery)
	if !ok {
		that2, ok := that.(CdnServiceType_DownloadDelivery)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DownloadDelivery.Equal(that1.DownloadDelivery) {
		return false
	}
	return true
}
func (this *CdnServiceType_LiveStreaming) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CdnServiceType_LiveStreaming)
	if !ok {
		that2, ok := that.(CdnServiceType_LiveStreaming)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LiveStreaming.Equal(that1.LiveStreaming) {
		return false
	}
	return true
}
func (this *ClientIPHeaders) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClientIPHeaders)
	if !ok {
		that2, ok := that.(ClientIPHeaders)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ClientIpHeaders) != len(that1.ClientIpHeaders) {
		return false
	}
	for i := range this.ClientIpHeaders {
		if this.ClientIpHeaders[i] != that1.ClientIpHeaders[i] {
			return false
		}
	}
	return true
}
func (this *DNSProxyConfiguration) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DNSProxyConfiguration)
	if !ok {
		that2, ok := that.(DNSProxyConfiguration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DdosProfile.Equal(that1.DdosProfile) {
		return false
	}
	if !this.CacheProfile.Equal(that1.CacheProfile) {
		return false
	}
	if !this.ProtocolInspection.Equal(that1.ProtocolInspection) {
		return false
	}
	if len(this.Irules) != len(that1.Irules) {
		return false
	}
	for i := range this.Irules {
		if !this.Irules[i].Equal(that1.Irules[i]) {
			return false
		}
	}
	return true
}
func (this *DNSDDoSProfile) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DNSDDoSProfile)
	if !ok {
		that2, ok := that.(DNSDDoSProfile)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.DdosMitigationChoice == nil {
		if this.DdosMitigationChoice != nil {
			return false
		}
	} else if this.DdosMitigationChoice == nil {
		return false
	} else if !this.DdosMitigationChoice.Equal(that1.DdosMitigationChoice) {
		return false
	}
	return true
}
func (this *DNSDDoSProfile_EnableDdosMitigation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DNSDDoSProfile_EnableDdosMitigation)
	if !ok {
		that2, ok := that.(DNSDDoSProfile_EnableDdosMitigation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableDdosMitigation.Equal(that1.EnableDdosMitigation) {
		return false
	}
	return true
}
func (this *DNSDDoSProfile_DisableDdosMitigation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DNSDDoSProfile_DisableDdosMitigation)
	if !ok {
		that2, ok := that.(DNSDDoSProfile_DisableDdosMitigation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableDdosMitigation.Equal(that1.DisableDdosMitigation) {
		return false
	}
	return true
}
func (this *DNSCacheProfile) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DNSCacheProfile)
	if !ok {
		that2, ok := that.(DNSCacheProfile)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.CacheProfileChoice == nil {
		if this.CacheProfileChoice != nil {
			return false
		}
	} else if this.CacheProfileChoice == nil {
		return false
	} else if !this.CacheProfileChoice.Equal(that1.CacheProfileChoice) {
		return false
	}
	return true
}
func (this *DNSCacheProfile_CacheSize) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DNSCacheProfile_CacheSize)
	if !ok {
		that2, ok := that.(DNSCacheProfile_CacheSize)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CacheSize != that1.CacheSize {
		return false
	}
	return true
}
func (this *DNSCacheProfile_DisableCacheProfile) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DNSCacheProfile_DisableCacheProfile)
	if !ok {
		that2, ok := that.(DNSCacheProfile_DisableCacheProfile)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableCacheProfile.Equal(that1.DisableCacheProfile) {
		return false
	}
	return true
}
func (this *SlowDDoSMitigation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SlowDDoSMitigation)
	if !ok {
		that2, ok := that.(SlowDDoSMitigation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RequestHeadersTimeout != that1.RequestHeadersTimeout {
		return false
	}
	if that1.RequestTimeoutChoice == nil {
		if this.RequestTimeoutChoice != nil {
			return false
		}
	} else if this.RequestTimeoutChoice == nil {
		return false
	} else if !this.RequestTimeoutChoice.Equal(that1.RequestTimeoutChoice) {
		return false
	}
	return true
}
func (this *SlowDDoSMitigation_RequestTimeout) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SlowDDoSMitigation_RequestTimeout)
	if !ok {
		that2, ok := that.(SlowDDoSMitigation_RequestTimeout)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RequestTimeout != that1.RequestTimeout {
		return false
	}
	return true
}
func (this *SlowDDoSMitigation_DisableRequestTimeout) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SlowDDoSMitigation_DisableRequestTimeout)
	if !ok {
		that2, ok := that.(SlowDDoSMitigation_DisableRequestTimeout)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableRequestTimeout.Equal(that1.DisableRequestTimeout) {
		return false
	}
	return true
}
func (this *DomainCertificates) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DomainCertificates)
	if !ok {
		that2, ok := that.(DomainCertificates)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.RsaCertificates) != len(that1.RsaCertificates) {
		return false
	}
	for i := range this.RsaCertificates {
		if !this.RsaCertificates[i].Equal(that1.RsaCertificates[i]) {
			return false
		}
	}
	if len(this.EcdsaCertificates) != len(that1.EcdsaCertificates) {
		return false
	}
	for i := range this.EcdsaCertificates {
		if !this.EcdsaCertificates[i].Equal(that1.EcdsaCertificates[i]) {
			return false
		}
	}
	return true
}
func (this *ApiSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApiSpec)
	if !ok {
		that2, ok := that.(ApiSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiDefinition.Equal(that1.ApiDefinition) {
		return false
	}
	if that1.OpenApiValidationChoice == nil {
		if this.OpenApiValidationChoice != nil {
			return false
		}
	} else if this.OpenApiValidationChoice == nil {
		return false
	} else if !this.OpenApiValidationChoice.Equal(that1.OpenApiValidationChoice) {
		return false
	}
	return true
}
func (this *ApiSpec_DisableOpenApiValidation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApiSpec_DisableOpenApiValidation)
	if !ok {
		that2, ok := that.(ApiSpec_DisableOpenApiValidation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableOpenApiValidation.Equal(that1.DisableOpenApiValidation) {
		return false
	}
	return true
}
func (this *ApiSpec_EnableOpenApiValidation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApiSpec_EnableOpenApiValidation)
	if !ok {
		that2, ok := that.(ApiSpec_EnableOpenApiValidation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableOpenApiValidation.Equal(that1.EnableOpenApiValidation) {
		return false
	}
	return true
}
func (this *OpenApiValidationSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OpenApiValidationSettings)
	if !ok {
		that2, ok := that.(OpenApiValidationSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FailOversizedBodyValidation != that1.FailOversizedBodyValidation {
		return false
	}
	if this.AllowOnlySpecifiedQueryParams != that1.AllowOnlySpecifiedQueryParams {
		return false
	}
	if this.AllowOnlySpecifiedHeaders != that1.AllowOnlySpecifiedHeaders {
		return false
	}
	return true
}
func (this *HttpProtocolOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HttpProtocolOptions)
	if !ok {
		that2, ok := that.(HttpProtocolOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.HttpProtocolChoice == nil {
		if this.HttpProtocolChoice != nil {
			return false
		}
	} else if this.HttpProtocolChoice == nil {
		return false
	} else if !this.HttpProtocolChoice.Equal(that1.HttpProtocolChoice) {
		return false
	}
	return true
}
func (this *HttpProtocolOptions_HttpProtocolEnableV1Only) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HttpProtocolOptions_HttpProtocolEnableV1Only)
	if !ok {
		that2, ok := that.(HttpProtocolOptions_HttpProtocolEnableV1Only)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpProtocolEnableV1Only.Equal(that1.HttpProtocolEnableV1Only) {
		return false
	}
	return true
}
func (this *HttpProtocolOptions_HttpProtocolEnableV2Only) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HttpProtocolOptions_HttpProtocolEnableV2Only)
	if !ok {
		that2, ok := that.(HttpProtocolOptions_HttpProtocolEnableV2Only)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpProtocolEnableV2Only.Equal(that1.HttpProtocolEnableV2Only) {
		return false
	}
	return true
}
func (this *HttpProtocolOptions_HttpProtocolEnableV1V2) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HttpProtocolOptions_HttpProtocolEnableV1V2)
	if !ok {
		that2, ok := that.(HttpProtocolOptions_HttpProtocolEnableV1V2)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpProtocolEnableV1V2.Equal(that1.HttpProtocolEnableV1V2) {
		return false
	}
	return true
}
func (this *HttpRedirectOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HttpRedirectOptions)
	if !ok {
		that2, ok := that.(HttpRedirectOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Domains) != len(that1.Domains) {
		return false
	}
	for i := range this.Domains {
		if this.Domains[i] != that1.Domains[i] {
			return false
		}
	}
	if len(this.Routes) != len(that1.Routes) {
		return false
	}
	for i := range this.Routes {
		if !this.Routes[i].Equal(that1.Routes[i]) {
			return false
		}
	}
	if !this.JavascriptInfo.Equal(that1.JavascriptInfo) {
		return false
	}
	if len(this.AdvertisePolicies) != len(that1.AdvertisePolicies) {
		return false
	}
	for i := range this.AdvertisePolicies {
		if !this.AdvertisePolicies[i].Equal(that1.AdvertisePolicies[i]) {
			return false
		}
	}
	if len(this.RequestHeadersToAdd) != len(that1.RequestHeadersToAdd) {
		return false
	}
	for i := range this.RequestHeadersToAdd {
		if !this.RequestHeadersToAdd[i].Equal(that1.RequestHeadersToAdd[i]) {
			return false
		}
	}
	if len(this.ResponseHeadersToAdd) != len(that1.ResponseHeadersToAdd) {
		return false
	}
	for i := range this.ResponseHeadersToAdd {
		if !this.ResponseHeadersToAdd[i].Equal(that1.ResponseHeadersToAdd[i]) {
			return false
		}
	}
	if len(this.RequestHeadersToRemove) != len(that1.RequestHeadersToRemove) {
		return false
	}
	for i := range this.RequestHeadersToRemove {
		if this.RequestHeadersToRemove[i] != that1.RequestHeadersToRemove[i] {
			return false
		}
	}
	if len(this.ResponseHeadersToRemove) != len(that1.ResponseHeadersToRemove) {
		return false
	}
	for i := range this.ResponseHeadersToRemove {
		if this.ResponseHeadersToRemove[i] != that1.ResponseHeadersToRemove[i] {
			return false
		}
	}
	if that1.TlsCertificatesChoice == nil {
		if this.TlsCertificatesChoice != nil {
			return false
		}
	} else if this.TlsCertificatesChoice == nil {
		return false
	} else if !this.TlsCertificatesChoice.Equal(that1.TlsCertificatesChoice) {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if !this.BufferPolicy.Equal(that1.BufferPolicy) {
		return false
	}
	if !this.CorsPolicy.Equal(that1.CorsPolicy) {
		return false
	}
	if this.Proxy != that1.Proxy {
		return false
	}
	if len(this.Jwt) != len(that1.Jwt) {
		return false
	}
	for i := range this.Jwt {
		if !this.Jwt[i].Equal(that1.Jwt[i]) {
			return false
		}
	}
	if !this.WafType.Equal(that1.WafType) {
		return false
	}
	if !this.DynamicReverseProxy.Equal(that1.DynamicReverseProxy) {
		return false
	}
	if this.AddLocation != that1.AddLocation {
		return false
	}
	if !this.CompressionParams.Equal(that1.CompressionParams) {
		return false
	}
	if len(this.CustomErrors) != len(that1.CustomErrors) {
		return false
	}
	for i := range this.CustomErrors {
		if this.CustomErrors[i] != that1.CustomErrors[i] {
			return false
		}
	}
	if this.DisableDefaultErrorPages != that1.DisableDefaultErrorPages {
		return false
	}
	if this.MaxRequestHeaderSize != that1.MaxRequestHeaderSize {
		return false
	}
	if that1.ChallengeType == nil {
		if this.ChallengeType != nil {
			return false
		}
	} else if this.ChallengeType == nil {
		return false
	} else if !this.ChallengeType.Equal(that1.ChallengeType) {
		return false
	}
	if len(this.UserIdentification) != len(that1.UserIdentification) {
		return false
	}
	for i := range this.UserIdentification {
		if !this.UserIdentification[i].Equal(that1.UserIdentification[i]) {
			return false
		}
	}
	if len(this.RateLimiter) != len(that1.RateLimiter) {
		return false
	}
	for i := range this.RateLimiter {
		if !this.RateLimiter[i].Equal(that1.RateLimiter[i]) {
			return false
		}
	}
	if len(this.RateLimiterAllowedPrefixes) != len(that1.RateLimiterAllowedPrefixes) {
		return false
	}
	for i := range this.RateLimiterAllowedPrefixes {
		if !this.RateLimiterAllowedPrefixes[i].Equal(that1.RateLimiterAllowedPrefixes[i]) {
			return false
		}
	}
	if !this.RetryPolicy.Equal(that1.RetryPolicy) {
		return false
	}
	if !this.TemporaryUserBlocking.Equal(that1.TemporaryUserBlocking) {
		return false
	}
	if len(this.MaliciousUserMitigation) != len(that1.MaliciousUserMitigation) {
		return false
	}
	for i := range this.MaliciousUserMitigation {
		if !this.MaliciousUserMitigation[i].Equal(that1.MaliciousUserMitigation[i]) {
			return false
		}
	}
	if !this.TlsIntercept.Equal(that1.TlsIntercept) {
		return false
	}
	if that1.AuthenticationChoice == nil {
		if this.AuthenticationChoice != nil {
			return false
		}
	} else if this.AuthenticationChoice == nil {
		return false
	} else if !this.AuthenticationChoice.Equal(that1.AuthenticationChoice) {
		return false
	}
	if this.IdleTimeout != that1.IdleTimeout {
		return false
	}
	if this.DisableDnsResolve != that1.DisableDnsResolve {
		return false
	}
	if that1.ServerHeaderChoice == nil {
		if this.ServerHeaderChoice != nil {
			return false
		}
	} else if this.ServerHeaderChoice == nil {
		return false
	} else if !this.ServerHeaderChoice.Equal(that1.ServerHeaderChoice) {
		return false
	}
	if that1.PathNormalizeChoice == nil {
		if this.PathNormalizeChoice != nil {
			return false
		}
	} else if this.PathNormalizeChoice == nil {
		return false
	} else if !this.PathNormalizeChoice.Equal(that1.PathNormalizeChoice) {
		return false
	}
	if that1.StrictSniHostHeaderCheckChoice == nil {
		if this.StrictSniHostHeaderCheckChoice != nil {
			return false
		}
	} else if this.StrictSniHostHeaderCheckChoice == nil {
		return false
	} else if !this.StrictSniHostHeaderCheckChoice.Equal(that1.StrictSniHostHeaderCheckChoice) {
		return false
	}
	if !this.CdnService.Equal(that1.CdnService) {
		return false
	}
	if that1.TrustClientIpHeadersChoice == nil {
		if this.TrustClientIpHeadersChoice != nil {
			return false
		}
	} else if this.TrustClientIpHeadersChoice == nil {
		return false
	} else if !this.TrustClientIpHeadersChoice.Equal(that1.TrustClientIpHeadersChoice) {
		return false
	}
	if that1.DefaultLbChoice == nil {
		if this.DefaultLbChoice != nil {
			return false
		}
	} else if this.DefaultLbChoice == nil {
		return false
	} else if !this.DefaultLbChoice.Equal(that1.DefaultLbChoice) {
		return false
	}
	if !this.HeaderTransformationType.Equal(that1.HeaderTransformationType) {
		return false
	}
	if len(this.CookiesToModify) != len(that1.CookiesToModify) {
		return false
	}
	for i := range this.CookiesToModify {
		if !this.CookiesToModify[i].Equal(that1.CookiesToModify[i]) {
			return false
		}
	}
	if this.ConnectionIdleTimeout != that1.ConnectionIdleTimeout {
		return false
	}
	if !this.HttpProtocolOptions.Equal(that1.HttpProtocolOptions) {
		return false
	}
	if that1.DdosAutoMitigationAction == nil {
		if this.DdosAutoMitigationAction != nil {
			return false
		}
	} else if this.DdosAutoMitigationAction == nil {
		return false
	} else if !this.DdosAutoMitigationAction.Equal(that1.DdosAutoMitigationAction) {
		return false
	}
	if this.DnsVolterraManaged != that1.DnsVolterraManaged {
		return false
	}
	if len(this.DnsDomains) != len(that1.DnsDomains) {
		return false
	}
	for i := range this.DnsDomains {
		if !this.DnsDomains[i].Equal(that1.DnsDomains[i]) {
			return false
		}
	}
	if this.AutoCert != that1.AutoCert {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.HostName != that1.HostName {
		return false
	}
	if len(this.DnsInfo) != len(that1.DnsInfo) {
		return false
	}
	for i := range this.DnsInfo {
		if !this.DnsInfo[i].Equal(that1.DnsInfo[i]) {
			return false
		}
	}
	if this.AutoCertState != that1.AutoCertState {
		return false
	}
	if !this.AutoCertInfo.Equal(that1.AutoCertInfo) {
		return false
	}
	if this.AutoCertErrorMsg != that1.AutoCertErrorMsg {
		return false
	}
	if len(this.UserDomains) != len(that1.UserDomains) {
		return false
	}
	for i := range this.UserDomains {
		if this.UserDomains[i] != that1.UserDomains[i] {
			return false
		}
	}
	if len(this.ServicePolicySets) != len(that1.ServicePolicySets) {
		return false
	}
	for i := range this.ServicePolicySets {
		if !this.ServicePolicySets[i].Equal(that1.ServicePolicySets[i]) {
			return false
		}
	}
	if this.LoadbalancerAlgorithm != that1.LoadbalancerAlgorithm {
		return false
	}
	if this.VolterraCert != that1.VolterraCert {
		return false
	}
	if that1.BotDefenseChoice == nil {
		if this.BotDefenseChoice != nil {
			return false
		}
	} else if this.BotDefenseChoice == nil {
		return false
	} else if !this.BotDefenseChoice.Equal(that1.BotDefenseChoice) {
		return false
	}
	if this.CheckIpReputation != that1.CheckIpReputation {
		return false
	}
	if len(this.FastAcl) != len(that1.FastAcl) {
		return false
	}
	for i := range this.FastAcl {
		if !this.FastAcl[i].Equal(that1.FastAcl[i]) {
			return false
		}
	}
	if len(this.L7Acl) != len(that1.L7Acl) {
		return false
	}
	for i := range this.L7Acl {
		if !this.L7Acl[i].Equal(that1.L7Acl[i]) {
			return false
		}
	}
	if len(this.DnsZones) != len(that1.DnsZones) {
		return false
	}
	for i := range this.DnsZones {
		if !this.DnsZones[i].Equal(that1.DnsZones[i]) {
			return false
		}
	}
	if !this.CsrfPolicy.Equal(that1.CsrfPolicy) {
		return false
	}
	if !this.DnsProxyConfiguration.Equal(that1.DnsProxyConfiguration) {
		return false
	}
	if that1.DnsZoneStateChoice == nil {
		if this.DnsZoneStateChoice != nil {
			return false
		}
	} else if this.DnsZoneStateChoice == nil {
		return false
	} else if !this.DnsZoneStateChoice.Equal(that1.DnsZoneStateChoice) {
		return false
	}
	if !this.CustomCertExpiry.Equal(that1.CustomCertExpiry) {
		return false
	}
	if !this.SlowDdosMitigation.Equal(that1.SlowDdosMitigation) {
		return false
	}
	if !this.ApiSpec.Equal(that1.ApiSpec) {
		return false
	}
	if len(this.DomainCertMap) != len(that1.DomainCertMap) {
		return false
	}
	for i := range this.DomainCertMap {
		if !this.DomainCertMap[i].Equal(that1.DomainCertMap[i]) {
			return false
		}
	}
	if !this.HttpRedirectOptions.Equal(that1.HttpRedirectOptions) {
		return false
	}
	return true
}
func (this *GlobalSpecType_TlsParameters) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_TlsParameters)
	if !ok {
		that2, ok := that.(GlobalSpecType_TlsParameters)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TlsParameters.Equal(that1.TlsParameters) {
		return false
	}
	return true
}
func (this *GlobalSpecType_TlsCertParams) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_TlsCertParams)
	if !ok {
		that2, ok := that.(GlobalSpecType_TlsCertParams)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TlsCertParams.Equal(that1.TlsCertParams) {
		return false
	}
	return true
}
func (this *GlobalSpecType_NoChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_NoChallenge)
	if !ok {
		that2, ok := that.(GlobalSpecType_NoChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoChallenge.Equal(that1.NoChallenge) {
		return false
	}
	return true
}
func (this *GlobalSpecType_JsChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_JsChallenge)
	if !ok {
		that2, ok := that.(GlobalSpecType_JsChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JsChallenge.Equal(that1.JsChallenge) {
		return false
	}
	return true
}
func (this *GlobalSpecType_CaptchaChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_CaptchaChallenge)
	if !ok {
		that2, ok := that.(GlobalSpecType_CaptchaChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CaptchaChallenge.Equal(that1.CaptchaChallenge) {
		return false
	}
	return true
}
func (this *GlobalSpecType_PolicyBasedChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_PolicyBasedChallenge)
	if !ok {
		that2, ok := that.(GlobalSpecType_PolicyBasedChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PolicyBasedChallenge.Equal(that1.PolicyBasedChallenge) {
		return false
	}
	return true
}
func (this *GlobalSpecType_NoAuthentication) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_NoAuthentication)
	if !ok {
		that2, ok := that.(GlobalSpecType_NoAuthentication)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoAuthentication.Equal(that1.NoAuthentication) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Authentication) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Authentication)
	if !ok {
		that2, ok := that.(GlobalSpecType_Authentication)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Authentication.Equal(that1.Authentication) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DefaultHeader) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DefaultHeader)
	if !ok {
		that2, ok := that.(GlobalSpecType_DefaultHeader)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultHeader.Equal(that1.DefaultHeader) {
		return false
	}
	return true
}
func (this *GlobalSpecType_ServerName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_ServerName)
	if !ok {
		that2, ok := that.(GlobalSpecType_ServerName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ServerName != that1.ServerName {
		return false
	}
	return true
}
func (this *GlobalSpecType_AppendServerName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_AppendServerName)
	if !ok {
		that2, ok := that.(GlobalSpecType_AppendServerName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AppendServerName != that1.AppendServerName {
		return false
	}
	return true
}
func (this *GlobalSpecType_PassThrough) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_PassThrough)
	if !ok {
		that2, ok := that.(GlobalSpecType_PassThrough)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PassThrough.Equal(that1.PassThrough) {
		return false
	}
	return true
}
func (this *GlobalSpecType_EnablePathNormalize) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_EnablePathNormalize)
	if !ok {
		that2, ok := that.(GlobalSpecType_EnablePathNormalize)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnablePathNormalize.Equal(that1.EnablePathNormalize) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DisablePathNormalize) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DisablePathNormalize)
	if !ok {
		that2, ok := that.(GlobalSpecType_DisablePathNormalize)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisablePathNormalize.Equal(that1.DisablePathNormalize) {
		return false
	}
	return true
}
func (this *GlobalSpecType_EnableStrictSniHostHeaderCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_EnableStrictSniHostHeaderCheck)
	if !ok {
		that2, ok := that.(GlobalSpecType_EnableStrictSniHostHeaderCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableStrictSniHostHeaderCheck.Equal(that1.EnableStrictSniHostHeaderCheck) {
		return false
	}
	return true
}
func (this *GlobalSpecType_AdditionalDomains) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_AdditionalDomains)
	if !ok {
		that2, ok := that.(GlobalSpecType_AdditionalDomains)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdditionalDomains.Equal(that1.AdditionalDomains) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DisableTrustClientIpHeaders) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DisableTrustClientIpHeaders)
	if !ok {
		that2, ok := that.(GlobalSpecType_DisableTrustClientIpHeaders)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableTrustClientIpHeaders.Equal(that1.DisableTrustClientIpHeaders) {
		return false
	}
	return true
}
func (this *GlobalSpecType_EnableTrustClientIpHeaders) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_EnableTrustClientIpHeaders)
	if !ok {
		that2, ok := that.(GlobalSpecType_EnableTrustClientIpHeaders)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableTrustClientIpHeaders.Equal(that1.EnableTrustClientIpHeaders) {
		return false
	}
	return true
}
func (this *GlobalSpecType_NonDefaultLoadbalancer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_NonDefaultLoadbalancer)
	if !ok {
		that2, ok := that.(GlobalSpecType_NonDefaultLoadbalancer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NonDefaultLoadbalancer.Equal(that1.NonDefaultLoadbalancer) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DefaultLoadbalancer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DefaultLoadbalancer)
	if !ok {
		that2, ok := that.(GlobalSpecType_DefaultLoadbalancer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultLoadbalancer.Equal(that1.DefaultLoadbalancer) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Block) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Block)
	if !ok {
		that2, ok := that.(GlobalSpecType_Block)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Block.Equal(that1.Block) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DdosJsChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DdosJsChallenge)
	if !ok {
		that2, ok := that.(GlobalSpecType_DdosJsChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DdosJsChallenge.Equal(that1.DdosJsChallenge) {
		return false
	}
	return true
}
func (this *GlobalSpecType_L7DdosActionDefault) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_L7DdosActionDefault)
	if !ok {
		that2, ok := that.(GlobalSpecType_L7DdosActionDefault)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.L7DdosActionDefault.Equal(that1.L7DdosActionDefault) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DisableBotDefense) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DisableBotDefense)
	if !ok {
		that2, ok := that.(GlobalSpecType_DisableBotDefense)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableBotDefense.Equal(that1.DisableBotDefense) {
		return false
	}
	return true
}
func (this *GlobalSpecType_BotDefense) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_BotDefense)
	if !ok {
		that2, ok := that.(GlobalSpecType_BotDefense)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BotDefense.Equal(that1.BotDefense) {
		return false
	}
	return true
}
func (this *GlobalSpecType_NotReady) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_NotReady)
	if !ok {
		that2, ok := that.(GlobalSpecType_NotReady)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NotReady.Equal(that1.NotReady) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Ready) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Ready)
	if !ok {
		that2, ok := that.(GlobalSpecType_Ready)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Ready.Equal(that1.Ready) {
		return false
	}
	return true
}
func (this *DNSVHostStatusType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DNSVHostStatusType)
	if !ok {
		that2, ok := that.(DNSVHostStatusType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.ExistingCertificateState != that1.ExistingCertificateState {
		return false
	}
	if this.RenewCertificateState != that1.RenewCertificateState {
		return false
	}
	if this.ErrorDescription != that1.ErrorDescription {
		return false
	}
	if this.SuggestedAction != that1.SuggestedAction {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Domains) != len(that1.Domains) {
		return false
	}
	for i := range this.Domains {
		if this.Domains[i] != that1.Domains[i] {
			return false
		}
	}
	if len(this.Routes) != len(that1.Routes) {
		return false
	}
	for i := range this.Routes {
		if !this.Routes[i].Equal(that1.Routes[i]) {
			return false
		}
	}
	if len(this.AdvertisePolicies) != len(that1.AdvertisePolicies) {
		return false
	}
	for i := range this.AdvertisePolicies {
		if !this.AdvertisePolicies[i].Equal(that1.AdvertisePolicies[i]) {
			return false
		}
	}
	if len(this.RequestHeadersToAdd) != len(that1.RequestHeadersToAdd) {
		return false
	}
	for i := range this.RequestHeadersToAdd {
		if !this.RequestHeadersToAdd[i].Equal(that1.RequestHeadersToAdd[i]) {
			return false
		}
	}
	if len(this.ResponseHeadersToAdd) != len(that1.ResponseHeadersToAdd) {
		return false
	}
	for i := range this.ResponseHeadersToAdd {
		if !this.ResponseHeadersToAdd[i].Equal(that1.ResponseHeadersToAdd[i]) {
			return false
		}
	}
	if len(this.RequestHeadersToRemove) != len(that1.RequestHeadersToRemove) {
		return false
	}
	for i := range this.RequestHeadersToRemove {
		if this.RequestHeadersToRemove[i] != that1.RequestHeadersToRemove[i] {
			return false
		}
	}
	if len(this.ResponseHeadersToRemove) != len(that1.ResponseHeadersToRemove) {
		return false
	}
	for i := range this.ResponseHeadersToRemove {
		if this.ResponseHeadersToRemove[i] != that1.ResponseHeadersToRemove[i] {
			return false
		}
	}
	if that1.TlsCertificatesChoice == nil {
		if this.TlsCertificatesChoice != nil {
			return false
		}
	} else if this.TlsCertificatesChoice == nil {
		return false
	} else if !this.TlsCertificatesChoice.Equal(that1.TlsCertificatesChoice) {
		return false
	}
	if !this.BufferPolicy.Equal(that1.BufferPolicy) {
		return false
	}
	if !this.CorsPolicy.Equal(that1.CorsPolicy) {
		return false
	}
	if this.Proxy != that1.Proxy {
		return false
	}
	if !this.WafType.Equal(that1.WafType) {
		return false
	}
	if !this.DynamicReverseProxy.Equal(that1.DynamicReverseProxy) {
		return false
	}
	if this.AddLocation != that1.AddLocation {
		return false
	}
	if !this.CompressionParams.Equal(that1.CompressionParams) {
		return false
	}
	if len(this.CustomErrors) != len(that1.CustomErrors) {
		return false
	}
	for i := range this.CustomErrors {
		if this.CustomErrors[i] != that1.CustomErrors[i] {
			return false
		}
	}
	if this.DisableDefaultErrorPages != that1.DisableDefaultErrorPages {
		return false
	}
	if this.MaxRequestHeaderSize != that1.MaxRequestHeaderSize {
		return false
	}
	if that1.ChallengeType == nil {
		if this.ChallengeType != nil {
			return false
		}
	} else if this.ChallengeType == nil {
		return false
	} else if !this.ChallengeType.Equal(that1.ChallengeType) {
		return false
	}
	if len(this.UserIdentification) != len(that1.UserIdentification) {
		return false
	}
	for i := range this.UserIdentification {
		if !this.UserIdentification[i].Equal(that1.UserIdentification[i]) {
			return false
		}
	}
	if len(this.RateLimiter) != len(that1.RateLimiter) {
		return false
	}
	for i := range this.RateLimiter {
		if !this.RateLimiter[i].Equal(that1.RateLimiter[i]) {
			return false
		}
	}
	if len(this.RateLimiterAllowedPrefixes) != len(that1.RateLimiterAllowedPrefixes) {
		return false
	}
	for i := range this.RateLimiterAllowedPrefixes {
		if !this.RateLimiterAllowedPrefixes[i].Equal(that1.RateLimiterAllowedPrefixes[i]) {
			return false
		}
	}
	if !this.RetryPolicy.Equal(that1.RetryPolicy) {
		return false
	}
	if this.IdleTimeout != that1.IdleTimeout {
		return false
	}
	if this.DisableDnsResolve != that1.DisableDnsResolve {
		return false
	}
	if !this.TemporaryUserBlocking.Equal(that1.TemporaryUserBlocking) {
		return false
	}
	if that1.AuthenticationChoice == nil {
		if this.AuthenticationChoice != nil {
			return false
		}
	} else if this.AuthenticationChoice == nil {
		return false
	} else if !this.AuthenticationChoice.Equal(that1.AuthenticationChoice) {
		return false
	}
	if that1.ServerHeaderChoice == nil {
		if this.ServerHeaderChoice != nil {
			return false
		}
	} else if this.ServerHeaderChoice == nil {
		return false
	} else if !this.ServerHeaderChoice.Equal(that1.ServerHeaderChoice) {
		return false
	}
	if that1.PathNormalizeChoice == nil {
		if this.PathNormalizeChoice != nil {
			return false
		}
	} else if this.PathNormalizeChoice == nil {
		return false
	} else if !this.PathNormalizeChoice.Equal(that1.PathNormalizeChoice) {
		return false
	}
	if that1.StrictSniHostHeaderCheckChoice == nil {
		if this.StrictSniHostHeaderCheckChoice != nil {
			return false
		}
	} else if this.StrictSniHostHeaderCheckChoice == nil {
		return false
	} else if !this.StrictSniHostHeaderCheckChoice.Equal(that1.StrictSniHostHeaderCheckChoice) {
		return false
	}
	if that1.DefaultLbChoice == nil {
		if this.DefaultLbChoice != nil {
			return false
		}
	} else if this.DefaultLbChoice == nil {
		return false
	} else if !this.DefaultLbChoice.Equal(that1.DefaultLbChoice) {
		return false
	}
	if !this.HeaderTransformationType.Equal(that1.HeaderTransformationType) {
		return false
	}
	if !this.CsrfPolicy.Equal(that1.CsrfPolicy) {
		return false
	}
	if len(this.CookiesToModify) != len(that1.CookiesToModify) {
		return false
	}
	for i := range this.CookiesToModify {
		if !this.CookiesToModify[i].Equal(that1.CookiesToModify[i]) {
			return false
		}
	}
	if this.ConnectionIdleTimeout != that1.ConnectionIdleTimeout {
		return false
	}
	if !this.DnsProxyConfiguration.Equal(that1.DnsProxyConfiguration) {
		return false
	}
	if !this.SlowDdosMitigation.Equal(that1.SlowDdosMitigation) {
		return false
	}
	if !this.ApiSpec.Equal(that1.ApiSpec) {
		return false
	}
	if len(this.DomainCertMap) != len(that1.DomainCertMap) {
		return false
	}
	for i := range this.DomainCertMap {
		if !this.DomainCertMap[i].Equal(that1.DomainCertMap[i]) {
			return false
		}
	}
	return true
}
func (this *CreateSpecType_TlsParameters) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_TlsParameters)
	if !ok {
		that2, ok := that.(CreateSpecType_TlsParameters)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TlsParameters.Equal(that1.TlsParameters) {
		return false
	}
	return true
}
func (this *CreateSpecType_TlsCertParams) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_TlsCertParams)
	if !ok {
		that2, ok := that.(CreateSpecType_TlsCertParams)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TlsCertParams.Equal(that1.TlsCertParams) {
		return false
	}
	return true
}
func (this *CreateSpecType_NoChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_NoChallenge)
	if !ok {
		that2, ok := that.(CreateSpecType_NoChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoChallenge.Equal(that1.NoChallenge) {
		return false
	}
	return true
}
func (this *CreateSpecType_JsChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_JsChallenge)
	if !ok {
		that2, ok := that.(CreateSpecType_JsChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JsChallenge.Equal(that1.JsChallenge) {
		return false
	}
	return true
}
func (this *CreateSpecType_CaptchaChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_CaptchaChallenge)
	if !ok {
		that2, ok := that.(CreateSpecType_CaptchaChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CaptchaChallenge.Equal(that1.CaptchaChallenge) {
		return false
	}
	return true
}
func (this *CreateSpecType_NoAuthentication) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_NoAuthentication)
	if !ok {
		that2, ok := that.(CreateSpecType_NoAuthentication)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoAuthentication.Equal(that1.NoAuthentication) {
		return false
	}
	return true
}
func (this *CreateSpecType_Authentication) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Authentication)
	if !ok {
		that2, ok := that.(CreateSpecType_Authentication)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Authentication.Equal(that1.Authentication) {
		return false
	}
	return true
}
func (this *CreateSpecType_DefaultHeader) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DefaultHeader)
	if !ok {
		that2, ok := that.(CreateSpecType_DefaultHeader)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultHeader.Equal(that1.DefaultHeader) {
		return false
	}
	return true
}
func (this *CreateSpecType_ServerName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_ServerName)
	if !ok {
		that2, ok := that.(CreateSpecType_ServerName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ServerName != that1.ServerName {
		return false
	}
	return true
}
func (this *CreateSpecType_AppendServerName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_AppendServerName)
	if !ok {
		that2, ok := that.(CreateSpecType_AppendServerName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AppendServerName != that1.AppendServerName {
		return false
	}
	return true
}
func (this *CreateSpecType_PassThrough) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_PassThrough)
	if !ok {
		that2, ok := that.(CreateSpecType_PassThrough)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PassThrough.Equal(that1.PassThrough) {
		return false
	}
	return true
}
func (this *CreateSpecType_EnablePathNormalize) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_EnablePathNormalize)
	if !ok {
		that2, ok := that.(CreateSpecType_EnablePathNormalize)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnablePathNormalize.Equal(that1.EnablePathNormalize) {
		return false
	}
	return true
}
func (this *CreateSpecType_DisablePathNormalize) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DisablePathNormalize)
	if !ok {
		that2, ok := that.(CreateSpecType_DisablePathNormalize)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisablePathNormalize.Equal(that1.DisablePathNormalize) {
		return false
	}
	return true
}
func (this *CreateSpecType_EnableStrictSniHostHeaderCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_EnableStrictSniHostHeaderCheck)
	if !ok {
		that2, ok := that.(CreateSpecType_EnableStrictSniHostHeaderCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableStrictSniHostHeaderCheck.Equal(that1.EnableStrictSniHostHeaderCheck) {
		return false
	}
	return true
}
func (this *CreateSpecType_AdditionalDomains) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_AdditionalDomains)
	if !ok {
		that2, ok := that.(CreateSpecType_AdditionalDomains)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdditionalDomains.Equal(that1.AdditionalDomains) {
		return false
	}
	return true
}
func (this *CreateSpecType_NonDefaultLoadbalancer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_NonDefaultLoadbalancer)
	if !ok {
		that2, ok := that.(CreateSpecType_NonDefaultLoadbalancer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NonDefaultLoadbalancer.Equal(that1.NonDefaultLoadbalancer) {
		return false
	}
	return true
}
func (this *CreateSpecType_DefaultLoadbalancer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DefaultLoadbalancer)
	if !ok {
		that2, ok := that.(CreateSpecType_DefaultLoadbalancer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultLoadbalancer.Equal(that1.DefaultLoadbalancer) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Domains) != len(that1.Domains) {
		return false
	}
	for i := range this.Domains {
		if this.Domains[i] != that1.Domains[i] {
			return false
		}
	}
	if len(this.Routes) != len(that1.Routes) {
		return false
	}
	for i := range this.Routes {
		if !this.Routes[i].Equal(that1.Routes[i]) {
			return false
		}
	}
	if len(this.AdvertisePolicies) != len(that1.AdvertisePolicies) {
		return false
	}
	for i := range this.AdvertisePolicies {
		if !this.AdvertisePolicies[i].Equal(that1.AdvertisePolicies[i]) {
			return false
		}
	}
	if len(this.RequestHeadersToAdd) != len(that1.RequestHeadersToAdd) {
		return false
	}
	for i := range this.RequestHeadersToAdd {
		if !this.RequestHeadersToAdd[i].Equal(that1.RequestHeadersToAdd[i]) {
			return false
		}
	}
	if len(this.ResponseHeadersToAdd) != len(that1.ResponseHeadersToAdd) {
		return false
	}
	for i := range this.ResponseHeadersToAdd {
		if !this.ResponseHeadersToAdd[i].Equal(that1.ResponseHeadersToAdd[i]) {
			return false
		}
	}
	if len(this.RequestHeadersToRemove) != len(that1.RequestHeadersToRemove) {
		return false
	}
	for i := range this.RequestHeadersToRemove {
		if this.RequestHeadersToRemove[i] != that1.RequestHeadersToRemove[i] {
			return false
		}
	}
	if len(this.ResponseHeadersToRemove) != len(that1.ResponseHeadersToRemove) {
		return false
	}
	for i := range this.ResponseHeadersToRemove {
		if this.ResponseHeadersToRemove[i] != that1.ResponseHeadersToRemove[i] {
			return false
		}
	}
	if that1.TlsCertificatesChoice == nil {
		if this.TlsCertificatesChoice != nil {
			return false
		}
	} else if this.TlsCertificatesChoice == nil {
		return false
	} else if !this.TlsCertificatesChoice.Equal(that1.TlsCertificatesChoice) {
		return false
	}
	if !this.BufferPolicy.Equal(that1.BufferPolicy) {
		return false
	}
	if !this.CorsPolicy.Equal(that1.CorsPolicy) {
		return false
	}
	if this.Proxy != that1.Proxy {
		return false
	}
	if !this.WafType.Equal(that1.WafType) {
		return false
	}
	if !this.DynamicReverseProxy.Equal(that1.DynamicReverseProxy) {
		return false
	}
	if this.AddLocation != that1.AddLocation {
		return false
	}
	if !this.CompressionParams.Equal(that1.CompressionParams) {
		return false
	}
	if len(this.CustomErrors) != len(that1.CustomErrors) {
		return false
	}
	for i := range this.CustomErrors {
		if this.CustomErrors[i] != that1.CustomErrors[i] {
			return false
		}
	}
	if this.DisableDefaultErrorPages != that1.DisableDefaultErrorPages {
		return false
	}
	if this.MaxRequestHeaderSize != that1.MaxRequestHeaderSize {
		return false
	}
	if that1.ChallengeType == nil {
		if this.ChallengeType != nil {
			return false
		}
	} else if this.ChallengeType == nil {
		return false
	} else if !this.ChallengeType.Equal(that1.ChallengeType) {
		return false
	}
	if len(this.UserIdentification) != len(that1.UserIdentification) {
		return false
	}
	for i := range this.UserIdentification {
		if !this.UserIdentification[i].Equal(that1.UserIdentification[i]) {
			return false
		}
	}
	if len(this.RateLimiter) != len(that1.RateLimiter) {
		return false
	}
	for i := range this.RateLimiter {
		if !this.RateLimiter[i].Equal(that1.RateLimiter[i]) {
			return false
		}
	}
	if len(this.RateLimiterAllowedPrefixes) != len(that1.RateLimiterAllowedPrefixes) {
		return false
	}
	for i := range this.RateLimiterAllowedPrefixes {
		if !this.RateLimiterAllowedPrefixes[i].Equal(that1.RateLimiterAllowedPrefixes[i]) {
			return false
		}
	}
	if !this.RetryPolicy.Equal(that1.RetryPolicy) {
		return false
	}
	if this.IdleTimeout != that1.IdleTimeout {
		return false
	}
	if this.DisableDnsResolve != that1.DisableDnsResolve {
		return false
	}
	if !this.TemporaryUserBlocking.Equal(that1.TemporaryUserBlocking) {
		return false
	}
	if that1.AuthenticationChoice == nil {
		if this.AuthenticationChoice != nil {
			return false
		}
	} else if this.AuthenticationChoice == nil {
		return false
	} else if !this.AuthenticationChoice.Equal(that1.AuthenticationChoice) {
		return false
	}
	if that1.ServerHeaderChoice == nil {
		if this.ServerHeaderChoice != nil {
			return false
		}
	} else if this.ServerHeaderChoice == nil {
		return false
	} else if !this.ServerHeaderChoice.Equal(that1.ServerHeaderChoice) {
		return false
	}
	if that1.PathNormalizeChoice == nil {
		if this.PathNormalizeChoice != nil {
			return false
		}
	} else if this.PathNormalizeChoice == nil {
		return false
	} else if !this.PathNormalizeChoice.Equal(that1.PathNormalizeChoice) {
		return false
	}
	if that1.StrictSniHostHeaderCheckChoice == nil {
		if this.StrictSniHostHeaderCheckChoice != nil {
			return false
		}
	} else if this.StrictSniHostHeaderCheckChoice == nil {
		return false
	} else if !this.StrictSniHostHeaderCheckChoice.Equal(that1.StrictSniHostHeaderCheckChoice) {
		return false
	}
	if that1.DefaultLbChoice == nil {
		if this.DefaultLbChoice != nil {
			return false
		}
	} else if this.DefaultLbChoice == nil {
		return false
	} else if !this.DefaultLbChoice.Equal(that1.DefaultLbChoice) {
		return false
	}
	if !this.HeaderTransformationType.Equal(that1.HeaderTransformationType) {
		return false
	}
	if !this.CsrfPolicy.Equal(that1.CsrfPolicy) {
		return false
	}
	if len(this.CookiesToModify) != len(that1.CookiesToModify) {
		return false
	}
	for i := range this.CookiesToModify {
		if !this.CookiesToModify[i].Equal(that1.CookiesToModify[i]) {
			return false
		}
	}
	if this.ConnectionIdleTimeout != that1.ConnectionIdleTimeout {
		return false
	}
	if !this.DnsProxyConfiguration.Equal(that1.DnsProxyConfiguration) {
		return false
	}
	if !this.SlowDdosMitigation.Equal(that1.SlowDdosMitigation) {
		return false
	}
	if !this.ApiSpec.Equal(that1.ApiSpec) {
		return false
	}
	if len(this.DomainCertMap) != len(that1.DomainCertMap) {
		return false
	}
	for i := range this.DomainCertMap {
		if !this.DomainCertMap[i].Equal(that1.DomainCertMap[i]) {
			return false
		}
	}
	return true
}
func (this *ReplaceSpecType_TlsParameters) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_TlsParameters)
	if !ok {
		that2, ok := that.(ReplaceSpecType_TlsParameters)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TlsParameters.Equal(that1.TlsParameters) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_TlsCertParams) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_TlsCertParams)
	if !ok {
		that2, ok := that.(ReplaceSpecType_TlsCertParams)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TlsCertParams.Equal(that1.TlsCertParams) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_NoChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_NoChallenge)
	if !ok {
		that2, ok := that.(ReplaceSpecType_NoChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoChallenge.Equal(that1.NoChallenge) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_JsChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_JsChallenge)
	if !ok {
		that2, ok := that.(ReplaceSpecType_JsChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JsChallenge.Equal(that1.JsChallenge) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_CaptchaChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_CaptchaChallenge)
	if !ok {
		that2, ok := that.(ReplaceSpecType_CaptchaChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CaptchaChallenge.Equal(that1.CaptchaChallenge) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_NoAuthentication) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_NoAuthentication)
	if !ok {
		that2, ok := that.(ReplaceSpecType_NoAuthentication)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoAuthentication.Equal(that1.NoAuthentication) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Authentication) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Authentication)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Authentication)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Authentication.Equal(that1.Authentication) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DefaultHeader) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DefaultHeader)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DefaultHeader)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultHeader.Equal(that1.DefaultHeader) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_ServerName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_ServerName)
	if !ok {
		that2, ok := that.(ReplaceSpecType_ServerName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ServerName != that1.ServerName {
		return false
	}
	return true
}
func (this *ReplaceSpecType_AppendServerName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_AppendServerName)
	if !ok {
		that2, ok := that.(ReplaceSpecType_AppendServerName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AppendServerName != that1.AppendServerName {
		return false
	}
	return true
}
func (this *ReplaceSpecType_PassThrough) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_PassThrough)
	if !ok {
		that2, ok := that.(ReplaceSpecType_PassThrough)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PassThrough.Equal(that1.PassThrough) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_EnablePathNormalize) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_EnablePathNormalize)
	if !ok {
		that2, ok := that.(ReplaceSpecType_EnablePathNormalize)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnablePathNormalize.Equal(that1.EnablePathNormalize) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DisablePathNormalize) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DisablePathNormalize)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DisablePathNormalize)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisablePathNormalize.Equal(that1.DisablePathNormalize) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_EnableStrictSniHostHeaderCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_EnableStrictSniHostHeaderCheck)
	if !ok {
		that2, ok := that.(ReplaceSpecType_EnableStrictSniHostHeaderCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableStrictSniHostHeaderCheck.Equal(that1.EnableStrictSniHostHeaderCheck) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_AdditionalDomains) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_AdditionalDomains)
	if !ok {
		that2, ok := that.(ReplaceSpecType_AdditionalDomains)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdditionalDomains.Equal(that1.AdditionalDomains) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_NonDefaultLoadbalancer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_NonDefaultLoadbalancer)
	if !ok {
		that2, ok := that.(ReplaceSpecType_NonDefaultLoadbalancer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NonDefaultLoadbalancer.Equal(that1.NonDefaultLoadbalancer) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DefaultLoadbalancer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DefaultLoadbalancer)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DefaultLoadbalancer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultLoadbalancer.Equal(that1.DefaultLoadbalancer) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Domains) != len(that1.Domains) {
		return false
	}
	for i := range this.Domains {
		if this.Domains[i] != that1.Domains[i] {
			return false
		}
	}
	if len(this.Routes) != len(that1.Routes) {
		return false
	}
	for i := range this.Routes {
		if !this.Routes[i].Equal(that1.Routes[i]) {
			return false
		}
	}
	if len(this.AdvertisePolicies) != len(that1.AdvertisePolicies) {
		return false
	}
	for i := range this.AdvertisePolicies {
		if !this.AdvertisePolicies[i].Equal(that1.AdvertisePolicies[i]) {
			return false
		}
	}
	if len(this.RequestHeadersToAdd) != len(that1.RequestHeadersToAdd) {
		return false
	}
	for i := range this.RequestHeadersToAdd {
		if !this.RequestHeadersToAdd[i].Equal(that1.RequestHeadersToAdd[i]) {
			return false
		}
	}
	if len(this.ResponseHeadersToAdd) != len(that1.ResponseHeadersToAdd) {
		return false
	}
	for i := range this.ResponseHeadersToAdd {
		if !this.ResponseHeadersToAdd[i].Equal(that1.ResponseHeadersToAdd[i]) {
			return false
		}
	}
	if len(this.RequestHeadersToRemove) != len(that1.RequestHeadersToRemove) {
		return false
	}
	for i := range this.RequestHeadersToRemove {
		if this.RequestHeadersToRemove[i] != that1.RequestHeadersToRemove[i] {
			return false
		}
	}
	if len(this.ResponseHeadersToRemove) != len(that1.ResponseHeadersToRemove) {
		return false
	}
	for i := range this.ResponseHeadersToRemove {
		if this.ResponseHeadersToRemove[i] != that1.ResponseHeadersToRemove[i] {
			return false
		}
	}
	if that1.TlsCertificatesChoice == nil {
		if this.TlsCertificatesChoice != nil {
			return false
		}
	} else if this.TlsCertificatesChoice == nil {
		return false
	} else if !this.TlsCertificatesChoice.Equal(that1.TlsCertificatesChoice) {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if !this.BufferPolicy.Equal(that1.BufferPolicy) {
		return false
	}
	if !this.CorsPolicy.Equal(that1.CorsPolicy) {
		return false
	}
	if this.Proxy != that1.Proxy {
		return false
	}
	if !this.WafType.Equal(that1.WafType) {
		return false
	}
	if !this.DynamicReverseProxy.Equal(that1.DynamicReverseProxy) {
		return false
	}
	if this.AddLocation != that1.AddLocation {
		return false
	}
	if !this.CompressionParams.Equal(that1.CompressionParams) {
		return false
	}
	if len(this.CustomErrors) != len(that1.CustomErrors) {
		return false
	}
	for i := range this.CustomErrors {
		if this.CustomErrors[i] != that1.CustomErrors[i] {
			return false
		}
	}
	if this.DisableDefaultErrorPages != that1.DisableDefaultErrorPages {
		return false
	}
	if this.MaxRequestHeaderSize != that1.MaxRequestHeaderSize {
		return false
	}
	if that1.ChallengeType == nil {
		if this.ChallengeType != nil {
			return false
		}
	} else if this.ChallengeType == nil {
		return false
	} else if !this.ChallengeType.Equal(that1.ChallengeType) {
		return false
	}
	if len(this.UserIdentification) != len(that1.UserIdentification) {
		return false
	}
	for i := range this.UserIdentification {
		if !this.UserIdentification[i].Equal(that1.UserIdentification[i]) {
			return false
		}
	}
	if len(this.RateLimiter) != len(that1.RateLimiter) {
		return false
	}
	for i := range this.RateLimiter {
		if !this.RateLimiter[i].Equal(that1.RateLimiter[i]) {
			return false
		}
	}
	if len(this.RateLimiterAllowedPrefixes) != len(that1.RateLimiterAllowedPrefixes) {
		return false
	}
	for i := range this.RateLimiterAllowedPrefixes {
		if !this.RateLimiterAllowedPrefixes[i].Equal(that1.RateLimiterAllowedPrefixes[i]) {
			return false
		}
	}
	if !this.RetryPolicy.Equal(that1.RetryPolicy) {
		return false
	}
	if this.IdleTimeout != that1.IdleTimeout {
		return false
	}
	if !this.TemporaryUserBlocking.Equal(that1.TemporaryUserBlocking) {
		return false
	}
	if that1.AuthenticationChoice == nil {
		if this.AuthenticationChoice != nil {
			return false
		}
	} else if this.AuthenticationChoice == nil {
		return false
	} else if !this.AuthenticationChoice.Equal(that1.AuthenticationChoice) {
		return false
	}
	if that1.ServerHeaderChoice == nil {
		if this.ServerHeaderChoice != nil {
			return false
		}
	} else if this.ServerHeaderChoice == nil {
		return false
	} else if !this.ServerHeaderChoice.Equal(that1.ServerHeaderChoice) {
		return false
	}
	if that1.PathNormalizeChoice == nil {
		if this.PathNormalizeChoice != nil {
			return false
		}
	} else if this.PathNormalizeChoice == nil {
		return false
	} else if !this.PathNormalizeChoice.Equal(that1.PathNormalizeChoice) {
		return false
	}
	if that1.StrictSniHostHeaderCheckChoice == nil {
		if this.StrictSniHostHeaderCheckChoice != nil {
			return false
		}
	} else if this.StrictSniHostHeaderCheckChoice == nil {
		return false
	} else if !this.StrictSniHostHeaderCheckChoice.Equal(that1.StrictSniHostHeaderCheckChoice) {
		return false
	}
	if that1.DefaultLbChoice == nil {
		if this.DefaultLbChoice != nil {
			return false
		}
	} else if this.DefaultLbChoice == nil {
		return false
	} else if !this.DefaultLbChoice.Equal(that1.DefaultLbChoice) {
		return false
	}
	if !this.HeaderTransformationType.Equal(that1.HeaderTransformationType) {
		return false
	}
	if len(this.CookiesToModify) != len(that1.CookiesToModify) {
		return false
	}
	for i := range this.CookiesToModify {
		if !this.CookiesToModify[i].Equal(that1.CookiesToModify[i]) {
			return false
		}
	}
	if this.ConnectionIdleTimeout != that1.ConnectionIdleTimeout {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.HostName != that1.HostName {
		return false
	}
	if len(this.DnsInfo) != len(that1.DnsInfo) {
		return false
	}
	for i := range this.DnsInfo {
		if !this.DnsInfo[i].Equal(that1.DnsInfo[i]) {
			return false
		}
	}
	if !this.AutoCertInfo.Equal(that1.AutoCertInfo) {
		return false
	}
	if this.AutoCertErrorMsg != that1.AutoCertErrorMsg {
		return false
	}
	if this.DisableDnsResolve != that1.DisableDnsResolve {
		return false
	}
	if !this.CdnService.Equal(that1.CdnService) {
		return false
	}
	if !this.CsrfPolicy.Equal(that1.CsrfPolicy) {
		return false
	}
	if !this.DnsProxyConfiguration.Equal(that1.DnsProxyConfiguration) {
		return false
	}
	if that1.DnsZoneStateChoice == nil {
		if this.DnsZoneStateChoice != nil {
			return false
		}
	} else if this.DnsZoneStateChoice == nil {
		return false
	} else if !this.DnsZoneStateChoice.Equal(that1.DnsZoneStateChoice) {
		return false
	}
	if !this.SlowDdosMitigation.Equal(that1.SlowDdosMitigation) {
		return false
	}
	if !this.ApiSpec.Equal(that1.ApiSpec) {
		return false
	}
	if len(this.DomainCertMap) != len(that1.DomainCertMap) {
		return false
	}
	for i := range this.DomainCertMap {
		if !this.DomainCertMap[i].Equal(that1.DomainCertMap[i]) {
			return false
		}
	}
	return true
}
func (this *GetSpecType_TlsParameters) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_TlsParameters)
	if !ok {
		that2, ok := that.(GetSpecType_TlsParameters)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TlsParameters.Equal(that1.TlsParameters) {
		return false
	}
	return true
}
func (this *GetSpecType_TlsCertParams) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_TlsCertParams)
	if !ok {
		that2, ok := that.(GetSpecType_TlsCertParams)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TlsCertParams.Equal(that1.TlsCertParams) {
		return false
	}
	return true
}
func (this *GetSpecType_NoChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_NoChallenge)
	if !ok {
		that2, ok := that.(GetSpecType_NoChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoChallenge.Equal(that1.NoChallenge) {
		return false
	}
	return true
}
func (this *GetSpecType_JsChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_JsChallenge)
	if !ok {
		that2, ok := that.(GetSpecType_JsChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JsChallenge.Equal(that1.JsChallenge) {
		return false
	}
	return true
}
func (this *GetSpecType_CaptchaChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_CaptchaChallenge)
	if !ok {
		that2, ok := that.(GetSpecType_CaptchaChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CaptchaChallenge.Equal(that1.CaptchaChallenge) {
		return false
	}
	return true
}
func (this *GetSpecType_NoAuthentication) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_NoAuthentication)
	if !ok {
		that2, ok := that.(GetSpecType_NoAuthentication)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoAuthentication.Equal(that1.NoAuthentication) {
		return false
	}
	return true
}
func (this *GetSpecType_Authentication) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Authentication)
	if !ok {
		that2, ok := that.(GetSpecType_Authentication)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Authentication.Equal(that1.Authentication) {
		return false
	}
	return true
}
func (this *GetSpecType_DefaultHeader) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DefaultHeader)
	if !ok {
		that2, ok := that.(GetSpecType_DefaultHeader)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultHeader.Equal(that1.DefaultHeader) {
		return false
	}
	return true
}
func (this *GetSpecType_ServerName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_ServerName)
	if !ok {
		that2, ok := that.(GetSpecType_ServerName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ServerName != that1.ServerName {
		return false
	}
	return true
}
func (this *GetSpecType_AppendServerName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_AppendServerName)
	if !ok {
		that2, ok := that.(GetSpecType_AppendServerName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AppendServerName != that1.AppendServerName {
		return false
	}
	return true
}
func (this *GetSpecType_PassThrough) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_PassThrough)
	if !ok {
		that2, ok := that.(GetSpecType_PassThrough)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PassThrough.Equal(that1.PassThrough) {
		return false
	}
	return true
}
func (this *GetSpecType_EnablePathNormalize) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_EnablePathNormalize)
	if !ok {
		that2, ok := that.(GetSpecType_EnablePathNormalize)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnablePathNormalize.Equal(that1.EnablePathNormalize) {
		return false
	}
	return true
}
func (this *GetSpecType_DisablePathNormalize) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DisablePathNormalize)
	if !ok {
		that2, ok := that.(GetSpecType_DisablePathNormalize)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisablePathNormalize.Equal(that1.DisablePathNormalize) {
		return false
	}
	return true
}
func (this *GetSpecType_EnableStrictSniHostHeaderCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_EnableStrictSniHostHeaderCheck)
	if !ok {
		that2, ok := that.(GetSpecType_EnableStrictSniHostHeaderCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableStrictSniHostHeaderCheck.Equal(that1.EnableStrictSniHostHeaderCheck) {
		return false
	}
	return true
}
func (this *GetSpecType_AdditionalDomains) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_AdditionalDomains)
	if !ok {
		that2, ok := that.(GetSpecType_AdditionalDomains)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdditionalDomains.Equal(that1.AdditionalDomains) {
		return false
	}
	return true
}
func (this *GetSpecType_NonDefaultLoadbalancer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_NonDefaultLoadbalancer)
	if !ok {
		that2, ok := that.(GetSpecType_NonDefaultLoadbalancer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NonDefaultLoadbalancer.Equal(that1.NonDefaultLoadbalancer) {
		return false
	}
	return true
}
func (this *GetSpecType_DefaultLoadbalancer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DefaultLoadbalancer)
	if !ok {
		that2, ok := that.(GetSpecType_DefaultLoadbalancer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultLoadbalancer.Equal(that1.DefaultLoadbalancer) {
		return false
	}
	return true
}
func (this *GetSpecType_NotReady) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_NotReady)
	if !ok {
		that2, ok := that.(GetSpecType_NotReady)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NotReady.Equal(that1.NotReady) {
		return false
	}
	return true
}
func (this *GetSpecType_Ready) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Ready)
	if !ok {
		that2, ok := that.(GetSpecType_Ready)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Ready.Equal(that1.Ready) {
		return false
	}
	return true
}
func (this *VirtualHostID) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&virtual_host.VirtualHostID{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VerStatusType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&virtual_host.VerStatusType{")
	if this.CoalescedVirtualHosts != nil {
		s = append(s, "CoalescedVirtualHosts: "+fmt.Sprintf("%#v", this.CoalescedVirtualHosts)+",\n")
	}
	if this.NonCoalescedVirtualHosts != nil {
		s = append(s, "NonCoalescedVirtualHosts: "+fmt.Sprintf("%#v", this.NonCoalescedVirtualHosts)+",\n")
	}
	if this.AdvertisePolicy != nil {
		s = append(s, "AdvertisePolicy: "+fmt.Sprintf("%#v", this.AdvertisePolicy)+",\n")
	}
	if this.CoalescedVhosts != nil {
		s = append(s, "CoalescedVhosts: "+fmt.Sprintf("%#v", this.CoalescedVhosts)+",\n")
	}
	if this.NonCoalescedVhosts != nil {
		s = append(s, "NonCoalescedVhosts: "+fmt.Sprintf("%#v", this.NonCoalescedVhosts)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *JavaScriptConfigType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&virtual_host.JavaScriptConfigType{")
	s = append(s, "CachePrefix: "+fmt.Sprintf("%#v", this.CachePrefix)+",\n")
	if this.ScriptConfig != nil {
		s = append(s, "ScriptConfig: "+fmt.Sprintf("%#v", this.ScriptConfig)+",\n")
	}
	s = append(s, "CustomScriptUrl: "+fmt.Sprintf("%#v", this.CustomScriptUrl)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DynamicReverseProxyType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&virtual_host.DynamicReverseProxyType{")
	s = append(s, "ResolveEndpointDynamically: "+fmt.Sprintf("%#v", this.ResolveEndpointDynamically)+",\n")
	s = append(s, "ResolutionNetworkType: "+fmt.Sprintf("%#v", this.ResolutionNetworkType)+",\n")
	if this.ResolutionNetwork != nil {
		s = append(s, "ResolutionNetwork: "+fmt.Sprintf("%#v", this.ResolutionNetwork)+",\n")
	}
	s = append(s, "ConnectionTimeout: "+fmt.Sprintf("%#v", this.ConnectionTimeout)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CompressionType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&virtual_host.CompressionType{")
	s = append(s, "ContentLength: "+fmt.Sprintf("%#v", this.ContentLength)+",\n")
	s = append(s, "ContentType: "+fmt.Sprintf("%#v", this.ContentType)+",\n")
	s = append(s, "DisableOnEtagHeader: "+fmt.Sprintf("%#v", this.DisableOnEtagHeader)+",\n")
	s = append(s, "RemoveAcceptEncodingHeader: "+fmt.Sprintf("%#v", this.RemoveAcceptEncodingHeader)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *JavascriptChallengeType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&virtual_host.JavascriptChallengeType{")
	s = append(s, "JsScriptDelay: "+fmt.Sprintf("%#v", this.JsScriptDelay)+",\n")
	s = append(s, "CookieExpiry: "+fmt.Sprintf("%#v", this.CookieExpiry)+",\n")
	s = append(s, "CustomPage: "+fmt.Sprintf("%#v", this.CustomPage)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CaptchaChallengeType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&virtual_host.CaptchaChallengeType{")
	s = append(s, "CookieExpiry: "+fmt.Sprintf("%#v", this.CookieExpiry)+",\n")
	s = append(s, "CustomPage: "+fmt.Sprintf("%#v", this.CustomPage)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TemporaryUserBlockingType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&virtual_host.TemporaryUserBlockingType{")
	s = append(s, "CustomPage: "+fmt.Sprintf("%#v", this.CustomPage)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DNSRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&virtual_host.DNSRecord{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AutoCertInfoType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&virtual_host.AutoCertInfoType{")
	s = append(s, "AutoCertState: "+fmt.Sprintf("%#v", this.AutoCertState)+",\n")
	if this.AutoCertExpiry != nil {
		s = append(s, "AutoCertExpiry: "+fmt.Sprintf("%#v", this.AutoCertExpiry)+",\n")
	}
	s = append(s, "AutoCertSubject: "+fmt.Sprintf("%#v", this.AutoCertSubject)+",\n")
	s = append(s, "AutoCertIssuer: "+fmt.Sprintf("%#v", this.AutoCertIssuer)+",\n")
	if this.DnsRecords != nil {
		s = append(s, "DnsRecords: "+fmt.Sprintf("%#v", this.DnsRecords)+",\n")
	}
	if this.StateStartTime != nil {
		s = append(s, "StateStartTime: "+fmt.Sprintf("%#v", this.StateStartTime)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AuthenticationDetails) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&virtual_host.AuthenticationDetails{")
	if this.AuthConfig != nil {
		s = append(s, "AuthConfig: "+fmt.Sprintf("%#v", this.AuthConfig)+",\n")
	}
	if this.CookieParamsChoice != nil {
		s = append(s, "CookieParamsChoice: "+fmt.Sprintf("%#v", this.CookieParamsChoice)+",\n")
	}
	if this.RedirectUrlChoice != nil {
		s = append(s, "RedirectUrlChoice: "+fmt.Sprintf("%#v", this.RedirectUrlChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AuthenticationDetails_UseAuthObjectConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.AuthenticationDetails_UseAuthObjectConfig{` +
		`UseAuthObjectConfig:` + fmt.Sprintf("%#v", this.UseAuthObjectConfig) + `}`}, ", ")
	return s
}
func (this *AuthenticationDetails_CookieParams) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.AuthenticationDetails_CookieParams{` +
		`CookieParams:` + fmt.Sprintf("%#v", this.CookieParams) + `}`}, ", ")
	return s
}
func (this *AuthenticationDetails_RedirectUrl) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.AuthenticationDetails_RedirectUrl{` +
		`RedirectUrl:` + fmt.Sprintf("%#v", this.RedirectUrl) + `}`}, ", ")
	return s
}
func (this *AuthenticationDetails_RedirectDynamic) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.AuthenticationDetails_RedirectDynamic{` +
		`RedirectDynamic:` + fmt.Sprintf("%#v", this.RedirectDynamic) + `}`}, ", ")
	return s
}
func (this *PolicyBasedChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&virtual_host.PolicyBasedChallenge{")
	if this.JsChallenge != nil {
		s = append(s, "JsChallenge: "+fmt.Sprintf("%#v", this.JsChallenge)+",\n")
	}
	if this.CaptchaChallenge != nil {
		s = append(s, "CaptchaChallenge: "+fmt.Sprintf("%#v", this.CaptchaChallenge)+",\n")
	}
	if this.TemporaryUserBlocking != nil {
		s = append(s, "TemporaryUserBlocking: "+fmt.Sprintf("%#v", this.TemporaryUserBlocking)+",\n")
	}
	if this.ChallengeChoice != nil {
		s = append(s, "ChallengeChoice: "+fmt.Sprintf("%#v", this.ChallengeChoice)+",\n")
	}
	if this.MaliciousUserMitigation != nil {
		s = append(s, "MaliciousUserMitigation: "+fmt.Sprintf("%#v", this.MaliciousUserMitigation)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PolicyBasedChallenge_NoChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.PolicyBasedChallenge_NoChallenge{` +
		`NoChallenge:` + fmt.Sprintf("%#v", this.NoChallenge) + `}`}, ", ")
	return s
}
func (this *PolicyBasedChallenge_AlwaysEnableJsChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.PolicyBasedChallenge_AlwaysEnableJsChallenge{` +
		`AlwaysEnableJsChallenge:` + fmt.Sprintf("%#v", this.AlwaysEnableJsChallenge) + `}`}, ", ")
	return s
}
func (this *PolicyBasedChallenge_AlwaysEnableCaptchaChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.PolicyBasedChallenge_AlwaysEnableCaptchaChallenge{` +
		`AlwaysEnableCaptchaChallenge:` + fmt.Sprintf("%#v", this.AlwaysEnableCaptchaChallenge) + `}`}, ", ")
	return s
}
func (this *ShapeBotDefenseConfigType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&virtual_host.ShapeBotDefenseConfigType{")
	s = append(s, "ApplicationId: "+fmt.Sprintf("%#v", this.ApplicationId)+",\n")
	if this.ApiAuthKey != nil {
		s = append(s, "ApiAuthKey: "+fmt.Sprintf("%#v", this.ApiAuthKey)+",\n")
	}
	if this.Instance != nil {
		s = append(s, "Instance: "+fmt.Sprintf("%#v", this.Instance)+",\n")
	}
	s = append(s, "Timeout: "+fmt.Sprintf("%#v", this.Timeout)+",\n")
	keysForBlockingPages := make([]string, 0, len(this.BlockingPages))
	for k, _ := range this.BlockingPages {
		keysForBlockingPages = append(keysForBlockingPages, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForBlockingPages)
	mapStringForBlockingPages := "map[string]string{"
	for _, k := range keysForBlockingPages {
		mapStringForBlockingPages += fmt.Sprintf("%#v: %#v,", k, this.BlockingPages[k])
	}
	mapStringForBlockingPages += "}"
	if this.BlockingPages != nil {
		s = append(s, "BlockingPages: "+mapStringForBlockingPages+",\n")
	}
	s = append(s, "ReloadHeaderName: "+fmt.Sprintf("%#v", this.ReloadHeaderName)+",\n")
	s = append(s, "JsPath: "+fmt.Sprintf("%#v", this.JsPath)+",\n")
	s = append(s, "Mode: "+fmt.Sprintf("%#v", this.Mode)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServiceDomain) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&virtual_host.ServiceDomain{")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	s = append(s, "ServiceDomain: "+fmt.Sprintf("%#v", this.ServiceDomain)+",\n")
	s = append(s, "InternalServiceDomain: "+fmt.Sprintf("%#v", this.InternalServiceDomain)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CdnServiceType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&virtual_host.CdnServiceType{")
	if this.ContentChoice != nil {
		s = append(s, "ContentChoice: "+fmt.Sprintf("%#v", this.ContentChoice)+",\n")
	}
	s = append(s, "CacheTtl: "+fmt.Sprintf("%#v", this.CacheTtl)+",\n")
	if this.ServiceDomains != nil {
		s = append(s, "ServiceDomains: "+fmt.Sprintf("%#v", this.ServiceDomains)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CdnServiceType_DownloadDelivery) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.CdnServiceType_DownloadDelivery{` +
		`DownloadDelivery:` + fmt.Sprintf("%#v", this.DownloadDelivery) + `}`}, ", ")
	return s
}
func (this *CdnServiceType_LiveStreaming) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.CdnServiceType_LiveStreaming{` +
		`LiveStreaming:` + fmt.Sprintf("%#v", this.LiveStreaming) + `}`}, ", ")
	return s
}
func (this *ClientIPHeaders) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&virtual_host.ClientIPHeaders{")
	s = append(s, "ClientIpHeaders: "+fmt.Sprintf("%#v", this.ClientIpHeaders)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DNSProxyConfiguration) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&virtual_host.DNSProxyConfiguration{")
	if this.DdosProfile != nil {
		s = append(s, "DdosProfile: "+fmt.Sprintf("%#v", this.DdosProfile)+",\n")
	}
	if this.CacheProfile != nil {
		s = append(s, "CacheProfile: "+fmt.Sprintf("%#v", this.CacheProfile)+",\n")
	}
	if this.ProtocolInspection != nil {
		s = append(s, "ProtocolInspection: "+fmt.Sprintf("%#v", this.ProtocolInspection)+",\n")
	}
	if this.Irules != nil {
		s = append(s, "Irules: "+fmt.Sprintf("%#v", this.Irules)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DNSDDoSProfile) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&virtual_host.DNSDDoSProfile{")
	if this.DdosMitigationChoice != nil {
		s = append(s, "DdosMitigationChoice: "+fmt.Sprintf("%#v", this.DdosMitigationChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DNSDDoSProfile_EnableDdosMitigation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.DNSDDoSProfile_EnableDdosMitigation{` +
		`EnableDdosMitigation:` + fmt.Sprintf("%#v", this.EnableDdosMitigation) + `}`}, ", ")
	return s
}
func (this *DNSDDoSProfile_DisableDdosMitigation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.DNSDDoSProfile_DisableDdosMitigation{` +
		`DisableDdosMitigation:` + fmt.Sprintf("%#v", this.DisableDdosMitigation) + `}`}, ", ")
	return s
}
func (this *DNSCacheProfile) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&virtual_host.DNSCacheProfile{")
	if this.CacheProfileChoice != nil {
		s = append(s, "CacheProfileChoice: "+fmt.Sprintf("%#v", this.CacheProfileChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DNSCacheProfile_CacheSize) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.DNSCacheProfile_CacheSize{` +
		`CacheSize:` + fmt.Sprintf("%#v", this.CacheSize) + `}`}, ", ")
	return s
}
func (this *DNSCacheProfile_DisableCacheProfile) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.DNSCacheProfile_DisableCacheProfile{` +
		`DisableCacheProfile:` + fmt.Sprintf("%#v", this.DisableCacheProfile) + `}`}, ", ")
	return s
}
func (this *SlowDDoSMitigation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&virtual_host.SlowDDoSMitigation{")
	s = append(s, "RequestHeadersTimeout: "+fmt.Sprintf("%#v", this.RequestHeadersTimeout)+",\n")
	if this.RequestTimeoutChoice != nil {
		s = append(s, "RequestTimeoutChoice: "+fmt.Sprintf("%#v", this.RequestTimeoutChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SlowDDoSMitigation_RequestTimeout) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.SlowDDoSMitigation_RequestTimeout{` +
		`RequestTimeout:` + fmt.Sprintf("%#v", this.RequestTimeout) + `}`}, ", ")
	return s
}
func (this *SlowDDoSMitigation_DisableRequestTimeout) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.SlowDDoSMitigation_DisableRequestTimeout{` +
		`DisableRequestTimeout:` + fmt.Sprintf("%#v", this.DisableRequestTimeout) + `}`}, ", ")
	return s
}
func (this *DomainCertificates) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&virtual_host.DomainCertificates{")
	if this.RsaCertificates != nil {
		s = append(s, "RsaCertificates: "+fmt.Sprintf("%#v", this.RsaCertificates)+",\n")
	}
	if this.EcdsaCertificates != nil {
		s = append(s, "EcdsaCertificates: "+fmt.Sprintf("%#v", this.EcdsaCertificates)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ApiSpec) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&virtual_host.ApiSpec{")
	if this.ApiDefinition != nil {
		s = append(s, "ApiDefinition: "+fmt.Sprintf("%#v", this.ApiDefinition)+",\n")
	}
	if this.OpenApiValidationChoice != nil {
		s = append(s, "OpenApiValidationChoice: "+fmt.Sprintf("%#v", this.OpenApiValidationChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ApiSpec_DisableOpenApiValidation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.ApiSpec_DisableOpenApiValidation{` +
		`DisableOpenApiValidation:` + fmt.Sprintf("%#v", this.DisableOpenApiValidation) + `}`}, ", ")
	return s
}
func (this *ApiSpec_EnableOpenApiValidation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.ApiSpec_EnableOpenApiValidation{` +
		`EnableOpenApiValidation:` + fmt.Sprintf("%#v", this.EnableOpenApiValidation) + `}`}, ", ")
	return s
}
func (this *OpenApiValidationSettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&virtual_host.OpenApiValidationSettings{")
	s = append(s, "FailOversizedBodyValidation: "+fmt.Sprintf("%#v", this.FailOversizedBodyValidation)+",\n")
	s = append(s, "AllowOnlySpecifiedQueryParams: "+fmt.Sprintf("%#v", this.AllowOnlySpecifiedQueryParams)+",\n")
	s = append(s, "AllowOnlySpecifiedHeaders: "+fmt.Sprintf("%#v", this.AllowOnlySpecifiedHeaders)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HttpProtocolOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&virtual_host.HttpProtocolOptions{")
	if this.HttpProtocolChoice != nil {
		s = append(s, "HttpProtocolChoice: "+fmt.Sprintf("%#v", this.HttpProtocolChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HttpProtocolOptions_HttpProtocolEnableV1Only) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.HttpProtocolOptions_HttpProtocolEnableV1Only{` +
		`HttpProtocolEnableV1Only:` + fmt.Sprintf("%#v", this.HttpProtocolEnableV1Only) + `}`}, ", ")
	return s
}
func (this *HttpProtocolOptions_HttpProtocolEnableV2Only) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.HttpProtocolOptions_HttpProtocolEnableV2Only{` +
		`HttpProtocolEnableV2Only:` + fmt.Sprintf("%#v", this.HttpProtocolEnableV2Only) + `}`}, ", ")
	return s
}
func (this *HttpProtocolOptions_HttpProtocolEnableV1V2) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.HttpProtocolOptions_HttpProtocolEnableV1V2{` +
		`HttpProtocolEnableV1V2:` + fmt.Sprintf("%#v", this.HttpProtocolEnableV1V2) + `}`}, ", ")
	return s
}
func (this *HttpRedirectOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&virtual_host.HttpRedirectOptions{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 89)
	s = append(s, "&virtual_host.GlobalSpecType{")
	s = append(s, "Domains: "+fmt.Sprintf("%#v", this.Domains)+",\n")
	if this.Routes != nil {
		s = append(s, "Routes: "+fmt.Sprintf("%#v", this.Routes)+",\n")
	}
	if this.JavascriptInfo != nil {
		s = append(s, "JavascriptInfo: "+fmt.Sprintf("%#v", this.JavascriptInfo)+",\n")
	}
	if this.AdvertisePolicies != nil {
		s = append(s, "AdvertisePolicies: "+fmt.Sprintf("%#v", this.AdvertisePolicies)+",\n")
	}
	if this.RequestHeadersToAdd != nil {
		s = append(s, "RequestHeadersToAdd: "+fmt.Sprintf("%#v", this.RequestHeadersToAdd)+",\n")
	}
	if this.ResponseHeadersToAdd != nil {
		s = append(s, "ResponseHeadersToAdd: "+fmt.Sprintf("%#v", this.ResponseHeadersToAdd)+",\n")
	}
	s = append(s, "RequestHeadersToRemove: "+fmt.Sprintf("%#v", this.RequestHeadersToRemove)+",\n")
	s = append(s, "ResponseHeadersToRemove: "+fmt.Sprintf("%#v", this.ResponseHeadersToRemove)+",\n")
	if this.TlsCertificatesChoice != nil {
		s = append(s, "TlsCertificatesChoice: "+fmt.Sprintf("%#v", this.TlsCertificatesChoice)+",\n")
	}
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	if this.BufferPolicy != nil {
		s = append(s, "BufferPolicy: "+fmt.Sprintf("%#v", this.BufferPolicy)+",\n")
	}
	if this.CorsPolicy != nil {
		s = append(s, "CorsPolicy: "+fmt.Sprintf("%#v", this.CorsPolicy)+",\n")
	}
	s = append(s, "Proxy: "+fmt.Sprintf("%#v", this.Proxy)+",\n")
	if this.Jwt != nil {
		s = append(s, "Jwt: "+fmt.Sprintf("%#v", this.Jwt)+",\n")
	}
	if this.WafType != nil {
		s = append(s, "WafType: "+fmt.Sprintf("%#v", this.WafType)+",\n")
	}
	if this.DynamicReverseProxy != nil {
		s = append(s, "DynamicReverseProxy: "+fmt.Sprintf("%#v", this.DynamicReverseProxy)+",\n")
	}
	s = append(s, "AddLocation: "+fmt.Sprintf("%#v", this.AddLocation)+",\n")
	if this.CompressionParams != nil {
		s = append(s, "CompressionParams: "+fmt.Sprintf("%#v", this.CompressionParams)+",\n")
	}
	keysForCustomErrors := make([]uint32, 0, len(this.CustomErrors))
	for k, _ := range this.CustomErrors {
		keysForCustomErrors = append(keysForCustomErrors, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForCustomErrors)
	mapStringForCustomErrors := "map[uint32]string{"
	for _, k := range keysForCustomErrors {
		mapStringForCustomErrors += fmt.Sprintf("%#v: %#v,", k, this.CustomErrors[k])
	}
	mapStringForCustomErrors += "}"
	if this.CustomErrors != nil {
		s = append(s, "CustomErrors: "+mapStringForCustomErrors+",\n")
	}
	s = append(s, "DisableDefaultErrorPages: "+fmt.Sprintf("%#v", this.DisableDefaultErrorPages)+",\n")
	s = append(s, "MaxRequestHeaderSize: "+fmt.Sprintf("%#v", this.MaxRequestHeaderSize)+",\n")
	if this.ChallengeType != nil {
		s = append(s, "ChallengeType: "+fmt.Sprintf("%#v", this.ChallengeType)+",\n")
	}
	if this.UserIdentification != nil {
		s = append(s, "UserIdentification: "+fmt.Sprintf("%#v", this.UserIdentification)+",\n")
	}
	if this.RateLimiter != nil {
		s = append(s, "RateLimiter: "+fmt.Sprintf("%#v", this.RateLimiter)+",\n")
	}
	if this.RateLimiterAllowedPrefixes != nil {
		s = append(s, "RateLimiterAllowedPrefixes: "+fmt.Sprintf("%#v", this.RateLimiterAllowedPrefixes)+",\n")
	}
	if this.RetryPolicy != nil {
		s = append(s, "RetryPolicy: "+fmt.Sprintf("%#v", this.RetryPolicy)+",\n")
	}
	if this.TemporaryUserBlocking != nil {
		s = append(s, "TemporaryUserBlocking: "+fmt.Sprintf("%#v", this.TemporaryUserBlocking)+",\n")
	}
	if this.MaliciousUserMitigation != nil {
		s = append(s, "MaliciousUserMitigation: "+fmt.Sprintf("%#v", this.MaliciousUserMitigation)+",\n")
	}
	if this.TlsIntercept != nil {
		s = append(s, "TlsIntercept: "+fmt.Sprintf("%#v", this.TlsIntercept)+",\n")
	}
	if this.AuthenticationChoice != nil {
		s = append(s, "AuthenticationChoice: "+fmt.Sprintf("%#v", this.AuthenticationChoice)+",\n")
	}
	s = append(s, "IdleTimeout: "+fmt.Sprintf("%#v", this.IdleTimeout)+",\n")
	s = append(s, "DisableDnsResolve: "+fmt.Sprintf("%#v", this.DisableDnsResolve)+",\n")
	if this.ServerHeaderChoice != nil {
		s = append(s, "ServerHeaderChoice: "+fmt.Sprintf("%#v", this.ServerHeaderChoice)+",\n")
	}
	if this.PathNormalizeChoice != nil {
		s = append(s, "PathNormalizeChoice: "+fmt.Sprintf("%#v", this.PathNormalizeChoice)+",\n")
	}
	if this.StrictSniHostHeaderCheckChoice != nil {
		s = append(s, "StrictSniHostHeaderCheckChoice: "+fmt.Sprintf("%#v", this.StrictSniHostHeaderCheckChoice)+",\n")
	}
	if this.CdnService != nil {
		s = append(s, "CdnService: "+fmt.Sprintf("%#v", this.CdnService)+",\n")
	}
	if this.TrustClientIpHeadersChoice != nil {
		s = append(s, "TrustClientIpHeadersChoice: "+fmt.Sprintf("%#v", this.TrustClientIpHeadersChoice)+",\n")
	}
	if this.DefaultLbChoice != nil {
		s = append(s, "DefaultLbChoice: "+fmt.Sprintf("%#v", this.DefaultLbChoice)+",\n")
	}
	if this.HeaderTransformationType != nil {
		s = append(s, "HeaderTransformationType: "+fmt.Sprintf("%#v", this.HeaderTransformationType)+",\n")
	}
	if this.CookiesToModify != nil {
		s = append(s, "CookiesToModify: "+fmt.Sprintf("%#v", this.CookiesToModify)+",\n")
	}
	s = append(s, "ConnectionIdleTimeout: "+fmt.Sprintf("%#v", this.ConnectionIdleTimeout)+",\n")
	if this.HttpProtocolOptions != nil {
		s = append(s, "HttpProtocolOptions: "+fmt.Sprintf("%#v", this.HttpProtocolOptions)+",\n")
	}
	if this.DdosAutoMitigationAction != nil {
		s = append(s, "DdosAutoMitigationAction: "+fmt.Sprintf("%#v", this.DdosAutoMitigationAction)+",\n")
	}
	s = append(s, "DnsVolterraManaged: "+fmt.Sprintf("%#v", this.DnsVolterraManaged)+",\n")
	if this.DnsDomains != nil {
		s = append(s, "DnsDomains: "+fmt.Sprintf("%#v", this.DnsDomains)+",\n")
	}
	s = append(s, "AutoCert: "+fmt.Sprintf("%#v", this.AutoCert)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "HostName: "+fmt.Sprintf("%#v", this.HostName)+",\n")
	if this.DnsInfo != nil {
		s = append(s, "DnsInfo: "+fmt.Sprintf("%#v", this.DnsInfo)+",\n")
	}
	s = append(s, "AutoCertState: "+fmt.Sprintf("%#v", this.AutoCertState)+",\n")
	if this.AutoCertInfo != nil {
		s = append(s, "AutoCertInfo: "+fmt.Sprintf("%#v", this.AutoCertInfo)+",\n")
	}
	s = append(s, "AutoCertErrorMsg: "+fmt.Sprintf("%#v", this.AutoCertErrorMsg)+",\n")
	s = append(s, "UserDomains: "+fmt.Sprintf("%#v", this.UserDomains)+",\n")
	if this.ServicePolicySets != nil {
		s = append(s, "ServicePolicySets: "+fmt.Sprintf("%#v", this.ServicePolicySets)+",\n")
	}
	s = append(s, "LoadbalancerAlgorithm: "+fmt.Sprintf("%#v", this.LoadbalancerAlgorithm)+",\n")
	s = append(s, "VolterraCert: "+fmt.Sprintf("%#v", this.VolterraCert)+",\n")
	if this.BotDefenseChoice != nil {
		s = append(s, "BotDefenseChoice: "+fmt.Sprintf("%#v", this.BotDefenseChoice)+",\n")
	}
	s = append(s, "CheckIpReputation: "+fmt.Sprintf("%#v", this.CheckIpReputation)+",\n")
	if this.FastAcl != nil {
		s = append(s, "FastAcl: "+fmt.Sprintf("%#v", this.FastAcl)+",\n")
	}
	if this.L7Acl != nil {
		s = append(s, "L7Acl: "+fmt.Sprintf("%#v", this.L7Acl)+",\n")
	}
	if this.DnsZones != nil {
		s = append(s, "DnsZones: "+fmt.Sprintf("%#v", this.DnsZones)+",\n")
	}
	if this.CsrfPolicy != nil {
		s = append(s, "CsrfPolicy: "+fmt.Sprintf("%#v", this.CsrfPolicy)+",\n")
	}
	if this.DnsProxyConfiguration != nil {
		s = append(s, "DnsProxyConfiguration: "+fmt.Sprintf("%#v", this.DnsProxyConfiguration)+",\n")
	}
	if this.DnsZoneStateChoice != nil {
		s = append(s, "DnsZoneStateChoice: "+fmt.Sprintf("%#v", this.DnsZoneStateChoice)+",\n")
	}
	if this.CustomCertExpiry != nil {
		s = append(s, "CustomCertExpiry: "+fmt.Sprintf("%#v", this.CustomCertExpiry)+",\n")
	}
	if this.SlowDdosMitigation != nil {
		s = append(s, "SlowDdosMitigation: "+fmt.Sprintf("%#v", this.SlowDdosMitigation)+",\n")
	}
	if this.ApiSpec != nil {
		s = append(s, "ApiSpec: "+fmt.Sprintf("%#v", this.ApiSpec)+",\n")
	}
	keysForDomainCertMap := make([]string, 0, len(this.DomainCertMap))
	for k, _ := range this.DomainCertMap {
		keysForDomainCertMap = append(keysForDomainCertMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForDomainCertMap)
	mapStringForDomainCertMap := "map[string]*DomainCertificates{"
	for _, k := range keysForDomainCertMap {
		mapStringForDomainCertMap += fmt.Sprintf("%#v: %#v,", k, this.DomainCertMap[k])
	}
	mapStringForDomainCertMap += "}"
	if this.DomainCertMap != nil {
		s = append(s, "DomainCertMap: "+mapStringForDomainCertMap+",\n")
	}
	if this.HttpRedirectOptions != nil {
		s = append(s, "HttpRedirectOptions: "+fmt.Sprintf("%#v", this.HttpRedirectOptions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_TlsParameters) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.GlobalSpecType_TlsParameters{` +
		`TlsParameters:` + fmt.Sprintf("%#v", this.TlsParameters) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_TlsCertParams) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.GlobalSpecType_TlsCertParams{` +
		`TlsCertParams:` + fmt.Sprintf("%#v", this.TlsCertParams) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_NoChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.GlobalSpecType_NoChallenge{` +
		`NoChallenge:` + fmt.Sprintf("%#v", this.NoChallenge) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_JsChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.GlobalSpecType_JsChallenge{` +
		`JsChallenge:` + fmt.Sprintf("%#v", this.JsChallenge) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_CaptchaChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.GlobalSpecType_CaptchaChallenge{` +
		`CaptchaChallenge:` + fmt.Sprintf("%#v", this.CaptchaChallenge) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_PolicyBasedChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.GlobalSpecType_PolicyBasedChallenge{` +
		`PolicyBasedChallenge:` + fmt.Sprintf("%#v", this.PolicyBasedChallenge) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_NoAuthentication) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.GlobalSpecType_NoAuthentication{` +
		`NoAuthentication:` + fmt.Sprintf("%#v", this.NoAuthentication) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_Authentication) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.GlobalSpecType_Authentication{` +
		`Authentication:` + fmt.Sprintf("%#v", this.Authentication) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DefaultHeader) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.GlobalSpecType_DefaultHeader{` +
		`DefaultHeader:` + fmt.Sprintf("%#v", this.DefaultHeader) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_ServerName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.GlobalSpecType_ServerName{` +
		`ServerName:` + fmt.Sprintf("%#v", this.ServerName) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_AppendServerName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.GlobalSpecType_AppendServerName{` +
		`AppendServerName:` + fmt.Sprintf("%#v", this.AppendServerName) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_PassThrough) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.GlobalSpecType_PassThrough{` +
		`PassThrough:` + fmt.Sprintf("%#v", this.PassThrough) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_EnablePathNormalize) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.GlobalSpecType_EnablePathNormalize{` +
		`EnablePathNormalize:` + fmt.Sprintf("%#v", this.EnablePathNormalize) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DisablePathNormalize) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.GlobalSpecType_DisablePathNormalize{` +
		`DisablePathNormalize:` + fmt.Sprintf("%#v", this.DisablePathNormalize) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_EnableStrictSniHostHeaderCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.GlobalSpecType_EnableStrictSniHostHeaderCheck{` +
		`EnableStrictSniHostHeaderCheck:` + fmt.Sprintf("%#v", this.EnableStrictSniHostHeaderCheck) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_AdditionalDomains) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.GlobalSpecType_AdditionalDomains{` +
		`AdditionalDomains:` + fmt.Sprintf("%#v", this.AdditionalDomains) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DisableTrustClientIpHeaders) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.GlobalSpecType_DisableTrustClientIpHeaders{` +
		`DisableTrustClientIpHeaders:` + fmt.Sprintf("%#v", this.DisableTrustClientIpHeaders) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_EnableTrustClientIpHeaders) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.GlobalSpecType_EnableTrustClientIpHeaders{` +
		`EnableTrustClientIpHeaders:` + fmt.Sprintf("%#v", this.EnableTrustClientIpHeaders) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_NonDefaultLoadbalancer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.GlobalSpecType_NonDefaultLoadbalancer{` +
		`NonDefaultLoadbalancer:` + fmt.Sprintf("%#v", this.NonDefaultLoadbalancer) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DefaultLoadbalancer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.GlobalSpecType_DefaultLoadbalancer{` +
		`DefaultLoadbalancer:` + fmt.Sprintf("%#v", this.DefaultLoadbalancer) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_Block) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.GlobalSpecType_Block{` +
		`Block:` + fmt.Sprintf("%#v", this.Block) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DdosJsChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.GlobalSpecType_DdosJsChallenge{` +
		`DdosJsChallenge:` + fmt.Sprintf("%#v", this.DdosJsChallenge) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_L7DdosActionDefault) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.GlobalSpecType_L7DdosActionDefault{` +
		`L7DdosActionDefault:` + fmt.Sprintf("%#v", this.L7DdosActionDefault) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DisableBotDefense) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.GlobalSpecType_DisableBotDefense{` +
		`DisableBotDefense:` + fmt.Sprintf("%#v", this.DisableBotDefense) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_BotDefense) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.GlobalSpecType_BotDefense{` +
		`BotDefense:` + fmt.Sprintf("%#v", this.BotDefense) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_NotReady) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.GlobalSpecType_NotReady{` +
		`NotReady:` + fmt.Sprintf("%#v", this.NotReady) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_Ready) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.GlobalSpecType_Ready{` +
		`Ready:` + fmt.Sprintf("%#v", this.Ready) + `}`}, ", ")
	return s
}
func (this *DNSVHostStatusType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&virtual_host.DNSVHostStatusType{")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "ExistingCertificateState: "+fmt.Sprintf("%#v", this.ExistingCertificateState)+",\n")
	s = append(s, "RenewCertificateState: "+fmt.Sprintf("%#v", this.RenewCertificateState)+",\n")
	s = append(s, "ErrorDescription: "+fmt.Sprintf("%#v", this.ErrorDescription)+",\n")
	s = append(s, "SuggestedAction: "+fmt.Sprintf("%#v", this.SuggestedAction)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 53)
	s = append(s, "&virtual_host.CreateSpecType{")
	s = append(s, "Domains: "+fmt.Sprintf("%#v", this.Domains)+",\n")
	if this.Routes != nil {
		s = append(s, "Routes: "+fmt.Sprintf("%#v", this.Routes)+",\n")
	}
	if this.AdvertisePolicies != nil {
		s = append(s, "AdvertisePolicies: "+fmt.Sprintf("%#v", this.AdvertisePolicies)+",\n")
	}
	if this.RequestHeadersToAdd != nil {
		s = append(s, "RequestHeadersToAdd: "+fmt.Sprintf("%#v", this.RequestHeadersToAdd)+",\n")
	}
	if this.ResponseHeadersToAdd != nil {
		s = append(s, "ResponseHeadersToAdd: "+fmt.Sprintf("%#v", this.ResponseHeadersToAdd)+",\n")
	}
	s = append(s, "RequestHeadersToRemove: "+fmt.Sprintf("%#v", this.RequestHeadersToRemove)+",\n")
	s = append(s, "ResponseHeadersToRemove: "+fmt.Sprintf("%#v", this.ResponseHeadersToRemove)+",\n")
	if this.TlsCertificatesChoice != nil {
		s = append(s, "TlsCertificatesChoice: "+fmt.Sprintf("%#v", this.TlsCertificatesChoice)+",\n")
	}
	if this.BufferPolicy != nil {
		s = append(s, "BufferPolicy: "+fmt.Sprintf("%#v", this.BufferPolicy)+",\n")
	}
	if this.CorsPolicy != nil {
		s = append(s, "CorsPolicy: "+fmt.Sprintf("%#v", this.CorsPolicy)+",\n")
	}
	s = append(s, "Proxy: "+fmt.Sprintf("%#v", this.Proxy)+",\n")
	if this.WafType != nil {
		s = append(s, "WafType: "+fmt.Sprintf("%#v", this.WafType)+",\n")
	}
	if this.DynamicReverseProxy != nil {
		s = append(s, "DynamicReverseProxy: "+fmt.Sprintf("%#v", this.DynamicReverseProxy)+",\n")
	}
	s = append(s, "AddLocation: "+fmt.Sprintf("%#v", this.AddLocation)+",\n")
	if this.CompressionParams != nil {
		s = append(s, "CompressionParams: "+fmt.Sprintf("%#v", this.CompressionParams)+",\n")
	}
	keysForCustomErrors := make([]uint32, 0, len(this.CustomErrors))
	for k, _ := range this.CustomErrors {
		keysForCustomErrors = append(keysForCustomErrors, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForCustomErrors)
	mapStringForCustomErrors := "map[uint32]string{"
	for _, k := range keysForCustomErrors {
		mapStringForCustomErrors += fmt.Sprintf("%#v: %#v,", k, this.CustomErrors[k])
	}
	mapStringForCustomErrors += "}"
	if this.CustomErrors != nil {
		s = append(s, "CustomErrors: "+mapStringForCustomErrors+",\n")
	}
	s = append(s, "DisableDefaultErrorPages: "+fmt.Sprintf("%#v", this.DisableDefaultErrorPages)+",\n")
	s = append(s, "MaxRequestHeaderSize: "+fmt.Sprintf("%#v", this.MaxRequestHeaderSize)+",\n")
	if this.ChallengeType != nil {
		s = append(s, "ChallengeType: "+fmt.Sprintf("%#v", this.ChallengeType)+",\n")
	}
	if this.UserIdentification != nil {
		s = append(s, "UserIdentification: "+fmt.Sprintf("%#v", this.UserIdentification)+",\n")
	}
	if this.RateLimiter != nil {
		s = append(s, "RateLimiter: "+fmt.Sprintf("%#v", this.RateLimiter)+",\n")
	}
	if this.RateLimiterAllowedPrefixes != nil {
		s = append(s, "RateLimiterAllowedPrefixes: "+fmt.Sprintf("%#v", this.RateLimiterAllowedPrefixes)+",\n")
	}
	if this.RetryPolicy != nil {
		s = append(s, "RetryPolicy: "+fmt.Sprintf("%#v", this.RetryPolicy)+",\n")
	}
	s = append(s, "IdleTimeout: "+fmt.Sprintf("%#v", this.IdleTimeout)+",\n")
	s = append(s, "DisableDnsResolve: "+fmt.Sprintf("%#v", this.DisableDnsResolve)+",\n")
	if this.TemporaryUserBlocking != nil {
		s = append(s, "TemporaryUserBlocking: "+fmt.Sprintf("%#v", this.TemporaryUserBlocking)+",\n")
	}
	if this.AuthenticationChoice != nil {
		s = append(s, "AuthenticationChoice: "+fmt.Sprintf("%#v", this.AuthenticationChoice)+",\n")
	}
	if this.ServerHeaderChoice != nil {
		s = append(s, "ServerHeaderChoice: "+fmt.Sprintf("%#v", this.ServerHeaderChoice)+",\n")
	}
	if this.PathNormalizeChoice != nil {
		s = append(s, "PathNormalizeChoice: "+fmt.Sprintf("%#v", this.PathNormalizeChoice)+",\n")
	}
	if this.StrictSniHostHeaderCheckChoice != nil {
		s = append(s, "StrictSniHostHeaderCheckChoice: "+fmt.Sprintf("%#v", this.StrictSniHostHeaderCheckChoice)+",\n")
	}
	if this.DefaultLbChoice != nil {
		s = append(s, "DefaultLbChoice: "+fmt.Sprintf("%#v", this.DefaultLbChoice)+",\n")
	}
	if this.HeaderTransformationType != nil {
		s = append(s, "HeaderTransformationType: "+fmt.Sprintf("%#v", this.HeaderTransformationType)+",\n")
	}
	if this.CsrfPolicy != nil {
		s = append(s, "CsrfPolicy: "+fmt.Sprintf("%#v", this.CsrfPolicy)+",\n")
	}
	if this.CookiesToModify != nil {
		s = append(s, "CookiesToModify: "+fmt.Sprintf("%#v", this.CookiesToModify)+",\n")
	}
	s = append(s, "ConnectionIdleTimeout: "+fmt.Sprintf("%#v", this.ConnectionIdleTimeout)+",\n")
	if this.DnsProxyConfiguration != nil {
		s = append(s, "DnsProxyConfiguration: "+fmt.Sprintf("%#v", this.DnsProxyConfiguration)+",\n")
	}
	if this.SlowDdosMitigation != nil {
		s = append(s, "SlowDdosMitigation: "+fmt.Sprintf("%#v", this.SlowDdosMitigation)+",\n")
	}
	if this.ApiSpec != nil {
		s = append(s, "ApiSpec: "+fmt.Sprintf("%#v", this.ApiSpec)+",\n")
	}
	keysForDomainCertMap := make([]string, 0, len(this.DomainCertMap))
	for k, _ := range this.DomainCertMap {
		keysForDomainCertMap = append(keysForDomainCertMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForDomainCertMap)
	mapStringForDomainCertMap := "map[string]*DomainCertificates{"
	for _, k := range keysForDomainCertMap {
		mapStringForDomainCertMap += fmt.Sprintf("%#v: %#v,", k, this.DomainCertMap[k])
	}
	mapStringForDomainCertMap += "}"
	if this.DomainCertMap != nil {
		s = append(s, "DomainCertMap: "+mapStringForDomainCertMap+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType_TlsParameters) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.CreateSpecType_TlsParameters{` +
		`TlsParameters:` + fmt.Sprintf("%#v", this.TlsParameters) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_TlsCertParams) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.CreateSpecType_TlsCertParams{` +
		`TlsCertParams:` + fmt.Sprintf("%#v", this.TlsCertParams) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_NoChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.CreateSpecType_NoChallenge{` +
		`NoChallenge:` + fmt.Sprintf("%#v", this.NoChallenge) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_JsChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.CreateSpecType_JsChallenge{` +
		`JsChallenge:` + fmt.Sprintf("%#v", this.JsChallenge) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_CaptchaChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.CreateSpecType_CaptchaChallenge{` +
		`CaptchaChallenge:` + fmt.Sprintf("%#v", this.CaptchaChallenge) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_NoAuthentication) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.CreateSpecType_NoAuthentication{` +
		`NoAuthentication:` + fmt.Sprintf("%#v", this.NoAuthentication) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_Authentication) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.CreateSpecType_Authentication{` +
		`Authentication:` + fmt.Sprintf("%#v", this.Authentication) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DefaultHeader) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.CreateSpecType_DefaultHeader{` +
		`DefaultHeader:` + fmt.Sprintf("%#v", this.DefaultHeader) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_ServerName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.CreateSpecType_ServerName{` +
		`ServerName:` + fmt.Sprintf("%#v", this.ServerName) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_AppendServerName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.CreateSpecType_AppendServerName{` +
		`AppendServerName:` + fmt.Sprintf("%#v", this.AppendServerName) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_PassThrough) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.CreateSpecType_PassThrough{` +
		`PassThrough:` + fmt.Sprintf("%#v", this.PassThrough) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_EnablePathNormalize) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.CreateSpecType_EnablePathNormalize{` +
		`EnablePathNormalize:` + fmt.Sprintf("%#v", this.EnablePathNormalize) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DisablePathNormalize) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.CreateSpecType_DisablePathNormalize{` +
		`DisablePathNormalize:` + fmt.Sprintf("%#v", this.DisablePathNormalize) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_EnableStrictSniHostHeaderCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.CreateSpecType_EnableStrictSniHostHeaderCheck{` +
		`EnableStrictSniHostHeaderCheck:` + fmt.Sprintf("%#v", this.EnableStrictSniHostHeaderCheck) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_AdditionalDomains) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.CreateSpecType_AdditionalDomains{` +
		`AdditionalDomains:` + fmt.Sprintf("%#v", this.AdditionalDomains) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_NonDefaultLoadbalancer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.CreateSpecType_NonDefaultLoadbalancer{` +
		`NonDefaultLoadbalancer:` + fmt.Sprintf("%#v", this.NonDefaultLoadbalancer) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DefaultLoadbalancer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.CreateSpecType_DefaultLoadbalancer{` +
		`DefaultLoadbalancer:` + fmt.Sprintf("%#v", this.DefaultLoadbalancer) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 53)
	s = append(s, "&virtual_host.ReplaceSpecType{")
	s = append(s, "Domains: "+fmt.Sprintf("%#v", this.Domains)+",\n")
	if this.Routes != nil {
		s = append(s, "Routes: "+fmt.Sprintf("%#v", this.Routes)+",\n")
	}
	if this.AdvertisePolicies != nil {
		s = append(s, "AdvertisePolicies: "+fmt.Sprintf("%#v", this.AdvertisePolicies)+",\n")
	}
	if this.RequestHeadersToAdd != nil {
		s = append(s, "RequestHeadersToAdd: "+fmt.Sprintf("%#v", this.RequestHeadersToAdd)+",\n")
	}
	if this.ResponseHeadersToAdd != nil {
		s = append(s, "ResponseHeadersToAdd: "+fmt.Sprintf("%#v", this.ResponseHeadersToAdd)+",\n")
	}
	s = append(s, "RequestHeadersToRemove: "+fmt.Sprintf("%#v", this.RequestHeadersToRemove)+",\n")
	s = append(s, "ResponseHeadersToRemove: "+fmt.Sprintf("%#v", this.ResponseHeadersToRemove)+",\n")
	if this.TlsCertificatesChoice != nil {
		s = append(s, "TlsCertificatesChoice: "+fmt.Sprintf("%#v", this.TlsCertificatesChoice)+",\n")
	}
	if this.BufferPolicy != nil {
		s = append(s, "BufferPolicy: "+fmt.Sprintf("%#v", this.BufferPolicy)+",\n")
	}
	if this.CorsPolicy != nil {
		s = append(s, "CorsPolicy: "+fmt.Sprintf("%#v", this.CorsPolicy)+",\n")
	}
	s = append(s, "Proxy: "+fmt.Sprintf("%#v", this.Proxy)+",\n")
	if this.WafType != nil {
		s = append(s, "WafType: "+fmt.Sprintf("%#v", this.WafType)+",\n")
	}
	if this.DynamicReverseProxy != nil {
		s = append(s, "DynamicReverseProxy: "+fmt.Sprintf("%#v", this.DynamicReverseProxy)+",\n")
	}
	s = append(s, "AddLocation: "+fmt.Sprintf("%#v", this.AddLocation)+",\n")
	if this.CompressionParams != nil {
		s = append(s, "CompressionParams: "+fmt.Sprintf("%#v", this.CompressionParams)+",\n")
	}
	keysForCustomErrors := make([]uint32, 0, len(this.CustomErrors))
	for k, _ := range this.CustomErrors {
		keysForCustomErrors = append(keysForCustomErrors, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForCustomErrors)
	mapStringForCustomErrors := "map[uint32]string{"
	for _, k := range keysForCustomErrors {
		mapStringForCustomErrors += fmt.Sprintf("%#v: %#v,", k, this.CustomErrors[k])
	}
	mapStringForCustomErrors += "}"
	if this.CustomErrors != nil {
		s = append(s, "CustomErrors: "+mapStringForCustomErrors+",\n")
	}
	s = append(s, "DisableDefaultErrorPages: "+fmt.Sprintf("%#v", this.DisableDefaultErrorPages)+",\n")
	s = append(s, "MaxRequestHeaderSize: "+fmt.Sprintf("%#v", this.MaxRequestHeaderSize)+",\n")
	if this.ChallengeType != nil {
		s = append(s, "ChallengeType: "+fmt.Sprintf("%#v", this.ChallengeType)+",\n")
	}
	if this.UserIdentification != nil {
		s = append(s, "UserIdentification: "+fmt.Sprintf("%#v", this.UserIdentification)+",\n")
	}
	if this.RateLimiter != nil {
		s = append(s, "RateLimiter: "+fmt.Sprintf("%#v", this.RateLimiter)+",\n")
	}
	if this.RateLimiterAllowedPrefixes != nil {
		s = append(s, "RateLimiterAllowedPrefixes: "+fmt.Sprintf("%#v", this.RateLimiterAllowedPrefixes)+",\n")
	}
	if this.RetryPolicy != nil {
		s = append(s, "RetryPolicy: "+fmt.Sprintf("%#v", this.RetryPolicy)+",\n")
	}
	s = append(s, "IdleTimeout: "+fmt.Sprintf("%#v", this.IdleTimeout)+",\n")
	s = append(s, "DisableDnsResolve: "+fmt.Sprintf("%#v", this.DisableDnsResolve)+",\n")
	if this.TemporaryUserBlocking != nil {
		s = append(s, "TemporaryUserBlocking: "+fmt.Sprintf("%#v", this.TemporaryUserBlocking)+",\n")
	}
	if this.AuthenticationChoice != nil {
		s = append(s, "AuthenticationChoice: "+fmt.Sprintf("%#v", this.AuthenticationChoice)+",\n")
	}
	if this.ServerHeaderChoice != nil {
		s = append(s, "ServerHeaderChoice: "+fmt.Sprintf("%#v", this.ServerHeaderChoice)+",\n")
	}
	if this.PathNormalizeChoice != nil {
		s = append(s, "PathNormalizeChoice: "+fmt.Sprintf("%#v", this.PathNormalizeChoice)+",\n")
	}
	if this.StrictSniHostHeaderCheckChoice != nil {
		s = append(s, "StrictSniHostHeaderCheckChoice: "+fmt.Sprintf("%#v", this.StrictSniHostHeaderCheckChoice)+",\n")
	}
	if this.DefaultLbChoice != nil {
		s = append(s, "DefaultLbChoice: "+fmt.Sprintf("%#v", this.DefaultLbChoice)+",\n")
	}
	if this.HeaderTransformationType != nil {
		s = append(s, "HeaderTransformationType: "+fmt.Sprintf("%#v", this.HeaderTransformationType)+",\n")
	}
	if this.CsrfPolicy != nil {
		s = append(s, "CsrfPolicy: "+fmt.Sprintf("%#v", this.CsrfPolicy)+",\n")
	}
	if this.CookiesToModify != nil {
		s = append(s, "CookiesToModify: "+fmt.Sprintf("%#v", this.CookiesToModify)+",\n")
	}
	s = append(s, "ConnectionIdleTimeout: "+fmt.Sprintf("%#v", this.ConnectionIdleTimeout)+",\n")
	if this.DnsProxyConfiguration != nil {
		s = append(s, "DnsProxyConfiguration: "+fmt.Sprintf("%#v", this.DnsProxyConfiguration)+",\n")
	}
	if this.SlowDdosMitigation != nil {
		s = append(s, "SlowDdosMitigation: "+fmt.Sprintf("%#v", this.SlowDdosMitigation)+",\n")
	}
	if this.ApiSpec != nil {
		s = append(s, "ApiSpec: "+fmt.Sprintf("%#v", this.ApiSpec)+",\n")
	}
	keysForDomainCertMap := make([]string, 0, len(this.DomainCertMap))
	for k, _ := range this.DomainCertMap {
		keysForDomainCertMap = append(keysForDomainCertMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForDomainCertMap)
	mapStringForDomainCertMap := "map[string]*DomainCertificates{"
	for _, k := range keysForDomainCertMap {
		mapStringForDomainCertMap += fmt.Sprintf("%#v: %#v,", k, this.DomainCertMap[k])
	}
	mapStringForDomainCertMap += "}"
	if this.DomainCertMap != nil {
		s = append(s, "DomainCertMap: "+mapStringForDomainCertMap+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType_TlsParameters) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.ReplaceSpecType_TlsParameters{` +
		`TlsParameters:` + fmt.Sprintf("%#v", this.TlsParameters) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_TlsCertParams) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.ReplaceSpecType_TlsCertParams{` +
		`TlsCertParams:` + fmt.Sprintf("%#v", this.TlsCertParams) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_NoChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.ReplaceSpecType_NoChallenge{` +
		`NoChallenge:` + fmt.Sprintf("%#v", this.NoChallenge) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_JsChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.ReplaceSpecType_JsChallenge{` +
		`JsChallenge:` + fmt.Sprintf("%#v", this.JsChallenge) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_CaptchaChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.ReplaceSpecType_CaptchaChallenge{` +
		`CaptchaChallenge:` + fmt.Sprintf("%#v", this.CaptchaChallenge) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_NoAuthentication) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.ReplaceSpecType_NoAuthentication{` +
		`NoAuthentication:` + fmt.Sprintf("%#v", this.NoAuthentication) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_Authentication) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.ReplaceSpecType_Authentication{` +
		`Authentication:` + fmt.Sprintf("%#v", this.Authentication) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DefaultHeader) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.ReplaceSpecType_DefaultHeader{` +
		`DefaultHeader:` + fmt.Sprintf("%#v", this.DefaultHeader) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_ServerName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.ReplaceSpecType_ServerName{` +
		`ServerName:` + fmt.Sprintf("%#v", this.ServerName) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_AppendServerName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.ReplaceSpecType_AppendServerName{` +
		`AppendServerName:` + fmt.Sprintf("%#v", this.AppendServerName) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_PassThrough) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.ReplaceSpecType_PassThrough{` +
		`PassThrough:` + fmt.Sprintf("%#v", this.PassThrough) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_EnablePathNormalize) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.ReplaceSpecType_EnablePathNormalize{` +
		`EnablePathNormalize:` + fmt.Sprintf("%#v", this.EnablePathNormalize) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DisablePathNormalize) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.ReplaceSpecType_DisablePathNormalize{` +
		`DisablePathNormalize:` + fmt.Sprintf("%#v", this.DisablePathNormalize) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_EnableStrictSniHostHeaderCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.ReplaceSpecType_EnableStrictSniHostHeaderCheck{` +
		`EnableStrictSniHostHeaderCheck:` + fmt.Sprintf("%#v", this.EnableStrictSniHostHeaderCheck) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_AdditionalDomains) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.ReplaceSpecType_AdditionalDomains{` +
		`AdditionalDomains:` + fmt.Sprintf("%#v", this.AdditionalDomains) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_NonDefaultLoadbalancer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.ReplaceSpecType_NonDefaultLoadbalancer{` +
		`NonDefaultLoadbalancer:` + fmt.Sprintf("%#v", this.NonDefaultLoadbalancer) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DefaultLoadbalancer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.ReplaceSpecType_DefaultLoadbalancer{` +
		`DefaultLoadbalancer:` + fmt.Sprintf("%#v", this.DefaultLoadbalancer) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 62)
	s = append(s, "&virtual_host.GetSpecType{")
	s = append(s, "Domains: "+fmt.Sprintf("%#v", this.Domains)+",\n")
	if this.Routes != nil {
		s = append(s, "Routes: "+fmt.Sprintf("%#v", this.Routes)+",\n")
	}
	if this.AdvertisePolicies != nil {
		s = append(s, "AdvertisePolicies: "+fmt.Sprintf("%#v", this.AdvertisePolicies)+",\n")
	}
	if this.RequestHeadersToAdd != nil {
		s = append(s, "RequestHeadersToAdd: "+fmt.Sprintf("%#v", this.RequestHeadersToAdd)+",\n")
	}
	if this.ResponseHeadersToAdd != nil {
		s = append(s, "ResponseHeadersToAdd: "+fmt.Sprintf("%#v", this.ResponseHeadersToAdd)+",\n")
	}
	s = append(s, "RequestHeadersToRemove: "+fmt.Sprintf("%#v", this.RequestHeadersToRemove)+",\n")
	s = append(s, "ResponseHeadersToRemove: "+fmt.Sprintf("%#v", this.ResponseHeadersToRemove)+",\n")
	if this.TlsCertificatesChoice != nil {
		s = append(s, "TlsCertificatesChoice: "+fmt.Sprintf("%#v", this.TlsCertificatesChoice)+",\n")
	}
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	if this.BufferPolicy != nil {
		s = append(s, "BufferPolicy: "+fmt.Sprintf("%#v", this.BufferPolicy)+",\n")
	}
	if this.CorsPolicy != nil {
		s = append(s, "CorsPolicy: "+fmt.Sprintf("%#v", this.CorsPolicy)+",\n")
	}
	s = append(s, "Proxy: "+fmt.Sprintf("%#v", this.Proxy)+",\n")
	if this.WafType != nil {
		s = append(s, "WafType: "+fmt.Sprintf("%#v", this.WafType)+",\n")
	}
	if this.DynamicReverseProxy != nil {
		s = append(s, "DynamicReverseProxy: "+fmt.Sprintf("%#v", this.DynamicReverseProxy)+",\n")
	}
	s = append(s, "AddLocation: "+fmt.Sprintf("%#v", this.AddLocation)+",\n")
	if this.CompressionParams != nil {
		s = append(s, "CompressionParams: "+fmt.Sprintf("%#v", this.CompressionParams)+",\n")
	}
	keysForCustomErrors := make([]uint32, 0, len(this.CustomErrors))
	for k, _ := range this.CustomErrors {
		keysForCustomErrors = append(keysForCustomErrors, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForCustomErrors)
	mapStringForCustomErrors := "map[uint32]string{"
	for _, k := range keysForCustomErrors {
		mapStringForCustomErrors += fmt.Sprintf("%#v: %#v,", k, this.CustomErrors[k])
	}
	mapStringForCustomErrors += "}"
	if this.CustomErrors != nil {
		s = append(s, "CustomErrors: "+mapStringForCustomErrors+",\n")
	}
	s = append(s, "DisableDefaultErrorPages: "+fmt.Sprintf("%#v", this.DisableDefaultErrorPages)+",\n")
	s = append(s, "MaxRequestHeaderSize: "+fmt.Sprintf("%#v", this.MaxRequestHeaderSize)+",\n")
	if this.ChallengeType != nil {
		s = append(s, "ChallengeType: "+fmt.Sprintf("%#v", this.ChallengeType)+",\n")
	}
	if this.UserIdentification != nil {
		s = append(s, "UserIdentification: "+fmt.Sprintf("%#v", this.UserIdentification)+",\n")
	}
	if this.RateLimiter != nil {
		s = append(s, "RateLimiter: "+fmt.Sprintf("%#v", this.RateLimiter)+",\n")
	}
	if this.RateLimiterAllowedPrefixes != nil {
		s = append(s, "RateLimiterAllowedPrefixes: "+fmt.Sprintf("%#v", this.RateLimiterAllowedPrefixes)+",\n")
	}
	if this.RetryPolicy != nil {
		s = append(s, "RetryPolicy: "+fmt.Sprintf("%#v", this.RetryPolicy)+",\n")
	}
	s = append(s, "IdleTimeout: "+fmt.Sprintf("%#v", this.IdleTimeout)+",\n")
	if this.TemporaryUserBlocking != nil {
		s = append(s, "TemporaryUserBlocking: "+fmt.Sprintf("%#v", this.TemporaryUserBlocking)+",\n")
	}
	if this.AuthenticationChoice != nil {
		s = append(s, "AuthenticationChoice: "+fmt.Sprintf("%#v", this.AuthenticationChoice)+",\n")
	}
	if this.ServerHeaderChoice != nil {
		s = append(s, "ServerHeaderChoice: "+fmt.Sprintf("%#v", this.ServerHeaderChoice)+",\n")
	}
	if this.PathNormalizeChoice != nil {
		s = append(s, "PathNormalizeChoice: "+fmt.Sprintf("%#v", this.PathNormalizeChoice)+",\n")
	}
	if this.StrictSniHostHeaderCheckChoice != nil {
		s = append(s, "StrictSniHostHeaderCheckChoice: "+fmt.Sprintf("%#v", this.StrictSniHostHeaderCheckChoice)+",\n")
	}
	if this.DefaultLbChoice != nil {
		s = append(s, "DefaultLbChoice: "+fmt.Sprintf("%#v", this.DefaultLbChoice)+",\n")
	}
	if this.HeaderTransformationType != nil {
		s = append(s, "HeaderTransformationType: "+fmt.Sprintf("%#v", this.HeaderTransformationType)+",\n")
	}
	if this.CookiesToModify != nil {
		s = append(s, "CookiesToModify: "+fmt.Sprintf("%#v", this.CookiesToModify)+",\n")
	}
	s = append(s, "ConnectionIdleTimeout: "+fmt.Sprintf("%#v", this.ConnectionIdleTimeout)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "HostName: "+fmt.Sprintf("%#v", this.HostName)+",\n")
	if this.DnsInfo != nil {
		s = append(s, "DnsInfo: "+fmt.Sprintf("%#v", this.DnsInfo)+",\n")
	}
	if this.AutoCertInfo != nil {
		s = append(s, "AutoCertInfo: "+fmt.Sprintf("%#v", this.AutoCertInfo)+",\n")
	}
	s = append(s, "AutoCertErrorMsg: "+fmt.Sprintf("%#v", this.AutoCertErrorMsg)+",\n")
	s = append(s, "DisableDnsResolve: "+fmt.Sprintf("%#v", this.DisableDnsResolve)+",\n")
	if this.CdnService != nil {
		s = append(s, "CdnService: "+fmt.Sprintf("%#v", this.CdnService)+",\n")
	}
	if this.CsrfPolicy != nil {
		s = append(s, "CsrfPolicy: "+fmt.Sprintf("%#v", this.CsrfPolicy)+",\n")
	}
	if this.DnsProxyConfiguration != nil {
		s = append(s, "DnsProxyConfiguration: "+fmt.Sprintf("%#v", this.DnsProxyConfiguration)+",\n")
	}
	if this.DnsZoneStateChoice != nil {
		s = append(s, "DnsZoneStateChoice: "+fmt.Sprintf("%#v", this.DnsZoneStateChoice)+",\n")
	}
	if this.SlowDdosMitigation != nil {
		s = append(s, "SlowDdosMitigation: "+fmt.Sprintf("%#v", this.SlowDdosMitigation)+",\n")
	}
	if this.ApiSpec != nil {
		s = append(s, "ApiSpec: "+fmt.Sprintf("%#v", this.ApiSpec)+",\n")
	}
	keysForDomainCertMap := make([]string, 0, len(this.DomainCertMap))
	for k, _ := range this.DomainCertMap {
		keysForDomainCertMap = append(keysForDomainCertMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForDomainCertMap)
	mapStringForDomainCertMap := "map[string]*DomainCertificates{"
	for _, k := range keysForDomainCertMap {
		mapStringForDomainCertMap += fmt.Sprintf("%#v: %#v,", k, this.DomainCertMap[k])
	}
	mapStringForDomainCertMap += "}"
	if this.DomainCertMap != nil {
		s = append(s, "DomainCertMap: "+mapStringForDomainCertMap+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_TlsParameters) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.GetSpecType_TlsParameters{` +
		`TlsParameters:` + fmt.Sprintf("%#v", this.TlsParameters) + `}`}, ", ")
	return s
}
func (this *GetSpecType_TlsCertParams) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.GetSpecType_TlsCertParams{` +
		`TlsCertParams:` + fmt.Sprintf("%#v", this.TlsCertParams) + `}`}, ", ")
	return s
}
func (this *GetSpecType_NoChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.GetSpecType_NoChallenge{` +
		`NoChallenge:` + fmt.Sprintf("%#v", this.NoChallenge) + `}`}, ", ")
	return s
}
func (this *GetSpecType_JsChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.GetSpecType_JsChallenge{` +
		`JsChallenge:` + fmt.Sprintf("%#v", this.JsChallenge) + `}`}, ", ")
	return s
}
func (this *GetSpecType_CaptchaChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.GetSpecType_CaptchaChallenge{` +
		`CaptchaChallenge:` + fmt.Sprintf("%#v", this.CaptchaChallenge) + `}`}, ", ")
	return s
}
func (this *GetSpecType_NoAuthentication) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.GetSpecType_NoAuthentication{` +
		`NoAuthentication:` + fmt.Sprintf("%#v", this.NoAuthentication) + `}`}, ", ")
	return s
}
func (this *GetSpecType_Authentication) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.GetSpecType_Authentication{` +
		`Authentication:` + fmt.Sprintf("%#v", this.Authentication) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DefaultHeader) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.GetSpecType_DefaultHeader{` +
		`DefaultHeader:` + fmt.Sprintf("%#v", this.DefaultHeader) + `}`}, ", ")
	return s
}
func (this *GetSpecType_ServerName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.GetSpecType_ServerName{` +
		`ServerName:` + fmt.Sprintf("%#v", this.ServerName) + `}`}, ", ")
	return s
}
func (this *GetSpecType_AppendServerName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.GetSpecType_AppendServerName{` +
		`AppendServerName:` + fmt.Sprintf("%#v", this.AppendServerName) + `}`}, ", ")
	return s
}
func (this *GetSpecType_PassThrough) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.GetSpecType_PassThrough{` +
		`PassThrough:` + fmt.Sprintf("%#v", this.PassThrough) + `}`}, ", ")
	return s
}
func (this *GetSpecType_EnablePathNormalize) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.GetSpecType_EnablePathNormalize{` +
		`EnablePathNormalize:` + fmt.Sprintf("%#v", this.EnablePathNormalize) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DisablePathNormalize) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.GetSpecType_DisablePathNormalize{` +
		`DisablePathNormalize:` + fmt.Sprintf("%#v", this.DisablePathNormalize) + `}`}, ", ")
	return s
}
func (this *GetSpecType_EnableStrictSniHostHeaderCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.GetSpecType_EnableStrictSniHostHeaderCheck{` +
		`EnableStrictSniHostHeaderCheck:` + fmt.Sprintf("%#v", this.EnableStrictSniHostHeaderCheck) + `}`}, ", ")
	return s
}
func (this *GetSpecType_AdditionalDomains) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.GetSpecType_AdditionalDomains{` +
		`AdditionalDomains:` + fmt.Sprintf("%#v", this.AdditionalDomains) + `}`}, ", ")
	return s
}
func (this *GetSpecType_NonDefaultLoadbalancer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.GetSpecType_NonDefaultLoadbalancer{` +
		`NonDefaultLoadbalancer:` + fmt.Sprintf("%#v", this.NonDefaultLoadbalancer) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DefaultLoadbalancer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.GetSpecType_DefaultLoadbalancer{` +
		`DefaultLoadbalancer:` + fmt.Sprintf("%#v", this.DefaultLoadbalancer) + `}`}, ", ")
	return s
}
func (this *GetSpecType_NotReady) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.GetSpecType_NotReady{` +
		`NotReady:` + fmt.Sprintf("%#v", this.NotReady) + `}`}, ", ")
	return s
}
func (this *GetSpecType_Ready) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_host.GetSpecType_Ready{` +
		`Ready:` + fmt.Sprintf("%#v", this.Ready) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *VirtualHostID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VirtualHostID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VirtualHostID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VerStatusType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerStatusType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerStatusType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NonCoalescedVhosts) > 0 {
		for iNdEx := len(m.NonCoalescedVhosts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NonCoalescedVhosts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.CoalescedVhosts) > 0 {
		for iNdEx := len(m.CoalescedVhosts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CoalescedVhosts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.AdvertisePolicy != nil {
		{
			size, err := m.AdvertisePolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NonCoalescedVirtualHosts) > 0 {
		for iNdEx := len(m.NonCoalescedVirtualHosts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NonCoalescedVirtualHosts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.CoalescedVirtualHosts) > 0 {
		for iNdEx := len(m.CoalescedVirtualHosts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CoalescedVirtualHosts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *JavaScriptConfigType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JavaScriptConfigType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JavaScriptConfigType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CustomScriptUrl) > 0 {
		i -= len(m.CustomScriptUrl)
		copy(dAtA[i:], m.CustomScriptUrl)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CustomScriptUrl)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ScriptConfig != nil {
		{
			size, err := m.ScriptConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CachePrefix) > 0 {
		i -= len(m.CachePrefix)
		copy(dAtA[i:], m.CachePrefix)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CachePrefix)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DynamicReverseProxyType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DynamicReverseProxyType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DynamicReverseProxyType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ConnectionTimeout != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ConnectionTimeout))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ResolutionNetwork) > 0 {
		for iNdEx := len(m.ResolutionNetwork) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ResolutionNetwork[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.ResolutionNetworkType != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ResolutionNetworkType))
		i--
		dAtA[i] = 0x10
	}
	if m.ResolveEndpointDynamically {
		i--
		if m.ResolveEndpointDynamically {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CompressionType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompressionType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompressionType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RemoveAcceptEncodingHeader {
		i--
		if m.RemoveAcceptEncodingHeader {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.DisableOnEtagHeader {
		i--
		if m.DisableOnEtagHeader {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.ContentType) > 0 {
		for iNdEx := len(m.ContentType) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ContentType[iNdEx])
			copy(dAtA[i:], m.ContentType[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.ContentType[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ContentLength != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ContentLength))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *JavascriptChallengeType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JavascriptChallengeType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JavascriptChallengeType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CustomPage) > 0 {
		i -= len(m.CustomPage)
		copy(dAtA[i:], m.CustomPage)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CustomPage)))
		i--
		dAtA[i] = 0x22
	}
	if m.CookieExpiry != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.CookieExpiry))
		i--
		dAtA[i] = 0x18
	}
	if m.JsScriptDelay != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.JsScriptDelay))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *CaptchaChallengeType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CaptchaChallengeType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CaptchaChallengeType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CustomPage) > 0 {
		i -= len(m.CustomPage)
		copy(dAtA[i:], m.CustomPage)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CustomPage)))
		i--
		dAtA[i] = 0x1a
	}
	if m.CookieExpiry != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.CookieExpiry))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TemporaryUserBlockingType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TemporaryUserBlockingType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TemporaryUserBlockingType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CustomPage) > 0 {
		i -= len(m.CustomPage)
		copy(dAtA[i:], m.CustomPage)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CustomPage)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DNSRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DNSRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DNSRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AutoCertInfoType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoCertInfoType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AutoCertInfoType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StateStartTime != nil {
		{
			size, err := m.StateStartTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.DnsRecords) > 0 {
		for iNdEx := len(m.DnsRecords) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DnsRecords[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.AutoCertIssuer) > 0 {
		i -= len(m.AutoCertIssuer)
		copy(dAtA[i:], m.AutoCertIssuer)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AutoCertIssuer)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AutoCertSubject) > 0 {
		i -= len(m.AutoCertSubject)
		copy(dAtA[i:], m.AutoCertSubject)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AutoCertSubject)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AutoCertExpiry != nil {
		{
			size, err := m.AutoCertExpiry.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.AutoCertState != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.AutoCertState))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AuthenticationDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthenticationDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthenticationDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RedirectUrlChoice != nil {
		{
			size := m.RedirectUrlChoice.Size()
			i -= size
			if _, err := m.RedirectUrlChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.CookieParamsChoice != nil {
		{
			size := m.CookieParamsChoice.Size()
			i -= size
			if _, err := m.CookieParamsChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.AuthConfig) > 0 {
		for iNdEx := len(m.AuthConfig) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AuthConfig[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AuthenticationDetails_UseAuthObjectConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthenticationDetails_UseAuthObjectConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UseAuthObjectConfig != nil {
		{
			size, err := m.UseAuthObjectConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *AuthenticationDetails_CookieParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthenticationDetails_CookieParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CookieParams != nil {
		{
			size, err := m.CookieParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *AuthenticationDetails_RedirectUrl) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthenticationDetails_RedirectUrl) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.RedirectUrl)
	copy(dAtA[i:], m.RedirectUrl)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.RedirectUrl)))
	i--
	dAtA[i] = 0x32
	return len(dAtA) - i, nil
}
func (m *AuthenticationDetails_RedirectDynamic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthenticationDetails_RedirectDynamic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RedirectDynamic != nil {
		{
			size, err := m.RedirectDynamic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *PolicyBasedChallenge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PolicyBasedChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyBasedChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MaliciousUserMitigation) > 0 {
		for iNdEx := len(m.MaliciousUserMitigation) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MaliciousUserMitigation[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.ChallengeChoice != nil {
		{
			size := m.ChallengeChoice.Size()
			i -= size
			if _, err := m.ChallengeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.TemporaryUserBlocking != nil {
		{
			size, err := m.TemporaryUserBlocking.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.CaptchaChallenge != nil {
		{
			size, err := m.CaptchaChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.JsChallenge != nil {
		{
			size, err := m.JsChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PolicyBasedChallenge_NoChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyBasedChallenge_NoChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoChallenge != nil {
		{
			size, err := m.NoChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *PolicyBasedChallenge_AlwaysEnableJsChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyBasedChallenge_AlwaysEnableJsChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AlwaysEnableJsChallenge != nil {
		{
			size, err := m.AlwaysEnableJsChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *PolicyBasedChallenge_AlwaysEnableCaptchaChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyBasedChallenge_AlwaysEnableCaptchaChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AlwaysEnableCaptchaChallenge != nil {
		{
			size, err := m.AlwaysEnableCaptchaChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *ShapeBotDefenseConfigType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShapeBotDefenseConfigType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShapeBotDefenseConfigType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Mode != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Mode))
		i--
		dAtA[i] = 0x40
	}
	if len(m.JsPath) > 0 {
		i -= len(m.JsPath)
		copy(dAtA[i:], m.JsPath)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.JsPath)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ReloadHeaderName) > 0 {
		i -= len(m.ReloadHeaderName)
		copy(dAtA[i:], m.ReloadHeaderName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ReloadHeaderName)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.BlockingPages) > 0 {
		keysForBlockingPages := make([]string, 0, len(m.BlockingPages))
		for k := range m.BlockingPages {
			keysForBlockingPages = append(keysForBlockingPages, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForBlockingPages)
		for iNdEx := len(keysForBlockingPages) - 1; iNdEx >= 0; iNdEx-- {
			v := m.BlockingPages[string(keysForBlockingPages[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTypes(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForBlockingPages[iNdEx])
			copy(dAtA[i:], keysForBlockingPages[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(keysForBlockingPages[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Timeout != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Timeout))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Instance) > 0 {
		for iNdEx := len(m.Instance) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Instance[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.ApiAuthKey != nil {
		{
			size, err := m.ApiAuthKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ApplicationId) > 0 {
		i -= len(m.ApplicationId)
		copy(dAtA[i:], m.ApplicationId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ApplicationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ServiceDomain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceDomain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceDomain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InternalServiceDomain) > 0 {
		i -= len(m.InternalServiceDomain)
		copy(dAtA[i:], m.InternalServiceDomain)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.InternalServiceDomain)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ServiceDomain) > 0 {
		i -= len(m.ServiceDomain)
		copy(dAtA[i:], m.ServiceDomain)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ServiceDomain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CdnServiceType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CdnServiceType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CdnServiceType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ServiceDomains) > 0 {
		for iNdEx := len(m.ServiceDomains) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ServiceDomains[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.CacheTtl != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.CacheTtl))
		i--
		dAtA[i] = 0x20
	}
	if m.ContentChoice != nil {
		{
			size := m.ContentChoice.Size()
			i -= size
			if _, err := m.ContentChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *CdnServiceType_DownloadDelivery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CdnServiceType_DownloadDelivery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DownloadDelivery != nil {
		{
			size, err := m.DownloadDelivery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *CdnServiceType_LiveStreaming) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CdnServiceType_LiveStreaming) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LiveStreaming != nil {
		{
			size, err := m.LiveStreaming.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ClientIPHeaders) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientIPHeaders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientIPHeaders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClientIpHeaders) > 0 {
		for iNdEx := len(m.ClientIpHeaders) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ClientIpHeaders[iNdEx])
			copy(dAtA[i:], m.ClientIpHeaders[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.ClientIpHeaders[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DNSProxyConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DNSProxyConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DNSProxyConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Irules) > 0 {
		for iNdEx := len(m.Irules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Irules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if m.ProtocolInspection != nil {
		{
			size, err := m.ProtocolInspection.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.CacheProfile != nil {
		{
			size, err := m.CacheProfile.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.DdosProfile != nil {
		{
			size, err := m.DdosProfile.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}

func (m *DNSDDoSProfile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DNSDDoSProfile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DNSDDoSProfile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DdosMitigationChoice != nil {
		{
			size := m.DdosMitigationChoice.Size()
			i -= size
			if _, err := m.DdosMitigationChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *DNSDDoSProfile_EnableDdosMitigation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DNSDDoSProfile_EnableDdosMitigation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableDdosMitigation != nil {
		{
			size, err := m.EnableDdosMitigation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *DNSDDoSProfile_DisableDdosMitigation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DNSDDoSProfile_DisableDdosMitigation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableDdosMitigation != nil {
		{
			size, err := m.DisableDdosMitigation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *DNSCacheProfile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DNSCacheProfile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DNSCacheProfile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CacheProfileChoice != nil {
		{
			size := m.CacheProfileChoice.Size()
			i -= size
			if _, err := m.CacheProfileChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *DNSCacheProfile_DisableCacheProfile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DNSCacheProfile_DisableCacheProfile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableCacheProfile != nil {
		{
			size, err := m.DisableCacheProfile.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *DNSCacheProfile_CacheSize) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DNSCacheProfile_CacheSize) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.CacheSize))
	i--
	dAtA[i] = 0x20
	return len(dAtA) - i, nil
}
func (m *SlowDDoSMitigation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlowDDoSMitigation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SlowDDoSMitigation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RequestTimeoutChoice != nil {
		{
			size := m.RequestTimeoutChoice.Size()
			i -= size
			if _, err := m.RequestTimeoutChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.RequestHeadersTimeout != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.RequestHeadersTimeout))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *SlowDDoSMitigation_RequestTimeout) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SlowDDoSMitigation_RequestTimeout) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.RequestTimeout))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}
func (m *SlowDDoSMitigation_DisableRequestTimeout) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SlowDDoSMitigation_DisableRequestTimeout) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableRequestTimeout != nil {
		{
			size, err := m.DisableRequestTimeout.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *DomainCertificates) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DomainCertificates) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DomainCertificates) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EcdsaCertificates) > 0 {
		for iNdEx := len(m.EcdsaCertificates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EcdsaCertificates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RsaCertificates) > 0 {
		for iNdEx := len(m.RsaCertificates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RsaCertificates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ApiSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApiSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApiSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OpenApiValidationChoice != nil {
		{
			size := m.OpenApiValidationChoice.Size()
			i -= size
			if _, err := m.OpenApiValidationChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ApiDefinition != nil {
		{
			size, err := m.ApiDefinition.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApiSpec_DisableOpenApiValidation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApiSpec_DisableOpenApiValidation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableOpenApiValidation != nil {
		{
			size, err := m.DisableOpenApiValidation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ApiSpec_EnableOpenApiValidation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApiSpec_EnableOpenApiValidation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableOpenApiValidation != nil {
		{
			size, err := m.EnableOpenApiValidation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *OpenApiValidationSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenApiValidationSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpenApiValidationSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AllowOnlySpecifiedHeaders {
		i--
		if m.AllowOnlySpecifiedHeaders {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.AllowOnlySpecifiedQueryParams {
		i--
		if m.AllowOnlySpecifiedQueryParams {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.FailOversizedBodyValidation {
		i--
		if m.FailOversizedBodyValidation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	return len(dAtA) - i, nil
}

func (m *HttpProtocolOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HttpProtocolOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HttpProtocolOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HttpProtocolChoice != nil {
		{
			size := m.HttpProtocolChoice.Size()
			i -= size
			if _, err := m.HttpProtocolChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *HttpProtocolOptions_HttpProtocolEnableV1Only) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HttpProtocolOptions_HttpProtocolEnableV1Only) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpProtocolEnableV1Only != nil {
		{
			size, err := m.HttpProtocolEnableV1Only.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *HttpProtocolOptions_HttpProtocolEnableV2Only) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HttpProtocolOptions_HttpProtocolEnableV2Only) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpProtocolEnableV2Only != nil {
		{
			size, err := m.HttpProtocolEnableV2Only.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *HttpProtocolOptions_HttpProtocolEnableV1V2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HttpProtocolOptions_HttpProtocolEnableV1V2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpProtocolEnableV1V2 != nil {
		{
			size, err := m.HttpProtocolEnableV1V2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *HttpRedirectOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HttpRedirectOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HttpRedirectOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DnsProxyConfiguration != nil {
		{
			size, err := m.DnsProxyConfiguration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4b
		i--
		dAtA[i] = 0x82
	}
	if m.HttpRedirectOptions != nil {
		{
			size, err := m.HttpRedirectOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x40
		i--
		dAtA[i] = 0x9a
	}
	if len(m.AutoCertErrorMsg) > 0 {
		i -= len(m.AutoCertErrorMsg)
		copy(dAtA[i:], m.AutoCertErrorMsg)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AutoCertErrorMsg)))
		i--
		dAtA[i] = 0x40
		i--
		dAtA[i] = 0x92
	}
	if m.CustomCertExpiry != nil {
		{
			size, err := m.CustomCertExpiry.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x40
		i--
		dAtA[i] = 0x8a
	}
	if m.DnsZoneStateChoice != nil {
		{
			size := m.DnsZoneStateChoice.Size()
			i -= size
			if _, err := m.DnsZoneStateChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.DnsZones) > 0 {
		for iNdEx := len(m.DnsZones) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DnsZones[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3f
			i--
			dAtA[i] = 0xea
		}
	}
	if len(m.L7Acl) > 0 {
		for iNdEx := len(m.L7Acl) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.L7Acl[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3f
			i--
			dAtA[i] = 0xe2
		}
	}
	if len(m.FastAcl) > 0 {
		for iNdEx := len(m.FastAcl) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FastAcl[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3f
			i--
			dAtA[i] = 0xda
		}
	}
	if m.CheckIpReputation {
		i--
		if m.CheckIpReputation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x3f
		i--
		dAtA[i] = 0xd0
	}
	if m.BotDefenseChoice != nil {
		{
			size := m.BotDefenseChoice.Size()
			i -= size
			if _, err := m.BotDefenseChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.VolterraCert {
		i--
		if m.VolterraCert {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x3f
		i--
		dAtA[i] = 0xb0
	}
	if m.LoadbalancerAlgorithm != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.LoadbalancerAlgorithm))
		i--
		dAtA[i] = 0x3f
		i--
		dAtA[i] = 0xa8
	}
	if len(m.ServicePolicySets) > 0 {
		for iNdEx := len(m.ServicePolicySets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ServicePolicySets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3f
			i--
			dAtA[i] = 0xa2
		}
	}
	if len(m.UserDomains) > 0 {
		for iNdEx := len(m.UserDomains) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.UserDomains[iNdEx])
			copy(dAtA[i:], m.UserDomains[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.UserDomains[iNdEx])))
			i--
			dAtA[i] = 0x3f
			i--
			dAtA[i] = 0x9a
		}
	}
	if m.AutoCertInfo != nil {
		{
			size, err := m.AutoCertInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3f
		i--
		dAtA[i] = 0x92
	}
	if m.AutoCertState != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.AutoCertState))
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xf0
	}
	if len(m.DnsInfo) > 0 {
		for iNdEx := len(m.DnsInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DnsInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3e
			i--
			dAtA[i] = 0xea
		}
	}
	if len(m.HostName) > 0 {
		i -= len(m.HostName)
		copy(dAtA[i:], m.HostName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.HostName)))
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xe2
	}
	if m.State != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xd8
	}
	if m.AutoCert {
		i--
		if m.AutoCert {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xd0
	}
	if len(m.DnsDomains) > 0 {
		for iNdEx := len(m.DnsDomains) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DnsDomains[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3e
			i--
			dAtA[i] = 0xca
		}
	}
	if m.DnsVolterraManaged {
		i--
		if m.DnsVolterraManaged {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xc0
	}
	if m.DdosAutoMitigationAction != nil {
		{
			size := m.DdosAutoMitigationAction.Size()
			i -= size
			if _, err := m.DdosAutoMitigationAction.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.HttpProtocolOptions != nil {
		{
			size, err := m.HttpProtocolOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xca
	}
	if len(m.DomainCertMap) > 0 {
		keysForDomainCertMap := make([]string, 0, len(m.DomainCertMap))
		for k := range m.DomainCertMap {
			keysForDomainCertMap = append(keysForDomainCertMap, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForDomainCertMap)
		for iNdEx := len(keysForDomainCertMap) - 1; iNdEx >= 0; iNdEx-- {
			v := m.DomainCertMap[string(keysForDomainCertMap[iNdEx])]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintTypes(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(keysForDomainCertMap[iNdEx])
			copy(dAtA[i:], keysForDomainCertMap[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(keysForDomainCertMap[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x5
			i--
			dAtA[i] = 0xc2
		}
	}
	if m.TlsCertificatesChoice != nil {
		{
			size := m.TlsCertificatesChoice.Size()
			i -= size
			if _, err := m.TlsCertificatesChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ApiSpec != nil {
		{
			size, err := m.ApiSpec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xa2
	}
	if m.SlowDdosMitigation != nil {
		{
			size, err := m.SlowDdosMitigation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x9a
	}
	if m.ConnectionIdleTimeout != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ConnectionIdleTimeout))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x90
	}
	if len(m.CookiesToModify) > 0 {
		for iNdEx := len(m.CookiesToModify) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CookiesToModify[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5
			i--
			dAtA[i] = 0x8a
		}
	}
	if m.CsrfPolicy != nil {
		{
			size, err := m.CsrfPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x82
	}
	if m.HeaderTransformationType != nil {
		{
			size, err := m.HeaderTransformationType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xfa
	}
	if m.DefaultLbChoice != nil {
		{
			size := m.DefaultLbChoice.Size()
			i -= size
			if _, err := m.DefaultLbChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.TrustClientIpHeadersChoice != nil {
		{
			size := m.TrustClientIpHeadersChoice.Size()
			i -= size
			if _, err := m.TrustClientIpHeadersChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.CdnService != nil {
		{
			size, err := m.CdnService.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb2
	}
	if m.StrictSniHostHeaderCheckChoice != nil {
		{
			size := m.StrictSniHostHeaderCheckChoice.Size()
			i -= size
			if _, err := m.StrictSniHostHeaderCheckChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.PathNormalizeChoice != nil {
		{
			size := m.PathNormalizeChoice.Size()
			i -= size
			if _, err := m.PathNormalizeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ServerHeaderChoice != nil {
		{
			size := m.ServerHeaderChoice.Size()
			i -= size
			if _, err := m.ServerHeaderChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ChallengeType != nil {
		{
			size := m.ChallengeType.Size()
			i -= size
			if _, err := m.ChallengeType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.AuthenticationChoice != nil {
		{
			size := m.AuthenticationChoice.Size()
			i -= size
			if _, err := m.AuthenticationChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.TlsIntercept != nil {
		{
			size, err := m.TlsIntercept.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xaa
	}
	if len(m.MaliciousUserMitigation) > 0 {
		for iNdEx := len(m.MaliciousUserMitigation) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MaliciousUserMitigation[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xa2
		}
	}
	if m.TemporaryUserBlocking != nil {
		{
			size, err := m.TemporaryUserBlocking.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x9a
	}
	if m.DisableDnsResolve {
		i--
		if m.DisableDnsResolve {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x90
	}
	if m.DisableDefaultErrorPages {
		i--
		if m.DisableDefaultErrorPages {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x88
	}
	if m.IdleTimeout != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.IdleTimeout))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x80
	}
	if m.RetryPolicy != nil {
		{
			size, err := m.RetryPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	if len(m.RateLimiterAllowedPrefixes) > 0 {
		for iNdEx := len(m.RateLimiterAllowedPrefixes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RateLimiterAllowedPrefixes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xda
		}
	}
	if len(m.RateLimiter) > 0 {
		for iNdEx := len(m.RateLimiter) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RateLimiter[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xd2
		}
	}
	if len(m.UserIdentification) > 0 {
		for iNdEx := len(m.UserIdentification) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserIdentification[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xca
		}
	}
	if m.MaxRequestHeaderSize != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MaxRequestHeaderSize))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if len(m.CustomErrors) > 0 {
		keysForCustomErrors := make([]uint32, 0, len(m.CustomErrors))
		for k := range m.CustomErrors {
			keysForCustomErrors = append(keysForCustomErrors, uint32(k))
		}
		github_com_gogo_protobuf_sortkeys.Uint32s(keysForCustomErrors)
		for iNdEx := len(keysForCustomErrors) - 1; iNdEx >= 0; iNdEx-- {
			v := m.CustomErrors[uint32(keysForCustomErrors[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTypes(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i = encodeVarintTypes(dAtA, i, uint64(keysForCustomErrors[iNdEx]))
			i--
			dAtA[i] = 0x8
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xb2
		}
	}
	if m.CompressionParams != nil {
		{
			size, err := m.CompressionParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.AddLocation {
		i--
		if m.AddLocation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.DynamicReverseProxy != nil {
		{
			size, err := m.DynamicReverseProxy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.WafType != nil {
		{
			size, err := m.WafType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.RequestHeadersToRemove) > 0 {
		for iNdEx := len(m.RequestHeadersToRemove) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RequestHeadersToRemove[iNdEx])
			copy(dAtA[i:], m.RequestHeadersToRemove[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.RequestHeadersToRemove[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
	}
	if len(m.Jwt) > 0 {
		for iNdEx := len(m.Jwt) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Jwt[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	if m.Proxy != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Proxy))
		i--
		dAtA[i] = 0x78
	}
	if m.CorsPolicy != nil {
		{
			size, err := m.CorsPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.BufferPolicy != nil {
		{
			size, err := m.BufferPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.Type != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x50
	}
	if len(m.ResponseHeadersToRemove) > 0 {
		for iNdEx := len(m.ResponseHeadersToRemove) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ResponseHeadersToRemove[iNdEx])
			copy(dAtA[i:], m.ResponseHeadersToRemove[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.ResponseHeadersToRemove[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.ResponseHeadersToAdd) > 0 {
		for iNdEx := len(m.ResponseHeadersToAdd) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ResponseHeadersToAdd[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.RequestHeadersToAdd) > 0 {
		for iNdEx := len(m.RequestHeadersToAdd) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RequestHeadersToAdd[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.AdvertisePolicies) > 0 {
		for iNdEx := len(m.AdvertisePolicies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AdvertisePolicies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.JavascriptInfo != nil {
		{
			size, err := m.JavascriptInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Routes) > 0 {
		for iNdEx := len(m.Routes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Routes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Domains) > 0 {
		for iNdEx := len(m.Domains) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Domains[iNdEx])
			copy(dAtA[i:], m.Domains[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Domains[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType_TlsParameters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_TlsParameters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TlsParameters != nil {
		{
			size, err := m.TlsParameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_JsChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_JsChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.JsChallenge != nil {
		{
			size, err := m.JsChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_CaptchaChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_CaptchaChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CaptchaChallenge != nil {
		{
			size, err := m.CaptchaChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_NoChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_NoChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoChallenge != nil {
		{
			size, err := m.NoChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_NoAuthentication) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_NoAuthentication) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoAuthentication != nil {
		{
			size, err := m.NoAuthentication.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_Authentication) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_Authentication) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Authentication != nil {
		{
			size, err := m.Authentication.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_PolicyBasedChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_PolicyBasedChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PolicyBasedChallenge != nil {
		{
			size, err := m.PolicyBasedChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DefaultHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DefaultHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultHeader != nil {
		{
			size, err := m.DefaultHeader.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_ServerName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_ServerName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.ServerName)
	copy(dAtA[i:], m.ServerName)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.ServerName)))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xe2
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_AppendServerName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_AppendServerName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.AppendServerName)
	copy(dAtA[i:], m.AppendServerName)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.AppendServerName)))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xea
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_PassThrough) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_PassThrough) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PassThrough != nil {
		{
			size, err := m.PassThrough.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_EnablePathNormalize) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_EnablePathNormalize) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnablePathNormalize != nil {
		{
			size, err := m.EnablePathNormalize.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DisablePathNormalize) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DisablePathNormalize) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisablePathNormalize != nil {
		{
			size, err := m.DisablePathNormalize.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_EnableStrictSniHostHeaderCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_EnableStrictSniHostHeaderCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableStrictSniHostHeaderCheck != nil {
		{
			size, err := m.EnableStrictSniHostHeaderCheck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_AdditionalDomains) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_AdditionalDomains) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdditionalDomains != nil {
		{
			size, err := m.AdditionalDomains.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DisableTrustClientIpHeaders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DisableTrustClientIpHeaders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableTrustClientIpHeaders != nil {
		{
			size, err := m.DisableTrustClientIpHeaders.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_EnableTrustClientIpHeaders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_EnableTrustClientIpHeaders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableTrustClientIpHeaders != nil {
		{
			size, err := m.EnableTrustClientIpHeaders.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_NonDefaultLoadbalancer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_NonDefaultLoadbalancer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NonDefaultLoadbalancer != nil {
		{
			size, err := m.NonDefaultLoadbalancer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DefaultLoadbalancer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DefaultLoadbalancer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultLoadbalancer != nil {
		{
			size, err := m.DefaultLoadbalancer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_TlsCertParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_TlsCertParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TlsCertParams != nil {
		{
			size, err := m.TlsCertParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_Block) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_Block) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Block != nil {
		{
			size, err := m.Block.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DdosJsChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DdosJsChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DdosJsChallenge != nil {
		{
			size, err := m.DdosJsChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_L7DdosActionDefault) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_L7DdosActionDefault) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.L7DdosActionDefault != nil {
		{
			size, err := m.L7DdosActionDefault.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DisableBotDefense) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DisableBotDefense) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableBotDefense != nil {
		{
			size, err := m.DisableBotDefense.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3f
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_BotDefense) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_BotDefense) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BotDefense != nil {
		{
			size, err := m.BotDefense.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3f
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_NotReady) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_NotReady) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NotReady != nil {
		{
			size, err := m.NotReady.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3f
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_Ready) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_Ready) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Ready != nil {
		{
			size, err := m.Ready.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x40
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *DNSVHostStatusType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DNSVHostStatusType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DNSVHostStatusType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RenewCertificateState != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.RenewCertificateState))
		i--
		dAtA[i] = 0x30
	}
	if len(m.ExistingCertificateState) > 0 {
		i -= len(m.ExistingCertificateState)
		copy(dAtA[i:], m.ExistingCertificateState)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ExistingCertificateState)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SuggestedAction) > 0 {
		i -= len(m.SuggestedAction)
		copy(dAtA[i:], m.SuggestedAction)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SuggestedAction)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ErrorDescription) > 0 {
		i -= len(m.ErrorDescription)
		copy(dAtA[i:], m.ErrorDescription)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ErrorDescription)))
		i--
		dAtA[i] = 0x1a
	}
	if m.State != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DnsProxyConfiguration != nil {
		{
			size, err := m.DnsProxyConfiguration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4b
		i--
		dAtA[i] = 0x82
	}
	if len(m.DomainCertMap) > 0 {
		keysForDomainCertMap := make([]string, 0, len(m.DomainCertMap))
		for k := range m.DomainCertMap {
			keysForDomainCertMap = append(keysForDomainCertMap, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForDomainCertMap)
		for iNdEx := len(keysForDomainCertMap) - 1; iNdEx >= 0; iNdEx-- {
			v := m.DomainCertMap[string(keysForDomainCertMap[iNdEx])]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintTypes(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(keysForDomainCertMap[iNdEx])
			copy(dAtA[i:], keysForDomainCertMap[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(keysForDomainCertMap[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x5
			i--
			dAtA[i] = 0xc2
		}
	}
	if m.TlsCertificatesChoice != nil {
		{
			size := m.TlsCertificatesChoice.Size()
			i -= size
			if _, err := m.TlsCertificatesChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ApiSpec != nil {
		{
			size, err := m.ApiSpec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xa2
	}
	if m.SlowDdosMitigation != nil {
		{
			size, err := m.SlowDdosMitigation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x9a
	}
	if m.ConnectionIdleTimeout != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ConnectionIdleTimeout))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x90
	}
	if len(m.CookiesToModify) > 0 {
		for iNdEx := len(m.CookiesToModify) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CookiesToModify[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5
			i--
			dAtA[i] = 0x8a
		}
	}
	if m.CsrfPolicy != nil {
		{
			size, err := m.CsrfPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x82
	}
	if m.HeaderTransformationType != nil {
		{
			size, err := m.HeaderTransformationType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xfa
	}
	if m.DefaultLbChoice != nil {
		{
			size := m.DefaultLbChoice.Size()
			i -= size
			if _, err := m.DefaultLbChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.StrictSniHostHeaderCheckChoice != nil {
		{
			size := m.StrictSniHostHeaderCheckChoice.Size()
			i -= size
			if _, err := m.StrictSniHostHeaderCheckChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.PathNormalizeChoice != nil {
		{
			size := m.PathNormalizeChoice.Size()
			i -= size
			if _, err := m.PathNormalizeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ServerHeaderChoice != nil {
		{
			size := m.ServerHeaderChoice.Size()
			i -= size
			if _, err := m.ServerHeaderChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.AuthenticationChoice != nil {
		{
			size := m.AuthenticationChoice.Size()
			i -= size
			if _, err := m.AuthenticationChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.TemporaryUserBlocking != nil {
		{
			size, err := m.TemporaryUserBlocking.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x9a
	}
	if m.DisableDnsResolve {
		i--
		if m.DisableDnsResolve {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x90
	}
	if m.DisableDefaultErrorPages {
		i--
		if m.DisableDefaultErrorPages {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x88
	}
	if m.IdleTimeout != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.IdleTimeout))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x80
	}
	if m.ChallengeType != nil {
		{
			size := m.ChallengeType.Size()
			i -= size
			if _, err := m.ChallengeType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.RetryPolicy != nil {
		{
			size, err := m.RetryPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	if len(m.RateLimiterAllowedPrefixes) > 0 {
		for iNdEx := len(m.RateLimiterAllowedPrefixes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RateLimiterAllowedPrefixes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xda
		}
	}
	if len(m.RateLimiter) > 0 {
		for iNdEx := len(m.RateLimiter) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RateLimiter[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xd2
		}
	}
	if len(m.UserIdentification) > 0 {
		for iNdEx := len(m.UserIdentification) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserIdentification[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xca
		}
	}
	if m.MaxRequestHeaderSize != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MaxRequestHeaderSize))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if len(m.CustomErrors) > 0 {
		keysForCustomErrors := make([]uint32, 0, len(m.CustomErrors))
		for k := range m.CustomErrors {
			keysForCustomErrors = append(keysForCustomErrors, uint32(k))
		}
		github_com_gogo_protobuf_sortkeys.Uint32s(keysForCustomErrors)
		for iNdEx := len(keysForCustomErrors) - 1; iNdEx >= 0; iNdEx-- {
			v := m.CustomErrors[uint32(keysForCustomErrors[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTypes(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i = encodeVarintTypes(dAtA, i, uint64(keysForCustomErrors[iNdEx]))
			i--
			dAtA[i] = 0x8
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xb2
		}
	}
	if m.CompressionParams != nil {
		{
			size, err := m.CompressionParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.AddLocation {
		i--
		if m.AddLocation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.DynamicReverseProxy != nil {
		{
			size, err := m.DynamicReverseProxy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.WafType != nil {
		{
			size, err := m.WafType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.RequestHeadersToRemove) > 0 {
		for iNdEx := len(m.RequestHeadersToRemove) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RequestHeadersToRemove[iNdEx])
			copy(dAtA[i:], m.RequestHeadersToRemove[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.RequestHeadersToRemove[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
	}
	if m.Proxy != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Proxy))
		i--
		dAtA[i] = 0x78
	}
	if m.CorsPolicy != nil {
		{
			size, err := m.CorsPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.BufferPolicy != nil {
		{
			size, err := m.BufferPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if len(m.ResponseHeadersToRemove) > 0 {
		for iNdEx := len(m.ResponseHeadersToRemove) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ResponseHeadersToRemove[iNdEx])
			copy(dAtA[i:], m.ResponseHeadersToRemove[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.ResponseHeadersToRemove[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.ResponseHeadersToAdd) > 0 {
		for iNdEx := len(m.ResponseHeadersToAdd) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ResponseHeadersToAdd[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.RequestHeadersToAdd) > 0 {
		for iNdEx := len(m.RequestHeadersToAdd) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RequestHeadersToAdd[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.AdvertisePolicies) > 0 {
		for iNdEx := len(m.AdvertisePolicies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AdvertisePolicies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Routes) > 0 {
		for iNdEx := len(m.Routes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Routes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Domains) > 0 {
		for iNdEx := len(m.Domains) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Domains[iNdEx])
			copy(dAtA[i:], m.Domains[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Domains[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType_TlsParameters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_TlsParameters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TlsParameters != nil {
		{
			size, err := m.TlsParameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_JsChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_JsChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.JsChallenge != nil {
		{
			size, err := m.JsChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_CaptchaChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_CaptchaChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CaptchaChallenge != nil {
		{
			size, err := m.CaptchaChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_NoChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_NoChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoChallenge != nil {
		{
			size, err := m.NoChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_NoAuthentication) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_NoAuthentication) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoAuthentication != nil {
		{
			size, err := m.NoAuthentication.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_Authentication) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_Authentication) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Authentication != nil {
		{
			size, err := m.Authentication.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DefaultHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DefaultHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultHeader != nil {
		{
			size, err := m.DefaultHeader.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_ServerName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_ServerName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.ServerName)
	copy(dAtA[i:], m.ServerName)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.ServerName)))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xe2
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_AppendServerName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_AppendServerName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.AppendServerName)
	copy(dAtA[i:], m.AppendServerName)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.AppendServerName)))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xea
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_PassThrough) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_PassThrough) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PassThrough != nil {
		{
			size, err := m.PassThrough.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_EnablePathNormalize) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_EnablePathNormalize) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnablePathNormalize != nil {
		{
			size, err := m.EnablePathNormalize.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DisablePathNormalize) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DisablePathNormalize) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisablePathNormalize != nil {
		{
			size, err := m.DisablePathNormalize.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_EnableStrictSniHostHeaderCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_EnableStrictSniHostHeaderCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableStrictSniHostHeaderCheck != nil {
		{
			size, err := m.EnableStrictSniHostHeaderCheck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_AdditionalDomains) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_AdditionalDomains) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdditionalDomains != nil {
		{
			size, err := m.AdditionalDomains.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_NonDefaultLoadbalancer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_NonDefaultLoadbalancer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NonDefaultLoadbalancer != nil {
		{
			size, err := m.NonDefaultLoadbalancer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DefaultLoadbalancer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DefaultLoadbalancer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultLoadbalancer != nil {
		{
			size, err := m.DefaultLoadbalancer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_TlsCertParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_TlsCertParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TlsCertParams != nil {
		{
			size, err := m.TlsCertParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DnsProxyConfiguration != nil {
		{
			size, err := m.DnsProxyConfiguration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4b
		i--
		dAtA[i] = 0x82
	}
	if len(m.DomainCertMap) > 0 {
		keysForDomainCertMap := make([]string, 0, len(m.DomainCertMap))
		for k := range m.DomainCertMap {
			keysForDomainCertMap = append(keysForDomainCertMap, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForDomainCertMap)
		for iNdEx := len(keysForDomainCertMap) - 1; iNdEx >= 0; iNdEx-- {
			v := m.DomainCertMap[string(keysForDomainCertMap[iNdEx])]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintTypes(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(keysForDomainCertMap[iNdEx])
			copy(dAtA[i:], keysForDomainCertMap[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(keysForDomainCertMap[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x5
			i--
			dAtA[i] = 0xc2
		}
	}
	if m.TlsCertificatesChoice != nil {
		{
			size := m.TlsCertificatesChoice.Size()
			i -= size
			if _, err := m.TlsCertificatesChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ApiSpec != nil {
		{
			size, err := m.ApiSpec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xa2
	}
	if m.SlowDdosMitigation != nil {
		{
			size, err := m.SlowDdosMitigation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x9a
	}
	if m.ConnectionIdleTimeout != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ConnectionIdleTimeout))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x90
	}
	if len(m.CookiesToModify) > 0 {
		for iNdEx := len(m.CookiesToModify) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CookiesToModify[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5
			i--
			dAtA[i] = 0x8a
		}
	}
	if m.CsrfPolicy != nil {
		{
			size, err := m.CsrfPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x82
	}
	if m.HeaderTransformationType != nil {
		{
			size, err := m.HeaderTransformationType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xfa
	}
	if m.DefaultLbChoice != nil {
		{
			size := m.DefaultLbChoice.Size()
			i -= size
			if _, err := m.DefaultLbChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.StrictSniHostHeaderCheckChoice != nil {
		{
			size := m.StrictSniHostHeaderCheckChoice.Size()
			i -= size
			if _, err := m.StrictSniHostHeaderCheckChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.PathNormalizeChoice != nil {
		{
			size := m.PathNormalizeChoice.Size()
			i -= size
			if _, err := m.PathNormalizeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ServerHeaderChoice != nil {
		{
			size := m.ServerHeaderChoice.Size()
			i -= size
			if _, err := m.ServerHeaderChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.AuthenticationChoice != nil {
		{
			size := m.AuthenticationChoice.Size()
			i -= size
			if _, err := m.AuthenticationChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.TemporaryUserBlocking != nil {
		{
			size, err := m.TemporaryUserBlocking.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x9a
	}
	if m.DisableDnsResolve {
		i--
		if m.DisableDnsResolve {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x90
	}
	if m.DisableDefaultErrorPages {
		i--
		if m.DisableDefaultErrorPages {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x88
	}
	if m.IdleTimeout != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.IdleTimeout))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x80
	}
	if m.ChallengeType != nil {
		{
			size := m.ChallengeType.Size()
			i -= size
			if _, err := m.ChallengeType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.RetryPolicy != nil {
		{
			size, err := m.RetryPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	if len(m.RateLimiterAllowedPrefixes) > 0 {
		for iNdEx := len(m.RateLimiterAllowedPrefixes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RateLimiterAllowedPrefixes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xda
		}
	}
	if len(m.RateLimiter) > 0 {
		for iNdEx := len(m.RateLimiter) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RateLimiter[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xd2
		}
	}
	if len(m.UserIdentification) > 0 {
		for iNdEx := len(m.UserIdentification) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserIdentification[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xca
		}
	}
	if m.MaxRequestHeaderSize != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MaxRequestHeaderSize))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if len(m.CustomErrors) > 0 {
		keysForCustomErrors := make([]uint32, 0, len(m.CustomErrors))
		for k := range m.CustomErrors {
			keysForCustomErrors = append(keysForCustomErrors, uint32(k))
		}
		github_com_gogo_protobuf_sortkeys.Uint32s(keysForCustomErrors)
		for iNdEx := len(keysForCustomErrors) - 1; iNdEx >= 0; iNdEx-- {
			v := m.CustomErrors[uint32(keysForCustomErrors[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTypes(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i = encodeVarintTypes(dAtA, i, uint64(keysForCustomErrors[iNdEx]))
			i--
			dAtA[i] = 0x8
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xb2
		}
	}
	if m.CompressionParams != nil {
		{
			size, err := m.CompressionParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.AddLocation {
		i--
		if m.AddLocation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.DynamicReverseProxy != nil {
		{
			size, err := m.DynamicReverseProxy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.WafType != nil {
		{
			size, err := m.WafType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.RequestHeadersToRemove) > 0 {
		for iNdEx := len(m.RequestHeadersToRemove) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RequestHeadersToRemove[iNdEx])
			copy(dAtA[i:], m.RequestHeadersToRemove[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.RequestHeadersToRemove[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
	}
	if m.Proxy != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Proxy))
		i--
		dAtA[i] = 0x78
	}
	if m.CorsPolicy != nil {
		{
			size, err := m.CorsPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.BufferPolicy != nil {
		{
			size, err := m.BufferPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if len(m.ResponseHeadersToRemove) > 0 {
		for iNdEx := len(m.ResponseHeadersToRemove) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ResponseHeadersToRemove[iNdEx])
			copy(dAtA[i:], m.ResponseHeadersToRemove[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.ResponseHeadersToRemove[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.ResponseHeadersToAdd) > 0 {
		for iNdEx := len(m.ResponseHeadersToAdd) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ResponseHeadersToAdd[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.RequestHeadersToAdd) > 0 {
		for iNdEx := len(m.RequestHeadersToAdd) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RequestHeadersToAdd[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.AdvertisePolicies) > 0 {
		for iNdEx := len(m.AdvertisePolicies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AdvertisePolicies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Routes) > 0 {
		for iNdEx := len(m.Routes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Routes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Domains) > 0 {
		for iNdEx := len(m.Domains) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Domains[iNdEx])
			copy(dAtA[i:], m.Domains[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Domains[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType_TlsParameters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_TlsParameters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TlsParameters != nil {
		{
			size, err := m.TlsParameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_JsChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_JsChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.JsChallenge != nil {
		{
			size, err := m.JsChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_CaptchaChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_CaptchaChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CaptchaChallenge != nil {
		{
			size, err := m.CaptchaChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_NoChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_NoChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoChallenge != nil {
		{
			size, err := m.NoChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_NoAuthentication) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_NoAuthentication) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoAuthentication != nil {
		{
			size, err := m.NoAuthentication.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_Authentication) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_Authentication) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Authentication != nil {
		{
			size, err := m.Authentication.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DefaultHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DefaultHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultHeader != nil {
		{
			size, err := m.DefaultHeader.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_ServerName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_ServerName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.ServerName)
	copy(dAtA[i:], m.ServerName)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.ServerName)))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xe2
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_AppendServerName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_AppendServerName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.AppendServerName)
	copy(dAtA[i:], m.AppendServerName)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.AppendServerName)))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xea
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_PassThrough) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_PassThrough) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PassThrough != nil {
		{
			size, err := m.PassThrough.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_EnablePathNormalize) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_EnablePathNormalize) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnablePathNormalize != nil {
		{
			size, err := m.EnablePathNormalize.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DisablePathNormalize) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DisablePathNormalize) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisablePathNormalize != nil {
		{
			size, err := m.DisablePathNormalize.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_EnableStrictSniHostHeaderCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_EnableStrictSniHostHeaderCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableStrictSniHostHeaderCheck != nil {
		{
			size, err := m.EnableStrictSniHostHeaderCheck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_AdditionalDomains) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_AdditionalDomains) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdditionalDomains != nil {
		{
			size, err := m.AdditionalDomains.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_NonDefaultLoadbalancer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_NonDefaultLoadbalancer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NonDefaultLoadbalancer != nil {
		{
			size, err := m.NonDefaultLoadbalancer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DefaultLoadbalancer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DefaultLoadbalancer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultLoadbalancer != nil {
		{
			size, err := m.DefaultLoadbalancer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_TlsCertParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_TlsCertParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TlsCertParams != nil {
		{
			size, err := m.TlsCertParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DnsProxyConfiguration != nil {
		{
			size, err := m.DnsProxyConfiguration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4b
		i--
		dAtA[i] = 0x82
	}
	if len(m.AutoCertErrorMsg) > 0 {
		i -= len(m.AutoCertErrorMsg)
		copy(dAtA[i:], m.AutoCertErrorMsg)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AutoCertErrorMsg)))
		i--
		dAtA[i] = 0x40
		i--
		dAtA[i] = 0x8a
	}
	if m.DnsZoneStateChoice != nil {
		{
			size := m.DnsZoneStateChoice.Size()
			i -= size
			if _, err := m.DnsZoneStateChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.AutoCertInfo != nil {
		{
			size, err := m.AutoCertInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3f
		i--
		dAtA[i] = 0x92
	}
	if len(m.DnsInfo) > 0 {
		for iNdEx := len(m.DnsInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DnsInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3e
			i--
			dAtA[i] = 0xea
		}
	}
	if len(m.HostName) > 0 {
		i -= len(m.HostName)
		copy(dAtA[i:], m.HostName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.HostName)))
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xe2
	}
	if m.State != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xd8
	}
	if len(m.DomainCertMap) > 0 {
		keysForDomainCertMap := make([]string, 0, len(m.DomainCertMap))
		for k := range m.DomainCertMap {
			keysForDomainCertMap = append(keysForDomainCertMap, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForDomainCertMap)
		for iNdEx := len(keysForDomainCertMap) - 1; iNdEx >= 0; iNdEx-- {
			v := m.DomainCertMap[string(keysForDomainCertMap[iNdEx])]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintTypes(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(keysForDomainCertMap[iNdEx])
			copy(dAtA[i:], keysForDomainCertMap[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(keysForDomainCertMap[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x5
			i--
			dAtA[i] = 0xc2
		}
	}
	if m.TlsCertificatesChoice != nil {
		{
			size := m.TlsCertificatesChoice.Size()
			i -= size
			if _, err := m.TlsCertificatesChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ApiSpec != nil {
		{
			size, err := m.ApiSpec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xa2
	}
	if m.SlowDdosMitigation != nil {
		{
			size, err := m.SlowDdosMitigation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x9a
	}
	if m.ConnectionIdleTimeout != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ConnectionIdleTimeout))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x90
	}
	if len(m.CookiesToModify) > 0 {
		for iNdEx := len(m.CookiesToModify) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CookiesToModify[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5
			i--
			dAtA[i] = 0x8a
		}
	}
	if m.CsrfPolicy != nil {
		{
			size, err := m.CsrfPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x82
	}
	if m.HeaderTransformationType != nil {
		{
			size, err := m.HeaderTransformationType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xfa
	}
	if m.DefaultLbChoice != nil {
		{
			size := m.DefaultLbChoice.Size()
			i -= size
			if _, err := m.DefaultLbChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.CdnService != nil {
		{
			size, err := m.CdnService.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb2
	}
	if m.StrictSniHostHeaderCheckChoice != nil {
		{
			size := m.StrictSniHostHeaderCheckChoice.Size()
			i -= size
			if _, err := m.StrictSniHostHeaderCheckChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.PathNormalizeChoice != nil {
		{
			size := m.PathNormalizeChoice.Size()
			i -= size
			if _, err := m.PathNormalizeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ServerHeaderChoice != nil {
		{
			size := m.ServerHeaderChoice.Size()
			i -= size
			if _, err := m.ServerHeaderChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.AuthenticationChoice != nil {
		{
			size := m.AuthenticationChoice.Size()
			i -= size
			if _, err := m.AuthenticationChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.TemporaryUserBlocking != nil {
		{
			size, err := m.TemporaryUserBlocking.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x9a
	}
	if m.DisableDnsResolve {
		i--
		if m.DisableDnsResolve {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x90
	}
	if m.DisableDefaultErrorPages {
		i--
		if m.DisableDefaultErrorPages {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x88
	}
	if m.IdleTimeout != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.IdleTimeout))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x80
	}
	if m.ChallengeType != nil {
		{
			size := m.ChallengeType.Size()
			i -= size
			if _, err := m.ChallengeType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.RetryPolicy != nil {
		{
			size, err := m.RetryPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	if len(m.RateLimiterAllowedPrefixes) > 0 {
		for iNdEx := len(m.RateLimiterAllowedPrefixes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RateLimiterAllowedPrefixes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xda
		}
	}
	if len(m.RateLimiter) > 0 {
		for iNdEx := len(m.RateLimiter) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RateLimiter[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xd2
		}
	}
	if len(m.UserIdentification) > 0 {
		for iNdEx := len(m.UserIdentification) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserIdentification[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xca
		}
	}
	if m.MaxRequestHeaderSize != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MaxRequestHeaderSize))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if len(m.CustomErrors) > 0 {
		keysForCustomErrors := make([]uint32, 0, len(m.CustomErrors))
		for k := range m.CustomErrors {
			keysForCustomErrors = append(keysForCustomErrors, uint32(k))
		}
		github_com_gogo_protobuf_sortkeys.Uint32s(keysForCustomErrors)
		for iNdEx := len(keysForCustomErrors) - 1; iNdEx >= 0; iNdEx-- {
			v := m.CustomErrors[uint32(keysForCustomErrors[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTypes(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i = encodeVarintTypes(dAtA, i, uint64(keysForCustomErrors[iNdEx]))
			i--
			dAtA[i] = 0x8
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xb2
		}
	}
	if m.CompressionParams != nil {
		{
			size, err := m.CompressionParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.AddLocation {
		i--
		if m.AddLocation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.DynamicReverseProxy != nil {
		{
			size, err := m.DynamicReverseProxy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.WafType != nil {
		{
			size, err := m.WafType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.RequestHeadersToRemove) > 0 {
		for iNdEx := len(m.RequestHeadersToRemove) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RequestHeadersToRemove[iNdEx])
			copy(dAtA[i:], m.RequestHeadersToRemove[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.RequestHeadersToRemove[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
	}
	if m.Proxy != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Proxy))
		i--
		dAtA[i] = 0x78
	}
	if m.CorsPolicy != nil {
		{
			size, err := m.CorsPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.BufferPolicy != nil {
		{
			size, err := m.BufferPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.Type != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x50
	}
	if len(m.ResponseHeadersToRemove) > 0 {
		for iNdEx := len(m.ResponseHeadersToRemove) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ResponseHeadersToRemove[iNdEx])
			copy(dAtA[i:], m.ResponseHeadersToRemove[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.ResponseHeadersToRemove[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.ResponseHeadersToAdd) > 0 {
		for iNdEx := len(m.ResponseHeadersToAdd) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ResponseHeadersToAdd[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.RequestHeadersToAdd) > 0 {
		for iNdEx := len(m.RequestHeadersToAdd) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RequestHeadersToAdd[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.AdvertisePolicies) > 0 {
		for iNdEx := len(m.AdvertisePolicies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AdvertisePolicies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Routes) > 0 {
		for iNdEx := len(m.Routes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Routes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Domains) > 0 {
		for iNdEx := len(m.Domains) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Domains[iNdEx])
			copy(dAtA[i:], m.Domains[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Domains[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType_TlsParameters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_TlsParameters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TlsParameters != nil {
		{
			size, err := m.TlsParameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_JsChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_JsChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.JsChallenge != nil {
		{
			size, err := m.JsChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_CaptchaChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_CaptchaChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CaptchaChallenge != nil {
		{
			size, err := m.CaptchaChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_NoChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_NoChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoChallenge != nil {
		{
			size, err := m.NoChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_NoAuthentication) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_NoAuthentication) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoAuthentication != nil {
		{
			size, err := m.NoAuthentication.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_Authentication) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_Authentication) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Authentication != nil {
		{
			size, err := m.Authentication.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DefaultHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DefaultHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultHeader != nil {
		{
			size, err := m.DefaultHeader.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_ServerName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_ServerName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.ServerName)
	copy(dAtA[i:], m.ServerName)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.ServerName)))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xe2
	return len(dAtA) - i, nil
}
func (m *GetSpecType_AppendServerName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_AppendServerName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.AppendServerName)
	copy(dAtA[i:], m.AppendServerName)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.AppendServerName)))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xea
	return len(dAtA) - i, nil
}
func (m *GetSpecType_PassThrough) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_PassThrough) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PassThrough != nil {
		{
			size, err := m.PassThrough.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_EnablePathNormalize) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_EnablePathNormalize) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnablePathNormalize != nil {
		{
			size, err := m.EnablePathNormalize.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DisablePathNormalize) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DisablePathNormalize) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisablePathNormalize != nil {
		{
			size, err := m.DisablePathNormalize.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_EnableStrictSniHostHeaderCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_EnableStrictSniHostHeaderCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableStrictSniHostHeaderCheck != nil {
		{
			size, err := m.EnableStrictSniHostHeaderCheck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_AdditionalDomains) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_AdditionalDomains) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdditionalDomains != nil {
		{
			size, err := m.AdditionalDomains.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_NonDefaultLoadbalancer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_NonDefaultLoadbalancer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NonDefaultLoadbalancer != nil {
		{
			size, err := m.NonDefaultLoadbalancer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DefaultLoadbalancer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DefaultLoadbalancer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultLoadbalancer != nil {
		{
			size, err := m.DefaultLoadbalancer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_TlsCertParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_TlsCertParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TlsCertParams != nil {
		{
			size, err := m.TlsCertParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_NotReady) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_NotReady) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NotReady != nil {
		{
			size, err := m.NotReady.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3f
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_Ready) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_Ready) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Ready != nil {
		{
			size, err := m.Ready.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x40
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *VirtualHostID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *VerStatusType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CoalescedVirtualHosts) > 0 {
		for _, e := range m.CoalescedVirtualHosts {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.NonCoalescedVirtualHosts) > 0 {
		for _, e := range m.NonCoalescedVirtualHosts {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.AdvertisePolicy != nil {
		l = m.AdvertisePolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.CoalescedVhosts) > 0 {
		for _, e := range m.CoalescedVhosts {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.NonCoalescedVhosts) > 0 {
		for _, e := range m.NonCoalescedVhosts {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *JavaScriptConfigType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CachePrefix)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ScriptConfig != nil {
		l = m.ScriptConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.CustomScriptUrl)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *DynamicReverseProxyType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResolveEndpointDynamically {
		n += 2
	}
	if m.ResolutionNetworkType != 0 {
		n += 1 + sovTypes(uint64(m.ResolutionNetworkType))
	}
	if len(m.ResolutionNetwork) > 0 {
		for _, e := range m.ResolutionNetwork {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.ConnectionTimeout != 0 {
		n += 1 + sovTypes(uint64(m.ConnectionTimeout))
	}
	return n
}

func (m *CompressionType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ContentLength != 0 {
		n += 1 + sovTypes(uint64(m.ContentLength))
	}
	if len(m.ContentType) > 0 {
		for _, s := range m.ContentType {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.DisableOnEtagHeader {
		n += 2
	}
	if m.RemoveAcceptEncodingHeader {
		n += 2
	}
	return n
}

func (m *JavascriptChallengeType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JsScriptDelay != 0 {
		n += 1 + sovTypes(uint64(m.JsScriptDelay))
	}
	if m.CookieExpiry != 0 {
		n += 1 + sovTypes(uint64(m.CookieExpiry))
	}
	l = len(m.CustomPage)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CaptchaChallengeType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CookieExpiry != 0 {
		n += 1 + sovTypes(uint64(m.CookieExpiry))
	}
	l = len(m.CustomPage)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *TemporaryUserBlockingType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CustomPage)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *DNSRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *AutoCertInfoType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AutoCertState != 0 {
		n += 1 + sovTypes(uint64(m.AutoCertState))
	}
	if m.AutoCertExpiry != nil {
		l = m.AutoCertExpiry.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.AutoCertSubject)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.AutoCertIssuer)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.DnsRecords) > 0 {
		for _, e := range m.DnsRecords {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.StateStartTime != nil {
		l = m.StateStartTime.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *AuthenticationDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AuthConfig) > 0 {
		for _, e := range m.AuthConfig {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.CookieParamsChoice != nil {
		n += m.CookieParamsChoice.Size()
	}
	if m.RedirectUrlChoice != nil {
		n += m.RedirectUrlChoice.Size()
	}
	return n
}

func (m *AuthenticationDetails_UseAuthObjectConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UseAuthObjectConfig != nil {
		l = m.UseAuthObjectConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AuthenticationDetails_CookieParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CookieParams != nil {
		l = m.CookieParams.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AuthenticationDetails_RedirectUrl) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RedirectUrl)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *AuthenticationDetails_RedirectDynamic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RedirectDynamic != nil {
		l = m.RedirectDynamic.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PolicyBasedChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JsChallenge != nil {
		l = m.JsChallenge.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.CaptchaChallenge != nil {
		l = m.CaptchaChallenge.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.TemporaryUserBlocking != nil {
		l = m.TemporaryUserBlocking.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ChallengeChoice != nil {
		n += m.ChallengeChoice.Size()
	}
	if len(m.MaliciousUserMitigation) > 0 {
		for _, e := range m.MaliciousUserMitigation {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *PolicyBasedChallenge_NoChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoChallenge != nil {
		l = m.NoChallenge.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PolicyBasedChallenge_AlwaysEnableJsChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AlwaysEnableJsChallenge != nil {
		l = m.AlwaysEnableJsChallenge.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PolicyBasedChallenge_AlwaysEnableCaptchaChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AlwaysEnableCaptchaChallenge != nil {
		l = m.AlwaysEnableCaptchaChallenge.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ShapeBotDefenseConfigType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ApplicationId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ApiAuthKey != nil {
		l = m.ApiAuthKey.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Instance) > 0 {
		for _, e := range m.Instance {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.Timeout != 0 {
		n += 1 + sovTypes(uint64(m.Timeout))
	}
	if len(m.BlockingPages) > 0 {
		for k, v := range m.BlockingPages {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	l = len(m.ReloadHeaderName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.JsPath)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Mode != 0 {
		n += 1 + sovTypes(uint64(m.Mode))
	}
	return n
}

func (m *ServiceDomain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ServiceDomain)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.InternalServiceDomain)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CdnServiceType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ContentChoice != nil {
		n += m.ContentChoice.Size()
	}
	if m.CacheTtl != 0 {
		n += 1 + sovTypes(uint64(m.CacheTtl))
	}
	if len(m.ServiceDomains) > 0 {
		for _, e := range m.ServiceDomains {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *CdnServiceType_DownloadDelivery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DownloadDelivery != nil {
		l = m.DownloadDelivery.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CdnServiceType_LiveStreaming) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LiveStreaming != nil {
		l = m.LiveStreaming.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ClientIPHeaders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ClientIpHeaders) > 0 {
		for _, s := range m.ClientIpHeaders {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *DNSProxyConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DdosProfile != nil {
		l = m.DdosProfile.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.CacheProfile != nil {
		l = m.CacheProfile.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ProtocolInspection != nil {
		l = m.ProtocolInspection.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Irules) > 0 {
		for _, e := range m.Irules {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *DNSDDoSProfile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DdosMitigationChoice != nil {
		n += m.DdosMitigationChoice.Size()
	}
	return n
}

func (m *DNSDDoSProfile_EnableDdosMitigation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableDdosMitigation != nil {
		l = m.EnableDdosMitigation.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DNSDDoSProfile_DisableDdosMitigation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableDdosMitigation != nil {
		l = m.DisableDdosMitigation.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DNSCacheProfile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CacheProfileChoice != nil {
		n += m.CacheProfileChoice.Size()
	}
	return n
}

func (m *DNSCacheProfile_DisableCacheProfile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableCacheProfile != nil {
		l = m.DisableCacheProfile.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DNSCacheProfile_CacheSize) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.CacheSize))
	return n
}
func (m *SlowDDoSMitigation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestTimeoutChoice != nil {
		n += m.RequestTimeoutChoice.Size()
	}
	if m.RequestHeadersTimeout != 0 {
		n += 1 + sovTypes(uint64(m.RequestHeadersTimeout))
	}
	return n
}

func (m *SlowDDoSMitigation_RequestTimeout) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.RequestTimeout))
	return n
}
func (m *SlowDDoSMitigation_DisableRequestTimeout) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableRequestTimeout != nil {
		l = m.DisableRequestTimeout.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DomainCertificates) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RsaCertificates) > 0 {
		for _, e := range m.RsaCertificates {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.EcdsaCertificates) > 0 {
		for _, e := range m.EcdsaCertificates {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *ApiSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiDefinition != nil {
		l = m.ApiDefinition.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.OpenApiValidationChoice != nil {
		n += m.OpenApiValidationChoice.Size()
	}
	return n
}

func (m *ApiSpec_DisableOpenApiValidation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableOpenApiValidation != nil {
		l = m.DisableOpenApiValidation.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ApiSpec_EnableOpenApiValidation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableOpenApiValidation != nil {
		l = m.EnableOpenApiValidation.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *OpenApiValidationSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FailOversizedBodyValidation {
		n += 2
	}
	if m.AllowOnlySpecifiedQueryParams {
		n += 2
	}
	if m.AllowOnlySpecifiedHeaders {
		n += 2
	}
	return n
}

func (m *HttpProtocolOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpProtocolChoice != nil {
		n += m.HttpProtocolChoice.Size()
	}
	return n
}

func (m *HttpProtocolOptions_HttpProtocolEnableV1Only) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpProtocolEnableV1Only != nil {
		l = m.HttpProtocolEnableV1Only.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *HttpProtocolOptions_HttpProtocolEnableV2Only) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpProtocolEnableV2Only != nil {
		l = m.HttpProtocolEnableV2Only.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *HttpProtocolOptions_HttpProtocolEnableV1V2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpProtocolEnableV1V2 != nil {
		l = m.HttpProtocolEnableV1V2.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *HttpRedirectOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Routes) > 0 {
		for _, e := range m.Routes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.JavascriptInfo != nil {
		l = m.JavascriptInfo.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.AdvertisePolicies) > 0 {
		for _, e := range m.AdvertisePolicies {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.RequestHeadersToAdd) > 0 {
		for _, e := range m.RequestHeadersToAdd {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ResponseHeadersToAdd) > 0 {
		for _, e := range m.ResponseHeadersToAdd {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ResponseHeadersToRemove) > 0 {
		for _, s := range m.ResponseHeadersToRemove {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.TlsCertificatesChoice != nil {
		n += m.TlsCertificatesChoice.Size()
	}
	if m.Type != 0 {
		n += 1 + sovTypes(uint64(m.Type))
	}
	if m.BufferPolicy != nil {
		l = m.BufferPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.CorsPolicy != nil {
		l = m.CorsPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Proxy != 0 {
		n += 1 + sovTypes(uint64(m.Proxy))
	}
	if len(m.Jwt) > 0 {
		for _, e := range m.Jwt {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.RequestHeadersToRemove) > 0 {
		for _, s := range m.RequestHeadersToRemove {
			l = len(s)
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.WafType != nil {
		l = m.WafType.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.DynamicReverseProxy != nil {
		l = m.DynamicReverseProxy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.AddLocation {
		n += 3
	}
	if m.CompressionParams != nil {
		l = m.CompressionParams.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.CustomErrors) > 0 {
		for k, v := range m.CustomErrors {
			_ = k
			_ = v
			mapEntrySize := 1 + sovTypes(uint64(k)) + 1 + len(v) + sovTypes(uint64(len(v)))
			n += mapEntrySize + 2 + sovTypes(uint64(mapEntrySize))
		}
	}
	if m.MaxRequestHeaderSize != 0 {
		n += 2 + sovTypes(uint64(m.MaxRequestHeaderSize))
	}
	if m.ChallengeType != nil {
		n += m.ChallengeType.Size()
	}
	if len(m.UserIdentification) > 0 {
		for _, e := range m.UserIdentification {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.RateLimiter) > 0 {
		for _, e := range m.RateLimiter {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.RateLimiterAllowedPrefixes) > 0 {
		for _, e := range m.RateLimiterAllowedPrefixes {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.RetryPolicy != nil {
		l = m.RetryPolicy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.IdleTimeout != 0 {
		n += 2 + sovTypes(uint64(m.IdleTimeout))
	}
	if m.DisableDefaultErrorPages {
		n += 3
	}
	if m.DisableDnsResolve {
		n += 3
	}
	if m.TemporaryUserBlocking != nil {
		l = m.TemporaryUserBlocking.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.MaliciousUserMitigation) > 0 {
		for _, e := range m.MaliciousUserMitigation {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.TlsIntercept != nil {
		l = m.TlsIntercept.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.AuthenticationChoice != nil {
		n += m.AuthenticationChoice.Size()
	}
	if m.ServerHeaderChoice != nil {
		n += m.ServerHeaderChoice.Size()
	}
	if m.PathNormalizeChoice != nil {
		n += m.PathNormalizeChoice.Size()
	}
	if m.StrictSniHostHeaderCheckChoice != nil {
		n += m.StrictSniHostHeaderCheckChoice.Size()
	}
	if m.CdnService != nil {
		l = m.CdnService.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.TrustClientIpHeadersChoice != nil {
		n += m.TrustClientIpHeadersChoice.Size()
	}
	if m.DefaultLbChoice != nil {
		n += m.DefaultLbChoice.Size()
	}
	if m.HeaderTransformationType != nil {
		l = m.HeaderTransformationType.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.CsrfPolicy != nil {
		l = m.CsrfPolicy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.CookiesToModify) > 0 {
		for _, e := range m.CookiesToModify {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.ConnectionIdleTimeout != 0 {
		n += 2 + sovTypes(uint64(m.ConnectionIdleTimeout))
	}
	if m.SlowDdosMitigation != nil {
		l = m.SlowDdosMitigation.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.ApiSpec != nil {
		l = m.ApiSpec.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.DomainCertMap) > 0 {
		for k, v := range m.DomainCertMap {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTypes(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + l
			n += mapEntrySize + 2 + sovTypes(uint64(mapEntrySize))
		}
	}
	if m.HttpProtocolOptions != nil {
		l = m.HttpProtocolOptions.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.DdosAutoMitigationAction != nil {
		n += m.DdosAutoMitigationAction.Size()
	}
	if m.DnsVolterraManaged {
		n += 3
	}
	if len(m.DnsDomains) > 0 {
		for _, e := range m.DnsDomains {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.AutoCert {
		n += 3
	}
	if m.State != 0 {
		n += 2 + sovTypes(uint64(m.State))
	}
	l = len(m.HostName)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.DnsInfo) > 0 {
		for _, e := range m.DnsInfo {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.AutoCertState != 0 {
		n += 2 + sovTypes(uint64(m.AutoCertState))
	}
	if m.AutoCertInfo != nil {
		l = m.AutoCertInfo.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.UserDomains) > 0 {
		for _, s := range m.UserDomains {
			l = len(s)
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ServicePolicySets) > 0 {
		for _, e := range m.ServicePolicySets {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.LoadbalancerAlgorithm != 0 {
		n += 2 + sovTypes(uint64(m.LoadbalancerAlgorithm))
	}
	if m.VolterraCert {
		n += 3
	}
	if m.BotDefenseChoice != nil {
		n += m.BotDefenseChoice.Size()
	}
	if m.CheckIpReputation {
		n += 3
	}
	if len(m.FastAcl) > 0 {
		for _, e := range m.FastAcl {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.L7Acl) > 0 {
		for _, e := range m.L7Acl {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.DnsZones) > 0 {
		for _, e := range m.DnsZones {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.DnsZoneStateChoice != nil {
		n += m.DnsZoneStateChoice.Size()
	}
	if m.CustomCertExpiry != nil {
		l = m.CustomCertExpiry.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	l = len(m.AutoCertErrorMsg)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.HttpRedirectOptions != nil {
		l = m.HttpRedirectOptions.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.DnsProxyConfiguration != nil {
		l = m.DnsProxyConfiguration.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GlobalSpecType_TlsParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TlsParameters != nil {
		l = m.TlsParameters.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_JsChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JsChallenge != nil {
		l = m.JsChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_CaptchaChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CaptchaChallenge != nil {
		l = m.CaptchaChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_NoChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoChallenge != nil {
		l = m.NoChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_NoAuthentication) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoAuthentication != nil {
		l = m.NoAuthentication.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_Authentication) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Authentication != nil {
		l = m.Authentication.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_PolicyBasedChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PolicyBasedChallenge != nil {
		l = m.PolicyBasedChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DefaultHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultHeader != nil {
		l = m.DefaultHeader.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_ServerName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServerName)
	n += 2 + l + sovTypes(uint64(l))
	return n
}
func (m *GlobalSpecType_AppendServerName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AppendServerName)
	n += 2 + l + sovTypes(uint64(l))
	return n
}
func (m *GlobalSpecType_PassThrough) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PassThrough != nil {
		l = m.PassThrough.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_EnablePathNormalize) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnablePathNormalize != nil {
		l = m.EnablePathNormalize.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DisablePathNormalize) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisablePathNormalize != nil {
		l = m.DisablePathNormalize.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_EnableStrictSniHostHeaderCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableStrictSniHostHeaderCheck != nil {
		l = m.EnableStrictSniHostHeaderCheck.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_AdditionalDomains) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdditionalDomains != nil {
		l = m.AdditionalDomains.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DisableTrustClientIpHeaders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableTrustClientIpHeaders != nil {
		l = m.DisableTrustClientIpHeaders.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_EnableTrustClientIpHeaders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableTrustClientIpHeaders != nil {
		l = m.EnableTrustClientIpHeaders.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_NonDefaultLoadbalancer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NonDefaultLoadbalancer != nil {
		l = m.NonDefaultLoadbalancer.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DefaultLoadbalancer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultLoadbalancer != nil {
		l = m.DefaultLoadbalancer.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_TlsCertParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TlsCertParams != nil {
		l = m.TlsCertParams.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_Block) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Block != nil {
		l = m.Block.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DdosJsChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DdosJsChallenge != nil {
		l = m.DdosJsChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_L7DdosActionDefault) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.L7DdosActionDefault != nil {
		l = m.L7DdosActionDefault.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DisableBotDefense) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableBotDefense != nil {
		l = m.DisableBotDefense.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_BotDefense) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BotDefense != nil {
		l = m.BotDefense.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_NotReady) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NotReady != nil {
		l = m.NotReady.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_Ready) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ready != nil {
		l = m.Ready.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DNSVHostStatusType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovTypes(uint64(m.State))
	}
	l = len(m.ErrorDescription)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.SuggestedAction)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ExistingCertificateState)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.RenewCertificateState != 0 {
		n += 1 + sovTypes(uint64(m.RenewCertificateState))
	}
	return n
}

func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Routes) > 0 {
		for _, e := range m.Routes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.AdvertisePolicies) > 0 {
		for _, e := range m.AdvertisePolicies {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.RequestHeadersToAdd) > 0 {
		for _, e := range m.RequestHeadersToAdd {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ResponseHeadersToAdd) > 0 {
		for _, e := range m.ResponseHeadersToAdd {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ResponseHeadersToRemove) > 0 {
		for _, s := range m.ResponseHeadersToRemove {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.TlsCertificatesChoice != nil {
		n += m.TlsCertificatesChoice.Size()
	}
	if m.BufferPolicy != nil {
		l = m.BufferPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.CorsPolicy != nil {
		l = m.CorsPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Proxy != 0 {
		n += 1 + sovTypes(uint64(m.Proxy))
	}
	if len(m.RequestHeadersToRemove) > 0 {
		for _, s := range m.RequestHeadersToRemove {
			l = len(s)
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.WafType != nil {
		l = m.WafType.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.DynamicReverseProxy != nil {
		l = m.DynamicReverseProxy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.AddLocation {
		n += 3
	}
	if m.CompressionParams != nil {
		l = m.CompressionParams.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.CustomErrors) > 0 {
		for k, v := range m.CustomErrors {
			_ = k
			_ = v
			mapEntrySize := 1 + sovTypes(uint64(k)) + 1 + len(v) + sovTypes(uint64(len(v)))
			n += mapEntrySize + 2 + sovTypes(uint64(mapEntrySize))
		}
	}
	if m.MaxRequestHeaderSize != 0 {
		n += 2 + sovTypes(uint64(m.MaxRequestHeaderSize))
	}
	if m.ChallengeType != nil {
		n += m.ChallengeType.Size()
	}
	if len(m.UserIdentification) > 0 {
		for _, e := range m.UserIdentification {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.RateLimiter) > 0 {
		for _, e := range m.RateLimiter {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.RateLimiterAllowedPrefixes) > 0 {
		for _, e := range m.RateLimiterAllowedPrefixes {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.RetryPolicy != nil {
		l = m.RetryPolicy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.IdleTimeout != 0 {
		n += 2 + sovTypes(uint64(m.IdleTimeout))
	}
	if m.DisableDefaultErrorPages {
		n += 3
	}
	if m.DisableDnsResolve {
		n += 3
	}
	if m.TemporaryUserBlocking != nil {
		l = m.TemporaryUserBlocking.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.AuthenticationChoice != nil {
		n += m.AuthenticationChoice.Size()
	}
	if m.ServerHeaderChoice != nil {
		n += m.ServerHeaderChoice.Size()
	}
	if m.PathNormalizeChoice != nil {
		n += m.PathNormalizeChoice.Size()
	}
	if m.StrictSniHostHeaderCheckChoice != nil {
		n += m.StrictSniHostHeaderCheckChoice.Size()
	}
	if m.DefaultLbChoice != nil {
		n += m.DefaultLbChoice.Size()
	}
	if m.HeaderTransformationType != nil {
		l = m.HeaderTransformationType.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.CsrfPolicy != nil {
		l = m.CsrfPolicy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.CookiesToModify) > 0 {
		for _, e := range m.CookiesToModify {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.ConnectionIdleTimeout != 0 {
		n += 2 + sovTypes(uint64(m.ConnectionIdleTimeout))
	}
	if m.SlowDdosMitigation != nil {
		l = m.SlowDdosMitigation.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.ApiSpec != nil {
		l = m.ApiSpec.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.DomainCertMap) > 0 {
		for k, v := range m.DomainCertMap {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTypes(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + l
			n += mapEntrySize + 2 + sovTypes(uint64(mapEntrySize))
		}
	}
	if m.DnsProxyConfiguration != nil {
		l = m.DnsProxyConfiguration.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CreateSpecType_TlsParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TlsParameters != nil {
		l = m.TlsParameters.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_JsChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JsChallenge != nil {
		l = m.JsChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_CaptchaChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CaptchaChallenge != nil {
		l = m.CaptchaChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_NoChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoChallenge != nil {
		l = m.NoChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_NoAuthentication) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoAuthentication != nil {
		l = m.NoAuthentication.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_Authentication) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Authentication != nil {
		l = m.Authentication.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DefaultHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultHeader != nil {
		l = m.DefaultHeader.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_ServerName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServerName)
	n += 2 + l + sovTypes(uint64(l))
	return n
}
func (m *CreateSpecType_AppendServerName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AppendServerName)
	n += 2 + l + sovTypes(uint64(l))
	return n
}
func (m *CreateSpecType_PassThrough) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PassThrough != nil {
		l = m.PassThrough.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_EnablePathNormalize) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnablePathNormalize != nil {
		l = m.EnablePathNormalize.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DisablePathNormalize) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisablePathNormalize != nil {
		l = m.DisablePathNormalize.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_EnableStrictSniHostHeaderCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableStrictSniHostHeaderCheck != nil {
		l = m.EnableStrictSniHostHeaderCheck.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_AdditionalDomains) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdditionalDomains != nil {
		l = m.AdditionalDomains.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_NonDefaultLoadbalancer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NonDefaultLoadbalancer != nil {
		l = m.NonDefaultLoadbalancer.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DefaultLoadbalancer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultLoadbalancer != nil {
		l = m.DefaultLoadbalancer.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_TlsCertParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TlsCertParams != nil {
		l = m.TlsCertParams.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Routes) > 0 {
		for _, e := range m.Routes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.AdvertisePolicies) > 0 {
		for _, e := range m.AdvertisePolicies {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.RequestHeadersToAdd) > 0 {
		for _, e := range m.RequestHeadersToAdd {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ResponseHeadersToAdd) > 0 {
		for _, e := range m.ResponseHeadersToAdd {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ResponseHeadersToRemove) > 0 {
		for _, s := range m.ResponseHeadersToRemove {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.TlsCertificatesChoice != nil {
		n += m.TlsCertificatesChoice.Size()
	}
	if m.BufferPolicy != nil {
		l = m.BufferPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.CorsPolicy != nil {
		l = m.CorsPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Proxy != 0 {
		n += 1 + sovTypes(uint64(m.Proxy))
	}
	if len(m.RequestHeadersToRemove) > 0 {
		for _, s := range m.RequestHeadersToRemove {
			l = len(s)
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.WafType != nil {
		l = m.WafType.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.DynamicReverseProxy != nil {
		l = m.DynamicReverseProxy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.AddLocation {
		n += 3
	}
	if m.CompressionParams != nil {
		l = m.CompressionParams.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.CustomErrors) > 0 {
		for k, v := range m.CustomErrors {
			_ = k
			_ = v
			mapEntrySize := 1 + sovTypes(uint64(k)) + 1 + len(v) + sovTypes(uint64(len(v)))
			n += mapEntrySize + 2 + sovTypes(uint64(mapEntrySize))
		}
	}
	if m.MaxRequestHeaderSize != 0 {
		n += 2 + sovTypes(uint64(m.MaxRequestHeaderSize))
	}
	if m.ChallengeType != nil {
		n += m.ChallengeType.Size()
	}
	if len(m.UserIdentification) > 0 {
		for _, e := range m.UserIdentification {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.RateLimiter) > 0 {
		for _, e := range m.RateLimiter {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.RateLimiterAllowedPrefixes) > 0 {
		for _, e := range m.RateLimiterAllowedPrefixes {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.RetryPolicy != nil {
		l = m.RetryPolicy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.IdleTimeout != 0 {
		n += 2 + sovTypes(uint64(m.IdleTimeout))
	}
	if m.DisableDefaultErrorPages {
		n += 3
	}
	if m.DisableDnsResolve {
		n += 3
	}
	if m.TemporaryUserBlocking != nil {
		l = m.TemporaryUserBlocking.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.AuthenticationChoice != nil {
		n += m.AuthenticationChoice.Size()
	}
	if m.ServerHeaderChoice != nil {
		n += m.ServerHeaderChoice.Size()
	}
	if m.PathNormalizeChoice != nil {
		n += m.PathNormalizeChoice.Size()
	}
	if m.StrictSniHostHeaderCheckChoice != nil {
		n += m.StrictSniHostHeaderCheckChoice.Size()
	}
	if m.DefaultLbChoice != nil {
		n += m.DefaultLbChoice.Size()
	}
	if m.HeaderTransformationType != nil {
		l = m.HeaderTransformationType.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.CsrfPolicy != nil {
		l = m.CsrfPolicy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.CookiesToModify) > 0 {
		for _, e := range m.CookiesToModify {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.ConnectionIdleTimeout != 0 {
		n += 2 + sovTypes(uint64(m.ConnectionIdleTimeout))
	}
	if m.SlowDdosMitigation != nil {
		l = m.SlowDdosMitigation.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.ApiSpec != nil {
		l = m.ApiSpec.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.DomainCertMap) > 0 {
		for k, v := range m.DomainCertMap {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTypes(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + l
			n += mapEntrySize + 2 + sovTypes(uint64(mapEntrySize))
		}
	}
	if m.DnsProxyConfiguration != nil {
		l = m.DnsProxyConfiguration.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ReplaceSpecType_TlsParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TlsParameters != nil {
		l = m.TlsParameters.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_JsChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JsChallenge != nil {
		l = m.JsChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_CaptchaChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CaptchaChallenge != nil {
		l = m.CaptchaChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_NoChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoChallenge != nil {
		l = m.NoChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_NoAuthentication) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoAuthentication != nil {
		l = m.NoAuthentication.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_Authentication) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Authentication != nil {
		l = m.Authentication.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DefaultHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultHeader != nil {
		l = m.DefaultHeader.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_ServerName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServerName)
	n += 2 + l + sovTypes(uint64(l))
	return n
}
func (m *ReplaceSpecType_AppendServerName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AppendServerName)
	n += 2 + l + sovTypes(uint64(l))
	return n
}
func (m *ReplaceSpecType_PassThrough) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PassThrough != nil {
		l = m.PassThrough.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_EnablePathNormalize) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnablePathNormalize != nil {
		l = m.EnablePathNormalize.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DisablePathNormalize) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisablePathNormalize != nil {
		l = m.DisablePathNormalize.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_EnableStrictSniHostHeaderCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableStrictSniHostHeaderCheck != nil {
		l = m.EnableStrictSniHostHeaderCheck.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_AdditionalDomains) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdditionalDomains != nil {
		l = m.AdditionalDomains.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_NonDefaultLoadbalancer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NonDefaultLoadbalancer != nil {
		l = m.NonDefaultLoadbalancer.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DefaultLoadbalancer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultLoadbalancer != nil {
		l = m.DefaultLoadbalancer.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_TlsCertParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TlsCertParams != nil {
		l = m.TlsCertParams.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Routes) > 0 {
		for _, e := range m.Routes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.AdvertisePolicies) > 0 {
		for _, e := range m.AdvertisePolicies {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.RequestHeadersToAdd) > 0 {
		for _, e := range m.RequestHeadersToAdd {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ResponseHeadersToAdd) > 0 {
		for _, e := range m.ResponseHeadersToAdd {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ResponseHeadersToRemove) > 0 {
		for _, s := range m.ResponseHeadersToRemove {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.TlsCertificatesChoice != nil {
		n += m.TlsCertificatesChoice.Size()
	}
	if m.Type != 0 {
		n += 1 + sovTypes(uint64(m.Type))
	}
	if m.BufferPolicy != nil {
		l = m.BufferPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.CorsPolicy != nil {
		l = m.CorsPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Proxy != 0 {
		n += 1 + sovTypes(uint64(m.Proxy))
	}
	if len(m.RequestHeadersToRemove) > 0 {
		for _, s := range m.RequestHeadersToRemove {
			l = len(s)
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.WafType != nil {
		l = m.WafType.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.DynamicReverseProxy != nil {
		l = m.DynamicReverseProxy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.AddLocation {
		n += 3
	}
	if m.CompressionParams != nil {
		l = m.CompressionParams.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.CustomErrors) > 0 {
		for k, v := range m.CustomErrors {
			_ = k
			_ = v
			mapEntrySize := 1 + sovTypes(uint64(k)) + 1 + len(v) + sovTypes(uint64(len(v)))
			n += mapEntrySize + 2 + sovTypes(uint64(mapEntrySize))
		}
	}
	if m.MaxRequestHeaderSize != 0 {
		n += 2 + sovTypes(uint64(m.MaxRequestHeaderSize))
	}
	if m.ChallengeType != nil {
		n += m.ChallengeType.Size()
	}
	if len(m.UserIdentification) > 0 {
		for _, e := range m.UserIdentification {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.RateLimiter) > 0 {
		for _, e := range m.RateLimiter {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.RateLimiterAllowedPrefixes) > 0 {
		for _, e := range m.RateLimiterAllowedPrefixes {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.RetryPolicy != nil {
		l = m.RetryPolicy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.IdleTimeout != 0 {
		n += 2 + sovTypes(uint64(m.IdleTimeout))
	}
	if m.DisableDefaultErrorPages {
		n += 3
	}
	if m.DisableDnsResolve {
		n += 3
	}
	if m.TemporaryUserBlocking != nil {
		l = m.TemporaryUserBlocking.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.AuthenticationChoice != nil {
		n += m.AuthenticationChoice.Size()
	}
	if m.ServerHeaderChoice != nil {
		n += m.ServerHeaderChoice.Size()
	}
	if m.PathNormalizeChoice != nil {
		n += m.PathNormalizeChoice.Size()
	}
	if m.StrictSniHostHeaderCheckChoice != nil {
		n += m.StrictSniHostHeaderCheckChoice.Size()
	}
	if m.CdnService != nil {
		l = m.CdnService.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.DefaultLbChoice != nil {
		n += m.DefaultLbChoice.Size()
	}
	if m.HeaderTransformationType != nil {
		l = m.HeaderTransformationType.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.CsrfPolicy != nil {
		l = m.CsrfPolicy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.CookiesToModify) > 0 {
		for _, e := range m.CookiesToModify {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.ConnectionIdleTimeout != 0 {
		n += 2 + sovTypes(uint64(m.ConnectionIdleTimeout))
	}
	if m.SlowDdosMitigation != nil {
		l = m.SlowDdosMitigation.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.ApiSpec != nil {
		l = m.ApiSpec.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.DomainCertMap) > 0 {
		for k, v := range m.DomainCertMap {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTypes(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + l
			n += mapEntrySize + 2 + sovTypes(uint64(mapEntrySize))
		}
	}
	if m.State != 0 {
		n += 2 + sovTypes(uint64(m.State))
	}
	l = len(m.HostName)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.DnsInfo) > 0 {
		for _, e := range m.DnsInfo {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.AutoCertInfo != nil {
		l = m.AutoCertInfo.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.DnsZoneStateChoice != nil {
		n += m.DnsZoneStateChoice.Size()
	}
	l = len(m.AutoCertErrorMsg)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.DnsProxyConfiguration != nil {
		l = m.DnsProxyConfiguration.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GetSpecType_TlsParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TlsParameters != nil {
		l = m.TlsParameters.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_JsChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JsChallenge != nil {
		l = m.JsChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_CaptchaChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CaptchaChallenge != nil {
		l = m.CaptchaChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_NoChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoChallenge != nil {
		l = m.NoChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_NoAuthentication) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoAuthentication != nil {
		l = m.NoAuthentication.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_Authentication) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Authentication != nil {
		l = m.Authentication.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DefaultHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultHeader != nil {
		l = m.DefaultHeader.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_ServerName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServerName)
	n += 2 + l + sovTypes(uint64(l))
	return n
}
func (m *GetSpecType_AppendServerName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AppendServerName)
	n += 2 + l + sovTypes(uint64(l))
	return n
}
func (m *GetSpecType_PassThrough) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PassThrough != nil {
		l = m.PassThrough.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_EnablePathNormalize) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnablePathNormalize != nil {
		l = m.EnablePathNormalize.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DisablePathNormalize) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisablePathNormalize != nil {
		l = m.DisablePathNormalize.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_EnableStrictSniHostHeaderCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableStrictSniHostHeaderCheck != nil {
		l = m.EnableStrictSniHostHeaderCheck.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_AdditionalDomains) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdditionalDomains != nil {
		l = m.AdditionalDomains.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_NonDefaultLoadbalancer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NonDefaultLoadbalancer != nil {
		l = m.NonDefaultLoadbalancer.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DefaultLoadbalancer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultLoadbalancer != nil {
		l = m.DefaultLoadbalancer.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_TlsCertParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TlsCertParams != nil {
		l = m.TlsCertParams.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_NotReady) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NotReady != nil {
		l = m.NotReady.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_Ready) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ready != nil {
		l = m.Ready.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *VirtualHostID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VirtualHostID{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VerStatusType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForCoalescedVirtualHosts := "[]*VirtualHostID{"
	for _, f := range this.CoalescedVirtualHosts {
		repeatedStringForCoalescedVirtualHosts += strings.Replace(f.String(), "VirtualHostID", "VirtualHostID", 1) + ","
	}
	repeatedStringForCoalescedVirtualHosts += "}"
	repeatedStringForNonCoalescedVirtualHosts := "[]*VirtualHostID{"
	for _, f := range this.NonCoalescedVirtualHosts {
		repeatedStringForNonCoalescedVirtualHosts += strings.Replace(f.String(), "VirtualHostID", "VirtualHostID", 1) + ","
	}
	repeatedStringForNonCoalescedVirtualHosts += "}"
	repeatedStringForCoalescedVhosts := "[]*ObjectRefType{"
	for _, f := range this.CoalescedVhosts {
		repeatedStringForCoalescedVhosts += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForCoalescedVhosts += "}"
	repeatedStringForNonCoalescedVhosts := "[]*ObjectRefType{"
	for _, f := range this.NonCoalescedVhosts {
		repeatedStringForNonCoalescedVhosts += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForNonCoalescedVhosts += "}"
	s := strings.Join([]string{`&VerStatusType{`,
		`CoalescedVirtualHosts:` + repeatedStringForCoalescedVirtualHosts + `,`,
		`NonCoalescedVirtualHosts:` + repeatedStringForNonCoalescedVirtualHosts + `,`,
		`AdvertisePolicy:` + strings.Replace(fmt.Sprintf("%v", this.AdvertisePolicy), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`CoalescedVhosts:` + repeatedStringForCoalescedVhosts + `,`,
		`NonCoalescedVhosts:` + repeatedStringForNonCoalescedVhosts + `,`,
		`}`,
	}, "")
	return s
}
func (this *JavaScriptConfigType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JavaScriptConfigType{`,
		`CachePrefix:` + fmt.Sprintf("%v", this.CachePrefix) + `,`,
		`ScriptConfig:` + strings.Replace(fmt.Sprintf("%v", this.ScriptConfig), "Struct", "types.Struct", 1) + `,`,
		`CustomScriptUrl:` + fmt.Sprintf("%v", this.CustomScriptUrl) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DynamicReverseProxyType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForResolutionNetwork := "[]*ObjectRefType{"
	for _, f := range this.ResolutionNetwork {
		repeatedStringForResolutionNetwork += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForResolutionNetwork += "}"
	s := strings.Join([]string{`&DynamicReverseProxyType{`,
		`ResolveEndpointDynamically:` + fmt.Sprintf("%v", this.ResolveEndpointDynamically) + `,`,
		`ResolutionNetworkType:` + fmt.Sprintf("%v", this.ResolutionNetworkType) + `,`,
		`ResolutionNetwork:` + repeatedStringForResolutionNetwork + `,`,
		`ConnectionTimeout:` + fmt.Sprintf("%v", this.ConnectionTimeout) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CompressionType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CompressionType{`,
		`ContentLength:` + fmt.Sprintf("%v", this.ContentLength) + `,`,
		`ContentType:` + fmt.Sprintf("%v", this.ContentType) + `,`,
		`DisableOnEtagHeader:` + fmt.Sprintf("%v", this.DisableOnEtagHeader) + `,`,
		`RemoveAcceptEncodingHeader:` + fmt.Sprintf("%v", this.RemoveAcceptEncodingHeader) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JavascriptChallengeType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JavascriptChallengeType{`,
		`JsScriptDelay:` + fmt.Sprintf("%v", this.JsScriptDelay) + `,`,
		`CookieExpiry:` + fmt.Sprintf("%v", this.CookieExpiry) + `,`,
		`CustomPage:` + fmt.Sprintf("%v", this.CustomPage) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CaptchaChallengeType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CaptchaChallengeType{`,
		`CookieExpiry:` + fmt.Sprintf("%v", this.CookieExpiry) + `,`,
		`CustomPage:` + fmt.Sprintf("%v", this.CustomPage) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TemporaryUserBlockingType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TemporaryUserBlockingType{`,
		`CustomPage:` + fmt.Sprintf("%v", this.CustomPage) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DNSRecord) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DNSRecord{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AutoCertInfoType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDnsRecords := "[]*DNSRecord{"
	for _, f := range this.DnsRecords {
		repeatedStringForDnsRecords += strings.Replace(f.String(), "DNSRecord", "DNSRecord", 1) + ","
	}
	repeatedStringForDnsRecords += "}"
	s := strings.Join([]string{`&AutoCertInfoType{`,
		`AutoCertState:` + fmt.Sprintf("%v", this.AutoCertState) + `,`,
		`AutoCertExpiry:` + strings.Replace(fmt.Sprintf("%v", this.AutoCertExpiry), "Timestamp", "types.Timestamp", 1) + `,`,
		`AutoCertSubject:` + fmt.Sprintf("%v", this.AutoCertSubject) + `,`,
		`AutoCertIssuer:` + fmt.Sprintf("%v", this.AutoCertIssuer) + `,`,
		`DnsRecords:` + repeatedStringForDnsRecords + `,`,
		`StateStartTime:` + strings.Replace(fmt.Sprintf("%v", this.StateStartTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AuthenticationDetails) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAuthConfig := "[]*ObjectRefType{"
	for _, f := range this.AuthConfig {
		repeatedStringForAuthConfig += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForAuthConfig += "}"
	s := strings.Join([]string{`&AuthenticationDetails{`,
		`AuthConfig:` + repeatedStringForAuthConfig + `,`,
		`CookieParamsChoice:` + fmt.Sprintf("%v", this.CookieParamsChoice) + `,`,
		`RedirectUrlChoice:` + fmt.Sprintf("%v", this.RedirectUrlChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AuthenticationDetails_UseAuthObjectConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthenticationDetails_UseAuthObjectConfig{`,
		`UseAuthObjectConfig:` + strings.Replace(fmt.Sprintf("%v", this.UseAuthObjectConfig), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AuthenticationDetails_CookieParams) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthenticationDetails_CookieParams{`,
		`CookieParams:` + strings.Replace(fmt.Sprintf("%v", this.CookieParams), "CookieParams", "authentication.CookieParams", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AuthenticationDetails_RedirectUrl) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthenticationDetails_RedirectUrl{`,
		`RedirectUrl:` + fmt.Sprintf("%v", this.RedirectUrl) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AuthenticationDetails_RedirectDynamic) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthenticationDetails_RedirectDynamic{`,
		`RedirectDynamic:` + strings.Replace(fmt.Sprintf("%v", this.RedirectDynamic), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PolicyBasedChallenge) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForMaliciousUserMitigation := "[]*ObjectRefType{"
	for _, f := range this.MaliciousUserMitigation {
		repeatedStringForMaliciousUserMitigation += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForMaliciousUserMitigation += "}"
	s := strings.Join([]string{`&PolicyBasedChallenge{`,
		`JsChallenge:` + strings.Replace(this.JsChallenge.String(), "JavascriptChallengeType", "JavascriptChallengeType", 1) + `,`,
		`CaptchaChallenge:` + strings.Replace(this.CaptchaChallenge.String(), "CaptchaChallengeType", "CaptchaChallengeType", 1) + `,`,
		`TemporaryUserBlocking:` + strings.Replace(this.TemporaryUserBlocking.String(), "TemporaryUserBlockingType", "TemporaryUserBlockingType", 1) + `,`,
		`ChallengeChoice:` + fmt.Sprintf("%v", this.ChallengeChoice) + `,`,
		`MaliciousUserMitigation:` + repeatedStringForMaliciousUserMitigation + `,`,
		`}`,
	}, "")
	return s
}
func (this *PolicyBasedChallenge_NoChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PolicyBasedChallenge_NoChallenge{`,
		`NoChallenge:` + strings.Replace(fmt.Sprintf("%v", this.NoChallenge), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PolicyBasedChallenge_AlwaysEnableJsChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PolicyBasedChallenge_AlwaysEnableJsChallenge{`,
		`AlwaysEnableJsChallenge:` + strings.Replace(fmt.Sprintf("%v", this.AlwaysEnableJsChallenge), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PolicyBasedChallenge_AlwaysEnableCaptchaChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PolicyBasedChallenge_AlwaysEnableCaptchaChallenge{`,
		`AlwaysEnableCaptchaChallenge:` + strings.Replace(fmt.Sprintf("%v", this.AlwaysEnableCaptchaChallenge), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ShapeBotDefenseConfigType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForInstance := "[]*ObjectRefType{"
	for _, f := range this.Instance {
		repeatedStringForInstance += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForInstance += "}"
	keysForBlockingPages := make([]string, 0, len(this.BlockingPages))
	for k, _ := range this.BlockingPages {
		keysForBlockingPages = append(keysForBlockingPages, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForBlockingPages)
	mapStringForBlockingPages := "map[string]string{"
	for _, k := range keysForBlockingPages {
		mapStringForBlockingPages += fmt.Sprintf("%v: %v,", k, this.BlockingPages[k])
	}
	mapStringForBlockingPages += "}"
	s := strings.Join([]string{`&ShapeBotDefenseConfigType{`,
		`ApplicationId:` + fmt.Sprintf("%v", this.ApplicationId) + `,`,
		`ApiAuthKey:` + strings.Replace(fmt.Sprintf("%v", this.ApiAuthKey), "SecretType", "schema.SecretType", 1) + `,`,
		`Instance:` + repeatedStringForInstance + `,`,
		`Timeout:` + fmt.Sprintf("%v", this.Timeout) + `,`,
		`BlockingPages:` + mapStringForBlockingPages + `,`,
		`ReloadHeaderName:` + fmt.Sprintf("%v", this.ReloadHeaderName) + `,`,
		`JsPath:` + fmt.Sprintf("%v", this.JsPath) + `,`,
		`Mode:` + fmt.Sprintf("%v", this.Mode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceDomain) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceDomain{`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`ServiceDomain:` + fmt.Sprintf("%v", this.ServiceDomain) + `,`,
		`InternalServiceDomain:` + fmt.Sprintf("%v", this.InternalServiceDomain) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CdnServiceType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForServiceDomains := "[]*ServiceDomain{"
	for _, f := range this.ServiceDomains {
		repeatedStringForServiceDomains += strings.Replace(f.String(), "ServiceDomain", "ServiceDomain", 1) + ","
	}
	repeatedStringForServiceDomains += "}"
	s := strings.Join([]string{`&CdnServiceType{`,
		`ContentChoice:` + fmt.Sprintf("%v", this.ContentChoice) + `,`,
		`CacheTtl:` + fmt.Sprintf("%v", this.CacheTtl) + `,`,
		`ServiceDomains:` + repeatedStringForServiceDomains + `,`,
		`}`,
	}, "")
	return s
}
func (this *CdnServiceType_DownloadDelivery) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CdnServiceType_DownloadDelivery{`,
		`DownloadDelivery:` + strings.Replace(fmt.Sprintf("%v", this.DownloadDelivery), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CdnServiceType_LiveStreaming) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CdnServiceType_LiveStreaming{`,
		`LiveStreaming:` + strings.Replace(fmt.Sprintf("%v", this.LiveStreaming), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClientIPHeaders) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClientIPHeaders{`,
		`ClientIpHeaders:` + fmt.Sprintf("%v", this.ClientIpHeaders) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DNSProxyConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForIrules := "[]*ObjectRefType{"
	for _, f := range this.Irules {
		repeatedStringForIrules += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForIrules += "}"
	s := strings.Join([]string{`&DNSProxyConfiguration{`,
		`DdosProfile:` + strings.Replace(this.DdosProfile.String(), "DNSDDoSProfile", "DNSDDoSProfile", 1) + `,`,
		`CacheProfile:` + strings.Replace(this.CacheProfile.String(), "DNSCacheProfile", "DNSCacheProfile", 1) + `,`,
		`ProtocolInspection:` + strings.Replace(fmt.Sprintf("%v", this.ProtocolInspection), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`Irules:` + repeatedStringForIrules + `,`,
		`}`,
	}, "")
	return s
}
func (this *DNSDDoSProfile) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DNSDDoSProfile{`,
		`DdosMitigationChoice:` + fmt.Sprintf("%v", this.DdosMitigationChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DNSDDoSProfile_EnableDdosMitigation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DNSDDoSProfile_EnableDdosMitigation{`,
		`EnableDdosMitigation:` + strings.Replace(fmt.Sprintf("%v", this.EnableDdosMitigation), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DNSDDoSProfile_DisableDdosMitigation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DNSDDoSProfile_DisableDdosMitigation{`,
		`DisableDdosMitigation:` + strings.Replace(fmt.Sprintf("%v", this.DisableDdosMitigation), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DNSCacheProfile) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DNSCacheProfile{`,
		`CacheProfileChoice:` + fmt.Sprintf("%v", this.CacheProfileChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DNSCacheProfile_DisableCacheProfile) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DNSCacheProfile_DisableCacheProfile{`,
		`DisableCacheProfile:` + strings.Replace(fmt.Sprintf("%v", this.DisableCacheProfile), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DNSCacheProfile_CacheSize) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DNSCacheProfile_CacheSize{`,
		`CacheSize:` + fmt.Sprintf("%v", this.CacheSize) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SlowDDoSMitigation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SlowDDoSMitigation{`,
		`RequestTimeoutChoice:` + fmt.Sprintf("%v", this.RequestTimeoutChoice) + `,`,
		`RequestHeadersTimeout:` + fmt.Sprintf("%v", this.RequestHeadersTimeout) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SlowDDoSMitigation_RequestTimeout) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SlowDDoSMitigation_RequestTimeout{`,
		`RequestTimeout:` + fmt.Sprintf("%v", this.RequestTimeout) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SlowDDoSMitigation_DisableRequestTimeout) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SlowDDoSMitigation_DisableRequestTimeout{`,
		`DisableRequestTimeout:` + strings.Replace(fmt.Sprintf("%v", this.DisableRequestTimeout), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DomainCertificates) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRsaCertificates := "[]*ObjectRefType{"
	for _, f := range this.RsaCertificates {
		repeatedStringForRsaCertificates += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForRsaCertificates += "}"
	repeatedStringForEcdsaCertificates := "[]*ObjectRefType{"
	for _, f := range this.EcdsaCertificates {
		repeatedStringForEcdsaCertificates += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForEcdsaCertificates += "}"
	s := strings.Join([]string{`&DomainCertificates{`,
		`RsaCertificates:` + repeatedStringForRsaCertificates + `,`,
		`EcdsaCertificates:` + repeatedStringForEcdsaCertificates + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApiSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApiSpec{`,
		`ApiDefinition:` + strings.Replace(fmt.Sprintf("%v", this.ApiDefinition), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`OpenApiValidationChoice:` + fmt.Sprintf("%v", this.OpenApiValidationChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApiSpec_DisableOpenApiValidation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApiSpec_DisableOpenApiValidation{`,
		`DisableOpenApiValidation:` + strings.Replace(fmt.Sprintf("%v", this.DisableOpenApiValidation), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApiSpec_EnableOpenApiValidation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApiSpec_EnableOpenApiValidation{`,
		`EnableOpenApiValidation:` + strings.Replace(fmt.Sprintf("%v", this.EnableOpenApiValidation), "OpenApiValidationSettings", "OpenApiValidationSettings", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpenApiValidationSettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpenApiValidationSettings{`,
		`FailOversizedBodyValidation:` + fmt.Sprintf("%v", this.FailOversizedBodyValidation) + `,`,
		`AllowOnlySpecifiedQueryParams:` + fmt.Sprintf("%v", this.AllowOnlySpecifiedQueryParams) + `,`,
		`AllowOnlySpecifiedHeaders:` + fmt.Sprintf("%v", this.AllowOnlySpecifiedHeaders) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HttpProtocolOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HttpProtocolOptions{`,
		`HttpProtocolChoice:` + fmt.Sprintf("%v", this.HttpProtocolChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HttpProtocolOptions_HttpProtocolEnableV1Only) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HttpProtocolOptions_HttpProtocolEnableV1Only{`,
		`HttpProtocolEnableV1Only:` + strings.Replace(fmt.Sprintf("%v", this.HttpProtocolEnableV1Only), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HttpProtocolOptions_HttpProtocolEnableV2Only) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HttpProtocolOptions_HttpProtocolEnableV2Only{`,
		`HttpProtocolEnableV2Only:` + strings.Replace(fmt.Sprintf("%v", this.HttpProtocolEnableV2Only), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HttpProtocolOptions_HttpProtocolEnableV1V2) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HttpProtocolOptions_HttpProtocolEnableV1V2{`,
		`HttpProtocolEnableV1V2:` + strings.Replace(fmt.Sprintf("%v", this.HttpProtocolEnableV1V2), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HttpRedirectOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HttpRedirectOptions{`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRoutes := "[]*ObjectRefType{"
	for _, f := range this.Routes {
		repeatedStringForRoutes += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForRoutes += "}"
	repeatedStringForAdvertisePolicies := "[]*ObjectRefType{"
	for _, f := range this.AdvertisePolicies {
		repeatedStringForAdvertisePolicies += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForAdvertisePolicies += "}"
	repeatedStringForRequestHeadersToAdd := "[]*HeaderManipulationOptionType{"
	for _, f := range this.RequestHeadersToAdd {
		repeatedStringForRequestHeadersToAdd += strings.Replace(fmt.Sprintf("%v", f), "HeaderManipulationOptionType", "schema.HeaderManipulationOptionType", 1) + ","
	}
	repeatedStringForRequestHeadersToAdd += "}"
	repeatedStringForResponseHeadersToAdd := "[]*HeaderManipulationOptionType{"
	for _, f := range this.ResponseHeadersToAdd {
		repeatedStringForResponseHeadersToAdd += strings.Replace(fmt.Sprintf("%v", f), "HeaderManipulationOptionType", "schema.HeaderManipulationOptionType", 1) + ","
	}
	repeatedStringForResponseHeadersToAdd += "}"
	repeatedStringForJwt := "[]*ObjectRefType{"
	for _, f := range this.Jwt {
		repeatedStringForJwt += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForJwt += "}"
	repeatedStringForUserIdentification := "[]*ObjectRefType{"
	for _, f := range this.UserIdentification {
		repeatedStringForUserIdentification += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForUserIdentification += "}"
	repeatedStringForRateLimiter := "[]*ObjectRefType{"
	for _, f := range this.RateLimiter {
		repeatedStringForRateLimiter += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForRateLimiter += "}"
	repeatedStringForRateLimiterAllowedPrefixes := "[]*ObjectRefType{"
	for _, f := range this.RateLimiterAllowedPrefixes {
		repeatedStringForRateLimiterAllowedPrefixes += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForRateLimiterAllowedPrefixes += "}"
	repeatedStringForMaliciousUserMitigation := "[]*ObjectRefType{"
	for _, f := range this.MaliciousUserMitigation {
		repeatedStringForMaliciousUserMitigation += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForMaliciousUserMitigation += "}"
	repeatedStringForCookiesToModify := "[]*CookieManipulationOptionType{"
	for _, f := range this.CookiesToModify {
		repeatedStringForCookiesToModify += strings.Replace(fmt.Sprintf("%v", f), "CookieManipulationOptionType", "schema.CookieManipulationOptionType", 1) + ","
	}
	repeatedStringForCookiesToModify += "}"
	repeatedStringForDnsDomains := "[]*ObjectRefType{"
	for _, f := range this.DnsDomains {
		repeatedStringForDnsDomains += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForDnsDomains += "}"
	repeatedStringForDnsInfo := "[]*DnsInfo{"
	for _, f := range this.DnsInfo {
		repeatedStringForDnsInfo += strings.Replace(fmt.Sprintf("%v", f), "DnsInfo", "virtual_host_dns_info.DnsInfo", 1) + ","
	}
	repeatedStringForDnsInfo += "}"
	repeatedStringForServicePolicySets := "[]*ObjectRefType{"
	for _, f := range this.ServicePolicySets {
		repeatedStringForServicePolicySets += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForServicePolicySets += "}"
	repeatedStringForFastAcl := "[]*ObjectRefType{"
	for _, f := range this.FastAcl {
		repeatedStringForFastAcl += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForFastAcl += "}"
	repeatedStringForL7Acl := "[]*ObjectRefType{"
	for _, f := range this.L7Acl {
		repeatedStringForL7Acl += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForL7Acl += "}"
	repeatedStringForDnsZones := "[]*ObjectRefType{"
	for _, f := range this.DnsZones {
		repeatedStringForDnsZones += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForDnsZones += "}"
	keysForCustomErrors := make([]uint32, 0, len(this.CustomErrors))
	for k, _ := range this.CustomErrors {
		keysForCustomErrors = append(keysForCustomErrors, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForCustomErrors)
	mapStringForCustomErrors := "map[uint32]string{"
	for _, k := range keysForCustomErrors {
		mapStringForCustomErrors += fmt.Sprintf("%v: %v,", k, this.CustomErrors[k])
	}
	mapStringForCustomErrors += "}"
	keysForDomainCertMap := make([]string, 0, len(this.DomainCertMap))
	for k, _ := range this.DomainCertMap {
		keysForDomainCertMap = append(keysForDomainCertMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForDomainCertMap)
	mapStringForDomainCertMap := "map[string]*DomainCertificates{"
	for _, k := range keysForDomainCertMap {
		mapStringForDomainCertMap += fmt.Sprintf("%v: %v,", k, this.DomainCertMap[k])
	}
	mapStringForDomainCertMap += "}"
	s := strings.Join([]string{`&GlobalSpecType{`,
		`Domains:` + fmt.Sprintf("%v", this.Domains) + `,`,
		`Routes:` + repeatedStringForRoutes + `,`,
		`JavascriptInfo:` + strings.Replace(this.JavascriptInfo.String(), "JavaScriptConfigType", "JavaScriptConfigType", 1) + `,`,
		`AdvertisePolicies:` + repeatedStringForAdvertisePolicies + `,`,
		`RequestHeadersToAdd:` + repeatedStringForRequestHeadersToAdd + `,`,
		`ResponseHeadersToAdd:` + repeatedStringForResponseHeadersToAdd + `,`,
		`ResponseHeadersToRemove:` + fmt.Sprintf("%v", this.ResponseHeadersToRemove) + `,`,
		`TlsCertificatesChoice:` + fmt.Sprintf("%v", this.TlsCertificatesChoice) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`BufferPolicy:` + strings.Replace(fmt.Sprintf("%v", this.BufferPolicy), "BufferConfigType", "schema.BufferConfigType", 1) + `,`,
		`CorsPolicy:` + strings.Replace(fmt.Sprintf("%v", this.CorsPolicy), "CorsPolicy", "schema.CorsPolicy", 1) + `,`,
		`Proxy:` + fmt.Sprintf("%v", this.Proxy) + `,`,
		`Jwt:` + repeatedStringForJwt + `,`,
		`RequestHeadersToRemove:` + fmt.Sprintf("%v", this.RequestHeadersToRemove) + `,`,
		`WafType:` + strings.Replace(fmt.Sprintf("%v", this.WafType), "WafType", "schema.WafType", 1) + `,`,
		`DynamicReverseProxy:` + strings.Replace(this.DynamicReverseProxy.String(), "DynamicReverseProxyType", "DynamicReverseProxyType", 1) + `,`,
		`AddLocation:` + fmt.Sprintf("%v", this.AddLocation) + `,`,
		`CompressionParams:` + strings.Replace(this.CompressionParams.String(), "CompressionType", "CompressionType", 1) + `,`,
		`CustomErrors:` + mapStringForCustomErrors + `,`,
		`MaxRequestHeaderSize:` + fmt.Sprintf("%v", this.MaxRequestHeaderSize) + `,`,
		`ChallengeType:` + fmt.Sprintf("%v", this.ChallengeType) + `,`,
		`UserIdentification:` + repeatedStringForUserIdentification + `,`,
		`RateLimiter:` + repeatedStringForRateLimiter + `,`,
		`RateLimiterAllowedPrefixes:` + repeatedStringForRateLimiterAllowedPrefixes + `,`,
		`RetryPolicy:` + strings.Replace(fmt.Sprintf("%v", this.RetryPolicy), "RetryPolicyType", "schema.RetryPolicyType", 1) + `,`,
		`IdleTimeout:` + fmt.Sprintf("%v", this.IdleTimeout) + `,`,
		`DisableDefaultErrorPages:` + fmt.Sprintf("%v", this.DisableDefaultErrorPages) + `,`,
		`DisableDnsResolve:` + fmt.Sprintf("%v", this.DisableDnsResolve) + `,`,
		`TemporaryUserBlocking:` + strings.Replace(this.TemporaryUserBlocking.String(), "TemporaryUserBlockingType", "TemporaryUserBlockingType", 1) + `,`,
		`MaliciousUserMitigation:` + repeatedStringForMaliciousUserMitigation + `,`,
		`TlsIntercept:` + strings.Replace(fmt.Sprintf("%v", this.TlsIntercept), "TlsInterceptionType", "schema.TlsInterceptionType", 1) + `,`,
		`AuthenticationChoice:` + fmt.Sprintf("%v", this.AuthenticationChoice) + `,`,
		`ServerHeaderChoice:` + fmt.Sprintf("%v", this.ServerHeaderChoice) + `,`,
		`PathNormalizeChoice:` + fmt.Sprintf("%v", this.PathNormalizeChoice) + `,`,
		`StrictSniHostHeaderCheckChoice:` + fmt.Sprintf("%v", this.StrictSniHostHeaderCheckChoice) + `,`,
		`CdnService:` + strings.Replace(this.CdnService.String(), "CdnServiceType", "CdnServiceType", 1) + `,`,
		`TrustClientIpHeadersChoice:` + fmt.Sprintf("%v", this.TrustClientIpHeadersChoice) + `,`,
		`DefaultLbChoice:` + fmt.Sprintf("%v", this.DefaultLbChoice) + `,`,
		`HeaderTransformationType:` + strings.Replace(fmt.Sprintf("%v", this.HeaderTransformationType), "HeaderTransformationType", "schema.HeaderTransformationType", 1) + `,`,
		`CsrfPolicy:` + strings.Replace(fmt.Sprintf("%v", this.CsrfPolicy), "CsrfPolicy", "schema.CsrfPolicy", 1) + `,`,
		`CookiesToModify:` + repeatedStringForCookiesToModify + `,`,
		`ConnectionIdleTimeout:` + fmt.Sprintf("%v", this.ConnectionIdleTimeout) + `,`,
		`SlowDdosMitigation:` + strings.Replace(this.SlowDdosMitigation.String(), "SlowDDoSMitigation", "SlowDDoSMitigation", 1) + `,`,
		`ApiSpec:` + strings.Replace(this.ApiSpec.String(), "ApiSpec", "ApiSpec", 1) + `,`,
		`DomainCertMap:` + mapStringForDomainCertMap + `,`,
		`HttpProtocolOptions:` + strings.Replace(this.HttpProtocolOptions.String(), "HttpProtocolOptions", "HttpProtocolOptions", 1) + `,`,
		`DdosAutoMitigationAction:` + fmt.Sprintf("%v", this.DdosAutoMitigationAction) + `,`,
		`DnsVolterraManaged:` + fmt.Sprintf("%v", this.DnsVolterraManaged) + `,`,
		`DnsDomains:` + repeatedStringForDnsDomains + `,`,
		`AutoCert:` + fmt.Sprintf("%v", this.AutoCert) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`HostName:` + fmt.Sprintf("%v", this.HostName) + `,`,
		`DnsInfo:` + repeatedStringForDnsInfo + `,`,
		`AutoCertState:` + fmt.Sprintf("%v", this.AutoCertState) + `,`,
		`AutoCertInfo:` + strings.Replace(this.AutoCertInfo.String(), "AutoCertInfoType", "AutoCertInfoType", 1) + `,`,
		`UserDomains:` + fmt.Sprintf("%v", this.UserDomains) + `,`,
		`ServicePolicySets:` + repeatedStringForServicePolicySets + `,`,
		`LoadbalancerAlgorithm:` + fmt.Sprintf("%v", this.LoadbalancerAlgorithm) + `,`,
		`VolterraCert:` + fmt.Sprintf("%v", this.VolterraCert) + `,`,
		`BotDefenseChoice:` + fmt.Sprintf("%v", this.BotDefenseChoice) + `,`,
		`CheckIpReputation:` + fmt.Sprintf("%v", this.CheckIpReputation) + `,`,
		`FastAcl:` + repeatedStringForFastAcl + `,`,
		`L7Acl:` + repeatedStringForL7Acl + `,`,
		`DnsZones:` + repeatedStringForDnsZones + `,`,
		`DnsZoneStateChoice:` + fmt.Sprintf("%v", this.DnsZoneStateChoice) + `,`,
		`CustomCertExpiry:` + strings.Replace(fmt.Sprintf("%v", this.CustomCertExpiry), "Timestamp", "types.Timestamp", 1) + `,`,
		`AutoCertErrorMsg:` + fmt.Sprintf("%v", this.AutoCertErrorMsg) + `,`,
		`HttpRedirectOptions:` + strings.Replace(this.HttpRedirectOptions.String(), "HttpRedirectOptions", "HttpRedirectOptions", 1) + `,`,
		`DnsProxyConfiguration:` + strings.Replace(this.DnsProxyConfiguration.String(), "DNSProxyConfiguration", "DNSProxyConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_TlsParameters) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_TlsParameters{`,
		`TlsParameters:` + strings.Replace(fmt.Sprintf("%v", this.TlsParameters), "DownstreamTlsParamsType", "schema.DownstreamTlsParamsType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_JsChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_JsChallenge{`,
		`JsChallenge:` + strings.Replace(fmt.Sprintf("%v", this.JsChallenge), "JavascriptChallengeType", "JavascriptChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_CaptchaChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_CaptchaChallenge{`,
		`CaptchaChallenge:` + strings.Replace(fmt.Sprintf("%v", this.CaptchaChallenge), "CaptchaChallengeType", "CaptchaChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_NoChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_NoChallenge{`,
		`NoChallenge:` + strings.Replace(fmt.Sprintf("%v", this.NoChallenge), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_NoAuthentication) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_NoAuthentication{`,
		`NoAuthentication:` + strings.Replace(fmt.Sprintf("%v", this.NoAuthentication), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Authentication) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Authentication{`,
		`Authentication:` + strings.Replace(fmt.Sprintf("%v", this.Authentication), "AuthenticationDetails", "AuthenticationDetails", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_PolicyBasedChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_PolicyBasedChallenge{`,
		`PolicyBasedChallenge:` + strings.Replace(fmt.Sprintf("%v", this.PolicyBasedChallenge), "PolicyBasedChallenge", "PolicyBasedChallenge", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DefaultHeader) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DefaultHeader{`,
		`DefaultHeader:` + strings.Replace(fmt.Sprintf("%v", this.DefaultHeader), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_ServerName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_ServerName{`,
		`ServerName:` + fmt.Sprintf("%v", this.ServerName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_AppendServerName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_AppendServerName{`,
		`AppendServerName:` + fmt.Sprintf("%v", this.AppendServerName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_PassThrough) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_PassThrough{`,
		`PassThrough:` + strings.Replace(fmt.Sprintf("%v", this.PassThrough), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_EnablePathNormalize) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_EnablePathNormalize{`,
		`EnablePathNormalize:` + strings.Replace(fmt.Sprintf("%v", this.EnablePathNormalize), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DisablePathNormalize) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DisablePathNormalize{`,
		`DisablePathNormalize:` + strings.Replace(fmt.Sprintf("%v", this.DisablePathNormalize), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_EnableStrictSniHostHeaderCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_EnableStrictSniHostHeaderCheck{`,
		`EnableStrictSniHostHeaderCheck:` + strings.Replace(fmt.Sprintf("%v", this.EnableStrictSniHostHeaderCheck), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_AdditionalDomains) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_AdditionalDomains{`,
		`AdditionalDomains:` + strings.Replace(fmt.Sprintf("%v", this.AdditionalDomains), "DomainNameList", "schema.DomainNameList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DisableTrustClientIpHeaders) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DisableTrustClientIpHeaders{`,
		`DisableTrustClientIpHeaders:` + strings.Replace(fmt.Sprintf("%v", this.DisableTrustClientIpHeaders), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_EnableTrustClientIpHeaders) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_EnableTrustClientIpHeaders{`,
		`EnableTrustClientIpHeaders:` + strings.Replace(fmt.Sprintf("%v", this.EnableTrustClientIpHeaders), "ClientIPHeaders", "ClientIPHeaders", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_NonDefaultLoadbalancer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_NonDefaultLoadbalancer{`,
		`NonDefaultLoadbalancer:` + strings.Replace(fmt.Sprintf("%v", this.NonDefaultLoadbalancer), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DefaultLoadbalancer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DefaultLoadbalancer{`,
		`DefaultLoadbalancer:` + strings.Replace(fmt.Sprintf("%v", this.DefaultLoadbalancer), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_TlsCertParams) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_TlsCertParams{`,
		`TlsCertParams:` + strings.Replace(fmt.Sprintf("%v", this.TlsCertParams), "CertificateParamsType", "schema.CertificateParamsType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Block) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Block{`,
		`Block:` + strings.Replace(fmt.Sprintf("%v", this.Block), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DdosJsChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DdosJsChallenge{`,
		`DdosJsChallenge:` + strings.Replace(fmt.Sprintf("%v", this.DdosJsChallenge), "JavascriptChallengeType", "JavascriptChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_L7DdosActionDefault) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_L7DdosActionDefault{`,
		`L7DdosActionDefault:` + strings.Replace(fmt.Sprintf("%v", this.L7DdosActionDefault), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DisableBotDefense) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DisableBotDefense{`,
		`DisableBotDefense:` + strings.Replace(fmt.Sprintf("%v", this.DisableBotDefense), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_BotDefense) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_BotDefense{`,
		`BotDefense:` + strings.Replace(fmt.Sprintf("%v", this.BotDefense), "ShapeBotDefenseConfigType", "ShapeBotDefenseConfigType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_NotReady) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_NotReady{`,
		`NotReady:` + strings.Replace(fmt.Sprintf("%v", this.NotReady), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Ready) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Ready{`,
		`Ready:` + strings.Replace(fmt.Sprintf("%v", this.Ready), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DNSVHostStatusType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DNSVHostStatusType{`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`ErrorDescription:` + fmt.Sprintf("%v", this.ErrorDescription) + `,`,
		`SuggestedAction:` + fmt.Sprintf("%v", this.SuggestedAction) + `,`,
		`ExistingCertificateState:` + fmt.Sprintf("%v", this.ExistingCertificateState) + `,`,
		`RenewCertificateState:` + fmt.Sprintf("%v", this.RenewCertificateState) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRoutes := "[]*ObjectRefType{"
	for _, f := range this.Routes {
		repeatedStringForRoutes += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForRoutes += "}"
	repeatedStringForAdvertisePolicies := "[]*ObjectRefType{"
	for _, f := range this.AdvertisePolicies {
		repeatedStringForAdvertisePolicies += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForAdvertisePolicies += "}"
	repeatedStringForRequestHeadersToAdd := "[]*HeaderManipulationOptionType{"
	for _, f := range this.RequestHeadersToAdd {
		repeatedStringForRequestHeadersToAdd += strings.Replace(fmt.Sprintf("%v", f), "HeaderManipulationOptionType", "schema.HeaderManipulationOptionType", 1) + ","
	}
	repeatedStringForRequestHeadersToAdd += "}"
	repeatedStringForResponseHeadersToAdd := "[]*HeaderManipulationOptionType{"
	for _, f := range this.ResponseHeadersToAdd {
		repeatedStringForResponseHeadersToAdd += strings.Replace(fmt.Sprintf("%v", f), "HeaderManipulationOptionType", "schema.HeaderManipulationOptionType", 1) + ","
	}
	repeatedStringForResponseHeadersToAdd += "}"
	repeatedStringForUserIdentification := "[]*ObjectRefType{"
	for _, f := range this.UserIdentification {
		repeatedStringForUserIdentification += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForUserIdentification += "}"
	repeatedStringForRateLimiter := "[]*ObjectRefType{"
	for _, f := range this.RateLimiter {
		repeatedStringForRateLimiter += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForRateLimiter += "}"
	repeatedStringForRateLimiterAllowedPrefixes := "[]*ObjectRefType{"
	for _, f := range this.RateLimiterAllowedPrefixes {
		repeatedStringForRateLimiterAllowedPrefixes += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForRateLimiterAllowedPrefixes += "}"
	repeatedStringForCookiesToModify := "[]*CookieManipulationOptionType{"
	for _, f := range this.CookiesToModify {
		repeatedStringForCookiesToModify += strings.Replace(fmt.Sprintf("%v", f), "CookieManipulationOptionType", "schema.CookieManipulationOptionType", 1) + ","
	}
	repeatedStringForCookiesToModify += "}"
	keysForCustomErrors := make([]uint32, 0, len(this.CustomErrors))
	for k, _ := range this.CustomErrors {
		keysForCustomErrors = append(keysForCustomErrors, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForCustomErrors)
	mapStringForCustomErrors := "map[uint32]string{"
	for _, k := range keysForCustomErrors {
		mapStringForCustomErrors += fmt.Sprintf("%v: %v,", k, this.CustomErrors[k])
	}
	mapStringForCustomErrors += "}"
	keysForDomainCertMap := make([]string, 0, len(this.DomainCertMap))
	for k, _ := range this.DomainCertMap {
		keysForDomainCertMap = append(keysForDomainCertMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForDomainCertMap)
	mapStringForDomainCertMap := "map[string]*DomainCertificates{"
	for _, k := range keysForDomainCertMap {
		mapStringForDomainCertMap += fmt.Sprintf("%v: %v,", k, this.DomainCertMap[k])
	}
	mapStringForDomainCertMap += "}"
	s := strings.Join([]string{`&CreateSpecType{`,
		`Domains:` + fmt.Sprintf("%v", this.Domains) + `,`,
		`Routes:` + repeatedStringForRoutes + `,`,
		`AdvertisePolicies:` + repeatedStringForAdvertisePolicies + `,`,
		`RequestHeadersToAdd:` + repeatedStringForRequestHeadersToAdd + `,`,
		`ResponseHeadersToAdd:` + repeatedStringForResponseHeadersToAdd + `,`,
		`ResponseHeadersToRemove:` + fmt.Sprintf("%v", this.ResponseHeadersToRemove) + `,`,
		`TlsCertificatesChoice:` + fmt.Sprintf("%v", this.TlsCertificatesChoice) + `,`,
		`BufferPolicy:` + strings.Replace(fmt.Sprintf("%v", this.BufferPolicy), "BufferConfigType", "schema.BufferConfigType", 1) + `,`,
		`CorsPolicy:` + strings.Replace(fmt.Sprintf("%v", this.CorsPolicy), "CorsPolicy", "schema.CorsPolicy", 1) + `,`,
		`Proxy:` + fmt.Sprintf("%v", this.Proxy) + `,`,
		`RequestHeadersToRemove:` + fmt.Sprintf("%v", this.RequestHeadersToRemove) + `,`,
		`WafType:` + strings.Replace(fmt.Sprintf("%v", this.WafType), "WafType", "schema.WafType", 1) + `,`,
		`DynamicReverseProxy:` + strings.Replace(this.DynamicReverseProxy.String(), "DynamicReverseProxyType", "DynamicReverseProxyType", 1) + `,`,
		`AddLocation:` + fmt.Sprintf("%v", this.AddLocation) + `,`,
		`CompressionParams:` + strings.Replace(this.CompressionParams.String(), "CompressionType", "CompressionType", 1) + `,`,
		`CustomErrors:` + mapStringForCustomErrors + `,`,
		`MaxRequestHeaderSize:` + fmt.Sprintf("%v", this.MaxRequestHeaderSize) + `,`,
		`ChallengeType:` + fmt.Sprintf("%v", this.ChallengeType) + `,`,
		`UserIdentification:` + repeatedStringForUserIdentification + `,`,
		`RateLimiter:` + repeatedStringForRateLimiter + `,`,
		`RateLimiterAllowedPrefixes:` + repeatedStringForRateLimiterAllowedPrefixes + `,`,
		`RetryPolicy:` + strings.Replace(fmt.Sprintf("%v", this.RetryPolicy), "RetryPolicyType", "schema.RetryPolicyType", 1) + `,`,
		`IdleTimeout:` + fmt.Sprintf("%v", this.IdleTimeout) + `,`,
		`DisableDefaultErrorPages:` + fmt.Sprintf("%v", this.DisableDefaultErrorPages) + `,`,
		`DisableDnsResolve:` + fmt.Sprintf("%v", this.DisableDnsResolve) + `,`,
		`TemporaryUserBlocking:` + strings.Replace(this.TemporaryUserBlocking.String(), "TemporaryUserBlockingType", "TemporaryUserBlockingType", 1) + `,`,
		`AuthenticationChoice:` + fmt.Sprintf("%v", this.AuthenticationChoice) + `,`,
		`ServerHeaderChoice:` + fmt.Sprintf("%v", this.ServerHeaderChoice) + `,`,
		`PathNormalizeChoice:` + fmt.Sprintf("%v", this.PathNormalizeChoice) + `,`,
		`StrictSniHostHeaderCheckChoice:` + fmt.Sprintf("%v", this.StrictSniHostHeaderCheckChoice) + `,`,
		`DefaultLbChoice:` + fmt.Sprintf("%v", this.DefaultLbChoice) + `,`,
		`HeaderTransformationType:` + strings.Replace(fmt.Sprintf("%v", this.HeaderTransformationType), "HeaderTransformationType", "schema.HeaderTransformationType", 1) + `,`,
		`CsrfPolicy:` + strings.Replace(fmt.Sprintf("%v", this.CsrfPolicy), "CsrfPolicy", "schema.CsrfPolicy", 1) + `,`,
		`CookiesToModify:` + repeatedStringForCookiesToModify + `,`,
		`ConnectionIdleTimeout:` + fmt.Sprintf("%v", this.ConnectionIdleTimeout) + `,`,
		`SlowDdosMitigation:` + strings.Replace(this.SlowDdosMitigation.String(), "SlowDDoSMitigation", "SlowDDoSMitigation", 1) + `,`,
		`ApiSpec:` + strings.Replace(this.ApiSpec.String(), "ApiSpec", "ApiSpec", 1) + `,`,
		`DomainCertMap:` + mapStringForDomainCertMap + `,`,
		`DnsProxyConfiguration:` + strings.Replace(this.DnsProxyConfiguration.String(), "DNSProxyConfiguration", "DNSProxyConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_TlsParameters) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_TlsParameters{`,
		`TlsParameters:` + strings.Replace(fmt.Sprintf("%v", this.TlsParameters), "DownstreamTlsParamsType", "schema.DownstreamTlsParamsType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_JsChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_JsChallenge{`,
		`JsChallenge:` + strings.Replace(fmt.Sprintf("%v", this.JsChallenge), "JavascriptChallengeType", "JavascriptChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_CaptchaChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_CaptchaChallenge{`,
		`CaptchaChallenge:` + strings.Replace(fmt.Sprintf("%v", this.CaptchaChallenge), "CaptchaChallengeType", "CaptchaChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_NoChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_NoChallenge{`,
		`NoChallenge:` + strings.Replace(fmt.Sprintf("%v", this.NoChallenge), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_NoAuthentication) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_NoAuthentication{`,
		`NoAuthentication:` + strings.Replace(fmt.Sprintf("%v", this.NoAuthentication), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Authentication) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Authentication{`,
		`Authentication:` + strings.Replace(fmt.Sprintf("%v", this.Authentication), "AuthenticationDetails", "AuthenticationDetails", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DefaultHeader) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DefaultHeader{`,
		`DefaultHeader:` + strings.Replace(fmt.Sprintf("%v", this.DefaultHeader), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_ServerName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_ServerName{`,
		`ServerName:` + fmt.Sprintf("%v", this.ServerName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_AppendServerName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_AppendServerName{`,
		`AppendServerName:` + fmt.Sprintf("%v", this.AppendServerName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_PassThrough) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_PassThrough{`,
		`PassThrough:` + strings.Replace(fmt.Sprintf("%v", this.PassThrough), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_EnablePathNormalize) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_EnablePathNormalize{`,
		`EnablePathNormalize:` + strings.Replace(fmt.Sprintf("%v", this.EnablePathNormalize), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DisablePathNormalize) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DisablePathNormalize{`,
		`DisablePathNormalize:` + strings.Replace(fmt.Sprintf("%v", this.DisablePathNormalize), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_EnableStrictSniHostHeaderCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_EnableStrictSniHostHeaderCheck{`,
		`EnableStrictSniHostHeaderCheck:` + strings.Replace(fmt.Sprintf("%v", this.EnableStrictSniHostHeaderCheck), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_AdditionalDomains) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_AdditionalDomains{`,
		`AdditionalDomains:` + strings.Replace(fmt.Sprintf("%v", this.AdditionalDomains), "DomainNameList", "schema.DomainNameList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_NonDefaultLoadbalancer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_NonDefaultLoadbalancer{`,
		`NonDefaultLoadbalancer:` + strings.Replace(fmt.Sprintf("%v", this.NonDefaultLoadbalancer), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DefaultLoadbalancer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DefaultLoadbalancer{`,
		`DefaultLoadbalancer:` + strings.Replace(fmt.Sprintf("%v", this.DefaultLoadbalancer), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_TlsCertParams) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_TlsCertParams{`,
		`TlsCertParams:` + strings.Replace(fmt.Sprintf("%v", this.TlsCertParams), "CertificateParamsType", "schema.CertificateParamsType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRoutes := "[]*ObjectRefType{"
	for _, f := range this.Routes {
		repeatedStringForRoutes += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForRoutes += "}"
	repeatedStringForAdvertisePolicies := "[]*ObjectRefType{"
	for _, f := range this.AdvertisePolicies {
		repeatedStringForAdvertisePolicies += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForAdvertisePolicies += "}"
	repeatedStringForRequestHeadersToAdd := "[]*HeaderManipulationOptionType{"
	for _, f := range this.RequestHeadersToAdd {
		repeatedStringForRequestHeadersToAdd += strings.Replace(fmt.Sprintf("%v", f), "HeaderManipulationOptionType", "schema.HeaderManipulationOptionType", 1) + ","
	}
	repeatedStringForRequestHeadersToAdd += "}"
	repeatedStringForResponseHeadersToAdd := "[]*HeaderManipulationOptionType{"
	for _, f := range this.ResponseHeadersToAdd {
		repeatedStringForResponseHeadersToAdd += strings.Replace(fmt.Sprintf("%v", f), "HeaderManipulationOptionType", "schema.HeaderManipulationOptionType", 1) + ","
	}
	repeatedStringForResponseHeadersToAdd += "}"
	repeatedStringForUserIdentification := "[]*ObjectRefType{"
	for _, f := range this.UserIdentification {
		repeatedStringForUserIdentification += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForUserIdentification += "}"
	repeatedStringForRateLimiter := "[]*ObjectRefType{"
	for _, f := range this.RateLimiter {
		repeatedStringForRateLimiter += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForRateLimiter += "}"
	repeatedStringForRateLimiterAllowedPrefixes := "[]*ObjectRefType{"
	for _, f := range this.RateLimiterAllowedPrefixes {
		repeatedStringForRateLimiterAllowedPrefixes += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForRateLimiterAllowedPrefixes += "}"
	repeatedStringForCookiesToModify := "[]*CookieManipulationOptionType{"
	for _, f := range this.CookiesToModify {
		repeatedStringForCookiesToModify += strings.Replace(fmt.Sprintf("%v", f), "CookieManipulationOptionType", "schema.CookieManipulationOptionType", 1) + ","
	}
	repeatedStringForCookiesToModify += "}"
	keysForCustomErrors := make([]uint32, 0, len(this.CustomErrors))
	for k, _ := range this.CustomErrors {
		keysForCustomErrors = append(keysForCustomErrors, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForCustomErrors)
	mapStringForCustomErrors := "map[uint32]string{"
	for _, k := range keysForCustomErrors {
		mapStringForCustomErrors += fmt.Sprintf("%v: %v,", k, this.CustomErrors[k])
	}
	mapStringForCustomErrors += "}"
	keysForDomainCertMap := make([]string, 0, len(this.DomainCertMap))
	for k, _ := range this.DomainCertMap {
		keysForDomainCertMap = append(keysForDomainCertMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForDomainCertMap)
	mapStringForDomainCertMap := "map[string]*DomainCertificates{"
	for _, k := range keysForDomainCertMap {
		mapStringForDomainCertMap += fmt.Sprintf("%v: %v,", k, this.DomainCertMap[k])
	}
	mapStringForDomainCertMap += "}"
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`Domains:` + fmt.Sprintf("%v", this.Domains) + `,`,
		`Routes:` + repeatedStringForRoutes + `,`,
		`AdvertisePolicies:` + repeatedStringForAdvertisePolicies + `,`,
		`RequestHeadersToAdd:` + repeatedStringForRequestHeadersToAdd + `,`,
		`ResponseHeadersToAdd:` + repeatedStringForResponseHeadersToAdd + `,`,
		`ResponseHeadersToRemove:` + fmt.Sprintf("%v", this.ResponseHeadersToRemove) + `,`,
		`TlsCertificatesChoice:` + fmt.Sprintf("%v", this.TlsCertificatesChoice) + `,`,
		`BufferPolicy:` + strings.Replace(fmt.Sprintf("%v", this.BufferPolicy), "BufferConfigType", "schema.BufferConfigType", 1) + `,`,
		`CorsPolicy:` + strings.Replace(fmt.Sprintf("%v", this.CorsPolicy), "CorsPolicy", "schema.CorsPolicy", 1) + `,`,
		`Proxy:` + fmt.Sprintf("%v", this.Proxy) + `,`,
		`RequestHeadersToRemove:` + fmt.Sprintf("%v", this.RequestHeadersToRemove) + `,`,
		`WafType:` + strings.Replace(fmt.Sprintf("%v", this.WafType), "WafType", "schema.WafType", 1) + `,`,
		`DynamicReverseProxy:` + strings.Replace(this.DynamicReverseProxy.String(), "DynamicReverseProxyType", "DynamicReverseProxyType", 1) + `,`,
		`AddLocation:` + fmt.Sprintf("%v", this.AddLocation) + `,`,
		`CompressionParams:` + strings.Replace(this.CompressionParams.String(), "CompressionType", "CompressionType", 1) + `,`,
		`CustomErrors:` + mapStringForCustomErrors + `,`,
		`MaxRequestHeaderSize:` + fmt.Sprintf("%v", this.MaxRequestHeaderSize) + `,`,
		`ChallengeType:` + fmt.Sprintf("%v", this.ChallengeType) + `,`,
		`UserIdentification:` + repeatedStringForUserIdentification + `,`,
		`RateLimiter:` + repeatedStringForRateLimiter + `,`,
		`RateLimiterAllowedPrefixes:` + repeatedStringForRateLimiterAllowedPrefixes + `,`,
		`RetryPolicy:` + strings.Replace(fmt.Sprintf("%v", this.RetryPolicy), "RetryPolicyType", "schema.RetryPolicyType", 1) + `,`,
		`IdleTimeout:` + fmt.Sprintf("%v", this.IdleTimeout) + `,`,
		`DisableDefaultErrorPages:` + fmt.Sprintf("%v", this.DisableDefaultErrorPages) + `,`,
		`DisableDnsResolve:` + fmt.Sprintf("%v", this.DisableDnsResolve) + `,`,
		`TemporaryUserBlocking:` + strings.Replace(this.TemporaryUserBlocking.String(), "TemporaryUserBlockingType", "TemporaryUserBlockingType", 1) + `,`,
		`AuthenticationChoice:` + fmt.Sprintf("%v", this.AuthenticationChoice) + `,`,
		`ServerHeaderChoice:` + fmt.Sprintf("%v", this.ServerHeaderChoice) + `,`,
		`PathNormalizeChoice:` + fmt.Sprintf("%v", this.PathNormalizeChoice) + `,`,
		`StrictSniHostHeaderCheckChoice:` + fmt.Sprintf("%v", this.StrictSniHostHeaderCheckChoice) + `,`,
		`DefaultLbChoice:` + fmt.Sprintf("%v", this.DefaultLbChoice) + `,`,
		`HeaderTransformationType:` + strings.Replace(fmt.Sprintf("%v", this.HeaderTransformationType), "HeaderTransformationType", "schema.HeaderTransformationType", 1) + `,`,
		`CsrfPolicy:` + strings.Replace(fmt.Sprintf("%v", this.CsrfPolicy), "CsrfPolicy", "schema.CsrfPolicy", 1) + `,`,
		`CookiesToModify:` + repeatedStringForCookiesToModify + `,`,
		`ConnectionIdleTimeout:` + fmt.Sprintf("%v", this.ConnectionIdleTimeout) + `,`,
		`SlowDdosMitigation:` + strings.Replace(this.SlowDdosMitigation.String(), "SlowDDoSMitigation", "SlowDDoSMitigation", 1) + `,`,
		`ApiSpec:` + strings.Replace(this.ApiSpec.String(), "ApiSpec", "ApiSpec", 1) + `,`,
		`DomainCertMap:` + mapStringForDomainCertMap + `,`,
		`DnsProxyConfiguration:` + strings.Replace(this.DnsProxyConfiguration.String(), "DNSProxyConfiguration", "DNSProxyConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_TlsParameters) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_TlsParameters{`,
		`TlsParameters:` + strings.Replace(fmt.Sprintf("%v", this.TlsParameters), "DownstreamTlsParamsType", "schema.DownstreamTlsParamsType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_JsChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_JsChallenge{`,
		`JsChallenge:` + strings.Replace(fmt.Sprintf("%v", this.JsChallenge), "JavascriptChallengeType", "JavascriptChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_CaptchaChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_CaptchaChallenge{`,
		`CaptchaChallenge:` + strings.Replace(fmt.Sprintf("%v", this.CaptchaChallenge), "CaptchaChallengeType", "CaptchaChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_NoChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_NoChallenge{`,
		`NoChallenge:` + strings.Replace(fmt.Sprintf("%v", this.NoChallenge), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_NoAuthentication) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_NoAuthentication{`,
		`NoAuthentication:` + strings.Replace(fmt.Sprintf("%v", this.NoAuthentication), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Authentication) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Authentication{`,
		`Authentication:` + strings.Replace(fmt.Sprintf("%v", this.Authentication), "AuthenticationDetails", "AuthenticationDetails", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DefaultHeader) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DefaultHeader{`,
		`DefaultHeader:` + strings.Replace(fmt.Sprintf("%v", this.DefaultHeader), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_ServerName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_ServerName{`,
		`ServerName:` + fmt.Sprintf("%v", this.ServerName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_AppendServerName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_AppendServerName{`,
		`AppendServerName:` + fmt.Sprintf("%v", this.AppendServerName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_PassThrough) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_PassThrough{`,
		`PassThrough:` + strings.Replace(fmt.Sprintf("%v", this.PassThrough), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_EnablePathNormalize) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_EnablePathNormalize{`,
		`EnablePathNormalize:` + strings.Replace(fmt.Sprintf("%v", this.EnablePathNormalize), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DisablePathNormalize) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DisablePathNormalize{`,
		`DisablePathNormalize:` + strings.Replace(fmt.Sprintf("%v", this.DisablePathNormalize), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_EnableStrictSniHostHeaderCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_EnableStrictSniHostHeaderCheck{`,
		`EnableStrictSniHostHeaderCheck:` + strings.Replace(fmt.Sprintf("%v", this.EnableStrictSniHostHeaderCheck), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_AdditionalDomains) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_AdditionalDomains{`,
		`AdditionalDomains:` + strings.Replace(fmt.Sprintf("%v", this.AdditionalDomains), "DomainNameList", "schema.DomainNameList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_NonDefaultLoadbalancer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_NonDefaultLoadbalancer{`,
		`NonDefaultLoadbalancer:` + strings.Replace(fmt.Sprintf("%v", this.NonDefaultLoadbalancer), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DefaultLoadbalancer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DefaultLoadbalancer{`,
		`DefaultLoadbalancer:` + strings.Replace(fmt.Sprintf("%v", this.DefaultLoadbalancer), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_TlsCertParams) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_TlsCertParams{`,
		`TlsCertParams:` + strings.Replace(fmt.Sprintf("%v", this.TlsCertParams), "CertificateParamsType", "schema.CertificateParamsType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRoutes := "[]*ObjectRefType{"
	for _, f := range this.Routes {
		repeatedStringForRoutes += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForRoutes += "}"
	repeatedStringForAdvertisePolicies := "[]*ObjectRefType{"
	for _, f := range this.AdvertisePolicies {
		repeatedStringForAdvertisePolicies += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForAdvertisePolicies += "}"
	repeatedStringForRequestHeadersToAdd := "[]*HeaderManipulationOptionType{"
	for _, f := range this.RequestHeadersToAdd {
		repeatedStringForRequestHeadersToAdd += strings.Replace(fmt.Sprintf("%v", f), "HeaderManipulationOptionType", "schema.HeaderManipulationOptionType", 1) + ","
	}
	repeatedStringForRequestHeadersToAdd += "}"
	repeatedStringForResponseHeadersToAdd := "[]*HeaderManipulationOptionType{"
	for _, f := range this.ResponseHeadersToAdd {
		repeatedStringForResponseHeadersToAdd += strings.Replace(fmt.Sprintf("%v", f), "HeaderManipulationOptionType", "schema.HeaderManipulationOptionType", 1) + ","
	}
	repeatedStringForResponseHeadersToAdd += "}"
	repeatedStringForUserIdentification := "[]*ObjectRefType{"
	for _, f := range this.UserIdentification {
		repeatedStringForUserIdentification += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForUserIdentification += "}"
	repeatedStringForRateLimiter := "[]*ObjectRefType{"
	for _, f := range this.RateLimiter {
		repeatedStringForRateLimiter += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForRateLimiter += "}"
	repeatedStringForRateLimiterAllowedPrefixes := "[]*ObjectRefType{"
	for _, f := range this.RateLimiterAllowedPrefixes {
		repeatedStringForRateLimiterAllowedPrefixes += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForRateLimiterAllowedPrefixes += "}"
	repeatedStringForCookiesToModify := "[]*CookieManipulationOptionType{"
	for _, f := range this.CookiesToModify {
		repeatedStringForCookiesToModify += strings.Replace(fmt.Sprintf("%v", f), "CookieManipulationOptionType", "schema.CookieManipulationOptionType", 1) + ","
	}
	repeatedStringForCookiesToModify += "}"
	repeatedStringForDnsInfo := "[]*DnsInfo{"
	for _, f := range this.DnsInfo {
		repeatedStringForDnsInfo += strings.Replace(fmt.Sprintf("%v", f), "DnsInfo", "virtual_host_dns_info.DnsInfo", 1) + ","
	}
	repeatedStringForDnsInfo += "}"
	keysForCustomErrors := make([]uint32, 0, len(this.CustomErrors))
	for k, _ := range this.CustomErrors {
		keysForCustomErrors = append(keysForCustomErrors, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForCustomErrors)
	mapStringForCustomErrors := "map[uint32]string{"
	for _, k := range keysForCustomErrors {
		mapStringForCustomErrors += fmt.Sprintf("%v: %v,", k, this.CustomErrors[k])
	}
	mapStringForCustomErrors += "}"
	keysForDomainCertMap := make([]string, 0, len(this.DomainCertMap))
	for k, _ := range this.DomainCertMap {
		keysForDomainCertMap = append(keysForDomainCertMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForDomainCertMap)
	mapStringForDomainCertMap := "map[string]*DomainCertificates{"
	for _, k := range keysForDomainCertMap {
		mapStringForDomainCertMap += fmt.Sprintf("%v: %v,", k, this.DomainCertMap[k])
	}
	mapStringForDomainCertMap += "}"
	s := strings.Join([]string{`&GetSpecType{`,
		`Domains:` + fmt.Sprintf("%v", this.Domains) + `,`,
		`Routes:` + repeatedStringForRoutes + `,`,
		`AdvertisePolicies:` + repeatedStringForAdvertisePolicies + `,`,
		`RequestHeadersToAdd:` + repeatedStringForRequestHeadersToAdd + `,`,
		`ResponseHeadersToAdd:` + repeatedStringForResponseHeadersToAdd + `,`,
		`ResponseHeadersToRemove:` + fmt.Sprintf("%v", this.ResponseHeadersToRemove) + `,`,
		`TlsCertificatesChoice:` + fmt.Sprintf("%v", this.TlsCertificatesChoice) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`BufferPolicy:` + strings.Replace(fmt.Sprintf("%v", this.BufferPolicy), "BufferConfigType", "schema.BufferConfigType", 1) + `,`,
		`CorsPolicy:` + strings.Replace(fmt.Sprintf("%v", this.CorsPolicy), "CorsPolicy", "schema.CorsPolicy", 1) + `,`,
		`Proxy:` + fmt.Sprintf("%v", this.Proxy) + `,`,
		`RequestHeadersToRemove:` + fmt.Sprintf("%v", this.RequestHeadersToRemove) + `,`,
		`WafType:` + strings.Replace(fmt.Sprintf("%v", this.WafType), "WafType", "schema.WafType", 1) + `,`,
		`DynamicReverseProxy:` + strings.Replace(this.DynamicReverseProxy.String(), "DynamicReverseProxyType", "DynamicReverseProxyType", 1) + `,`,
		`AddLocation:` + fmt.Sprintf("%v", this.AddLocation) + `,`,
		`CompressionParams:` + strings.Replace(this.CompressionParams.String(), "CompressionType", "CompressionType", 1) + `,`,
		`CustomErrors:` + mapStringForCustomErrors + `,`,
		`MaxRequestHeaderSize:` + fmt.Sprintf("%v", this.MaxRequestHeaderSize) + `,`,
		`ChallengeType:` + fmt.Sprintf("%v", this.ChallengeType) + `,`,
		`UserIdentification:` + repeatedStringForUserIdentification + `,`,
		`RateLimiter:` + repeatedStringForRateLimiter + `,`,
		`RateLimiterAllowedPrefixes:` + repeatedStringForRateLimiterAllowedPrefixes + `,`,
		`RetryPolicy:` + strings.Replace(fmt.Sprintf("%v", this.RetryPolicy), "RetryPolicyType", "schema.RetryPolicyType", 1) + `,`,
		`IdleTimeout:` + fmt.Sprintf("%v", this.IdleTimeout) + `,`,
		`DisableDefaultErrorPages:` + fmt.Sprintf("%v", this.DisableDefaultErrorPages) + `,`,
		`DisableDnsResolve:` + fmt.Sprintf("%v", this.DisableDnsResolve) + `,`,
		`TemporaryUserBlocking:` + strings.Replace(this.TemporaryUserBlocking.String(), "TemporaryUserBlockingType", "TemporaryUserBlockingType", 1) + `,`,
		`AuthenticationChoice:` + fmt.Sprintf("%v", this.AuthenticationChoice) + `,`,
		`ServerHeaderChoice:` + fmt.Sprintf("%v", this.ServerHeaderChoice) + `,`,
		`PathNormalizeChoice:` + fmt.Sprintf("%v", this.PathNormalizeChoice) + `,`,
		`StrictSniHostHeaderCheckChoice:` + fmt.Sprintf("%v", this.StrictSniHostHeaderCheckChoice) + `,`,
		`CdnService:` + strings.Replace(this.CdnService.String(), "CdnServiceType", "CdnServiceType", 1) + `,`,
		`DefaultLbChoice:` + fmt.Sprintf("%v", this.DefaultLbChoice) + `,`,
		`HeaderTransformationType:` + strings.Replace(fmt.Sprintf("%v", this.HeaderTransformationType), "HeaderTransformationType", "schema.HeaderTransformationType", 1) + `,`,
		`CsrfPolicy:` + strings.Replace(fmt.Sprintf("%v", this.CsrfPolicy), "CsrfPolicy", "schema.CsrfPolicy", 1) + `,`,
		`CookiesToModify:` + repeatedStringForCookiesToModify + `,`,
		`ConnectionIdleTimeout:` + fmt.Sprintf("%v", this.ConnectionIdleTimeout) + `,`,
		`SlowDdosMitigation:` + strings.Replace(this.SlowDdosMitigation.String(), "SlowDDoSMitigation", "SlowDDoSMitigation", 1) + `,`,
		`ApiSpec:` + strings.Replace(this.ApiSpec.String(), "ApiSpec", "ApiSpec", 1) + `,`,
		`DomainCertMap:` + mapStringForDomainCertMap + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`HostName:` + fmt.Sprintf("%v", this.HostName) + `,`,
		`DnsInfo:` + repeatedStringForDnsInfo + `,`,
		`AutoCertInfo:` + strings.Replace(this.AutoCertInfo.String(), "AutoCertInfoType", "AutoCertInfoType", 1) + `,`,
		`DnsZoneStateChoice:` + fmt.Sprintf("%v", this.DnsZoneStateChoice) + `,`,
		`AutoCertErrorMsg:` + fmt.Sprintf("%v", this.AutoCertErrorMsg) + `,`,
		`DnsProxyConfiguration:` + strings.Replace(this.DnsProxyConfiguration.String(), "DNSProxyConfiguration", "DNSProxyConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_TlsParameters) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_TlsParameters{`,
		`TlsParameters:` + strings.Replace(fmt.Sprintf("%v", this.TlsParameters), "DownstreamTlsParamsType", "schema.DownstreamTlsParamsType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_JsChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_JsChallenge{`,
		`JsChallenge:` + strings.Replace(fmt.Sprintf("%v", this.JsChallenge), "JavascriptChallengeType", "JavascriptChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_CaptchaChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_CaptchaChallenge{`,
		`CaptchaChallenge:` + strings.Replace(fmt.Sprintf("%v", this.CaptchaChallenge), "CaptchaChallengeType", "CaptchaChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_NoChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_NoChallenge{`,
		`NoChallenge:` + strings.Replace(fmt.Sprintf("%v", this.NoChallenge), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_NoAuthentication) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_NoAuthentication{`,
		`NoAuthentication:` + strings.Replace(fmt.Sprintf("%v", this.NoAuthentication), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Authentication) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Authentication{`,
		`Authentication:` + strings.Replace(fmt.Sprintf("%v", this.Authentication), "AuthenticationDetails", "AuthenticationDetails", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DefaultHeader) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DefaultHeader{`,
		`DefaultHeader:` + strings.Replace(fmt.Sprintf("%v", this.DefaultHeader), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_ServerName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_ServerName{`,
		`ServerName:` + fmt.Sprintf("%v", this.ServerName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_AppendServerName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_AppendServerName{`,
		`AppendServerName:` + fmt.Sprintf("%v", this.AppendServerName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_PassThrough) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_PassThrough{`,
		`PassThrough:` + strings.Replace(fmt.Sprintf("%v", this.PassThrough), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_EnablePathNormalize) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_EnablePathNormalize{`,
		`EnablePathNormalize:` + strings.Replace(fmt.Sprintf("%v", this.EnablePathNormalize), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DisablePathNormalize) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DisablePathNormalize{`,
		`DisablePathNormalize:` + strings.Replace(fmt.Sprintf("%v", this.DisablePathNormalize), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_EnableStrictSniHostHeaderCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_EnableStrictSniHostHeaderCheck{`,
		`EnableStrictSniHostHeaderCheck:` + strings.Replace(fmt.Sprintf("%v", this.EnableStrictSniHostHeaderCheck), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_AdditionalDomains) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_AdditionalDomains{`,
		`AdditionalDomains:` + strings.Replace(fmt.Sprintf("%v", this.AdditionalDomains), "DomainNameList", "schema.DomainNameList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_NonDefaultLoadbalancer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_NonDefaultLoadbalancer{`,
		`NonDefaultLoadbalancer:` + strings.Replace(fmt.Sprintf("%v", this.NonDefaultLoadbalancer), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DefaultLoadbalancer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DefaultLoadbalancer{`,
		`DefaultLoadbalancer:` + strings.Replace(fmt.Sprintf("%v", this.DefaultLoadbalancer), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_TlsCertParams) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_TlsCertParams{`,
		`TlsCertParams:` + strings.Replace(fmt.Sprintf("%v", this.TlsCertParams), "CertificateParamsType", "schema.CertificateParamsType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_NotReady) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_NotReady{`,
		`NotReady:` + strings.Replace(fmt.Sprintf("%v", this.NotReady), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Ready) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Ready{`,
		`Ready:` + strings.Replace(fmt.Sprintf("%v", this.Ready), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *VirtualHostID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VirtualHostID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VirtualHostID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerStatusType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerStatusType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerStatusType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoalescedVirtualHosts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoalescedVirtualHosts = append(m.CoalescedVirtualHosts, &VirtualHostID{})
			if err := m.CoalescedVirtualHosts[len(m.CoalescedVirtualHosts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NonCoalescedVirtualHosts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NonCoalescedVirtualHosts = append(m.NonCoalescedVirtualHosts, &VirtualHostID{})
			if err := m.NonCoalescedVirtualHosts[len(m.NonCoalescedVirtualHosts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertisePolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdvertisePolicy == nil {
				m.AdvertisePolicy = &views.ObjectRefType{}
			}
			if err := m.AdvertisePolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoalescedVhosts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoalescedVhosts = append(m.CoalescedVhosts, &views.ObjectRefType{})
			if err := m.CoalescedVhosts[len(m.CoalescedVhosts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NonCoalescedVhosts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NonCoalescedVhosts = append(m.NonCoalescedVhosts, &views.ObjectRefType{})
			if err := m.NonCoalescedVhosts[len(m.NonCoalescedVhosts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JavaScriptConfigType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JavaScriptConfigType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JavaScriptConfigType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CachePrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CachePrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScriptConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScriptConfig == nil {
				m.ScriptConfig = &types.Struct{}
			}
			if err := m.ScriptConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomScriptUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomScriptUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DynamicReverseProxyType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DynamicReverseProxyType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DynamicReverseProxyType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResolveEndpointDynamically", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ResolveEndpointDynamically = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResolutionNetworkType", wireType)
			}
			m.ResolutionNetworkType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResolutionNetworkType |= schema.VirtualNetworkType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResolutionNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResolutionNetwork = append(m.ResolutionNetwork, &schema.ObjectRefType{})
			if err := m.ResolutionNetwork[len(m.ResolutionNetwork)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionTimeout", wireType)
			}
			m.ConnectionTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnectionTimeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompressionType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompressionType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompressionType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentLength", wireType)
			}
			m.ContentLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContentLength |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentType = append(m.ContentType, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableOnEtagHeader", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableOnEtagHeader = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoveAcceptEncodingHeader", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RemoveAcceptEncodingHeader = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JavascriptChallengeType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JavascriptChallengeType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JavascriptChallengeType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsScriptDelay", wireType)
			}
			m.JsScriptDelay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JsScriptDelay |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CookieExpiry", wireType)
			}
			m.CookieExpiry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CookieExpiry |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomPage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomPage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CaptchaChallengeType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CaptchaChallengeType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CaptchaChallengeType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CookieExpiry", wireType)
			}
			m.CookieExpiry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CookieExpiry |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomPage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomPage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TemporaryUserBlockingType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TemporaryUserBlockingType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TemporaryUserBlockingType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomPage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomPage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DNSRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DNSRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DNSRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoCertInfoType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoCertInfoType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoCertInfoType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoCertState", wireType)
			}
			m.AutoCertState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AutoCertState |= CertificationState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoCertExpiry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AutoCertExpiry == nil {
				m.AutoCertExpiry = &types.Timestamp{}
			}
			if err := m.AutoCertExpiry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoCertSubject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AutoCertSubject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoCertIssuer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AutoCertIssuer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DnsRecords = append(m.DnsRecords, &DNSRecord{})
			if err := m.DnsRecords[len(m.DnsRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateStartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StateStartTime == nil {
				m.StateStartTime = &types.Timestamp{}
			}
			if err := m.StateStartTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthenticationDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthenticationDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthenticationDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthConfig = append(m.AuthConfig, &schema.ObjectRefType{})
			if err := m.AuthConfig[len(m.AuthConfig)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseAuthObjectConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CookieParamsChoice = &AuthenticationDetails_UseAuthObjectConfig{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CookieParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &authentication.CookieParams{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CookieParamsChoice = &AuthenticationDetails_CookieParams{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedirectUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedirectUrlChoice = &AuthenticationDetails_RedirectUrl{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedirectDynamic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RedirectUrlChoice = &AuthenticationDetails_RedirectDynamic{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PolicyBasedChallenge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PolicyBasedChallenge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PolicyBasedChallenge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.JsChallenge == nil {
				m.JsChallenge = &JavascriptChallengeType{}
			}
			if err := m.JsChallenge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptchaChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CaptchaChallenge == nil {
				m.CaptchaChallenge = &CaptchaChallengeType{}
			}
			if err := m.CaptchaChallenge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TemporaryUserBlocking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TemporaryUserBlocking == nil {
				m.TemporaryUserBlocking = &TemporaryUserBlockingType{}
			}
			if err := m.TemporaryUserBlocking.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeChoice = &PolicyBasedChallenge_NoChallenge{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlwaysEnableJsChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeChoice = &PolicyBasedChallenge_AlwaysEnableJsChallenge{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlwaysEnableCaptchaChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeChoice = &PolicyBasedChallenge_AlwaysEnableCaptchaChallenge{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaliciousUserMitigation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaliciousUserMitigation = append(m.MaliciousUserMitigation, &schema.ObjectRefType{})
			if err := m.MaliciousUserMitigation[len(m.MaliciousUserMitigation)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShapeBotDefenseConfigType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShapeBotDefenseConfigType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShapeBotDefenseConfigType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApplicationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiAuthKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiAuthKey == nil {
				m.ApiAuthKey = &schema.SecretType{}
			}
			if err := m.ApiAuthKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Instance = append(m.Instance, &schema.ObjectRefType{})
			if err := m.Instance[len(m.Instance)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockingPages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlockingPages == nil {
				m.BlockingPages = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.BlockingPages[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReloadHeaderName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReloadHeaderName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JsPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= BotDefenseMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceDomain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceDomain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceDomain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceDomain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceDomain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalServiceDomain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalServiceDomain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CdnServiceType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CdnServiceType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CdnServiceType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownloadDelivery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ContentChoice = &CdnServiceType_DownloadDelivery{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveStreaming", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ContentChoice = &CdnServiceType_LiveStreaming{v}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheTtl", wireType)
			}
			m.CacheTtl = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CacheTtl |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceDomains", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceDomains = append(m.ServiceDomains, &ServiceDomain{})
			if err := m.ServiceDomains[len(m.ServiceDomains)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientIPHeaders) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientIPHeaders: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientIPHeaders: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIpHeaders", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientIpHeaders = append(m.ClientIpHeaders, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DNSProxyConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DNSProxyConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DNSProxyConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DdosProfile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DdosProfile == nil {
				m.DdosProfile = &DNSDDoSProfile{}
			}
			if err := m.DdosProfile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheProfile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CacheProfile == nil {
				m.CacheProfile = &DNSCacheProfile{}
			}
			if err := m.CacheProfile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolInspection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProtocolInspection == nil {
				m.ProtocolInspection = &views.ObjectRefType{}
			}
			if err := m.ProtocolInspection.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Irules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Irules = append(m.Irules, &views.ObjectRefType{})
			if err := m.Irules[len(m.Irules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DNSDDoSProfile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DNSDDoSProfile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DNSDDoSProfile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableDdosMitigation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DdosMitigationChoice = &DNSDDoSProfile_EnableDdosMitigation{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableDdosMitigation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DdosMitigationChoice = &DNSDDoSProfile_DisableDdosMitigation{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DNSCacheProfile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DNSCacheProfile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DNSCacheProfile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableCacheProfile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CacheProfileChoice = &DNSCacheProfile_DisableCacheProfile{v}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheSize", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CacheProfileChoice = &DNSCacheProfile_CacheSize{v}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlowDDoSMitigation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SlowDDoSMitigation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SlowDDoSMitigation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestTimeout", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RequestTimeoutChoice = &SlowDDoSMitigation_RequestTimeout{v}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestHeadersTimeout", wireType)
			}
			m.RequestHeadersTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestHeadersTimeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableRequestTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RequestTimeoutChoice = &SlowDDoSMitigation_DisableRequestTimeout{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DomainCertificates) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DomainCertificates: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DomainCertificates: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RsaCertificates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RsaCertificates = append(m.RsaCertificates, &schema.ObjectRefType{})
			if err := m.RsaCertificates[len(m.RsaCertificates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EcdsaCertificates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EcdsaCertificates = append(m.EcdsaCertificates, &schema.ObjectRefType{})
			if err := m.EcdsaCertificates[len(m.EcdsaCertificates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApiSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApiSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApiSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiDefinition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiDefinition == nil {
				m.ApiDefinition = &views.ObjectRefType{}
			}
			if err := m.ApiDefinition.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableOpenApiValidation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OpenApiValidationChoice = &ApiSpec_DisableOpenApiValidation{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableOpenApiValidation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OpenApiValidationSettings{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OpenApiValidationChoice = &ApiSpec_EnableOpenApiValidation{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpenApiValidationSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpenApiValidationSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpenApiValidationSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailOversizedBodyValidation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FailOversizedBodyValidation = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowOnlySpecifiedQueryParams", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowOnlySpecifiedQueryParams = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowOnlySpecifiedHeaders", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowOnlySpecifiedHeaders = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HttpProtocolOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HttpProtocolOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HttpProtocolOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpProtocolEnableV1Only", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HttpProtocolChoice = &HttpProtocolOptions_HttpProtocolEnableV1Only{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpProtocolEnableV2Only", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HttpProtocolChoice = &HttpProtocolOptions_HttpProtocolEnableV2Only{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpProtocolEnableV1V2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HttpProtocolChoice = &HttpProtocolOptions_HttpProtocolEnableV1V2{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HttpRedirectOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HttpRedirectOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HttpRedirectOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Routes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Routes = append(m.Routes, &schema.ObjectRefType{})
			if err := m.Routes[len(m.Routes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JavascriptInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.JavascriptInfo == nil {
				m.JavascriptInfo = &JavaScriptConfigType{}
			}
			if err := m.JavascriptInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertisePolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdvertisePolicies = append(m.AdvertisePolicies, &schema.ObjectRefType{})
			if err := m.AdvertisePolicies[len(m.AdvertisePolicies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestHeadersToAdd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestHeadersToAdd = append(m.RequestHeadersToAdd, &schema.HeaderManipulationOptionType{})
			if err := m.RequestHeadersToAdd[len(m.RequestHeadersToAdd)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseHeadersToAdd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponseHeadersToAdd = append(m.ResponseHeadersToAdd, &schema.HeaderManipulationOptionType{})
			if err := m.ResponseHeadersToAdd[len(m.ResponseHeadersToAdd)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseHeadersToRemove", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponseHeadersToRemove = append(m.ResponseHeadersToRemove, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.DownstreamTlsParamsType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TlsCertificatesChoice = &GlobalSpecType_TlsParameters{v}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= VirtualHostType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BufferPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BufferPolicy == nil {
				m.BufferPolicy = &schema.BufferConfigType{}
			}
			if err := m.BufferPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorsPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CorsPolicy == nil {
				m.CorsPolicy = &schema.CorsPolicy{}
			}
			if err := m.CorsPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proxy", wireType)
			}
			m.Proxy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Proxy |= ProxyType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jwt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Jwt = append(m.Jwt, &schema.ObjectRefType{})
			if err := m.Jwt[len(m.Jwt)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestHeadersToRemove", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestHeadersToRemove = append(m.RequestHeadersToRemove, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WafType == nil {
				m.WafType = &schema.WafType{}
			}
			if err := m.WafType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynamicReverseProxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DynamicReverseProxy == nil {
				m.DynamicReverseProxy = &DynamicReverseProxyType{}
			}
			if err := m.DynamicReverseProxy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddLocation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddLocation = bool(v != 0)
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompressionParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CompressionParams == nil {
				m.CompressionParams = &CompressionType{}
			}
			if err := m.CompressionParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomErrors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CustomErrors == nil {
				m.CustomErrors = make(map[uint32]string)
			}
			var mapkey uint32
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.CustomErrors[mapkey] = mapvalue
			iNdEx = postIndex
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRequestHeaderSize", wireType)
			}
			m.MaxRequestHeaderSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxRequestHeaderSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JavascriptChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &GlobalSpecType_JsChallenge{v}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdentification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserIdentification = append(m.UserIdentification, &schema.ObjectRefType{})
			if err := m.UserIdentification[len(m.UserIdentification)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimiter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RateLimiter = append(m.RateLimiter, &schema.ObjectRefType{})
			if err := m.RateLimiter[len(m.RateLimiter)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimiterAllowedPrefixes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RateLimiterAllowedPrefixes = append(m.RateLimiterAllowedPrefixes, &schema.ObjectRefType{})
			if err := m.RateLimiterAllowedPrefixes[len(m.RateLimiterAllowedPrefixes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RetryPolicy == nil {
				m.RetryPolicy = &schema.RetryPolicyType{}
			}
			if err := m.RetryPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptchaChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CaptchaChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &GlobalSpecType_CaptchaChallenge{v}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &GlobalSpecType_NoChallenge{v}
			iNdEx = postIndex
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdleTimeout", wireType)
			}
			m.IdleTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IdleTimeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableDefaultErrorPages", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableDefaultErrorPages = bool(v != 0)
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableDnsResolve", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableDnsResolve = bool(v != 0)
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TemporaryUserBlocking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TemporaryUserBlocking == nil {
				m.TemporaryUserBlocking = &TemporaryUserBlockingType{}
			}
			if err := m.TemporaryUserBlocking.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaliciousUserMitigation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaliciousUserMitigation = append(m.MaliciousUserMitigation, &schema.ObjectRefType{})
			if err := m.MaliciousUserMitigation[len(m.MaliciousUserMitigation)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsIntercept", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TlsIntercept == nil {
				m.TlsIntercept = &schema.TlsInterceptionType{}
			}
			if err := m.TlsIntercept.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoAuthentication", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AuthenticationChoice = &GlobalSpecType_NoAuthentication{v}
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authentication", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AuthenticationDetails{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AuthenticationChoice = &GlobalSpecType_Authentication{v}
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyBasedChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PolicyBasedChallenge{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &GlobalSpecType_PolicyBasedChallenge{v}
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServerHeaderChoice = &GlobalSpecType_DefaultHeader{v}
			iNdEx = postIndex
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerHeaderChoice = &GlobalSpecType_ServerName{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppendServerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerHeaderChoice = &GlobalSpecType_AppendServerName{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassThrough", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServerHeaderChoice = &GlobalSpecType_PassThrough{v}
			iNdEx = postIndex
		case 48:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnablePathNormalize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PathNormalizeChoice = &GlobalSpecType_EnablePathNormalize{v}
			iNdEx = postIndex
		case 49:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisablePathNormalize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PathNormalizeChoice = &GlobalSpecType_DisablePathNormalize{v}
			iNdEx = postIndex
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableStrictSniHostHeaderCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StrictSniHostHeaderCheckChoice = &GlobalSpecType_EnableStrictSniHostHeaderCheck{v}
			iNdEx = postIndex
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdditionalDomains", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.DomainNameList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StrictSniHostHeaderCheckChoice = &GlobalSpecType_AdditionalDomains{v}
			iNdEx = postIndex
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CdnService", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CdnService == nil {
				m.CdnService = &CdnServiceType{}
			}
			if err := m.CdnService.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 74:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableTrustClientIpHeaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TrustClientIpHeadersChoice = &GlobalSpecType_DisableTrustClientIpHeaders{v}
			iNdEx = postIndex
		case 75:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableTrustClientIpHeaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ClientIPHeaders{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TrustClientIpHeadersChoice = &GlobalSpecType_EnableTrustClientIpHeaders{v}
			iNdEx = postIndex
		case 77:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NonDefaultLoadbalancer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DefaultLbChoice = &GlobalSpecType_NonDefaultLoadbalancer{v}
			iNdEx = postIndex
		case 78:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultLoadbalancer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DefaultLbChoice = &GlobalSpecType_DefaultLoadbalancer{v}
			iNdEx = postIndex
		case 79:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeaderTransformationType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HeaderTransformationType == nil {
				m.HeaderTransformationType = &schema.HeaderTransformationType{}
			}
			if err := m.HeaderTransformationType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 80:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CsrfPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CsrfPolicy == nil {
				m.CsrfPolicy = &schema.CsrfPolicy{}
			}
			if err := m.CsrfPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 81:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CookiesToModify", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CookiesToModify = append(m.CookiesToModify, &schema.CookieManipulationOptionType{})
			if err := m.CookiesToModify[len(m.CookiesToModify)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 82:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionIdleTimeout", wireType)
			}
			m.ConnectionIdleTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnectionIdleTimeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 83:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlowDdosMitigation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SlowDdosMitigation == nil {
				m.SlowDdosMitigation = &SlowDDoSMitigation{}
			}
			if err := m.SlowDdosMitigation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 84:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiSpec == nil {
				m.ApiSpec = &ApiSpec{}
			}
			if err := m.ApiSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 86:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsCertParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.CertificateParamsType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TlsCertificatesChoice = &GlobalSpecType_TlsCertParams{v}
			iNdEx = postIndex
		case 88:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainCertMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DomainCertMap == nil {
				m.DomainCertMap = make(map[string]*DomainCertificates)
			}
			var mapkey string
			var mapvalue *DomainCertificates
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTypes
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthTypes
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &DomainCertificates{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.DomainCertMap[mapkey] = mapvalue
			iNdEx = postIndex
		case 89:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpProtocolOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HttpProtocolOptions == nil {
				m.HttpProtocolOptions = &HttpProtocolOptions{}
			}
			if err := m.HttpProtocolOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 91:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DdosAutoMitigationAction = &GlobalSpecType_Block{v}
			iNdEx = postIndex
		case 92:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DdosJsChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JavascriptChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DdosAutoMitigationAction = &GlobalSpecType_DdosJsChallenge{v}
			iNdEx = postIndex
		case 93:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L7DdosActionDefault", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DdosAutoMitigationAction = &GlobalSpecType_L7DdosActionDefault{v}
			iNdEx = postIndex
		case 1000:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsVolterraManaged", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DnsVolterraManaged = bool(v != 0)
		case 1001:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsDomains", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DnsDomains = append(m.DnsDomains, &schema.ObjectRefType{})
			if err := m.DnsDomains[len(m.DnsDomains)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1002:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoCert", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AutoCert = bool(v != 0)
		case 1003:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= VirtualHostState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 1004:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 1005:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DnsInfo = append(m.DnsInfo, &virtual_host_dns_info.DnsInfo{})
			if err := m.DnsInfo[len(m.DnsInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1006:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoCertState", wireType)
			}
			m.AutoCertState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AutoCertState |= CertificationState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 1010:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoCertInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AutoCertInfo == nil {
				m.AutoCertInfo = &AutoCertInfoType{}
			}
			if err := m.AutoCertInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1011:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserDomains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserDomains = append(m.UserDomains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 1012:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicePolicySets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServicePolicySets = append(m.ServicePolicySets, &schema.ObjectRefType{})
			if err := m.ServicePolicySets[len(m.ServicePolicySets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1013:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadbalancerAlgorithm", wireType)
			}
			m.LoadbalancerAlgorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoadbalancerAlgorithm |= cluster.LoadbalancerAlgorithm(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 1014:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolterraCert", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VolterraCert = bool(v != 0)
		case 1016:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableBotDefense", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BotDefenseChoice = &GlobalSpecType_DisableBotDefense{v}
			iNdEx = postIndex
		case 1017:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotDefense", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ShapeBotDefenseConfigType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BotDefenseChoice = &GlobalSpecType_BotDefense{v}
			iNdEx = postIndex
		case 1018:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckIpReputation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CheckIpReputation = bool(v != 0)
		case 1019:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FastAcl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FastAcl = append(m.FastAcl, &schema.ObjectRefType{})
			if err := m.FastAcl[len(m.FastAcl)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1020:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L7Acl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.L7Acl = append(m.L7Acl, &schema.ObjectRefType{})
			if err := m.L7Acl[len(m.L7Acl)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1021:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsZones", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DnsZones = append(m.DnsZones, &schema.ObjectRefType{})
			if err := m.DnsZones[len(m.DnsZones)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1023:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotReady", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DnsZoneStateChoice = &GlobalSpecType_NotReady{v}
			iNdEx = postIndex
		case 1024:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ready", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DnsZoneStateChoice = &GlobalSpecType_Ready{v}
			iNdEx = postIndex
		case 1025:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomCertExpiry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CustomCertExpiry == nil {
				m.CustomCertExpiry = &types.Timestamp{}
			}
			if err := m.CustomCertExpiry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1026:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoCertErrorMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AutoCertErrorMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 1027:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpRedirectOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HttpRedirectOptions == nil {
				m.HttpRedirectOptions = &HttpRedirectOptions{}
			}
			if err := m.HttpRedirectOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsProxyConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DnsProxyConfiguration == nil {
				m.DnsProxyConfiguration = &DNSProxyConfiguration{}
			}
			if err := m.DnsProxyConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DNSVHostStatusType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DNSVHostStatusType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DNSVHostStatusType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= VirtualHostState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuggestedAction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SuggestedAction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExistingCertificateState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExistingCertificateState = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RenewCertificateState", wireType)
			}
			m.RenewCertificateState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RenewCertificateState |= CertificationState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Routes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Routes = append(m.Routes, &schema.ObjectRefType{})
			if err := m.Routes[len(m.Routes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertisePolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdvertisePolicies = append(m.AdvertisePolicies, &schema.ObjectRefType{})
			if err := m.AdvertisePolicies[len(m.AdvertisePolicies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestHeadersToAdd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestHeadersToAdd = append(m.RequestHeadersToAdd, &schema.HeaderManipulationOptionType{})
			if err := m.RequestHeadersToAdd[len(m.RequestHeadersToAdd)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseHeadersToAdd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponseHeadersToAdd = append(m.ResponseHeadersToAdd, &schema.HeaderManipulationOptionType{})
			if err := m.ResponseHeadersToAdd[len(m.ResponseHeadersToAdd)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseHeadersToRemove", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponseHeadersToRemove = append(m.ResponseHeadersToRemove, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.DownstreamTlsParamsType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TlsCertificatesChoice = &CreateSpecType_TlsParameters{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BufferPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BufferPolicy == nil {
				m.BufferPolicy = &schema.BufferConfigType{}
			}
			if err := m.BufferPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorsPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CorsPolicy == nil {
				m.CorsPolicy = &schema.CorsPolicy{}
			}
			if err := m.CorsPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proxy", wireType)
			}
			m.Proxy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Proxy |= ProxyType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestHeadersToRemove", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestHeadersToRemove = append(m.RequestHeadersToRemove, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WafType == nil {
				m.WafType = &schema.WafType{}
			}
			if err := m.WafType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynamicReverseProxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DynamicReverseProxy == nil {
				m.DynamicReverseProxy = &DynamicReverseProxyType{}
			}
			if err := m.DynamicReverseProxy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddLocation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddLocation = bool(v != 0)
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompressionParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CompressionParams == nil {
				m.CompressionParams = &CompressionType{}
			}
			if err := m.CompressionParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomErrors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CustomErrors == nil {
				m.CustomErrors = make(map[uint32]string)
			}
			var mapkey uint32
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.CustomErrors[mapkey] = mapvalue
			iNdEx = postIndex
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRequestHeaderSize", wireType)
			}
			m.MaxRequestHeaderSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxRequestHeaderSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JavascriptChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &CreateSpecType_JsChallenge{v}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdentification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserIdentification = append(m.UserIdentification, &schema.ObjectRefType{})
			if err := m.UserIdentification[len(m.UserIdentification)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimiter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RateLimiter = append(m.RateLimiter, &schema.ObjectRefType{})
			if err := m.RateLimiter[len(m.RateLimiter)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimiterAllowedPrefixes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RateLimiterAllowedPrefixes = append(m.RateLimiterAllowedPrefixes, &schema.ObjectRefType{})
			if err := m.RateLimiterAllowedPrefixes[len(m.RateLimiterAllowedPrefixes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RetryPolicy == nil {
				m.RetryPolicy = &schema.RetryPolicyType{}
			}
			if err := m.RetryPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptchaChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CaptchaChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &CreateSpecType_CaptchaChallenge{v}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &CreateSpecType_NoChallenge{v}
			iNdEx = postIndex
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdleTimeout", wireType)
			}
			m.IdleTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IdleTimeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableDefaultErrorPages", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableDefaultErrorPages = bool(v != 0)
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableDnsResolve", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableDnsResolve = bool(v != 0)
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TemporaryUserBlocking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TemporaryUserBlocking == nil {
				m.TemporaryUserBlocking = &TemporaryUserBlockingType{}
			}
			if err := m.TemporaryUserBlocking.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoAuthentication", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AuthenticationChoice = &CreateSpecType_NoAuthentication{v}
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authentication", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AuthenticationDetails{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AuthenticationChoice = &CreateSpecType_Authentication{v}
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServerHeaderChoice = &CreateSpecType_DefaultHeader{v}
			iNdEx = postIndex
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerHeaderChoice = &CreateSpecType_ServerName{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppendServerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerHeaderChoice = &CreateSpecType_AppendServerName{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassThrough", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServerHeaderChoice = &CreateSpecType_PassThrough{v}
			iNdEx = postIndex
		case 48:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnablePathNormalize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PathNormalizeChoice = &CreateSpecType_EnablePathNormalize{v}
			iNdEx = postIndex
		case 49:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisablePathNormalize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PathNormalizeChoice = &CreateSpecType_DisablePathNormalize{v}
			iNdEx = postIndex
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableStrictSniHostHeaderCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StrictSniHostHeaderCheckChoice = &CreateSpecType_EnableStrictSniHostHeaderCheck{v}
			iNdEx = postIndex
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdditionalDomains", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.DomainNameList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StrictSniHostHeaderCheckChoice = &CreateSpecType_AdditionalDomains{v}
			iNdEx = postIndex
		case 77:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NonDefaultLoadbalancer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DefaultLbChoice = &CreateSpecType_NonDefaultLoadbalancer{v}
			iNdEx = postIndex
		case 78:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultLoadbalancer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DefaultLbChoice = &CreateSpecType_DefaultLoadbalancer{v}
			iNdEx = postIndex
		case 79:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeaderTransformationType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HeaderTransformationType == nil {
				m.HeaderTransformationType = &schema.HeaderTransformationType{}
			}
			if err := m.HeaderTransformationType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 80:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CsrfPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CsrfPolicy == nil {
				m.CsrfPolicy = &schema.CsrfPolicy{}
			}
			if err := m.CsrfPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 81:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CookiesToModify", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CookiesToModify = append(m.CookiesToModify, &schema.CookieManipulationOptionType{})
			if err := m.CookiesToModify[len(m.CookiesToModify)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 82:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionIdleTimeout", wireType)
			}
			m.ConnectionIdleTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnectionIdleTimeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 83:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlowDdosMitigation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SlowDdosMitigation == nil {
				m.SlowDdosMitigation = &SlowDDoSMitigation{}
			}
			if err := m.SlowDdosMitigation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 84:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiSpec == nil {
				m.ApiSpec = &ApiSpec{}
			}
			if err := m.ApiSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 86:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsCertParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.CertificateParamsType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TlsCertificatesChoice = &CreateSpecType_TlsCertParams{v}
			iNdEx = postIndex
		case 88:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainCertMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DomainCertMap == nil {
				m.DomainCertMap = make(map[string]*DomainCertificates)
			}
			var mapkey string
			var mapvalue *DomainCertificates
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTypes
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthTypes
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &DomainCertificates{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.DomainCertMap[mapkey] = mapvalue
			iNdEx = postIndex
		case 1200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsProxyConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DnsProxyConfiguration == nil {
				m.DnsProxyConfiguration = &DNSProxyConfiguration{}
			}
			if err := m.DnsProxyConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Routes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Routes = append(m.Routes, &schema.ObjectRefType{})
			if err := m.Routes[len(m.Routes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertisePolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdvertisePolicies = append(m.AdvertisePolicies, &schema.ObjectRefType{})
			if err := m.AdvertisePolicies[len(m.AdvertisePolicies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestHeadersToAdd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestHeadersToAdd = append(m.RequestHeadersToAdd, &schema.HeaderManipulationOptionType{})
			if err := m.RequestHeadersToAdd[len(m.RequestHeadersToAdd)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseHeadersToAdd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponseHeadersToAdd = append(m.ResponseHeadersToAdd, &schema.HeaderManipulationOptionType{})
			if err := m.ResponseHeadersToAdd[len(m.ResponseHeadersToAdd)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseHeadersToRemove", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponseHeadersToRemove = append(m.ResponseHeadersToRemove, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.DownstreamTlsParamsType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TlsCertificatesChoice = &ReplaceSpecType_TlsParameters{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BufferPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BufferPolicy == nil {
				m.BufferPolicy = &schema.BufferConfigType{}
			}
			if err := m.BufferPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorsPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CorsPolicy == nil {
				m.CorsPolicy = &schema.CorsPolicy{}
			}
			if err := m.CorsPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proxy", wireType)
			}
			m.Proxy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Proxy |= ProxyType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestHeadersToRemove", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestHeadersToRemove = append(m.RequestHeadersToRemove, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WafType == nil {
				m.WafType = &schema.WafType{}
			}
			if err := m.WafType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynamicReverseProxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DynamicReverseProxy == nil {
				m.DynamicReverseProxy = &DynamicReverseProxyType{}
			}
			if err := m.DynamicReverseProxy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddLocation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddLocation = bool(v != 0)
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompressionParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CompressionParams == nil {
				m.CompressionParams = &CompressionType{}
			}
			if err := m.CompressionParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomErrors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CustomErrors == nil {
				m.CustomErrors = make(map[uint32]string)
			}
			var mapkey uint32
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.CustomErrors[mapkey] = mapvalue
			iNdEx = postIndex
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRequestHeaderSize", wireType)
			}
			m.MaxRequestHeaderSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxRequestHeaderSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JavascriptChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &ReplaceSpecType_JsChallenge{v}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdentification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserIdentification = append(m.UserIdentification, &schema.ObjectRefType{})
			if err := m.UserIdentification[len(m.UserIdentification)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimiter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RateLimiter = append(m.RateLimiter, &schema.ObjectRefType{})
			if err := m.RateLimiter[len(m.RateLimiter)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimiterAllowedPrefixes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RateLimiterAllowedPrefixes = append(m.RateLimiterAllowedPrefixes, &schema.ObjectRefType{})
			if err := m.RateLimiterAllowedPrefixes[len(m.RateLimiterAllowedPrefixes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RetryPolicy == nil {
				m.RetryPolicy = &schema.RetryPolicyType{}
			}
			if err := m.RetryPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptchaChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CaptchaChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &ReplaceSpecType_CaptchaChallenge{v}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &ReplaceSpecType_NoChallenge{v}
			iNdEx = postIndex
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdleTimeout", wireType)
			}
			m.IdleTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IdleTimeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableDefaultErrorPages", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableDefaultErrorPages = bool(v != 0)
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableDnsResolve", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableDnsResolve = bool(v != 0)
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TemporaryUserBlocking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TemporaryUserBlocking == nil {
				m.TemporaryUserBlocking = &TemporaryUserBlockingType{}
			}
			if err := m.TemporaryUserBlocking.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoAuthentication", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AuthenticationChoice = &ReplaceSpecType_NoAuthentication{v}
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authentication", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AuthenticationDetails{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AuthenticationChoice = &ReplaceSpecType_Authentication{v}
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServerHeaderChoice = &ReplaceSpecType_DefaultHeader{v}
			iNdEx = postIndex
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerHeaderChoice = &ReplaceSpecType_ServerName{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppendServerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerHeaderChoice = &ReplaceSpecType_AppendServerName{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassThrough", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServerHeaderChoice = &ReplaceSpecType_PassThrough{v}
			iNdEx = postIndex
		case 48:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnablePathNormalize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PathNormalizeChoice = &ReplaceSpecType_EnablePathNormalize{v}
			iNdEx = postIndex
		case 49:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisablePathNormalize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PathNormalizeChoice = &ReplaceSpecType_DisablePathNormalize{v}
			iNdEx = postIndex
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableStrictSniHostHeaderCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StrictSniHostHeaderCheckChoice = &ReplaceSpecType_EnableStrictSniHostHeaderCheck{v}
			iNdEx = postIndex
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdditionalDomains", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.DomainNameList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StrictSniHostHeaderCheckChoice = &ReplaceSpecType_AdditionalDomains{v}
			iNdEx = postIndex
		case 77:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NonDefaultLoadbalancer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DefaultLbChoice = &ReplaceSpecType_NonDefaultLoadbalancer{v}
			iNdEx = postIndex
		case 78:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultLoadbalancer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DefaultLbChoice = &ReplaceSpecType_DefaultLoadbalancer{v}
			iNdEx = postIndex
		case 79:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeaderTransformationType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HeaderTransformationType == nil {
				m.HeaderTransformationType = &schema.HeaderTransformationType{}
			}
			if err := m.HeaderTransformationType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 80:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CsrfPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CsrfPolicy == nil {
				m.CsrfPolicy = &schema.CsrfPolicy{}
			}
			if err := m.CsrfPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 81:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CookiesToModify", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CookiesToModify = append(m.CookiesToModify, &schema.CookieManipulationOptionType{})
			if err := m.CookiesToModify[len(m.CookiesToModify)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 82:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionIdleTimeout", wireType)
			}
			m.ConnectionIdleTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnectionIdleTimeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 83:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlowDdosMitigation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SlowDdosMitigation == nil {
				m.SlowDdosMitigation = &SlowDDoSMitigation{}
			}
			if err := m.SlowDdosMitigation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 84:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiSpec == nil {
				m.ApiSpec = &ApiSpec{}
			}
			if err := m.ApiSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 86:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsCertParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.CertificateParamsType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TlsCertificatesChoice = &ReplaceSpecType_TlsCertParams{v}
			iNdEx = postIndex
		case 88:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainCertMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DomainCertMap == nil {
				m.DomainCertMap = make(map[string]*DomainCertificates)
			}
			var mapkey string
			var mapvalue *DomainCertificates
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTypes
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthTypes
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &DomainCertificates{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.DomainCertMap[mapkey] = mapvalue
			iNdEx = postIndex
		case 1200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsProxyConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DnsProxyConfiguration == nil {
				m.DnsProxyConfiguration = &DNSProxyConfiguration{}
			}
			if err := m.DnsProxyConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Routes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Routes = append(m.Routes, &schema.ObjectRefType{})
			if err := m.Routes[len(m.Routes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertisePolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdvertisePolicies = append(m.AdvertisePolicies, &schema.ObjectRefType{})
			if err := m.AdvertisePolicies[len(m.AdvertisePolicies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestHeadersToAdd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestHeadersToAdd = append(m.RequestHeadersToAdd, &schema.HeaderManipulationOptionType{})
			if err := m.RequestHeadersToAdd[len(m.RequestHeadersToAdd)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseHeadersToAdd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponseHeadersToAdd = append(m.ResponseHeadersToAdd, &schema.HeaderManipulationOptionType{})
			if err := m.ResponseHeadersToAdd[len(m.ResponseHeadersToAdd)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseHeadersToRemove", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponseHeadersToRemove = append(m.ResponseHeadersToRemove, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.DownstreamTlsParamsType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TlsCertificatesChoice = &GetSpecType_TlsParameters{v}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= VirtualHostType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BufferPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BufferPolicy == nil {
				m.BufferPolicy = &schema.BufferConfigType{}
			}
			if err := m.BufferPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorsPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CorsPolicy == nil {
				m.CorsPolicy = &schema.CorsPolicy{}
			}
			if err := m.CorsPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proxy", wireType)
			}
			m.Proxy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Proxy |= ProxyType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestHeadersToRemove", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestHeadersToRemove = append(m.RequestHeadersToRemove, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WafType == nil {
				m.WafType = &schema.WafType{}
			}
			if err := m.WafType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynamicReverseProxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DynamicReverseProxy == nil {
				m.DynamicReverseProxy = &DynamicReverseProxyType{}
			}
			if err := m.DynamicReverseProxy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddLocation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddLocation = bool(v != 0)
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompressionParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CompressionParams == nil {
				m.CompressionParams = &CompressionType{}
			}
			if err := m.CompressionParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomErrors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CustomErrors == nil {
				m.CustomErrors = make(map[uint32]string)
			}
			var mapkey uint32
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.CustomErrors[mapkey] = mapvalue
			iNdEx = postIndex
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRequestHeaderSize", wireType)
			}
			m.MaxRequestHeaderSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxRequestHeaderSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JavascriptChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &GetSpecType_JsChallenge{v}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdentification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserIdentification = append(m.UserIdentification, &schema.ObjectRefType{})
			if err := m.UserIdentification[len(m.UserIdentification)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimiter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RateLimiter = append(m.RateLimiter, &schema.ObjectRefType{})
			if err := m.RateLimiter[len(m.RateLimiter)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimiterAllowedPrefixes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RateLimiterAllowedPrefixes = append(m.RateLimiterAllowedPrefixes, &schema.ObjectRefType{})
			if err := m.RateLimiterAllowedPrefixes[len(m.RateLimiterAllowedPrefixes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RetryPolicy == nil {
				m.RetryPolicy = &schema.RetryPolicyType{}
			}
			if err := m.RetryPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptchaChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CaptchaChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &GetSpecType_CaptchaChallenge{v}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &GetSpecType_NoChallenge{v}
			iNdEx = postIndex
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdleTimeout", wireType)
			}
			m.IdleTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IdleTimeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableDefaultErrorPages", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableDefaultErrorPages = bool(v != 0)
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableDnsResolve", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableDnsResolve = bool(v != 0)
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TemporaryUserBlocking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TemporaryUserBlocking == nil {
				m.TemporaryUserBlocking = &TemporaryUserBlockingType{}
			}
			if err := m.TemporaryUserBlocking.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoAuthentication", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AuthenticationChoice = &GetSpecType_NoAuthentication{v}
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authentication", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AuthenticationDetails{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AuthenticationChoice = &GetSpecType_Authentication{v}
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServerHeaderChoice = &GetSpecType_DefaultHeader{v}
			iNdEx = postIndex
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerHeaderChoice = &GetSpecType_ServerName{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppendServerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerHeaderChoice = &GetSpecType_AppendServerName{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassThrough", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServerHeaderChoice = &GetSpecType_PassThrough{v}
			iNdEx = postIndex
		case 48:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnablePathNormalize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PathNormalizeChoice = &GetSpecType_EnablePathNormalize{v}
			iNdEx = postIndex
		case 49:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisablePathNormalize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PathNormalizeChoice = &GetSpecType_DisablePathNormalize{v}
			iNdEx = postIndex
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableStrictSniHostHeaderCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StrictSniHostHeaderCheckChoice = &GetSpecType_EnableStrictSniHostHeaderCheck{v}
			iNdEx = postIndex
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdditionalDomains", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.DomainNameList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StrictSniHostHeaderCheckChoice = &GetSpecType_AdditionalDomains{v}
			iNdEx = postIndex
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CdnService", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CdnService == nil {
				m.CdnService = &CdnServiceType{}
			}
			if err := m.CdnService.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 77:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NonDefaultLoadbalancer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DefaultLbChoice = &GetSpecType_NonDefaultLoadbalancer{v}
			iNdEx = postIndex
		case 78:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultLoadbalancer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DefaultLbChoice = &GetSpecType_DefaultLoadbalancer{v}
			iNdEx = postIndex
		case 79:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeaderTransformationType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HeaderTransformationType == nil {
				m.HeaderTransformationType = &schema.HeaderTransformationType{}
			}
			if err := m.HeaderTransformationType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 80:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CsrfPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CsrfPolicy == nil {
				m.CsrfPolicy = &schema.CsrfPolicy{}
			}
			if err := m.CsrfPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 81:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CookiesToModify", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CookiesToModify = append(m.CookiesToModify, &schema.CookieManipulationOptionType{})
			if err := m.CookiesToModify[len(m.CookiesToModify)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 82:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionIdleTimeout", wireType)
			}
			m.ConnectionIdleTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnectionIdleTimeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 83:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlowDdosMitigation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SlowDdosMitigation == nil {
				m.SlowDdosMitigation = &SlowDDoSMitigation{}
			}
			if err := m.SlowDdosMitigation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 84:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiSpec == nil {
				m.ApiSpec = &ApiSpec{}
			}
			if err := m.ApiSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 86:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsCertParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.CertificateParamsType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TlsCertificatesChoice = &GetSpecType_TlsCertParams{v}
			iNdEx = postIndex
		case 88:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainCertMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DomainCertMap == nil {
				m.DomainCertMap = make(map[string]*DomainCertificates)
			}
			var mapkey string
			var mapvalue *DomainCertificates
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTypes
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthTypes
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &DomainCertificates{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.DomainCertMap[mapkey] = mapvalue
			iNdEx = postIndex
		case 1003:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= VirtualHostState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 1004:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 1005:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DnsInfo = append(m.DnsInfo, &virtual_host_dns_info.DnsInfo{})
			if err := m.DnsInfo[len(m.DnsInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1010:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoCertInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AutoCertInfo == nil {
				m.AutoCertInfo = &AutoCertInfoType{}
			}
			if err := m.AutoCertInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1023:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotReady", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DnsZoneStateChoice = &GetSpecType_NotReady{v}
			iNdEx = postIndex
		case 1024:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ready", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DnsZoneStateChoice = &GetSpecType_Ready{v}
			iNdEx = postIndex
		case 1025:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoCertErrorMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AutoCertErrorMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 1200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsProxyConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DnsProxyConfiguration == nil {
				m.DnsProxyConfiguration = &DNSProxyConfiguration{}
			}
			if err := m.DnsProxyConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

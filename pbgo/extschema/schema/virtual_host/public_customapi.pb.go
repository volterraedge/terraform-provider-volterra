// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/virtual_host/public_customapi.proto

// Virtual host
//
// x-displayName: "Virtual Host"
// Virtual host is main anchor configuration for a proxy. Primary application for virtual host configuration is
// reverse proxy.  Virtual host object is used to create a LoadBalancer, virtual service Or API gateway.
// It can also be viewed as base object to define application routing.
//
// Terminology
//
// Downstream: A downstream host connects to F5XC ADC, sends requests, and receives responses.
// Upstream: An upstream host receives connections and requests from F5XC ADC and returns responses.

package virtual_host

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	virtual_host_dns_info "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_host_dns_info"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Assign API Definition Request
//
// x-displayName: "Assign API Definition Request"
// Request form for Assign API Definition
type AssignAPIDefinitionReq struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "shared"
	// Namespace of the Virtual Hosts
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Name
	//
	// x-displayName: "Name"
	// x-example: "blogging-app"
	// Name of the Virtual Hosts
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// API Definition
	//
	// x-displayName: "API Definition"
	// x-required
	// A reference to API Definition object.
	// The referenced object may not exists.
	ApiDefinition *views.ObjectRefType `protobuf:"bytes,3,opt,name=api_definition,json=apiDefinition,proto3" json:"api_definition,omitempty"`
	// Create if not exists
	//
	// x-displayName: "Create New"
	// Create an empty API Definition object, if not exists
	CreateNew bool `protobuf:"varint,4,opt,name=create_new,json=createNew,proto3" json:"create_new,omitempty"`
}

func (m *AssignAPIDefinitionReq) Reset()      { *m = AssignAPIDefinitionReq{} }
func (*AssignAPIDefinitionReq) ProtoMessage() {}
func (*AssignAPIDefinitionReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_bad4dc18a44defc2, []int{0}
}
func (m *AssignAPIDefinitionReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssignAPIDefinitionReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssignAPIDefinitionReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssignAPIDefinitionReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssignAPIDefinitionReq.Merge(m, src)
}
func (m *AssignAPIDefinitionReq) XXX_Size() int {
	return m.Size()
}
func (m *AssignAPIDefinitionReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AssignAPIDefinitionReq.DiscardUnknown(m)
}

var xxx_messageInfo_AssignAPIDefinitionReq proto.InternalMessageInfo

func (m *AssignAPIDefinitionReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *AssignAPIDefinitionReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AssignAPIDefinitionReq) GetApiDefinition() *views.ObjectRefType {
	if m != nil {
		return m.ApiDefinition
	}
	return nil
}

func (m *AssignAPIDefinitionReq) GetCreateNew() bool {
	if m != nil {
		return m.CreateNew
	}
	return false
}

// Assign API Definition Response
//
// x-displayName: "Assign API Definition Response"
// Response form for Assign API Definition
type AssignAPIDefinitionResp struct {
}

func (m *AssignAPIDefinitionResp) Reset()      { *m = AssignAPIDefinitionResp{} }
func (*AssignAPIDefinitionResp) ProtoMessage() {}
func (*AssignAPIDefinitionResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_bad4dc18a44defc2, []int{1}
}
func (m *AssignAPIDefinitionResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssignAPIDefinitionResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssignAPIDefinitionResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssignAPIDefinitionResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssignAPIDefinitionResp.Merge(m, src)
}
func (m *AssignAPIDefinitionResp) XXX_Size() int {
	return m.Size()
}
func (m *AssignAPIDefinitionResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AssignAPIDefinitionResp.DiscardUnknown(m)
}

var xxx_messageInfo_AssignAPIDefinitionResp proto.InternalMessageInfo

// Get DNS info Request
//
// x-displayName: "Get DNS Info Request"
// Request message for get-dns-info API
type GetDnsInfoRequest struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "value"
	// Namespace for the virtual host
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Name
	//
	// x-displayName: "Name"
	// x-example: "value"
	// Name of the virtual host
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *GetDnsInfoRequest) Reset()      { *m = GetDnsInfoRequest{} }
func (*GetDnsInfoRequest) ProtoMessage() {}
func (*GetDnsInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bad4dc18a44defc2, []int{2}
}
func (m *GetDnsInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDnsInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDnsInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDnsInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDnsInfoRequest.Merge(m, src)
}
func (m *GetDnsInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetDnsInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDnsInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetDnsInfoRequest proto.InternalMessageInfo

func (m *GetDnsInfoRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *GetDnsInfoRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// GetDnsInfoResponse
//
// x-displayName: "Get DNS Info Response"
// Response for get-dns-info API
type GetDnsInfoResponse struct {
	// DNS information
	//
	// x-displayName: "DNS information"
	// DNS information object for this virtual host
	DnsInfo *virtual_host_dns_info.GlobalSpecType `protobuf:"bytes,1,opt,name=dns_info,json=dnsInfo,proto3" json:"dns_info,omitempty"`
}

func (m *GetDnsInfoResponse) Reset()      { *m = GetDnsInfoResponse{} }
func (*GetDnsInfoResponse) ProtoMessage() {}
func (*GetDnsInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bad4dc18a44defc2, []int{3}
}
func (m *GetDnsInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDnsInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDnsInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDnsInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDnsInfoResponse.Merge(m, src)
}
func (m *GetDnsInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetDnsInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDnsInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetDnsInfoResponse proto.InternalMessageInfo

func (m *GetDnsInfoResponse) GetDnsInfo() *virtual_host_dns_info.GlobalSpecType {
	if m != nil {
		return m.DnsInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*AssignAPIDefinitionReq)(nil), "ves.io.schema.virtual_host.AssignAPIDefinitionReq")
	golang_proto.RegisterType((*AssignAPIDefinitionReq)(nil), "ves.io.schema.virtual_host.AssignAPIDefinitionReq")
	proto.RegisterType((*AssignAPIDefinitionResp)(nil), "ves.io.schema.virtual_host.AssignAPIDefinitionResp")
	golang_proto.RegisterType((*AssignAPIDefinitionResp)(nil), "ves.io.schema.virtual_host.AssignAPIDefinitionResp")
	proto.RegisterType((*GetDnsInfoRequest)(nil), "ves.io.schema.virtual_host.GetDnsInfoRequest")
	golang_proto.RegisterType((*GetDnsInfoRequest)(nil), "ves.io.schema.virtual_host.GetDnsInfoRequest")
	proto.RegisterType((*GetDnsInfoResponse)(nil), "ves.io.schema.virtual_host.GetDnsInfoResponse")
	golang_proto.RegisterType((*GetDnsInfoResponse)(nil), "ves.io.schema.virtual_host.GetDnsInfoResponse")
}

func init() {
	proto.RegisterFile("ves.io/schema/virtual_host/public_customapi.proto", fileDescriptor_bad4dc18a44defc2)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/virtual_host/public_customapi.proto", fileDescriptor_bad4dc18a44defc2)
}

var fileDescriptor_bad4dc18a44defc2 = []byte{
	// 714 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0x41, 0x4f, 0xdb, 0x48,
	0x18, 0xcd, 0x04, 0xb4, 0x4b, 0x06, 0xed, 0x6a, 0xf1, 0x4a, 0xbb, 0xd9, 0x2c, 0xeb, 0x4d, 0x7d,
	0x42, 0x55, 0xed, 0x69, 0x83, 0xb8, 0x70, 0x2a, 0x94, 0x0a, 0xd1, 0x03, 0xa0, 0xb4, 0xa7, 0xaa,
	0x52, 0x34, 0xb1, 0xbf, 0x38, 0xd3, 0x3a, 0x33, 0x83, 0x67, 0x9c, 0x10, 0x55, 0x48, 0x15, 0x52,
	0x2f, 0x3d, 0x55, 0xa2, 0x3f, 0xa2, 0xea, 0x2f, 0xa8, 0xc4, 0x85, 0x1b, 0xf4, 0x52, 0xa1, 0xf6,
	0xc2, 0xb1, 0x38, 0x3d, 0xf4, 0x88, 0xd4, 0x3f, 0x50, 0xc5, 0x0e, 0x09, 0xa4, 0x01, 0x95, 0xde,
	0xbe, 0xf1, 0x9b, 0xf7, 0xfc, 0xbd, 0x37, 0xdf, 0x0c, 0xbe, 0xd5, 0x04, 0xe5, 0x30, 0x41, 0x94,
	0x5b, 0x87, 0x06, 0x25, 0x4d, 0x16, 0xea, 0x88, 0x06, 0x95, 0xba, 0x50, 0x9a, 0xc8, 0xa8, 0x1a,
	0x30, 0xb7, 0xe2, 0x46, 0x4a, 0x8b, 0x06, 0x95, 0xcc, 0x91, 0xa1, 0xd0, 0xc2, 0x28, 0xa4, 0x14,
	0x27, 0xa5, 0x38, 0x67, 0x29, 0x05, 0xdb, 0x67, 0xba, 0x1e, 0x55, 0x1d, 0x57, 0x34, 0x88, 0x2f,
	0x7c, 0x41, 0x12, 0x4a, 0x35, 0xaa, 0x25, 0xab, 0x64, 0x91, 0x54, 0xa9, 0x54, 0x61, 0xda, 0x17,
	0xc2, 0x0f, 0x80, 0x50, 0xc9, 0x08, 0xe5, 0x5c, 0x68, 0xaa, 0x99, 0xe0, 0xaa, 0x87, 0xfe, 0x7b,
	0xbe, 0x37, 0x21, 0xcf, 0x82, 0xd3, 0x43, 0x8d, 0xd3, 0x80, 0x79, 0x54, 0x43, 0x0f, 0xb5, 0x86,
	0x50, 0x50, 0xc0, 0x9b, 0x43, 0x0a, 0xff, 0x0f, 0x5b, 0x87, 0x96, 0x22, 0xba, 0x2d, 0xe1, 0x74,
	0xc3, 0xcd, 0x8b, 0xb3, 0xa9, 0x78, 0x5c, 0x55, 0x18, 0xaf, 0x09, 0x22, 0xaa, 0x8f, 0xc1, 0xd5,
	0x29, 0xc3, 0xda, 0x47, 0xf8, 0xaf, 0x05, 0xa5, 0x98, 0xcf, 0x17, 0xd6, 0x57, 0x96, 0xa0, 0xc6,
	0x38, 0xeb, 0xfe, 0xb1, 0x0c, 0x1b, 0xc6, 0x34, 0xce, 0x71, 0xda, 0x00, 0x25, 0xa9, 0x0b, 0x79,
	0x54, 0x44, 0x33, 0xb9, 0xf2, 0xe0, 0x83, 0x61, 0xe0, 0xf1, 0xee, 0x22, 0x9f, 0x4d, 0x80, 0xa4,
	0x36, 0x1e, 0xe1, 0xdf, 0xa9, 0x64, 0x15, 0xaf, 0x2f, 0x93, 0x1f, 0x2b, 0xa2, 0x99, 0xc9, 0x92,
	0xe5, 0x0c, 0x1f, 0x00, 0xb4, 0x94, 0xb3, 0x96, 0xf4, 0x51, 0x86, 0xda, 0x83, 0xb6, 0x84, 0xc5,
	0xa9, 0x37, 0x5b, 0x43, 0xe4, 0xf2, 0x6f, 0x54, 0xb2, 0x41, 0x4b, 0xc6, 0x7f, 0x18, 0xbb, 0x21,
	0x50, 0x0d, 0x15, 0x0e, 0xad, 0xfc, 0x78, 0x11, 0xcd, 0x4c, 0x94, 0x73, 0xe9, 0x97, 0x55, 0x68,
	0x59, 0xff, 0xe0, 0xbf, 0x47, 0x1a, 0x51, 0xd2, 0xba, 0x8b, 0xa7, 0x96, 0x41, 0x2f, 0x71, 0xb5,
	0xc2, 0x6b, 0xa2, 0x0c, 0x1b, 0x11, 0x28, 0x7d, 0x75, 0x7b, 0x96, 0x87, 0x8d, 0xb3, 0x32, 0x4a,
	0x0a, 0xae, 0xc0, 0x58, 0xc5, 0x13, 0xa7, 0xd1, 0x26, 0x32, 0x93, 0xa5, 0x59, 0xe7, 0xe2, 0x79,
	0xeb, 0x1f, 0x83, 0xb3, 0x1c, 0x88, 0x2a, 0x0d, 0xee, 0x4b, 0x70, 0xbb, 0xfe, 0xcb, 0xbf, 0x7a,
	0xa9, 0x6e, 0xe9, 0xdd, 0x38, 0xce, 0xdd, 0x49, 0x06, 0x78, 0x61, 0x7d, 0xc5, 0xf8, 0x8a, 0x30,
	0x1e, 0xfc, 0xd4, 0xb0, 0x2f, 0x91, 0x76, 0xbe, 0xf3, 0x58, 0x70, 0x7e, 0x74, 0x7b, 0xea, 0xc5,
	0x7a, 0x8e, 0x0e, 0xde, 0x66, 0x51, 0xbc, 0x9f, 0x9f, 0xab, 0xcd, 0x6d, 0xba, 0xb6, 0x02, 0x37,
	0x0a, 0xa1, 0x01, 0xaa, 0x6e, 0x2b, 0x4d, 0xb9, 0x47, 0x43, 0xcf, 0x6e, 0x08, 0xce, 0xb4, 0x08,
	0x6f, 0x14, 0x9b, 0xa0, 0x6c, 0x26, 0x6c, 0x1f, 0x38, 0x84, 0x34, 0xb0, 0x43, 0xa0, 0xde, 0xf6,
	0xc7, 0xcf, 0x3b, 0xd9, 0x45, 0xe3, 0x76, 0xef, 0x1e, 0x92, 0x7e, 0x9c, 0x8a, 0x3c, 0xed, 0xd7,
	0x5b, 0xe7, 0xc6, 0xb2, 0x87, 0x6c, 0x11, 0x1f, 0xb4, 0xed, 0x71, 0x65, 0x77, 0xb3, 0x31, 0x5e,
	0x65, 0xf1, 0x9f, 0x23, 0x0e, 0xd3, 0x28, 0x5d, 0xe6, 0x67, 0xf4, 0x18, 0x17, 0x66, 0xaf, 0xcc,
	0x51, 0xd2, 0xda, 0xe9, 0x86, 0x30, 0x7f, 0x61, 0x08, 0x91, 0x82, 0x41, 0x02, 0x32, 0x14, 0x9b,
	0xed, 0x74, 0x1b, 0xd3, 0x6d, 0xbb, 0x15, 0x32, 0x0d, 0x49, 0x12, 0x6b, 0xd6, 0xbd, 0x9f, 0x49,
	0xe2, 0xfc, 0x2d, 0x50, 0x84, 0x26, 0x3d, 0xce, 0xa3, 0xeb, 0x05, 0xb2, 0xb7, 0x8b, 0xc6, 0x3e,
	0xec, 0xa2, 0x6b, 0x97, 0x38, 0x4a, 0x6f, 0xd5, 0xf6, 0xfb, 0x7c, 0xf6, 0x0f, 0xb4, 0xf8, 0x02,
	0x1d, 0x1e, 0x9b, 0x99, 0xa3, 0x63, 0x33, 0x73, 0x72, 0x6c, 0xa2, 0x67, 0xb1, 0x89, 0x5e, 0xc7,
	0x26, 0x3a, 0x88, 0x4d, 0x74, 0x18, 0x9b, 0xe8, 0x53, 0x6c, 0xa2, 0x2f, 0xb1, 0x99, 0x39, 0x89,
	0x4d, 0xf4, 0xb2, 0x63, 0x66, 0xf6, 0x3a, 0x26, 0x3a, 0xec, 0x98, 0x99, 0xa3, 0x8e, 0x99, 0x79,
	0xb8, 0xee, 0x0b, 0xf9, 0xc4, 0x77, 0x9a, 0x22, 0xd0, 0x10, 0x86, 0xd4, 0x89, 0x14, 0x49, 0x8a,
	0x9a, 0x08, 0x1b, 0x5d, 0xcb, 0x4d, 0xe6, 0x41, 0x68, 0x9f, 0xc2, 0x44, 0x56, 0x7d, 0x41, 0x60,
	0x53, 0xf7, 0x5e, 0x9e, 0x11, 0x0f, 0x50, 0xf5, 0x97, 0xe4, 0xc5, 0x99, 0xfd, 0x16, 0x00, 0x00,
	0xff, 0xff, 0xad, 0xe9, 0x31, 0xa8, 0xc1, 0x05, 0x00, 0x00,
}

func (this *AssignAPIDefinitionReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AssignAPIDefinitionReq)
	if !ok {
		that2, ok := that.(AssignAPIDefinitionReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.ApiDefinition.Equal(that1.ApiDefinition) {
		return false
	}
	if this.CreateNew != that1.CreateNew {
		return false
	}
	return true
}
func (this *AssignAPIDefinitionResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AssignAPIDefinitionResp)
	if !ok {
		that2, ok := that.(AssignAPIDefinitionResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetDnsInfoRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetDnsInfoRequest)
	if !ok {
		that2, ok := that.(GetDnsInfoRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *GetDnsInfoResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetDnsInfoResponse)
	if !ok {
		that2, ok := that.(GetDnsInfoResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DnsInfo.Equal(that1.DnsInfo) {
		return false
	}
	return true
}
func (this *AssignAPIDefinitionReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&virtual_host.AssignAPIDefinitionReq{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.ApiDefinition != nil {
		s = append(s, "ApiDefinition: "+fmt.Sprintf("%#v", this.ApiDefinition)+",\n")
	}
	s = append(s, "CreateNew: "+fmt.Sprintf("%#v", this.CreateNew)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AssignAPIDefinitionResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&virtual_host.AssignAPIDefinitionResp{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetDnsInfoRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&virtual_host.GetDnsInfoRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetDnsInfoResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&virtual_host.GetDnsInfoResponse{")
	if this.DnsInfo != nil {
		s = append(s, "DnsInfo: "+fmt.Sprintf("%#v", this.DnsInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPublicCustomapi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CustomAPIClient is the client API for CustomAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomAPIClient interface {
	// GetDnsInfo
	//
	// x-displayName: "Get DNS Info"
	// GetDnsInfo is an API to get DNS information for a given virtual host
	GetDnsInfo(ctx context.Context, in *GetDnsInfoRequest, opts ...grpc.CallOption) (*GetDnsInfoResponse, error)
	// Assign API Definition
	//
	// x-displayName: "Assign API Definition"
	// Set a reference to the API Definition, with an option to create an empty one if not exists.
	AssignAPIDefinition(ctx context.Context, in *AssignAPIDefinitionReq, opts ...grpc.CallOption) (*AssignAPIDefinitionResp, error)
}

type customAPIClient struct {
	cc *grpc.ClientConn
}

func NewCustomAPIClient(cc *grpc.ClientConn) CustomAPIClient {
	return &customAPIClient{cc}
}

func (c *customAPIClient) GetDnsInfo(ctx context.Context, in *GetDnsInfoRequest, opts ...grpc.CallOption) (*GetDnsInfoResponse, error) {
	out := new(GetDnsInfoResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.virtual_host.CustomAPI/GetDnsInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) AssignAPIDefinition(ctx context.Context, in *AssignAPIDefinitionReq, opts ...grpc.CallOption) (*AssignAPIDefinitionResp, error) {
	out := new(AssignAPIDefinitionResp)
	err := c.cc.Invoke(ctx, "/ves.io.schema.virtual_host.CustomAPI/AssignAPIDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomAPIServer is the server API for CustomAPI service.
type CustomAPIServer interface {
	// GetDnsInfo
	//
	// x-displayName: "Get DNS Info"
	// GetDnsInfo is an API to get DNS information for a given virtual host
	GetDnsInfo(context.Context, *GetDnsInfoRequest) (*GetDnsInfoResponse, error)
	// Assign API Definition
	//
	// x-displayName: "Assign API Definition"
	// Set a reference to the API Definition, with an option to create an empty one if not exists.
	AssignAPIDefinition(context.Context, *AssignAPIDefinitionReq) (*AssignAPIDefinitionResp, error)
}

// UnimplementedCustomAPIServer can be embedded to have forward compatible implementations.
type UnimplementedCustomAPIServer struct {
}

func (*UnimplementedCustomAPIServer) GetDnsInfo(ctx context.Context, req *GetDnsInfoRequest) (*GetDnsInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDnsInfo not implemented")
}
func (*UnimplementedCustomAPIServer) AssignAPIDefinition(ctx context.Context, req *AssignAPIDefinitionReq) (*AssignAPIDefinitionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignAPIDefinition not implemented")
}

func RegisterCustomAPIServer(s *grpc.Server, srv CustomAPIServer) {
	s.RegisterService(&_CustomAPI_serviceDesc, srv)
}

func _CustomAPI_GetDnsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDnsInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).GetDnsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.virtual_host.CustomAPI/GetDnsInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).GetDnsInfo(ctx, req.(*GetDnsInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_AssignAPIDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignAPIDefinitionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).AssignAPIDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.virtual_host.CustomAPI/AssignAPIDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).AssignAPIDefinition(ctx, req.(*AssignAPIDefinitionReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.virtual_host.CustomAPI",
	HandlerType: (*CustomAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDnsInfo",
			Handler:    _CustomAPI_GetDnsInfo_Handler,
		},
		{
			MethodName: "AssignAPIDefinition",
			Handler:    _CustomAPI_AssignAPIDefinition_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/virtual_host/public_customapi.proto",
}

func (m *AssignAPIDefinitionReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssignAPIDefinitionReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssignAPIDefinitionReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreateNew {
		i--
		if m.CreateNew {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.ApiDefinition != nil {
		{
			size, err := m.ApiDefinition.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AssignAPIDefinitionResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssignAPIDefinitionResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssignAPIDefinitionResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetDnsInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDnsInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDnsInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetDnsInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDnsInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDnsInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DnsInfo != nil {
		{
			size, err := m.DnsInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPublicCustomapi(dAtA []byte, offset int, v uint64) int {
	offset -= sovPublicCustomapi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AssignAPIDefinitionReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.ApiDefinition != nil {
		l = m.ApiDefinition.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.CreateNew {
		n += 2
	}
	return n
}

func (m *AssignAPIDefinitionResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetDnsInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *GetDnsInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DnsInfo != nil {
		l = m.DnsInfo.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func sovPublicCustomapi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPublicCustomapi(x uint64) (n int) {
	return sovPublicCustomapi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *AssignAPIDefinitionReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AssignAPIDefinitionReq{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ApiDefinition:` + strings.Replace(fmt.Sprintf("%v", this.ApiDefinition), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`CreateNew:` + fmt.Sprintf("%v", this.CreateNew) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AssignAPIDefinitionResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AssignAPIDefinitionResp{`,
		`}`,
	}, "")
	return s
}
func (this *GetDnsInfoRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetDnsInfoRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetDnsInfoResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetDnsInfoResponse{`,
		`DnsInfo:` + strings.Replace(fmt.Sprintf("%v", this.DnsInfo), "GlobalSpecType", "virtual_host_dns_info.GlobalSpecType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPublicCustomapi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *AssignAPIDefinitionReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssignAPIDefinitionReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssignAPIDefinitionReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiDefinition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiDefinition == nil {
				m.ApiDefinition = &views.ObjectRefType{}
			}
			if err := m.ApiDefinition.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateNew", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateNew = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssignAPIDefinitionResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssignAPIDefinitionResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssignAPIDefinitionResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDnsInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDnsInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDnsInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDnsInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDnsInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDnsInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DnsInfo == nil {
				m.DnsInfo = &virtual_host_dns_info.GlobalSpecType{}
			}
			if err := m.DnsInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublicCustomapi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPublicCustomapi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPublicCustomapi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPublicCustomapi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPublicCustomapi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublicCustomapi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPublicCustomapi = fmt.Errorf("proto: unexpected end of group")
)

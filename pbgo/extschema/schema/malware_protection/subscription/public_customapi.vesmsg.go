// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package subscription

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *SubscribeRequest) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SubscribeRequest) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SubscribeRequest) DeepCopy() *SubscribeRequest {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SubscribeRequest{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SubscribeRequest) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SubscribeRequest) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SubscribeRequestValidator().Validate(ctx, m, opts...)
}

type ValidateSubscribeRequest struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSubscribeRequest) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SubscribeRequest)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SubscribeRequest got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSubscribeRequestValidator = func() *ValidateSubscribeRequest {
	v := &ValidateSubscribeRequest{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func SubscribeRequestValidator() db.Validator {
	return DefaultSubscribeRequestValidator
}

// augmented methods on protoc/std generated struct

func (m *SubscribeResponse) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SubscribeResponse) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SubscribeResponse) DeepCopy() *SubscribeResponse {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SubscribeResponse{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SubscribeResponse) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SubscribeResponse) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SubscribeResponseValidator().Validate(ctx, m, opts...)
}

type ValidateSubscribeResponse struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSubscribeResponse) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SubscribeResponse)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SubscribeResponse got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSubscribeResponseValidator = func() *ValidateSubscribeResponse {
	v := &ValidateSubscribeResponse{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func SubscribeResponseValidator() db.Validator {
	return DefaultSubscribeResponseValidator
}

// augmented methods on protoc/std generated struct

func (m *UnsubscribeRequest) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *UnsubscribeRequest) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *UnsubscribeRequest) DeepCopy() *UnsubscribeRequest {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &UnsubscribeRequest{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *UnsubscribeRequest) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *UnsubscribeRequest) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return UnsubscribeRequestValidator().Validate(ctx, m, opts...)
}

type ValidateUnsubscribeRequest struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateUnsubscribeRequest) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*UnsubscribeRequest)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *UnsubscribeRequest got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultUnsubscribeRequestValidator = func() *ValidateUnsubscribeRequest {
	v := &ValidateUnsubscribeRequest{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func UnsubscribeRequestValidator() db.Validator {
	return DefaultUnsubscribeRequestValidator
}

// augmented methods on protoc/std generated struct

func (m *UnsubscribeResponse) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *UnsubscribeResponse) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *UnsubscribeResponse) DeepCopy() *UnsubscribeResponse {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &UnsubscribeResponse{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *UnsubscribeResponse) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *UnsubscribeResponse) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return UnsubscribeResponseValidator().Validate(ctx, m, opts...)
}

type ValidateUnsubscribeResponse struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateUnsubscribeResponse) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*UnsubscribeResponse)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *UnsubscribeResponse got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultUnsubscribeResponseValidator = func() *ValidateUnsubscribeResponse {
	v := &ValidateUnsubscribeResponse{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func UnsubscribeResponseValidator() db.Validator {
	return DefaultUnsubscribeResponseValidator
}

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/usb_policy/public_crudapi.proto

// USB policy
//
// x-displayName: "USB policy"
// USB policy is used to specify list of USB devices allowed to be attached to node.

package usb_policy

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GetResponseFormatCode
//
// x-displayName: "Get Response Format"
// This is the various forms that can be requested to be sent in the GetResponse
type GetResponseFormatCode int32

const (
	// x-displayName: "Default Format"
	// Default format of returned resource
	GET_RSP_FORMAT_DEFAULT GetResponseFormatCode = 0
	// x-displayName: "Create request Format"
	// Response should be in CreateRequest format
	GET_RSP_FORMAT_FOR_CREATE GetResponseFormatCode = 1
	// x-displayName: "Replace request format"
	// Response should be in ReplaceRequest format
	GET_RSP_FORMAT_FOR_REPLACE GetResponseFormatCode = 2
	// x-displayName: "Status format"
	// Response should be in StatusObject(s) format
	GET_RSP_FORMAT_STATUS GetResponseFormatCode = 3
	// x-displayName: "GetSpecType format"
	// Response should be in format of GetSpecType
	GET_RSP_FORMAT_READ GetResponseFormatCode = 4
	// x-displayName: "Referring Objects"
	// Response should have other objects referring to this object
	GET_RSP_FORMAT_REFERRING_OBJECTS GetResponseFormatCode = 5
)

var GetResponseFormatCode_name = map[int32]string{
	0: "GET_RSP_FORMAT_DEFAULT",
	1: "GET_RSP_FORMAT_FOR_CREATE",
	2: "GET_RSP_FORMAT_FOR_REPLACE",
	3: "GET_RSP_FORMAT_STATUS",
	4: "GET_RSP_FORMAT_READ",
	5: "GET_RSP_FORMAT_REFERRING_OBJECTS",
}

var GetResponseFormatCode_value = map[string]int32{
	"GET_RSP_FORMAT_DEFAULT":           0,
	"GET_RSP_FORMAT_FOR_CREATE":        1,
	"GET_RSP_FORMAT_FOR_REPLACE":       2,
	"GET_RSP_FORMAT_STATUS":            3,
	"GET_RSP_FORMAT_READ":              4,
	"GET_RSP_FORMAT_REFERRING_OBJECTS": 5,
}

func (GetResponseFormatCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_51045b471d6ad973, []int{0}
}

// CreateRequest is used to create an instance of usb_policy
//
// x-displayName: "Create Request"
// This is the input message of the 'Create' RPC
type CreateRequest struct {
	// metadata
	//
	// x-displayName: "Metadata"
	// Common attributes that can be set during create for all configuration objects like name, labels etc.
	Metadata *schema.ObjectCreateMetaType `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// spec
	//
	// x-displayName: "Spec"
	// A specification of the configuration object to be created
	Spec *CreateSpecType `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (m *CreateRequest) Reset()      { *m = CreateRequest{} }
func (*CreateRequest) ProtoMessage() {}
func (*CreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_51045b471d6ad973, []int{0}
}
func (m *CreateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRequest.Merge(m, src)
}
func (m *CreateRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRequest proto.InternalMessageInfo

func (m *CreateRequest) GetMetadata() *schema.ObjectCreateMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *CreateRequest) GetSpec() *CreateSpecType {
	if m != nil {
		return m.Spec
	}
	return nil
}

type CreateResponse struct {
	// metadata
	//
	// x-displayName: "Metadata"
	// Common attributes of the object like name, labels etc.
	Metadata *schema.ObjectGetMetaType `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// system metadata
	//
	// x-displayName: "System Metadata"
	// System generated attributes all this object.
	SystemMetadata *schema.SystemObjectGetMetaType `protobuf:"bytes,3,opt,name=system_metadata,json=systemMetadata,proto3" json:"system_metadata,omitempty"`
	// spec
	//
	// x-displayName: "Spec"
	// A specification of the configuration object created
	Spec *GetSpecType `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (m *CreateResponse) Reset()      { *m = CreateResponse{} }
func (*CreateResponse) ProtoMessage() {}
func (*CreateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_51045b471d6ad973, []int{1}
}
func (m *CreateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateResponse.Merge(m, src)
}
func (m *CreateResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateResponse proto.InternalMessageInfo

func (m *CreateResponse) GetMetadata() *schema.ObjectGetMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *CreateResponse) GetSystemMetadata() *schema.SystemObjectGetMetaType {
	if m != nil {
		return m.SystemMetadata
	}
	return nil
}

func (m *CreateResponse) GetSpec() *GetSpecType {
	if m != nil {
		return m.Spec
	}
	return nil
}

// ReplaceRequest is used to replace contents of a usb_policy
//
// x-displayName: "Replace Request"
// This is the input message of the 'Replace' RPC
type ReplaceRequest struct {
	// metadata
	//
	// x-displayName: "Metadata"
	// Common attributes that can be set during replace for all configuration objects like labels etc.
	Metadata *schema.ObjectReplaceMetaType `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// spec
	//
	// x-displayName: "Spec"
	// A specification of the configuration object to be replaced
	Spec *ReplaceSpecType `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	// resource_version
	//
	// x-displayName: "Resource Version"
	// x-example: "42"
	// If provided, do the replace operation if the configuration object is still at 'resource_version'
	ResourceVersion string `protobuf:"bytes,3,opt,name=resource_version,json=resourceVersion,proto3" json:"resource_version,omitempty"`
}

func (m *ReplaceRequest) Reset()      { *m = ReplaceRequest{} }
func (*ReplaceRequest) ProtoMessage() {}
func (*ReplaceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_51045b471d6ad973, []int{2}
}
func (m *ReplaceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplaceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplaceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceRequest.Merge(m, src)
}
func (m *ReplaceRequest) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceRequest proto.InternalMessageInfo

func (m *ReplaceRequest) GetMetadata() *schema.ObjectReplaceMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *ReplaceRequest) GetSpec() *ReplaceSpecType {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *ReplaceRequest) GetResourceVersion() string {
	if m != nil {
		return m.ResourceVersion
	}
	return ""
}

type ReplaceResponse struct {
}

func (m *ReplaceResponse) Reset()      { *m = ReplaceResponse{} }
func (*ReplaceResponse) ProtoMessage() {}
func (*ReplaceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_51045b471d6ad973, []int{3}
}
func (m *ReplaceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplaceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplaceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceResponse.Merge(m, src)
}
func (m *ReplaceResponse) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceResponse proto.InternalMessageInfo

// GetRequest is used to get different forms of a usb_policy
//
// x-displayName: "Get Request"
// This is the input message of the 'Get' RPC. Different forms of a resource
// for e.g. a ReplaceRequest form (for editing), a CreateRequest form (for
// creating new instance of usb_policy) etc. can be fetched
type GetRequest struct {
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// The namespace in which the configuration object is present
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// name
	//
	// x-displayName: "Name"
	// x-example: "name"
	// The name of the configuration object to be fetched
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// response_format
	//
	// x-displayName: "Response Format"
	// The format in which the configuration object is to be fetched. This could be for example
	//     - in GetSpec form for the contents of object
	//     - in CreateRequest form to create a new similar object
	//     - to ReplaceRequest form to replace changeable values
	ResponseFormat GetResponseFormatCode `protobuf:"varint,3,opt,name=response_format,json=responseFormat,proto3,enum=ves.io.schema.usb_policy.GetResponseFormatCode" json:"response_format,omitempty"`
}

func (m *GetRequest) Reset()      { *m = GetRequest{} }
func (*GetRequest) ProtoMessage() {}
func (*GetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_51045b471d6ad973, []int{4}
}
func (m *GetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRequest.Merge(m, src)
}
func (m *GetRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRequest proto.InternalMessageInfo

func (m *GetRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *GetRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetRequest) GetResponseFormat() GetResponseFormatCode {
	if m != nil {
		return m.ResponseFormat
	}
	return GET_RSP_FORMAT_DEFAULT
}

// GetResponse is the shape of a read usb_policy
//
// x-displayName: "Get Response"
// This is the output message of the 'Get' RPC
type GetResponse struct {
	// object
	//
	// x-displayName: "Object"
	Object *Object `protobuf:"bytes,1,opt,name=object,proto3" json:"object,omitempty"`
	// create_form
	//
	// x-displayName: "CreateRequest Format"
	// Format used to create a new similar object
	CreateForm *CreateRequest `protobuf:"bytes,2,opt,name=create_form,json=createForm,proto3" json:"create_form,omitempty"`
	// replace_form
	//
	// x-displayName: "ReplaceRequest Format"
	// Format to replace changeable values in object
	ReplaceForm *ReplaceRequest `protobuf:"bytes,3,opt,name=replace_form,json=replaceForm,proto3" json:"replace_form,omitempty"`
	// resource_version
	//
	// x-displayName: "Resource Version"
	// x-example: "42"
	// Version of the object
	ResourceVersion string `protobuf:"bytes,4,opt,name=resource_version,json=resourceVersion,proto3" json:"resource_version,omitempty"`
	// metadata
	//
	// x-displayName: "Metadata"
	// Common attributes of the object like name, labels etc.
	Metadata *schema.ObjectGetMetaType `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// system metadata
	//
	// x-displayName: "System Metadata"
	// System generated attributes of this object.
	SystemMetadata *schema.SystemObjectGetMetaType `protobuf:"bytes,7,opt,name=system_metadata,json=systemMetadata,proto3" json:"system_metadata,omitempty"`
	// spec
	//
	// x-displayName: "Spec"
	// A specification of the configuration object read
	Spec *GetSpecType `protobuf:"bytes,6,opt,name=spec,proto3" json:"spec,omitempty"`
	// status
	//
	// x-displayName: "Status"
	// The status reported by different services for this configuration object
	Status []*StatusObject `protobuf:"bytes,20000,rep,name=status,proto3" json:"status,omitempty"`
	// referring_objects
	//
	// x-displayName: "Referring Objects"
	// The set of objects that are referring to this object in their spec
	ReferringObjects []*schema.ObjectRefType `protobuf:"bytes,8,rep,name=referring_objects,json=referringObjects,proto3" json:"referring_objects,omitempty"`
}

func (m *GetResponse) Reset()      { *m = GetResponse{} }
func (*GetResponse) ProtoMessage() {}
func (*GetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_51045b471d6ad973, []int{5}
}
func (m *GetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetResponse.Merge(m, src)
}
func (m *GetResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetResponse proto.InternalMessageInfo

func (m *GetResponse) GetObject() *Object {
	if m != nil {
		return m.Object
	}
	return nil
}

func (m *GetResponse) GetCreateForm() *CreateRequest {
	if m != nil {
		return m.CreateForm
	}
	return nil
}

func (m *GetResponse) GetReplaceForm() *ReplaceRequest {
	if m != nil {
		return m.ReplaceForm
	}
	return nil
}

func (m *GetResponse) GetResourceVersion() string {
	if m != nil {
		return m.ResourceVersion
	}
	return ""
}

func (m *GetResponse) GetMetadata() *schema.ObjectGetMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *GetResponse) GetSystemMetadata() *schema.SystemObjectGetMetaType {
	if m != nil {
		return m.SystemMetadata
	}
	return nil
}

func (m *GetResponse) GetSpec() *GetSpecType {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *GetResponse) GetStatus() []*StatusObject {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *GetResponse) GetReferringObjects() []*schema.ObjectRefType {
	if m != nil {
		return m.ReferringObjects
	}
	return nil
}

// ListRequest is used to get a collection of usb_policy
//
// x-displayName: "List Request"
// This is the input message of the 'List' RPC. Fields can be used to control
// scope and filtering of collection.
type ListRequest struct {
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// Namespace to scope the listing of usb_policy
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// label_filter
	//
	// x-displayName: "Label Filter"
	// x-example: "env in (staging, testing), tier in (web, db)"
	// A LabelSelectorType expression that every item in list response will satisfy
	LabelFilter string `protobuf:"bytes,2,opt,name=label_filter,json=labelFilter,proto3" json:"label_filter,omitempty"`
	// report_fields
	//
	// x-displayName: "Report Fields"
	// x-example: ""
	// Extra fields to return along with summary fields
	ReportFields []string `protobuf:"bytes,3,rep,name=report_fields,json=reportFields,proto3" json:"report_fields,omitempty"`
	// report_status_fields
	//
	// x-displayName: "Report Status Fields"
	// x-example: ""
	// Extra status fields to return along with summary fields
	ReportStatusFields []string `protobuf:"bytes,4,rep,name=report_status_fields,json=reportStatusFields,proto3" json:"report_status_fields,omitempty"`
}

func (m *ListRequest) Reset()      { *m = ListRequest{} }
func (*ListRequest) ProtoMessage() {}
func (*ListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_51045b471d6ad973, []int{6}
}
func (m *ListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRequest.Merge(m, src)
}
func (m *ListRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListRequest proto.InternalMessageInfo

func (m *ListRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ListRequest) GetLabelFilter() string {
	if m != nil {
		return m.LabelFilter
	}
	return ""
}

func (m *ListRequest) GetReportFields() []string {
	if m != nil {
		return m.ReportFields
	}
	return nil
}

func (m *ListRequest) GetReportStatusFields() []string {
	if m != nil {
		return m.ReportStatusFields
	}
	return nil
}

// ListResponseItem is an individual item in a collection of usb_policy
//
// x-displayName: "List Item"
// By default a summary of usb_policy is returned in 'List'. By setting
// 'report_fields' in the ListRequest more details of each item can be got.
type ListResponseItem struct {
	// tenant
	//
	// x-displayName: "Tenant"
	// x-example: "acmecorp"
	// The tenant this item belongs to
	Tenant string `protobuf:"bytes,6,opt,name=tenant,proto3" json:"tenant,omitempty"`
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// The namespace this item belongs to
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// name
	//
	// x-displayName: "Name"
	// x-example: "name"
	// The name of this usb_policy
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// uid
	//
	// x-displayName: "UID"
	// x-example: "d27938ba-967e-40a7-9709-57b8627f9f75"
	// The unique uid of this usb_policy
	Uid string `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`
	// description
	//
	// x-displayName: "Description"
	// The description set for this usb_policy
	Description string `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`
	// disabled
	//
	// x-displayName: "Disabled"
	// A value of true indicates usb_policy is administratively disabled
	Disabled bool `protobuf:"varint,12,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// labels
	//
	// x-displayName: "Labels"
	// The set of labels present on this usb_policy
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// annotations
	//
	// x-displayName: "Annotations"
	// The set of annotations present on this usb_policy
	Annotations map[string]string `protobuf:"bytes,10,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// owner_view
	//
	// x-displayName: "Owner View"
	// Reference to the view object that owns this object.
	// If there is no view owner, this field will be nil.
	// If not nil, this object can only be edited/deleted through the view
	OwnerView *schema.ViewRefType `protobuf:"bytes,9,opt,name=owner_view,json=ownerView,proto3" json:"owner_view,omitempty"`
	// metadata
	//
	// x-displayName: "Metadata"
	// If list request has report_fields set then metadata will
	// contain all the metadata associated with the object.
	Metadata *schema.ObjectGetMetaType `protobuf:"bytes,13,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// system_metadata
	//
	// x-displayName: "System Metadata"
	// If list request has report_fields set then system_metadata will
	// contain all the system generated details of this object.
	SystemMetadata *schema.SystemObjectGetMetaType `protobuf:"bytes,14,opt,name=system_metadata,json=systemMetadata,proto3" json:"system_metadata,omitempty"`
	// object
	//
	// x-displayName: "Object"
	// If ListRequest has any specified report_fields, it will appear in object
	// DEPRECATED by get_spec, metadata and system_metadata
	Object *Object `protobuf:"bytes,5,opt,name=object,proto3" json:"object,omitempty"`
	// get_spec
	//
	// x-displayName: "Get Specification"
	// If ListRequest has any specified report_fields, it will appear in object
	GetSpec *GetSpecType `protobuf:"bytes,7,opt,name=get_spec,json=getSpec,proto3" json:"get_spec,omitempty"`
	// status
	//
	// x-displayName: "Status"
	// The status reported by different services for this configuration object
	StatusSet []*StatusObject `protobuf:"bytes,8,rep,name=status_set,json=statusSet,proto3" json:"status_set,omitempty"`
}

func (m *ListResponseItem) Reset()      { *m = ListResponseItem{} }
func (*ListResponseItem) ProtoMessage() {}
func (*ListResponseItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_51045b471d6ad973, []int{7}
}
func (m *ListResponseItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListResponseItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListResponseItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListResponseItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListResponseItem.Merge(m, src)
}
func (m *ListResponseItem) XXX_Size() int {
	return m.Size()
}
func (m *ListResponseItem) XXX_DiscardUnknown() {
	xxx_messageInfo_ListResponseItem.DiscardUnknown(m)
}

var xxx_messageInfo_ListResponseItem proto.InternalMessageInfo

func (m *ListResponseItem) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *ListResponseItem) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ListResponseItem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ListResponseItem) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *ListResponseItem) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ListResponseItem) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

func (m *ListResponseItem) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *ListResponseItem) GetAnnotations() map[string]string {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *ListResponseItem) GetOwnerView() *schema.ViewRefType {
	if m != nil {
		return m.OwnerView
	}
	return nil
}

func (m *ListResponseItem) GetMetadata() *schema.ObjectGetMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *ListResponseItem) GetSystemMetadata() *schema.SystemObjectGetMetaType {
	if m != nil {
		return m.SystemMetadata
	}
	return nil
}

func (m *ListResponseItem) GetObject() *Object {
	if m != nil {
		return m.Object
	}
	return nil
}

func (m *ListResponseItem) GetGetSpec() *GetSpecType {
	if m != nil {
		return m.GetSpec
	}
	return nil
}

func (m *ListResponseItem) GetStatusSet() []*StatusObject {
	if m != nil {
		return m.StatusSet
	}
	return nil
}

// ListResponse is the collection of usb_policy
//
// x-displayName: "List Response"
// This is the output message of 'List' RPC.
type ListResponse struct {
	// items
	//
	// x-displayName: "Items"
	// items represents the collection in response
	Items []*ListResponseItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	// errors
	//
	// x-displayName: "Errors"
	// Errors(if any) while listing items from collection
	Errors []*schema.ErrorType `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (m *ListResponse) Reset()      { *m = ListResponse{} }
func (*ListResponse) ProtoMessage() {}
func (*ListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_51045b471d6ad973, []int{8}
}
func (m *ListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListResponse.Merge(m, src)
}
func (m *ListResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListResponse proto.InternalMessageInfo

func (m *ListResponse) GetItems() []*ListResponseItem {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *ListResponse) GetErrors() []*schema.ErrorType {
	if m != nil {
		return m.Errors
	}
	return nil
}

// DeleteRequest is used to delete a usb_policy
//
// x-displayName: "Delete Request"
// This is the input message of the 'Delete' RPC.
type DeleteRequest struct {
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// Namespace in which the configuration object is present
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// name
	//
	// x-displayName: "Name"
	// x-example: "name"
	// Name of the configuration object
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// fail_if_referred
	//
	// x-displayName: "Fail-If-Referred"
	// Fail the delete operation if this object is being referred by other objects
	FailIfReferred bool `protobuf:"varint,3,opt,name=fail_if_referred,json=failIfReferred,proto3" json:"fail_if_referred,omitempty"`
}

func (m *DeleteRequest) Reset()      { *m = DeleteRequest{} }
func (*DeleteRequest) ProtoMessage() {}
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_51045b471d6ad973, []int{9}
}
func (m *DeleteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRequest.Merge(m, src)
}
func (m *DeleteRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRequest proto.InternalMessageInfo

func (m *DeleteRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *DeleteRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeleteRequest) GetFailIfReferred() bool {
	if m != nil {
		return m.FailIfReferred
	}
	return false
}

func init() {
	proto.RegisterEnum("ves.io.schema.usb_policy.GetResponseFormatCode", GetResponseFormatCode_name, GetResponseFormatCode_value)
	golang_proto.RegisterEnum("ves.io.schema.usb_policy.GetResponseFormatCode", GetResponseFormatCode_name, GetResponseFormatCode_value)
	proto.RegisterType((*CreateRequest)(nil), "ves.io.schema.usb_policy.CreateRequest")
	golang_proto.RegisterType((*CreateRequest)(nil), "ves.io.schema.usb_policy.CreateRequest")
	proto.RegisterType((*CreateResponse)(nil), "ves.io.schema.usb_policy.CreateResponse")
	golang_proto.RegisterType((*CreateResponse)(nil), "ves.io.schema.usb_policy.CreateResponse")
	proto.RegisterType((*ReplaceRequest)(nil), "ves.io.schema.usb_policy.ReplaceRequest")
	golang_proto.RegisterType((*ReplaceRequest)(nil), "ves.io.schema.usb_policy.ReplaceRequest")
	proto.RegisterType((*ReplaceResponse)(nil), "ves.io.schema.usb_policy.ReplaceResponse")
	golang_proto.RegisterType((*ReplaceResponse)(nil), "ves.io.schema.usb_policy.ReplaceResponse")
	proto.RegisterType((*GetRequest)(nil), "ves.io.schema.usb_policy.GetRequest")
	golang_proto.RegisterType((*GetRequest)(nil), "ves.io.schema.usb_policy.GetRequest")
	proto.RegisterType((*GetResponse)(nil), "ves.io.schema.usb_policy.GetResponse")
	golang_proto.RegisterType((*GetResponse)(nil), "ves.io.schema.usb_policy.GetResponse")
	proto.RegisterType((*ListRequest)(nil), "ves.io.schema.usb_policy.ListRequest")
	golang_proto.RegisterType((*ListRequest)(nil), "ves.io.schema.usb_policy.ListRequest")
	proto.RegisterType((*ListResponseItem)(nil), "ves.io.schema.usb_policy.ListResponseItem")
	golang_proto.RegisterType((*ListResponseItem)(nil), "ves.io.schema.usb_policy.ListResponseItem")
	proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.usb_policy.ListResponseItem.AnnotationsEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.usb_policy.ListResponseItem.AnnotationsEntry")
	proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.usb_policy.ListResponseItem.LabelsEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.usb_policy.ListResponseItem.LabelsEntry")
	proto.RegisterType((*ListResponse)(nil), "ves.io.schema.usb_policy.ListResponse")
	golang_proto.RegisterType((*ListResponse)(nil), "ves.io.schema.usb_policy.ListResponse")
	proto.RegisterType((*DeleteRequest)(nil), "ves.io.schema.usb_policy.DeleteRequest")
	golang_proto.RegisterType((*DeleteRequest)(nil), "ves.io.schema.usb_policy.DeleteRequest")
}

func init() {
	proto.RegisterFile("ves.io/schema/usb_policy/public_crudapi.proto", fileDescriptor_51045b471d6ad973)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/usb_policy/public_crudapi.proto", fileDescriptor_51045b471d6ad973)
}

var fileDescriptor_51045b471d6ad973 = []byte{
	// 1535 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0x4d, 0x6c, 0x1b, 0x45,
	0x14, 0xce, 0xd8, 0x89, 0x13, 0x3f, 0xe7, 0xc7, 0x1d, 0xda, 0xb2, 0x5d, 0xca, 0x62, 0xdc, 0xa4,
	0xa4, 0x11, 0x59, 0x97, 0x54, 0xaa, 0xda, 0x00, 0xa5, 0x4e, 0xe2, 0xa4, 0x29, 0xf9, 0xa9, 0xd6,
	0x6e, 0x85, 0x5a, 0x55, 0xab, 0xf5, 0x7a, 0xec, 0x2e, 0xb5, 0xbd, 0xcb, 0xec, 0x38, 0x21, 0x42,
	0x91, 0x50, 0xcf, 0x1c, 0x2a, 0x71, 0x41, 0x88, 0x03, 0x17, 0x10, 0x82, 0x03, 0x57, 0x44, 0x2e,
	0xbd, 0xb5, 0xaa, 0x00, 0x55, 0x70, 0xe9, 0x09, 0x51, 0x87, 0x43, 0x2f, 0x48, 0x3d, 0xc1, 0x15,
	0xed, 0xcc, 0xda, 0xb1, 0x1d, 0xbb, 0x71, 0xda, 0x9e, 0xbc, 0x33, 0xef, 0xbd, 0x6f, 0xbf, 0x37,
	0xef, 0x7d, 0xb3, 0x33, 0x86, 0xc9, 0x35, 0xe2, 0xaa, 0x96, 0x9d, 0x70, 0xcd, 0x1b, 0xa4, 0x64,
	0x24, 0x2a, 0x6e, 0x56, 0x77, 0xec, 0xa2, 0x65, 0x6e, 0x24, 0x9c, 0x4a, 0xb6, 0x68, 0x99, 0xba,
	0x49, 0x2b, 0x39, 0xc3, 0xb1, 0x54, 0x87, 0xda, 0xcc, 0xc6, 0x92, 0x70, 0x57, 0x85, 0xbb, 0xba,
	0xe3, 0x2e, 0x4f, 0x16, 0x2c, 0x76, 0xa3, 0x92, 0x55, 0x4d, 0xbb, 0x94, 0x28, 0xd8, 0x05, 0x3b,
	0xc1, 0x03, 0xb2, 0x95, 0x3c, 0x1f, 0xf1, 0x01, 0x7f, 0x12, 0x40, 0xf2, 0xd1, 0x82, 0x6d, 0x17,
	0x8a, 0x24, 0x61, 0x38, 0x56, 0xc2, 0x28, 0x97, 0x6d, 0x66, 0x30, 0xcb, 0x2e, 0xbb, 0xbe, 0xf5,
	0x15, 0xdf, 0x5a, 0xc7, 0x20, 0x25, 0x87, 0x6d, 0xf8, 0x46, 0xb9, 0x99, 0x32, 0xa1, 0xd4, 0xa6,
	0xf5, 0xc0, 0x66, 0x9b, 0xed, 0x34, 0xa2, 0x1e, 0x69, 0x36, 0xb2, 0x0d, 0x87, 0xd4, 0x4c, 0x63,
	0x1d, 0x97, 0xc1, 0xce, 0x7e, 0x48, 0x4c, 0xe6, 0xbb, 0x8d, 0x76, 0x74, 0x6b, 0x04, 0x8b, 0x37,
	0x7b, 0xad, 0x11, 0x97, 0x94, 0xd7, 0x5a, 0xb8, 0xc4, 0x5a, 0x7c, 0x2c, 0xb2, 0xae, 0x37, 0x79,
	0xc4, 0xbf, 0x47, 0x30, 0x34, 0x4b, 0x89, 0xc1, 0x88, 0x46, 0x3e, 0xaa, 0x10, 0x97, 0xe1, 0xf7,
	0x60, 0xa0, 0x44, 0x98, 0x91, 0x33, 0x98, 0x21, 0xa1, 0x18, 0x1a, 0x8f, 0x4c, 0x1d, 0x53, 0x9b,
	0xeb, 0xb1, 0xca, 0xc9, 0x8a, 0xa8, 0x65, 0xc2, 0x8c, 0xcc, 0x86, 0x43, 0xb4, 0x7a, 0x10, 0x5e,
	0x86, 0x5e, 0xd7, 0x21, 0xa6, 0x14, 0xe0, 0xc1, 0xe3, 0x6a, 0xa7, 0x62, 0xaa, 0x02, 0x21, 0xed,
	0x10, 0xd3, 0x43, 0x98, 0x19, 0xf9, 0x72, 0x73, 0xd0, 0x0b, 0x54, 0x0b, 0xa6, 0xee, 0xfd, 0x6a,
	0x1c, 0x66, 0x3a, 0x7c, 0xff, 0x5c, 0x48, 0xbc, 0x31, 0xfe, 0x2f, 0x82, 0xe1, 0x1a, 0x59, 0xd7,
	0xb1, 0xcb, 0x2e, 0xc1, 0xef, 0xec, 0x62, 0x1b, 0x6b, 0xcb, 0x76, 0x81, 0xb0, 0x36, 0x54, 0x57,
	0x61, 0xc4, 0xdd, 0x70, 0x19, 0x29, 0xe9, 0x75, 0x90, 0x20, 0x07, 0x39, 0xde, 0x02, 0x92, 0xe6,
	0x5e, 0xbb, 0xa1, 0x86, 0x45, 0xf8, 0x72, 0x0d, 0xf0, 0x62, 0x53, 0xee, 0x63, 0x9d, 0x73, 0x5f,
	0x20, 0x6c, 0x1f, 0x89, 0xff, 0x89, 0x60, 0x58, 0x23, 0x4e, 0xd1, 0x30, 0xeb, 0x65, 0x3a, 0xbf,
	0x2b, 0xf1, 0xd1, 0xb6, 0x89, 0xfb, 0x61, 0x6d, 0x92, 0x5f, 0x69, 0xe2, 0x7a, 0xa2, 0x33, 0x57,
	0x1f, 0x62, 0x0f, 0xbe, 0x38, 0x01, 0x51, 0x4a, 0x5c, 0xbb, 0x42, 0x4d, 0xa2, 0xaf, 0x11, 0xea,
	0x5a, 0x76, 0x99, 0xaf, 0x66, 0x78, 0xa6, 0xf7, 0xf1, 0x16, 0x42, 0xda, 0x48, 0xcd, 0x7a, 0x45,
	0x18, 0x1b, 0x13, 0x3c, 0x00, 0x23, 0xf5, 0xfc, 0x44, 0x65, 0xe3, 0x5f, 0x20, 0x80, 0x05, 0xc2,
	0x6a, 0xf9, 0x1e, 0x85, 0x70, 0xd9, 0x28, 0x11, 0xd7, 0x31, 0x4c, 0xc2, 0x13, 0x0e, 0x6b, 0x3b,
	0x13, 0x18, 0x43, 0xaf, 0x37, 0xe0, 0xb9, 0x84, 0x35, 0xfe, 0x8c, 0x3f, 0x00, 0xef, 0x8d, 0x1c,
	0x4c, 0xcf, 0xdb, 0xb4, 0x64, 0x30, 0x4e, 0x67, 0x78, 0x2a, 0xf1, 0xd4, 0xb2, 0xd4, 0x08, 0xcc,
	0xf3, 0x90, 0x59, 0x3b, 0x47, 0xb4, 0x61, 0xda, 0x34, 0x17, 0xff, 0xac, 0x0f, 0x22, 0x0d, 0x9e,
	0xf8, 0x5d, 0x08, 0x09, 0x01, 0x77, 0x68, 0xc1, 0x86, 0x17, 0x88, 0x7c, 0x67, 0x82, 0x77, 0x36,
	0x91, 0xe6, 0x07, 0xe1, 0x0b, 0x10, 0x31, 0x79, 0x57, 0x73, 0x9a, 0x7e, 0x3d, 0xde, 0xd8, 0x4b,
	0x37, 0xfe, 0xc2, 0x68, 0x20, 0x62, 0x3d, 0x6a, 0xf8, 0x7d, 0x18, 0xa4, 0x62, 0x19, 0x05, 0x54,
	0x70, 0x2f, 0x09, 0x36, 0x37, 0x95, 0x16, 0xf1, 0xa3, 0x39, 0x58, 0xbb, 0x7a, 0xf6, 0x3e, 0xa5,
	0x9e, 0x4d, 0x5a, 0xec, 0x7b, 0x11, 0x5a, 0xec, 0x7f, 0x21, 0x5a, 0x0c, 0x3d, 0xbf, 0x16, 0x71,
	0x0a, 0x42, 0x2e, 0x33, 0x58, 0xc5, 0x95, 0xbe, 0xfe, 0x0a, 0xc5, 0x82, 0x6d, 0x58, 0x35, 0xe0,
	0xa5, 0xb9, 0x67, 0x53, 0xa5, 0x45, 0x30, 0x5e, 0x84, 0x03, 0x94, 0xe4, 0x09, 0xa5, 0x56, 0xb9,
	0xa0, 0x8b, 0xea, 0xbb, 0xd2, 0x00, 0xc7, 0x3b, 0xda, 0x41, 0xbd, 0x79, 0x9e, 0x5b, 0xb4, 0x1e,
	0x26, 0xe6, 0xdd, 0x46, 0xf1, 0x7c, 0x83, 0x20, 0xb2, 0x64, 0xb9, 0x5d, 0x4a, 0xe5, 0x75, 0x18,
	0x2c, 0x1a, 0x59, 0x52, 0xd4, 0xf3, 0x56, 0x91, 0x11, 0xea, 0x4b, 0x26, 0xc2, 0xe7, 0xe6, 0xf9,
	0x14, 0x3e, 0x06, 0x43, 0x94, 0x38, 0x36, 0x65, 0x7a, 0xde, 0x22, 0xc5, 0x9c, 0x2b, 0x05, 0x63,
	0xc1, 0xf1, 0xb0, 0x36, 0x28, 0x26, 0xe7, 0xf9, 0x1c, 0x3e, 0x09, 0x07, 0x7d, 0x27, 0x91, 0x5c,
	0xcd, 0xb7, 0x97, 0xfb, 0x62, 0x61, 0x13, 0x4b, 0x21, 0x22, 0xe2, 0xff, 0x84, 0x20, 0x2a, 0x78,
	0x0a, 0xdd, 0x2c, 0x32, 0x52, 0xc2, 0x87, 0x21, 0xc4, 0x48, 0xd9, 0x28, 0x33, 0x5e, 0xa7, 0xb0,
	0xe6, 0x8f, 0x9e, 0x41, 0xef, 0x51, 0x08, 0x56, 0xac, 0x9c, 0xd8, 0x72, 0x34, 0xef, 0x11, 0xc7,
	0x20, 0x92, 0x23, 0xae, 0x49, 0x2d, 0xfe, 0xc9, 0x93, 0x22, 0x22, 0xd3, 0x86, 0x29, 0x2c, 0xc3,
	0x40, 0xce, 0x72, 0x8d, 0x6c, 0x91, 0xe4, 0xa4, 0xc1, 0x18, 0x1a, 0x1f, 0xd0, 0xea, 0x63, 0xbc,
	0x02, 0x21, 0xbe, 0x28, 0x22, 0xa5, 0xc8, 0xd4, 0xe9, 0xce, 0x15, 0x6f, 0xcd, 0x4a, 0x5d, 0xe2,
	0x81, 0xa9, 0x32, 0xa3, 0x1b, 0x9a, 0x8f, 0x82, 0xaf, 0x43, 0xa4, 0xe1, 0x0c, 0x22, 0x01, 0x07,
	0x7d, 0x7b, 0x1f, 0xa0, 0xc9, 0x9d, 0x68, 0x81, 0xdc, 0x88, 0x87, 0xcf, 0x02, 0xd8, 0xeb, 0x65,
	0x42, 0x75, 0xef, 0x2b, 0x2f, 0x85, 0x79, 0xd3, 0xcb, 0x2d, 0xe8, 0x57, 0x2c, 0xb2, 0x5e, 0x6b,
	0xa9, 0x30, 0xf7, 0xf6, 0x66, 0x9a, 0x84, 0x3b, 0xf4, 0x22, 0x84, 0x3b, 0xfc, 0x5c, 0xc2, 0xdd,
	0xd9, 0x4e, 0xfb, 0x9e, 0x65, 0x3b, 0x3d, 0x0f, 0x03, 0x05, 0xc2, 0xb8, 0x7a, 0xfd, 0x1d, 0xa4,
	0x3b, 0xed, 0x6b, 0xfd, 0x05, 0x31, 0xc0, 0x17, 0x01, 0xfc, 0x9e, 0x76, 0x09, 0xf3, 0xf5, 0xb9,
	0x2f, 0xbd, 0x87, 0x45, 0x78, 0x9a, 0x30, 0xf9, 0x2c, 0x44, 0x1a, 0x9a, 0xc1, 0x6b, 0xd2, 0x9b,
	0x64, 0xc3, 0x6f, 0x68, 0xef, 0x11, 0x1f, 0x84, 0xbe, 0x35, 0xa3, 0x58, 0xa9, 0xf5, 0xb2, 0x18,
	0x4c, 0x07, 0xce, 0x20, 0xf9, 0x1c, 0x44, 0x5b, 0x4b, 0xbe, 0x9f, 0xf8, 0xf8, 0x2d, 0x04, 0x83,
	0x8d, 0x4d, 0x84, 0xcf, 0x43, 0x9f, 0xc5, 0x48, 0xc9, 0x95, 0xc4, 0x16, 0x36, 0xd1, 0x7d, 0xef,
	0x69, 0x22, 0x10, 0x9f, 0x84, 0x90, 0x38, 0x09, 0x4b, 0x01, 0x0e, 0x21, 0xb5, 0x40, 0xa4, 0x3c,
	0x23, 0x5f, 0x4c, 0xdf, 0x2f, 0x7e, 0x13, 0x86, 0xe6, 0x48, 0x91, 0xec, 0x9c, 0x2f, 0xf7, 0x2f,
	0xec, 0x71, 0x88, 0xe6, 0x0d, 0xab, 0xa8, 0x5b, 0x79, 0x5d, 0x6c, 0x83, 0x44, 0xa8, 0x7c, 0x40,
	0x1b, 0xf6, 0xe6, 0x17, 0xf3, 0x9a, 0x3f, 0x3b, 0xf1, 0x0b, 0x82, 0x43, 0x6d, 0x3f, 0xe1, 0x58,
	0x86, 0xc3, 0x0b, 0xa9, 0x8c, 0xae, 0xa5, 0x2f, 0xe9, 0xf3, 0xab, 0xda, 0x72, 0x32, 0xa3, 0xcf,
	0xa5, 0xe6, 0x93, 0x97, 0x97, 0x32, 0xd1, 0x1e, 0xfc, 0x2a, 0x1c, 0x69, 0xb1, 0xcd, 0xaf, 0x6a,
	0xfa, 0xac, 0x96, 0x4a, 0x66, 0x52, 0x51, 0x84, 0x15, 0x90, 0xdb, 0x98, 0xb5, 0xd4, 0xa5, 0xa5,
	0xe4, 0x6c, 0x2a, 0x1a, 0xc0, 0x47, 0xe0, 0x50, 0x8b, 0x3d, 0x9d, 0x49, 0x66, 0x2e, 0xa7, 0xa3,
	0x41, 0xfc, 0x32, 0xbc, 0xd4, 0x62, 0xd2, 0x52, 0xc9, 0xb9, 0x68, 0x2f, 0x1e, 0x85, 0xd8, 0x2e,
	0xc3, 0x7c, 0x4a, 0xd3, 0x16, 0x57, 0x16, 0xf4, 0xd5, 0x99, 0x8b, 0xa9, 0xd9, 0x4c, 0x3a, 0xda,
	0x37, 0xf5, 0x5f, 0x3f, 0x04, 0x93, 0x97, 0x16, 0xf1, 0xcf, 0x08, 0x42, 0xe2, 0xa3, 0x8f, 0xbb,
	0x3d, 0x16, 0xc8, 0xe3, 0x7b, 0x3b, 0xfa, 0x07, 0xad, 0xeb, 0xd5, 0xbb, 0x92, 0x77, 0xa3, 0x99,
	0xb4, 0xec, 0x49, 0xab, 0x9c, 0xa7, 0x86, 0xcb, 0x68, 0xc5, 0x64, 0x15, 0x4a, 0x26, 0xd7, 0xa9,
	0xc5, 0xc8, 0xad, 0x3f, 0xfe, 0xfe, 0x3c, 0x70, 0x26, 0x7e, 0xca, 0xbf, 0xab, 0x25, 0xea, 0xc5,
	0x72, 0x13, 0x9f, 0xd4, 0x14, 0xaf, 0xd6, 0x27, 0x37, 0x1b, 0xee, 0x2b, 0xee, 0x34, 0x9a, 0xc0,
	0x3f, 0x22, 0x08, 0x2e, 0x10, 0x86, 0x47, 0xf7, 0x38, 0x75, 0x09, 0xda, 0x63, 0x5d, 0x9d, 0xcd,
	0xe2, 0xd7, 0xee, 0xfd, 0x14, 0x40, 0xd5, 0xbb, 0x92, 0xdc, 0x9e, 0x37, 0x25, 0x46, 0x8e, 0xd3,
	0x3e, 0x85, 0xdf, 0x6a, 0x47, 0xbb, 0x3d, 0x5b, 0x31, 0xbf, 0x89, 0x7f, 0x40, 0xd0, 0xeb, 0x09,
	0x00, 0x8f, 0xed, 0x25, 0x10, 0xc1, 0xf9, 0x78, 0x77, 0x3a, 0x8a, 0x67, 0xba, 0x24, 0xfd, 0x26,
	0x9e, 0xe8, 0x9e, 0x34, 0xfe, 0x15, 0x41, 0xbf, 0x7f, 0x8c, 0xc3, 0x5d, 0x9f, 0xf4, 0xe4, 0x13,
	0x5d, 0x78, 0xfa, 0xb4, 0x4b, 0xdd, 0xf4, 0xc7, 0x05, 0x79, 0xf6, 0x19, 0xfa, 0xa3, 0xc5, 0x61,
	0xd3, 0xeb, 0x97, 0x6f, 0x11, 0x84, 0xc4, 0x8e, 0xf1, 0xb4, 0x66, 0x6f, 0xda, 0x53, 0xe4, 0xc3,
	0xaa, 0xb8, 0xca, 0xab, 0xb5, 0xab, 0xbc, 0x9a, 0xf2, 0xae, 0xf2, 0xf1, 0x6b, 0xdd, 0x50, 0x3f,
	0x3d, 0xb1, 0xff, 0x1e, 0x99, 0x46, 0x13, 0xf2, 0xd5, 0x3b, 0x5b, 0x28, 0xf0, 0xfb, 0x16, 0x7a,
	0x6d, 0x8f, 0xaf, 0xd3, 0xc3, 0x2d, 0x84, 0xaa, 0x5b, 0x68, 0xac, 0xab, 0xef, 0xc7, 0xad, 0xdf,
	0xa4, 0x40, 0x14, 0xcd, 0xdc, 0x46, 0xf7, 0xcf, 0xf5, 0xcd, 0x6a, 0x97, 0xe7, 0x96, 0x1e, 0x3c,
	0x52, 0x7a, 0x1e, 0x3e, 0x52, 0x7a, 0x9e, 0x3c, 0x52, 0xd0, 0xa7, 0x55, 0x05, 0x7d, 0x57, 0x55,
	0xd0, 0xbd, 0xaa, 0x82, 0x1e, 0x54, 0x15, 0xf4, 0x57, 0x55, 0x41, 0x8f, 0xab, 0x4a, 0xcf, 0x93,
	0xaa, 0x82, 0x6e, 0x6f, 0x2b, 0x3d, 0x77, 0xb6, 0x15, 0xf4, 0x60, 0x5b, 0xe9, 0x79, 0xb8, 0xad,
	0xf4, 0x5c, 0x5d, 0x29, 0xd8, 0xce, 0xcd, 0x82, 0xba, 0x66, 0x7b, 0x47, 0x3a, 0xea, 0xbd, 0x30,
	0xc1, 0x1f, 0xbc, 0x8b, 0xc1, 0xa4, 0x43, 0xed, 0x35, 0x2b, 0x47, 0xe8, 0x64, 0xcd, 0x9c, 0x70,
	0xb2, 0x05, 0x3b, 0x41, 0x3e, 0x66, 0xfe, 0x5f, 0x05, 0xbb, 0xfe, 0x7b, 0xc8, 0x86, 0xf8, 0xda,
	0x9e, 0xfa, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x17, 0xeb, 0xb0, 0x8e, 0xcc, 0x11, 0x00, 0x00,
}

func (x GetResponseFormatCode) String() string {
	s, ok := GetResponseFormatCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *CreateRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateRequest)
	if !ok {
		that2, ok := that.(CreateRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	return true
}
func (this *CreateResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateResponse)
	if !ok {
		that2, ok := that.(CreateResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if !this.SystemMetadata.Equal(that1.SystemMetadata) {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	return true
}
func (this *ReplaceRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceRequest)
	if !ok {
		that2, ok := that.(ReplaceRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	if this.ResourceVersion != that1.ResourceVersion {
		return false
	}
	return true
}
func (this *ReplaceResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceResponse)
	if !ok {
		that2, ok := that.(ReplaceResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetRequest)
	if !ok {
		that2, ok := that.(GetRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.ResponseFormat != that1.ResponseFormat {
		return false
	}
	return true
}
func (this *GetResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetResponse)
	if !ok {
		that2, ok := that.(GetResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Object.Equal(that1.Object) {
		return false
	}
	if !this.CreateForm.Equal(that1.CreateForm) {
		return false
	}
	if !this.ReplaceForm.Equal(that1.ReplaceForm) {
		return false
	}
	if this.ResourceVersion != that1.ResourceVersion {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if !this.SystemMetadata.Equal(that1.SystemMetadata) {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	if len(this.Status) != len(that1.Status) {
		return false
	}
	for i := range this.Status {
		if !this.Status[i].Equal(that1.Status[i]) {
			return false
		}
	}
	if len(this.ReferringObjects) != len(that1.ReferringObjects) {
		return false
	}
	for i := range this.ReferringObjects {
		if !this.ReferringObjects[i].Equal(that1.ReferringObjects[i]) {
			return false
		}
	}
	return true
}
func (this *ListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListRequest)
	if !ok {
		that2, ok := that.(ListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.LabelFilter != that1.LabelFilter {
		return false
	}
	if len(this.ReportFields) != len(that1.ReportFields) {
		return false
	}
	for i := range this.ReportFields {
		if this.ReportFields[i] != that1.ReportFields[i] {
			return false
		}
	}
	if len(this.ReportStatusFields) != len(that1.ReportStatusFields) {
		return false
	}
	for i := range this.ReportStatusFields {
		if this.ReportStatusFields[i] != that1.ReportStatusFields[i] {
			return false
		}
	}
	return true
}
func (this *ListResponseItem) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListResponseItem)
	if !ok {
		that2, ok := that.(ListResponseItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Tenant != that1.Tenant {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Disabled != that1.Disabled {
		return false
	}
	if len(this.Labels) != len(that1.Labels) {
		return false
	}
	for i := range this.Labels {
		if this.Labels[i] != that1.Labels[i] {
			return false
		}
	}
	if len(this.Annotations) != len(that1.Annotations) {
		return false
	}
	for i := range this.Annotations {
		if this.Annotations[i] != that1.Annotations[i] {
			return false
		}
	}
	if !this.OwnerView.Equal(that1.OwnerView) {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if !this.SystemMetadata.Equal(that1.SystemMetadata) {
		return false
	}
	if !this.Object.Equal(that1.Object) {
		return false
	}
	if !this.GetSpec.Equal(that1.GetSpec) {
		return false
	}
	if len(this.StatusSet) != len(that1.StatusSet) {
		return false
	}
	for i := range this.StatusSet {
		if !this.StatusSet[i].Equal(that1.StatusSet[i]) {
			return false
		}
	}
	return true
}
func (this *ListResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListResponse)
	if !ok {
		that2, ok := that.(ListResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if !this.Items[i].Equal(that1.Items[i]) {
			return false
		}
	}
	if len(this.Errors) != len(that1.Errors) {
		return false
	}
	for i := range this.Errors {
		if !this.Errors[i].Equal(that1.Errors[i]) {
			return false
		}
	}
	return true
}
func (this *DeleteRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteRequest)
	if !ok {
		that2, ok := that.(DeleteRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.FailIfReferred != that1.FailIfReferred {
		return false
	}
	return true
}
func (this *CreateRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&usb_policy.CreateRequest{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.Spec != nil {
		s = append(s, "Spec: "+fmt.Sprintf("%#v", this.Spec)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&usb_policy.CreateResponse{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.SystemMetadata != nil {
		s = append(s, "SystemMetadata: "+fmt.Sprintf("%#v", this.SystemMetadata)+",\n")
	}
	if this.Spec != nil {
		s = append(s, "Spec: "+fmt.Sprintf("%#v", this.Spec)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&usb_policy.ReplaceRequest{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.Spec != nil {
		s = append(s, "Spec: "+fmt.Sprintf("%#v", this.Spec)+",\n")
	}
	s = append(s, "ResourceVersion: "+fmt.Sprintf("%#v", this.ResourceVersion)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&usb_policy.ReplaceResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&usb_policy.GetRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "ResponseFormat: "+fmt.Sprintf("%#v", this.ResponseFormat)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&usb_policy.GetResponse{")
	if this.Object != nil {
		s = append(s, "Object: "+fmt.Sprintf("%#v", this.Object)+",\n")
	}
	if this.CreateForm != nil {
		s = append(s, "CreateForm: "+fmt.Sprintf("%#v", this.CreateForm)+",\n")
	}
	if this.ReplaceForm != nil {
		s = append(s, "ReplaceForm: "+fmt.Sprintf("%#v", this.ReplaceForm)+",\n")
	}
	s = append(s, "ResourceVersion: "+fmt.Sprintf("%#v", this.ResourceVersion)+",\n")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.SystemMetadata != nil {
		s = append(s, "SystemMetadata: "+fmt.Sprintf("%#v", this.SystemMetadata)+",\n")
	}
	if this.Spec != nil {
		s = append(s, "Spec: "+fmt.Sprintf("%#v", this.Spec)+",\n")
	}
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	if this.ReferringObjects != nil {
		s = append(s, "ReferringObjects: "+fmt.Sprintf("%#v", this.ReferringObjects)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&usb_policy.ListRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "LabelFilter: "+fmt.Sprintf("%#v", this.LabelFilter)+",\n")
	s = append(s, "ReportFields: "+fmt.Sprintf("%#v", this.ReportFields)+",\n")
	s = append(s, "ReportStatusFields: "+fmt.Sprintf("%#v", this.ReportStatusFields)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListResponseItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 18)
	s = append(s, "&usb_policy.ListResponseItem{")
	s = append(s, "Tenant: "+fmt.Sprintf("%#v", this.Tenant)+",\n")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "Disabled: "+fmt.Sprintf("%#v", this.Disabled)+",\n")
	keysForLabels := make([]string, 0, len(this.Labels))
	for k, _ := range this.Labels {
		keysForLabels = append(keysForLabels, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLabels)
	mapStringForLabels := "map[string]string{"
	for _, k := range keysForLabels {
		mapStringForLabels += fmt.Sprintf("%#v: %#v,", k, this.Labels[k])
	}
	mapStringForLabels += "}"
	if this.Labels != nil {
		s = append(s, "Labels: "+mapStringForLabels+",\n")
	}
	keysForAnnotations := make([]string, 0, len(this.Annotations))
	for k, _ := range this.Annotations {
		keysForAnnotations = append(keysForAnnotations, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAnnotations)
	mapStringForAnnotations := "map[string]string{"
	for _, k := range keysForAnnotations {
		mapStringForAnnotations += fmt.Sprintf("%#v: %#v,", k, this.Annotations[k])
	}
	mapStringForAnnotations += "}"
	if this.Annotations != nil {
		s = append(s, "Annotations: "+mapStringForAnnotations+",\n")
	}
	if this.OwnerView != nil {
		s = append(s, "OwnerView: "+fmt.Sprintf("%#v", this.OwnerView)+",\n")
	}
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.SystemMetadata != nil {
		s = append(s, "SystemMetadata: "+fmt.Sprintf("%#v", this.SystemMetadata)+",\n")
	}
	if this.Object != nil {
		s = append(s, "Object: "+fmt.Sprintf("%#v", this.Object)+",\n")
	}
	if this.GetSpec != nil {
		s = append(s, "GetSpec: "+fmt.Sprintf("%#v", this.GetSpec)+",\n")
	}
	if this.StatusSet != nil {
		s = append(s, "StatusSet: "+fmt.Sprintf("%#v", this.StatusSet)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&usb_policy.ListResponse{")
	if this.Items != nil {
		s = append(s, "Items: "+fmt.Sprintf("%#v", this.Items)+",\n")
	}
	if this.Errors != nil {
		s = append(s, "Errors: "+fmt.Sprintf("%#v", this.Errors)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&usb_policy.DeleteRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "FailIfReferred: "+fmt.Sprintf("%#v", this.FailIfReferred)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPublicCrudapi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// APIClient is the client API for API service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type APIClient interface {
	// Create USB policy
	//
	// x-displayName: "Create USB policy"
	// Creates a new USB policy object
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	// Get USB policy
	//
	// x-displayName: "Get USB policy"
	// Get the USB policy object
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	// List
	//
	// x-displayName: "List USB policy"
	// List the set of usb_policy in a namespace
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	// Replace USB policy
	//
	// x-displayName: "Replace USB policy"
	// Replaces the content of an USB policy object
	Replace(ctx context.Context, in *ReplaceRequest, opts ...grpc.CallOption) (*ReplaceResponse, error)
	// Delete
	//
	// x-displayName: "Delete USB policy"
	// Delete the specified usb_policy
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*types.Empty, error)
}

type aPIClient struct {
	cc *grpc.ClientConn
}

func NewAPIClient(cc *grpc.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.usb_policy.API/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.usb_policy.API/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.usb_policy.API/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Replace(ctx context.Context, in *ReplaceRequest, opts ...grpc.CallOption) (*ReplaceResponse, error) {
	out := new(ReplaceResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.usb_policy.API/Replace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ves.io.schema.usb_policy.API/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIServer is the server API for API service.
type APIServer interface {
	// Create USB policy
	//
	// x-displayName: "Create USB policy"
	// Creates a new USB policy object
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	// Get USB policy
	//
	// x-displayName: "Get USB policy"
	// Get the USB policy object
	Get(context.Context, *GetRequest) (*GetResponse, error)
	// List
	//
	// x-displayName: "List USB policy"
	// List the set of usb_policy in a namespace
	List(context.Context, *ListRequest) (*ListResponse, error)
	// Replace USB policy
	//
	// x-displayName: "Replace USB policy"
	// Replaces the content of an USB policy object
	Replace(context.Context, *ReplaceRequest) (*ReplaceResponse, error)
	// Delete
	//
	// x-displayName: "Delete USB policy"
	// Delete the specified usb_policy
	Delete(context.Context, *DeleteRequest) (*types.Empty, error)
}

// UnimplementedAPIServer can be embedded to have forward compatible implementations.
type UnimplementedAPIServer struct {
}

func (*UnimplementedAPIServer) Create(ctx context.Context, req *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedAPIServer) Get(ctx context.Context, req *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedAPIServer) List(ctx context.Context, req *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedAPIServer) Replace(ctx context.Context, req *ReplaceRequest) (*ReplaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Replace not implemented")
}
func (*UnimplementedAPIServer) Delete(ctx context.Context, req *DeleteRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.usb_policy.API/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.usb_policy.API/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.usb_policy.API/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Replace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Replace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.usb_policy.API/Replace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Replace(ctx, req.(*ReplaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.usb_policy.API/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.usb_policy.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _API_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _API_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _API_List_Handler,
		},
		{
			MethodName: "Replace",
			Handler:    _API_Replace_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _API_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/usb_policy/public_crudapi.proto",
}

func (m *CreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCrudapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCrudapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SystemMetadata != nil {
		{
			size, err := m.SystemMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCrudapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCrudapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCrudapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ResourceVersion) > 0 {
		i -= len(m.ResourceVersion)
		copy(dAtA[i:], m.ResourceVersion)
		i = encodeVarintPublicCrudapi(dAtA, i, uint64(len(m.ResourceVersion)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCrudapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCrudapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ResponseFormat != 0 {
		i = encodeVarintPublicCrudapi(dAtA, i, uint64(m.ResponseFormat))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicCrudapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCrudapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		for iNdEx := len(m.Status) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Status[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCrudapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xe2
			i--
			dAtA[i] = 0x82
		}
	}
	if len(m.ReferringObjects) > 0 {
		for iNdEx := len(m.ReferringObjects) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReferringObjects[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCrudapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.SystemMetadata != nil {
		{
			size, err := m.SystemMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCrudapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCrudapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCrudapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ResourceVersion) > 0 {
		i -= len(m.ResourceVersion)
		copy(dAtA[i:], m.ResourceVersion)
		i = encodeVarintPublicCrudapi(dAtA, i, uint64(len(m.ResourceVersion)))
		i--
		dAtA[i] = 0x22
	}
	if m.ReplaceForm != nil {
		{
			size, err := m.ReplaceForm.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCrudapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.CreateForm != nil {
		{
			size, err := m.CreateForm.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCrudapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Object != nil {
		{
			size, err := m.Object.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCrudapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReportStatusFields) > 0 {
		for iNdEx := len(m.ReportStatusFields) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ReportStatusFields[iNdEx])
			copy(dAtA[i:], m.ReportStatusFields[iNdEx])
			i = encodeVarintPublicCrudapi(dAtA, i, uint64(len(m.ReportStatusFields[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ReportFields) > 0 {
		for iNdEx := len(m.ReportFields) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ReportFields[iNdEx])
			copy(dAtA[i:], m.ReportFields[iNdEx])
			i = encodeVarintPublicCrudapi(dAtA, i, uint64(len(m.ReportFields[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.LabelFilter) > 0 {
		i -= len(m.LabelFilter)
		copy(dAtA[i:], m.LabelFilter)
		i = encodeVarintPublicCrudapi(dAtA, i, uint64(len(m.LabelFilter)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCrudapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListResponseItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListResponseItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListResponseItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SystemMetadata != nil {
		{
			size, err := m.SystemMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCrudapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCrudapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.Disabled {
		i--
		if m.Disabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintPublicCrudapi(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Annotations) > 0 {
		for k := range m.Annotations {
			v := m.Annotations[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintPublicCrudapi(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPublicCrudapi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPublicCrudapi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x52
		}
	}
	if m.OwnerView != nil {
		{
			size, err := m.OwnerView.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCrudapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.StatusSet) > 0 {
		for iNdEx := len(m.StatusSet) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StatusSet[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCrudapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.GetSpec != nil {
		{
			size, err := m.GetSpec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCrudapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Tenant) > 0 {
		i -= len(m.Tenant)
		copy(dAtA[i:], m.Tenant)
		i = encodeVarintPublicCrudapi(dAtA, i, uint64(len(m.Tenant)))
		i--
		dAtA[i] = 0x32
	}
	if m.Object != nil {
		{
			size, err := m.Object.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCrudapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Labels) > 0 {
		for k := range m.Labels {
			v := m.Labels[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintPublicCrudapi(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPublicCrudapi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPublicCrudapi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintPublicCrudapi(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicCrudapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCrudapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Errors) > 0 {
		for iNdEx := len(m.Errors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Errors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCrudapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCrudapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FailIfReferred {
		i--
		if m.FailIfReferred {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicCrudapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCrudapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPublicCrudapi(dAtA []byte, offset int, v uint64) int {
	offset -= sovPublicCrudapi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CreateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovPublicCrudapi(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovPublicCrudapi(uint64(l))
	}
	return n
}

func (m *CreateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovPublicCrudapi(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovPublicCrudapi(uint64(l))
	}
	if m.SystemMetadata != nil {
		l = m.SystemMetadata.Size()
		n += 1 + l + sovPublicCrudapi(uint64(l))
	}
	return n
}

func (m *ReplaceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovPublicCrudapi(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovPublicCrudapi(uint64(l))
	}
	l = len(m.ResourceVersion)
	if l > 0 {
		n += 1 + l + sovPublicCrudapi(uint64(l))
	}
	return n
}

func (m *ReplaceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCrudapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCrudapi(uint64(l))
	}
	if m.ResponseFormat != 0 {
		n += 1 + sovPublicCrudapi(uint64(m.ResponseFormat))
	}
	return n
}

func (m *GetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovPublicCrudapi(uint64(l))
	}
	if m.CreateForm != nil {
		l = m.CreateForm.Size()
		n += 1 + l + sovPublicCrudapi(uint64(l))
	}
	if m.ReplaceForm != nil {
		l = m.ReplaceForm.Size()
		n += 1 + l + sovPublicCrudapi(uint64(l))
	}
	l = len(m.ResourceVersion)
	if l > 0 {
		n += 1 + l + sovPublicCrudapi(uint64(l))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovPublicCrudapi(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovPublicCrudapi(uint64(l))
	}
	if m.SystemMetadata != nil {
		l = m.SystemMetadata.Size()
		n += 1 + l + sovPublicCrudapi(uint64(l))
	}
	if len(m.ReferringObjects) > 0 {
		for _, e := range m.ReferringObjects {
			l = e.Size()
			n += 1 + l + sovPublicCrudapi(uint64(l))
		}
	}
	if len(m.Status) > 0 {
		for _, e := range m.Status {
			l = e.Size()
			n += 3 + l + sovPublicCrudapi(uint64(l))
		}
	}
	return n
}

func (m *ListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCrudapi(uint64(l))
	}
	l = len(m.LabelFilter)
	if l > 0 {
		n += 1 + l + sovPublicCrudapi(uint64(l))
	}
	if len(m.ReportFields) > 0 {
		for _, s := range m.ReportFields {
			l = len(s)
			n += 1 + l + sovPublicCrudapi(uint64(l))
		}
	}
	if len(m.ReportStatusFields) > 0 {
		for _, s := range m.ReportStatusFields {
			l = len(s)
			n += 1 + l + sovPublicCrudapi(uint64(l))
		}
	}
	return n
}

func (m *ListResponseItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCrudapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCrudapi(uint64(l))
	}
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovPublicCrudapi(uint64(l))
	}
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovPublicCrudapi(uint64(len(k))) + 1 + len(v) + sovPublicCrudapi(uint64(len(v)))
			n += mapEntrySize + 1 + sovPublicCrudapi(uint64(mapEntrySize))
		}
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovPublicCrudapi(uint64(l))
	}
	l = len(m.Tenant)
	if l > 0 {
		n += 1 + l + sovPublicCrudapi(uint64(l))
	}
	if m.GetSpec != nil {
		l = m.GetSpec.Size()
		n += 1 + l + sovPublicCrudapi(uint64(l))
	}
	if len(m.StatusSet) > 0 {
		for _, e := range m.StatusSet {
			l = e.Size()
			n += 1 + l + sovPublicCrudapi(uint64(l))
		}
	}
	if m.OwnerView != nil {
		l = m.OwnerView.Size()
		n += 1 + l + sovPublicCrudapi(uint64(l))
	}
	if len(m.Annotations) > 0 {
		for k, v := range m.Annotations {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovPublicCrudapi(uint64(len(k))) + 1 + len(v) + sovPublicCrudapi(uint64(len(v)))
			n += mapEntrySize + 1 + sovPublicCrudapi(uint64(mapEntrySize))
		}
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovPublicCrudapi(uint64(l))
	}
	if m.Disabled {
		n += 2
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovPublicCrudapi(uint64(l))
	}
	if m.SystemMetadata != nil {
		l = m.SystemMetadata.Size()
		n += 1 + l + sovPublicCrudapi(uint64(l))
	}
	return n
}

func (m *ListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovPublicCrudapi(uint64(l))
		}
	}
	if len(m.Errors) > 0 {
		for _, e := range m.Errors {
			l = e.Size()
			n += 1 + l + sovPublicCrudapi(uint64(l))
		}
	}
	return n
}

func (m *DeleteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCrudapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCrudapi(uint64(l))
	}
	if m.FailIfReferred {
		n += 2
	}
	return n
}

func sovPublicCrudapi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPublicCrudapi(x uint64) (n int) {
	return sovPublicCrudapi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CreateRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateRequest{`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "ObjectCreateMetaType", "schema.ObjectCreateMetaType", 1) + `,`,
		`Spec:` + strings.Replace(fmt.Sprintf("%v", this.Spec), "CreateSpecType", "CreateSpecType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateResponse{`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "ObjectGetMetaType", "schema.ObjectGetMetaType", 1) + `,`,
		`Spec:` + strings.Replace(fmt.Sprintf("%v", this.Spec), "GetSpecType", "GetSpecType", 1) + `,`,
		`SystemMetadata:` + strings.Replace(fmt.Sprintf("%v", this.SystemMetadata), "SystemObjectGetMetaType", "schema.SystemObjectGetMetaType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceRequest{`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "ObjectReplaceMetaType", "schema.ObjectReplaceMetaType", 1) + `,`,
		`Spec:` + strings.Replace(fmt.Sprintf("%v", this.Spec), "ReplaceSpecType", "ReplaceSpecType", 1) + `,`,
		`ResourceVersion:` + fmt.Sprintf("%v", this.ResourceVersion) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceResponse{`,
		`}`,
	}, "")
	return s
}
func (this *GetRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ResponseFormat:` + fmt.Sprintf("%v", this.ResponseFormat) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForReferringObjects := "[]*ObjectRefType{"
	for _, f := range this.ReferringObjects {
		repeatedStringForReferringObjects += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForReferringObjects += "}"
	repeatedStringForStatus := "[]*StatusObject{"
	for _, f := range this.Status {
		repeatedStringForStatus += strings.Replace(fmt.Sprintf("%v", f), "StatusObject", "StatusObject", 1) + ","
	}
	repeatedStringForStatus += "}"
	s := strings.Join([]string{`&GetResponse{`,
		`Object:` + strings.Replace(fmt.Sprintf("%v", this.Object), "Object", "Object", 1) + `,`,
		`CreateForm:` + strings.Replace(this.CreateForm.String(), "CreateRequest", "CreateRequest", 1) + `,`,
		`ReplaceForm:` + strings.Replace(this.ReplaceForm.String(), "ReplaceRequest", "ReplaceRequest", 1) + `,`,
		`ResourceVersion:` + fmt.Sprintf("%v", this.ResourceVersion) + `,`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "ObjectGetMetaType", "schema.ObjectGetMetaType", 1) + `,`,
		`Spec:` + strings.Replace(fmt.Sprintf("%v", this.Spec), "GetSpecType", "GetSpecType", 1) + `,`,
		`SystemMetadata:` + strings.Replace(fmt.Sprintf("%v", this.SystemMetadata), "SystemObjectGetMetaType", "schema.SystemObjectGetMetaType", 1) + `,`,
		`ReferringObjects:` + repeatedStringForReferringObjects + `,`,
		`Status:` + repeatedStringForStatus + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`LabelFilter:` + fmt.Sprintf("%v", this.LabelFilter) + `,`,
		`ReportFields:` + fmt.Sprintf("%v", this.ReportFields) + `,`,
		`ReportStatusFields:` + fmt.Sprintf("%v", this.ReportStatusFields) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListResponseItem) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForStatusSet := "[]*StatusObject{"
	for _, f := range this.StatusSet {
		repeatedStringForStatusSet += strings.Replace(fmt.Sprintf("%v", f), "StatusObject", "StatusObject", 1) + ","
	}
	repeatedStringForStatusSet += "}"
	keysForLabels := make([]string, 0, len(this.Labels))
	for k, _ := range this.Labels {
		keysForLabels = append(keysForLabels, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLabels)
	mapStringForLabels := "map[string]string{"
	for _, k := range keysForLabels {
		mapStringForLabels += fmt.Sprintf("%v: %v,", k, this.Labels[k])
	}
	mapStringForLabels += "}"
	keysForAnnotations := make([]string, 0, len(this.Annotations))
	for k, _ := range this.Annotations {
		keysForAnnotations = append(keysForAnnotations, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAnnotations)
	mapStringForAnnotations := "map[string]string{"
	for _, k := range keysForAnnotations {
		mapStringForAnnotations += fmt.Sprintf("%v: %v,", k, this.Annotations[k])
	}
	mapStringForAnnotations += "}"
	s := strings.Join([]string{`&ListResponseItem{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`Labels:` + mapStringForLabels + `,`,
		`Object:` + strings.Replace(fmt.Sprintf("%v", this.Object), "Object", "Object", 1) + `,`,
		`Tenant:` + fmt.Sprintf("%v", this.Tenant) + `,`,
		`GetSpec:` + strings.Replace(fmt.Sprintf("%v", this.GetSpec), "GetSpecType", "GetSpecType", 1) + `,`,
		`StatusSet:` + repeatedStringForStatusSet + `,`,
		`OwnerView:` + strings.Replace(fmt.Sprintf("%v", this.OwnerView), "ViewRefType", "schema.ViewRefType", 1) + `,`,
		`Annotations:` + mapStringForAnnotations + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Disabled:` + fmt.Sprintf("%v", this.Disabled) + `,`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "ObjectGetMetaType", "schema.ObjectGetMetaType", 1) + `,`,
		`SystemMetadata:` + strings.Replace(fmt.Sprintf("%v", this.SystemMetadata), "SystemObjectGetMetaType", "schema.SystemObjectGetMetaType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]*ListResponseItem{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(f.String(), "ListResponseItem", "ListResponseItem", 1) + ","
	}
	repeatedStringForItems += "}"
	repeatedStringForErrors := "[]*ErrorType{"
	for _, f := range this.Errors {
		repeatedStringForErrors += strings.Replace(fmt.Sprintf("%v", f), "ErrorType", "schema.ErrorType", 1) + ","
	}
	repeatedStringForErrors += "}"
	s := strings.Join([]string{`&ListResponse{`,
		`Items:` + repeatedStringForItems + `,`,
		`Errors:` + repeatedStringForErrors + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`FailIfReferred:` + fmt.Sprintf("%v", this.FailIfReferred) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPublicCrudapi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCrudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &schema.ObjectCreateMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &CreateSpecType{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCrudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCrudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &schema.ObjectGetMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &GetSpecType{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SystemMetadata == nil {
				m.SystemMetadata = &schema.SystemObjectGetMetaType{}
			}
			if err := m.SystemMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCrudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCrudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &schema.ObjectReplaceMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &ReplaceSpecType{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCrudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCrudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCrudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCrudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseFormat", wireType)
			}
			m.ResponseFormat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResponseFormat |= GetResponseFormatCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCrudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCrudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Object{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateForm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreateForm == nil {
				m.CreateForm = &CreateRequest{}
			}
			if err := m.CreateForm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplaceForm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplaceForm == nil {
				m.ReplaceForm = &ReplaceRequest{}
			}
			if err := m.ReplaceForm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &schema.ObjectGetMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &GetSpecType{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SystemMetadata == nil {
				m.SystemMetadata = &schema.SystemObjectGetMetaType{}
			}
			if err := m.SystemMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferringObjects", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReferringObjects = append(m.ReferringObjects, &schema.ObjectRefType{})
			if err := m.ReferringObjects[len(m.ReferringObjects)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20000:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = append(m.Status, &StatusObject{})
			if err := m.Status[len(m.Status)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCrudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCrudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelFilter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LabelFilter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportFields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReportFields = append(m.ReportFields, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportStatusFields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReportStatusFields = append(m.ReportStatusFields, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCrudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListResponseItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCrudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListResponseItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListResponseItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicCrudapi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicCrudapi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPublicCrudapi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPublicCrudapi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicCrudapi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthPublicCrudapi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthPublicCrudapi
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPublicCrudapi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthPublicCrudapi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Object{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GetSpec == nil {
				m.GetSpec = &GetSpecType{}
			}
			if err := m.GetSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusSet = append(m.StatusSet, &StatusObject{})
			if err := m.StatusSet[len(m.StatusSet)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerView", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OwnerView == nil {
				m.OwnerView = &schema.ViewRefType{}
			}
			if err := m.OwnerView.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Annotations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Annotations == nil {
				m.Annotations = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicCrudapi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicCrudapi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPublicCrudapi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPublicCrudapi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicCrudapi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthPublicCrudapi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthPublicCrudapi
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPublicCrudapi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthPublicCrudapi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Annotations[mapkey] = mapvalue
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Disabled = bool(v != 0)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &schema.ObjectGetMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SystemMetadata == nil {
				m.SystemMetadata = &schema.SystemObjectGetMetaType{}
			}
			if err := m.SystemMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCrudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCrudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &ListResponseItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Errors = append(m.Errors, &schema.ErrorType{})
			if err := m.Errors[len(m.Errors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCrudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCrudapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailIfReferred", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FailIfReferred = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCrudapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCrudapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublicCrudapi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublicCrudapi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCrudapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPublicCrudapi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPublicCrudapi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPublicCrudapi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPublicCrudapi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublicCrudapi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPublicCrudapi = fmt.Errorf("proto: unexpected end of group")
)

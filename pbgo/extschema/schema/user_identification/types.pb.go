// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/user_identification/types.proto

package user_identification

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// UserIdentificationRule
//
// x-displayName: "User Identification Rule"
// A user identification rule specifies a single criterion to determine an identifier from the input fields extracted from an API request . A rule is considered
// to have a successful outcome if an identifier gets extracted.
type UserIdentificationRule struct {
	// identifier
	//
	// x-displayName: "Identifier Type"
	// x-required
	// Type of identifier to be used in rule.
	//
	// Types that are valid to be assigned to Identifier:
	//	*UserIdentificationRule_ClientIp
	//	*UserIdentificationRule_QueryParamKey
	//	*UserIdentificationRule_HttpHeaderName
	//	*UserIdentificationRule_CookieName
	//	*UserIdentificationRule_None
	//	*UserIdentificationRule_ClientAsn
	//	*UserIdentificationRule_TlsFingerprint
	//	*UserIdentificationRule_IpAndHttpHeaderName
	//	*UserIdentificationRule_IpAndTlsFingerprint
	//	*UserIdentificationRule_ClientCountry
	//	*UserIdentificationRule_ClientRegion
	//	*UserIdentificationRule_ClientCity
	//	*UserIdentificationRule_JwtClaimName
	Identifier isUserIdentificationRule_Identifier `protobuf_oneof:"identifier"`
}

func (m *UserIdentificationRule) Reset()      { *m = UserIdentificationRule{} }
func (*UserIdentificationRule) ProtoMessage() {}
func (*UserIdentificationRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_9386c30a805661f8, []int{0}
}
func (m *UserIdentificationRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserIdentificationRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *UserIdentificationRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserIdentificationRule.Merge(m, src)
}
func (m *UserIdentificationRule) XXX_Size() int {
	return m.Size()
}
func (m *UserIdentificationRule) XXX_DiscardUnknown() {
	xxx_messageInfo_UserIdentificationRule.DiscardUnknown(m)
}

var xxx_messageInfo_UserIdentificationRule proto.InternalMessageInfo

type isUserIdentificationRule_Identifier interface {
	isUserIdentificationRule_Identifier()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type UserIdentificationRule_ClientIp struct {
	ClientIp *schema.Empty `protobuf:"bytes,2,opt,name=client_ip,json=clientIp,proto3,oneof" json:"client_ip,omitempty"`
}
type UserIdentificationRule_QueryParamKey struct {
	QueryParamKey string `protobuf:"bytes,3,opt,name=query_param_key,json=queryParamKey,proto3,oneof" json:"query_param_key,omitempty"`
}
type UserIdentificationRule_HttpHeaderName struct {
	HttpHeaderName string `protobuf:"bytes,4,opt,name=http_header_name,json=httpHeaderName,proto3,oneof" json:"http_header_name,omitempty"`
}
type UserIdentificationRule_CookieName struct {
	CookieName string `protobuf:"bytes,5,opt,name=cookie_name,json=cookieName,proto3,oneof" json:"cookie_name,omitempty"`
}
type UserIdentificationRule_None struct {
	None *schema.Empty `protobuf:"bytes,6,opt,name=none,proto3,oneof" json:"none,omitempty"`
}
type UserIdentificationRule_ClientAsn struct {
	ClientAsn *schema.Empty `protobuf:"bytes,7,opt,name=client_asn,json=clientAsn,proto3,oneof" json:"client_asn,omitempty"`
}
type UserIdentificationRule_TlsFingerprint struct {
	TlsFingerprint *schema.Empty `protobuf:"bytes,8,opt,name=tls_fingerprint,json=tlsFingerprint,proto3,oneof" json:"tls_fingerprint,omitempty"`
}
type UserIdentificationRule_IpAndHttpHeaderName struct {
	IpAndHttpHeaderName string `protobuf:"bytes,9,opt,name=ip_and_http_header_name,json=ipAndHttpHeaderName,proto3,oneof" json:"ip_and_http_header_name,omitempty"`
}
type UserIdentificationRule_IpAndTlsFingerprint struct {
	IpAndTlsFingerprint *schema.Empty `protobuf:"bytes,10,opt,name=ip_and_tls_fingerprint,json=ipAndTlsFingerprint,proto3,oneof" json:"ip_and_tls_fingerprint,omitempty"`
}
type UserIdentificationRule_ClientCountry struct {
	ClientCountry *schema.Empty `protobuf:"bytes,11,opt,name=client_country,json=clientCountry,proto3,oneof" json:"client_country,omitempty"`
}
type UserIdentificationRule_ClientRegion struct {
	ClientRegion *schema.Empty `protobuf:"bytes,12,opt,name=client_region,json=clientRegion,proto3,oneof" json:"client_region,omitempty"`
}
type UserIdentificationRule_ClientCity struct {
	ClientCity *schema.Empty `protobuf:"bytes,13,opt,name=client_city,json=clientCity,proto3,oneof" json:"client_city,omitempty"`
}
type UserIdentificationRule_JwtClaimName struct {
	JwtClaimName string `protobuf:"bytes,14,opt,name=jwt_claim_name,json=jwtClaimName,proto3,oneof" json:"jwt_claim_name,omitempty"`
}

func (*UserIdentificationRule_ClientIp) isUserIdentificationRule_Identifier()            {}
func (*UserIdentificationRule_QueryParamKey) isUserIdentificationRule_Identifier()       {}
func (*UserIdentificationRule_HttpHeaderName) isUserIdentificationRule_Identifier()      {}
func (*UserIdentificationRule_CookieName) isUserIdentificationRule_Identifier()          {}
func (*UserIdentificationRule_None) isUserIdentificationRule_Identifier()                {}
func (*UserIdentificationRule_ClientAsn) isUserIdentificationRule_Identifier()           {}
func (*UserIdentificationRule_TlsFingerprint) isUserIdentificationRule_Identifier()      {}
func (*UserIdentificationRule_IpAndHttpHeaderName) isUserIdentificationRule_Identifier() {}
func (*UserIdentificationRule_IpAndTlsFingerprint) isUserIdentificationRule_Identifier() {}
func (*UserIdentificationRule_ClientCountry) isUserIdentificationRule_Identifier()       {}
func (*UserIdentificationRule_ClientRegion) isUserIdentificationRule_Identifier()        {}
func (*UserIdentificationRule_ClientCity) isUserIdentificationRule_Identifier()          {}
func (*UserIdentificationRule_JwtClaimName) isUserIdentificationRule_Identifier()        {}

func (m *UserIdentificationRule) GetIdentifier() isUserIdentificationRule_Identifier {
	if m != nil {
		return m.Identifier
	}
	return nil
}

func (m *UserIdentificationRule) GetClientIp() *schema.Empty {
	if x, ok := m.GetIdentifier().(*UserIdentificationRule_ClientIp); ok {
		return x.ClientIp
	}
	return nil
}

func (m *UserIdentificationRule) GetQueryParamKey() string {
	if x, ok := m.GetIdentifier().(*UserIdentificationRule_QueryParamKey); ok {
		return x.QueryParamKey
	}
	return ""
}

func (m *UserIdentificationRule) GetHttpHeaderName() string {
	if x, ok := m.GetIdentifier().(*UserIdentificationRule_HttpHeaderName); ok {
		return x.HttpHeaderName
	}
	return ""
}

func (m *UserIdentificationRule) GetCookieName() string {
	if x, ok := m.GetIdentifier().(*UserIdentificationRule_CookieName); ok {
		return x.CookieName
	}
	return ""
}

func (m *UserIdentificationRule) GetNone() *schema.Empty {
	if x, ok := m.GetIdentifier().(*UserIdentificationRule_None); ok {
		return x.None
	}
	return nil
}

func (m *UserIdentificationRule) GetClientAsn() *schema.Empty {
	if x, ok := m.GetIdentifier().(*UserIdentificationRule_ClientAsn); ok {
		return x.ClientAsn
	}
	return nil
}

func (m *UserIdentificationRule) GetTlsFingerprint() *schema.Empty {
	if x, ok := m.GetIdentifier().(*UserIdentificationRule_TlsFingerprint); ok {
		return x.TlsFingerprint
	}
	return nil
}

func (m *UserIdentificationRule) GetIpAndHttpHeaderName() string {
	if x, ok := m.GetIdentifier().(*UserIdentificationRule_IpAndHttpHeaderName); ok {
		return x.IpAndHttpHeaderName
	}
	return ""
}

func (m *UserIdentificationRule) GetIpAndTlsFingerprint() *schema.Empty {
	if x, ok := m.GetIdentifier().(*UserIdentificationRule_IpAndTlsFingerprint); ok {
		return x.IpAndTlsFingerprint
	}
	return nil
}

func (m *UserIdentificationRule) GetClientCountry() *schema.Empty {
	if x, ok := m.GetIdentifier().(*UserIdentificationRule_ClientCountry); ok {
		return x.ClientCountry
	}
	return nil
}

func (m *UserIdentificationRule) GetClientRegion() *schema.Empty {
	if x, ok := m.GetIdentifier().(*UserIdentificationRule_ClientRegion); ok {
		return x.ClientRegion
	}
	return nil
}

func (m *UserIdentificationRule) GetClientCity() *schema.Empty {
	if x, ok := m.GetIdentifier().(*UserIdentificationRule_ClientCity); ok {
		return x.ClientCity
	}
	return nil
}

func (m *UserIdentificationRule) GetJwtClaimName() string {
	if x, ok := m.GetIdentifier().(*UserIdentificationRule_JwtClaimName); ok {
		return x.JwtClaimName
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*UserIdentificationRule) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*UserIdentificationRule_ClientIp)(nil),
		(*UserIdentificationRule_QueryParamKey)(nil),
		(*UserIdentificationRule_HttpHeaderName)(nil),
		(*UserIdentificationRule_CookieName)(nil),
		(*UserIdentificationRule_None)(nil),
		(*UserIdentificationRule_ClientAsn)(nil),
		(*UserIdentificationRule_TlsFingerprint)(nil),
		(*UserIdentificationRule_IpAndHttpHeaderName)(nil),
		(*UserIdentificationRule_IpAndTlsFingerprint)(nil),
		(*UserIdentificationRule_ClientCountry)(nil),
		(*UserIdentificationRule_ClientRegion)(nil),
		(*UserIdentificationRule_ClientCity)(nil),
		(*UserIdentificationRule_JwtClaimName)(nil),
	}
}

// GlobalSpecType
//
// x-displayName: "Specification"
// Shape of user_identification in the storage backend.
type GlobalSpecType struct {
	// rules
	//
	// x-displayName: "User Identification Rules"
	// x-required
	// An ordered list of rules that are evaluated sequentially against the input fields extracted from an API request in order to determine a user identifier.
	// Evaluation of the rules is terminated once a user identifier has been extracted.
	Rules []*UserIdentificationRule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_9386c30a805661f8, []int{1}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

func (m *GlobalSpecType) GetRules() []*UserIdentificationRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

// Create user identification
//
// x-displayName: "Create User Identification"
// Create user_identification creates a new object in the storage backend for metadata.namespace.
type CreateSpecType struct {
	Rules []*UserIdentificationRule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_9386c30a805661f8, []int{2}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

func (m *CreateSpecType) GetRules() []*UserIdentificationRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

// Replace user identification
//
// x-displayName: "Replace User Identification"
// Replace user_identification replaces an existing object in the storage backend for metadata.namespace.
type ReplaceSpecType struct {
	Rules []*UserIdentificationRule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_9386c30a805661f8, []int{3}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

func (m *ReplaceSpecType) GetRules() []*UserIdentificationRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

// Get user identification
//
// x-displayName: "Get User Identification"
// Get user_identification reads a given object from storage backend for metadata.namespace.
type GetSpecType struct {
	Rules []*UserIdentificationRule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_9386c30a805661f8, []int{4}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

func (m *GetSpecType) GetRules() []*UserIdentificationRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

func init() {
	proto.RegisterType((*UserIdentificationRule)(nil), "ves.io.schema.user_identification.UserIdentificationRule")
	golang_proto.RegisterType((*UserIdentificationRule)(nil), "ves.io.schema.user_identification.UserIdentificationRule")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.user_identification.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.user_identification.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.user_identification.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.user_identification.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.user_identification.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.user_identification.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.user_identification.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.user_identification.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/user_identification/types.proto", fileDescriptor_9386c30a805661f8)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/user_identification/types.proto", fileDescriptor_9386c30a805661f8)
}

var fileDescriptor_9386c30a805661f8 = []byte{
	// 982 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0x4f, 0x4f, 0x1b, 0x47,
	0x14, 0xf7, 0xd8, 0x86, 0xc0, 0x33, 0xd8, 0x74, 0x69, 0xc3, 0x86, 0xa4, 0xdb, 0x2d, 0x27, 0x44,
	0x17, 0xbb, 0x5e, 0x27, 0xe4, 0x4f, 0x95, 0x56, 0x60, 0xb5, 0x31, 0xa1, 0xa2, 0xd4, 0x38, 0x8a,
	0xda, 0xcb, 0x6a, 0x6d, 0x3f, 0xcc, 0x84, 0xf5, 0xce, 0x66, 0x76, 0x0c, 0xf5, 0xa5, 0xca, 0x47,
	0x88, 0x52, 0x35, 0x97, 0x7e, 0x80, 0x56, 0xfd, 0x08, 0xa5, 0x07, 0x2e, 0x95, 0xa2, 0x9c, 0x38,
	0x72, 0x0c, 0xcb, 0xa5, 0xbd, 0xe5, 0x23, 0x54, 0xfb, 0x07, 0xe2, 0xb5, 0xc1, 0xed, 0x21, 0xca,
	0x6d, 0x76, 0xde, 0xef, 0xbd, 0xf7, 0x9b, 0xdf, 0xfb, 0x8d, 0x3d, 0xb0, 0xb8, 0x8b, 0x6e, 0x9e,
	0xb2, 0x82, 0xdb, 0xd8, 0xc6, 0xb6, 0x59, 0xe8, 0xb8, 0xc8, 0x0d, 0xda, 0x44, 0x5b, 0xd0, 0x2d,
	0xda, 0x30, 0x05, 0x65, 0x76, 0x41, 0x74, 0x1d, 0x74, 0xf3, 0x0e, 0x67, 0x82, 0x49, 0x1f, 0x87,
	0xf0, 0x7c, 0x08, 0xcf, 0x9f, 0x03, 0x9f, 0x5d, 0x6c, 0x51, 0xb1, 0xdd, 0xa9, 0xe7, 0x1b, 0xac,
	0x5d, 0x68, 0xb1, 0x16, 0x2b, 0x04, 0x99, 0xf5, 0xce, 0x56, 0xf0, 0x15, 0x7c, 0x04, 0xab, 0xb0,
	0xe2, 0xec, 0x4c, 0x9c, 0x80, 0x8d, 0x22, 0x0a, 0x5c, 0x8d, 0x07, 0x98, 0xe3, 0x57, 0x8f, 0x78,
	0xcc, 0x5e, 0x89, 0x07, 0x7b, 0x28, 0xce, 0x5e, 0x8b, 0x87, 0x76, 0x4d, 0x8b, 0x36, 0x4d, 0x81,
	0x51, 0x54, 0xed, 0x8b, 0x52, 0xdc, 0x33, 0x62, 0xa5, 0xe7, 0x7e, 0xcd, 0xc0, 0xe5, 0x07, 0x2e,
	0xf2, 0xd5, 0xd8, 0xb1, 0xaa, 0x1d, 0x0b, 0xa5, 0x12, 0x8c, 0x37, 0x2c, 0x8a, 0xb6, 0x30, 0xa8,
	0x23, 0x27, 0x55, 0x32, 0x9f, 0xd1, 0xdf, 0xcf, 0xc7, 0x15, 0xf9, 0xb2, 0xed, 0x88, 0x6e, 0x25,
	0x51, 0x1d, 0x0b, 0x81, 0xab, 0x8e, 0x74, 0x17, 0x72, 0x8f, 0x3b, 0xc8, 0xbb, 0x86, 0x63, 0x72,
	0xb3, 0x6d, 0xec, 0x60, 0x57, 0x4e, 0xa9, 0x64, 0x7e, 0x7c, 0x65, 0xfa, 0x8f, 0x7f, 0x0e, 0x52,
	0x23, 0x3c, 0x35, 0xff, 0x24, 0xe9, 0xaf, 0xd2, 0x3c, 0xa9, 0x92, 0x4a, 0xa2, 0x3a, 0x19, 0xa0,
	0x37, 0x7c, 0xf0, 0x1a, 0x76, 0xa5, 0x55, 0x98, 0xda, 0x16, 0xc2, 0x31, 0xb6, 0xd1, 0x6c, 0x22,
	0x37, 0x6c, 0xb3, 0x8d, 0x72, 0x3a, 0xc8, 0xff, 0x30, 0xca, 0x7f, 0x41, 0xc8, 0xf9, 0x95, 0xb2,
	0x7e, 0x62, 0x25, 0xc8, 0x5b, 0x37, 0xdb, 0x28, 0x2d, 0x41, 0xa6, 0xc1, 0xd8, 0x0e, 0xc5, 0xb0,
	0xca, 0xc8, 0x30, 0x16, 0x10, 0x22, 0x83, 0xbc, 0x05, 0x48, 0xdb, 0xcc, 0x46, 0x79, 0x74, 0xe8,
	0x89, 0x03, 0x8c, 0x74, 0x03, 0x20, 0x92, 0xc8, 0x74, 0x6d, 0xf9, 0xd2, 0xd0, 0x8c, 0x48, 0xcc,
	0x65, 0xd7, 0x96, 0xbe, 0x80, 0x9c, 0xb0, 0x5c, 0x63, 0x8b, 0xda, 0x2d, 0xe4, 0x0e, 0xa7, 0xb6,
	0x90, 0xc7, 0x86, 0xe6, 0x66, 0x85, 0xe5, 0x7e, 0xf5, 0x06, 0x2d, 0x3d, 0x80, 0x19, 0xea, 0x18,
	0xa6, 0xdd, 0x34, 0x06, 0xd4, 0x1a, 0xff, 0x7f, 0x6a, 0x4d, 0x53, 0x67, 0xd9, 0x6e, 0x56, 0xe2,
	0x92, 0xad, 0xc1, 0xe5, 0xa8, 0x6c, 0x3f, 0x3d, 0x18, 0x4a, 0x2f, 0x2c, 0x56, 0x8b, 0x73, 0xbc,
	0x0b, 0xd9, 0x48, 0x9b, 0x06, 0xeb, 0xd8, 0x82, 0x77, 0xe5, 0xcc, 0xd0, 0x22, 0x93, 0x21, 0xba,
	0x1c, 0x82, 0xa5, 0xcf, 0x20, 0xda, 0x30, 0x38, 0xb6, 0x28, 0xb3, 0xe5, 0x89, 0xa1, 0xd9, 0x13,
	0x21, 0xb8, 0x1a, 0x60, 0xa5, 0x9b, 0x90, 0x39, 0xed, 0x4d, 0x45, 0x57, 0x9e, 0x1c, 0x9a, 0x1a,
	0x8d, 0xb0, 0x4c, 0x85, 0xdf, 0x35, 0xfb, 0x68, 0x4f, 0x18, 0x0d, 0xcb, 0xa4, 0xed, 0x50, 0xcf,
	0xec, 0x30, 0xdf, 0x4c, 0x3c, 0xda, 0x13, 0x65, 0x1f, 0xeb, 0xcb, 0x77, 0xe7, 0x97, 0xf4, 0xcb,
	0x7d, 0xf2, 0x3c, 0x0d, 0xbf, 0xa7, 0x20, 0x77, 0x7a, 0x9f, 0x90, 0xab, 0xb5, 0xae, 0x83, 0x0b,
	0xcf, 0x53, 0xf0, 0x53, 0x0a, 0x66, 0x7a, 0xae, 0x94, 0x0e, 0xab, 0x1b, 0xea, 0x72, 0xb3, 0xc9,
	0xd1, 0x75, 0x61, 0x6e, 0xe0, 0xda, 0xe8, 0xb9, 0x6f, 0xfd, 0x0d, 0x35, 0xb8, 0x1a, 0x28, 0x90,
	0xc3, 0x47, 0x83, 0x77, 0x43, 0xcf, 0x54, 0x6a, 0xb5, 0x0d, 0x35, 0x1c, 0x21, 0x7c, 0x10, 0x73,
	0xbc, 0x3e, 0x5a, 0x0e, 0x3e, 0x60, 0x22, 0x34, 0xb4, 0x9e, 0x5e, 0x67, 0x36, 0xc2, 0x4c, 0xaf,
	0x65, 0xf5, 0xf1, 0xe5, 0x4d, 0x75, 0xbd, 0xd3, 0xae, 0x23, 0xf7, 0x29, 0xf4, 0x4d, 0x5d, 0xcf,
	0xd5, 0xbe, 0xde, 0x54, 0x7b, 0x66, 0x0a, 0xa5, 0x0b, 0x7d, 0xa7, 0xcb, 0x6f, 0x4e, 0xa3, 0x7e,
	0xa2, 0xf6, 0xd2, 0x5a, 0xba, 0xc8, 0x55, 0xfa, 0xb5, 0x58, 0x4e, 0x7f, 0xb3, 0x2b, 0xfd, 0x06,
	0xd2, 0x2f, 0x45, 0xe6, 0x80, 0x99, 0x3e, 0x73, 0xe8, 0xa3, 0xe1, 0xe0, 0x61, 0x3a, 0x36, 0x78,
	0x3d, 0xed, 0x0f, 0x15, 0xae, 0xf6, 0x0f, 0x55, 0x1f, 0xbf, 0xff, 0xb0, 0xa6, 0x06, 0x83, 0x83,
	0x16, 0xc0, 0x1a, 0x76, 0xd5, 0x82, 0xea, 0x8f, 0x50, 0xff, 0x6e, 0x60, 0x0e, 0x83, 0xa2, 0xc7,
	0x54, 0xbe, 0x50, 0x90, 0xfe, 0x9e, 0x2b, 0xb7, 0x00, 0xe8, 0x99, 0x29, 0xa4, 0x85, 0x83, 0x7d,
	0x92, 0x3c, 0xdc, 0x27, 0xc4, 0xdb, 0x27, 0x8a, 0xae, 0x15, 0xaf, 0x6b, 0x37, 0xb4, 0xeb, 0x5a,
	0x49, 0xbb, 0xa5, 0xdd, 0xd6, 0x8a, 0x9f, 0x6a, 0x37, 0xb5, 0x62, 0x51, 0x2b, 0xea, 0x5a, 0xb1,
	0xa4, 0x2d, 0xdd, 0x4f, 0x8f, 0x91, 0xa9, 0xe4, 0xdc, 0x53, 0x02, 0xd9, 0x7b, 0x16, 0xab, 0x9b,
	0xd6, 0xa6, 0x83, 0x0d, 0xdf, 0x54, 0xd2, 0x8f, 0x30, 0xc2, 0x3b, 0x16, 0xba, 0x32, 0x51, 0x53,
	0xf3, 0x19, 0xfd, 0x76, 0xfe, 0x3f, 0xff, 0xaf, 0xf2, 0xe7, 0xff, 0xd6, 0xaf, 0x2c, 0xfa, 0x54,
	0x02, 0x8f, 0x3f, 0x23, 0xc9, 0xa9, 0xf4, 0xe9, 0x6a, 0xec, 0x6c, 0x4f, 0x26, 0xde, 0xab, 0xbf,
	0x52, 0xa3, 0xcf, 0xfe, 0x24, 0xc9, 0x29, 0x52, 0x0d, 0xdb, 0xce, 0x09, 0xc8, 0x96, 0x39, 0x9a,
	0x02, 0xcf, 0x18, 0x7d, 0xf3, 0xb6, 0x18, 0x45, 0x2d, 0xee, 0xbc, 0xf7, 0xf2, 0xf3, 0xbe, 0x53,
	0xcf, 0x75, 0x20, 0x57, 0x45, 0xc7, 0x32, 0x1b, 0xef, 0xb6, 0xed, 0x63, 0xc8, 0xdc, 0x43, 0xf1,
	0x2e, 0x5b, 0xae, 0xfc, 0x4c, 0x0e, 0x8f, 0x95, 0xc4, 0xd1, 0xb1, 0x92, 0x78, 0x7d, 0xac, 0x90,
	0x27, 0x9e, 0x42, 0x7e, 0xf3, 0x14, 0xf2, 0xc2, 0x53, 0xc8, 0xa1, 0xa7, 0x90, 0x23, 0x4f, 0x21,
	0xaf, 0x3c, 0x85, 0xfc, 0xed, 0x29, 0x89, 0xd7, 0x9e, 0x42, 0x9e, 0x9e, 0x28, 0x89, 0x83, 0x13,
	0x85, 0x1c, 0x9e, 0x28, 0x89, 0xa3, 0x13, 0x25, 0xf1, 0xfd, 0xc3, 0x16, 0x73, 0x76, 0x5a, 0xf9,
	0x5d, 0x66, 0x09, 0xe4, 0xdc, 0xe7, 0x54, 0x08, 0x16, 0x5b, 0x8c, 0xb7, 0x17, 0x1d, 0xce, 0x76,
	0x69, 0x13, 0xf9, 0xe2, 0x69, 0xb8, 0xe0, 0xd4, 0x5b, 0xac, 0x80, 0x3f, 0x88, 0xe8, 0xb1, 0x70,
	0xf1, 0x1b, 0xa9, 0x3e, 0x1a, 0xbc, 0x1d, 0x4a, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x84, 0xe2,
	0x60, 0x69, 0x4f, 0x09, 0x00, 0x00,
}

func (this *UserIdentificationRule) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserIdentificationRule)
	if !ok {
		that2, ok := that.(UserIdentificationRule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Identifier == nil {
		if this.Identifier != nil {
			return false
		}
	} else if this.Identifier == nil {
		return false
	} else if !this.Identifier.Equal(that1.Identifier) {
		return false
	}
	return true
}
func (this *UserIdentificationRule_ClientIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserIdentificationRule_ClientIp)
	if !ok {
		that2, ok := that.(UserIdentificationRule_ClientIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ClientIp.Equal(that1.ClientIp) {
		return false
	}
	return true
}
func (this *UserIdentificationRule_QueryParamKey) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserIdentificationRule_QueryParamKey)
	if !ok {
		that2, ok := that.(UserIdentificationRule_QueryParamKey)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.QueryParamKey != that1.QueryParamKey {
		return false
	}
	return true
}
func (this *UserIdentificationRule_HttpHeaderName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserIdentificationRule_HttpHeaderName)
	if !ok {
		that2, ok := that.(UserIdentificationRule_HttpHeaderName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HttpHeaderName != that1.HttpHeaderName {
		return false
	}
	return true
}
func (this *UserIdentificationRule_CookieName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserIdentificationRule_CookieName)
	if !ok {
		that2, ok := that.(UserIdentificationRule_CookieName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CookieName != that1.CookieName {
		return false
	}
	return true
}
func (this *UserIdentificationRule_None) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserIdentificationRule_None)
	if !ok {
		that2, ok := that.(UserIdentificationRule_None)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.None.Equal(that1.None) {
		return false
	}
	return true
}
func (this *UserIdentificationRule_ClientAsn) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserIdentificationRule_ClientAsn)
	if !ok {
		that2, ok := that.(UserIdentificationRule_ClientAsn)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ClientAsn.Equal(that1.ClientAsn) {
		return false
	}
	return true
}
func (this *UserIdentificationRule_TlsFingerprint) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserIdentificationRule_TlsFingerprint)
	if !ok {
		that2, ok := that.(UserIdentificationRule_TlsFingerprint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TlsFingerprint.Equal(that1.TlsFingerprint) {
		return false
	}
	return true
}
func (this *UserIdentificationRule_IpAndHttpHeaderName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserIdentificationRule_IpAndHttpHeaderName)
	if !ok {
		that2, ok := that.(UserIdentificationRule_IpAndHttpHeaderName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IpAndHttpHeaderName != that1.IpAndHttpHeaderName {
		return false
	}
	return true
}
func (this *UserIdentificationRule_IpAndTlsFingerprint) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserIdentificationRule_IpAndTlsFingerprint)
	if !ok {
		that2, ok := that.(UserIdentificationRule_IpAndTlsFingerprint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IpAndTlsFingerprint.Equal(that1.IpAndTlsFingerprint) {
		return false
	}
	return true
}
func (this *UserIdentificationRule_ClientCountry) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserIdentificationRule_ClientCountry)
	if !ok {
		that2, ok := that.(UserIdentificationRule_ClientCountry)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ClientCountry.Equal(that1.ClientCountry) {
		return false
	}
	return true
}
func (this *UserIdentificationRule_ClientRegion) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserIdentificationRule_ClientRegion)
	if !ok {
		that2, ok := that.(UserIdentificationRule_ClientRegion)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ClientRegion.Equal(that1.ClientRegion) {
		return false
	}
	return true
}
func (this *UserIdentificationRule_ClientCity) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserIdentificationRule_ClientCity)
	if !ok {
		that2, ok := that.(UserIdentificationRule_ClientCity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ClientCity.Equal(that1.ClientCity) {
		return false
	}
	return true
}
func (this *UserIdentificationRule_JwtClaimName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserIdentificationRule_JwtClaimName)
	if !ok {
		that2, ok := that.(UserIdentificationRule_JwtClaimName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.JwtClaimName != that1.JwtClaimName {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Rules) != len(that1.Rules) {
		return false
	}
	for i := range this.Rules {
		if !this.Rules[i].Equal(that1.Rules[i]) {
			return false
		}
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Rules) != len(that1.Rules) {
		return false
	}
	for i := range this.Rules {
		if !this.Rules[i].Equal(that1.Rules[i]) {
			return false
		}
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Rules) != len(that1.Rules) {
		return false
	}
	for i := range this.Rules {
		if !this.Rules[i].Equal(that1.Rules[i]) {
			return false
		}
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Rules) != len(that1.Rules) {
		return false
	}
	for i := range this.Rules {
		if !this.Rules[i].Equal(that1.Rules[i]) {
			return false
		}
	}
	return true
}
func (this *UserIdentificationRule) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 17)
	s = append(s, "&user_identification.UserIdentificationRule{")
	if this.Identifier != nil {
		s = append(s, "Identifier: "+fmt.Sprintf("%#v", this.Identifier)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UserIdentificationRule_ClientIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&user_identification.UserIdentificationRule_ClientIp{` +
		`ClientIp:` + fmt.Sprintf("%#v", this.ClientIp) + `}`}, ", ")
	return s
}
func (this *UserIdentificationRule_QueryParamKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&user_identification.UserIdentificationRule_QueryParamKey{` +
		`QueryParamKey:` + fmt.Sprintf("%#v", this.QueryParamKey) + `}`}, ", ")
	return s
}
func (this *UserIdentificationRule_HttpHeaderName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&user_identification.UserIdentificationRule_HttpHeaderName{` +
		`HttpHeaderName:` + fmt.Sprintf("%#v", this.HttpHeaderName) + `}`}, ", ")
	return s
}
func (this *UserIdentificationRule_CookieName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&user_identification.UserIdentificationRule_CookieName{` +
		`CookieName:` + fmt.Sprintf("%#v", this.CookieName) + `}`}, ", ")
	return s
}
func (this *UserIdentificationRule_None) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&user_identification.UserIdentificationRule_None{` +
		`None:` + fmt.Sprintf("%#v", this.None) + `}`}, ", ")
	return s
}
func (this *UserIdentificationRule_ClientAsn) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&user_identification.UserIdentificationRule_ClientAsn{` +
		`ClientAsn:` + fmt.Sprintf("%#v", this.ClientAsn) + `}`}, ", ")
	return s
}
func (this *UserIdentificationRule_TlsFingerprint) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&user_identification.UserIdentificationRule_TlsFingerprint{` +
		`TlsFingerprint:` + fmt.Sprintf("%#v", this.TlsFingerprint) + `}`}, ", ")
	return s
}
func (this *UserIdentificationRule_IpAndHttpHeaderName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&user_identification.UserIdentificationRule_IpAndHttpHeaderName{` +
		`IpAndHttpHeaderName:` + fmt.Sprintf("%#v", this.IpAndHttpHeaderName) + `}`}, ", ")
	return s
}
func (this *UserIdentificationRule_IpAndTlsFingerprint) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&user_identification.UserIdentificationRule_IpAndTlsFingerprint{` +
		`IpAndTlsFingerprint:` + fmt.Sprintf("%#v", this.IpAndTlsFingerprint) + `}`}, ", ")
	return s
}
func (this *UserIdentificationRule_ClientCountry) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&user_identification.UserIdentificationRule_ClientCountry{` +
		`ClientCountry:` + fmt.Sprintf("%#v", this.ClientCountry) + `}`}, ", ")
	return s
}
func (this *UserIdentificationRule_ClientRegion) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&user_identification.UserIdentificationRule_ClientRegion{` +
		`ClientRegion:` + fmt.Sprintf("%#v", this.ClientRegion) + `}`}, ", ")
	return s
}
func (this *UserIdentificationRule_ClientCity) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&user_identification.UserIdentificationRule_ClientCity{` +
		`ClientCity:` + fmt.Sprintf("%#v", this.ClientCity) + `}`}, ", ")
	return s
}
func (this *UserIdentificationRule_JwtClaimName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&user_identification.UserIdentificationRule_JwtClaimName{` +
		`JwtClaimName:` + fmt.Sprintf("%#v", this.JwtClaimName) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&user_identification.GlobalSpecType{")
	if this.Rules != nil {
		s = append(s, "Rules: "+fmt.Sprintf("%#v", this.Rules)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&user_identification.CreateSpecType{")
	if this.Rules != nil {
		s = append(s, "Rules: "+fmt.Sprintf("%#v", this.Rules)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&user_identification.ReplaceSpecType{")
	if this.Rules != nil {
		s = append(s, "Rules: "+fmt.Sprintf("%#v", this.Rules)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&user_identification.GetSpecType{")
	if this.Rules != nil {
		s = append(s, "Rules: "+fmt.Sprintf("%#v", this.Rules)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *UserIdentificationRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserIdentificationRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserIdentificationRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Identifier != nil {
		{
			size := m.Identifier.Size()
			i -= size
			if _, err := m.Identifier.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *UserIdentificationRule_ClientIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserIdentificationRule_ClientIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ClientIp != nil {
		{
			size, err := m.ClientIp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *UserIdentificationRule_QueryParamKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserIdentificationRule_QueryParamKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.QueryParamKey)
	copy(dAtA[i:], m.QueryParamKey)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.QueryParamKey)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func (m *UserIdentificationRule_HttpHeaderName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserIdentificationRule_HttpHeaderName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.HttpHeaderName)
	copy(dAtA[i:], m.HttpHeaderName)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.HttpHeaderName)))
	i--
	dAtA[i] = 0x22
	return len(dAtA) - i, nil
}
func (m *UserIdentificationRule_CookieName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserIdentificationRule_CookieName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.CookieName)
	copy(dAtA[i:], m.CookieName)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.CookieName)))
	i--
	dAtA[i] = 0x2a
	return len(dAtA) - i, nil
}
func (m *UserIdentificationRule_None) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserIdentificationRule_None) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.None != nil {
		{
			size, err := m.None.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *UserIdentificationRule_ClientAsn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserIdentificationRule_ClientAsn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ClientAsn != nil {
		{
			size, err := m.ClientAsn.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *UserIdentificationRule_TlsFingerprint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserIdentificationRule_TlsFingerprint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TlsFingerprint != nil {
		{
			size, err := m.TlsFingerprint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *UserIdentificationRule_IpAndHttpHeaderName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserIdentificationRule_IpAndHttpHeaderName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.IpAndHttpHeaderName)
	copy(dAtA[i:], m.IpAndHttpHeaderName)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.IpAndHttpHeaderName)))
	i--
	dAtA[i] = 0x4a
	return len(dAtA) - i, nil
}
func (m *UserIdentificationRule_IpAndTlsFingerprint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserIdentificationRule_IpAndTlsFingerprint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IpAndTlsFingerprint != nil {
		{
			size, err := m.IpAndTlsFingerprint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *UserIdentificationRule_ClientCountry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserIdentificationRule_ClientCountry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ClientCountry != nil {
		{
			size, err := m.ClientCountry.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *UserIdentificationRule_ClientRegion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserIdentificationRule_ClientRegion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ClientRegion != nil {
		{
			size, err := m.ClientRegion.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *UserIdentificationRule_ClientCity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserIdentificationRule_ClientCity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ClientCity != nil {
		{
			size, err := m.ClientCity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *UserIdentificationRule_JwtClaimName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserIdentificationRule_JwtClaimName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.JwtClaimName)
	copy(dAtA[i:], m.JwtClaimName)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.JwtClaimName)))
	i--
	dAtA[i] = 0x72
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rules) > 0 {
		for iNdEx := len(m.Rules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rules) > 0 {
		for iNdEx := len(m.Rules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rules) > 0 {
		for iNdEx := len(m.Rules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rules) > 0 {
		for iNdEx := len(m.Rules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UserIdentificationRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Identifier != nil {
		n += m.Identifier.Size()
	}
	return n
}

func (m *UserIdentificationRule_ClientIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClientIp != nil {
		l = m.ClientIp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *UserIdentificationRule_QueryParamKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.QueryParamKey)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *UserIdentificationRule_HttpHeaderName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HttpHeaderName)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *UserIdentificationRule_CookieName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CookieName)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *UserIdentificationRule_None) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.None != nil {
		l = m.None.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *UserIdentificationRule_ClientAsn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClientAsn != nil {
		l = m.ClientAsn.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *UserIdentificationRule_TlsFingerprint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TlsFingerprint != nil {
		l = m.TlsFingerprint.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *UserIdentificationRule_IpAndHttpHeaderName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IpAndHttpHeaderName)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *UserIdentificationRule_IpAndTlsFingerprint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IpAndTlsFingerprint != nil {
		l = m.IpAndTlsFingerprint.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *UserIdentificationRule_ClientCountry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClientCountry != nil {
		l = m.ClientCountry.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *UserIdentificationRule_ClientRegion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClientRegion != nil {
		l = m.ClientRegion.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *UserIdentificationRule_ClientCity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClientCity != nil {
		l = m.ClientCity.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *UserIdentificationRule_JwtClaimName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JwtClaimName)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rules) > 0 {
		for _, e := range m.Rules {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rules) > 0 {
		for _, e := range m.Rules {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rules) > 0 {
		for _, e := range m.Rules {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rules) > 0 {
		for _, e := range m.Rules {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *UserIdentificationRule) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserIdentificationRule{`,
		`Identifier:` + fmt.Sprintf("%v", this.Identifier) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserIdentificationRule_ClientIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserIdentificationRule_ClientIp{`,
		`ClientIp:` + strings.Replace(fmt.Sprintf("%v", this.ClientIp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserIdentificationRule_QueryParamKey) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserIdentificationRule_QueryParamKey{`,
		`QueryParamKey:` + fmt.Sprintf("%v", this.QueryParamKey) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserIdentificationRule_HttpHeaderName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserIdentificationRule_HttpHeaderName{`,
		`HttpHeaderName:` + fmt.Sprintf("%v", this.HttpHeaderName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserIdentificationRule_CookieName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserIdentificationRule_CookieName{`,
		`CookieName:` + fmt.Sprintf("%v", this.CookieName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserIdentificationRule_None) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserIdentificationRule_None{`,
		`None:` + strings.Replace(fmt.Sprintf("%v", this.None), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserIdentificationRule_ClientAsn) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserIdentificationRule_ClientAsn{`,
		`ClientAsn:` + strings.Replace(fmt.Sprintf("%v", this.ClientAsn), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserIdentificationRule_TlsFingerprint) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserIdentificationRule_TlsFingerprint{`,
		`TlsFingerprint:` + strings.Replace(fmt.Sprintf("%v", this.TlsFingerprint), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserIdentificationRule_IpAndHttpHeaderName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserIdentificationRule_IpAndHttpHeaderName{`,
		`IpAndHttpHeaderName:` + fmt.Sprintf("%v", this.IpAndHttpHeaderName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserIdentificationRule_IpAndTlsFingerprint) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserIdentificationRule_IpAndTlsFingerprint{`,
		`IpAndTlsFingerprint:` + strings.Replace(fmt.Sprintf("%v", this.IpAndTlsFingerprint), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserIdentificationRule_ClientCountry) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserIdentificationRule_ClientCountry{`,
		`ClientCountry:` + strings.Replace(fmt.Sprintf("%v", this.ClientCountry), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserIdentificationRule_ClientRegion) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserIdentificationRule_ClientRegion{`,
		`ClientRegion:` + strings.Replace(fmt.Sprintf("%v", this.ClientRegion), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserIdentificationRule_ClientCity) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserIdentificationRule_ClientCity{`,
		`ClientCity:` + strings.Replace(fmt.Sprintf("%v", this.ClientCity), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserIdentificationRule_JwtClaimName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserIdentificationRule_JwtClaimName{`,
		`JwtClaimName:` + fmt.Sprintf("%v", this.JwtClaimName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRules := "[]*UserIdentificationRule{"
	for _, f := range this.Rules {
		repeatedStringForRules += strings.Replace(f.String(), "UserIdentificationRule", "UserIdentificationRule", 1) + ","
	}
	repeatedStringForRules += "}"
	s := strings.Join([]string{`&GlobalSpecType{`,
		`Rules:` + repeatedStringForRules + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRules := "[]*UserIdentificationRule{"
	for _, f := range this.Rules {
		repeatedStringForRules += strings.Replace(f.String(), "UserIdentificationRule", "UserIdentificationRule", 1) + ","
	}
	repeatedStringForRules += "}"
	s := strings.Join([]string{`&CreateSpecType{`,
		`Rules:` + repeatedStringForRules + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRules := "[]*UserIdentificationRule{"
	for _, f := range this.Rules {
		repeatedStringForRules += strings.Replace(f.String(), "UserIdentificationRule", "UserIdentificationRule", 1) + ","
	}
	repeatedStringForRules += "}"
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`Rules:` + repeatedStringForRules + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRules := "[]*UserIdentificationRule{"
	for _, f := range this.Rules {
		repeatedStringForRules += strings.Replace(f.String(), "UserIdentificationRule", "UserIdentificationRule", 1) + ","
	}
	repeatedStringForRules += "}"
	s := strings.Join([]string{`&GetSpecType{`,
		`Rules:` + repeatedStringForRules + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *UserIdentificationRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserIdentificationRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserIdentificationRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Identifier = &UserIdentificationRule_ClientIp{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryParamKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifier = &UserIdentificationRule_QueryParamKey{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpHeaderName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifier = &UserIdentificationRule_HttpHeaderName{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CookieName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifier = &UserIdentificationRule_CookieName{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field None", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Identifier = &UserIdentificationRule_None{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientAsn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Identifier = &UserIdentificationRule_ClientAsn{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsFingerprint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Identifier = &UserIdentificationRule_TlsFingerprint{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAndHttpHeaderName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifier = &UserIdentificationRule_IpAndHttpHeaderName{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAndTlsFingerprint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Identifier = &UserIdentificationRule_IpAndTlsFingerprint{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientCountry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Identifier = &UserIdentificationRule_ClientCountry{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientRegion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Identifier = &UserIdentificationRule_ClientRegion{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientCity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Identifier = &UserIdentificationRule_ClientCity{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JwtClaimName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifier = &UserIdentificationRule_JwtClaimName{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = append(m.Rules, &UserIdentificationRule{})
			if err := m.Rules[len(m.Rules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = append(m.Rules, &UserIdentificationRule{})
			if err := m.Rules[len(m.Rules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = append(m.Rules, &UserIdentificationRule{})
			if err := m.Rules[len(m.Rules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = append(m.Rules, &UserIdentificationRule{})
			if err := m.Rules[len(m.Rules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

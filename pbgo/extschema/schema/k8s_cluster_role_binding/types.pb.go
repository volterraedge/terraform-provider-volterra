// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/k8s_cluster_role_binding/types.proto

package k8s_cluster_role_binding

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ServiceAccountType struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-required
	// x-example: "cd-app-namespace"
	// Namespace of the service account
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Name
	//
	// x-displayName: "Name"
	// x-required
	// x-example: "cd-app-controller"
	// Name of the service account
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *ServiceAccountType) Reset()      { *m = ServiceAccountType{} }
func (*ServiceAccountType) ProtoMessage() {}
func (*ServiceAccountType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4b9e76e4e16ff24, []int{0}
}
func (m *ServiceAccountType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceAccountType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ServiceAccountType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceAccountType.Merge(m, src)
}
func (m *ServiceAccountType) XXX_Size() int {
	return m.Size()
}
func (m *ServiceAccountType) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceAccountType.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceAccountType proto.InternalMessageInfo

func (m *ServiceAccountType) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ServiceAccountType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Subject
//
// x-displayName: "Subject"
// Subject can be user or service account.
type SubjectType struct {
	// Select Subject
	//
	// x-displayName: "Select Subject"
	// x-required
	// Select subject as user, group or service account
	//
	// Types that are valid to be assigned to SubjectChoice:
	//	*SubjectType_User
	//	*SubjectType_ServiceAccount
	//	*SubjectType_Group
	SubjectChoice isSubjectType_SubjectChoice `protobuf_oneof:"subject_choice"`
}

func (m *SubjectType) Reset()      { *m = SubjectType{} }
func (*SubjectType) ProtoMessage() {}
func (*SubjectType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4b9e76e4e16ff24, []int{1}
}
func (m *SubjectType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubjectType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SubjectType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubjectType.Merge(m, src)
}
func (m *SubjectType) XXX_Size() int {
	return m.Size()
}
func (m *SubjectType) XXX_DiscardUnknown() {
	xxx_messageInfo_SubjectType.DiscardUnknown(m)
}

var xxx_messageInfo_SubjectType proto.InternalMessageInfo

type isSubjectType_SubjectChoice interface {
	isSubjectType_SubjectChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type SubjectType_User struct {
	User string `protobuf:"bytes,2,opt,name=user,proto3,oneof" json:"user,omitempty"`
}
type SubjectType_ServiceAccount struct {
	ServiceAccount *ServiceAccountType `protobuf:"bytes,3,opt,name=service_account,json=serviceAccount,proto3,oneof" json:"service_account,omitempty"`
}
type SubjectType_Group struct {
	Group string `protobuf:"bytes,4,opt,name=group,proto3,oneof" json:"group,omitempty"`
}

func (*SubjectType_User) isSubjectType_SubjectChoice()           {}
func (*SubjectType_ServiceAccount) isSubjectType_SubjectChoice() {}
func (*SubjectType_Group) isSubjectType_SubjectChoice()          {}

func (m *SubjectType) GetSubjectChoice() isSubjectType_SubjectChoice {
	if m != nil {
		return m.SubjectChoice
	}
	return nil
}

func (m *SubjectType) GetUser() string {
	if x, ok := m.GetSubjectChoice().(*SubjectType_User); ok {
		return x.User
	}
	return ""
}

func (m *SubjectType) GetServiceAccount() *ServiceAccountType {
	if x, ok := m.GetSubjectChoice().(*SubjectType_ServiceAccount); ok {
		return x.ServiceAccount
	}
	return nil
}

func (m *SubjectType) GetGroup() string {
	if x, ok := m.GetSubjectChoice().(*SubjectType_Group); ok {
		return x.Group
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SubjectType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SubjectType_User)(nil),
		(*SubjectType_ServiceAccount)(nil),
		(*SubjectType_Group)(nil),
	}
}

// GlobalSpecType
//
// x-displayName: "Global Configuration Specification"
// Configuration specification for Cluster Role Binding
type GlobalSpecType struct {
	// K8s Cluster Role
	//
	// x-displayName: "K8s Cluster Role"
	// x-required
	// K8s Cluster Role for which bindings are defined.
	K8SClusterRole *views.ObjectRefType `protobuf:"bytes,1,opt,name=k8s_cluster_role,json=k8sClusterRole,proto3" json:"k8s_cluster_role,omitempty"`
	// Subjects
	//
	// x-displayName: "Subjects"
	// x-required
	// List of subjects (user, group or service account) to which this role is bound
	Subjects []*SubjectType `protobuf:"bytes,2,rep,name=subjects,proto3" json:"subjects,omitempty"`
	// K8s YAML
	//
	// x-displayName: "K8s YAML"
	// K8s YAML for ClusterRoleBinding
	GeneratedYaml string `protobuf:"bytes,1001,opt,name=generated_yaml,json=generatedYaml,proto3" json:"generated_yaml,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4b9e76e4e16ff24, []int{2}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

func (m *GlobalSpecType) GetK8SClusterRole() *views.ObjectRefType {
	if m != nil {
		return m.K8SClusterRole
	}
	return nil
}

func (m *GlobalSpecType) GetSubjects() []*SubjectType {
	if m != nil {
		return m.Subjects
	}
	return nil
}

func (m *GlobalSpecType) GetGeneratedYaml() string {
	if m != nil {
		return m.GeneratedYaml
	}
	return ""
}

// Create k8s_cluster_role_binding
//
// x-displayName: "Create Configuration Specification"
// Create k8s_cluster_role_binding will create the object in the storage backend for namespace metadata.namespace
type CreateSpecType struct {
	K8SClusterRole *views.ObjectRefType `protobuf:"bytes,1,opt,name=k8s_cluster_role,json=k8sClusterRole,proto3" json:"k8s_cluster_role,omitempty"`
	Subjects       []*SubjectType       `protobuf:"bytes,2,rep,name=subjects,proto3" json:"subjects,omitempty"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4b9e76e4e16ff24, []int{3}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

func (m *CreateSpecType) GetK8SClusterRole() *views.ObjectRefType {
	if m != nil {
		return m.K8SClusterRole
	}
	return nil
}

func (m *CreateSpecType) GetSubjects() []*SubjectType {
	if m != nil {
		return m.Subjects
	}
	return nil
}

// Replace k8s_cluster_role_binding
//
// x-displayName: "Replace Configuration Specification"
// Replacing an k8s_cluster_role_binding object will update the object by replacing the existing spec with the provided one.
// For read-then-write operations a resourceVersion mismatch will occur if the object was modified between the read and write
type ReplaceSpecType struct {
	K8SClusterRole *views.ObjectRefType `protobuf:"bytes,1,opt,name=k8s_cluster_role,json=k8sClusterRole,proto3" json:"k8s_cluster_role,omitempty"`
	Subjects       []*SubjectType       `protobuf:"bytes,2,rep,name=subjects,proto3" json:"subjects,omitempty"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4b9e76e4e16ff24, []int{4}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

func (m *ReplaceSpecType) GetK8SClusterRole() *views.ObjectRefType {
	if m != nil {
		return m.K8SClusterRole
	}
	return nil
}

func (m *ReplaceSpecType) GetSubjects() []*SubjectType {
	if m != nil {
		return m.Subjects
	}
	return nil
}

// Get k8s_cluster_role_binding
//
// x-displayName: "Get Configuration Specification"
// Get k8s_cluster_role_binding will get the object from the storage backend for namespace metadata.namespace
type GetSpecType struct {
	K8SClusterRole *views.ObjectRefType `protobuf:"bytes,1,opt,name=k8s_cluster_role,json=k8sClusterRole,proto3" json:"k8s_cluster_role,omitempty"`
	Subjects       []*SubjectType       `protobuf:"bytes,2,rep,name=subjects,proto3" json:"subjects,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4b9e76e4e16ff24, []int{5}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

func (m *GetSpecType) GetK8SClusterRole() *views.ObjectRefType {
	if m != nil {
		return m.K8SClusterRole
	}
	return nil
}

func (m *GetSpecType) GetSubjects() []*SubjectType {
	if m != nil {
		return m.Subjects
	}
	return nil
}

func init() {
	proto.RegisterType((*ServiceAccountType)(nil), "ves.io.schema.k8s_cluster_role_binding.ServiceAccountType")
	golang_proto.RegisterType((*ServiceAccountType)(nil), "ves.io.schema.k8s_cluster_role_binding.ServiceAccountType")
	proto.RegisterType((*SubjectType)(nil), "ves.io.schema.k8s_cluster_role_binding.SubjectType")
	golang_proto.RegisterType((*SubjectType)(nil), "ves.io.schema.k8s_cluster_role_binding.SubjectType")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.k8s_cluster_role_binding.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.k8s_cluster_role_binding.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.k8s_cluster_role_binding.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.k8s_cluster_role_binding.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.k8s_cluster_role_binding.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.k8s_cluster_role_binding.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.k8s_cluster_role_binding.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.k8s_cluster_role_binding.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/k8s_cluster_role_binding/types.proto", fileDescriptor_e4b9e76e4e16ff24)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/k8s_cluster_role_binding/types.proto", fileDescriptor_e4b9e76e4e16ff24)
}

var fileDescriptor_e4b9e76e4e16ff24 = []byte{
	// 680 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x55, 0xcf, 0x4f, 0xdb, 0x48,
	0x14, 0xf6, 0x4b, 0x02, 0x1b, 0x26, 0x22, 0x04, 0xaf, 0x56, 0xf2, 0x86, 0xd5, 0x90, 0x0d, 0x12,
	0x62, 0x57, 0x60, 0x6b, 0xc3, 0x1e, 0x10, 0x87, 0xd5, 0x36, 0x1c, 0x40, 0xed, 0x01, 0xc9, 0xe9,
	0xa5, 0x55, 0xa5, 0xd4, 0x71, 0x1e, 0xc6, 0xc5, 0xc9, 0x58, 0x33, 0x76, 0x5a, 0x0e, 0x48, 0xfc,
	0x09, 0x88, 0x63, 0xff, 0x82, 0xaa, 0x7f, 0x42, 0x73, 0x41, 0x3d, 0x55, 0x3d, 0xe5, 0x50, 0xb5,
	0x39, 0x16, 0xe7, 0x50, 0xb8, 0xf1, 0x27, 0x54, 0x8c, 0xc3, 0x8f, 0x24, 0x54, 0xe5, 0x50, 0xf5,
	0xc0, 0xed, 0xcd, 0x7c, 0xf3, 0xcd, 0xfb, 0xbe, 0xef, 0x59, 0x63, 0x52, 0x6a, 0xa1, 0xd0, 0x5d,
	0x66, 0x08, 0x7b, 0x1b, 0x1b, 0x96, 0xb1, 0xb3, 0x22, 0xaa, 0xb6, 0x17, 0x8a, 0x00, 0x79, 0x95,
	0x33, 0x0f, 0xab, 0x35, 0xb7, 0x59, 0x77, 0x9b, 0x8e, 0x11, 0xec, 0xfa, 0x28, 0x74, 0x9f, 0xb3,
	0x80, 0xa9, 0xf3, 0x31, 0x47, 0x8f, 0x39, 0xfa, 0xb7, 0x38, 0xf9, 0x25, 0xc7, 0x0d, 0xb6, 0xc3,
	0x9a, 0x6e, 0xb3, 0x86, 0xe1, 0x30, 0x87, 0x19, 0x92, 0x5e, 0x0b, 0xb7, 0xe4, 0x4a, 0x2e, 0x64,
	0x15, 0x5f, 0x9b, 0x9f, 0x19, 0x94, 0xc2, 0xfc, 0xc0, 0x65, 0xcd, 0x7e, 0xcf, 0xfc, 0xef, 0x83,
	0xe0, 0x35, 0x39, 0xf9, 0x3f, 0x06, 0xa1, 0x96, 0xe5, 0xb9, 0x75, 0x2b, 0xc0, 0x3e, 0x5a, 0x18,
	0x42, 0x5d, 0x7c, 0x5e, 0x1d, 0xbc, 0x7a, 0x76, 0xf4, 0x84, 0xb8, 0xde, 0xa0, 0xf8, 0x94, 0xa8,
	0x15, 0xe4, 0x2d, 0xd7, 0xc6, 0x7b, 0xb6, 0xcd, 0xc2, 0x66, 0xf0, 0x70, 0xd7, 0x47, 0xf5, 0x2f,
	0x32, 0xd1, 0xb4, 0x1a, 0x28, 0x7c, 0xcb, 0x46, 0x0d, 0x0a, 0xb0, 0x30, 0x51, 0xce, 0xbc, 0x39,
	0x3d, 0x4a, 0x8e, 0xf3, 0x54, 0x0e, 0xb4, 0xff, 0xcd, 0x2b, 0x54, 0x9d, 0x25, 0xa9, 0xf3, 0x85,
	0x96, 0x18, 0x3d, 0x25, 0x81, 0xe2, 0x17, 0x20, 0x99, 0x4a, 0x58, 0x7b, 0x86, 0x76, 0x7c, 0xf7,
	0x9f, 0x24, 0x15, 0x0a, 0xe4, 0x37, 0x10, 0x36, 0x14, 0x53, 0x42, 0x2a, 0x92, 0x29, 0x11, 0x8b,
	0xaa, 0x5a, 0xb1, 0x2a, 0x2d, 0x59, 0x80, 0x85, 0x4c, 0x69, 0x55, 0xbf, 0xdd, 0x78, 0xf4, 0x51,
	0x4f, 0x1b, 0x8a, 0x99, 0x15, 0x03, 0xbb, 0xea, 0x1c, 0x19, 0x73, 0x38, 0x0b, 0x7d, 0x2d, 0x75,
	0x93, 0x94, 0x18, 0x2b, 0xcf, 0x91, 0xac, 0x88, 0xd5, 0x57, 0xed, 0x6d, 0xe6, 0xda, 0xa8, 0x4e,
	0x1f, 0xb5, 0x21, 0xd1, 0x69, 0x03, 0x44, 0x6d, 0x18, 0x2b, 0x2d, 0x2e, 0x2f, 0xfe, 0x7b, 0x3f,
	0x95, 0x86, 0x5c, 0xa2, 0xf8, 0x31, 0x41, 0xb2, 0xeb, 0x1e, 0xab, 0x59, 0x5e, 0xc5, 0x47, 0x5b,
	0x9a, 0xb5, 0x48, 0x6e, 0x58, 0xa3, 0xcc, 0x33, 0x53, 0x2a, 0x0e, 0x59, 0x91, 0xa3, 0xd1, 0x37,
	0x65, 0x27, 0x13, 0xb7, 0xce, 0xd9, 0xe5, 0x5f, 0x5f, 0xef, 0x8d, 0xd0, 0xcd, 0xec, 0xce, 0x8a,
	0x58, 0x8b, 0x37, 0x4c, 0xe6, 0xa1, 0xea, 0x93, 0x74, 0x5f, 0xa0, 0xd0, 0x12, 0x85, 0xe4, 0x42,
	0xa6, 0xb4, 0x7c, 0xeb, 0x94, 0xae, 0xc6, 0x52, 0x9e, 0x95, 0xee, 0x0f, 0x21, 0x99, 0xdb, 0x4f,
	0x9c, 0x97, 0x63, 0x87, 0x90, 0x48, 0xc3, 0x45, 0xa5, 0x81, 0x79, 0xd9, 0x45, 0x5d, 0x23, 0x59,
	0x07, 0x9b, 0xc8, 0xad, 0x00, 0xeb, 0xd5, 0x5d, 0xab, 0xe1, 0x69, 0xa7, 0xbf, 0xc8, 0x04, 0x67,
	0xba, 0x7b, 0x70, 0xd2, 0x86, 0x98, 0xc5, 0x93, 0xda, 0x7e, 0xa1, 0x5f, 0x1d, 0x00, 0x98, 0x93,
	0x97, 0x9c, 0x47, 0x56, 0xc3, 0x5b, 0xfd, 0xfb, 0x6d, 0x1b, 0xe6, 0xc9, 0x6f, 0x24, 0xf7, 0x60,
	0x45, 0x14, 0xfa, 0x7e, 0x0a, 0xd2, 0x10, 0xfc, 0x43, 0x26, 0x49, 0xba, 0x72, 0xd1, 0x0d, 0x4a,
	0xc5, 0x4f, 0x40, 0xb2, 0x6b, 0x1c, 0xad, 0x00, 0x7f, 0x66, 0xb0, 0x9b, 0x3f, 0x24, 0xd8, 0xab,
	0xdc, 0x56, 0xa7, 0xdf, 0xff, 0x37, 0xf4, 0x7d, 0x14, 0xbb, 0x40, 0xa6, 0x4c, 0xf4, 0x3d, 0xcb,
	0xbe, 0x73, 0xd6, 0x3e, 0x00, 0xc9, 0xac, 0x63, 0x70, 0xc7, 0x6c, 0x95, 0x5f, 0x42, 0xe7, 0x98,
	0x2a, 0xdd, 0x63, 0xaa, 0x9c, 0x1d, 0x53, 0xd8, 0x8f, 0x28, 0xbc, 0x8a, 0x28, 0xbc, 0x8b, 0x28,
	0x74, 0x22, 0x0a, 0xdd, 0x88, 0xc2, 0xe7, 0x88, 0xc2, 0x49, 0x44, 0x95, 0xb3, 0x88, 0xc2, 0x41,
	0x8f, 0x2a, 0x47, 0x3d, 0x0a, 0x9d, 0x1e, 0x55, 0xba, 0x3d, 0xaa, 0x3c, 0x7e, 0xe2, 0x30, 0x7f,
	0xc7, 0xd1, 0x5b, 0xcc, 0x0b, 0x90, 0x73, 0x4b, 0x0f, 0x85, 0x21, 0x8b, 0x2d, 0xc6, 0x1b, 0x4b,
	0x3e, 0x67, 0x2d, 0xb7, 0x8e, 0x7c, 0xe9, 0x02, 0x36, 0xfc, 0x9a, 0xc3, 0x0c, 0x7c, 0x11, 0xf4,
	0xdf, 0xef, 0xef, 0xfc, 0xc9, 0x6a, 0xe3, 0xf2, 0x51, 0x5f, 0xfe, 0x1a, 0x00, 0x00, 0xff, 0xff,
	0xff, 0x56, 0x57, 0x34, 0xfa, 0x06, 0x00, 0x00,
}

func (this *ServiceAccountType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceAccountType)
	if !ok {
		that2, ok := that.(ServiceAccountType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *SubjectType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SubjectType)
	if !ok {
		that2, ok := that.(SubjectType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.SubjectChoice == nil {
		if this.SubjectChoice != nil {
			return false
		}
	} else if this.SubjectChoice == nil {
		return false
	} else if !this.SubjectChoice.Equal(that1.SubjectChoice) {
		return false
	}
	return true
}
func (this *SubjectType_User) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SubjectType_User)
	if !ok {
		that2, ok := that.(SubjectType_User)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.User != that1.User {
		return false
	}
	return true
}
func (this *SubjectType_ServiceAccount) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SubjectType_ServiceAccount)
	if !ok {
		that2, ok := that.(SubjectType_ServiceAccount)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ServiceAccount.Equal(that1.ServiceAccount) {
		return false
	}
	return true
}
func (this *SubjectType_Group) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SubjectType_Group)
	if !ok {
		that2, ok := that.(SubjectType_Group)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Group != that1.Group {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.K8SClusterRole.Equal(that1.K8SClusterRole) {
		return false
	}
	if len(this.Subjects) != len(that1.Subjects) {
		return false
	}
	for i := range this.Subjects {
		if !this.Subjects[i].Equal(that1.Subjects[i]) {
			return false
		}
	}
	if this.GeneratedYaml != that1.GeneratedYaml {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.K8SClusterRole.Equal(that1.K8SClusterRole) {
		return false
	}
	if len(this.Subjects) != len(that1.Subjects) {
		return false
	}
	for i := range this.Subjects {
		if !this.Subjects[i].Equal(that1.Subjects[i]) {
			return false
		}
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.K8SClusterRole.Equal(that1.K8SClusterRole) {
		return false
	}
	if len(this.Subjects) != len(that1.Subjects) {
		return false
	}
	for i := range this.Subjects {
		if !this.Subjects[i].Equal(that1.Subjects[i]) {
			return false
		}
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.K8SClusterRole.Equal(that1.K8SClusterRole) {
		return false
	}
	if len(this.Subjects) != len(that1.Subjects) {
		return false
	}
	for i := range this.Subjects {
		if !this.Subjects[i].Equal(that1.Subjects[i]) {
			return false
		}
	}
	return true
}
func (this *ServiceAccountType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&k8s_cluster_role_binding.ServiceAccountType{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SubjectType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&k8s_cluster_role_binding.SubjectType{")
	if this.SubjectChoice != nil {
		s = append(s, "SubjectChoice: "+fmt.Sprintf("%#v", this.SubjectChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SubjectType_User) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&k8s_cluster_role_binding.SubjectType_User{` +
		`User:` + fmt.Sprintf("%#v", this.User) + `}`}, ", ")
	return s
}
func (this *SubjectType_ServiceAccount) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&k8s_cluster_role_binding.SubjectType_ServiceAccount{` +
		`ServiceAccount:` + fmt.Sprintf("%#v", this.ServiceAccount) + `}`}, ", ")
	return s
}
func (this *SubjectType_Group) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&k8s_cluster_role_binding.SubjectType_Group{` +
		`Group:` + fmt.Sprintf("%#v", this.Group) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&k8s_cluster_role_binding.GlobalSpecType{")
	if this.K8SClusterRole != nil {
		s = append(s, "K8SClusterRole: "+fmt.Sprintf("%#v", this.K8SClusterRole)+",\n")
	}
	if this.Subjects != nil {
		s = append(s, "Subjects: "+fmt.Sprintf("%#v", this.Subjects)+",\n")
	}
	s = append(s, "GeneratedYaml: "+fmt.Sprintf("%#v", this.GeneratedYaml)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&k8s_cluster_role_binding.CreateSpecType{")
	if this.K8SClusterRole != nil {
		s = append(s, "K8SClusterRole: "+fmt.Sprintf("%#v", this.K8SClusterRole)+",\n")
	}
	if this.Subjects != nil {
		s = append(s, "Subjects: "+fmt.Sprintf("%#v", this.Subjects)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&k8s_cluster_role_binding.ReplaceSpecType{")
	if this.K8SClusterRole != nil {
		s = append(s, "K8SClusterRole: "+fmt.Sprintf("%#v", this.K8SClusterRole)+",\n")
	}
	if this.Subjects != nil {
		s = append(s, "Subjects: "+fmt.Sprintf("%#v", this.Subjects)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&k8s_cluster_role_binding.GetSpecType{")
	if this.K8SClusterRole != nil {
		s = append(s, "K8SClusterRole: "+fmt.Sprintf("%#v", this.K8SClusterRole)+",\n")
	}
	if this.Subjects != nil {
		s = append(s, "Subjects: "+fmt.Sprintf("%#v", this.Subjects)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ServiceAccountType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceAccountType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceAccountType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SubjectType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubjectType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubjectType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SubjectChoice != nil {
		{
			size := m.SubjectChoice.Size()
			i -= size
			if _, err := m.SubjectChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *SubjectType_User) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubjectType_User) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.User)
	copy(dAtA[i:], m.User)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.User)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *SubjectType_ServiceAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubjectType_ServiceAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ServiceAccount != nil {
		{
			size, err := m.ServiceAccount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *SubjectType_Group) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubjectType_Group) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Group)
	copy(dAtA[i:], m.Group)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.Group)))
	i--
	dAtA[i] = 0x22
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GeneratedYaml) > 0 {
		i -= len(m.GeneratedYaml)
		copy(dAtA[i:], m.GeneratedYaml)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.GeneratedYaml)))
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xca
	}
	if len(m.Subjects) > 0 {
		for iNdEx := len(m.Subjects) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Subjects[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.K8SClusterRole != nil {
		{
			size, err := m.K8SClusterRole.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Subjects) > 0 {
		for iNdEx := len(m.Subjects) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Subjects[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.K8SClusterRole != nil {
		{
			size, err := m.K8SClusterRole.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Subjects) > 0 {
		for iNdEx := len(m.Subjects) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Subjects[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.K8SClusterRole != nil {
		{
			size, err := m.K8SClusterRole.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Subjects) > 0 {
		for iNdEx := len(m.Subjects) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Subjects[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.K8SClusterRole != nil {
		{
			size, err := m.K8SClusterRole.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ServiceAccountType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *SubjectType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SubjectChoice != nil {
		n += m.SubjectChoice.Size()
	}
	return n
}

func (m *SubjectType_User) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.User)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *SubjectType_ServiceAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServiceAccount != nil {
		l = m.ServiceAccount.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SubjectType_Group) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Group)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.K8SClusterRole != nil {
		l = m.K8SClusterRole.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Subjects) > 0 {
		for _, e := range m.Subjects {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.GeneratedYaml)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.K8SClusterRole != nil {
		l = m.K8SClusterRole.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Subjects) > 0 {
		for _, e := range m.Subjects {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.K8SClusterRole != nil {
		l = m.K8SClusterRole.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Subjects) > 0 {
		for _, e := range m.Subjects {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.K8SClusterRole != nil {
		l = m.K8SClusterRole.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Subjects) > 0 {
		for _, e := range m.Subjects {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ServiceAccountType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceAccountType{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SubjectType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SubjectType{`,
		`SubjectChoice:` + fmt.Sprintf("%v", this.SubjectChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SubjectType_User) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SubjectType_User{`,
		`User:` + fmt.Sprintf("%v", this.User) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SubjectType_ServiceAccount) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SubjectType_ServiceAccount{`,
		`ServiceAccount:` + strings.Replace(fmt.Sprintf("%v", this.ServiceAccount), "ServiceAccountType", "ServiceAccountType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SubjectType_Group) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SubjectType_Group{`,
		`Group:` + fmt.Sprintf("%v", this.Group) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSubjects := "[]*SubjectType{"
	for _, f := range this.Subjects {
		repeatedStringForSubjects += strings.Replace(f.String(), "SubjectType", "SubjectType", 1) + ","
	}
	repeatedStringForSubjects += "}"
	s := strings.Join([]string{`&GlobalSpecType{`,
		`K8SClusterRole:` + strings.Replace(fmt.Sprintf("%v", this.K8SClusterRole), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`Subjects:` + repeatedStringForSubjects + `,`,
		`GeneratedYaml:` + fmt.Sprintf("%v", this.GeneratedYaml) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSubjects := "[]*SubjectType{"
	for _, f := range this.Subjects {
		repeatedStringForSubjects += strings.Replace(f.String(), "SubjectType", "SubjectType", 1) + ","
	}
	repeatedStringForSubjects += "}"
	s := strings.Join([]string{`&CreateSpecType{`,
		`K8SClusterRole:` + strings.Replace(fmt.Sprintf("%v", this.K8SClusterRole), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`Subjects:` + repeatedStringForSubjects + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSubjects := "[]*SubjectType{"
	for _, f := range this.Subjects {
		repeatedStringForSubjects += strings.Replace(f.String(), "SubjectType", "SubjectType", 1) + ","
	}
	repeatedStringForSubjects += "}"
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`K8SClusterRole:` + strings.Replace(fmt.Sprintf("%v", this.K8SClusterRole), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`Subjects:` + repeatedStringForSubjects + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSubjects := "[]*SubjectType{"
	for _, f := range this.Subjects {
		repeatedStringForSubjects += strings.Replace(f.String(), "SubjectType", "SubjectType", 1) + ","
	}
	repeatedStringForSubjects += "}"
	s := strings.Join([]string{`&GetSpecType{`,
		`K8SClusterRole:` + strings.Replace(fmt.Sprintf("%v", this.K8SClusterRole), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`Subjects:` + repeatedStringForSubjects + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ServiceAccountType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceAccountType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceAccountType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubjectType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubjectType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubjectType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectChoice = &SubjectType_User{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ServiceAccountType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SubjectChoice = &SubjectType_ServiceAccount{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectChoice = &SubjectType_Group{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field K8SClusterRole", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.K8SClusterRole == nil {
				m.K8SClusterRole = &views.ObjectRefType{}
			}
			if err := m.K8SClusterRole.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subjects", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subjects = append(m.Subjects, &SubjectType{})
			if err := m.Subjects[len(m.Subjects)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1001:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GeneratedYaml", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GeneratedYaml = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field K8SClusterRole", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.K8SClusterRole == nil {
				m.K8SClusterRole = &views.ObjectRefType{}
			}
			if err := m.K8SClusterRole.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subjects", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subjects = append(m.Subjects, &SubjectType{})
			if err := m.Subjects[len(m.Subjects)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field K8SClusterRole", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.K8SClusterRole == nil {
				m.K8SClusterRole = &views.ObjectRefType{}
			}
			if err := m.K8SClusterRole.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subjects", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subjects = append(m.Subjects, &SubjectType{})
			if err := m.Subjects[len(m.Subjects)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field K8SClusterRole", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.K8SClusterRole == nil {
				m.K8SClusterRole = &views.ObjectRefType{}
			}
			if err := m.K8SClusterRole.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subjects", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subjects = append(m.Subjects, &SubjectType{})
			if err := m.Subjects[len(m.Subjects)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/l7_acl/types.proto

package l7_acl

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	policy "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/policy"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// L7AclAction
//
// x-displayName: "L7AclAction"
// L7 ACL action configures the action to be taken on rule match
type L7AclAction int32

const (
	// DENY
	//
	// x-displayName: "Deny"
	// Deny the request
	DENY L7AclAction = 0
	// ALLOW
	//
	// x-displayName: "Allow"
	// Allow the request to proceed
	ALLOW L7AclAction = 1
	// JS_CHALLENGE
	//
	// x-displayName: "JavaScript Challenge"
	// JavaScript challenge for the request to proceed
	JS_CHALLENGE L7AclAction = 2
)

var L7AclAction_name = map[int32]string{
	0: "DENY",
	1: "ALLOW",
	2: "JS_CHALLENGE",
}

var L7AclAction_value = map[string]int32{
	"DENY":         0,
	"ALLOW":        1,
	"JS_CHALLENGE": 2,
}

func (L7AclAction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_942a5acad400bc0b, []int{0}
}

// PathMatcherType
//
// x-displayName: "Path Matcher"
// A path matcher specifies criteria for matching an HTTP path string.
type PathMatcherType struct {
	// exact values
	//
	// x-displayName: "Exact Values"
	// x-example: "['/api/web/namespaces/project179/users/user1', '/api/config/namespaces/accounting/bgps', '/api/data/namespaces/project443/virtual_host_101']"
	// A list of exact path values to match the input HTTP path against.
	ExactValues []string `protobuf:"bytes,1,rep,name=exact_values,json=exactValues,proto3" json:"exact_values,omitempty"`
}

func (m *PathMatcherType) Reset()      { *m = PathMatcherType{} }
func (*PathMatcherType) ProtoMessage() {}
func (*PathMatcherType) Descriptor() ([]byte, []int) {
	return fileDescriptor_942a5acad400bc0b, []int{0}
}
func (m *PathMatcherType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PathMatcherType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PathMatcherType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PathMatcherType.Merge(m, src)
}
func (m *PathMatcherType) XXX_Size() int {
	return m.Size()
}
func (m *PathMatcherType) XXX_DiscardUnknown() {
	xxx_messageInfo_PathMatcherType.DiscardUnknown(m)
}

var xxx_messageInfo_PathMatcherType proto.InternalMessageInfo

func (m *PathMatcherType) GetExactValues() []string {
	if m != nil {
		return m.ExactValues
	}
	return nil
}

// L7 ACL Rule
//
// x-displayName: "L7 ACL Rule"
// Shape of `l7_acl_rule`
type L7AclRule struct {
	// metadata
	//
	// x-displayName: "Metadata"
	// x-required
	// Common attributes for the rule including name and description.
	Metadata *schema.MessageMetaType `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Action
	//
	// x-displayName: "Action"
	// x-required
	// Action to be applied if traffic matched the rule
	Action L7AclAction `protobuf:"varint,2,opt,name=action,proto3,enum=ves.io.schema.l7_acl.L7AclAction" json:"action,omitempty"`
	// ip_prefix
	//
	// x-displayName: "IP Prefixes"
	// x-example: "[192.168.1.0/24, 192.168.2.0/24]"
	// IP Address prefix in string format. String must contain both prefix and prefix-length
	IpPrefix []string `protobuf:"bytes,3,rep,name=ip_prefix,json=ipPrefix,proto3" json:"ip_prefix,omitempty"`
	// countries
	//
	// x-displayName: "Country List"
	// Sources that are located in one of the countries in the given list
	Countries []policy.CountryCode `protobuf:"varint,4,rep,packed,name=countries,proto3,enum=ves.io.schema.policy.CountryCode" json:"countries,omitempty"`
	// as numbers
	//
	// x-displayName: "AS Numbers"
	// x-example: "[713, 7932, 847325, 4683, 15269, 1000001]"
	// x-required
	// An unordered set of RFC 6793 defined 4-byte AS numbers that can be used to create allow or deny lists for use in network policy or service policy.
	AsNumbers []uint32 `protobuf:"varint,5,rep,packed,name=as_numbers,json=asNumbers,proto3" json:"as_numbers,omitempty"`
	// tls_fingerprints
	//
	// x-displayName: "TLS Fingerprints"
	// x-example: "1aa7bf8b97e540ca5edd75f7b8384bfa"
	// A list of exact TLS JA3 fingerprints to match the input TLS JA3 fingerprint against
	TlsFingerprints []string `protobuf:"bytes,6,rep,name=tls_fingerprints,json=tlsFingerprints,proto3" json:"tls_fingerprints,omitempty"`
	// paths
	//
	// x-displayName: "Paths"
	// x-example: "['/api/web/namespaces/project179/users/user1', '/api/config/namespaces/accounting/bgps', '/api/data/namespaces/project443/virtual_host_101']"
	// A list of exact path values to match the input HTTP path against
	Paths []string `protobuf:"bytes,7,rep,name=paths,proto3" json:"paths,omitempty"`
	// ja4_tls_fingerprints
	//
	// x-displayName: "JA4 TLS Fingerprints"
	// x-example: "t13d1516h2_8daaf6152771_199a283f251c"
	// A list of exact TLS JA4 fingerprints to match the input TLS JA4 fingerprint against
	Ja4TlsFingerprints []string `protobuf:"bytes,8,rep,name=ja4_tls_fingerprints,json=ja4TlsFingerprints,proto3" json:"ja4_tls_fingerprints,omitempty"`
}

func (m *L7AclRule) Reset()      { *m = L7AclRule{} }
func (*L7AclRule) ProtoMessage() {}
func (*L7AclRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_942a5acad400bc0b, []int{1}
}
func (m *L7AclRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *L7AclRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *L7AclRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L7AclRule.Merge(m, src)
}
func (m *L7AclRule) XXX_Size() int {
	return m.Size()
}
func (m *L7AclRule) XXX_DiscardUnknown() {
	xxx_messageInfo_L7AclRule.DiscardUnknown(m)
}

var xxx_messageInfo_L7AclRule proto.InternalMessageInfo

func (m *L7AclRule) GetMetadata() *schema.MessageMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *L7AclRule) GetAction() L7AclAction {
	if m != nil {
		return m.Action
	}
	return DENY
}

func (m *L7AclRule) GetIpPrefix() []string {
	if m != nil {
		return m.IpPrefix
	}
	return nil
}

func (m *L7AclRule) GetCountries() []policy.CountryCode {
	if m != nil {
		return m.Countries
	}
	return nil
}

func (m *L7AclRule) GetAsNumbers() []uint32 {
	if m != nil {
		return m.AsNumbers
	}
	return nil
}

func (m *L7AclRule) GetTlsFingerprints() []string {
	if m != nil {
		return m.TlsFingerprints
	}
	return nil
}

func (m *L7AclRule) GetPaths() []string {
	if m != nil {
		return m.Paths
	}
	return nil
}

func (m *L7AclRule) GetJa4TlsFingerprints() []string {
	if m != nil {
		return m.Ja4TlsFingerprints
	}
	return nil
}

// GlobalSpecType
//
// x-displayName: "Global Spec"
// Shape of `l7_acl` object
type GlobalSpecType struct {
	// L7 ACL Rules
	//
	// x-displayName: "L7 ACL Rules"
	// x-required
	// List of L7 ACL rules to be applied
	L7AclRule []*L7AclRule `protobuf:"bytes,2,rep,name=l7_acl_rule,json=l7AclRule,proto3" json:"l7_acl_rule,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_942a5acad400bc0b, []int{2}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

func (m *GlobalSpecType) GetL7AclRule() []*L7AclRule {
	if m != nil {
		return m.L7AclRule
	}
	return nil
}

// Create L7 ACL
//
// x-displayName: "Create L7 ACL"
// Create L7 ACL
type CreateSpecType struct {
	L7AclRule []*L7AclRule `protobuf:"bytes,2,rep,name=l7_acl_rule,json=l7AclRule,proto3" json:"l7_acl_rule,omitempty"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_942a5acad400bc0b, []int{3}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

func (m *CreateSpecType) GetL7AclRule() []*L7AclRule {
	if m != nil {
		return m.L7AclRule
	}
	return nil
}

// Replace L7 ACL
//
// x-displayName: "Replace L7 ACL"
// Replace L7 ACL
type ReplaceSpecType struct {
	L7AclRule []*L7AclRule `protobuf:"bytes,2,rep,name=l7_acl_rule,json=l7AclRule,proto3" json:"l7_acl_rule,omitempty"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_942a5acad400bc0b, []int{4}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

func (m *ReplaceSpecType) GetL7AclRule() []*L7AclRule {
	if m != nil {
		return m.L7AclRule
	}
	return nil
}

// Get L7 ACL
//
// x-displayName: "Get L7 ACL"
// Get L7 ACL
type GetSpecType struct {
	L7AclRule []*L7AclRule `protobuf:"bytes,2,rep,name=l7_acl_rule,json=l7AclRule,proto3" json:"l7_acl_rule,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_942a5acad400bc0b, []int{5}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

func (m *GetSpecType) GetL7AclRule() []*L7AclRule {
	if m != nil {
		return m.L7AclRule
	}
	return nil
}

func init() {
	proto.RegisterEnum("ves.io.schema.l7_acl.L7AclAction", L7AclAction_name, L7AclAction_value)
	golang_proto.RegisterEnum("ves.io.schema.l7_acl.L7AclAction", L7AclAction_name, L7AclAction_value)
	proto.RegisterType((*PathMatcherType)(nil), "ves.io.schema.l7_acl.PathMatcherType")
	golang_proto.RegisterType((*PathMatcherType)(nil), "ves.io.schema.l7_acl.PathMatcherType")
	proto.RegisterType((*L7AclRule)(nil), "ves.io.schema.l7_acl.L7AclRule")
	golang_proto.RegisterType((*L7AclRule)(nil), "ves.io.schema.l7_acl.L7AclRule")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.l7_acl.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.l7_acl.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.l7_acl.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.l7_acl.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.l7_acl.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.l7_acl.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.l7_acl.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.l7_acl.GetSpecType")
}

func init() { proto.RegisterFile("ves.io/schema/l7_acl/types.proto", fileDescriptor_942a5acad400bc0b) }
func init() {
	golang_proto.RegisterFile("ves.io/schema/l7_acl/types.proto", fileDescriptor_942a5acad400bc0b)
}

var fileDescriptor_942a5acad400bc0b = []byte{
	// 755 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0x4f, 0x6f, 0xe3, 0x44,
	0x14, 0xf7, 0xc4, 0x49, 0x36, 0x99, 0x2c, 0xad, 0xb1, 0x2a, 0x61, 0x02, 0x9a, 0x35, 0x81, 0x43,
	0x84, 0x54, 0x5b, 0x0a, 0x2b, 0x55, 0xf4, 0x00, 0x24, 0x21, 0x74, 0x55, 0xa5, 0x61, 0x95, 0xdd,
	0x82, 0xe0, 0x62, 0x4d, 0x9c, 0x89, 0xe3, 0xe2, 0x64, 0x2c, 0xcf, 0x38, 0x6d, 0x6e, 0x3d, 0x72,
	0x44, 0x3d, 0xf1, 0x11, 0xf8, 0x0c, 0xf4, 0xd2, 0x23, 0xea, 0xa9, 0xc7, 0x1c, 0xa9, 0x73, 0x29,
	0xb7, 0x1e, 0x7b, 0x44, 0x1d, 0x27, 0xc5, 0x6e, 0xc3, 0x1e, 0x2a, 0xf5, 0x36, 0x4f, 0xef, 0xf7,
	0x7e, 0x7f, 0xf2, 0x26, 0x63, 0xa8, 0x4f, 0x08, 0x33, 0x5c, 0x6a, 0x32, 0x7b, 0x48, 0x46, 0xd8,
	0xf4, 0xb6, 0x2c, 0x6c, 0x7b, 0x26, 0x9f, 0xfa, 0x84, 0x19, 0x7e, 0x40, 0x39, 0x55, 0x37, 0x62,
	0x84, 0x11, 0x23, 0x8c, 0x18, 0x51, 0xde, 0x74, 0x5c, 0x3e, 0x0c, 0x7b, 0x86, 0x4d, 0x47, 0xa6,
	0x43, 0x1d, 0x6a, 0x0a, 0x70, 0x2f, 0x1c, 0x88, 0x4a, 0x14, 0xe2, 0x14, 0x93, 0x94, 0x3f, 0x48,
	0xcb, 0x8c, 0x09, 0x5f, 0x34, 0x3e, 0x4a, 0x37, 0xa8, 0xcf, 0x5d, 0x3a, 0x5e, 0x48, 0x97, 0xef,
	0x99, 0xf3, 0xa9, 0xe7, 0xda, 0xd3, 0xa4, 0xb9, 0xf2, 0x87, 0x69, 0x44, 0xb2, 0xf5, 0x71, 0xba,
	0x35, 0xc1, 0x9e, 0xdb, 0xc7, 0x9c, 0xac, 0xa6, 0x9e, 0xb8, 0xe4, 0xd0, 0x4a, 0x8b, 0xbf, 0x78,
	0x88, 0x60, 0x49, 0x81, 0xca, 0x21, 0x5c, 0x7f, 0x8d, 0xf9, 0x70, 0x0f, 0x73, 0x7b, 0x48, 0x82,
	0xb7, 0x53, 0x9f, 0xa8, 0x7d, 0xf8, 0x9c, 0x1c, 0x61, 0x9b, 0x5b, 0x13, 0xec, 0x85, 0x84, 0x69,
	0x40, 0x97, 0xab, 0xc5, 0x46, 0xfd, 0xcf, 0x7f, 0xce, 0x64, 0x78, 0x02, 0x9e, 0x55, 0x72, 0x81,
	0x7c, 0x95, 0x01, 0xc9, 0xb2, 0x7a, 0x9c, 0x49, 0x96, 0x33, 0x20, 0xba, 0xb9, 0x13, 0x90, 0x51,
	0x94, 0xe5, 0x49, 0x03, 0xdd, 0x92, 0xa0, 0xfd, 0x41, 0xb0, 0x56, 0xce, 0xb3, 0xb0, 0xd8, 0xde,
	0xaa, 0xdb, 0x5e, 0x37, 0xf4, 0x88, 0xba, 0x0d, 0x0b, 0x23, 0xc2, 0x71, 0x1f, 0x73, 0xac, 0x01,
	0x1d, 0x54, 0x4b, 0x35, 0x64, 0xa4, 0x57, 0xb6, 0x47, 0x18, 0xc3, 0x0e, 0xd9, 0x23, 0x1c, 0xdf,
	0xba, 0xec, 0xde, 0xe1, 0xd5, 0x2f, 0x61, 0x1e, 0xdb, 0xb7, 0xa1, 0xb5, 0x8c, 0x0e, 0xaa, 0x6b,
	0xb5, 0x4f, 0x8c, 0x55, 0xcb, 0x36, 0x84, 0x58, 0x5d, 0x00, 0xbb, 0x8b, 0x01, 0xb5, 0x05, 0x8b,
	0xae, 0x6f, 0xf9, 0x01, 0x19, 0xb8, 0x47, 0x9a, 0x2c, 0x72, 0x56, 0x6f, 0x4e, 0x81, 0x94, 0x4c,
	0x73, 0x13, 0xa7, 0xc9, 0x9f, 0x00, 0x59, 0x39, 0x2e, 0x24, 0xe2, 0x14, 0x5c, 0xff, 0xb5, 0x98,
	0x54, 0xf7, 0x61, 0xd1, 0xa6, 0xe1, 0x98, 0x07, 0x2e, 0x61, 0x5a, 0x56, 0x97, 0x57, 0x98, 0x88,
	0xd7, 0x6e, 0x34, 0x05, 0x6c, 0xda, 0xa4, 0x7d, 0xd2, 0xd8, 0xb8, 0xfb, 0x91, 0xbe, 0x49, 0xb0,
	0xfe, 0xc7, 0xa4, 0x6e, 0x41, 0x88, 0x99, 0x35, 0x0e, 0x47, 0x3d, 0x12, 0x30, 0x2d, 0xa7, 0xcb,
	0xd5, 0xf7, 0x1a, 0xda, 0xd2, 0xde, 0xc3, 0x41, 0xcc, 0x3a, 0x31, 0x54, 0xed, 0x40, 0x85, 0x7b,
	0xcc, 0x1a, 0xb8, 0x63, 0x87, 0x04, 0x7e, 0xe0, 0x8e, 0x39, 0xd3, 0xf2, 0x22, 0xdd, 0xa7, 0xc9,
	0x64, 0xbf, 0x03, 0x7d, 0x25, 0xd3, 0x3a, 0xf7, 0xd8, 0x77, 0x89, 0x59, 0xf5, 0x15, 0xcc, 0xf9,
	0x98, 0x0f, 0x99, 0xf6, 0x4c, 0x90, 0xd4, 0x1e, 0xb1, 0xfb, 0x98, 0x40, 0xdd, 0x87, 0x1b, 0x07,
	0xf8, 0xa5, 0xf5, 0xc0, 0x5d, 0x61, 0x95, 0xbb, 0xcf, 0x56, 0xba, 0x53, 0x0f, 0xf0, 0xcb, 0xb7,
	0x69, 0x83, 0x95, 0x11, 0x5c, 0xdb, 0xf1, 0x68, 0x0f, 0x7b, 0x6f, 0x7c, 0x62, 0x8b, 0x4b, 0xbc,
	0x0f, 0x4b, 0xf1, 0xde, 0xad, 0x20, 0xf4, 0x88, 0x96, 0xd1, 0xe5, 0x6a, 0xa9, 0xf6, 0xe2, 0x1d,
	0x37, 0xe3, 0xf6, 0x1a, 0xfe, 0xdf, 0x4a, 0xbc, 0x25, 0x60, 0x37, 0x5b, 0x00, 0x4a, 0xa6, 0xd2,
	0x87, 0x6b, 0xcd, 0x80, 0x60, 0x4e, 0xee, 0xe4, 0xbe, 0x7e, 0x8c, 0x5c, 0x82, 0x78, 0xfb, 0xfd,
	0xf3, 0xaf, 0xee, 0x45, 0xa8, 0x10, 0xb8, 0xde, 0x25, 0xbe, 0x87, 0xed, 0xa7, 0x95, 0xc1, 0xb0,
	0xb4, 0x43, 0xf8, 0x53, 0x4a, 0x7c, 0xbe, 0x0d, 0x4b, 0x89, 0x7f, 0x9f, 0x5a, 0x80, 0xd9, 0x6f,
	0x5b, 0x9d, 0x9f, 0x14, 0x49, 0x2d, 0xc2, 0x5c, 0xbd, 0xdd, 0xfe, 0xfe, 0x47, 0x05, 0xa8, 0x0a,
	0x7c, 0xbe, 0xfb, 0xc6, 0x6a, 0xbe, 0xaa, 0xb7, 0xdb, 0xad, 0xce, 0x4e, 0x4b, 0xc9, 0x94, 0xb3,
	0x67, 0xa7, 0x40, 0x6a, 0xfc, 0x0a, 0x2e, 0x2e, 0x91, 0x34, 0xbb, 0x44, 0xd2, 0xf5, 0x25, 0x02,
	0xc7, 0x11, 0x02, 0x7f, 0x44, 0x08, 0xfc, 0x15, 0x21, 0x70, 0x11, 0x21, 0x30, 0x8b, 0x10, 0xf8,
	0x3b, 0x42, 0xe0, 0x2a, 0x42, 0xd2, 0x75, 0x84, 0xc0, 0x6f, 0x73, 0x24, 0x9d, 0xcd, 0x11, 0xb8,
	0x98, 0x23, 0x69, 0x36, 0x47, 0xd2, 0xcf, 0xbb, 0x0e, 0xf5, 0x7f, 0x71, 0x8c, 0x09, 0xf5, 0x38,
	0x09, 0x02, 0x6c, 0x84, 0xcc, 0x14, 0x87, 0x01, 0x0d, 0x46, 0x9b, 0x7e, 0x40, 0x27, 0x6e, 0x9f,
	0x04, 0x9b, 0xcb, 0xb6, 0xe9, 0xf7, 0x1c, 0x6a, 0x92, 0x23, 0xbe, 0x78, 0x2f, 0x53, 0x1f, 0x94,
	0x5e, 0x5e, 0x3c, 0x99, 0x5f, 0xfc, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x39, 0x07, 0x4b, 0x2a, 0x6f,
	0x06, 0x00, 0x00,
}

func (x L7AclAction) String() string {
	s, ok := L7AclAction_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *PathMatcherType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PathMatcherType)
	if !ok {
		that2, ok := that.(PathMatcherType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ExactValues) != len(that1.ExactValues) {
		return false
	}
	for i := range this.ExactValues {
		if this.ExactValues[i] != that1.ExactValues[i] {
			return false
		}
	}
	return true
}
func (this *L7AclRule) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*L7AclRule)
	if !ok {
		that2, ok := that.(L7AclRule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if this.Action != that1.Action {
		return false
	}
	if len(this.IpPrefix) != len(that1.IpPrefix) {
		return false
	}
	for i := range this.IpPrefix {
		if this.IpPrefix[i] != that1.IpPrefix[i] {
			return false
		}
	}
	if len(this.Countries) != len(that1.Countries) {
		return false
	}
	for i := range this.Countries {
		if this.Countries[i] != that1.Countries[i] {
			return false
		}
	}
	if len(this.AsNumbers) != len(that1.AsNumbers) {
		return false
	}
	for i := range this.AsNumbers {
		if this.AsNumbers[i] != that1.AsNumbers[i] {
			return false
		}
	}
	if len(this.TlsFingerprints) != len(that1.TlsFingerprints) {
		return false
	}
	for i := range this.TlsFingerprints {
		if this.TlsFingerprints[i] != that1.TlsFingerprints[i] {
			return false
		}
	}
	if len(this.Paths) != len(that1.Paths) {
		return false
	}
	for i := range this.Paths {
		if this.Paths[i] != that1.Paths[i] {
			return false
		}
	}
	if len(this.Ja4TlsFingerprints) != len(that1.Ja4TlsFingerprints) {
		return false
	}
	for i := range this.Ja4TlsFingerprints {
		if this.Ja4TlsFingerprints[i] != that1.Ja4TlsFingerprints[i] {
			return false
		}
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.L7AclRule) != len(that1.L7AclRule) {
		return false
	}
	for i := range this.L7AclRule {
		if !this.L7AclRule[i].Equal(that1.L7AclRule[i]) {
			return false
		}
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.L7AclRule) != len(that1.L7AclRule) {
		return false
	}
	for i := range this.L7AclRule {
		if !this.L7AclRule[i].Equal(that1.L7AclRule[i]) {
			return false
		}
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.L7AclRule) != len(that1.L7AclRule) {
		return false
	}
	for i := range this.L7AclRule {
		if !this.L7AclRule[i].Equal(that1.L7AclRule[i]) {
			return false
		}
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.L7AclRule) != len(that1.L7AclRule) {
		return false
	}
	for i := range this.L7AclRule {
		if !this.L7AclRule[i].Equal(that1.L7AclRule[i]) {
			return false
		}
	}
	return true
}
func (this *PathMatcherType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&l7_acl.PathMatcherType{")
	s = append(s, "ExactValues: "+fmt.Sprintf("%#v", this.ExactValues)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *L7AclRule) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&l7_acl.L7AclRule{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	s = append(s, "IpPrefix: "+fmt.Sprintf("%#v", this.IpPrefix)+",\n")
	s = append(s, "Countries: "+fmt.Sprintf("%#v", this.Countries)+",\n")
	s = append(s, "AsNumbers: "+fmt.Sprintf("%#v", this.AsNumbers)+",\n")
	s = append(s, "TlsFingerprints: "+fmt.Sprintf("%#v", this.TlsFingerprints)+",\n")
	s = append(s, "Paths: "+fmt.Sprintf("%#v", this.Paths)+",\n")
	s = append(s, "Ja4TlsFingerprints: "+fmt.Sprintf("%#v", this.Ja4TlsFingerprints)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&l7_acl.GlobalSpecType{")
	if this.L7AclRule != nil {
		s = append(s, "L7AclRule: "+fmt.Sprintf("%#v", this.L7AclRule)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&l7_acl.CreateSpecType{")
	if this.L7AclRule != nil {
		s = append(s, "L7AclRule: "+fmt.Sprintf("%#v", this.L7AclRule)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&l7_acl.ReplaceSpecType{")
	if this.L7AclRule != nil {
		s = append(s, "L7AclRule: "+fmt.Sprintf("%#v", this.L7AclRule)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&l7_acl.GetSpecType{")
	if this.L7AclRule != nil {
		s = append(s, "L7AclRule: "+fmt.Sprintf("%#v", this.L7AclRule)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *PathMatcherType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PathMatcherType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PathMatcherType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExactValues) > 0 {
		for iNdEx := len(m.ExactValues) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ExactValues[iNdEx])
			copy(dAtA[i:], m.ExactValues[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.ExactValues[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *L7AclRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *L7AclRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *L7AclRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ja4TlsFingerprints) > 0 {
		for iNdEx := len(m.Ja4TlsFingerprints) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Ja4TlsFingerprints[iNdEx])
			copy(dAtA[i:], m.Ja4TlsFingerprints[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Ja4TlsFingerprints[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Paths) > 0 {
		for iNdEx := len(m.Paths) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Paths[iNdEx])
			copy(dAtA[i:], m.Paths[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Paths[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.TlsFingerprints) > 0 {
		for iNdEx := len(m.TlsFingerprints) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TlsFingerprints[iNdEx])
			copy(dAtA[i:], m.TlsFingerprints[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.TlsFingerprints[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.AsNumbers) > 0 {
		dAtA2 := make([]byte, len(m.AsNumbers)*10)
		var j1 int
		for _, num := range m.AsNumbers {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintTypes(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Countries) > 0 {
		dAtA4 := make([]byte, len(m.Countries)*10)
		var j3 int
		for _, num := range m.Countries {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintTypes(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x22
	}
	if len(m.IpPrefix) > 0 {
		for iNdEx := len(m.IpPrefix) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.IpPrefix[iNdEx])
			copy(dAtA[i:], m.IpPrefix[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.IpPrefix[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Action != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Action))
		i--
		dAtA[i] = 0x10
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.L7AclRule) > 0 {
		for iNdEx := len(m.L7AclRule) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.L7AclRule[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.L7AclRule) > 0 {
		for iNdEx := len(m.L7AclRule) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.L7AclRule[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.L7AclRule) > 0 {
		for iNdEx := len(m.L7AclRule) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.L7AclRule[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.L7AclRule) > 0 {
		for iNdEx := len(m.L7AclRule) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.L7AclRule[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PathMatcherType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ExactValues) > 0 {
		for _, s := range m.ExactValues {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *L7AclRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Action != 0 {
		n += 1 + sovTypes(uint64(m.Action))
	}
	if len(m.IpPrefix) > 0 {
		for _, s := range m.IpPrefix {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Countries) > 0 {
		l = 0
		for _, e := range m.Countries {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	if len(m.AsNumbers) > 0 {
		l = 0
		for _, e := range m.AsNumbers {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	if len(m.TlsFingerprints) > 0 {
		for _, s := range m.TlsFingerprints {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Paths) > 0 {
		for _, s := range m.Paths {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Ja4TlsFingerprints) > 0 {
		for _, s := range m.Ja4TlsFingerprints {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.L7AclRule) > 0 {
		for _, e := range m.L7AclRule {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.L7AclRule) > 0 {
		for _, e := range m.L7AclRule {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.L7AclRule) > 0 {
		for _, e := range m.L7AclRule {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.L7AclRule) > 0 {
		for _, e := range m.L7AclRule {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *PathMatcherType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PathMatcherType{`,
		`ExactValues:` + fmt.Sprintf("%v", this.ExactValues) + `,`,
		`}`,
	}, "")
	return s
}
func (this *L7AclRule) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&L7AclRule{`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "MessageMetaType", "schema.MessageMetaType", 1) + `,`,
		`Action:` + fmt.Sprintf("%v", this.Action) + `,`,
		`IpPrefix:` + fmt.Sprintf("%v", this.IpPrefix) + `,`,
		`Countries:` + fmt.Sprintf("%v", this.Countries) + `,`,
		`AsNumbers:` + fmt.Sprintf("%v", this.AsNumbers) + `,`,
		`TlsFingerprints:` + fmt.Sprintf("%v", this.TlsFingerprints) + `,`,
		`Paths:` + fmt.Sprintf("%v", this.Paths) + `,`,
		`Ja4TlsFingerprints:` + fmt.Sprintf("%v", this.Ja4TlsFingerprints) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForL7AclRule := "[]*L7AclRule{"
	for _, f := range this.L7AclRule {
		repeatedStringForL7AclRule += strings.Replace(f.String(), "L7AclRule", "L7AclRule", 1) + ","
	}
	repeatedStringForL7AclRule += "}"
	s := strings.Join([]string{`&GlobalSpecType{`,
		`L7AclRule:` + repeatedStringForL7AclRule + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForL7AclRule := "[]*L7AclRule{"
	for _, f := range this.L7AclRule {
		repeatedStringForL7AclRule += strings.Replace(f.String(), "L7AclRule", "L7AclRule", 1) + ","
	}
	repeatedStringForL7AclRule += "}"
	s := strings.Join([]string{`&CreateSpecType{`,
		`L7AclRule:` + repeatedStringForL7AclRule + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForL7AclRule := "[]*L7AclRule{"
	for _, f := range this.L7AclRule {
		repeatedStringForL7AclRule += strings.Replace(f.String(), "L7AclRule", "L7AclRule", 1) + ","
	}
	repeatedStringForL7AclRule += "}"
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`L7AclRule:` + repeatedStringForL7AclRule + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForL7AclRule := "[]*L7AclRule{"
	for _, f := range this.L7AclRule {
		repeatedStringForL7AclRule += strings.Replace(f.String(), "L7AclRule", "L7AclRule", 1) + ","
	}
	repeatedStringForL7AclRule += "}"
	s := strings.Join([]string{`&GetSpecType{`,
		`L7AclRule:` + repeatedStringForL7AclRule + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *PathMatcherType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PathMatcherType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PathMatcherType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExactValues", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExactValues = append(m.ExactValues, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *L7AclRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: L7AclRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: L7AclRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &schema.MessageMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= L7AclAction(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpPrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpPrefix = append(m.IpPrefix, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v policy.CountryCode
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= policy.CountryCode(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Countries = append(m.Countries, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Countries) == 0 {
					m.Countries = make([]policy.CountryCode, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v policy.CountryCode
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= policy.CountryCode(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Countries = append(m.Countries, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Countries", wireType)
			}
		case 5:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AsNumbers = append(m.AsNumbers, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.AsNumbers) == 0 {
					m.AsNumbers = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AsNumbers = append(m.AsNumbers, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AsNumbers", wireType)
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsFingerprints", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TlsFingerprints = append(m.TlsFingerprints, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paths", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Paths = append(m.Paths, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ja4TlsFingerprints", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ja4TlsFingerprints = append(m.Ja4TlsFingerprints, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L7AclRule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.L7AclRule = append(m.L7AclRule, &L7AclRule{})
			if err := m.L7AclRule[len(m.L7AclRule)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L7AclRule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.L7AclRule = append(m.L7AclRule, &L7AclRule{})
			if err := m.L7AclRule[len(m.L7AclRule)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L7AclRule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.L7AclRule = append(m.L7AclRule, &L7AclRule{})
			if err := m.L7AclRule[len(m.L7AclRule)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L7AclRule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.L7AclRule = append(m.L7AclRule, &L7AclRule{})
			if err := m.L7AclRule[len(m.L7AclRule)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package global_log_receiver

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *AWSCloudwatchConfig) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AWSCloudwatchConfig) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AWSCloudwatchConfig) DeepCopy() *AWSCloudwatchConfig {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AWSCloudwatchConfig{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AWSCloudwatchConfig) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AWSCloudwatchConfig) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AWSCloudwatchConfigValidator().Validate(ctx, m, opts...)
}

func (m *AWSCloudwatchConfig) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetAwsCredDRefInfo()

}

func (m *AWSCloudwatchConfig) GetAwsCredDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetAwsCred()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("cloud_credentials.Object")
	dri := db.DRefInfo{
		RefdType:   "cloud_credentials.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "aws_cred",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetAwsCredDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *AWSCloudwatchConfig) GetAwsCredDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "cloud_credentials.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: cloud_credentials")
	}

	vref := m.GetAwsCred()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "cloud_credentials.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

type ValidateAWSCloudwatchConfig struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAWSCloudwatchConfig) GroupNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for group_name")
	}

	return validatorFn, nil
}

func (v *ValidateAWSCloudwatchConfig) StreamNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for stream_name")
	}

	return validatorFn, nil
}

func (v *ValidateAWSCloudwatchConfig) AwsCredValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for aws_cred")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAWSCloudwatchConfig) AwsRegionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for aws_region")
	}

	return validatorFn, nil
}

func (v *ValidateAWSCloudwatchConfig) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AWSCloudwatchConfig)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AWSCloudwatchConfig got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["aws_cred"]; exists {

		vOpts := append(opts, db.WithValidateField("aws_cred"))
		if err := fv(ctx, m.GetAwsCred(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["aws_region"]; exists {

		vOpts := append(opts, db.WithValidateField("aws_region"))
		if err := fv(ctx, m.GetAwsRegion(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["batch"]; exists {

		vOpts := append(opts, db.WithValidateField("batch"))
		if err := fv(ctx, m.GetBatch(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["compression"]; exists {

		vOpts := append(opts, db.WithValidateField("compression"))
		if err := fv(ctx, m.GetCompression(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["group_name"]; exists {

		vOpts := append(opts, db.WithValidateField("group_name"))
		if err := fv(ctx, m.GetGroupName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["stream_name"]; exists {

		vOpts := append(opts, db.WithValidateField("stream_name"))
		if err := fv(ctx, m.GetStreamName(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAWSCloudwatchConfigValidator = func() *ValidateAWSCloudwatchConfig {
	v := &ValidateAWSCloudwatchConfig{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhGroupName := v.GroupNameValidationRuleHandler
	rulesGroupName := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "512",
		"ves.io.schema.rules.string.min_len":   "3",
		"ves.io.schema.rules.string.pattern":   "^[\\.\\-_/#A-Za-z0-9]+$",
	}
	vFn, err = vrhGroupName(rulesGroupName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSCloudwatchConfig.group_name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["group_name"] = vFn

	vrhStreamName := v.StreamNameValidationRuleHandler
	rulesStreamName := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "512",
		"ves.io.schema.rules.string.min_len":   "3",
		"ves.io.schema.rules.string.pattern":   "^[^:*]*$",
	}
	vFn, err = vrhStreamName(rulesStreamName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSCloudwatchConfig.stream_name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["stream_name"] = vFn

	vrhAwsCred := v.AwsCredValidationRuleHandler
	rulesAwsCred := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhAwsCred(rulesAwsCred)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSCloudwatchConfig.aws_cred: %s", err)
		panic(errMsg)
	}
	v.FldValidators["aws_cred"] = vFn

	vrhAwsRegion := v.AwsRegionValidationRuleHandler
	rulesAwsRegion := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.in":        "[\"ap-northeast-1\",\"ap-southeast-1\",\"eu-central-1\",\"eu-west-1\",\"eu-west-3\",\"sa-east-1\",\"us-east-1\",\"us-east-2\",\"us-west-2\",\"ca-central-1\",\"af-south-1\",\"ap-east-1\",\"ap-south-1\",\"ap-northeast-2\",\"ap-southeast-2\",\"eu-south-1\",\"eu-north-1\",\"eu-west-2\",\"me-south-1\",\"us-west-1\",\"ap-southeast-3\"]",
	}
	vFn, err = vrhAwsRegion(rulesAwsRegion)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSCloudwatchConfig.aws_region: %s", err)
		panic(errMsg)
	}
	v.FldValidators["aws_region"] = vFn

	v.FldValidators["compression"] = CompressionTypeValidator().Validate

	v.FldValidators["batch"] = BatchOptionTypeValidator().Validate

	return v
}()

func AWSCloudwatchConfigValidator() db.Validator {
	return DefaultAWSCloudwatchConfigValidator
}

// augmented methods on protoc/std generated struct

func (m *AuthToken) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AuthToken) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *AuthToken) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetToken().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting AuthToken.token")
	}

	return nil
}

func (m *AuthToken) DeepCopy() *AuthToken {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AuthToken{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AuthToken) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AuthToken) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AuthTokenValidator().Validate(ctx, m, opts...)
}

type ValidateAuthToken struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAuthToken) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AuthToken)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AuthToken got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["token"]; exists {

		vOpts := append(opts, db.WithValidateField("token"))
		if err := fv(ctx, m.GetToken(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAuthTokenValidator = func() *ValidateAuthToken {
	v := &ValidateAuthToken{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["token"] = ves_io_schema.SecretTypeValidator().Validate

	return v
}()

func AuthTokenValidator() db.Validator {
	return DefaultAuthTokenValidator
}

// augmented methods on protoc/std generated struct

func (m *AzureBlobConfig) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AzureBlobConfig) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *AzureBlobConfig) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetConnectionString().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting AzureBlobConfig.connection_string")
	}

	return nil
}

func (m *AzureBlobConfig) DeepCopy() *AzureBlobConfig {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AzureBlobConfig{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AzureBlobConfig) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AzureBlobConfig) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AzureBlobConfigValidator().Validate(ctx, m, opts...)
}

type ValidateAzureBlobConfig struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAzureBlobConfig) ConnectionStringValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for connection_string")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.SecretTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAzureBlobConfig) ContainerNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for container_name")
	}

	return validatorFn, nil
}

func (v *ValidateAzureBlobConfig) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AzureBlobConfig)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AzureBlobConfig got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["batch"]; exists {

		vOpts := append(opts, db.WithValidateField("batch"))
		if err := fv(ctx, m.GetBatch(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["compression"]; exists {

		vOpts := append(opts, db.WithValidateField("compression"))
		if err := fv(ctx, m.GetCompression(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["connection_string"]; exists {

		vOpts := append(opts, db.WithValidateField("connection_string"))
		if err := fv(ctx, m.GetConnectionString(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["container_name"]; exists {

		vOpts := append(opts, db.WithValidateField("container_name"))
		if err := fv(ctx, m.GetContainerName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["filename_options"]; exists {

		vOpts := append(opts, db.WithValidateField("filename_options"))
		if err := fv(ctx, m.GetFilenameOptions(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAzureBlobConfigValidator = func() *ValidateAzureBlobConfig {
	v := &ValidateAzureBlobConfig{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhConnectionString := v.ConnectionStringValidationRuleHandler
	rulesConnectionString := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhConnectionString(rulesConnectionString)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureBlobConfig.connection_string: %s", err)
		panic(errMsg)
	}
	v.FldValidators["connection_string"] = vFn

	vrhContainerName := v.ContainerNameValidationRuleHandler
	rulesContainerName := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "63",
		"ves.io.schema.rules.string.min_len":   "3",
		"ves.io.schema.rules.string.pattern":   "^[A-Za-z0-9][A-Za-z0-9-]+[A-Za-z0-9]$",
	}
	vFn, err = vrhContainerName(rulesContainerName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureBlobConfig.container_name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["container_name"] = vFn

	v.FldValidators["compression"] = CompressionTypeValidator().Validate

	v.FldValidators["batch"] = BatchOptionTypeValidator().Validate

	v.FldValidators["filename_options"] = FilenameOptionsTypeValidator().Validate

	return v
}()

func AzureBlobConfigValidator() db.Validator {
	return DefaultAzureBlobConfigValidator
}

// augmented methods on protoc/std generated struct

func (m *AzureEventHubsConfig) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AzureEventHubsConfig) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *AzureEventHubsConfig) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetConnectionString().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting AzureEventHubsConfig.connection_string")
	}

	return nil
}

func (m *AzureEventHubsConfig) DeepCopy() *AzureEventHubsConfig {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AzureEventHubsConfig{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AzureEventHubsConfig) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AzureEventHubsConfig) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AzureEventHubsConfigValidator().Validate(ctx, m, opts...)
}

type ValidateAzureEventHubsConfig struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAzureEventHubsConfig) ConnectionStringValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for connection_string")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.SecretTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAzureEventHubsConfig) NamespaceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for namespace")
	}

	return validatorFn, nil
}

func (v *ValidateAzureEventHubsConfig) InstanceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for instance")
	}

	return validatorFn, nil
}

func (v *ValidateAzureEventHubsConfig) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AzureEventHubsConfig)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AzureEventHubsConfig got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["connection_string"]; exists {

		vOpts := append(opts, db.WithValidateField("connection_string"))
		if err := fv(ctx, m.GetConnectionString(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["instance"]; exists {

		vOpts := append(opts, db.WithValidateField("instance"))
		if err := fv(ctx, m.GetInstance(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAzureEventHubsConfigValidator = func() *ValidateAzureEventHubsConfig {
	v := &ValidateAzureEventHubsConfig{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhConnectionString := v.ConnectionStringValidationRuleHandler
	rulesConnectionString := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhConnectionString(rulesConnectionString)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureEventHubsConfig.connection_string: %s", err)
		panic(errMsg)
	}
	v.FldValidators["connection_string"] = vFn

	vrhNamespace := v.NamespaceValidationRuleHandler
	rulesNamespace := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "63",
		"ves.io.schema.rules.string.min_len":   "3",
		"ves.io.schema.rules.string.pattern":   "^[A-Za-z0-9][A-Za-z0-9-]+[A-Za-z0-9]$",
	}
	vFn, err = vrhNamespace(rulesNamespace)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureEventHubsConfig.namespace: %s", err)
		panic(errMsg)
	}
	v.FldValidators["namespace"] = vFn

	vrhInstance := v.InstanceValidationRuleHandler
	rulesInstance := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "63",
		"ves.io.schema.rules.string.min_len":   "3",
		"ves.io.schema.rules.string.pattern":   "^[A-Za-z0-9][A-Za-z0-9-]+[A-Za-z0-9]$",
	}
	vFn, err = vrhInstance(rulesInstance)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureEventHubsConfig.instance: %s", err)
		panic(errMsg)
	}
	v.FldValidators["instance"] = vFn

	return v
}()

func AzureEventHubsConfigValidator() db.Validator {
	return DefaultAzureEventHubsConfigValidator
}

// augmented methods on protoc/std generated struct

func (m *BatchOptionType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *BatchOptionType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *BatchOptionType) DeepCopy() *BatchOptionType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &BatchOptionType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *BatchOptionType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *BatchOptionType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return BatchOptionTypeValidator().Validate(ctx, m, opts...)
}

type ValidateBatchOptionType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateBatchOptionType) BatchBytesMaxBytesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_MaxBytes, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for max_bytes")
	}
	return oValidatorFn_MaxBytes, nil
}

func (v *ValidateBatchOptionType) BatchEventsMaxEventsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_MaxEvents, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for max_events")
	}
	return oValidatorFn_MaxEvents, nil
}

func (v *ValidateBatchOptionType) BatchTimeoutTimeoutSecondsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_TimeoutSeconds, err := db.NewUint64ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for timeout_seconds")
	}
	return oValidatorFn_TimeoutSeconds, nil
}

func (v *ValidateBatchOptionType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*BatchOptionType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *BatchOptionType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	switch m.GetBatchBytes().(type) {
	case *BatchOptionType_MaxBytesDisabled:
		if fv, exists := v.FldValidators["batch_bytes.max_bytes_disabled"]; exists {
			val := m.GetBatchBytes().(*BatchOptionType_MaxBytesDisabled).MaxBytesDisabled
			vOpts := append(opts,
				db.WithValidateField("batch_bytes"),
				db.WithValidateField("max_bytes_disabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *BatchOptionType_MaxBytes:
		if fv, exists := v.FldValidators["batch_bytes.max_bytes"]; exists {
			val := m.GetBatchBytes().(*BatchOptionType_MaxBytes).MaxBytes
			vOpts := append(opts,
				db.WithValidateField("batch_bytes"),
				db.WithValidateField("max_bytes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetBatchEvents().(type) {
	case *BatchOptionType_MaxEventsDisabled:
		if fv, exists := v.FldValidators["batch_events.max_events_disabled"]; exists {
			val := m.GetBatchEvents().(*BatchOptionType_MaxEventsDisabled).MaxEventsDisabled
			vOpts := append(opts,
				db.WithValidateField("batch_events"),
				db.WithValidateField("max_events_disabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *BatchOptionType_MaxEvents:
		if fv, exists := v.FldValidators["batch_events.max_events"]; exists {
			val := m.GetBatchEvents().(*BatchOptionType_MaxEvents).MaxEvents
			vOpts := append(opts,
				db.WithValidateField("batch_events"),
				db.WithValidateField("max_events"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetBatchTimeout().(type) {
	case *BatchOptionType_TimeoutSecondsDefault:
		if fv, exists := v.FldValidators["batch_timeout.timeout_seconds_default"]; exists {
			val := m.GetBatchTimeout().(*BatchOptionType_TimeoutSecondsDefault).TimeoutSecondsDefault
			vOpts := append(opts,
				db.WithValidateField("batch_timeout"),
				db.WithValidateField("timeout_seconds_default"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *BatchOptionType_TimeoutSeconds:
		if fv, exists := v.FldValidators["batch_timeout.timeout_seconds"]; exists {
			val := m.GetBatchTimeout().(*BatchOptionType_TimeoutSeconds).TimeoutSeconds
			vOpts := append(opts,
				db.WithValidateField("batch_timeout"),
				db.WithValidateField("timeout_seconds"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultBatchOptionTypeValidator = func() *ValidateBatchOptionType {
	v := &ValidateBatchOptionType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhBatchBytesMaxBytes := v.BatchBytesMaxBytesValidationRuleHandler
	rulesBatchBytesMaxBytes := map[string]string{
		"ves.io.schema.rules.uint32.gte": "4096",
		"ves.io.schema.rules.uint32.lte": "10485760",
	}
	vFnMap["batch_bytes.max_bytes"], err = vrhBatchBytesMaxBytes(rulesBatchBytesMaxBytes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field BatchOptionType.batch_bytes_max_bytes: %s", err)
		panic(errMsg)
	}

	v.FldValidators["batch_bytes.max_bytes"] = vFnMap["batch_bytes.max_bytes"]

	vrhBatchEventsMaxEvents := v.BatchEventsMaxEventsValidationRuleHandler
	rulesBatchEventsMaxEvents := map[string]string{
		"ves.io.schema.rules.uint32.gte": "32",
		"ves.io.schema.rules.uint32.lte": "2000",
	}
	vFnMap["batch_events.max_events"], err = vrhBatchEventsMaxEvents(rulesBatchEventsMaxEvents)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field BatchOptionType.batch_events_max_events: %s", err)
		panic(errMsg)
	}

	v.FldValidators["batch_events.max_events"] = vFnMap["batch_events.max_events"]

	vrhBatchTimeoutTimeoutSeconds := v.BatchTimeoutTimeoutSecondsValidationRuleHandler
	rulesBatchTimeoutTimeoutSeconds := map[string]string{
		"ves.io.schema.rules.uint64.gte": "300",
		"ves.io.schema.rules.uint64.lte": "3600",
	}
	vFnMap["batch_timeout.timeout_seconds"], err = vrhBatchTimeoutTimeoutSeconds(rulesBatchTimeoutTimeoutSeconds)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field BatchOptionType.batch_timeout_timeout_seconds: %s", err)
		panic(errMsg)
	}

	v.FldValidators["batch_timeout.timeout_seconds"] = vFnMap["batch_timeout.timeout_seconds"]

	return v
}()

func BatchOptionTypeValidator() db.Validator {
	return DefaultBatchOptionTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *CompressionType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CompressionType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CompressionType) DeepCopy() *CompressionType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CompressionType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CompressionType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CompressionType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CompressionTypeValidator().Validate(ctx, m, opts...)
}

type ValidateCompressionType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCompressionType) CompressionChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for compression_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCompressionType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CompressionType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CompressionType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["compression_choice"]; exists {
		val := m.GetCompressionChoice()
		vOpts := append(opts,
			db.WithValidateField("compression_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetCompressionChoice().(type) {
	case *CompressionType_CompressionDefault:
		if fv, exists := v.FldValidators["compression_choice.compression_default"]; exists {
			val := m.GetCompressionChoice().(*CompressionType_CompressionDefault).CompressionDefault
			vOpts := append(opts,
				db.WithValidateField("compression_choice"),
				db.WithValidateField("compression_default"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CompressionType_CompressionGzip:
		if fv, exists := v.FldValidators["compression_choice.compression_gzip"]; exists {
			val := m.GetCompressionChoice().(*CompressionType_CompressionGzip).CompressionGzip
			vOpts := append(opts,
				db.WithValidateField("compression_choice"),
				db.WithValidateField("compression_gzip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CompressionType_CompressionNone:
		if fv, exists := v.FldValidators["compression_choice.compression_none"]; exists {
			val := m.GetCompressionChoice().(*CompressionType_CompressionNone).CompressionNone
			vOpts := append(opts,
				db.WithValidateField("compression_choice"),
				db.WithValidateField("compression_none"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCompressionTypeValidator = func() *ValidateCompressionType {
	v := &ValidateCompressionType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhCompressionChoice := v.CompressionChoiceValidationRuleHandler
	rulesCompressionChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhCompressionChoice(rulesCompressionChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CompressionType.compression_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["compression_choice"] = vFn

	return v
}()

func CompressionTypeValidator() db.Validator {
	return DefaultCompressionTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *CreateSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetHttpReceiver().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CreateSpecType.http_receiver")
	}

	if err := m.GetDatadogReceiver().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CreateSpecType.datadog_receiver")
	}

	if err := m.GetSplunkReceiver().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CreateSpecType.splunk_receiver")
	}

	if err := m.GetElasticReceiver().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CreateSpecType.elastic_receiver")
	}

	if err := m.GetAzureReceiver().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CreateSpecType.azure_receiver")
	}

	if err := m.GetAzureEventHubsReceiver().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CreateSpecType.azure_event_hubs_receiver")
	}

	if err := m.GetKafkaReceiver().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CreateSpecType.kafka_receiver")
	}

	if err := m.GetNewRelicReceiver().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CreateSpecType.new_relic_receiver")
	}

	if err := m.GetSumoLogicReceiver().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CreateSpecType.sumo_logic_receiver")
	}

	if err := m.GetQradarReceiver().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CreateSpecType.qradar_receiver")
	}

	return nil
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *CreateSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetReceiverDRefInfo()

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetReceiverDRefInfo() ([]db.DRefInfo, error) {
	if m.GetReceiver() == nil {
		return nil, nil
	}
	switch m.GetReceiver().(type) {
	case *CreateSpecType_S3Receiver:

		drInfos, err := m.GetS3Receiver().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetS3Receiver().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "s3_receiver." + dri.DRField
		}
		return drInfos, err

	case *CreateSpecType_HttpReceiver:

		return nil, nil

	case *CreateSpecType_DatadogReceiver:

		return nil, nil

	case *CreateSpecType_SplunkReceiver:

		return nil, nil

	case *CreateSpecType_ElasticReceiver:

		drInfos, err := m.GetElasticReceiver().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetElasticReceiver().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "elastic_receiver." + dri.DRField
		}
		return drInfos, err

	case *CreateSpecType_AzureReceiver:

		return nil, nil

	case *CreateSpecType_AzureEventHubsReceiver:

		return nil, nil

	case *CreateSpecType_AwsCloudWatchReceiver:

		drInfos, err := m.GetAwsCloudWatchReceiver().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetAwsCloudWatchReceiver().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "aws_cloud_watch_receiver." + dri.DRField
		}
		return drInfos, err

	case *CreateSpecType_KafkaReceiver:

		return nil, nil

	case *CreateSpecType_NewRelicReceiver:

		return nil, nil

	case *CreateSpecType_SumoLogicReceiver:

		return nil, nil

	case *CreateSpecType_QradarReceiver:

		return nil, nil

	case *CreateSpecType_GcpBucketReceiver:

		drInfos, err := m.GetGcpBucketReceiver().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetGcpBucketReceiver().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "gcp_bucket_receiver." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) FilterChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for filter_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) LogTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for log_type")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) ReceiverValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for receiver")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["filter_choice"]; exists {
		val := m.GetFilterChoice()
		vOpts := append(opts,
			db.WithValidateField("filter_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetFilterChoice().(type) {
	case *CreateSpecType_NsCurrent:
		if fv, exists := v.FldValidators["filter_choice.ns_current"]; exists {
			val := m.GetFilterChoice().(*CreateSpecType_NsCurrent).NsCurrent
			vOpts := append(opts,
				db.WithValidateField("filter_choice"),
				db.WithValidateField("ns_current"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_NsAll:
		if fv, exists := v.FldValidators["filter_choice.ns_all"]; exists {
			val := m.GetFilterChoice().(*CreateSpecType_NsAll).NsAll
			vOpts := append(opts,
				db.WithValidateField("filter_choice"),
				db.WithValidateField("ns_all"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_NsList:
		if fv, exists := v.FldValidators["filter_choice.ns_list"]; exists {
			val := m.GetFilterChoice().(*CreateSpecType_NsList).NsList
			vOpts := append(opts,
				db.WithValidateField("filter_choice"),
				db.WithValidateField("ns_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_NsSystem:
		if fv, exists := v.FldValidators["filter_choice.ns_system"]; exists {
			val := m.GetFilterChoice().(*CreateSpecType_NsSystem).NsSystem
			vOpts := append(opts,
				db.WithValidateField("filter_choice"),
				db.WithValidateField("ns_system"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["log_type"]; exists {
		val := m.GetLogType()
		vOpts := append(opts,
			db.WithValidateField("log_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetLogType().(type) {
	case *CreateSpecType_RequestLogs:
		if fv, exists := v.FldValidators["log_type.request_logs"]; exists {
			val := m.GetLogType().(*CreateSpecType_RequestLogs).RequestLogs
			vOpts := append(opts,
				db.WithValidateField("log_type"),
				db.WithValidateField("request_logs"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_SecurityEvents:
		if fv, exists := v.FldValidators["log_type.security_events"]; exists {
			val := m.GetLogType().(*CreateSpecType_SecurityEvents).SecurityEvents
			vOpts := append(opts,
				db.WithValidateField("log_type"),
				db.WithValidateField("security_events"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_AuditLogs:
		if fv, exists := v.FldValidators["log_type.audit_logs"]; exists {
			val := m.GetLogType().(*CreateSpecType_AuditLogs).AuditLogs
			vOpts := append(opts,
				db.WithValidateField("log_type"),
				db.WithValidateField("audit_logs"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_DnsLogs:
		if fv, exists := v.FldValidators["log_type.dns_logs"]; exists {
			val := m.GetLogType().(*CreateSpecType_DnsLogs).DnsLogs
			vOpts := append(opts,
				db.WithValidateField("log_type"),
				db.WithValidateField("dns_logs"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["receiver"]; exists {
		val := m.GetReceiver()
		vOpts := append(opts,
			db.WithValidateField("receiver"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetReceiver().(type) {
	case *CreateSpecType_S3Receiver:
		if fv, exists := v.FldValidators["receiver.s3_receiver"]; exists {
			val := m.GetReceiver().(*CreateSpecType_S3Receiver).S3Receiver
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("s3_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_HttpReceiver:
		if fv, exists := v.FldValidators["receiver.http_receiver"]; exists {
			val := m.GetReceiver().(*CreateSpecType_HttpReceiver).HttpReceiver
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("http_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_DatadogReceiver:
		if fv, exists := v.FldValidators["receiver.datadog_receiver"]; exists {
			val := m.GetReceiver().(*CreateSpecType_DatadogReceiver).DatadogReceiver
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("datadog_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_SplunkReceiver:
		if fv, exists := v.FldValidators["receiver.splunk_receiver"]; exists {
			val := m.GetReceiver().(*CreateSpecType_SplunkReceiver).SplunkReceiver
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("splunk_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_ElasticReceiver:
		if fv, exists := v.FldValidators["receiver.elastic_receiver"]; exists {
			val := m.GetReceiver().(*CreateSpecType_ElasticReceiver).ElasticReceiver
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("elastic_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_AzureReceiver:
		if fv, exists := v.FldValidators["receiver.azure_receiver"]; exists {
			val := m.GetReceiver().(*CreateSpecType_AzureReceiver).AzureReceiver
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("azure_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_AzureEventHubsReceiver:
		if fv, exists := v.FldValidators["receiver.azure_event_hubs_receiver"]; exists {
			val := m.GetReceiver().(*CreateSpecType_AzureEventHubsReceiver).AzureEventHubsReceiver
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("azure_event_hubs_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_AwsCloudWatchReceiver:
		if fv, exists := v.FldValidators["receiver.aws_cloud_watch_receiver"]; exists {
			val := m.GetReceiver().(*CreateSpecType_AwsCloudWatchReceiver).AwsCloudWatchReceiver
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("aws_cloud_watch_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_KafkaReceiver:
		if fv, exists := v.FldValidators["receiver.kafka_receiver"]; exists {
			val := m.GetReceiver().(*CreateSpecType_KafkaReceiver).KafkaReceiver
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("kafka_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_NewRelicReceiver:
		if fv, exists := v.FldValidators["receiver.new_relic_receiver"]; exists {
			val := m.GetReceiver().(*CreateSpecType_NewRelicReceiver).NewRelicReceiver
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("new_relic_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_SumoLogicReceiver:
		if fv, exists := v.FldValidators["receiver.sumo_logic_receiver"]; exists {
			val := m.GetReceiver().(*CreateSpecType_SumoLogicReceiver).SumoLogicReceiver
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("sumo_logic_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_QradarReceiver:
		if fv, exists := v.FldValidators["receiver.qradar_receiver"]; exists {
			val := m.GetReceiver().(*CreateSpecType_QradarReceiver).QradarReceiver
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("qradar_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_GcpBucketReceiver:
		if fv, exists := v.FldValidators["receiver.gcp_bucket_receiver"]; exists {
			val := m.GetReceiver().(*CreateSpecType_GcpBucketReceiver).GcpBucketReceiver
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("gcp_bucket_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhFilterChoice := v.FilterChoiceValidationRuleHandler
	rulesFilterChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhFilterChoice(rulesFilterChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.filter_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["filter_choice"] = vFn

	vrhLogType := v.LogTypeValidationRuleHandler
	rulesLogType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhLogType(rulesLogType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.log_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["log_type"] = vFn

	vrhReceiver := v.ReceiverValidationRuleHandler
	rulesReceiver := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhReceiver(rulesReceiver)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.receiver: %s", err)
		panic(errMsg)
	}
	v.FldValidators["receiver"] = vFn

	v.FldValidators["filter_choice.ns_list"] = NSListValidator().Validate

	v.FldValidators["receiver.s3_receiver"] = S3ConfigValidator().Validate
	v.FldValidators["receiver.http_receiver"] = HTTPConfigValidator().Validate
	v.FldValidators["receiver.datadog_receiver"] = DatadogConfigValidator().Validate
	v.FldValidators["receiver.splunk_receiver"] = SplunkConfigValidator().Validate
	v.FldValidators["receiver.elastic_receiver"] = ElasticConfigValidator().Validate
	v.FldValidators["receiver.azure_receiver"] = AzureBlobConfigValidator().Validate
	v.FldValidators["receiver.azure_event_hubs_receiver"] = AzureEventHubsConfigValidator().Validate
	v.FldValidators["receiver.aws_cloud_watch_receiver"] = AWSCloudwatchConfigValidator().Validate
	v.FldValidators["receiver.kafka_receiver"] = KafkaConfigValidator().Validate
	v.FldValidators["receiver.new_relic_receiver"] = NewRelicConfigValidator().Validate
	v.FldValidators["receiver.sumo_logic_receiver"] = SumoLogicConfigValidator().Validate
	v.FldValidators["receiver.qradar_receiver"] = QRadarConfigValidator().Validate
	v.FldValidators["receiver.gcp_bucket_receiver"] = GCPBucketConfigValidator().Validate

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *DatadogConfig) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DatadogConfig) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *DatadogConfig) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetDatadogApiKey().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting DatadogConfig.datadog_api_key")
	}

	if err := m.GetUseTls().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting DatadogConfig.use_tls")
	}

	return nil
}

func (m *DatadogConfig) DeepCopy() *DatadogConfig {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DatadogConfig{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DatadogConfig) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DatadogConfig) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DatadogConfigValidator().Validate(ctx, m, opts...)
}

type ValidateDatadogConfig struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDatadogConfig) EndpointChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for endpoint_choice")
	}
	return validatorFn, nil
}

func (v *ValidateDatadogConfig) EndpointChoiceSiteValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_Site, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for site")
	}
	return oValidatorFn_Site, nil
}

func (v *ValidateDatadogConfig) TlsChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for tls_choice")
	}
	return validatorFn, nil
}

func (v *ValidateDatadogConfig) DatadogApiKeyValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for datadog_api_key")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.SecretTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateDatadogConfig) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DatadogConfig)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DatadogConfig got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["batch"]; exists {

		vOpts := append(opts, db.WithValidateField("batch"))
		if err := fv(ctx, m.GetBatch(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["compression"]; exists {

		vOpts := append(opts, db.WithValidateField("compression"))
		if err := fv(ctx, m.GetCompression(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["datadog_api_key"]; exists {

		vOpts := append(opts, db.WithValidateField("datadog_api_key"))
		if err := fv(ctx, m.GetDatadogApiKey(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["endpoint_choice"]; exists {
		val := m.GetEndpointChoice()
		vOpts := append(opts,
			db.WithValidateField("endpoint_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetEndpointChoice().(type) {
	case *DatadogConfig_Site:
		if fv, exists := v.FldValidators["endpoint_choice.site"]; exists {
			val := m.GetEndpointChoice().(*DatadogConfig_Site).Site
			vOpts := append(opts,
				db.WithValidateField("endpoint_choice"),
				db.WithValidateField("site"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *DatadogConfig_Endpoint:
		if fv, exists := v.FldValidators["endpoint_choice.endpoint"]; exists {
			val := m.GetEndpointChoice().(*DatadogConfig_Endpoint).Endpoint
			vOpts := append(opts,
				db.WithValidateField("endpoint_choice"),
				db.WithValidateField("endpoint"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["tls_choice"]; exists {
		val := m.GetTlsChoice()
		vOpts := append(opts,
			db.WithValidateField("tls_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetTlsChoice().(type) {
	case *DatadogConfig_NoTls:
		if fv, exists := v.FldValidators["tls_choice.no_tls"]; exists {
			val := m.GetTlsChoice().(*DatadogConfig_NoTls).NoTls
			vOpts := append(opts,
				db.WithValidateField("tls_choice"),
				db.WithValidateField("no_tls"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *DatadogConfig_UseTls:
		if fv, exists := v.FldValidators["tls_choice.use_tls"]; exists {
			val := m.GetTlsChoice().(*DatadogConfig_UseTls).UseTls
			vOpts := append(opts,
				db.WithValidateField("tls_choice"),
				db.WithValidateField("use_tls"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDatadogConfigValidator = func() *ValidateDatadogConfig {
	v := &ValidateDatadogConfig{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhEndpointChoice := v.EndpointChoiceValidationRuleHandler
	rulesEndpointChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhEndpointChoice(rulesEndpointChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DatadogConfig.endpoint_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["endpoint_choice"] = vFn

	vrhEndpointChoiceSite := v.EndpointChoiceSiteValidationRuleHandler
	rulesEndpointChoiceSite := map[string]string{
		"ves.io.schema.rules.string.hostname_or_ip": "true",
	}
	vFnMap["endpoint_choice.site"], err = vrhEndpointChoiceSite(rulesEndpointChoiceSite)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field DatadogConfig.endpoint_choice_site: %s", err)
		panic(errMsg)
	}

	v.FldValidators["endpoint_choice.site"] = vFnMap["endpoint_choice.site"]

	vrhTlsChoice := v.TlsChoiceValidationRuleHandler
	rulesTlsChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhTlsChoice(rulesTlsChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DatadogConfig.tls_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["tls_choice"] = vFn

	vrhDatadogApiKey := v.DatadogApiKeyValidationRuleHandler
	rulesDatadogApiKey := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhDatadogApiKey(rulesDatadogApiKey)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DatadogConfig.datadog_api_key: %s", err)
		panic(errMsg)
	}
	v.FldValidators["datadog_api_key"] = vFn

	v.FldValidators["tls_choice.use_tls"] = TLSConfigTypeValidator().Validate

	v.FldValidators["compression"] = CompressionTypeValidator().Validate

	v.FldValidators["batch"] = BatchOptionTypeValidator().Validate

	return v
}()

func DatadogConfigValidator() db.Validator {
	return DefaultDatadogConfigValidator
}

// augmented methods on protoc/std generated struct

func (m *ElasticConfig) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ElasticConfig) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *ElasticConfig) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetAuthBasic().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ElasticConfig.auth_basic")
	}

	if err := m.GetUseTls().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ElasticConfig.use_tls")
	}

	return nil
}

func (m *ElasticConfig) DeepCopy() *ElasticConfig {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ElasticConfig{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ElasticConfig) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ElasticConfig) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ElasticConfigValidator().Validate(ctx, m, opts...)
}

func (m *ElasticConfig) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetAuthChoiceDRefInfo()

}

func (m *ElasticConfig) GetAuthChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetAuthChoice().(type) {
	case *ElasticConfig_AuthNone:

		return nil, nil

	case *ElasticConfig_AuthBasic:

		return nil, nil

	case *ElasticConfig_AuthAws:

		vref := m.GetAuthAws()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("cloud_credentials.Object")
		dri := db.DRefInfo{
			RefdType:   "cloud_credentials.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "auth_aws",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetAuthChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *ElasticConfig) GetAuthChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetAuthChoice().(type) {
	case *ElasticConfig_AuthNone:

	case *ElasticConfig_AuthBasic:

	case *ElasticConfig_AuthAws:
		refdType, err := d.TypeForEntryKind("", "", "cloud_credentials.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: cloud_credentials")
		}

		vref := m.GetAuthAws()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "cloud_credentials.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

type ValidateElasticConfig struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateElasticConfig) AuthChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for auth_choice")
	}
	return validatorFn, nil
}

func (v *ValidateElasticConfig) TlsChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for tls_choice")
	}
	return validatorFn, nil
}

func (v *ValidateElasticConfig) EndpointValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for endpoint")
	}

	return validatorFn, nil
}

func (v *ValidateElasticConfig) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ElasticConfig)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ElasticConfig got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["auth_choice"]; exists {
		val := m.GetAuthChoice()
		vOpts := append(opts,
			db.WithValidateField("auth_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetAuthChoice().(type) {
	case *ElasticConfig_AuthNone:
		if fv, exists := v.FldValidators["auth_choice.auth_none"]; exists {
			val := m.GetAuthChoice().(*ElasticConfig_AuthNone).AuthNone
			vOpts := append(opts,
				db.WithValidateField("auth_choice"),
				db.WithValidateField("auth_none"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ElasticConfig_AuthBasic:
		if fv, exists := v.FldValidators["auth_choice.auth_basic"]; exists {
			val := m.GetAuthChoice().(*ElasticConfig_AuthBasic).AuthBasic
			vOpts := append(opts,
				db.WithValidateField("auth_choice"),
				db.WithValidateField("auth_basic"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ElasticConfig_AuthAws:
		if fv, exists := v.FldValidators["auth_choice.auth_aws"]; exists {
			val := m.GetAuthChoice().(*ElasticConfig_AuthAws).AuthAws
			vOpts := append(opts,
				db.WithValidateField("auth_choice"),
				db.WithValidateField("auth_aws"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["batch"]; exists {

		vOpts := append(opts, db.WithValidateField("batch"))
		if err := fv(ctx, m.GetBatch(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["compression"]; exists {

		vOpts := append(opts, db.WithValidateField("compression"))
		if err := fv(ctx, m.GetCompression(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["endpoint"]; exists {

		vOpts := append(opts, db.WithValidateField("endpoint"))
		if err := fv(ctx, m.GetEndpoint(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tls_choice"]; exists {
		val := m.GetTlsChoice()
		vOpts := append(opts,
			db.WithValidateField("tls_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetTlsChoice().(type) {
	case *ElasticConfig_NoTls:
		if fv, exists := v.FldValidators["tls_choice.no_tls"]; exists {
			val := m.GetTlsChoice().(*ElasticConfig_NoTls).NoTls
			vOpts := append(opts,
				db.WithValidateField("tls_choice"),
				db.WithValidateField("no_tls"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ElasticConfig_UseTls:
		if fv, exists := v.FldValidators["tls_choice.use_tls"]; exists {
			val := m.GetTlsChoice().(*ElasticConfig_UseTls).UseTls
			vOpts := append(opts,
				db.WithValidateField("tls_choice"),
				db.WithValidateField("use_tls"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultElasticConfigValidator = func() *ValidateElasticConfig {
	v := &ValidateElasticConfig{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAuthChoice := v.AuthChoiceValidationRuleHandler
	rulesAuthChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhAuthChoice(rulesAuthChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ElasticConfig.auth_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["auth_choice"] = vFn

	vrhTlsChoice := v.TlsChoiceValidationRuleHandler
	rulesTlsChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhTlsChoice(rulesTlsChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ElasticConfig.tls_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["tls_choice"] = vFn

	vrhEndpoint := v.EndpointValidationRuleHandler
	rulesEndpoint := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhEndpoint(rulesEndpoint)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ElasticConfig.endpoint: %s", err)
		panic(errMsg)
	}
	v.FldValidators["endpoint"] = vFn

	v.FldValidators["auth_choice.auth_basic"] = HttpAuthBasicValidator().Validate
	v.FldValidators["auth_choice.auth_aws"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["tls_choice.use_tls"] = TLSConfigTypeValidator().Validate

	v.FldValidators["compression"] = CompressionTypeValidator().Validate

	v.FldValidators["batch"] = BatchOptionTypeValidator().Validate

	return v
}()

func ElasticConfigValidator() db.Validator {
	return DefaultElasticConfigValidator
}

// augmented methods on protoc/std generated struct

func (m *FilenameOptionsType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *FilenameOptionsType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *FilenameOptionsType) DeepCopy() *FilenameOptionsType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &FilenameOptionsType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *FilenameOptionsType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *FilenameOptionsType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return FilenameOptionsTypeValidator().Validate(ctx, m, opts...)
}

type ValidateFilenameOptionsType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateFilenameOptionsType) FolderCustomFolderValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_CustomFolder, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for custom_folder")
	}
	return oValidatorFn_CustomFolder, nil
}

func (v *ValidateFilenameOptionsType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*FilenameOptionsType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *FilenameOptionsType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	switch m.GetFolder().(type) {
	case *FilenameOptionsType_NoFolder:
		if fv, exists := v.FldValidators["folder.no_folder"]; exists {
			val := m.GetFolder().(*FilenameOptionsType_NoFolder).NoFolder
			vOpts := append(opts,
				db.WithValidateField("folder"),
				db.WithValidateField("no_folder"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *FilenameOptionsType_LogTypeFolder:
		if fv, exists := v.FldValidators["folder.log_type_folder"]; exists {
			val := m.GetFolder().(*FilenameOptionsType_LogTypeFolder).LogTypeFolder
			vOpts := append(opts,
				db.WithValidateField("folder"),
				db.WithValidateField("log_type_folder"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *FilenameOptionsType_CustomFolder:
		if fv, exists := v.FldValidators["folder.custom_folder"]; exists {
			val := m.GetFolder().(*FilenameOptionsType_CustomFolder).CustomFolder
			vOpts := append(opts,
				db.WithValidateField("folder"),
				db.WithValidateField("custom_folder"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultFilenameOptionsTypeValidator = func() *ValidateFilenameOptionsType {
	v := &ValidateFilenameOptionsType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhFolderCustomFolder := v.FolderCustomFolderValidationRuleHandler
	rulesFolderCustomFolder := map[string]string{
		"ves.io.schema.rules.string.pattern": "^[A-Za-z_][A-Za-z0-9\\-\\._]*$",
	}
	vFnMap["folder.custom_folder"], err = vrhFolderCustomFolder(rulesFolderCustomFolder)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field FilenameOptionsType.folder_custom_folder: %s", err)
		panic(errMsg)
	}

	v.FldValidators["folder.custom_folder"] = vFnMap["folder.custom_folder"]

	return v
}()

func FilenameOptionsTypeValidator() db.Validator {
	return DefaultFilenameOptionsTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GCPBucketConfig) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GCPBucketConfig) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GCPBucketConfig) DeepCopy() *GCPBucketConfig {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GCPBucketConfig{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GCPBucketConfig) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GCPBucketConfig) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GCPBucketConfigValidator().Validate(ctx, m, opts...)
}

func (m *GCPBucketConfig) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetGcpCredDRefInfo()

}

func (m *GCPBucketConfig) GetGcpCredDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetGcpCred()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("cloud_credentials.Object")
	dri := db.DRefInfo{
		RefdType:   "cloud_credentials.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "gcp_cred",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetGcpCredDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GCPBucketConfig) GetGcpCredDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "cloud_credentials.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: cloud_credentials")
	}

	vref := m.GetGcpCred()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "cloud_credentials.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

type ValidateGCPBucketConfig struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGCPBucketConfig) BucketValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for bucket")
	}

	return validatorFn, nil
}

func (v *ValidateGCPBucketConfig) GcpCredValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for gcp_cred")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGCPBucketConfig) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GCPBucketConfig)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GCPBucketConfig got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["batch"]; exists {

		vOpts := append(opts, db.WithValidateField("batch"))
		if err := fv(ctx, m.GetBatch(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["bucket"]; exists {

		vOpts := append(opts, db.WithValidateField("bucket"))
		if err := fv(ctx, m.GetBucket(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["compression"]; exists {

		vOpts := append(opts, db.WithValidateField("compression"))
		if err := fv(ctx, m.GetCompression(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["filename_options"]; exists {

		vOpts := append(opts, db.WithValidateField("filename_options"))
		if err := fv(ctx, m.GetFilenameOptions(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["gcp_cred"]; exists {

		vOpts := append(opts, db.WithValidateField("gcp_cred"))
		if err := fv(ctx, m.GetGcpCred(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGCPBucketConfigValidator = func() *ValidateGCPBucketConfig {
	v := &ValidateGCPBucketConfig{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhBucket := v.BucketValidationRuleHandler
	rulesBucket := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "128",
		"ves.io.schema.rules.string.min_len":   "3",
		"ves.io.schema.rules.string.pattern":   "^[a-z0-9]+[a-z0-9_\\.-]+[a-z0-9]$",
	}
	vFn, err = vrhBucket(rulesBucket)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GCPBucketConfig.bucket: %s", err)
		panic(errMsg)
	}
	v.FldValidators["bucket"] = vFn

	vrhGcpCred := v.GcpCredValidationRuleHandler
	rulesGcpCred := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhGcpCred(rulesGcpCred)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GCPBucketConfig.gcp_cred: %s", err)
		panic(errMsg)
	}
	v.FldValidators["gcp_cred"] = vFn

	v.FldValidators["compression"] = CompressionTypeValidator().Validate

	v.FldValidators["batch"] = BatchOptionTypeValidator().Validate

	v.FldValidators["filename_options"] = FilenameOptionsTypeValidator().Validate

	return v
}()

func GCPBucketConfigValidator() db.Validator {
	return DefaultGCPBucketConfigValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GetSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetHttpReceiver().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GetSpecType.http_receiver")
	}

	if err := m.GetDatadogReceiver().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GetSpecType.datadog_receiver")
	}

	if err := m.GetSplunkReceiver().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GetSpecType.splunk_receiver")
	}

	if err := m.GetElasticReceiver().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GetSpecType.elastic_receiver")
	}

	if err := m.GetAzureReceiver().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GetSpecType.azure_receiver")
	}

	if err := m.GetAzureEventHubsReceiver().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GetSpecType.azure_event_hubs_receiver")
	}

	if err := m.GetKafkaReceiver().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GetSpecType.kafka_receiver")
	}

	if err := m.GetNewRelicReceiver().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GetSpecType.new_relic_receiver")
	}

	if err := m.GetSumoLogicReceiver().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GetSpecType.sumo_logic_receiver")
	}

	if err := m.GetQradarReceiver().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GetSpecType.qradar_receiver")
	}

	return nil
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GetSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetReceiverDRefInfo()

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetReceiverDRefInfo() ([]db.DRefInfo, error) {
	if m.GetReceiver() == nil {
		return nil, nil
	}
	switch m.GetReceiver().(type) {
	case *GetSpecType_S3Receiver:

		drInfos, err := m.GetS3Receiver().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetS3Receiver().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "s3_receiver." + dri.DRField
		}
		return drInfos, err

	case *GetSpecType_HttpReceiver:

		return nil, nil

	case *GetSpecType_DatadogReceiver:

		return nil, nil

	case *GetSpecType_SplunkReceiver:

		return nil, nil

	case *GetSpecType_ElasticReceiver:

		drInfos, err := m.GetElasticReceiver().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetElasticReceiver().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "elastic_receiver." + dri.DRField
		}
		return drInfos, err

	case *GetSpecType_AzureReceiver:

		return nil, nil

	case *GetSpecType_AzureEventHubsReceiver:

		return nil, nil

	case *GetSpecType_AwsCloudWatchReceiver:

		drInfos, err := m.GetAwsCloudWatchReceiver().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetAwsCloudWatchReceiver().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "aws_cloud_watch_receiver." + dri.DRField
		}
		return drInfos, err

	case *GetSpecType_KafkaReceiver:

		return nil, nil

	case *GetSpecType_NewRelicReceiver:

		return nil, nil

	case *GetSpecType_SumoLogicReceiver:

		return nil, nil

	case *GetSpecType_QradarReceiver:

		return nil, nil

	case *GetSpecType_GcpBucketReceiver:

		drInfos, err := m.GetGcpBucketReceiver().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetGcpBucketReceiver().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "gcp_bucket_receiver." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) FilterChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for filter_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) LogTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for log_type")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) ReceiverValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for receiver")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["filter_choice"]; exists {
		val := m.GetFilterChoice()
		vOpts := append(opts,
			db.WithValidateField("filter_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetFilterChoice().(type) {
	case *GetSpecType_NsCurrent:
		if fv, exists := v.FldValidators["filter_choice.ns_current"]; exists {
			val := m.GetFilterChoice().(*GetSpecType_NsCurrent).NsCurrent
			vOpts := append(opts,
				db.WithValidateField("filter_choice"),
				db.WithValidateField("ns_current"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_NsAll:
		if fv, exists := v.FldValidators["filter_choice.ns_all"]; exists {
			val := m.GetFilterChoice().(*GetSpecType_NsAll).NsAll
			vOpts := append(opts,
				db.WithValidateField("filter_choice"),
				db.WithValidateField("ns_all"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_NsList:
		if fv, exists := v.FldValidators["filter_choice.ns_list"]; exists {
			val := m.GetFilterChoice().(*GetSpecType_NsList).NsList
			vOpts := append(opts,
				db.WithValidateField("filter_choice"),
				db.WithValidateField("ns_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_NsSystem:
		if fv, exists := v.FldValidators["filter_choice.ns_system"]; exists {
			val := m.GetFilterChoice().(*GetSpecType_NsSystem).NsSystem
			vOpts := append(opts,
				db.WithValidateField("filter_choice"),
				db.WithValidateField("ns_system"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["log_type"]; exists {
		val := m.GetLogType()
		vOpts := append(opts,
			db.WithValidateField("log_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetLogType().(type) {
	case *GetSpecType_RequestLogs:
		if fv, exists := v.FldValidators["log_type.request_logs"]; exists {
			val := m.GetLogType().(*GetSpecType_RequestLogs).RequestLogs
			vOpts := append(opts,
				db.WithValidateField("log_type"),
				db.WithValidateField("request_logs"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_SecurityEvents:
		if fv, exists := v.FldValidators["log_type.security_events"]; exists {
			val := m.GetLogType().(*GetSpecType_SecurityEvents).SecurityEvents
			vOpts := append(opts,
				db.WithValidateField("log_type"),
				db.WithValidateField("security_events"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_AuditLogs:
		if fv, exists := v.FldValidators["log_type.audit_logs"]; exists {
			val := m.GetLogType().(*GetSpecType_AuditLogs).AuditLogs
			vOpts := append(opts,
				db.WithValidateField("log_type"),
				db.WithValidateField("audit_logs"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_DnsLogs:
		if fv, exists := v.FldValidators["log_type.dns_logs"]; exists {
			val := m.GetLogType().(*GetSpecType_DnsLogs).DnsLogs
			vOpts := append(opts,
				db.WithValidateField("log_type"),
				db.WithValidateField("dns_logs"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["receiver"]; exists {
		val := m.GetReceiver()
		vOpts := append(opts,
			db.WithValidateField("receiver"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetReceiver().(type) {
	case *GetSpecType_S3Receiver:
		if fv, exists := v.FldValidators["receiver.s3_receiver"]; exists {
			val := m.GetReceiver().(*GetSpecType_S3Receiver).S3Receiver
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("s3_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_HttpReceiver:
		if fv, exists := v.FldValidators["receiver.http_receiver"]; exists {
			val := m.GetReceiver().(*GetSpecType_HttpReceiver).HttpReceiver
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("http_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_DatadogReceiver:
		if fv, exists := v.FldValidators["receiver.datadog_receiver"]; exists {
			val := m.GetReceiver().(*GetSpecType_DatadogReceiver).DatadogReceiver
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("datadog_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_SplunkReceiver:
		if fv, exists := v.FldValidators["receiver.splunk_receiver"]; exists {
			val := m.GetReceiver().(*GetSpecType_SplunkReceiver).SplunkReceiver
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("splunk_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_ElasticReceiver:
		if fv, exists := v.FldValidators["receiver.elastic_receiver"]; exists {
			val := m.GetReceiver().(*GetSpecType_ElasticReceiver).ElasticReceiver
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("elastic_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_AzureReceiver:
		if fv, exists := v.FldValidators["receiver.azure_receiver"]; exists {
			val := m.GetReceiver().(*GetSpecType_AzureReceiver).AzureReceiver
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("azure_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_AzureEventHubsReceiver:
		if fv, exists := v.FldValidators["receiver.azure_event_hubs_receiver"]; exists {
			val := m.GetReceiver().(*GetSpecType_AzureEventHubsReceiver).AzureEventHubsReceiver
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("azure_event_hubs_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_AwsCloudWatchReceiver:
		if fv, exists := v.FldValidators["receiver.aws_cloud_watch_receiver"]; exists {
			val := m.GetReceiver().(*GetSpecType_AwsCloudWatchReceiver).AwsCloudWatchReceiver
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("aws_cloud_watch_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_KafkaReceiver:
		if fv, exists := v.FldValidators["receiver.kafka_receiver"]; exists {
			val := m.GetReceiver().(*GetSpecType_KafkaReceiver).KafkaReceiver
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("kafka_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_NewRelicReceiver:
		if fv, exists := v.FldValidators["receiver.new_relic_receiver"]; exists {
			val := m.GetReceiver().(*GetSpecType_NewRelicReceiver).NewRelicReceiver
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("new_relic_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_SumoLogicReceiver:
		if fv, exists := v.FldValidators["receiver.sumo_logic_receiver"]; exists {
			val := m.GetReceiver().(*GetSpecType_SumoLogicReceiver).SumoLogicReceiver
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("sumo_logic_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_QradarReceiver:
		if fv, exists := v.FldValidators["receiver.qradar_receiver"]; exists {
			val := m.GetReceiver().(*GetSpecType_QradarReceiver).QradarReceiver
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("qradar_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_GcpBucketReceiver:
		if fv, exists := v.FldValidators["receiver.gcp_bucket_receiver"]; exists {
			val := m.GetReceiver().(*GetSpecType_GcpBucketReceiver).GcpBucketReceiver
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("gcp_bucket_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhFilterChoice := v.FilterChoiceValidationRuleHandler
	rulesFilterChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhFilterChoice(rulesFilterChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.filter_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["filter_choice"] = vFn

	vrhLogType := v.LogTypeValidationRuleHandler
	rulesLogType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhLogType(rulesLogType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.log_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["log_type"] = vFn

	vrhReceiver := v.ReceiverValidationRuleHandler
	rulesReceiver := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhReceiver(rulesReceiver)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.receiver: %s", err)
		panic(errMsg)
	}
	v.FldValidators["receiver"] = vFn

	v.FldValidators["filter_choice.ns_list"] = NSListValidator().Validate

	v.FldValidators["receiver.s3_receiver"] = S3ConfigValidator().Validate
	v.FldValidators["receiver.http_receiver"] = HTTPConfigValidator().Validate
	v.FldValidators["receiver.datadog_receiver"] = DatadogConfigValidator().Validate
	v.FldValidators["receiver.splunk_receiver"] = SplunkConfigValidator().Validate
	v.FldValidators["receiver.elastic_receiver"] = ElasticConfigValidator().Validate
	v.FldValidators["receiver.azure_receiver"] = AzureBlobConfigValidator().Validate
	v.FldValidators["receiver.azure_event_hubs_receiver"] = AzureEventHubsConfigValidator().Validate
	v.FldValidators["receiver.aws_cloud_watch_receiver"] = AWSCloudwatchConfigValidator().Validate
	v.FldValidators["receiver.kafka_receiver"] = KafkaConfigValidator().Validate
	v.FldValidators["receiver.new_relic_receiver"] = NewRelicConfigValidator().Validate
	v.FldValidators["receiver.sumo_logic_receiver"] = SumoLogicConfigValidator().Validate
	v.FldValidators["receiver.qradar_receiver"] = QRadarConfigValidator().Validate
	v.FldValidators["receiver.gcp_bucket_receiver"] = GCPBucketConfigValidator().Validate

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GlobalSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetHttpReceiver().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GlobalSpecType.http_receiver")
	}

	if err := m.GetDatadogReceiver().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GlobalSpecType.datadog_receiver")
	}

	if err := m.GetSplunkReceiver().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GlobalSpecType.splunk_receiver")
	}

	if err := m.GetElasticReceiver().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GlobalSpecType.elastic_receiver")
	}

	if err := m.GetAzureReceiver().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GlobalSpecType.azure_receiver")
	}

	if err := m.GetAzureEventHubsReceiver().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GlobalSpecType.azure_event_hubs_receiver")
	}

	if err := m.GetKafkaReceiver().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GlobalSpecType.kafka_receiver")
	}

	if err := m.GetNewRelicReceiver().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GlobalSpecType.new_relic_receiver")
	}

	if err := m.GetSumoLogicReceiver().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GlobalSpecType.sumo_logic_receiver")
	}

	if err := m.GetQradarReceiver().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GlobalSpecType.qradar_receiver")
	}

	return nil
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GlobalSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetReceiverDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetReceiverDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetViewInternalDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetViewInternalDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetReceiverDRefInfo() ([]db.DRefInfo, error) {
	if m.GetReceiver() == nil {
		return nil, nil
	}
	switch m.GetReceiver().(type) {
	case *GlobalSpecType_S3Receiver:

		drInfos, err := m.GetS3Receiver().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetS3Receiver().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "s3_receiver." + dri.DRField
		}
		return drInfos, err

	case *GlobalSpecType_HttpReceiver:

		return nil, nil

	case *GlobalSpecType_DatadogReceiver:

		return nil, nil

	case *GlobalSpecType_SplunkReceiver:

		return nil, nil

	case *GlobalSpecType_ElasticReceiver:

		drInfos, err := m.GetElasticReceiver().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetElasticReceiver().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "elastic_receiver." + dri.DRField
		}
		return drInfos, err

	case *GlobalSpecType_AzureReceiver:

		return nil, nil

	case *GlobalSpecType_AzureEventHubsReceiver:

		return nil, nil

	case *GlobalSpecType_AwsCloudWatchReceiver:

		drInfos, err := m.GetAwsCloudWatchReceiver().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetAwsCloudWatchReceiver().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "aws_cloud_watch_receiver." + dri.DRField
		}
		return drInfos, err

	case *GlobalSpecType_KafkaReceiver:

		return nil, nil

	case *GlobalSpecType_NewRelicReceiver:

		return nil, nil

	case *GlobalSpecType_SumoLogicReceiver:

		return nil, nil

	case *GlobalSpecType_QradarReceiver:

		return nil, nil

	case *GlobalSpecType_GcpBucketReceiver:

		drInfos, err := m.GetGcpBucketReceiver().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetGcpBucketReceiver().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "gcp_bucket_receiver." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

func (m *GlobalSpecType) GetViewInternalDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetViewInternal()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("view_internal.Object")
	dri := db.DRefInfo{
		RefdType:   "view_internal.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "view_internal",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetViewInternalDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetViewInternalDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "view_internal.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: view_internal")
	}

	vref := m.GetViewInternal()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "view_internal.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) FilterChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for filter_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) LogTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for log_type")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) ReceiverValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for receiver")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["filter_choice"]; exists {
		val := m.GetFilterChoice()
		vOpts := append(opts,
			db.WithValidateField("filter_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetFilterChoice().(type) {
	case *GlobalSpecType_NsCurrent:
		if fv, exists := v.FldValidators["filter_choice.ns_current"]; exists {
			val := m.GetFilterChoice().(*GlobalSpecType_NsCurrent).NsCurrent
			vOpts := append(opts,
				db.WithValidateField("filter_choice"),
				db.WithValidateField("ns_current"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_NsAll:
		if fv, exists := v.FldValidators["filter_choice.ns_all"]; exists {
			val := m.GetFilterChoice().(*GlobalSpecType_NsAll).NsAll
			vOpts := append(opts,
				db.WithValidateField("filter_choice"),
				db.WithValidateField("ns_all"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_NsList:
		if fv, exists := v.FldValidators["filter_choice.ns_list"]; exists {
			val := m.GetFilterChoice().(*GlobalSpecType_NsList).NsList
			vOpts := append(opts,
				db.WithValidateField("filter_choice"),
				db.WithValidateField("ns_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_NsSystem:
		if fv, exists := v.FldValidators["filter_choice.ns_system"]; exists {
			val := m.GetFilterChoice().(*GlobalSpecType_NsSystem).NsSystem
			vOpts := append(opts,
				db.WithValidateField("filter_choice"),
				db.WithValidateField("ns_system"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["log_type"]; exists {
		val := m.GetLogType()
		vOpts := append(opts,
			db.WithValidateField("log_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetLogType().(type) {
	case *GlobalSpecType_RequestLogs:
		if fv, exists := v.FldValidators["log_type.request_logs"]; exists {
			val := m.GetLogType().(*GlobalSpecType_RequestLogs).RequestLogs
			vOpts := append(opts,
				db.WithValidateField("log_type"),
				db.WithValidateField("request_logs"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_SecurityEvents:
		if fv, exists := v.FldValidators["log_type.security_events"]; exists {
			val := m.GetLogType().(*GlobalSpecType_SecurityEvents).SecurityEvents
			vOpts := append(opts,
				db.WithValidateField("log_type"),
				db.WithValidateField("security_events"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_AuditLogs:
		if fv, exists := v.FldValidators["log_type.audit_logs"]; exists {
			val := m.GetLogType().(*GlobalSpecType_AuditLogs).AuditLogs
			vOpts := append(opts,
				db.WithValidateField("log_type"),
				db.WithValidateField("audit_logs"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_DnsLogs:
		if fv, exists := v.FldValidators["log_type.dns_logs"]; exists {
			val := m.GetLogType().(*GlobalSpecType_DnsLogs).DnsLogs
			vOpts := append(opts,
				db.WithValidateField("log_type"),
				db.WithValidateField("dns_logs"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["receiver"]; exists {
		val := m.GetReceiver()
		vOpts := append(opts,
			db.WithValidateField("receiver"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetReceiver().(type) {
	case *GlobalSpecType_S3Receiver:
		if fv, exists := v.FldValidators["receiver.s3_receiver"]; exists {
			val := m.GetReceiver().(*GlobalSpecType_S3Receiver).S3Receiver
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("s3_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_HttpReceiver:
		if fv, exists := v.FldValidators["receiver.http_receiver"]; exists {
			val := m.GetReceiver().(*GlobalSpecType_HttpReceiver).HttpReceiver
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("http_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_DatadogReceiver:
		if fv, exists := v.FldValidators["receiver.datadog_receiver"]; exists {
			val := m.GetReceiver().(*GlobalSpecType_DatadogReceiver).DatadogReceiver
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("datadog_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_SplunkReceiver:
		if fv, exists := v.FldValidators["receiver.splunk_receiver"]; exists {
			val := m.GetReceiver().(*GlobalSpecType_SplunkReceiver).SplunkReceiver
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("splunk_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_ElasticReceiver:
		if fv, exists := v.FldValidators["receiver.elastic_receiver"]; exists {
			val := m.GetReceiver().(*GlobalSpecType_ElasticReceiver).ElasticReceiver
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("elastic_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_AzureReceiver:
		if fv, exists := v.FldValidators["receiver.azure_receiver"]; exists {
			val := m.GetReceiver().(*GlobalSpecType_AzureReceiver).AzureReceiver
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("azure_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_AzureEventHubsReceiver:
		if fv, exists := v.FldValidators["receiver.azure_event_hubs_receiver"]; exists {
			val := m.GetReceiver().(*GlobalSpecType_AzureEventHubsReceiver).AzureEventHubsReceiver
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("azure_event_hubs_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_AwsCloudWatchReceiver:
		if fv, exists := v.FldValidators["receiver.aws_cloud_watch_receiver"]; exists {
			val := m.GetReceiver().(*GlobalSpecType_AwsCloudWatchReceiver).AwsCloudWatchReceiver
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("aws_cloud_watch_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_KafkaReceiver:
		if fv, exists := v.FldValidators["receiver.kafka_receiver"]; exists {
			val := m.GetReceiver().(*GlobalSpecType_KafkaReceiver).KafkaReceiver
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("kafka_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_NewRelicReceiver:
		if fv, exists := v.FldValidators["receiver.new_relic_receiver"]; exists {
			val := m.GetReceiver().(*GlobalSpecType_NewRelicReceiver).NewRelicReceiver
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("new_relic_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_SumoLogicReceiver:
		if fv, exists := v.FldValidators["receiver.sumo_logic_receiver"]; exists {
			val := m.GetReceiver().(*GlobalSpecType_SumoLogicReceiver).SumoLogicReceiver
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("sumo_logic_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_QradarReceiver:
		if fv, exists := v.FldValidators["receiver.qradar_receiver"]; exists {
			val := m.GetReceiver().(*GlobalSpecType_QradarReceiver).QradarReceiver
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("qradar_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_GcpBucketReceiver:
		if fv, exists := v.FldValidators["receiver.gcp_bucket_receiver"]; exists {
			val := m.GetReceiver().(*GlobalSpecType_GcpBucketReceiver).GcpBucketReceiver
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("gcp_bucket_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["view_internal"]; exists {

		vOpts := append(opts, db.WithValidateField("view_internal"))
		if err := fv(ctx, m.GetViewInternal(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhFilterChoice := v.FilterChoiceValidationRuleHandler
	rulesFilterChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhFilterChoice(rulesFilterChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.filter_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["filter_choice"] = vFn

	vrhLogType := v.LogTypeValidationRuleHandler
	rulesLogType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhLogType(rulesLogType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.log_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["log_type"] = vFn

	vrhReceiver := v.ReceiverValidationRuleHandler
	rulesReceiver := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhReceiver(rulesReceiver)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.receiver: %s", err)
		panic(errMsg)
	}
	v.FldValidators["receiver"] = vFn

	v.FldValidators["filter_choice.ns_list"] = NSListValidator().Validate

	v.FldValidators["receiver.s3_receiver"] = S3ConfigValidator().Validate
	v.FldValidators["receiver.http_receiver"] = HTTPConfigValidator().Validate
	v.FldValidators["receiver.datadog_receiver"] = DatadogConfigValidator().Validate
	v.FldValidators["receiver.splunk_receiver"] = SplunkConfigValidator().Validate
	v.FldValidators["receiver.elastic_receiver"] = ElasticConfigValidator().Validate
	v.FldValidators["receiver.azure_receiver"] = AzureBlobConfigValidator().Validate
	v.FldValidators["receiver.azure_event_hubs_receiver"] = AzureEventHubsConfigValidator().Validate
	v.FldValidators["receiver.aws_cloud_watch_receiver"] = AWSCloudwatchConfigValidator().Validate
	v.FldValidators["receiver.kafka_receiver"] = KafkaConfigValidator().Validate
	v.FldValidators["receiver.new_relic_receiver"] = NewRelicConfigValidator().Validate
	v.FldValidators["receiver.sumo_logic_receiver"] = SumoLogicConfigValidator().Validate
	v.FldValidators["receiver.qradar_receiver"] = QRadarConfigValidator().Validate
	v.FldValidators["receiver.gcp_bucket_receiver"] = GCPBucketConfigValidator().Validate

	v.FldValidators["view_internal"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *HTTPConfig) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *HTTPConfig) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *HTTPConfig) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetAuthBasic().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting HTTPConfig.auth_basic")
	}

	if err := m.GetAuthToken().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting HTTPConfig.auth_token")
	}

	if err := m.GetUseTls().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting HTTPConfig.use_tls")
	}

	return nil
}

func (m *HTTPConfig) DeepCopy() *HTTPConfig {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &HTTPConfig{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *HTTPConfig) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *HTTPConfig) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return HTTPConfigValidator().Validate(ctx, m, opts...)
}

type ValidateHTTPConfig struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateHTTPConfig) AuthChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for auth_choice")
	}
	return validatorFn, nil
}

func (v *ValidateHTTPConfig) TlsChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for tls_choice")
	}
	return validatorFn, nil
}

func (v *ValidateHTTPConfig) UriValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for uri")
	}

	return validatorFn, nil
}

func (v *ValidateHTTPConfig) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*HTTPConfig)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *HTTPConfig got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["auth_choice"]; exists {
		val := m.GetAuthChoice()
		vOpts := append(opts,
			db.WithValidateField("auth_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetAuthChoice().(type) {
	case *HTTPConfig_AuthNone:
		if fv, exists := v.FldValidators["auth_choice.auth_none"]; exists {
			val := m.GetAuthChoice().(*HTTPConfig_AuthNone).AuthNone
			vOpts := append(opts,
				db.WithValidateField("auth_choice"),
				db.WithValidateField("auth_none"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *HTTPConfig_AuthBasic:
		if fv, exists := v.FldValidators["auth_choice.auth_basic"]; exists {
			val := m.GetAuthChoice().(*HTTPConfig_AuthBasic).AuthBasic
			vOpts := append(opts,
				db.WithValidateField("auth_choice"),
				db.WithValidateField("auth_basic"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *HTTPConfig_AuthToken:
		if fv, exists := v.FldValidators["auth_choice.auth_token"]; exists {
			val := m.GetAuthChoice().(*HTTPConfig_AuthToken).AuthToken
			vOpts := append(opts,
				db.WithValidateField("auth_choice"),
				db.WithValidateField("auth_token"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["batch"]; exists {

		vOpts := append(opts, db.WithValidateField("batch"))
		if err := fv(ctx, m.GetBatch(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["compression"]; exists {

		vOpts := append(opts, db.WithValidateField("compression"))
		if err := fv(ctx, m.GetCompression(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tls_choice"]; exists {
		val := m.GetTlsChoice()
		vOpts := append(opts,
			db.WithValidateField("tls_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetTlsChoice().(type) {
	case *HTTPConfig_NoTls:
		if fv, exists := v.FldValidators["tls_choice.no_tls"]; exists {
			val := m.GetTlsChoice().(*HTTPConfig_NoTls).NoTls
			vOpts := append(opts,
				db.WithValidateField("tls_choice"),
				db.WithValidateField("no_tls"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *HTTPConfig_UseTls:
		if fv, exists := v.FldValidators["tls_choice.use_tls"]; exists {
			val := m.GetTlsChoice().(*HTTPConfig_UseTls).UseTls
			vOpts := append(opts,
				db.WithValidateField("tls_choice"),
				db.WithValidateField("use_tls"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["uri"]; exists {

		vOpts := append(opts, db.WithValidateField("uri"))
		if err := fv(ctx, m.GetUri(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultHTTPConfigValidator = func() *ValidateHTTPConfig {
	v := &ValidateHTTPConfig{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAuthChoice := v.AuthChoiceValidationRuleHandler
	rulesAuthChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhAuthChoice(rulesAuthChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for HTTPConfig.auth_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["auth_choice"] = vFn

	vrhTlsChoice := v.TlsChoiceValidationRuleHandler
	rulesTlsChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhTlsChoice(rulesTlsChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for HTTPConfig.tls_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["tls_choice"] = vFn

	vrhUri := v.UriValidationRuleHandler
	rulesUri := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.uri_ref":   "true",
	}
	vFn, err = vrhUri(rulesUri)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for HTTPConfig.uri: %s", err)
		panic(errMsg)
	}
	v.FldValidators["uri"] = vFn

	v.FldValidators["auth_choice.auth_basic"] = HttpAuthBasicValidator().Validate
	v.FldValidators["auth_choice.auth_token"] = AuthTokenValidator().Validate

	v.FldValidators["tls_choice.use_tls"] = TLSConfigTypeValidator().Validate

	v.FldValidators["compression"] = CompressionTypeValidator().Validate

	v.FldValidators["batch"] = BatchOptionTypeValidator().Validate

	return v
}()

func HTTPConfigValidator() db.Validator {
	return DefaultHTTPConfigValidator
}

// augmented methods on protoc/std generated struct

func (m *HttpAuthBasic) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *HttpAuthBasic) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *HttpAuthBasic) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetPassword().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting HttpAuthBasic.password")
	}

	return nil
}

func (m *HttpAuthBasic) DeepCopy() *HttpAuthBasic {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &HttpAuthBasic{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *HttpAuthBasic) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *HttpAuthBasic) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return HttpAuthBasicValidator().Validate(ctx, m, opts...)
}

type ValidateHttpAuthBasic struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateHttpAuthBasic) UserNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for user_name")
	}

	return validatorFn, nil
}

func (v *ValidateHttpAuthBasic) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*HttpAuthBasic)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *HttpAuthBasic got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["password"]; exists {

		vOpts := append(opts, db.WithValidateField("password"))
		if err := fv(ctx, m.GetPassword(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["user_name"]; exists {

		vOpts := append(opts, db.WithValidateField("user_name"))
		if err := fv(ctx, m.GetUserName(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultHttpAuthBasicValidator = func() *ValidateHttpAuthBasic {
	v := &ValidateHttpAuthBasic{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhUserName := v.UserNameValidationRuleHandler
	rulesUserName := map[string]string{
		"ves.io.schema.rules.string.max_len": "64",
	}
	vFn, err = vrhUserName(rulesUserName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for HttpAuthBasic.user_name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["user_name"] = vFn

	v.FldValidators["password"] = ves_io_schema.SecretTypeValidator().Validate

	return v
}()

func HttpAuthBasicValidator() db.Validator {
	return DefaultHttpAuthBasicValidator
}

// augmented methods on protoc/std generated struct

func (m *KafkaConfig) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *KafkaConfig) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *KafkaConfig) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetUseTls().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting KafkaConfig.use_tls")
	}

	return nil
}

func (m *KafkaConfig) DeepCopy() *KafkaConfig {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &KafkaConfig{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *KafkaConfig) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *KafkaConfig) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return KafkaConfigValidator().Validate(ctx, m, opts...)
}

type ValidateKafkaConfig struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateKafkaConfig) TlsChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for tls_choice")
	}
	return validatorFn, nil
}

func (v *ValidateKafkaConfig) BootstrapServersValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for bootstrap_servers")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for bootstrap_servers")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated bootstrap_servers")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items bootstrap_servers")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateKafkaConfig) KafkaTopicValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for kafka_topic")
	}

	return validatorFn, nil
}

func (v *ValidateKafkaConfig) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*KafkaConfig)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *KafkaConfig got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["batch"]; exists {

		vOpts := append(opts, db.WithValidateField("batch"))
		if err := fv(ctx, m.GetBatch(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["bootstrap_servers"]; exists {
		vOpts := append(opts, db.WithValidateField("bootstrap_servers"))
		if err := fv(ctx, m.GetBootstrapServers(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["compression"]; exists {

		vOpts := append(opts, db.WithValidateField("compression"))
		if err := fv(ctx, m.GetCompression(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["kafka_topic"]; exists {

		vOpts := append(opts, db.WithValidateField("kafka_topic"))
		if err := fv(ctx, m.GetKafkaTopic(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tls_choice"]; exists {
		val := m.GetTlsChoice()
		vOpts := append(opts,
			db.WithValidateField("tls_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetTlsChoice().(type) {
	case *KafkaConfig_NoTls:
		if fv, exists := v.FldValidators["tls_choice.no_tls"]; exists {
			val := m.GetTlsChoice().(*KafkaConfig_NoTls).NoTls
			vOpts := append(opts,
				db.WithValidateField("tls_choice"),
				db.WithValidateField("no_tls"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *KafkaConfig_UseTls:
		if fv, exists := v.FldValidators["tls_choice.use_tls"]; exists {
			val := m.GetTlsChoice().(*KafkaConfig_UseTls).UseTls
			vOpts := append(opts,
				db.WithValidateField("tls_choice"),
				db.WithValidateField("use_tls"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultKafkaConfigValidator = func() *ValidateKafkaConfig {
	v := &ValidateKafkaConfig{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhTlsChoice := v.TlsChoiceValidationRuleHandler
	rulesTlsChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhTlsChoice(rulesTlsChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for KafkaConfig.tls_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["tls_choice"] = vFn

	vrhBootstrapServers := v.BootstrapServersValidationRuleHandler
	rulesBootstrapServers := map[string]string{
		"ves.io.schema.rules.message.required":                "true",
		"ves.io.schema.rules.repeated.items.string.hostport":  "true",
		"ves.io.schema.rules.repeated.items.string.max_bytes": "256",
		"ves.io.schema.rules.repeated.max_items":              "8",
		"ves.io.schema.rules.repeated.min_items":              "1",
		"ves.io.schema.rules.repeated.unique":                 "true",
	}
	vFn, err = vrhBootstrapServers(rulesBootstrapServers)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for KafkaConfig.bootstrap_servers: %s", err)
		panic(errMsg)
	}
	v.FldValidators["bootstrap_servers"] = vFn

	vrhKafkaTopic := v.KafkaTopicValidationRuleHandler
	rulesKafkaTopic := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "255",
		"ves.io.schema.rules.string.min_len":   "3",
		"ves.io.schema.rules.string.pattern":   "^[a-zA-Z0-9\\._\\-]+$",
	}
	vFn, err = vrhKafkaTopic(rulesKafkaTopic)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for KafkaConfig.kafka_topic: %s", err)
		panic(errMsg)
	}
	v.FldValidators["kafka_topic"] = vFn

	v.FldValidators["tls_choice.use_tls"] = TLSConfigTypeValidator().Validate

	v.FldValidators["compression"] = CompressionTypeValidator().Validate

	v.FldValidators["batch"] = BatchOptionTypeValidator().Validate

	return v
}()

func KafkaConfigValidator() db.Validator {
	return DefaultKafkaConfigValidator
}

// augmented methods on protoc/std generated struct

func (m *NSList) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *NSList) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *NSList) DeepCopy() *NSList {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &NSList{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *NSList) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *NSList) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return NSListValidator().Validate(ctx, m, opts...)
}

type ValidateNSList struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateNSList) NamespacesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for namespaces")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for namespaces")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated namespaces")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items namespaces")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateNSList) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*NSList)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *NSList got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["namespaces"]; exists {
		vOpts := append(opts, db.WithValidateField("namespaces"))
		if err := fv(ctx, m.GetNamespaces(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultNSListValidator = func() *ValidateNSList {
	v := &ValidateNSList{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhNamespaces := v.NamespacesValidationRuleHandler
	rulesNamespaces := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "16",
	}
	vFn, err = vrhNamespaces(rulesNamespaces)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for NSList.namespaces: %s", err)
		panic(errMsg)
	}
	v.FldValidators["namespaces"] = vFn

	return v
}()

func NSListValidator() db.Validator {
	return DefaultNSListValidator
}

// augmented methods on protoc/std generated struct

func (m *NewRelicConfig) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *NewRelicConfig) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *NewRelicConfig) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetApiKey().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting NewRelicConfig.api_key")
	}

	return nil
}

func (m *NewRelicConfig) DeepCopy() *NewRelicConfig {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &NewRelicConfig{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *NewRelicConfig) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *NewRelicConfig) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return NewRelicConfigValidator().Validate(ctx, m, opts...)
}

type ValidateNewRelicConfig struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateNewRelicConfig) EndpointChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for endpoint_choice")
	}
	return validatorFn, nil
}

func (v *ValidateNewRelicConfig) ApiKeyValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for api_key")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.SecretTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateNewRelicConfig) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*NewRelicConfig)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *NewRelicConfig got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["api_key"]; exists {

		vOpts := append(opts, db.WithValidateField("api_key"))
		if err := fv(ctx, m.GetApiKey(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["endpoint_choice"]; exists {
		val := m.GetEndpointChoice()
		vOpts := append(opts,
			db.WithValidateField("endpoint_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetEndpointChoice().(type) {
	case *NewRelicConfig_Us:
		if fv, exists := v.FldValidators["endpoint_choice.us"]; exists {
			val := m.GetEndpointChoice().(*NewRelicConfig_Us).Us
			vOpts := append(opts,
				db.WithValidateField("endpoint_choice"),
				db.WithValidateField("us"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *NewRelicConfig_Eu:
		if fv, exists := v.FldValidators["endpoint_choice.eu"]; exists {
			val := m.GetEndpointChoice().(*NewRelicConfig_Eu).Eu
			vOpts := append(opts,
				db.WithValidateField("endpoint_choice"),
				db.WithValidateField("eu"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultNewRelicConfigValidator = func() *ValidateNewRelicConfig {
	v := &ValidateNewRelicConfig{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhEndpointChoice := v.EndpointChoiceValidationRuleHandler
	rulesEndpointChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhEndpointChoice(rulesEndpointChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for NewRelicConfig.endpoint_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["endpoint_choice"] = vFn

	vrhApiKey := v.ApiKeyValidationRuleHandler
	rulesApiKey := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhApiKey(rulesApiKey)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for NewRelicConfig.api_key: %s", err)
		panic(errMsg)
	}
	v.FldValidators["api_key"] = vFn

	return v
}()

func NewRelicConfigValidator() db.Validator {
	return DefaultNewRelicConfigValidator
}

// augmented methods on protoc/std generated struct

func (m *QRadarConfig) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *QRadarConfig) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *QRadarConfig) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetUseTls().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting QRadarConfig.use_tls")
	}

	return nil
}

func (m *QRadarConfig) DeepCopy() *QRadarConfig {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &QRadarConfig{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *QRadarConfig) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *QRadarConfig) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return QRadarConfigValidator().Validate(ctx, m, opts...)
}

type ValidateQRadarConfig struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateQRadarConfig) TlsChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for tls_choice")
	}
	return validatorFn, nil
}

func (v *ValidateQRadarConfig) UriValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for uri")
	}

	return validatorFn, nil
}

func (v *ValidateQRadarConfig) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*QRadarConfig)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *QRadarConfig got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["batch"]; exists {

		vOpts := append(opts, db.WithValidateField("batch"))
		if err := fv(ctx, m.GetBatch(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["compression"]; exists {

		vOpts := append(opts, db.WithValidateField("compression"))
		if err := fv(ctx, m.GetCompression(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tls_choice"]; exists {
		val := m.GetTlsChoice()
		vOpts := append(opts,
			db.WithValidateField("tls_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetTlsChoice().(type) {
	case *QRadarConfig_NoTls:
		if fv, exists := v.FldValidators["tls_choice.no_tls"]; exists {
			val := m.GetTlsChoice().(*QRadarConfig_NoTls).NoTls
			vOpts := append(opts,
				db.WithValidateField("tls_choice"),
				db.WithValidateField("no_tls"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *QRadarConfig_UseTls:
		if fv, exists := v.FldValidators["tls_choice.use_tls"]; exists {
			val := m.GetTlsChoice().(*QRadarConfig_UseTls).UseTls
			vOpts := append(opts,
				db.WithValidateField("tls_choice"),
				db.WithValidateField("use_tls"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["uri"]; exists {

		vOpts := append(opts, db.WithValidateField("uri"))
		if err := fv(ctx, m.GetUri(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultQRadarConfigValidator = func() *ValidateQRadarConfig {
	v := &ValidateQRadarConfig{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhTlsChoice := v.TlsChoiceValidationRuleHandler
	rulesTlsChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhTlsChoice(rulesTlsChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for QRadarConfig.tls_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["tls_choice"] = vFn

	vrhUri := v.UriValidationRuleHandler
	rulesUri := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.uri_ref":   "true",
	}
	vFn, err = vrhUri(rulesUri)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for QRadarConfig.uri: %s", err)
		panic(errMsg)
	}
	v.FldValidators["uri"] = vFn

	v.FldValidators["tls_choice.use_tls"] = TLSConfigTypeValidator().Validate

	v.FldValidators["compression"] = CompressionTypeValidator().Validate

	v.FldValidators["batch"] = BatchOptionTypeValidator().Validate

	return v
}()

func QRadarConfigValidator() db.Validator {
	return DefaultQRadarConfigValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *ReplaceSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetHttpReceiver().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ReplaceSpecType.http_receiver")
	}

	if err := m.GetDatadogReceiver().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ReplaceSpecType.datadog_receiver")
	}

	if err := m.GetSplunkReceiver().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ReplaceSpecType.splunk_receiver")
	}

	if err := m.GetElasticReceiver().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ReplaceSpecType.elastic_receiver")
	}

	if err := m.GetAzureReceiver().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ReplaceSpecType.azure_receiver")
	}

	if err := m.GetAzureEventHubsReceiver().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ReplaceSpecType.azure_event_hubs_receiver")
	}

	if err := m.GetKafkaReceiver().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ReplaceSpecType.kafka_receiver")
	}

	if err := m.GetNewRelicReceiver().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ReplaceSpecType.new_relic_receiver")
	}

	if err := m.GetSumoLogicReceiver().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ReplaceSpecType.sumo_logic_receiver")
	}

	if err := m.GetQradarReceiver().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ReplaceSpecType.qradar_receiver")
	}

	return nil
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *ReplaceSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetReceiverDRefInfo()

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetReceiverDRefInfo() ([]db.DRefInfo, error) {
	if m.GetReceiver() == nil {
		return nil, nil
	}
	switch m.GetReceiver().(type) {
	case *ReplaceSpecType_S3Receiver:

		drInfos, err := m.GetS3Receiver().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetS3Receiver().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "s3_receiver." + dri.DRField
		}
		return drInfos, err

	case *ReplaceSpecType_HttpReceiver:

		return nil, nil

	case *ReplaceSpecType_DatadogReceiver:

		return nil, nil

	case *ReplaceSpecType_SplunkReceiver:

		return nil, nil

	case *ReplaceSpecType_ElasticReceiver:

		drInfos, err := m.GetElasticReceiver().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetElasticReceiver().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "elastic_receiver." + dri.DRField
		}
		return drInfos, err

	case *ReplaceSpecType_AzureReceiver:

		return nil, nil

	case *ReplaceSpecType_AzureEventHubsReceiver:

		return nil, nil

	case *ReplaceSpecType_AwsCloudWatchReceiver:

		drInfos, err := m.GetAwsCloudWatchReceiver().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetAwsCloudWatchReceiver().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "aws_cloud_watch_receiver." + dri.DRField
		}
		return drInfos, err

	case *ReplaceSpecType_KafkaReceiver:

		return nil, nil

	case *ReplaceSpecType_NewRelicReceiver:

		return nil, nil

	case *ReplaceSpecType_SumoLogicReceiver:

		return nil, nil

	case *ReplaceSpecType_QradarReceiver:

		return nil, nil

	case *ReplaceSpecType_GcpBucketReceiver:

		drInfos, err := m.GetGcpBucketReceiver().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetGcpBucketReceiver().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "gcp_bucket_receiver." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) FilterChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for filter_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) LogTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for log_type")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) ReceiverValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for receiver")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["filter_choice"]; exists {
		val := m.GetFilterChoice()
		vOpts := append(opts,
			db.WithValidateField("filter_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetFilterChoice().(type) {
	case *ReplaceSpecType_NsCurrent:
		if fv, exists := v.FldValidators["filter_choice.ns_current"]; exists {
			val := m.GetFilterChoice().(*ReplaceSpecType_NsCurrent).NsCurrent
			vOpts := append(opts,
				db.WithValidateField("filter_choice"),
				db.WithValidateField("ns_current"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_NsAll:
		if fv, exists := v.FldValidators["filter_choice.ns_all"]; exists {
			val := m.GetFilterChoice().(*ReplaceSpecType_NsAll).NsAll
			vOpts := append(opts,
				db.WithValidateField("filter_choice"),
				db.WithValidateField("ns_all"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_NsList:
		if fv, exists := v.FldValidators["filter_choice.ns_list"]; exists {
			val := m.GetFilterChoice().(*ReplaceSpecType_NsList).NsList
			vOpts := append(opts,
				db.WithValidateField("filter_choice"),
				db.WithValidateField("ns_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_NsSystem:
		if fv, exists := v.FldValidators["filter_choice.ns_system"]; exists {
			val := m.GetFilterChoice().(*ReplaceSpecType_NsSystem).NsSystem
			vOpts := append(opts,
				db.WithValidateField("filter_choice"),
				db.WithValidateField("ns_system"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["log_type"]; exists {
		val := m.GetLogType()
		vOpts := append(opts,
			db.WithValidateField("log_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetLogType().(type) {
	case *ReplaceSpecType_RequestLogs:
		if fv, exists := v.FldValidators["log_type.request_logs"]; exists {
			val := m.GetLogType().(*ReplaceSpecType_RequestLogs).RequestLogs
			vOpts := append(opts,
				db.WithValidateField("log_type"),
				db.WithValidateField("request_logs"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_SecurityEvents:
		if fv, exists := v.FldValidators["log_type.security_events"]; exists {
			val := m.GetLogType().(*ReplaceSpecType_SecurityEvents).SecurityEvents
			vOpts := append(opts,
				db.WithValidateField("log_type"),
				db.WithValidateField("security_events"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_AuditLogs:
		if fv, exists := v.FldValidators["log_type.audit_logs"]; exists {
			val := m.GetLogType().(*ReplaceSpecType_AuditLogs).AuditLogs
			vOpts := append(opts,
				db.WithValidateField("log_type"),
				db.WithValidateField("audit_logs"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_DnsLogs:
		if fv, exists := v.FldValidators["log_type.dns_logs"]; exists {
			val := m.GetLogType().(*ReplaceSpecType_DnsLogs).DnsLogs
			vOpts := append(opts,
				db.WithValidateField("log_type"),
				db.WithValidateField("dns_logs"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["receiver"]; exists {
		val := m.GetReceiver()
		vOpts := append(opts,
			db.WithValidateField("receiver"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetReceiver().(type) {
	case *ReplaceSpecType_S3Receiver:
		if fv, exists := v.FldValidators["receiver.s3_receiver"]; exists {
			val := m.GetReceiver().(*ReplaceSpecType_S3Receiver).S3Receiver
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("s3_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_HttpReceiver:
		if fv, exists := v.FldValidators["receiver.http_receiver"]; exists {
			val := m.GetReceiver().(*ReplaceSpecType_HttpReceiver).HttpReceiver
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("http_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_DatadogReceiver:
		if fv, exists := v.FldValidators["receiver.datadog_receiver"]; exists {
			val := m.GetReceiver().(*ReplaceSpecType_DatadogReceiver).DatadogReceiver
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("datadog_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_SplunkReceiver:
		if fv, exists := v.FldValidators["receiver.splunk_receiver"]; exists {
			val := m.GetReceiver().(*ReplaceSpecType_SplunkReceiver).SplunkReceiver
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("splunk_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_ElasticReceiver:
		if fv, exists := v.FldValidators["receiver.elastic_receiver"]; exists {
			val := m.GetReceiver().(*ReplaceSpecType_ElasticReceiver).ElasticReceiver
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("elastic_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_AzureReceiver:
		if fv, exists := v.FldValidators["receiver.azure_receiver"]; exists {
			val := m.GetReceiver().(*ReplaceSpecType_AzureReceiver).AzureReceiver
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("azure_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_AzureEventHubsReceiver:
		if fv, exists := v.FldValidators["receiver.azure_event_hubs_receiver"]; exists {
			val := m.GetReceiver().(*ReplaceSpecType_AzureEventHubsReceiver).AzureEventHubsReceiver
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("azure_event_hubs_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_AwsCloudWatchReceiver:
		if fv, exists := v.FldValidators["receiver.aws_cloud_watch_receiver"]; exists {
			val := m.GetReceiver().(*ReplaceSpecType_AwsCloudWatchReceiver).AwsCloudWatchReceiver
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("aws_cloud_watch_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_KafkaReceiver:
		if fv, exists := v.FldValidators["receiver.kafka_receiver"]; exists {
			val := m.GetReceiver().(*ReplaceSpecType_KafkaReceiver).KafkaReceiver
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("kafka_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_NewRelicReceiver:
		if fv, exists := v.FldValidators["receiver.new_relic_receiver"]; exists {
			val := m.GetReceiver().(*ReplaceSpecType_NewRelicReceiver).NewRelicReceiver
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("new_relic_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_SumoLogicReceiver:
		if fv, exists := v.FldValidators["receiver.sumo_logic_receiver"]; exists {
			val := m.GetReceiver().(*ReplaceSpecType_SumoLogicReceiver).SumoLogicReceiver
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("sumo_logic_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_QradarReceiver:
		if fv, exists := v.FldValidators["receiver.qradar_receiver"]; exists {
			val := m.GetReceiver().(*ReplaceSpecType_QradarReceiver).QradarReceiver
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("qradar_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_GcpBucketReceiver:
		if fv, exists := v.FldValidators["receiver.gcp_bucket_receiver"]; exists {
			val := m.GetReceiver().(*ReplaceSpecType_GcpBucketReceiver).GcpBucketReceiver
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("gcp_bucket_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhFilterChoice := v.FilterChoiceValidationRuleHandler
	rulesFilterChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhFilterChoice(rulesFilterChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.filter_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["filter_choice"] = vFn

	vrhLogType := v.LogTypeValidationRuleHandler
	rulesLogType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhLogType(rulesLogType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.log_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["log_type"] = vFn

	vrhReceiver := v.ReceiverValidationRuleHandler
	rulesReceiver := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhReceiver(rulesReceiver)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.receiver: %s", err)
		panic(errMsg)
	}
	v.FldValidators["receiver"] = vFn

	v.FldValidators["filter_choice.ns_list"] = NSListValidator().Validate

	v.FldValidators["receiver.s3_receiver"] = S3ConfigValidator().Validate
	v.FldValidators["receiver.http_receiver"] = HTTPConfigValidator().Validate
	v.FldValidators["receiver.datadog_receiver"] = DatadogConfigValidator().Validate
	v.FldValidators["receiver.splunk_receiver"] = SplunkConfigValidator().Validate
	v.FldValidators["receiver.elastic_receiver"] = ElasticConfigValidator().Validate
	v.FldValidators["receiver.azure_receiver"] = AzureBlobConfigValidator().Validate
	v.FldValidators["receiver.azure_event_hubs_receiver"] = AzureEventHubsConfigValidator().Validate
	v.FldValidators["receiver.aws_cloud_watch_receiver"] = AWSCloudwatchConfigValidator().Validate
	v.FldValidators["receiver.kafka_receiver"] = KafkaConfigValidator().Validate
	v.FldValidators["receiver.new_relic_receiver"] = NewRelicConfigValidator().Validate
	v.FldValidators["receiver.sumo_logic_receiver"] = SumoLogicConfigValidator().Validate
	v.FldValidators["receiver.qradar_receiver"] = QRadarConfigValidator().Validate
	v.FldValidators["receiver.gcp_bucket_receiver"] = GCPBucketConfigValidator().Validate

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *S3Config) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *S3Config) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *S3Config) DeepCopy() *S3Config {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &S3Config{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *S3Config) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *S3Config) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return S3ConfigValidator().Validate(ctx, m, opts...)
}

func (m *S3Config) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetAwsCredDRefInfo()

}

func (m *S3Config) GetAwsCredDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetAwsCred()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("cloud_credentials.Object")
	dri := db.DRefInfo{
		RefdType:   "cloud_credentials.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "aws_cred",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetAwsCredDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *S3Config) GetAwsCredDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "cloud_credentials.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: cloud_credentials")
	}

	vref := m.GetAwsCred()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "cloud_credentials.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

type ValidateS3Config struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateS3Config) BucketValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for bucket")
	}

	return validatorFn, nil
}

func (v *ValidateS3Config) AwsCredValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for aws_cred")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateS3Config) AwsRegionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for aws_region")
	}

	return validatorFn, nil
}

func (v *ValidateS3Config) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*S3Config)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *S3Config got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["aws_cred"]; exists {

		vOpts := append(opts, db.WithValidateField("aws_cred"))
		if err := fv(ctx, m.GetAwsCred(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["aws_region"]; exists {

		vOpts := append(opts, db.WithValidateField("aws_region"))
		if err := fv(ctx, m.GetAwsRegion(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["batch"]; exists {

		vOpts := append(opts, db.WithValidateField("batch"))
		if err := fv(ctx, m.GetBatch(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["bucket"]; exists {

		vOpts := append(opts, db.WithValidateField("bucket"))
		if err := fv(ctx, m.GetBucket(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["compression"]; exists {

		vOpts := append(opts, db.WithValidateField("compression"))
		if err := fv(ctx, m.GetCompression(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["filename_options"]; exists {

		vOpts := append(opts, db.WithValidateField("filename_options"))
		if err := fv(ctx, m.GetFilenameOptions(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultS3ConfigValidator = func() *ValidateS3Config {
	v := &ValidateS3Config{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhBucket := v.BucketValidationRuleHandler
	rulesBucket := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "128",
		"ves.io.schema.rules.string.min_len":   "3",
		"ves.io.schema.rules.string.pattern":   "^[a-z0-9]+[a-z0-9\\.-]+[a-z0-9]$",
	}
	vFn, err = vrhBucket(rulesBucket)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for S3Config.bucket: %s", err)
		panic(errMsg)
	}
	v.FldValidators["bucket"] = vFn

	vrhAwsCred := v.AwsCredValidationRuleHandler
	rulesAwsCred := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhAwsCred(rulesAwsCred)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for S3Config.aws_cred: %s", err)
		panic(errMsg)
	}
	v.FldValidators["aws_cred"] = vFn

	vrhAwsRegion := v.AwsRegionValidationRuleHandler
	rulesAwsRegion := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.in":        "[\"ap-northeast-1\",\"ap-southeast-1\",\"eu-central-1\",\"eu-west-1\",\"eu-west-3\",\"sa-east-1\",\"us-east-1\",\"us-east-2\",\"us-west-2\",\"ca-central-1\",\"af-south-1\",\"ap-east-1\",\"ap-south-1\",\"ap-northeast-2\",\"ap-southeast-2\",\"eu-south-1\",\"eu-north-1\",\"eu-west-2\",\"me-south-1\",\"us-west-1\",\"ap-southeast-3\"]",
	}
	vFn, err = vrhAwsRegion(rulesAwsRegion)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for S3Config.aws_region: %s", err)
		panic(errMsg)
	}
	v.FldValidators["aws_region"] = vFn

	v.FldValidators["compression"] = CompressionTypeValidator().Validate

	v.FldValidators["batch"] = BatchOptionTypeValidator().Validate

	v.FldValidators["filename_options"] = FilenameOptionsTypeValidator().Validate

	return v
}()

func S3ConfigValidator() db.Validator {
	return DefaultS3ConfigValidator
}

// augmented methods on protoc/std generated struct

func (m *SplunkConfig) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SplunkConfig) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *SplunkConfig) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetSplunkHecToken().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting SplunkConfig.splunk_hec_token")
	}

	if err := m.GetUseTls().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting SplunkConfig.use_tls")
	}

	return nil
}

func (m *SplunkConfig) DeepCopy() *SplunkConfig {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SplunkConfig{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SplunkConfig) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SplunkConfig) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SplunkConfigValidator().Validate(ctx, m, opts...)
}

type ValidateSplunkConfig struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSplunkConfig) TlsChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for tls_choice")
	}
	return validatorFn, nil
}

func (v *ValidateSplunkConfig) EndpointValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for endpoint")
	}

	return validatorFn, nil
}

func (v *ValidateSplunkConfig) SplunkHecTokenValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for splunk_hec_token")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.SecretTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateSplunkConfig) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SplunkConfig)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SplunkConfig got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["batch"]; exists {

		vOpts := append(opts, db.WithValidateField("batch"))
		if err := fv(ctx, m.GetBatch(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["compression"]; exists {

		vOpts := append(opts, db.WithValidateField("compression"))
		if err := fv(ctx, m.GetCompression(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["endpoint"]; exists {

		vOpts := append(opts, db.WithValidateField("endpoint"))
		if err := fv(ctx, m.GetEndpoint(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["splunk_hec_token"]; exists {

		vOpts := append(opts, db.WithValidateField("splunk_hec_token"))
		if err := fv(ctx, m.GetSplunkHecToken(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tls_choice"]; exists {
		val := m.GetTlsChoice()
		vOpts := append(opts,
			db.WithValidateField("tls_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetTlsChoice().(type) {
	case *SplunkConfig_NoTls:
		if fv, exists := v.FldValidators["tls_choice.no_tls"]; exists {
			val := m.GetTlsChoice().(*SplunkConfig_NoTls).NoTls
			vOpts := append(opts,
				db.WithValidateField("tls_choice"),
				db.WithValidateField("no_tls"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *SplunkConfig_UseTls:
		if fv, exists := v.FldValidators["tls_choice.use_tls"]; exists {
			val := m.GetTlsChoice().(*SplunkConfig_UseTls).UseTls
			vOpts := append(opts,
				db.WithValidateField("tls_choice"),
				db.WithValidateField("use_tls"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSplunkConfigValidator = func() *ValidateSplunkConfig {
	v := &ValidateSplunkConfig{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhTlsChoice := v.TlsChoiceValidationRuleHandler
	rulesTlsChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhTlsChoice(rulesTlsChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SplunkConfig.tls_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["tls_choice"] = vFn

	vrhEndpoint := v.EndpointValidationRuleHandler
	rulesEndpoint := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.uri_ref":   "true",
	}
	vFn, err = vrhEndpoint(rulesEndpoint)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SplunkConfig.endpoint: %s", err)
		panic(errMsg)
	}
	v.FldValidators["endpoint"] = vFn

	vrhSplunkHecToken := v.SplunkHecTokenValidationRuleHandler
	rulesSplunkHecToken := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhSplunkHecToken(rulesSplunkHecToken)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SplunkConfig.splunk_hec_token: %s", err)
		panic(errMsg)
	}
	v.FldValidators["splunk_hec_token"] = vFn

	v.FldValidators["tls_choice.use_tls"] = TLSConfigTypeValidator().Validate

	v.FldValidators["compression"] = CompressionTypeValidator().Validate

	v.FldValidators["batch"] = BatchOptionTypeValidator().Validate

	return v
}()

func SplunkConfigValidator() db.Validator {
	return DefaultSplunkConfigValidator
}

// augmented methods on protoc/std generated struct

func (m *SumoLogicConfig) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SumoLogicConfig) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *SumoLogicConfig) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetUrl().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting SumoLogicConfig.url")
	}

	return nil
}

func (m *SumoLogicConfig) DeepCopy() *SumoLogicConfig {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SumoLogicConfig{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SumoLogicConfig) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SumoLogicConfig) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SumoLogicConfigValidator().Validate(ctx, m, opts...)
}

type ValidateSumoLogicConfig struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSumoLogicConfig) UrlValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for url")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.SecretTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateSumoLogicConfig) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SumoLogicConfig)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SumoLogicConfig got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["url"]; exists {

		vOpts := append(opts, db.WithValidateField("url"))
		if err := fv(ctx, m.GetUrl(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSumoLogicConfigValidator = func() *ValidateSumoLogicConfig {
	v := &ValidateSumoLogicConfig{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhUrl := v.UrlValidationRuleHandler
	rulesUrl := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.uri_ref":   "true",
	}
	vFn, err = vrhUrl(rulesUrl)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SumoLogicConfig.url: %s", err)
		panic(errMsg)
	}
	v.FldValidators["url"] = vFn

	return v
}()

func SumoLogicConfigValidator() db.Validator {
	return DefaultSumoLogicConfigValidator
}

// augmented methods on protoc/std generated struct

func (m *TLSClientConfigType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *TLSClientConfigType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *TLSClientConfigType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetKeyUrl().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting TLSClientConfigType.key_url")
	}

	return nil
}

func (m *TLSClientConfigType) DeepCopy() *TLSClientConfigType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &TLSClientConfigType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *TLSClientConfigType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *TLSClientConfigType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return TLSClientConfigTypeValidator().Validate(ctx, m, opts...)
}

type ValidateTLSClientConfigType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateTLSClientConfigType) CertificateValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for certificate")
	}

	return validatorFn, nil
}

func (v *ValidateTLSClientConfigType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*TLSClientConfigType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *TLSClientConfigType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["certificate"]; exists {

		vOpts := append(opts, db.WithValidateField("certificate"))
		if err := fv(ctx, m.GetCertificate(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["key_url"]; exists {

		vOpts := append(opts, db.WithValidateField("key_url"))
		if err := fv(ctx, m.GetKeyUrl(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultTLSClientConfigTypeValidator = func() *ValidateTLSClientConfigType {
	v := &ValidateTLSClientConfigType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhCertificate := v.CertificateValidationRuleHandler
	rulesCertificate := map[string]string{
		"ves.io.schema.rules.string.max_bytes": "131072",
		"ves.io.schema.rules.string.uri_ref":   "true",
	}
	vFn, err = vrhCertificate(rulesCertificate)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for TLSClientConfigType.certificate: %s", err)
		panic(errMsg)
	}
	v.FldValidators["certificate"] = vFn

	v.FldValidators["key_url"] = ves_io_schema.SecretTypeValidator().Validate

	return v
}()

func TLSClientConfigTypeValidator() db.Validator {
	return DefaultTLSClientConfigTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *TLSConfigType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *TLSConfigType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *TLSConfigType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetMtlsEnable().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting TLSConfigType.mtls_enable")
	}

	return nil
}

func (m *TLSConfigType) DeepCopy() *TLSConfigType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &TLSConfigType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *TLSConfigType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *TLSConfigType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return TLSConfigTypeValidator().Validate(ctx, m, opts...)
}

type ValidateTLSConfigType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateTLSConfigType) CaChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ca_choice")
	}
	return validatorFn, nil
}

func (v *ValidateTLSConfigType) CaChoiceTrustedCaUrlValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_TrustedCaUrl, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for trusted_ca_url")
	}
	return oValidatorFn_TrustedCaUrl, nil
}

func (v *ValidateTLSConfigType) MtlsChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for mtls_choice")
	}
	return validatorFn, nil
}

func (v *ValidateTLSConfigType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*TLSConfigType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *TLSConfigType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["ca_choice"]; exists {
		val := m.GetCaChoice()
		vOpts := append(opts,
			db.WithValidateField("ca_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetCaChoice().(type) {
	case *TLSConfigType_NoCa:
		if fv, exists := v.FldValidators["ca_choice.no_ca"]; exists {
			val := m.GetCaChoice().(*TLSConfigType_NoCa).NoCa
			vOpts := append(opts,
				db.WithValidateField("ca_choice"),
				db.WithValidateField("no_ca"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *TLSConfigType_TrustedCaUrl:
		if fv, exists := v.FldValidators["ca_choice.trusted_ca_url"]; exists {
			val := m.GetCaChoice().(*TLSConfigType_TrustedCaUrl).TrustedCaUrl
			vOpts := append(opts,
				db.WithValidateField("ca_choice"),
				db.WithValidateField("trusted_ca_url"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["mtls_choice"]; exists {
		val := m.GetMtlsChoice()
		vOpts := append(opts,
			db.WithValidateField("mtls_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetMtlsChoice().(type) {
	case *TLSConfigType_MtlsDisabled:
		if fv, exists := v.FldValidators["mtls_choice.mtls_disabled"]; exists {
			val := m.GetMtlsChoice().(*TLSConfigType_MtlsDisabled).MtlsDisabled
			vOpts := append(opts,
				db.WithValidateField("mtls_choice"),
				db.WithValidateField("mtls_disabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *TLSConfigType_MtlsEnable:
		if fv, exists := v.FldValidators["mtls_choice.mtls_enable"]; exists {
			val := m.GetMtlsChoice().(*TLSConfigType_MtlsEnable).MtlsEnable
			vOpts := append(opts,
				db.WithValidateField("mtls_choice"),
				db.WithValidateField("mtls_enable"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetVerifyCertificate().(type) {
	case *TLSConfigType_EnableVerifyCertificate:
		if fv, exists := v.FldValidators["verify_certificate.enable_verify_certificate"]; exists {
			val := m.GetVerifyCertificate().(*TLSConfigType_EnableVerifyCertificate).EnableVerifyCertificate
			vOpts := append(opts,
				db.WithValidateField("verify_certificate"),
				db.WithValidateField("enable_verify_certificate"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *TLSConfigType_DisableVerifyCertificate:
		if fv, exists := v.FldValidators["verify_certificate.disable_verify_certificate"]; exists {
			val := m.GetVerifyCertificate().(*TLSConfigType_DisableVerifyCertificate).DisableVerifyCertificate
			vOpts := append(opts,
				db.WithValidateField("verify_certificate"),
				db.WithValidateField("disable_verify_certificate"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetVerifyHostname().(type) {
	case *TLSConfigType_EnableVerifyHostname:
		if fv, exists := v.FldValidators["verify_hostname.enable_verify_hostname"]; exists {
			val := m.GetVerifyHostname().(*TLSConfigType_EnableVerifyHostname).EnableVerifyHostname
			vOpts := append(opts,
				db.WithValidateField("verify_hostname"),
				db.WithValidateField("enable_verify_hostname"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *TLSConfigType_DisableVerifyHostname:
		if fv, exists := v.FldValidators["verify_hostname.disable_verify_hostname"]; exists {
			val := m.GetVerifyHostname().(*TLSConfigType_DisableVerifyHostname).DisableVerifyHostname
			vOpts := append(opts,
				db.WithValidateField("verify_hostname"),
				db.WithValidateField("disable_verify_hostname"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultTLSConfigTypeValidator = func() *ValidateTLSConfigType {
	v := &ValidateTLSConfigType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhCaChoice := v.CaChoiceValidationRuleHandler
	rulesCaChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhCaChoice(rulesCaChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for TLSConfigType.ca_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ca_choice"] = vFn

	vrhCaChoiceTrustedCaUrl := v.CaChoiceTrustedCaUrlValidationRuleHandler
	rulesCaChoiceTrustedCaUrl := map[string]string{
		"ves.io.schema.rules.string.max_bytes":      "131072",
		"ves.io.schema.rules.string.truststore_url": "true",
		"ves.io.schema.rules.string.uri_ref":        "true",
	}
	vFnMap["ca_choice.trusted_ca_url"], err = vrhCaChoiceTrustedCaUrl(rulesCaChoiceTrustedCaUrl)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field TLSConfigType.ca_choice_trusted_ca_url: %s", err)
		panic(errMsg)
	}

	v.FldValidators["ca_choice.trusted_ca_url"] = vFnMap["ca_choice.trusted_ca_url"]

	vrhMtlsChoice := v.MtlsChoiceValidationRuleHandler
	rulesMtlsChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhMtlsChoice(rulesMtlsChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for TLSConfigType.mtls_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["mtls_choice"] = vFn

	v.FldValidators["mtls_choice.mtls_enable"] = TLSClientConfigTypeValidator().Validate

	return v
}()

func TLSConfigTypeValidator() db.Validator {
	return DefaultTLSConfigTypeValidator
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetFilterChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.FilterChoice.(type) {
	case nil:
		o.FilterChoice = nil

	case *CreateSpecType_NsAll:
		o.FilterChoice = &GlobalSpecType_NsAll{NsAll: of.NsAll}

	case *CreateSpecType_NsCurrent:
		o.FilterChoice = &GlobalSpecType_NsCurrent{NsCurrent: of.NsCurrent}

	case *CreateSpecType_NsList:
		o.FilterChoice = &GlobalSpecType_NsList{NsList: of.NsList}

	case *CreateSpecType_NsSystem:
		o.FilterChoice = &GlobalSpecType_NsSystem{NsSystem: of.NsSystem}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetFilterChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.FilterChoice.(type) {
	case nil:
		r.FilterChoice = nil

	case *GlobalSpecType_NsAll:
		r.FilterChoice = &CreateSpecType_NsAll{NsAll: of.NsAll}

	case *GlobalSpecType_NsCurrent:
		r.FilterChoice = &CreateSpecType_NsCurrent{NsCurrent: of.NsCurrent}

	case *GlobalSpecType_NsList:
		r.FilterChoice = &CreateSpecType_NsList{NsList: of.NsList}

	case *GlobalSpecType_NsSystem:
		r.FilterChoice = &CreateSpecType_NsSystem{NsSystem: of.NsSystem}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetLogTypeToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.LogType.(type) {
	case nil:
		o.LogType = nil

	case *CreateSpecType_AuditLogs:
		o.LogType = &GlobalSpecType_AuditLogs{AuditLogs: of.AuditLogs}

	case *CreateSpecType_DnsLogs:
		o.LogType = &GlobalSpecType_DnsLogs{DnsLogs: of.DnsLogs}

	case *CreateSpecType_RequestLogs:
		o.LogType = &GlobalSpecType_RequestLogs{RequestLogs: of.RequestLogs}

	case *CreateSpecType_SecurityEvents:
		o.LogType = &GlobalSpecType_SecurityEvents{SecurityEvents: of.SecurityEvents}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetLogTypeFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.LogType.(type) {
	case nil:
		r.LogType = nil

	case *GlobalSpecType_AuditLogs:
		r.LogType = &CreateSpecType_AuditLogs{AuditLogs: of.AuditLogs}

	case *GlobalSpecType_DnsLogs:
		r.LogType = &CreateSpecType_DnsLogs{DnsLogs: of.DnsLogs}

	case *GlobalSpecType_RequestLogs:
		r.LogType = &CreateSpecType_RequestLogs{RequestLogs: of.RequestLogs}

	case *GlobalSpecType_SecurityEvents:
		r.LogType = &CreateSpecType_SecurityEvents{SecurityEvents: of.SecurityEvents}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetReceiverToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.Receiver.(type) {
	case nil:
		o.Receiver = nil

	case *CreateSpecType_AwsCloudWatchReceiver:
		o.Receiver = &GlobalSpecType_AwsCloudWatchReceiver{AwsCloudWatchReceiver: of.AwsCloudWatchReceiver}

	case *CreateSpecType_AzureEventHubsReceiver:
		o.Receiver = &GlobalSpecType_AzureEventHubsReceiver{AzureEventHubsReceiver: of.AzureEventHubsReceiver}

	case *CreateSpecType_AzureReceiver:
		o.Receiver = &GlobalSpecType_AzureReceiver{AzureReceiver: of.AzureReceiver}

	case *CreateSpecType_DatadogReceiver:
		o.Receiver = &GlobalSpecType_DatadogReceiver{DatadogReceiver: of.DatadogReceiver}

	case *CreateSpecType_ElasticReceiver:
		o.Receiver = &GlobalSpecType_ElasticReceiver{ElasticReceiver: of.ElasticReceiver}

	case *CreateSpecType_GcpBucketReceiver:
		o.Receiver = &GlobalSpecType_GcpBucketReceiver{GcpBucketReceiver: of.GcpBucketReceiver}

	case *CreateSpecType_HttpReceiver:
		o.Receiver = &GlobalSpecType_HttpReceiver{HttpReceiver: of.HttpReceiver}

	case *CreateSpecType_KafkaReceiver:
		o.Receiver = &GlobalSpecType_KafkaReceiver{KafkaReceiver: of.KafkaReceiver}

	case *CreateSpecType_NewRelicReceiver:
		o.Receiver = &GlobalSpecType_NewRelicReceiver{NewRelicReceiver: of.NewRelicReceiver}

	case *CreateSpecType_QradarReceiver:
		o.Receiver = &GlobalSpecType_QradarReceiver{QradarReceiver: of.QradarReceiver}

	case *CreateSpecType_S3Receiver:
		o.Receiver = &GlobalSpecType_S3Receiver{S3Receiver: of.S3Receiver}

	case *CreateSpecType_SplunkReceiver:
		o.Receiver = &GlobalSpecType_SplunkReceiver{SplunkReceiver: of.SplunkReceiver}

	case *CreateSpecType_SumoLogicReceiver:
		o.Receiver = &GlobalSpecType_SumoLogicReceiver{SumoLogicReceiver: of.SumoLogicReceiver}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetReceiverFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.Receiver.(type) {
	case nil:
		r.Receiver = nil

	case *GlobalSpecType_AwsCloudWatchReceiver:
		r.Receiver = &CreateSpecType_AwsCloudWatchReceiver{AwsCloudWatchReceiver: of.AwsCloudWatchReceiver}

	case *GlobalSpecType_AzureEventHubsReceiver:
		r.Receiver = &CreateSpecType_AzureEventHubsReceiver{AzureEventHubsReceiver: of.AzureEventHubsReceiver}

	case *GlobalSpecType_AzureReceiver:
		r.Receiver = &CreateSpecType_AzureReceiver{AzureReceiver: of.AzureReceiver}

	case *GlobalSpecType_DatadogReceiver:
		r.Receiver = &CreateSpecType_DatadogReceiver{DatadogReceiver: of.DatadogReceiver}

	case *GlobalSpecType_ElasticReceiver:
		r.Receiver = &CreateSpecType_ElasticReceiver{ElasticReceiver: of.ElasticReceiver}

	case *GlobalSpecType_GcpBucketReceiver:
		r.Receiver = &CreateSpecType_GcpBucketReceiver{GcpBucketReceiver: of.GcpBucketReceiver}

	case *GlobalSpecType_HttpReceiver:
		r.Receiver = &CreateSpecType_HttpReceiver{HttpReceiver: of.HttpReceiver}

	case *GlobalSpecType_KafkaReceiver:
		r.Receiver = &CreateSpecType_KafkaReceiver{KafkaReceiver: of.KafkaReceiver}

	case *GlobalSpecType_NewRelicReceiver:
		r.Receiver = &CreateSpecType_NewRelicReceiver{NewRelicReceiver: of.NewRelicReceiver}

	case *GlobalSpecType_QradarReceiver:
		r.Receiver = &CreateSpecType_QradarReceiver{QradarReceiver: of.QradarReceiver}

	case *GlobalSpecType_S3Receiver:
		r.Receiver = &CreateSpecType_S3Receiver{S3Receiver: of.S3Receiver}

	case *GlobalSpecType_SplunkReceiver:
		r.Receiver = &CreateSpecType_SplunkReceiver{SplunkReceiver: of.SplunkReceiver}

	case *GlobalSpecType_SumoLogicReceiver:
		r.Receiver = &CreateSpecType_SumoLogicReceiver{SumoLogicReceiver: of.SumoLogicReceiver}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *CreateSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetFilterChoiceFromGlobalSpecType(f)
	m.GetLogTypeFromGlobalSpecType(f)
	m.GetReceiverFromGlobalSpecType(f)
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *CreateSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *CreateSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetFilterChoiceToGlobalSpecType(f)
	m1.SetLogTypeToGlobalSpecType(f)
	m1.SetReceiverToGlobalSpecType(f)
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *CreateSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetFilterChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.FilterChoice.(type) {
	case nil:
		o.FilterChoice = nil

	case *GetSpecType_NsAll:
		o.FilterChoice = &GlobalSpecType_NsAll{NsAll: of.NsAll}

	case *GetSpecType_NsCurrent:
		o.FilterChoice = &GlobalSpecType_NsCurrent{NsCurrent: of.NsCurrent}

	case *GetSpecType_NsList:
		o.FilterChoice = &GlobalSpecType_NsList{NsList: of.NsList}

	case *GetSpecType_NsSystem:
		o.FilterChoice = &GlobalSpecType_NsSystem{NsSystem: of.NsSystem}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetFilterChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.FilterChoice.(type) {
	case nil:
		r.FilterChoice = nil

	case *GlobalSpecType_NsAll:
		r.FilterChoice = &GetSpecType_NsAll{NsAll: of.NsAll}

	case *GlobalSpecType_NsCurrent:
		r.FilterChoice = &GetSpecType_NsCurrent{NsCurrent: of.NsCurrent}

	case *GlobalSpecType_NsList:
		r.FilterChoice = &GetSpecType_NsList{NsList: of.NsList}

	case *GlobalSpecType_NsSystem:
		r.FilterChoice = &GetSpecType_NsSystem{NsSystem: of.NsSystem}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetLogTypeToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.LogType.(type) {
	case nil:
		o.LogType = nil

	case *GetSpecType_AuditLogs:
		o.LogType = &GlobalSpecType_AuditLogs{AuditLogs: of.AuditLogs}

	case *GetSpecType_DnsLogs:
		o.LogType = &GlobalSpecType_DnsLogs{DnsLogs: of.DnsLogs}

	case *GetSpecType_RequestLogs:
		o.LogType = &GlobalSpecType_RequestLogs{RequestLogs: of.RequestLogs}

	case *GetSpecType_SecurityEvents:
		o.LogType = &GlobalSpecType_SecurityEvents{SecurityEvents: of.SecurityEvents}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetLogTypeFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.LogType.(type) {
	case nil:
		r.LogType = nil

	case *GlobalSpecType_AuditLogs:
		r.LogType = &GetSpecType_AuditLogs{AuditLogs: of.AuditLogs}

	case *GlobalSpecType_DnsLogs:
		r.LogType = &GetSpecType_DnsLogs{DnsLogs: of.DnsLogs}

	case *GlobalSpecType_RequestLogs:
		r.LogType = &GetSpecType_RequestLogs{RequestLogs: of.RequestLogs}

	case *GlobalSpecType_SecurityEvents:
		r.LogType = &GetSpecType_SecurityEvents{SecurityEvents: of.SecurityEvents}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetReceiverToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.Receiver.(type) {
	case nil:
		o.Receiver = nil

	case *GetSpecType_AwsCloudWatchReceiver:
		o.Receiver = &GlobalSpecType_AwsCloudWatchReceiver{AwsCloudWatchReceiver: of.AwsCloudWatchReceiver}

	case *GetSpecType_AzureEventHubsReceiver:
		o.Receiver = &GlobalSpecType_AzureEventHubsReceiver{AzureEventHubsReceiver: of.AzureEventHubsReceiver}

	case *GetSpecType_AzureReceiver:
		o.Receiver = &GlobalSpecType_AzureReceiver{AzureReceiver: of.AzureReceiver}

	case *GetSpecType_DatadogReceiver:
		o.Receiver = &GlobalSpecType_DatadogReceiver{DatadogReceiver: of.DatadogReceiver}

	case *GetSpecType_ElasticReceiver:
		o.Receiver = &GlobalSpecType_ElasticReceiver{ElasticReceiver: of.ElasticReceiver}

	case *GetSpecType_GcpBucketReceiver:
		o.Receiver = &GlobalSpecType_GcpBucketReceiver{GcpBucketReceiver: of.GcpBucketReceiver}

	case *GetSpecType_HttpReceiver:
		o.Receiver = &GlobalSpecType_HttpReceiver{HttpReceiver: of.HttpReceiver}

	case *GetSpecType_KafkaReceiver:
		o.Receiver = &GlobalSpecType_KafkaReceiver{KafkaReceiver: of.KafkaReceiver}

	case *GetSpecType_NewRelicReceiver:
		o.Receiver = &GlobalSpecType_NewRelicReceiver{NewRelicReceiver: of.NewRelicReceiver}

	case *GetSpecType_QradarReceiver:
		o.Receiver = &GlobalSpecType_QradarReceiver{QradarReceiver: of.QradarReceiver}

	case *GetSpecType_S3Receiver:
		o.Receiver = &GlobalSpecType_S3Receiver{S3Receiver: of.S3Receiver}

	case *GetSpecType_SplunkReceiver:
		o.Receiver = &GlobalSpecType_SplunkReceiver{SplunkReceiver: of.SplunkReceiver}

	case *GetSpecType_SumoLogicReceiver:
		o.Receiver = &GlobalSpecType_SumoLogicReceiver{SumoLogicReceiver: of.SumoLogicReceiver}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetReceiverFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.Receiver.(type) {
	case nil:
		r.Receiver = nil

	case *GlobalSpecType_AwsCloudWatchReceiver:
		r.Receiver = &GetSpecType_AwsCloudWatchReceiver{AwsCloudWatchReceiver: of.AwsCloudWatchReceiver}

	case *GlobalSpecType_AzureEventHubsReceiver:
		r.Receiver = &GetSpecType_AzureEventHubsReceiver{AzureEventHubsReceiver: of.AzureEventHubsReceiver}

	case *GlobalSpecType_AzureReceiver:
		r.Receiver = &GetSpecType_AzureReceiver{AzureReceiver: of.AzureReceiver}

	case *GlobalSpecType_DatadogReceiver:
		r.Receiver = &GetSpecType_DatadogReceiver{DatadogReceiver: of.DatadogReceiver}

	case *GlobalSpecType_ElasticReceiver:
		r.Receiver = &GetSpecType_ElasticReceiver{ElasticReceiver: of.ElasticReceiver}

	case *GlobalSpecType_GcpBucketReceiver:
		r.Receiver = &GetSpecType_GcpBucketReceiver{GcpBucketReceiver: of.GcpBucketReceiver}

	case *GlobalSpecType_HttpReceiver:
		r.Receiver = &GetSpecType_HttpReceiver{HttpReceiver: of.HttpReceiver}

	case *GlobalSpecType_KafkaReceiver:
		r.Receiver = &GetSpecType_KafkaReceiver{KafkaReceiver: of.KafkaReceiver}

	case *GlobalSpecType_NewRelicReceiver:
		r.Receiver = &GetSpecType_NewRelicReceiver{NewRelicReceiver: of.NewRelicReceiver}

	case *GlobalSpecType_QradarReceiver:
		r.Receiver = &GetSpecType_QradarReceiver{QradarReceiver: of.QradarReceiver}

	case *GlobalSpecType_S3Receiver:
		r.Receiver = &GetSpecType_S3Receiver{S3Receiver: of.S3Receiver}

	case *GlobalSpecType_SplunkReceiver:
		r.Receiver = &GetSpecType_SplunkReceiver{SplunkReceiver: of.SplunkReceiver}

	case *GlobalSpecType_SumoLogicReceiver:
		r.Receiver = &GetSpecType_SumoLogicReceiver{SumoLogicReceiver: of.SumoLogicReceiver}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetFilterChoiceFromGlobalSpecType(f)
	m.GetLogTypeFromGlobalSpecType(f)
	m.GetReceiverFromGlobalSpecType(f)
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetFilterChoiceToGlobalSpecType(f)
	m1.SetLogTypeToGlobalSpecType(f)
	m1.SetReceiverToGlobalSpecType(f)
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetFilterChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.FilterChoice.(type) {
	case nil:
		o.FilterChoice = nil

	case *ReplaceSpecType_NsAll:
		o.FilterChoice = &GlobalSpecType_NsAll{NsAll: of.NsAll}

	case *ReplaceSpecType_NsCurrent:
		o.FilterChoice = &GlobalSpecType_NsCurrent{NsCurrent: of.NsCurrent}

	case *ReplaceSpecType_NsList:
		o.FilterChoice = &GlobalSpecType_NsList{NsList: of.NsList}

	case *ReplaceSpecType_NsSystem:
		o.FilterChoice = &GlobalSpecType_NsSystem{NsSystem: of.NsSystem}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetFilterChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.FilterChoice.(type) {
	case nil:
		r.FilterChoice = nil

	case *GlobalSpecType_NsAll:
		r.FilterChoice = &ReplaceSpecType_NsAll{NsAll: of.NsAll}

	case *GlobalSpecType_NsCurrent:
		r.FilterChoice = &ReplaceSpecType_NsCurrent{NsCurrent: of.NsCurrent}

	case *GlobalSpecType_NsList:
		r.FilterChoice = &ReplaceSpecType_NsList{NsList: of.NsList}

	case *GlobalSpecType_NsSystem:
		r.FilterChoice = &ReplaceSpecType_NsSystem{NsSystem: of.NsSystem}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetLogTypeToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.LogType.(type) {
	case nil:
		o.LogType = nil

	case *ReplaceSpecType_AuditLogs:
		o.LogType = &GlobalSpecType_AuditLogs{AuditLogs: of.AuditLogs}

	case *ReplaceSpecType_DnsLogs:
		o.LogType = &GlobalSpecType_DnsLogs{DnsLogs: of.DnsLogs}

	case *ReplaceSpecType_RequestLogs:
		o.LogType = &GlobalSpecType_RequestLogs{RequestLogs: of.RequestLogs}

	case *ReplaceSpecType_SecurityEvents:
		o.LogType = &GlobalSpecType_SecurityEvents{SecurityEvents: of.SecurityEvents}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetLogTypeFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.LogType.(type) {
	case nil:
		r.LogType = nil

	case *GlobalSpecType_AuditLogs:
		r.LogType = &ReplaceSpecType_AuditLogs{AuditLogs: of.AuditLogs}

	case *GlobalSpecType_DnsLogs:
		r.LogType = &ReplaceSpecType_DnsLogs{DnsLogs: of.DnsLogs}

	case *GlobalSpecType_RequestLogs:
		r.LogType = &ReplaceSpecType_RequestLogs{RequestLogs: of.RequestLogs}

	case *GlobalSpecType_SecurityEvents:
		r.LogType = &ReplaceSpecType_SecurityEvents{SecurityEvents: of.SecurityEvents}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetReceiverToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.Receiver.(type) {
	case nil:
		o.Receiver = nil

	case *ReplaceSpecType_AwsCloudWatchReceiver:
		o.Receiver = &GlobalSpecType_AwsCloudWatchReceiver{AwsCloudWatchReceiver: of.AwsCloudWatchReceiver}

	case *ReplaceSpecType_AzureEventHubsReceiver:
		o.Receiver = &GlobalSpecType_AzureEventHubsReceiver{AzureEventHubsReceiver: of.AzureEventHubsReceiver}

	case *ReplaceSpecType_AzureReceiver:
		o.Receiver = &GlobalSpecType_AzureReceiver{AzureReceiver: of.AzureReceiver}

	case *ReplaceSpecType_DatadogReceiver:
		o.Receiver = &GlobalSpecType_DatadogReceiver{DatadogReceiver: of.DatadogReceiver}

	case *ReplaceSpecType_ElasticReceiver:
		o.Receiver = &GlobalSpecType_ElasticReceiver{ElasticReceiver: of.ElasticReceiver}

	case *ReplaceSpecType_GcpBucketReceiver:
		o.Receiver = &GlobalSpecType_GcpBucketReceiver{GcpBucketReceiver: of.GcpBucketReceiver}

	case *ReplaceSpecType_HttpReceiver:
		o.Receiver = &GlobalSpecType_HttpReceiver{HttpReceiver: of.HttpReceiver}

	case *ReplaceSpecType_KafkaReceiver:
		o.Receiver = &GlobalSpecType_KafkaReceiver{KafkaReceiver: of.KafkaReceiver}

	case *ReplaceSpecType_NewRelicReceiver:
		o.Receiver = &GlobalSpecType_NewRelicReceiver{NewRelicReceiver: of.NewRelicReceiver}

	case *ReplaceSpecType_QradarReceiver:
		o.Receiver = &GlobalSpecType_QradarReceiver{QradarReceiver: of.QradarReceiver}

	case *ReplaceSpecType_S3Receiver:
		o.Receiver = &GlobalSpecType_S3Receiver{S3Receiver: of.S3Receiver}

	case *ReplaceSpecType_SplunkReceiver:
		o.Receiver = &GlobalSpecType_SplunkReceiver{SplunkReceiver: of.SplunkReceiver}

	case *ReplaceSpecType_SumoLogicReceiver:
		o.Receiver = &GlobalSpecType_SumoLogicReceiver{SumoLogicReceiver: of.SumoLogicReceiver}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetReceiverFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.Receiver.(type) {
	case nil:
		r.Receiver = nil

	case *GlobalSpecType_AwsCloudWatchReceiver:
		r.Receiver = &ReplaceSpecType_AwsCloudWatchReceiver{AwsCloudWatchReceiver: of.AwsCloudWatchReceiver}

	case *GlobalSpecType_AzureEventHubsReceiver:
		r.Receiver = &ReplaceSpecType_AzureEventHubsReceiver{AzureEventHubsReceiver: of.AzureEventHubsReceiver}

	case *GlobalSpecType_AzureReceiver:
		r.Receiver = &ReplaceSpecType_AzureReceiver{AzureReceiver: of.AzureReceiver}

	case *GlobalSpecType_DatadogReceiver:
		r.Receiver = &ReplaceSpecType_DatadogReceiver{DatadogReceiver: of.DatadogReceiver}

	case *GlobalSpecType_ElasticReceiver:
		r.Receiver = &ReplaceSpecType_ElasticReceiver{ElasticReceiver: of.ElasticReceiver}

	case *GlobalSpecType_GcpBucketReceiver:
		r.Receiver = &ReplaceSpecType_GcpBucketReceiver{GcpBucketReceiver: of.GcpBucketReceiver}

	case *GlobalSpecType_HttpReceiver:
		r.Receiver = &ReplaceSpecType_HttpReceiver{HttpReceiver: of.HttpReceiver}

	case *GlobalSpecType_KafkaReceiver:
		r.Receiver = &ReplaceSpecType_KafkaReceiver{KafkaReceiver: of.KafkaReceiver}

	case *GlobalSpecType_NewRelicReceiver:
		r.Receiver = &ReplaceSpecType_NewRelicReceiver{NewRelicReceiver: of.NewRelicReceiver}

	case *GlobalSpecType_QradarReceiver:
		r.Receiver = &ReplaceSpecType_QradarReceiver{QradarReceiver: of.QradarReceiver}

	case *GlobalSpecType_S3Receiver:
		r.Receiver = &ReplaceSpecType_S3Receiver{S3Receiver: of.S3Receiver}

	case *GlobalSpecType_SplunkReceiver:
		r.Receiver = &ReplaceSpecType_SplunkReceiver{SplunkReceiver: of.SplunkReceiver}

	case *GlobalSpecType_SumoLogicReceiver:
		r.Receiver = &ReplaceSpecType_SumoLogicReceiver{SumoLogicReceiver: of.SumoLogicReceiver}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *ReplaceSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetFilterChoiceFromGlobalSpecType(f)
	m.GetLogTypeFromGlobalSpecType(f)
	m.GetReceiverFromGlobalSpecType(f)
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetFilterChoiceToGlobalSpecType(f)
	m1.SetLogTypeToGlobalSpecType(f)
	m1.SetReceiverToGlobalSpecType(f)
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

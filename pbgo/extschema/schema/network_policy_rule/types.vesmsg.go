// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package network_policy_rule

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *CreateSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetRemoteEndpointDRefInfo()

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetRemoteEndpointDRefInfo() ([]db.DRefInfo, error) {
	if m.GetRemoteEndpoint() == nil {
		return nil, nil
	}
	switch m.GetRemoteEndpoint().(type) {
	case *CreateSpecType_Prefix:

		return nil, nil

	case *CreateSpecType_PrefixSelector:

		return nil, nil

	case *CreateSpecType_IpPrefixSet:

		drInfos, err := m.GetIpPrefixSet().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetIpPrefixSet().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "ip_prefix_set." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) PortsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for ports")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for ports")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated ports")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items ports")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) ProtocolValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for protocol")
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["action"]; exists {

		vOpts := append(opts, db.WithValidateField("action"))
		if err := fv(ctx, m.GetAction(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["advanced_action"]; exists {

		vOpts := append(opts, db.WithValidateField("advanced_action"))
		if err := fv(ctx, m.GetAdvancedAction(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["label_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("label_matcher"))
		if err := fv(ctx, m.GetLabelMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["ports"]; exists {
		vOpts := append(opts, db.WithValidateField("ports"))
		if err := fv(ctx, m.GetPorts(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["protocol"]; exists {

		vOpts := append(opts, db.WithValidateField("protocol"))
		if err := fv(ctx, m.GetProtocol(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetRemoteEndpoint().(type) {
	case *CreateSpecType_Prefix:
		if fv, exists := v.FldValidators["remote_endpoint.prefix"]; exists {
			val := m.GetRemoteEndpoint().(*CreateSpecType_Prefix).Prefix
			vOpts := append(opts,
				db.WithValidateField("remote_endpoint"),
				db.WithValidateField("prefix"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_PrefixSelector:
		if fv, exists := v.FldValidators["remote_endpoint.prefix_selector"]; exists {
			val := m.GetRemoteEndpoint().(*CreateSpecType_PrefixSelector).PrefixSelector
			vOpts := append(opts,
				db.WithValidateField("remote_endpoint"),
				db.WithValidateField("prefix_selector"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_IpPrefixSet:
		if fv, exists := v.FldValidators["remote_endpoint.ip_prefix_set"]; exists {
			val := m.GetRemoteEndpoint().(*CreateSpecType_IpPrefixSet).IpPrefixSet
			vOpts := append(opts,
				db.WithValidateField("remote_endpoint"),
				db.WithValidateField("ip_prefix_set"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhPorts := v.PortsValidationRuleHandler
	rulesPorts := map[string]string{
		"ves.io.schema.rules.repeated.items.string.port_range": "true",
		"ves.io.schema.rules.repeated.max_items":               "128",
	}
	vFn, err = vrhPorts(rulesPorts)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.ports: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ports"] = vFn

	vrhProtocol := v.ProtocolValidationRuleHandler
	rulesProtocol := map[string]string{
		"ves.io.schema.rules.string.in": "[\"ALL\",\"TCP\",\"UDP\",\"ICMP\"]",
	}
	vFn, err = vrhProtocol(rulesProtocol)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.protocol: %s", err)
		panic(errMsg)
	}
	v.FldValidators["protocol"] = vFn

	v.FldValidators["remote_endpoint.prefix"] = ves_io_schema.PrefixListTypeValidator().Validate
	v.FldValidators["remote_endpoint.prefix_selector"] = ves_io_schema.LabelSelectorTypeValidator().Validate
	v.FldValidators["remote_endpoint.ip_prefix_set"] = ves_io_schema.IpPrefixSetRefTypeValidator().Validate

	v.FldValidators["label_matcher"] = ves_io_schema.LabelMatcherTypeValidator().Validate

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GetSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetRemoteEndpointDRefInfo()

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetRemoteEndpointDRefInfo() ([]db.DRefInfo, error) {
	if m.GetRemoteEndpoint() == nil {
		return nil, nil
	}
	switch m.GetRemoteEndpoint().(type) {
	case *GetSpecType_Prefix:

		return nil, nil

	case *GetSpecType_PrefixSelector:

		return nil, nil

	case *GetSpecType_IpPrefixSet:

		drInfos, err := m.GetIpPrefixSet().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetIpPrefixSet().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "ip_prefix_set." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) PortsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for ports")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for ports")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated ports")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items ports")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) ProtocolValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for protocol")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["action"]; exists {

		vOpts := append(opts, db.WithValidateField("action"))
		if err := fv(ctx, m.GetAction(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["advanced_action"]; exists {

		vOpts := append(opts, db.WithValidateField("advanced_action"))
		if err := fv(ctx, m.GetAdvancedAction(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["label_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("label_matcher"))
		if err := fv(ctx, m.GetLabelMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["ports"]; exists {
		vOpts := append(opts, db.WithValidateField("ports"))
		if err := fv(ctx, m.GetPorts(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["protocol"]; exists {

		vOpts := append(opts, db.WithValidateField("protocol"))
		if err := fv(ctx, m.GetProtocol(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetRemoteEndpoint().(type) {
	case *GetSpecType_Prefix:
		if fv, exists := v.FldValidators["remote_endpoint.prefix"]; exists {
			val := m.GetRemoteEndpoint().(*GetSpecType_Prefix).Prefix
			vOpts := append(opts,
				db.WithValidateField("remote_endpoint"),
				db.WithValidateField("prefix"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_PrefixSelector:
		if fv, exists := v.FldValidators["remote_endpoint.prefix_selector"]; exists {
			val := m.GetRemoteEndpoint().(*GetSpecType_PrefixSelector).PrefixSelector
			vOpts := append(opts,
				db.WithValidateField("remote_endpoint"),
				db.WithValidateField("prefix_selector"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_IpPrefixSet:
		if fv, exists := v.FldValidators["remote_endpoint.ip_prefix_set"]; exists {
			val := m.GetRemoteEndpoint().(*GetSpecType_IpPrefixSet).IpPrefixSet
			vOpts := append(opts,
				db.WithValidateField("remote_endpoint"),
				db.WithValidateField("ip_prefix_set"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhPorts := v.PortsValidationRuleHandler
	rulesPorts := map[string]string{
		"ves.io.schema.rules.repeated.items.string.port_range": "true",
		"ves.io.schema.rules.repeated.max_items":               "128",
	}
	vFn, err = vrhPorts(rulesPorts)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.ports: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ports"] = vFn

	vrhProtocol := v.ProtocolValidationRuleHandler
	rulesProtocol := map[string]string{
		"ves.io.schema.rules.string.in": "[\"ALL\",\"TCP\",\"UDP\",\"ICMP\"]",
	}
	vFn, err = vrhProtocol(rulesProtocol)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.protocol: %s", err)
		panic(errMsg)
	}
	v.FldValidators["protocol"] = vFn

	v.FldValidators["remote_endpoint.prefix"] = ves_io_schema.PrefixListTypeValidator().Validate
	v.FldValidators["remote_endpoint.prefix_selector"] = ves_io_schema.LabelSelectorTypeValidator().Validate
	v.FldValidators["remote_endpoint.ip_prefix_set"] = ves_io_schema.IpPrefixSetRefTypeValidator().Validate

	v.FldValidators["label_matcher"] = ves_io_schema.LabelMatcherTypeValidator().Validate

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GlobalSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetPbrActionDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetPbrActionDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetRemoteEndpointDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetRemoteEndpointDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetPbrActionDRefInfo() ([]db.DRefInfo, error) {
	if m.GetPbrAction() == nil {
		return nil, nil
	}

	drInfos, err := m.GetPbrAction().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetPbrAction().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "pbr_action." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetRemoteEndpointDRefInfo() ([]db.DRefInfo, error) {
	if m.GetRemoteEndpoint() == nil {
		return nil, nil
	}
	switch m.GetRemoteEndpoint().(type) {
	case *GlobalSpecType_Prefix:

		return nil, nil

	case *GlobalSpecType_PrefixSelector:

		return nil, nil

	case *GlobalSpecType_IpPrefixSet:

		drInfos, err := m.GetIpPrefixSet().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetIpPrefixSet().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "ip_prefix_set." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) PortsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for ports")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for ports")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated ports")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items ports")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) ProtocolValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for protocol")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["action"]; exists {

		vOpts := append(opts, db.WithValidateField("action"))
		if err := fv(ctx, m.GetAction(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["advanced_action"]; exists {

		vOpts := append(opts, db.WithValidateField("advanced_action"))
		if err := fv(ctx, m.GetAdvancedAction(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["label_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("label_matcher"))
		if err := fv(ctx, m.GetLabelMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["pbr_action"]; exists {

		vOpts := append(opts, db.WithValidateField("pbr_action"))
		if err := fv(ctx, m.GetPbrAction(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["ports"]; exists {
		vOpts := append(opts, db.WithValidateField("ports"))
		if err := fv(ctx, m.GetPorts(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["protocol"]; exists {

		vOpts := append(opts, db.WithValidateField("protocol"))
		if err := fv(ctx, m.GetProtocol(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetRemoteEndpoint().(type) {
	case *GlobalSpecType_Prefix:
		if fv, exists := v.FldValidators["remote_endpoint.prefix"]; exists {
			val := m.GetRemoteEndpoint().(*GlobalSpecType_Prefix).Prefix
			vOpts := append(opts,
				db.WithValidateField("remote_endpoint"),
				db.WithValidateField("prefix"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_PrefixSelector:
		if fv, exists := v.FldValidators["remote_endpoint.prefix_selector"]; exists {
			val := m.GetRemoteEndpoint().(*GlobalSpecType_PrefixSelector).PrefixSelector
			vOpts := append(opts,
				db.WithValidateField("remote_endpoint"),
				db.WithValidateField("prefix_selector"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_IpPrefixSet:
		if fv, exists := v.FldValidators["remote_endpoint.ip_prefix_set"]; exists {
			val := m.GetRemoteEndpoint().(*GlobalSpecType_IpPrefixSet).IpPrefixSet
			vOpts := append(opts,
				db.WithValidateField("remote_endpoint"),
				db.WithValidateField("ip_prefix_set"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhPorts := v.PortsValidationRuleHandler
	rulesPorts := map[string]string{
		"ves.io.schema.rules.repeated.items.string.port_range": "true",
		"ves.io.schema.rules.repeated.max_items":               "128",
	}
	vFn, err = vrhPorts(rulesPorts)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.ports: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ports"] = vFn

	vrhProtocol := v.ProtocolValidationRuleHandler
	rulesProtocol := map[string]string{
		"ves.io.schema.rules.string.in": "[\"ALL\",\"TCP\",\"UDP\",\"ICMP\"]",
	}
	vFn, err = vrhProtocol(rulesProtocol)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.protocol: %s", err)
		panic(errMsg)
	}
	v.FldValidators["protocol"] = vFn

	v.FldValidators["remote_endpoint.prefix"] = ves_io_schema.PrefixListTypeValidator().Validate
	v.FldValidators["remote_endpoint.prefix_selector"] = ves_io_schema.LabelSelectorTypeValidator().Validate
	v.FldValidators["remote_endpoint.ip_prefix_set"] = ves_io_schema.IpPrefixSetRefTypeValidator().Validate

	v.FldValidators["label_matcher"] = ves_io_schema.LabelMatcherTypeValidator().Validate

	v.FldValidators["pbr_action"] = NetworkPolicyPBRRuleActionValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *NetworkPolicyPBRRuleAction) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *NetworkPolicyPBRRuleAction) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *NetworkPolicyPBRRuleAction) DeepCopy() *NetworkPolicyPBRRuleAction {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &NetworkPolicyPBRRuleAction{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *NetworkPolicyPBRRuleAction) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *NetworkPolicyPBRRuleAction) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return NetworkPolicyPBRRuleActionValidator().Validate(ctx, m, opts...)
}

func (m *NetworkPolicyPBRRuleAction) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetForwardingClassDRefInfo()

}

func (m *NetworkPolicyPBRRuleAction) GetForwardingClassDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetForwardingClass()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("NetworkPolicyPBRRuleAction.forwarding_class[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "forwarding_class.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "forwarding_class",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetForwardingClassDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *NetworkPolicyPBRRuleAction) GetForwardingClassDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "forwarding_class.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: forwarding_class")
	}
	for _, ref := range m.GetForwardingClass() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateNetworkPolicyPBRRuleAction struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateNetworkPolicyPBRRuleAction) ForwardingClassValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for forwarding_class")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for forwarding_class")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated forwarding_class")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items forwarding_class")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateNetworkPolicyPBRRuleAction) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*NetworkPolicyPBRRuleAction)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *NetworkPolicyPBRRuleAction got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["forwarding_class"]; exists {
		vOpts := append(opts, db.WithValidateField("forwarding_class"))
		if err := fv(ctx, m.GetForwardingClass(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultNetworkPolicyPBRRuleActionValidator = func() *ValidateNetworkPolicyPBRRuleAction {
	v := &ValidateNetworkPolicyPBRRuleAction{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhForwardingClass := v.ForwardingClassValidationRuleHandler
	rulesForwardingClass := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "3",
	}
	vFn, err = vrhForwardingClass(rulesForwardingClass)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for NetworkPolicyPBRRuleAction.forwarding_class: %s", err)
		panic(errMsg)
	}
	v.FldValidators["forwarding_class"] = vFn

	return v
}()

func NetworkPolicyPBRRuleActionValidator() db.Validator {
	return DefaultNetworkPolicyPBRRuleActionValidator
}

// augmented methods on protoc/std generated struct

func (m *NetworkPolicyRuleAdvancedAction) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *NetworkPolicyRuleAdvancedAction) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *NetworkPolicyRuleAdvancedAction) DeepCopy() *NetworkPolicyRuleAdvancedAction {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &NetworkPolicyRuleAdvancedAction{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *NetworkPolicyRuleAdvancedAction) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *NetworkPolicyRuleAdvancedAction) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return NetworkPolicyRuleAdvancedActionValidator().Validate(ctx, m, opts...)
}

type ValidateNetworkPolicyRuleAdvancedAction struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateNetworkPolicyRuleAdvancedAction) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*NetworkPolicyRuleAdvancedAction)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *NetworkPolicyRuleAdvancedAction got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["action"]; exists {

		vOpts := append(opts, db.WithValidateField("action"))
		if err := fv(ctx, m.GetAction(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultNetworkPolicyRuleAdvancedActionValidator = func() *ValidateNetworkPolicyRuleAdvancedAction {
	v := &ValidateNetworkPolicyRuleAdvancedAction{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func NetworkPolicyRuleAdvancedActionValidator() db.Validator {
	return DefaultNetworkPolicyRuleAdvancedActionValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *ReplaceSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetRemoteEndpointDRefInfo()

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetRemoteEndpointDRefInfo() ([]db.DRefInfo, error) {
	if m.GetRemoteEndpoint() == nil {
		return nil, nil
	}
	switch m.GetRemoteEndpoint().(type) {
	case *ReplaceSpecType_Prefix:

		return nil, nil

	case *ReplaceSpecType_PrefixSelector:

		return nil, nil

	case *ReplaceSpecType_IpPrefixSet:

		drInfos, err := m.GetIpPrefixSet().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetIpPrefixSet().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "ip_prefix_set." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) PortsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for ports")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for ports")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated ports")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items ports")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) ProtocolValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for protocol")
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["action"]; exists {

		vOpts := append(opts, db.WithValidateField("action"))
		if err := fv(ctx, m.GetAction(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["advanced_action"]; exists {

		vOpts := append(opts, db.WithValidateField("advanced_action"))
		if err := fv(ctx, m.GetAdvancedAction(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["label_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("label_matcher"))
		if err := fv(ctx, m.GetLabelMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["ports"]; exists {
		vOpts := append(opts, db.WithValidateField("ports"))
		if err := fv(ctx, m.GetPorts(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["protocol"]; exists {

		vOpts := append(opts, db.WithValidateField("protocol"))
		if err := fv(ctx, m.GetProtocol(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetRemoteEndpoint().(type) {
	case *ReplaceSpecType_Prefix:
		if fv, exists := v.FldValidators["remote_endpoint.prefix"]; exists {
			val := m.GetRemoteEndpoint().(*ReplaceSpecType_Prefix).Prefix
			vOpts := append(opts,
				db.WithValidateField("remote_endpoint"),
				db.WithValidateField("prefix"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_PrefixSelector:
		if fv, exists := v.FldValidators["remote_endpoint.prefix_selector"]; exists {
			val := m.GetRemoteEndpoint().(*ReplaceSpecType_PrefixSelector).PrefixSelector
			vOpts := append(opts,
				db.WithValidateField("remote_endpoint"),
				db.WithValidateField("prefix_selector"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_IpPrefixSet:
		if fv, exists := v.FldValidators["remote_endpoint.ip_prefix_set"]; exists {
			val := m.GetRemoteEndpoint().(*ReplaceSpecType_IpPrefixSet).IpPrefixSet
			vOpts := append(opts,
				db.WithValidateField("remote_endpoint"),
				db.WithValidateField("ip_prefix_set"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhPorts := v.PortsValidationRuleHandler
	rulesPorts := map[string]string{
		"ves.io.schema.rules.repeated.items.string.port_range": "true",
		"ves.io.schema.rules.repeated.max_items":               "128",
	}
	vFn, err = vrhPorts(rulesPorts)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.ports: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ports"] = vFn

	vrhProtocol := v.ProtocolValidationRuleHandler
	rulesProtocol := map[string]string{
		"ves.io.schema.rules.string.in": "[\"ALL\",\"TCP\",\"UDP\",\"ICMP\"]",
	}
	vFn, err = vrhProtocol(rulesProtocol)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.protocol: %s", err)
		panic(errMsg)
	}
	v.FldValidators["protocol"] = vFn

	v.FldValidators["remote_endpoint.prefix"] = ves_io_schema.PrefixListTypeValidator().Validate
	v.FldValidators["remote_endpoint.prefix_selector"] = ves_io_schema.LabelSelectorTypeValidator().Validate
	v.FldValidators["remote_endpoint.ip_prefix_set"] = ves_io_schema.IpPrefixSetRefTypeValidator().Validate

	v.FldValidators["label_matcher"] = ves_io_schema.LabelMatcherTypeValidator().Validate

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetRemoteEndpointToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.RemoteEndpoint.(type) {
	case nil:
		o.RemoteEndpoint = nil

	case *CreateSpecType_IpPrefixSet:
		o.RemoteEndpoint = &GlobalSpecType_IpPrefixSet{IpPrefixSet: of.IpPrefixSet}

	case *CreateSpecType_Prefix:
		o.RemoteEndpoint = &GlobalSpecType_Prefix{Prefix: of.Prefix}

	case *CreateSpecType_PrefixSelector:
		o.RemoteEndpoint = &GlobalSpecType_PrefixSelector{PrefixSelector: of.PrefixSelector}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetRemoteEndpointFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.RemoteEndpoint.(type) {
	case nil:
		r.RemoteEndpoint = nil

	case *GlobalSpecType_IpPrefixSet:
		r.RemoteEndpoint = &CreateSpecType_IpPrefixSet{IpPrefixSet: of.IpPrefixSet}

	case *GlobalSpecType_Prefix:
		r.RemoteEndpoint = &CreateSpecType_Prefix{Prefix: of.Prefix}

	case *GlobalSpecType_PrefixSelector:
		r.RemoteEndpoint = &CreateSpecType_PrefixSelector{PrefixSelector: of.PrefixSelector}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *CreateSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.Action = f.GetAction()
	m.AdvancedAction = f.GetAdvancedAction()
	m.LabelMatcher = f.GetLabelMatcher()
	m.Ports = f.GetPorts()
	m.Protocol = f.GetProtocol()
	m.GetRemoteEndpointFromGlobalSpecType(f)
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *CreateSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *CreateSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.Action = m1.Action
	f.AdvancedAction = m1.AdvancedAction
	f.LabelMatcher = m1.LabelMatcher
	f.Ports = m1.Ports
	f.Protocol = m1.Protocol
	m1.SetRemoteEndpointToGlobalSpecType(f)
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *CreateSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetRemoteEndpointToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.RemoteEndpoint.(type) {
	case nil:
		o.RemoteEndpoint = nil

	case *GetSpecType_IpPrefixSet:
		o.RemoteEndpoint = &GlobalSpecType_IpPrefixSet{IpPrefixSet: of.IpPrefixSet}

	case *GetSpecType_Prefix:
		o.RemoteEndpoint = &GlobalSpecType_Prefix{Prefix: of.Prefix}

	case *GetSpecType_PrefixSelector:
		o.RemoteEndpoint = &GlobalSpecType_PrefixSelector{PrefixSelector: of.PrefixSelector}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetRemoteEndpointFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.RemoteEndpoint.(type) {
	case nil:
		r.RemoteEndpoint = nil

	case *GlobalSpecType_IpPrefixSet:
		r.RemoteEndpoint = &GetSpecType_IpPrefixSet{IpPrefixSet: of.IpPrefixSet}

	case *GlobalSpecType_Prefix:
		r.RemoteEndpoint = &GetSpecType_Prefix{Prefix: of.Prefix}

	case *GlobalSpecType_PrefixSelector:
		r.RemoteEndpoint = &GetSpecType_PrefixSelector{PrefixSelector: of.PrefixSelector}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.Action = f.GetAction()
	m.AdvancedAction = f.GetAdvancedAction()
	m.LabelMatcher = f.GetLabelMatcher()
	m.Ports = f.GetPorts()
	m.Protocol = f.GetProtocol()
	m.GetRemoteEndpointFromGlobalSpecType(f)
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.Action = m1.Action
	f.AdvancedAction = m1.AdvancedAction
	f.LabelMatcher = m1.LabelMatcher
	f.Ports = m1.Ports
	f.Protocol = m1.Protocol
	m1.SetRemoteEndpointToGlobalSpecType(f)
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetRemoteEndpointToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.RemoteEndpoint.(type) {
	case nil:
		o.RemoteEndpoint = nil

	case *ReplaceSpecType_IpPrefixSet:
		o.RemoteEndpoint = &GlobalSpecType_IpPrefixSet{IpPrefixSet: of.IpPrefixSet}

	case *ReplaceSpecType_Prefix:
		o.RemoteEndpoint = &GlobalSpecType_Prefix{Prefix: of.Prefix}

	case *ReplaceSpecType_PrefixSelector:
		o.RemoteEndpoint = &GlobalSpecType_PrefixSelector{PrefixSelector: of.PrefixSelector}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetRemoteEndpointFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.RemoteEndpoint.(type) {
	case nil:
		r.RemoteEndpoint = nil

	case *GlobalSpecType_IpPrefixSet:
		r.RemoteEndpoint = &ReplaceSpecType_IpPrefixSet{IpPrefixSet: of.IpPrefixSet}

	case *GlobalSpecType_Prefix:
		r.RemoteEndpoint = &ReplaceSpecType_Prefix{Prefix: of.Prefix}

	case *GlobalSpecType_PrefixSelector:
		r.RemoteEndpoint = &ReplaceSpecType_PrefixSelector{PrefixSelector: of.PrefixSelector}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *ReplaceSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.Action = f.GetAction()
	m.AdvancedAction = f.GetAdvancedAction()
	m.LabelMatcher = f.GetLabelMatcher()
	m.Ports = f.GetPorts()
	m.Protocol = f.GetProtocol()
	m.GetRemoteEndpointFromGlobalSpecType(f)
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.Action = m1.Action
	f.AdvancedAction = m1.AdvancedAction
	f.LabelMatcher = m1.LabelMatcher
	f.Ports = m1.Ports
	f.Protocol = m1.Protocol
	m1.SetRemoteEndpointToGlobalSpecType(f)
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

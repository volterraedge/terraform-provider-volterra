// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/instance_management/auth/types.proto

package auth

import (
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AuthenticationFlow
//
// x-displayName: "Authentication Flow"
// AuthenticationFlow defines the current state of authentication
type AuthenticationFlow int32

const (
	UNKNOWN       AuthenticationFlow = 0
	AUTHORIZATION AuthenticationFlow = 1
	IMPLICIT      AuthenticationFlow = 2
)

var AuthenticationFlow_name = map[int32]string{
	0: "UNKNOWN",
	1: "AUTHORIZATION",
	2: "IMPLICIT",
}

var AuthenticationFlow_value = map[string]int32{
	"UNKNOWN":       0,
	"AUTHORIZATION": 1,
	"IMPLICIT":      2,
}

func (AuthenticationFlow) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b0b0c93d7cab9e44, []int{0}
}

// Auth
//
// x-displayName: "Auth"
// Auth holds the secret auths for OIDCClientByCname private API response
type Auth struct {
	OidcProviderName             string             `protobuf:"bytes,1,opt,name=oidc_provider_name,json=oidcProviderName,proto3" json:"oidc_provider_name,omitempty"`
	AuthenticationFlow           AuthenticationFlow `protobuf:"varint,2,opt,name=authentication_flow,json=authenticationFlow,proto3,enum=ves.io.schema.instance_management.auth.AuthenticationFlow" json:"authentication_flow,omitempty"`
	AuthorizationEndpoint        string             `protobuf:"bytes,3,opt,name=authorization_endpoint,json=authorizationEndpoint,proto3" json:"authorization_endpoint,omitempty"`
	TokenEndpoint                string             `protobuf:"bytes,4,opt,name=token_endpoint,json=tokenEndpoint,proto3" json:"token_endpoint,omitempty"`
	EndSessionEndpoint           string             `protobuf:"bytes,5,opt,name=end_session_endpoint,json=endSessionEndpoint,proto3" json:"end_session_endpoint,omitempty"`
	JwksUri                      string             `protobuf:"bytes,6,opt,name=jwks_uri,json=jwksUri,proto3" json:"jwks_uri,omitempty"`
	ClientId                     string             `protobuf:"bytes,7,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientSecret                 string             `protobuf:"bytes,8,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	RedirectUri                  string             `protobuf:"bytes,9,opt,name=redirect_uri,json=redirectUri,proto3" json:"redirect_uri,omitempty"`
	AllowedRedirectUrls          []string           `protobuf:"bytes,10,rep,name=allowed_redirect_urls,json=allowedRedirectUrls,proto3" json:"allowed_redirect_urls,omitempty"`
	DisablePostLogoutRedirectUri bool               `protobuf:"varint,11,opt,name=disable_post_logout_redirect_uri,json=disablePostLogoutRedirectUri,proto3" json:"disable_post_logout_redirect_uri,omitempty"`
}

func (m *Auth) Reset()      { *m = Auth{} }
func (*Auth) ProtoMessage() {}
func (*Auth) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0b0c93d7cab9e44, []int{0}
}
func (m *Auth) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Auth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Auth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Auth.Merge(m, src)
}
func (m *Auth) XXX_Size() int {
	return m.Size()
}
func (m *Auth) XXX_DiscardUnknown() {
	xxx_messageInfo_Auth.DiscardUnknown(m)
}

var xxx_messageInfo_Auth proto.InternalMessageInfo

func (m *Auth) GetOidcProviderName() string {
	if m != nil {
		return m.OidcProviderName
	}
	return ""
}

func (m *Auth) GetAuthenticationFlow() AuthenticationFlow {
	if m != nil {
		return m.AuthenticationFlow
	}
	return UNKNOWN
}

func (m *Auth) GetAuthorizationEndpoint() string {
	if m != nil {
		return m.AuthorizationEndpoint
	}
	return ""
}

func (m *Auth) GetTokenEndpoint() string {
	if m != nil {
		return m.TokenEndpoint
	}
	return ""
}

func (m *Auth) GetEndSessionEndpoint() string {
	if m != nil {
		return m.EndSessionEndpoint
	}
	return ""
}

func (m *Auth) GetJwksUri() string {
	if m != nil {
		return m.JwksUri
	}
	return ""
}

func (m *Auth) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *Auth) GetClientSecret() string {
	if m != nil {
		return m.ClientSecret
	}
	return ""
}

func (m *Auth) GetRedirectUri() string {
	if m != nil {
		return m.RedirectUri
	}
	return ""
}

func (m *Auth) GetAllowedRedirectUrls() []string {
	if m != nil {
		return m.AllowedRedirectUrls
	}
	return nil
}

func (m *Auth) GetDisablePostLogoutRedirectUri() bool {
	if m != nil {
		return m.DisablePostLogoutRedirectUri
	}
	return false
}

// Session
//
// x-displayName: "Session"
// Session holds the Session for OIDCClientByCname private API response
type Session struct {
	CookieExpiry          uint32 `protobuf:"varint,1,opt,name=cookie_expiry,json=cookieExpiry,proto3" json:"cookie_expiry,omitempty"`
	CookieRefreshInterval uint32 `protobuf:"varint,2,opt,name=cookie_refresh_interval,json=cookieRefreshInterval,proto3" json:"cookie_refresh_interval,omitempty"`
	SessionExpiry         uint32 `protobuf:"varint,3,opt,name=session_expiry,json=sessionExpiry,proto3" json:"session_expiry,omitempty"`
	HmacKey               string `protobuf:"bytes,4,opt,name=hmac_key,json=hmacKey,proto3" json:"hmac_key,omitempty"`
	LogoutUri             string `protobuf:"bytes,5,opt,name=logout_uri,json=logoutUri,proto3" json:"logout_uri,omitempty"`
	RedirectOriginEnabled bool   `protobuf:"varint,6,opt,name=redirect_origin_enabled,json=redirectOriginEnabled,proto3" json:"redirect_origin_enabled,omitempty"`
	CsrfTokenUri          string `protobuf:"bytes,7,opt,name=csrf_token_uri,json=csrfTokenUri,proto3" json:"csrf_token_uri,omitempty"`
	CsrfEnabled           bool   `protobuf:"varint,8,opt,name=csrf_enabled,json=csrfEnabled,proto3" json:"csrf_enabled,omitempty"`
	HmacKeySecondary      string `protobuf:"bytes,9,opt,name=hmac_key_secondary,json=hmacKeySecondary,proto3" json:"hmac_key_secondary,omitempty"`
}

func (m *Session) Reset()      { *m = Session{} }
func (*Session) ProtoMessage() {}
func (*Session) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0b0c93d7cab9e44, []int{1}
}
func (m *Session) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Session) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Session) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Session.Merge(m, src)
}
func (m *Session) XXX_Size() int {
	return m.Size()
}
func (m *Session) XXX_DiscardUnknown() {
	xxx_messageInfo_Session.DiscardUnknown(m)
}

var xxx_messageInfo_Session proto.InternalMessageInfo

func (m *Session) GetCookieExpiry() uint32 {
	if m != nil {
		return m.CookieExpiry
	}
	return 0
}

func (m *Session) GetCookieRefreshInterval() uint32 {
	if m != nil {
		return m.CookieRefreshInterval
	}
	return 0
}

func (m *Session) GetSessionExpiry() uint32 {
	if m != nil {
		return m.SessionExpiry
	}
	return 0
}

func (m *Session) GetHmacKey() string {
	if m != nil {
		return m.HmacKey
	}
	return ""
}

func (m *Session) GetLogoutUri() string {
	if m != nil {
		return m.LogoutUri
	}
	return ""
}

func (m *Session) GetRedirectOriginEnabled() bool {
	if m != nil {
		return m.RedirectOriginEnabled
	}
	return false
}

func (m *Session) GetCsrfTokenUri() string {
	if m != nil {
		return m.CsrfTokenUri
	}
	return ""
}

func (m *Session) GetCsrfEnabled() bool {
	if m != nil {
		return m.CsrfEnabled
	}
	return false
}

func (m *Session) GetHmacKeySecondary() string {
	if m != nil {
		return m.HmacKeySecondary
	}
	return ""
}

func init() {
	proto.RegisterEnum("ves.io.schema.instance_management.auth.AuthenticationFlow", AuthenticationFlow_name, AuthenticationFlow_value)
	golang_proto.RegisterEnum("ves.io.schema.instance_management.auth.AuthenticationFlow", AuthenticationFlow_name, AuthenticationFlow_value)
	proto.RegisterType((*Auth)(nil), "ves.io.schema.instance_management.auth.Auth")
	golang_proto.RegisterType((*Auth)(nil), "ves.io.schema.instance_management.auth.Auth")
	proto.RegisterType((*Session)(nil), "ves.io.schema.instance_management.auth.Session")
	golang_proto.RegisterType((*Session)(nil), "ves.io.schema.instance_management.auth.Session")
}

func init() {
	proto.RegisterFile("ves.io/schema/instance_management/auth/types.proto", fileDescriptor_b0b0c93d7cab9e44)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/instance_management/auth/types.proto", fileDescriptor_b0b0c93d7cab9e44)
}

var fileDescriptor_b0b0c93d7cab9e44 = []byte{
	// 819 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xcf, 0x6e, 0x1b, 0x37,
	0x10, 0xc6, 0xb5, 0x91, 0x1b, 0x49, 0xb4, 0x64, 0xa8, 0x4c, 0xdd, 0x28, 0x8e, 0x4b, 0x28, 0xee,
	0x1f, 0x08, 0x45, 0xbd, 0xdb, 0xba, 0x68, 0x0e, 0xbd, 0xd9, 0x85, 0x83, 0x0a, 0x49, 0x65, 0x63,
	0x6d, 0xa3, 0x40, 0x50, 0x60, 0x41, 0xed, 0x8e, 0x56, 0xac, 0x56, 0xe4, 0x82, 0xa4, 0xe4, 0xa8,
	0x40, 0x81, 0x3c, 0x42, 0xcf, 0x7d, 0x82, 0x9e, 0xfb, 0x04, 0x3d, 0xe6, 0xe8, 0xa3, 0x8f, 0xb5,
	0x7c, 0xe9, 0x31, 0x8f, 0x50, 0x90, 0x5c, 0xa9, 0x52, 0x53, 0xa0, 0xb9, 0x2d, 0xbf, 0xdf, 0xcc,
	0x47, 0xce, 0x0c, 0x97, 0xe8, 0x60, 0x0a, 0xca, 0x67, 0x22, 0x50, 0xf1, 0x10, 0xc6, 0x34, 0x60,
	0x5c, 0x69, 0xca, 0x63, 0x88, 0xc6, 0x94, 0xd3, 0x14, 0xc6, 0xc0, 0x75, 0x40, 0x27, 0x7a, 0x18,
	0xe8, 0x59, 0x0e, 0xca, 0xcf, 0xa5, 0xd0, 0x02, 0x7f, 0xe2, 0x72, 0x7c, 0x97, 0xe3, 0xff, 0x47,
	0x8e, 0x6f, 0x72, 0x76, 0xf6, 0x53, 0xa6, 0x87, 0x93, 0xbe, 0x1f, 0x8b, 0x71, 0x90, 0x8a, 0x54,
	0x04, 0x36, 0xbd, 0x3f, 0x19, 0xd8, 0x95, 0x5d, 0xd8, 0x2f, 0x67, 0xbb, 0xb3, 0x9b, 0x0a, 0x91,
	0x66, 0x10, 0xd0, 0x9c, 0x05, 0x94, 0x73, 0xa1, 0xa9, 0x66, 0x82, 0x17, 0x9b, 0xee, 0x3c, 0x5c,
	0x3f, 0xa8, 0xc8, 0x57, 0xe1, 0x83, 0x75, 0xb8, 0x72, 0xd8, 0x9d, 0xdd, 0x75, 0x34, 0xa5, 0x19,
	0x4b, 0xa8, 0x86, 0x82, 0xee, 0xfd, 0x8b, 0x82, 0x02, 0x3e, 0x5d, 0x37, 0xdf, 0xfb, 0x7d, 0x03,
	0x6d, 0x1c, 0x4e, 0xf4, 0x10, 0x7f, 0x86, 0xb0, 0x60, 0x49, 0x1c, 0xe5, 0x52, 0x4c, 0x59, 0x02,
	0x32, 0xe2, 0x74, 0x0c, 0x2d, 0xaf, 0xed, 0x75, 0x6a, 0x61, 0xd3, 0x90, 0xd3, 0x02, 0xf4, 0xe8,
	0x18, 0xf0, 0x08, 0xdd, 0x33, 0x5d, 0x00, 0xae, 0x59, 0x6c, 0x2b, 0x89, 0x06, 0x99, 0xb8, 0x6c,
	0xdd, 0x69, 0x7b, 0x9d, 0xad, 0x83, 0xaf, 0xfd, 0xb7, 0xeb, 0xa1, 0x7f, 0xb8, 0x66, 0xf1, 0x24,
	0x13, 0x97, 0x21, 0xa6, 0x6f, 0x68, 0xf8, 0x2b, 0xf4, 0xbe, 0x51, 0x85, 0x64, 0x3f, 0xb9, 0xbd,
	0x80, 0x27, 0xb9, 0x60, 0x5c, 0xb7, 0xca, 0xf6, 0x78, 0xdb, 0x6b, 0xf4, 0xb8, 0x80, 0xf8, 0x63,
	0xb4, 0xa5, 0xc5, 0x08, 0x56, 0xc2, 0x37, 0x6c, 0x78, 0xc3, 0xaa, 0xcb, 0xb0, 0xcf, 0xd1, 0x7b,
	0xc0, 0x93, 0x48, 0x81, 0x52, 0x6b, 0xde, 0xef, 0xd8, 0x60, 0x0c, 0x3c, 0x39, 0x73, 0x68, 0x99,
	0xf1, 0x00, 0x55, 0x7f, 0xbc, 0x1c, 0xa9, 0x68, 0x22, 0x59, 0xeb, 0xae, 0x8d, 0xaa, 0x98, 0xf5,
	0x85, 0x64, 0xf8, 0x21, 0xaa, 0xc5, 0x19, 0x03, 0xae, 0x23, 0x96, 0xb4, 0x2a, 0x96, 0x55, 0x9d,
	0xd0, 0x4d, 0x70, 0x07, 0x35, 0x0a, 0xa8, 0x20, 0x96, 0xa0, 0x5b, 0x55, 0x13, 0x70, 0x54, 0x7e,
	0xf5, 0xb3, 0x17, 0xd6, 0x1d, 0x39, 0xb3, 0x00, 0x3f, 0x42, 0x75, 0x09, 0x09, 0x93, 0x10, 0x6b,
	0xbb, 0x4b, 0xcd, 0x3a, 0x6d, 0x2e, 0x34, 0xb3, 0xd3, 0x01, 0xda, 0xa6, 0x59, 0x26, 0x2e, 0x21,
	0x89, 0x56, 0x42, 0x33, 0xd5, 0x42, 0xed, 0x72, 0xa7, 0x16, 0xde, 0x2b, 0x60, 0xb8, 0x4c, 0xc9,
	0x14, 0x7e, 0x82, 0xda, 0x09, 0x53, 0xb4, 0x9f, 0x41, 0x94, 0x0b, 0xa5, 0xa3, 0x4c, 0xa4, 0x62,
	0xa2, 0xa3, 0xb5, 0xad, 0x36, 0xdb, 0x5e, 0xa7, 0x1a, 0xee, 0x16, 0x71, 0xa7, 0x42, 0xe9, 0x67,
	0x36, 0xea, 0x1f, 0x23, 0xb6, 0xf7, 0xb2, 0x8c, 0x2a, 0x45, 0x53, 0xf0, 0x87, 0xa8, 0x11, 0x0b,
	0x31, 0x62, 0x10, 0xc1, 0x8b, 0x9c, 0xc9, 0x99, 0xbd, 0x32, 0x8d, 0xb0, 0xee, 0xc4, 0x63, 0xab,
	0xe1, 0xc7, 0xe8, 0x7e, 0x11, 0x24, 0x61, 0x20, 0x41, 0x0d, 0x23, 0xc6, 0x35, 0xc8, 0x29, 0xcd,
	0xec, 0x95, 0x69, 0x84, 0xdb, 0x0e, 0x87, 0x8e, 0x76, 0x0b, 0x68, 0x46, 0xb8, 0x9c, 0x8b, 0x73,
	0x2f, 0xdb, 0xf0, 0x46, 0xa1, 0x16, 0xf6, 0x04, 0x55, 0x87, 0x63, 0x1a, 0x47, 0x23, 0x98, 0xb9,
	0x19, 0xbb, 0x9e, 0x56, 0x8c, 0xf8, 0x14, 0x66, 0xf8, 0x03, 0x84, 0x8a, 0x52, 0x4d, 0x85, 0x6e,
	0xb0, 0x35, 0xa7, 0x98, 0x56, 0x3e, 0x46, 0xf7, 0x97, 0x2d, 0x10, 0x92, 0xa5, 0xcc, 0xdc, 0x02,
	0x53, 0x7d, 0x62, 0xc7, 0x5b, 0x0d, 0xb7, 0x17, 0xf8, 0xc4, 0xd2, 0x63, 0x07, 0xf1, 0x47, 0x68,
	0x2b, 0x56, 0x72, 0x10, 0xb9, 0x5b, 0x66, 0xac, 0xdd, 0xc4, 0xeb, 0x46, 0x3d, 0x37, 0xa2, 0x71,
	0x7f, 0x84, 0xec, 0x7a, 0x69, 0x59, 0xb5, 0x96, 0x9b, 0x46, 0x5b, 0x18, 0x7d, 0x81, 0xf0, 0xe2,
	0xfc, 0xe6, 0x6a, 0x08, 0x9e, 0x50, 0x39, 0x73, 0x43, 0x77, 0x95, 0x34, 0x8b, 0x4a, 0xce, 0x16,
	0xf0, 0xd3, 0x23, 0x84, 0xdf, 0xfc, 0x7b, 0xf0, 0x26, 0xaa, 0x5c, 0xf4, 0x9e, 0xf6, 0x4e, 0xbe,
	0xef, 0x35, 0x4b, 0xf8, 0x5d, 0xd4, 0x38, 0xbc, 0x38, 0xff, 0xf6, 0x24, 0xec, 0x3e, 0x3f, 0x3c,
	0xef, 0x9e, 0xf4, 0x9a, 0x1e, 0xae, 0xa3, 0x6a, 0xf7, 0xbb, 0xd3, 0x67, 0xdd, 0x6f, 0xba, 0xe7,
	0xcd, 0x3b, 0x47, 0xbf, 0x7a, 0x57, 0x37, 0xa4, 0x74, 0x7d, 0x43, 0x4a, 0xaf, 0x6f, 0x88, 0xf7,
	0x72, 0x4e, 0xbc, 0xdf, 0xe6, 0xc4, 0x7b, 0x35, 0x27, 0xde, 0xd5, 0x9c, 0x78, 0xd7, 0x73, 0xe2,
	0xfd, 0x39, 0x27, 0xde, 0x5f, 0x73, 0x52, 0x7a, 0x3d, 0x27, 0xde, 0x2f, 0xb7, 0xa4, 0xf4, 0xc7,
	0x2d, 0xf1, 0xae, 0x6e, 0x49, 0xe9, 0xfa, 0x96, 0x94, 0x9e, 0xff, 0x90, 0x8a, 0x7c, 0x94, 0xfa,
	0x53, 0x91, 0x69, 0x90, 0x92, 0xfa, 0x13, 0x15, 0xd8, 0x8f, 0x81, 0x90, 0xe3, 0xfd, 0xc5, 0x33,
	0xb2, 0xbf, 0xc0, 0x41, 0xde, 0x4f, 0x45, 0x00, 0x2f, 0x74, 0xf1, 0x1a, 0xfd, 0xcf, 0x9b, 0xdc,
	0xbf, 0x6b, 0xdf, 0xa7, 0x2f, 0xff, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x36, 0xd1, 0x59, 0xf3, 0xc4,
	0x05, 0x00, 0x00,
}

func (x AuthenticationFlow) String() string {
	s, ok := AuthenticationFlow_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Auth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Auth)
	if !ok {
		that2, ok := that.(Auth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OidcProviderName != that1.OidcProviderName {
		return false
	}
	if this.AuthenticationFlow != that1.AuthenticationFlow {
		return false
	}
	if this.AuthorizationEndpoint != that1.AuthorizationEndpoint {
		return false
	}
	if this.TokenEndpoint != that1.TokenEndpoint {
		return false
	}
	if this.EndSessionEndpoint != that1.EndSessionEndpoint {
		return false
	}
	if this.JwksUri != that1.JwksUri {
		return false
	}
	if this.ClientId != that1.ClientId {
		return false
	}
	if this.ClientSecret != that1.ClientSecret {
		return false
	}
	if this.RedirectUri != that1.RedirectUri {
		return false
	}
	if len(this.AllowedRedirectUrls) != len(that1.AllowedRedirectUrls) {
		return false
	}
	for i := range this.AllowedRedirectUrls {
		if this.AllowedRedirectUrls[i] != that1.AllowedRedirectUrls[i] {
			return false
		}
	}
	if this.DisablePostLogoutRedirectUri != that1.DisablePostLogoutRedirectUri {
		return false
	}
	return true
}
func (this *Session) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Session)
	if !ok {
		that2, ok := that.(Session)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CookieExpiry != that1.CookieExpiry {
		return false
	}
	if this.CookieRefreshInterval != that1.CookieRefreshInterval {
		return false
	}
	if this.SessionExpiry != that1.SessionExpiry {
		return false
	}
	if this.HmacKey != that1.HmacKey {
		return false
	}
	if this.LogoutUri != that1.LogoutUri {
		return false
	}
	if this.RedirectOriginEnabled != that1.RedirectOriginEnabled {
		return false
	}
	if this.CsrfTokenUri != that1.CsrfTokenUri {
		return false
	}
	if this.CsrfEnabled != that1.CsrfEnabled {
		return false
	}
	if this.HmacKeySecondary != that1.HmacKeySecondary {
		return false
	}
	return true
}
func (this *Auth) goString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&auth.Auth{")
	s = append(s, "OidcProviderName: "+fmt.Sprintf("%#v", this.OidcProviderName)+",\n")
	s = append(s, "AuthenticationFlow: "+fmt.Sprintf("%#v", this.AuthenticationFlow)+",\n")
	s = append(s, "AuthorizationEndpoint: "+fmt.Sprintf("%#v", this.AuthorizationEndpoint)+",\n")
	s = append(s, "TokenEndpoint: "+fmt.Sprintf("%#v", this.TokenEndpoint)+",\n")
	s = append(s, "EndSessionEndpoint: "+fmt.Sprintf("%#v", this.EndSessionEndpoint)+",\n")
	s = append(s, "JwksUri: "+fmt.Sprintf("%#v", this.JwksUri)+",\n")
	s = append(s, "ClientId: "+fmt.Sprintf("%#v", this.ClientId)+",\n")
	s = append(s, "ClientSecret: "+fmt.Sprintf("%#v", this.ClientSecret)+",\n")
	s = append(s, "RedirectUri: "+fmt.Sprintf("%#v", this.RedirectUri)+",\n")
	s = append(s, "AllowedRedirectUrls: "+fmt.Sprintf("%#v", this.AllowedRedirectUrls)+",\n")
	s = append(s, "DisablePostLogoutRedirectUri: "+fmt.Sprintf("%#v", this.DisablePostLogoutRedirectUri)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Session) goString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&auth.Session{")
	s = append(s, "CookieExpiry: "+fmt.Sprintf("%#v", this.CookieExpiry)+",\n")
	s = append(s, "CookieRefreshInterval: "+fmt.Sprintf("%#v", this.CookieRefreshInterval)+",\n")
	s = append(s, "SessionExpiry: "+fmt.Sprintf("%#v", this.SessionExpiry)+",\n")
	s = append(s, "HmacKey: "+fmt.Sprintf("%#v", this.HmacKey)+",\n")
	s = append(s, "LogoutUri: "+fmt.Sprintf("%#v", this.LogoutUri)+",\n")
	s = append(s, "RedirectOriginEnabled: "+fmt.Sprintf("%#v", this.RedirectOriginEnabled)+",\n")
	s = append(s, "CsrfTokenUri: "+fmt.Sprintf("%#v", this.CsrfTokenUri)+",\n")
	s = append(s, "CsrfEnabled: "+fmt.Sprintf("%#v", this.CsrfEnabled)+",\n")
	s = append(s, "HmacKeySecondary: "+fmt.Sprintf("%#v", this.HmacKeySecondary)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Auth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Auth) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Auth) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DisablePostLogoutRedirectUri {
		i--
		if m.DisablePostLogoutRedirectUri {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if len(m.AllowedRedirectUrls) > 0 {
		for iNdEx := len(m.AllowedRedirectUrls) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AllowedRedirectUrls[iNdEx])
			copy(dAtA[i:], m.AllowedRedirectUrls[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.AllowedRedirectUrls[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.RedirectUri) > 0 {
		i -= len(m.RedirectUri)
		copy(dAtA[i:], m.RedirectUri)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.RedirectUri)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ClientSecret) > 0 {
		i -= len(m.ClientSecret)
		copy(dAtA[i:], m.ClientSecret)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ClientSecret)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ClientId) > 0 {
		i -= len(m.ClientId)
		copy(dAtA[i:], m.ClientId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ClientId)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.JwksUri) > 0 {
		i -= len(m.JwksUri)
		copy(dAtA[i:], m.JwksUri)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.JwksUri)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.EndSessionEndpoint) > 0 {
		i -= len(m.EndSessionEndpoint)
		copy(dAtA[i:], m.EndSessionEndpoint)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.EndSessionEndpoint)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TokenEndpoint) > 0 {
		i -= len(m.TokenEndpoint)
		copy(dAtA[i:], m.TokenEndpoint)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TokenEndpoint)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AuthorizationEndpoint) > 0 {
		i -= len(m.AuthorizationEndpoint)
		copy(dAtA[i:], m.AuthorizationEndpoint)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AuthorizationEndpoint)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AuthenticationFlow != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.AuthenticationFlow))
		i--
		dAtA[i] = 0x10
	}
	if len(m.OidcProviderName) > 0 {
		i -= len(m.OidcProviderName)
		copy(dAtA[i:], m.OidcProviderName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.OidcProviderName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Session) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Session) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Session) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HmacKeySecondary) > 0 {
		i -= len(m.HmacKeySecondary)
		copy(dAtA[i:], m.HmacKeySecondary)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.HmacKeySecondary)))
		i--
		dAtA[i] = 0x4a
	}
	if m.CsrfEnabled {
		i--
		if m.CsrfEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if len(m.CsrfTokenUri) > 0 {
		i -= len(m.CsrfTokenUri)
		copy(dAtA[i:], m.CsrfTokenUri)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CsrfTokenUri)))
		i--
		dAtA[i] = 0x3a
	}
	if m.RedirectOriginEnabled {
		i--
		if m.RedirectOriginEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.LogoutUri) > 0 {
		i -= len(m.LogoutUri)
		copy(dAtA[i:], m.LogoutUri)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.LogoutUri)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.HmacKey) > 0 {
		i -= len(m.HmacKey)
		copy(dAtA[i:], m.HmacKey)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.HmacKey)))
		i--
		dAtA[i] = 0x22
	}
	if m.SessionExpiry != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.SessionExpiry))
		i--
		dAtA[i] = 0x18
	}
	if m.CookieRefreshInterval != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.CookieRefreshInterval))
		i--
		dAtA[i] = 0x10
	}
	if m.CookieExpiry != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.CookieExpiry))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Auth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OidcProviderName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.AuthenticationFlow != 0 {
		n += 1 + sovTypes(uint64(m.AuthenticationFlow))
	}
	l = len(m.AuthorizationEndpoint)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.TokenEndpoint)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.EndSessionEndpoint)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.JwksUri)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ClientId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ClientSecret)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.RedirectUri)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.AllowedRedirectUrls) > 0 {
		for _, s := range m.AllowedRedirectUrls {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.DisablePostLogoutRedirectUri {
		n += 2
	}
	return n
}

func (m *Session) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CookieExpiry != 0 {
		n += 1 + sovTypes(uint64(m.CookieExpiry))
	}
	if m.CookieRefreshInterval != 0 {
		n += 1 + sovTypes(uint64(m.CookieRefreshInterval))
	}
	if m.SessionExpiry != 0 {
		n += 1 + sovTypes(uint64(m.SessionExpiry))
	}
	l = len(m.HmacKey)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.LogoutUri)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.RedirectOriginEnabled {
		n += 2
	}
	l = len(m.CsrfTokenUri)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.CsrfEnabled {
		n += 2
	}
	l = len(m.HmacKeySecondary)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Auth) string() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Auth{`,
		`OidcProviderName:` + fmt.Sprintf("%v", this.OidcProviderName) + `,`,
		`AuthenticationFlow:` + fmt.Sprintf("%v", this.AuthenticationFlow) + `,`,
		`AuthorizationEndpoint:` + fmt.Sprintf("%v", this.AuthorizationEndpoint) + `,`,
		`TokenEndpoint:` + fmt.Sprintf("%v", this.TokenEndpoint) + `,`,
		`EndSessionEndpoint:` + fmt.Sprintf("%v", this.EndSessionEndpoint) + `,`,
		`JwksUri:` + fmt.Sprintf("%v", this.JwksUri) + `,`,
		`ClientId:` + fmt.Sprintf("%v", this.ClientId) + `,`,
		`ClientSecret:` + fmt.Sprintf("%v", this.ClientSecret) + `,`,
		`RedirectUri:` + fmt.Sprintf("%v", this.RedirectUri) + `,`,
		`AllowedRedirectUrls:` + fmt.Sprintf("%v", this.AllowedRedirectUrls) + `,`,
		`DisablePostLogoutRedirectUri:` + fmt.Sprintf("%v", this.DisablePostLogoutRedirectUri) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Session) string() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Session{`,
		`CookieExpiry:` + fmt.Sprintf("%v", this.CookieExpiry) + `,`,
		`CookieRefreshInterval:` + fmt.Sprintf("%v", this.CookieRefreshInterval) + `,`,
		`SessionExpiry:` + fmt.Sprintf("%v", this.SessionExpiry) + `,`,
		`HmacKey:` + fmt.Sprintf("%v", this.HmacKey) + `,`,
		`LogoutUri:` + fmt.Sprintf("%v", this.LogoutUri) + `,`,
		`RedirectOriginEnabled:` + fmt.Sprintf("%v", this.RedirectOriginEnabled) + `,`,
		`CsrfTokenUri:` + fmt.Sprintf("%v", this.CsrfTokenUri) + `,`,
		`CsrfEnabled:` + fmt.Sprintf("%v", this.CsrfEnabled) + `,`,
		`HmacKeySecondary:` + fmt.Sprintf("%v", this.HmacKeySecondary) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Auth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Auth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Auth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OidcProviderName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OidcProviderName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthenticationFlow", wireType)
			}
			m.AuthenticationFlow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthenticationFlow |= AuthenticationFlow(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorizationEndpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthorizationEndpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenEndpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenEndpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndSessionEndpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndSessionEndpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JwksUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JwksUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientSecret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientSecret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedirectUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedirectUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedRedirectUrls", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedRedirectUrls = append(m.AllowedRedirectUrls, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisablePostLogoutRedirectUri", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisablePostLogoutRedirectUri = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Session) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Session: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Session: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CookieExpiry", wireType)
			}
			m.CookieExpiry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CookieExpiry |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CookieRefreshInterval", wireType)
			}
			m.CookieRefreshInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CookieRefreshInterval |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionExpiry", wireType)
			}
			m.SessionExpiry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionExpiry |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HmacKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HmacKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogoutUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogoutUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedirectOriginEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RedirectOriginEnabled = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CsrfTokenUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CsrfTokenUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CsrfEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CsrfEnabled = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HmacKeySecondary", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HmacKeySecondary = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

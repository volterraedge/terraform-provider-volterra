// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package auth

import (
	"bytes"
	"context"
	"fmt"
	io "io"
	"net/http"
	"strings"

	"github.com/gogo/protobuf/proto"
	"github.com/grpc-ecosystem/grpc-gateway/runtime"
	"google.golang.org/grpc"

	"gopkg.volterra.us/stdlib/client"
	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/errors"
	"gopkg.volterra.us/stdlib/server"
	"gopkg.volterra.us/stdlib/svcfw"
)

var (
	_ = fmt.Sprintf("dummy for fmt import use")
)

// Create CustomPrivateAPI GRPC Client satisfying server.CustomClient
type CustomPrivateAPIGrpcClient struct {
	conn       *grpc.ClientConn
	grpcClient CustomPrivateAPIClient
	// map of rpc name to its invocation
	rpcFns map[string]func(context.Context, string, ...grpc.CallOption) (proto.Message, error)
}

func (c *CustomPrivateAPIGrpcClient) doRPCLookupAuthConfig(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &LookupAuthConfigRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.instance_management.auth.LookupAuthConfigRequest", yamlReq)
	}
	rsp, err := c.grpcClient.LookupAuthConfig(ctx, req, opts...)
	return rsp, err
}

func (c *CustomPrivateAPIGrpcClient) doRPCLookupUserStatus(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &LookupUserStatusRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.instance_management.auth.LookupUserStatusRequest", yamlReq)
	}
	rsp, err := c.grpcClient.LookupUserStatus(ctx, req, opts...)
	return rsp, err
}

func (c *CustomPrivateAPIGrpcClient) doRPCValidateAPICredential(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &ValidateAPICredentialRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.instance_management.auth.ValidateAPICredentialRequest", yamlReq)
	}
	rsp, err := c.grpcClient.ValidateAPICredential(ctx, req, opts...)
	return rsp, err
}

func (c *CustomPrivateAPIGrpcClient) DoRPC(ctx context.Context, rpc string, opts ...server.CustomCallOpt) (proto.Message, error) {
	rpcFn, exists := c.rpcFns[rpc]
	if !exists {
		return nil, fmt.Errorf("Error, no such rpc %s", rpc)
	}
	cco := server.NewCustomCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	if cco.YAMLReq == "" {
		return nil, fmt.Errorf("Error, empty request body")
	}
	ctx = client.AddHdrsToCtx(cco.Headers, ctx)

	rsp, err := rpcFn(ctx, cco.YAMLReq, cco.GrpcCallOpts...)
	if err != nil {
		return nil, errors.Wrap(err, "Doing custom RPC using GRPC")
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return rsp, nil
}

func NewCustomPrivateAPIGrpcClient(cc *grpc.ClientConn) server.CustomClient {
	ccl := &CustomPrivateAPIGrpcClient{
		conn:       cc,
		grpcClient: NewCustomPrivateAPIClient(cc),
	}
	rpcFns := make(map[string]func(context.Context, string, ...grpc.CallOption) (proto.Message, error))
	rpcFns["LookupAuthConfig"] = ccl.doRPCLookupAuthConfig

	rpcFns["LookupUserStatus"] = ccl.doRPCLookupUserStatus

	rpcFns["ValidateAPICredential"] = ccl.doRPCValidateAPICredential

	ccl.rpcFns = rpcFns

	return ccl
}

// Create CustomPrivateAPI REST Client satisfying server.CustomClient
type CustomPrivateAPIRestClient struct {
	baseURL string
	client  http.Client
	// map of rpc name to its invocation
	rpcFns map[string]func(context.Context, *server.CustomCallOpts) (proto.Message, error)
}

func (c *CustomPrivateAPIRestClient) doRPCLookupAuthConfig(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &LookupAuthConfigRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.instance_management.auth.LookupAuthConfigRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("cname", fmt.Sprintf("%v", req.Cname))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &LookupAuthConfigResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.instance_management.auth.LookupAuthConfigResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomPrivateAPIRestClient) doRPCLookupUserStatus(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &LookupUserStatusRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.instance_management.auth.LookupUserStatusRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("cname", fmt.Sprintf("%v", req.Cname))
		q.Add("email", fmt.Sprintf("%v", req.Email))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &LookupUserStatusResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.instance_management.auth.LookupUserStatusResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomPrivateAPIRestClient) doRPCValidateAPICredential(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &ValidateAPICredentialRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.instance_management.auth.ValidateAPICredentialRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("token", fmt.Sprintf("%v", req.Token))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &ValidateAPICredentialResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.instance_management.auth.ValidateAPICredentialResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomPrivateAPIRestClient) DoRPC(ctx context.Context, rpc string, opts ...server.CustomCallOpt) (proto.Message, error) {
	rpcFn, exists := c.rpcFns[rpc]
	if !exists {
		return nil, fmt.Errorf("Error, no such rpc %s", rpc)
	}
	cco := server.NewCustomCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	rsp, err := rpcFn(ctx, cco)
	if err != nil {
		return nil, errors.Wrap(err, "Doing custom RPC using Rest")
	}
	return rsp, nil
}

func NewCustomPrivateAPIRestClient(baseURL string, hc http.Client) server.CustomClient {
	ccl := &CustomPrivateAPIRestClient{
		baseURL: baseURL,
		client:  hc,
	}

	rpcFns := make(map[string]func(context.Context, *server.CustomCallOpts) (proto.Message, error))
	rpcFns["LookupAuthConfig"] = ccl.doRPCLookupAuthConfig

	rpcFns["LookupUserStatus"] = ccl.doRPCLookupUserStatus

	rpcFns["ValidateAPICredential"] = ccl.doRPCValidateAPICredential

	ccl.rpcFns = rpcFns

	return ccl
}

// Create customPrivateAPIInprocClient

// INPROC Client (satisfying CustomPrivateAPIClient interface)
type customPrivateAPIInprocClient struct {
	CustomPrivateAPIServer
}

func (c *customPrivateAPIInprocClient) LookupAuthConfig(ctx context.Context, in *LookupAuthConfigRequest, opts ...grpc.CallOption) (*LookupAuthConfigResponse, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.instance_management.auth.CustomPrivateAPI.LookupAuthConfig")
	return c.CustomPrivateAPIServer.LookupAuthConfig(ctx, in)
}
func (c *customPrivateAPIInprocClient) LookupUserStatus(ctx context.Context, in *LookupUserStatusRequest, opts ...grpc.CallOption) (*LookupUserStatusResponse, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.instance_management.auth.CustomPrivateAPI.LookupUserStatus")
	return c.CustomPrivateAPIServer.LookupUserStatus(ctx, in)
}
func (c *customPrivateAPIInprocClient) ValidateAPICredential(ctx context.Context, in *ValidateAPICredentialRequest, opts ...grpc.CallOption) (*ValidateAPICredentialResponse, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.instance_management.auth.CustomPrivateAPI.ValidateAPICredential")
	return c.CustomPrivateAPIServer.ValidateAPICredential(ctx, in)
}

func NewCustomPrivateAPIInprocClient(svc svcfw.Service) CustomPrivateAPIClient {
	return &customPrivateAPIInprocClient{CustomPrivateAPIServer: NewCustomPrivateAPIServer(svc)}
}

// RegisterGwCustomPrivateAPIHandler registers with grpc-gw with an inproc-client backing so that
// rest to grpc happens without a grpc.Dial (thus avoiding additional certs for mTLS)
func RegisterGwCustomPrivateAPIHandler(ctx context.Context, mux *runtime.ServeMux, svc interface{}) error {
	s, ok := svc.(svcfw.Service)
	if !ok {
		return fmt.Errorf("svc is not svcfw.Service")
	}
	return RegisterCustomPrivateAPIHandlerClient(ctx, mux, NewCustomPrivateAPIInprocClient(s))
}

// Create customPrivateAPISrv

// SERVER (satisfying CustomPrivateAPIServer interface)
type customPrivateAPISrv struct {
	svc svcfw.Service
}

func (s *customPrivateAPISrv) LookupAuthConfig(ctx context.Context, in *LookupAuthConfigRequest) (*LookupAuthConfigResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.instance_management.auth.CustomPrivateAPI")
	cah, ok := ah.(CustomPrivateAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomPrivateAPIServer", ah)
	}

	var (
		rsp *LookupAuthConfigResponse
		err error
	)

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.instance_management.auth.CustomPrivateAPI.LookupAuthConfig"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.LookupAuthConfig(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	return rsp, nil
}
func (s *customPrivateAPISrv) LookupUserStatus(ctx context.Context, in *LookupUserStatusRequest) (*LookupUserStatusResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.instance_management.auth.CustomPrivateAPI")
	cah, ok := ah.(CustomPrivateAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomPrivateAPIServer", ah)
	}

	var (
		rsp *LookupUserStatusResponse
		err error
	)

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.instance_management.auth.CustomPrivateAPI.LookupUserStatus"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.LookupUserStatus(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	return rsp, nil
}
func (s *customPrivateAPISrv) ValidateAPICredential(ctx context.Context, in *ValidateAPICredentialRequest) (*ValidateAPICredentialResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.instance_management.auth.CustomPrivateAPI")
	cah, ok := ah.(CustomPrivateAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomPrivateAPIServer", ah)
	}

	var (
		rsp *ValidateAPICredentialResponse
		err error
	)

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.instance_management.auth.CustomPrivateAPI.ValidateAPICredential"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.ValidateAPICredential(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	return rsp, nil
}

func NewCustomPrivateAPIServer(svc svcfw.Service) CustomPrivateAPIServer {
	return &customPrivateAPISrv{svc: svc}
}

var CustomPrivateAPISwaggerJSON string = `{
    "swagger": "2.0",
    "info": {
        "title": "Auth Private Custom API",
        "description": "Custom API for authentication enablement.",
        "version": "version not set"
    },
    "schemes": [
        "http",
        "https"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "tags": [],
    "paths": {
        "/private/custom/namespaces/system/api_credentials/validation": {
            "post": {
                "summary": "Validate API credential",
                "description": "For API credential validation from API-GW.\nTo determine the validity of the credential, token in the request is the unique identifier to\nlookup corresponding API credential object in eywaprime.",
                "operationId": "ves.io.schema.instance_management.auth.CustomPrivateAPI.ValidateAPICredential",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/authValidateAPICredentialResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authValidateAPICredentialRequest"
                        }
                    }
                ],
                "tags": [
                    "CustomPrivateAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-instance_management-auth-customprivateapi-validateapicredential"
                },
                "x-ves-proto-rpc": "ves.io.schema.instance_management.auth.CustomPrivateAPI.ValidateAPICredential"
            },
            "x-displayname": "Custom Private API",
            "x-ves-proto-service": "ves.io.schema.instance_management.auth.CustomPrivateAPI",
            "x-ves-proto-service-type": "CUSTOM_PRIVATE"
        },
        "/private/custom/namespaces/system/tenant/auth_config": {
            "get": {
                "summary": "Lookup Auth Config",
                "description": "API to Lookup Auth Config",
                "operationId": "ves.io.schema.instance_management.auth.CustomPrivateAPI.LookupAuthConfig",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/authLookupAuthConfigResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "cname",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    }
                ],
                "tags": [
                    "CustomPrivateAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-instance_management-auth-customprivateapi-lookupauthconfig"
                },
                "x-ves-proto-rpc": "ves.io.schema.instance_management.auth.CustomPrivateAPI.LookupAuthConfig"
            },
            "x-displayname": "Custom Private API",
            "x-ves-proto-service": "ves.io.schema.instance_management.auth.CustomPrivateAPI",
            "x-ves-proto-service-type": "CUSTOM_PRIVATE"
        },
        "/ves.io.schema/introspect/read/namespaces/system/api_credentials/validation": {
            "post": {
                "summary": "Validate API credential",
                "description": "For API credential validation from API-GW.\nTo determine the validity of the credential, token in the request is the unique identifier to\nlookup corresponding API credential object in eywaprime.",
                "operationId": "ves.io.schema.instance_management.auth.CustomPrivateAPI.ValidateAPICredential",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/authValidateAPICredentialResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authValidateAPICredentialRequest"
                        }
                    }
                ],
                "tags": [
                    "CustomPrivateAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-instance_management-auth-customprivateapi-validateapicredential"
                },
                "x-ves-proto-rpc": "ves.io.schema.instance_management.auth.CustomPrivateAPI.ValidateAPICredential"
            },
            "x-displayname": "Custom Private API",
            "x-ves-proto-service": "ves.io.schema.instance_management.auth.CustomPrivateAPI",
            "x-ves-proto-service-type": "CUSTOM_PRIVATE"
        },
        "/ves.io.schema/introspect/read/namespaces/system/tenant/auth_config": {
            "get": {
                "summary": "Lookup Auth Config",
                "description": "API to Lookup Auth Config",
                "operationId": "ves.io.schema.instance_management.auth.CustomPrivateAPI.LookupAuthConfig",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/authLookupAuthConfigResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "cname",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    }
                ],
                "tags": [
                    "CustomPrivateAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-instance_management-auth-customprivateapi-lookupauthconfig"
                },
                "x-ves-proto-rpc": "ves.io.schema.instance_management.auth.CustomPrivateAPI.LookupAuthConfig"
            },
            "x-displayname": "Custom Private API",
            "x-ves-proto-service": "ves.io.schema.instance_management.auth.CustomPrivateAPI",
            "x-ves-proto-service-type": "CUSTOM_PRIVATE"
        },
        "/ves.io.schema/introspect/read/namespaces/system/tenant/user_status": {
            "get": {
                "summary": "Lookup User Status",
                "description": "API to Lookup User Status",
                "operationId": "ves.io.schema.instance_management.auth.CustomPrivateAPI.LookupUserStatus",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/authLookupUserStatusResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "cname",
                        "description": "x-required\nx-example: \"volterra\"\nCname will denote the cname of the tenant\nfor which the tenant allocation needs to be fetched.",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "x-displayname": "Cname"
                    },
                    {
                        "name": "email",
                        "description": "x-required\nx-example: \"user@f5.com\"\nEmail of a user which belongs to the tenant.",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "x-displayname": "Email"
                    }
                ],
                "tags": [
                    "CustomPrivateAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-instance_management-auth-customprivateapi-lookupuserstatus"
                },
                "x-ves-proto-rpc": "ves.io.schema.instance_management.auth.CustomPrivateAPI.LookupUserStatus"
            },
            "x-displayname": "Custom Private API",
            "x-ves-proto-service": "ves.io.schema.instance_management.auth.CustomPrivateAPI",
            "x-ves-proto-service-type": "CUSTOM_PRIVATE"
        }
    },
    "definitions": {
        "api_credentialAPICredentialType": {
            "type": "string",
            "description": "Types of API credential given when requesting credentials from volterra\n\nF5XC user certificate to access F5XC public API using mTLS\nusing self credential (my credential)\nKubernetes config file to access Virtual Kubernetes API in Volterra\nusing self credential (my credential)\nAPI token to access F5XC public API\nusing self credential (my credential)\nAPI token for service credentials\nusing service user credential (service credential)\nAPI certificate for service credentials\nusing service user credential (service credential)\nService Credential kubeconfig\nusing service user credential (service credential)\nKubeconfig for accessing Site via Global Controller\nusing self credential (my credential)\nToken for the SCIM public APIs used to sync users and groups with the F5XC platform.\nExternal identity provider's SCIM client can use this token as Bearer token with Authorization header\nService Credential Kubeconfig for accessing Site via Global Controller\nusing service user credential (service credential)",
            "title": "API Credential type",
            "enum": [
                "API_CERTIFICATE",
                "KUBE_CONFIG",
                "API_TOKEN",
                "SERVICE_API_TOKEN",
                "SERVICE_API_CERTIFICATE",
                "SERVICE_KUBE_CONFIG",
                "SITE_GLOBAL_KUBE_CONFIG",
                "SCIM_API_TOKEN",
                "SERVICE_SITE_GLOBAL_KUBE_CONFIG"
            ],
            "default": "API_CERTIFICATE",
            "x-displayname": "Credential Type",
            "x-ves-proto-enum": "ves.io.schema.api_credential.APICredentialType"
        },
        "authAuth": {
            "type": "object",
            "description": "Auth holds the secret auths for OIDCClientByCname private API response",
            "title": "Auth",
            "x-displayname": "Auth",
            "x-ves-proto-message": "ves.io.schema.instance_management.auth.Auth",
            "properties": {
                "allowed_redirect_urls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "authentication_flow": {
                    "$ref": "#/definitions/authAuthenticationFlow"
                },
                "authorization_endpoint": {
                    "type": "string"
                },
                "client_id": {
                    "type": "string"
                },
                "client_secret": {
                    "type": "string"
                },
                "disable_post_logout_redirect_uri": {
                    "type": "boolean",
                    "format": "boolean"
                },
                "end_session_endpoint": {
                    "type": "string"
                },
                "jwks_uri": {
                    "type": "string"
                },
                "oidc_provider_name": {
                    "type": "string"
                },
                "redirect_uri": {
                    "type": "string"
                },
                "token_endpoint": {
                    "type": "string"
                }
            }
        },
        "authAuthenticationFlow": {
            "type": "string",
            "description": "AuthenticationFlow defines the current state of authentication",
            "title": "AuthenticationFlow",
            "enum": [
                "UNKNOWN",
                "AUTHORIZATION",
                "IMPLICIT"
            ],
            "default": "UNKNOWN",
            "x-displayname": "Authentication Flow",
            "x-ves-proto-enum": "ves.io.schema.instance_management.auth.AuthenticationFlow"
        },
        "authLookupAuthConfigResponse": {
            "type": "object",
            "description": "Response for LookupAuthConfig private API",
            "title": "LookupAuthConfigResponse",
            "x-displayname": "Lookup Auth Config Response",
            "x-ves-proto-message": "ves.io.schema.instance_management.auth.LookupAuthConfigResponse",
            "properties": {
                "auth": {
                    "description": " Auth holds the secret auths for GetAuthConfigByCname private API response",
                    "title": "auth",
                    "$ref": "#/definitions/authAuth",
                    "x-displayname": "Auth"
                },
                "response_status": {
                    "description": " ResponseStatus to identify the status of the response",
                    "title": "ResponseStatus",
                    "$ref": "#/definitions/schemaResponseMeta",
                    "x-displayname": "response_status"
                },
                "session": {
                    "description": " Session holds the Session for GetAuthConfigByCname private API response",
                    "title": "session",
                    "$ref": "#/definitions/authSession",
                    "x-displayname": "Session"
                }
            }
        },
        "authLookupUserStatusResponse": {
            "type": "object",
            "title": "LookupUserStatusResponse",
            "x-displayname": "Lookup User Status Response",
            "x-ves-proto-message": "ves.io.schema.instance_management.auth.LookupUserStatusResponse",
            "properties": {
                "action": {
                    "description": " The recommended operational action for the tenant\n\nExample: - \"OperActionFreemiumSsoSignup\"-",
                    "title": "action",
                    "$ref": "#/definitions/tenantOperAction",
                    "x-displayname": "Action",
                    "x-ves-example": "OperActionFreemiumSsoSignup"
                },
                "instance_name": {
                    "type": "string",
                    "description": " Name of the f5xc instance to which the tenant is allocated.\n\nExample: - \"gc-0\"-",
                    "title": "instance_name",
                    "x-displayname": "InstanceName",
                    "x-ves-example": "gc-0"
                },
                "response_status": {
                    "description": " ResponseStatus to identify the status of the response",
                    "title": "ResponseStatus",
                    "$ref": "#/definitions/schemaResponseMeta",
                    "x-displayname": "response_status"
                },
                "tenant_id": {
                    "type": "string",
                    "description": " TenantId will denote the name of the tenant.\n\nExample: - \"abc-def\"-",
                    "title": "tenant_id",
                    "x-displayname": "TenantId",
                    "x-ves-example": "abc-def"
                },
                "tenant_status": {
                    "description": " State of the tenant.\n\nExample: - \"OperStatusActive\"-",
                    "title": "tenant_status",
                    "$ref": "#/definitions/schematenantOperStatus",
                    "x-displayname": "TenantStatus",
                    "x-ves-example": "OperStatusActive"
                },
                "user_idm_type": {
                    "description": " Idm type of the user.\n\nExample: - \"VOLTERRA_MANAGED\"-",
                    "title": "user_idm_type",
                    "$ref": "#/definitions/userIdmType",
                    "x-displayname": "UserIdmType",
                    "x-ves-example": "VOLTERRA_MANAGED"
                },
                "user_status": {
                    "description": " State of the user.\n\nExample: - \"OperStatusActive\"-",
                    "title": "user_status",
                    "$ref": "#/definitions/schemauserOperStatus",
                    "x-displayname": "UserStatus",
                    "x-ves-example": "OperStatusActive"
                }
            }
        },
        "authSession": {
            "type": "object",
            "description": "Session holds the Session for OIDCClientByCname private API response",
            "title": "Session",
            "x-displayname": "Session",
            "x-ves-proto-message": "ves.io.schema.instance_management.auth.Session",
            "properties": {
                "cookie_expiry": {
                    "type": "integer",
                    "format": "int64"
                },
                "cookie_refresh_interval": {
                    "type": "integer",
                    "format": "int64"
                },
                "csrf_enabled": {
                    "type": "boolean",
                    "format": "boolean"
                },
                "csrf_token_uri": {
                    "type": "string"
                },
                "hmac_key": {
                    "type": "string"
                },
                "hmac_key_secondary": {
                    "type": "string"
                },
                "logout_uri": {
                    "type": "string"
                },
                "redirect_origin_enabled": {
                    "type": "boolean",
                    "format": "boolean"
                },
                "session_expiry": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "authValidateAPICredentialRequest": {
            "type": "object",
            "description": "API Credential validate request",
            "title": "ValidateAPICredentialRequest",
            "x-displayname": "Validate API Credential",
            "x-ves-proto-message": "ves.io.schema.instance_management.auth.ValidateAPICredentialRequest",
            "properties": {
                "token": {
                    "type": "string",
                    "description": " unique identifier of for the type of credential.\n in case of API token, its the token itself and in case of\n API certificate its the serial number.\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.max_len: 256\n  ves.io.schema.rules.string.min_len: 1\n",
                    "title": "Token",
                    "minLength": 1,
                    "maxLength": 256,
                    "x-displayname": "Token",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.max_len": "256",
                        "ves.io.schema.rules.string.min_len": "1"
                    }
                }
            }
        },
        "authValidateAPICredentialResponse": {
            "type": "object",
            "description": "API Credential validate response",
            "title": "ValidateAPICredentialResponse",
            "x-displayname": "API credential validate response",
            "x-ves-proto-message": "ves.io.schema.instance_management.auth.ValidateAPICredentialResponse",
            "properties": {
                "cred_type": {
                    "description": " Type of API credential.",
                    "title": "Credential Type",
                    "$ref": "#/definitions/api_credentialAPICredentialType",
                    "x-displayname": "cred_type"
                },
                "instance_name": {
                    "type": "string",
                    "description": " F5XC instance to which the tenant belongs.",
                    "title": "InstanceName",
                    "x-displayname": "instance_name"
                },
                "response_status": {
                    "description": " ResponseStatus to identify the status of the response",
                    "title": "ResponseStatus",
                    "$ref": "#/definitions/schemaResponseMeta",
                    "x-displayname": "response_status"
                },
                "tenant_id": {
                    "type": "string",
                    "description": " Tenant id in which this credential is issued.",
                    "title": "TenantId",
                    "x-displayname": "tenant_id"
                },
                "user_name": {
                    "type": "string",
                    "description": " User name is the user associated to this credential.",
                    "title": "UserName",
                    "x-displayname": "user_name"
                },
                "valid": {
                    "type": "boolean",
                    "description": " Result of validation.",
                    "title": "Valid",
                    "format": "boolean",
                    "x-displayname": "valid"
                }
            }
        },
        "schemaErrorCode": {
            "type": "string",
            "description": "Union of all possible error-codes from system\n\n - EOK: No error\n - EPERMS: Permissions error\n - EBADINPUT: Input is not correct\n - ENOTFOUND: Not found\n - EEXISTS: Already exists\n - EUNKNOWN: Unknown/catchall error\n - ESERIALIZE: Error in serializing/de-serializing\n - EINTERNAL: Server error\n - EPARTIAL: Partial error",
            "title": "ErrorCode",
            "enum": [
                "EOK",
                "EPERMS",
                "EBADINPUT",
                "ENOTFOUND",
                "EEXISTS",
                "EUNKNOWN",
                "ESERIALIZE",
                "EINTERNAL",
                "EPARTIAL"
            ],
            "default": "EOK",
            "x-displayname": "Error Code",
            "x-ves-proto-enum": "ves.io.schema.ErrorCode"
        },
        "schemaResponseMeta": {
            "type": "object",
            "description": "ResponseMeta to identify the error status of the operation.",
            "title": "ResponseMeta",
            "x-displayname": "Response Meta",
            "x-ves-proto-message": "ves.io.schema.ResponseMeta",
            "properties": {
                "description": {
                    "type": "string",
                    "description": " Description holds the additional details regarding the error if any\n\nExample: - \"request failed with request{\"tenant_id\": \"f5-xyz\"}. the tenant with name 'f5-xyz' not found\"-",
                    "title": "description",
                    "x-displayname": "Description",
                    "x-ves-example": "request failed with request: {\"tenant_id\": \"f5-xyz\"}. the tenant with name 'f5-xyz' not found"
                },
                "display_message": {
                    "type": "string",
                    "description": " DisplayMessage holds the message to be shown to the user\n\nExample: - \"the tenant with name 'f5-xyz' not found\"-",
                    "title": "display_message",
                    "x-displayname": "DisplayMessage",
                    "x-ves-example": "the tenant with name 'f5-xyz' not found"
                },
                "error_code": {
                    "description": " ErrorCode is for identifying the status of the operation\n\nExample: - \"ErrNotFound\"-",
                    "title": "error_code",
                    "$ref": "#/definitions/schemaErrorCode",
                    "x-displayname": "ErrorCode",
                    "x-ves-example": "ErrNotFound"
                }
            }
        },
        "schematenantOperStatus": {
            "type": "string",
            "description": "OperStatus defines the operational state of the tenant\nwhich will be returned as part of API calls\n\n - OperStatusUndefined: OperStatusUndefined\n\nTenant state when it was created without any state.\n - OperStatusProvisioning: OperStatusProvisioning\n\nTenant state of initial bootstrapping tenant, registering tenant in other service and\npre-create default objects for the tenant like default namespaces, default roles etc.\n - OperStatusProvisioningFailed: OperStatusProvisioningFailed\n\nTenant state when initial bootstrapping was failed by some reason and must be retried\nafter issue is solved.\n - OperStatusActive: OperStatusActive\n\nTenant state of completely registered tenant and available to use.\n - OperStatusDisabled: OperStatusDisabled\n\nTenant state of disabled tenant which are in pre-deletion state.\n - OperStatusNotFound: OperStatusNotFound\n\nTenant not found.",
            "title": "OperStatus",
            "enum": [
                "OperStatusUndefined",
                "OperStatusProvisioning",
                "OperStatusProvisioningFailed",
                "OperStatusActive",
                "OperStatusDisabled",
                "OperStatusNotFound"
            ],
            "default": "OperStatusUndefined",
            "x-displayname": "OperStatus",
            "x-ves-proto-enum": "ves.io.schema.tenant.OperStatus"
        },
        "schemauserOperStatus": {
            "type": "string",
            "description": "OperStatus defines the operational state of the user\nwhich will be returned as part of API calls\n\n - OperStatusUndefined: OperStatusUndefined\n\nUser state when it was created without any state.\n - OperStatusProvisioning: OperStatusProvisioning\n\nUser creating state\n - OperStatusProvisioningFailed: OperStatusProvisioningFailed\n\nStatus for User creation failed\n - OperStatusActive: OperStatusActive\n\nUser is created and available\n - OperStatusDisabled: OperStatusDisabled\n\nStatus of the disabled user\n - OperStatusNotFound: OperStatusNotFound\n\nUser not found.\n - OperStatusInvalid: OperStatusInvalid\n\nStatus of state in which user attributes are not\ncorrectly created in the DB or in IAM\n - OperStatusFoundOnlyInIdm: OperStatusFoundOnlyInIdm\n\nState of a user which is available in IDM but not in the DB",
            "title": "OperStatus",
            "enum": [
                "OperStatusUndefined",
                "OperStatusProvisioning",
                "OperStatusProvisioningFailed",
                "OperStatusActive",
                "OperStatusDisabled",
                "OperStatusNotFound",
                "OperStatusInvalid",
                "OperStatusFoundOnlyInIdm"
            ],
            "default": "OperStatusUndefined",
            "x-displayname": "OperStatus",
            "x-ves-proto-enum": "ves.io.schema.user.OperStatus"
        },
        "tenantOperAction": {
            "type": "string",
            "description": "OperAction defines the recommended operational action for the tenant\n\n - OperActionNone: OperActionNone\n\nNo actions are required\n - OperActionFreemiumSsoSignup: OperActionFreemiumSsoSignup\n\nThe tenant and user are not found in local, but the user is found in IDM.\nThis implies that we need to initiate an freemium SSO signup.\nTODO: remove this when KC issue is resolved. Ref: https://gitlab.com/f5/volterra/ves.io/schema/-/merge_requests/5628#note_1619369851\n - OperActionSyncUser: OperActionSyncUser\n\nThe tenant is found but the user is found only in IDM.\nIn such cases we need to sync IDM user to local.\n - OperActionRetry: OperActionRetry\n\nOperActionRetry indicates that something is pending, so we need to\nretry the operation",
            "title": "OperAction",
            "enum": [
                "OperActionNone",
                "OperActionFreemiumSsoSignup",
                "OperActionSyncUser",
                "OperActionRetry"
            ],
            "default": "OperActionNone",
            "x-displayname": "OperAction",
            "x-ves-proto-enum": "ves.io.schema.tenant.OperAction"
        },
        "userIdmType": {
            "type": "string",
            "description": "IdmType is to identify who is managing the user.\n\n - SSO: SSO User\nExternally managed Single Sign On based user imported into UAM.\n - VOLTERRA_MANAGED: F5XC Managed Local user\nF5XC managed local user. Full user life cycle is managed by volterra UAM and Identity.\n - UNDEFINED: Undefined\nUndefined IDM type",
            "title": "IDM Type",
            "enum": [
                "SSO",
                "VOLTERRA_MANAGED",
                "UNDEFINED"
            ],
            "default": "SSO",
            "x-displayname": "Identity Management Type",
            "x-ves-proto-enum": "ves.io.schema.user.IdmType"
        }
    },
    "x-displayname": "Auth Private Custom API",
    "x-ves-proto-file": "ves.io/schema/instance_management/auth/private_customapi.proto"
}`

// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package service_policy

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_policy "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/policy"
	ves_io_schema_rate_limiter "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/rate_limiter"
	ves_io_schema_service_policy_rule "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/service_policy_rule"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *CreateSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetRuleChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetRuleChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSegmentPolicyDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetSegmentPolicyDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetRuleChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetRuleChoice() == nil {
		return nil, nil
	}
	switch m.GetRuleChoice().(type) {
	case *CreateSpecType_AllowList:

		drInfos, err := m.GetAllowList().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetAllowList().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "allow_list." + dri.DRField
		}
		return drInfos, err

	case *CreateSpecType_DenyList:

		drInfos, err := m.GetDenyList().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetDenyList().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "deny_list." + dri.DRField
		}
		return drInfos, err

	case *CreateSpecType_RuleList:

		drInfos, err := m.GetRuleList().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetRuleList().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "rule_list." + dri.DRField
		}
		return drInfos, err

	case *CreateSpecType_LegacyRuleList:

		drInfos, err := m.GetLegacyRuleList().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetLegacyRuleList().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "legacy_rule_list." + dri.DRField
		}
		return drInfos, err

	case *CreateSpecType_InternallyGenerated:

		return nil, nil

	case *CreateSpecType_AllowAllRequests:

		return nil, nil

	case *CreateSpecType_DenyAllRequests:

		return nil, nil

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetSegmentPolicyDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSegmentPolicy() == nil {
		return nil, nil
	}

	drInfos, err := m.GetSegmentPolicy().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetSegmentPolicy().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "segment_policy." + dri.DRField
	}
	return drInfos, err

}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) RuleChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for rule_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) ServerChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for server_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) ServerChoiceServerNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_ServerName, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for server_name")
	}
	return oValidatorFn_ServerName, nil
}

func (v *ValidateCreateSpecType) AlgoValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema_policy.RuleCombiningAlgorithm)
		return int32(i)
	}
	// ves_io_schema_policy.RuleCombiningAlgorithm_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, ves_io_schema_policy.RuleCombiningAlgorithm_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for algo")
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["algo"]; exists {

		vOpts := append(opts, db.WithValidateField("algo"))
		if err := fv(ctx, m.GetAlgo(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["port_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("port_matcher"))
		if err := fv(ctx, m.GetPortMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["rule_choice"]; exists {
		val := m.GetRuleChoice()
		vOpts := append(opts,
			db.WithValidateField("rule_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetRuleChoice().(type) {
	case *CreateSpecType_AllowList:
		if fv, exists := v.FldValidators["rule_choice.allow_list"]; exists {
			val := m.GetRuleChoice().(*CreateSpecType_AllowList).AllowList
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("allow_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_DenyList:
		if fv, exists := v.FldValidators["rule_choice.deny_list"]; exists {
			val := m.GetRuleChoice().(*CreateSpecType_DenyList).DenyList
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("deny_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_RuleList:
		if fv, exists := v.FldValidators["rule_choice.rule_list"]; exists {
			val := m.GetRuleChoice().(*CreateSpecType_RuleList).RuleList
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("rule_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_LegacyRuleList:
		if fv, exists := v.FldValidators["rule_choice.legacy_rule_list"]; exists {
			val := m.GetRuleChoice().(*CreateSpecType_LegacyRuleList).LegacyRuleList
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("legacy_rule_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_InternallyGenerated:
		if fv, exists := v.FldValidators["rule_choice.internally_generated"]; exists {
			val := m.GetRuleChoice().(*CreateSpecType_InternallyGenerated).InternallyGenerated
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("internally_generated"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_AllowAllRequests:
		if fv, exists := v.FldValidators["rule_choice.allow_all_requests"]; exists {
			val := m.GetRuleChoice().(*CreateSpecType_AllowAllRequests).AllowAllRequests
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("allow_all_requests"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_DenyAllRequests:
		if fv, exists := v.FldValidators["rule_choice.deny_all_requests"]; exists {
			val := m.GetRuleChoice().(*CreateSpecType_DenyAllRequests).DenyAllRequests
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("deny_all_requests"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["segment_policy"]; exists {

		vOpts := append(opts, db.WithValidateField("segment_policy"))
		if err := fv(ctx, m.GetSegmentPolicy(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["server_choice"]; exists {
		val := m.GetServerChoice()
		vOpts := append(opts,
			db.WithValidateField("server_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetServerChoice().(type) {
	case *CreateSpecType_ServerName:
		if fv, exists := v.FldValidators["server_choice.server_name"]; exists {
			val := m.GetServerChoice().(*CreateSpecType_ServerName).ServerName
			vOpts := append(opts,
				db.WithValidateField("server_choice"),
				db.WithValidateField("server_name"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_ServerSelector:
		if fv, exists := v.FldValidators["server_choice.server_selector"]; exists {
			val := m.GetServerChoice().(*CreateSpecType_ServerSelector).ServerSelector
			vOpts := append(opts,
				db.WithValidateField("server_choice"),
				db.WithValidateField("server_selector"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_ServerNameMatcher:
		if fv, exists := v.FldValidators["server_choice.server_name_matcher"]; exists {
			val := m.GetServerChoice().(*CreateSpecType_ServerNameMatcher).ServerNameMatcher
			vOpts := append(opts,
				db.WithValidateField("server_choice"),
				db.WithValidateField("server_name_matcher"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_AnyServer:
		if fv, exists := v.FldValidators["server_choice.any_server"]; exists {
			val := m.GetServerChoice().(*CreateSpecType_AnyServer).AnyServer
			vOpts := append(opts,
				db.WithValidateField("server_choice"),
				db.WithValidateField("any_server"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhRuleChoice := v.RuleChoiceValidationRuleHandler
	rulesRuleChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhRuleChoice(rulesRuleChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.rule_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rule_choice"] = vFn

	vrhServerChoice := v.ServerChoiceValidationRuleHandler
	rulesServerChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhServerChoice(rulesServerChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.server_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["server_choice"] = vFn

	vrhServerChoiceServerName := v.ServerChoiceServerNameValidationRuleHandler
	rulesServerChoiceServerName := map[string]string{
		"ves.io.schema.rules.string.max_bytes": "256",
	}
	vFnMap["server_choice.server_name"], err = vrhServerChoiceServerName(rulesServerChoiceServerName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field CreateSpecType.server_choice_server_name: %s", err)
		panic(errMsg)
	}

	v.FldValidators["server_choice.server_name"] = vFnMap["server_choice.server_name"]

	vrhAlgo := v.AlgoValidationRuleHandler
	rulesAlgo := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhAlgo(rulesAlgo)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.algo: %s", err)
		panic(errMsg)
	}
	v.FldValidators["algo"] = vFn

	v.FldValidators["rule_choice.allow_list"] = SourceListValidator().Validate
	v.FldValidators["rule_choice.deny_list"] = SourceListValidator().Validate
	v.FldValidators["rule_choice.rule_list"] = RuleListValidator().Validate
	v.FldValidators["rule_choice.legacy_rule_list"] = LegacyRuleListValidator().Validate

	v.FldValidators["server_choice.server_selector"] = ves_io_schema.LabelSelectorTypeValidator().Validate
	v.FldValidators["server_choice.server_name_matcher"] = ves_io_schema_policy.MatcherTypeBasicValidator().Validate

	v.FldValidators["port_matcher"] = ves_io_schema_policy.PortMatcherTypeValidator().Validate

	v.FldValidators["segment_policy"] = ves_io_schema_policy.SegmentPolicyTypeValidator().Validate

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GetSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetRuleChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetRuleChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetRulesDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetRulesDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSegmentPolicyDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetSegmentPolicyDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSimpleRulesDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetSimpleRulesDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetRuleChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetRuleChoice() == nil {
		return nil, nil
	}
	switch m.GetRuleChoice().(type) {
	case *GetSpecType_AllowList:

		drInfos, err := m.GetAllowList().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetAllowList().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "allow_list." + dri.DRField
		}
		return drInfos, err

	case *GetSpecType_DenyList:

		drInfos, err := m.GetDenyList().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetDenyList().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "deny_list." + dri.DRField
		}
		return drInfos, err

	case *GetSpecType_RuleList:

		drInfos, err := m.GetRuleList().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetRuleList().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "rule_list." + dri.DRField
		}
		return drInfos, err

	case *GetSpecType_LegacyRuleList:

		drInfos, err := m.GetLegacyRuleList().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetLegacyRuleList().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "legacy_rule_list." + dri.DRField
		}
		return drInfos, err

	case *GetSpecType_InternallyGenerated:

		return nil, nil

	case *GetSpecType_AllowAllRequests:

		return nil, nil

	case *GetSpecType_DenyAllRequests:

		return nil, nil

	default:
		return nil, nil
	}

}

func (m *GetSpecType) GetRulesDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetRules()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("GetSpecType.rules[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "service_policy_rule.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "rules",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetRulesDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GetSpecType) GetRulesDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "service_policy_rule.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: service_policy_rule")
	}
	for _, ref := range m.GetRules() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetSegmentPolicyDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSegmentPolicy() == nil {
		return nil, nil
	}

	drInfos, err := m.GetSegmentPolicy().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetSegmentPolicy().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "segment_policy." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetSimpleRulesDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSimpleRules() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetSimpleRules() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSimpleRules() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("simple_rules[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) RuleChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for rule_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) ServerChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for server_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) ServerChoiceServerNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_ServerName, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for server_name")
	}
	return oValidatorFn_ServerName, nil
}

func (v *ValidateGetSpecType) AlgoValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema_policy.RuleCombiningAlgorithm)
		return int32(i)
	}
	// ves_io_schema_policy.RuleCombiningAlgorithm_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, ves_io_schema_policy.RuleCombiningAlgorithm_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for algo")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) RulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) SimpleRulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for simple_rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*SimpleRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := SimpleRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for simple_rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*SimpleRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*SimpleRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated simple_rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items simple_rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["algo"]; exists {

		vOpts := append(opts, db.WithValidateField("algo"))
		if err := fv(ctx, m.GetAlgo(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["port_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("port_matcher"))
		if err := fv(ctx, m.GetPortMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["rule_choice"]; exists {
		val := m.GetRuleChoice()
		vOpts := append(opts,
			db.WithValidateField("rule_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetRuleChoice().(type) {
	case *GetSpecType_AllowList:
		if fv, exists := v.FldValidators["rule_choice.allow_list"]; exists {
			val := m.GetRuleChoice().(*GetSpecType_AllowList).AllowList
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("allow_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_DenyList:
		if fv, exists := v.FldValidators["rule_choice.deny_list"]; exists {
			val := m.GetRuleChoice().(*GetSpecType_DenyList).DenyList
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("deny_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_RuleList:
		if fv, exists := v.FldValidators["rule_choice.rule_list"]; exists {
			val := m.GetRuleChoice().(*GetSpecType_RuleList).RuleList
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("rule_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_LegacyRuleList:
		if fv, exists := v.FldValidators["rule_choice.legacy_rule_list"]; exists {
			val := m.GetRuleChoice().(*GetSpecType_LegacyRuleList).LegacyRuleList
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("legacy_rule_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_InternallyGenerated:
		if fv, exists := v.FldValidators["rule_choice.internally_generated"]; exists {
			val := m.GetRuleChoice().(*GetSpecType_InternallyGenerated).InternallyGenerated
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("internally_generated"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_AllowAllRequests:
		if fv, exists := v.FldValidators["rule_choice.allow_all_requests"]; exists {
			val := m.GetRuleChoice().(*GetSpecType_AllowAllRequests).AllowAllRequests
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("allow_all_requests"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_DenyAllRequests:
		if fv, exists := v.FldValidators["rule_choice.deny_all_requests"]; exists {
			val := m.GetRuleChoice().(*GetSpecType_DenyAllRequests).DenyAllRequests
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("deny_all_requests"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["rules"]; exists {
		vOpts := append(opts, db.WithValidateField("rules"))
		if err := fv(ctx, m.GetRules(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["segment_policy"]; exists {

		vOpts := append(opts, db.WithValidateField("segment_policy"))
		if err := fv(ctx, m.GetSegmentPolicy(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["server_choice"]; exists {
		val := m.GetServerChoice()
		vOpts := append(opts,
			db.WithValidateField("server_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetServerChoice().(type) {
	case *GetSpecType_ServerName:
		if fv, exists := v.FldValidators["server_choice.server_name"]; exists {
			val := m.GetServerChoice().(*GetSpecType_ServerName).ServerName
			vOpts := append(opts,
				db.WithValidateField("server_choice"),
				db.WithValidateField("server_name"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_ServerSelector:
		if fv, exists := v.FldValidators["server_choice.server_selector"]; exists {
			val := m.GetServerChoice().(*GetSpecType_ServerSelector).ServerSelector
			vOpts := append(opts,
				db.WithValidateField("server_choice"),
				db.WithValidateField("server_selector"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_ServerNameMatcher:
		if fv, exists := v.FldValidators["server_choice.server_name_matcher"]; exists {
			val := m.GetServerChoice().(*GetSpecType_ServerNameMatcher).ServerNameMatcher
			vOpts := append(opts,
				db.WithValidateField("server_choice"),
				db.WithValidateField("server_name_matcher"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_AnyServer:
		if fv, exists := v.FldValidators["server_choice.any_server"]; exists {
			val := m.GetServerChoice().(*GetSpecType_AnyServer).AnyServer
			vOpts := append(opts,
				db.WithValidateField("server_choice"),
				db.WithValidateField("any_server"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["simple_rules"]; exists {
		vOpts := append(opts, db.WithValidateField("simple_rules"))
		if err := fv(ctx, m.GetSimpleRules(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhRuleChoice := v.RuleChoiceValidationRuleHandler
	rulesRuleChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhRuleChoice(rulesRuleChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.rule_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rule_choice"] = vFn

	vrhServerChoice := v.ServerChoiceValidationRuleHandler
	rulesServerChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhServerChoice(rulesServerChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.server_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["server_choice"] = vFn

	vrhServerChoiceServerName := v.ServerChoiceServerNameValidationRuleHandler
	rulesServerChoiceServerName := map[string]string{
		"ves.io.schema.rules.string.max_bytes": "256",
	}
	vFnMap["server_choice.server_name"], err = vrhServerChoiceServerName(rulesServerChoiceServerName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field GetSpecType.server_choice_server_name: %s", err)
		panic(errMsg)
	}

	v.FldValidators["server_choice.server_name"] = vFnMap["server_choice.server_name"]

	vrhAlgo := v.AlgoValidationRuleHandler
	rulesAlgo := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhAlgo(rulesAlgo)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.algo: %s", err)
		panic(errMsg)
	}
	v.FldValidators["algo"] = vFn

	vrhRules := v.RulesValidationRuleHandler
	rulesRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "256",
	}
	vFn, err = vrhRules(rulesRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rules"] = vFn

	vrhSimpleRules := v.SimpleRulesValidationRuleHandler
	rulesSimpleRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1024",
	}
	vFn, err = vrhSimpleRules(rulesSimpleRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.simple_rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["simple_rules"] = vFn

	v.FldValidators["rule_choice.allow_list"] = SourceListValidator().Validate
	v.FldValidators["rule_choice.deny_list"] = SourceListValidator().Validate
	v.FldValidators["rule_choice.rule_list"] = RuleListValidator().Validate
	v.FldValidators["rule_choice.legacy_rule_list"] = LegacyRuleListValidator().Validate

	v.FldValidators["server_choice.server_selector"] = ves_io_schema.LabelSelectorTypeValidator().Validate
	v.FldValidators["server_choice.server_name_matcher"] = ves_io_schema_policy.MatcherTypeBasicValidator().Validate

	v.FldValidators["port_matcher"] = ves_io_schema_policy.PortMatcherTypeValidator().Validate

	v.FldValidators["segment_policy"] = ves_io_schema_policy.SegmentPolicyTypeValidator().Validate

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GlobalSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetDefaultForwardingClassesDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetDefaultForwardingClassesDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetRuleChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetRuleChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetRulesDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetRulesDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSegmentPolicyDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetSegmentPolicyDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSimpleRulesDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetSimpleRulesDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetViewInternalDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetViewInternalDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *GlobalSpecType) GetDefaultForwardingClassesDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetDefaultForwardingClasses()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("GlobalSpecType.default_forwarding_classes[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "forwarding_class.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "default_forwarding_classes",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetDefaultForwardingClassesDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetDefaultForwardingClassesDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "forwarding_class.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: forwarding_class")
	}
	for _, ref := range m.GetDefaultForwardingClasses() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetRuleChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetRuleChoice() == nil {
		return nil, nil
	}
	switch m.GetRuleChoice().(type) {
	case *GlobalSpecType_AllowList:

		drInfos, err := m.GetAllowList().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetAllowList().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "allow_list." + dri.DRField
		}
		return drInfos, err

	case *GlobalSpecType_DenyList:

		drInfos, err := m.GetDenyList().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetDenyList().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "deny_list." + dri.DRField
		}
		return drInfos, err

	case *GlobalSpecType_RuleList:

		drInfos, err := m.GetRuleList().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetRuleList().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "rule_list." + dri.DRField
		}
		return drInfos, err

	case *GlobalSpecType_LegacyRuleList:

		drInfos, err := m.GetLegacyRuleList().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetLegacyRuleList().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "legacy_rule_list." + dri.DRField
		}
		return drInfos, err

	case *GlobalSpecType_InternallyGenerated:

		return nil, nil

	case *GlobalSpecType_AllowAllRequests:

		return nil, nil

	case *GlobalSpecType_DenyAllRequests:

		return nil, nil

	default:
		return nil, nil
	}

}

func (m *GlobalSpecType) GetRulesDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetRules()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("GlobalSpecType.rules[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "service_policy_rule.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "rules",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetRulesDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetRulesDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "service_policy_rule.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: service_policy_rule")
	}
	for _, ref := range m.GetRules() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetSegmentPolicyDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSegmentPolicy() == nil {
		return nil, nil
	}

	drInfos, err := m.GetSegmentPolicy().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetSegmentPolicy().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "segment_policy." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetSimpleRulesDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSimpleRules() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetSimpleRules() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSimpleRules() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("simple_rules[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

func (m *GlobalSpecType) GetViewInternalDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetViewInternal()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("view_internal.Object")
	dri := db.DRefInfo{
		RefdType:   "view_internal.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "view_internal",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetViewInternalDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetViewInternalDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "view_internal.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: view_internal")
	}

	vref := m.GetViewInternal()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "view_internal.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) RuleChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for rule_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) ServerChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for server_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) ServerChoiceServerNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_ServerName, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for server_name")
	}
	return oValidatorFn_ServerName, nil
}

func (v *ValidateGlobalSpecType) AlgoValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema_policy.RuleCombiningAlgorithm)
		return int32(i)
	}
	// ves_io_schema_policy.RuleCombiningAlgorithm_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, ves_io_schema_policy.RuleCombiningAlgorithm_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for algo")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) RulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) DefaultForwardingClassesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for default_forwarding_classes")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for default_forwarding_classes")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated default_forwarding_classes")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items default_forwarding_classes")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) SimpleRulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for simple_rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*SimpleRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := SimpleRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for simple_rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*SimpleRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*SimpleRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated simple_rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items simple_rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["algo"]; exists {

		vOpts := append(opts, db.WithValidateField("algo"))
		if err := fv(ctx, m.GetAlgo(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["default_forwarding_classes"]; exists {
		vOpts := append(opts, db.WithValidateField("default_forwarding_classes"))
		if err := fv(ctx, m.GetDefaultForwardingClasses(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["deny_info"]; exists {

		vOpts := append(opts, db.WithValidateField("deny_info"))
		if err := fv(ctx, m.GetDenyInfo(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["port_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("port_matcher"))
		if err := fv(ctx, m.GetPortMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["role"]; exists {

		vOpts := append(opts, db.WithValidateField("role"))
		if err := fv(ctx, m.GetRole(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["rule_choice"]; exists {
		val := m.GetRuleChoice()
		vOpts := append(opts,
			db.WithValidateField("rule_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetRuleChoice().(type) {
	case *GlobalSpecType_AllowList:
		if fv, exists := v.FldValidators["rule_choice.allow_list"]; exists {
			val := m.GetRuleChoice().(*GlobalSpecType_AllowList).AllowList
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("allow_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_DenyList:
		if fv, exists := v.FldValidators["rule_choice.deny_list"]; exists {
			val := m.GetRuleChoice().(*GlobalSpecType_DenyList).DenyList
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("deny_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_RuleList:
		if fv, exists := v.FldValidators["rule_choice.rule_list"]; exists {
			val := m.GetRuleChoice().(*GlobalSpecType_RuleList).RuleList
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("rule_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_LegacyRuleList:
		if fv, exists := v.FldValidators["rule_choice.legacy_rule_list"]; exists {
			val := m.GetRuleChoice().(*GlobalSpecType_LegacyRuleList).LegacyRuleList
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("legacy_rule_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_InternallyGenerated:
		if fv, exists := v.FldValidators["rule_choice.internally_generated"]; exists {
			val := m.GetRuleChoice().(*GlobalSpecType_InternallyGenerated).InternallyGenerated
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("internally_generated"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_AllowAllRequests:
		if fv, exists := v.FldValidators["rule_choice.allow_all_requests"]; exists {
			val := m.GetRuleChoice().(*GlobalSpecType_AllowAllRequests).AllowAllRequests
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("allow_all_requests"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_DenyAllRequests:
		if fv, exists := v.FldValidators["rule_choice.deny_all_requests"]; exists {
			val := m.GetRuleChoice().(*GlobalSpecType_DenyAllRequests).DenyAllRequests
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("deny_all_requests"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["rules"]; exists {
		vOpts := append(opts, db.WithValidateField("rules"))
		if err := fv(ctx, m.GetRules(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["segment_policy"]; exists {

		vOpts := append(opts, db.WithValidateField("segment_policy"))
		if err := fv(ctx, m.GetSegmentPolicy(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["server_choice"]; exists {
		val := m.GetServerChoice()
		vOpts := append(opts,
			db.WithValidateField("server_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetServerChoice().(type) {
	case *GlobalSpecType_ServerName:
		if fv, exists := v.FldValidators["server_choice.server_name"]; exists {
			val := m.GetServerChoice().(*GlobalSpecType_ServerName).ServerName
			vOpts := append(opts,
				db.WithValidateField("server_choice"),
				db.WithValidateField("server_name"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_ServerSelector:
		if fv, exists := v.FldValidators["server_choice.server_selector"]; exists {
			val := m.GetServerChoice().(*GlobalSpecType_ServerSelector).ServerSelector
			vOpts := append(opts,
				db.WithValidateField("server_choice"),
				db.WithValidateField("server_selector"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_ServerNameMatcher:
		if fv, exists := v.FldValidators["server_choice.server_name_matcher"]; exists {
			val := m.GetServerChoice().(*GlobalSpecType_ServerNameMatcher).ServerNameMatcher
			vOpts := append(opts,
				db.WithValidateField("server_choice"),
				db.WithValidateField("server_name_matcher"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_AnyServer:
		if fv, exists := v.FldValidators["server_choice.any_server"]; exists {
			val := m.GetServerChoice().(*GlobalSpecType_AnyServer).AnyServer
			vOpts := append(opts,
				db.WithValidateField("server_choice"),
				db.WithValidateField("any_server"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["simple_rules"]; exists {
		vOpts := append(opts, db.WithValidateField("simple_rules"))
		if err := fv(ctx, m.GetSimpleRules(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["view_internal"]; exists {

		vOpts := append(opts, db.WithValidateField("view_internal"))
		if err := fv(ctx, m.GetViewInternal(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhRuleChoice := v.RuleChoiceValidationRuleHandler
	rulesRuleChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhRuleChoice(rulesRuleChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.rule_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rule_choice"] = vFn

	vrhServerChoice := v.ServerChoiceValidationRuleHandler
	rulesServerChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhServerChoice(rulesServerChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.server_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["server_choice"] = vFn

	vrhServerChoiceServerName := v.ServerChoiceServerNameValidationRuleHandler
	rulesServerChoiceServerName := map[string]string{
		"ves.io.schema.rules.string.max_bytes": "256",
	}
	vFnMap["server_choice.server_name"], err = vrhServerChoiceServerName(rulesServerChoiceServerName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field GlobalSpecType.server_choice_server_name: %s", err)
		panic(errMsg)
	}

	v.FldValidators["server_choice.server_name"] = vFnMap["server_choice.server_name"]

	vrhAlgo := v.AlgoValidationRuleHandler
	rulesAlgo := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhAlgo(rulesAlgo)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.algo: %s", err)
		panic(errMsg)
	}
	v.FldValidators["algo"] = vFn

	vrhRules := v.RulesValidationRuleHandler
	rulesRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "256",
	}
	vFn, err = vrhRules(rulesRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rules"] = vFn

	vrhDefaultForwardingClasses := v.DefaultForwardingClassesValidationRuleHandler
	rulesDefaultForwardingClasses := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "3",
	}
	vFn, err = vrhDefaultForwardingClasses(rulesDefaultForwardingClasses)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.default_forwarding_classes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["default_forwarding_classes"] = vFn

	vrhSimpleRules := v.SimpleRulesValidationRuleHandler
	rulesSimpleRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1024",
	}
	vFn, err = vrhSimpleRules(rulesSimpleRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.simple_rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["simple_rules"] = vFn

	v.FldValidators["rule_choice.allow_list"] = SourceListValidator().Validate
	v.FldValidators["rule_choice.deny_list"] = SourceListValidator().Validate
	v.FldValidators["rule_choice.rule_list"] = RuleListValidator().Validate
	v.FldValidators["rule_choice.legacy_rule_list"] = LegacyRuleListValidator().Validate

	v.FldValidators["server_choice.server_selector"] = ves_io_schema.LabelSelectorTypeValidator().Validate
	v.FldValidators["server_choice.server_name_matcher"] = ves_io_schema_policy.MatcherTypeBasicValidator().Validate

	v.FldValidators["port_matcher"] = ves_io_schema_policy.PortMatcherTypeValidator().Validate

	v.FldValidators["role"] = ves_io_schema_policy.RoleMatcherTypeValidator().Validate

	v.FldValidators["deny_info"] = ves_io_schema_policy.DenyInformationValidator().Validate

	v.FldValidators["segment_policy"] = ves_io_schema_policy.SegmentPolicyTypeValidator().Validate

	v.FldValidators["view_internal"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *LegacyRuleList) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *LegacyRuleList) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *LegacyRuleList) DeepCopy() *LegacyRuleList {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &LegacyRuleList{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *LegacyRuleList) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *LegacyRuleList) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return LegacyRuleListValidator().Validate(ctx, m, opts...)
}

func (m *LegacyRuleList) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetRulesDRefInfo()

}

func (m *LegacyRuleList) GetRulesDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetRules()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("LegacyRuleList.rules[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "service_policy_rule.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "rules",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetRulesDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *LegacyRuleList) GetRulesDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "service_policy_rule.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: service_policy_rule")
	}
	for _, ref := range m.GetRules() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateLegacyRuleList struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateLegacyRuleList) RulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateLegacyRuleList) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*LegacyRuleList)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *LegacyRuleList got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["rules"]; exists {
		vOpts := append(opts, db.WithValidateField("rules"))
		if err := fv(ctx, m.GetRules(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultLegacyRuleListValidator = func() *ValidateLegacyRuleList {
	v := &ValidateLegacyRuleList{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhRules := v.RulesValidationRuleHandler
	rulesRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "256",
	}
	vFn, err = vrhRules(rulesRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for LegacyRuleList.rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rules"] = vFn

	return v
}()

func LegacyRuleListValidator() db.Validator {
	return DefaultLegacyRuleListValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *ReplaceSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetRuleChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetRuleChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSegmentPolicyDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetSegmentPolicyDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetRuleChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetRuleChoice() == nil {
		return nil, nil
	}
	switch m.GetRuleChoice().(type) {
	case *ReplaceSpecType_AllowList:

		drInfos, err := m.GetAllowList().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetAllowList().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "allow_list." + dri.DRField
		}
		return drInfos, err

	case *ReplaceSpecType_DenyList:

		drInfos, err := m.GetDenyList().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetDenyList().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "deny_list." + dri.DRField
		}
		return drInfos, err

	case *ReplaceSpecType_RuleList:

		drInfos, err := m.GetRuleList().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetRuleList().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "rule_list." + dri.DRField
		}
		return drInfos, err

	case *ReplaceSpecType_LegacyRuleList:

		drInfos, err := m.GetLegacyRuleList().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetLegacyRuleList().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "legacy_rule_list." + dri.DRField
		}
		return drInfos, err

	case *ReplaceSpecType_InternallyGenerated:

		return nil, nil

	case *ReplaceSpecType_AllowAllRequests:

		return nil, nil

	case *ReplaceSpecType_DenyAllRequests:

		return nil, nil

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetSegmentPolicyDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSegmentPolicy() == nil {
		return nil, nil
	}

	drInfos, err := m.GetSegmentPolicy().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetSegmentPolicy().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "segment_policy." + dri.DRField
	}
	return drInfos, err

}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) RuleChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for rule_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) ServerChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for server_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) ServerChoiceServerNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_ServerName, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for server_name")
	}
	return oValidatorFn_ServerName, nil
}

func (v *ValidateReplaceSpecType) AlgoValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema_policy.RuleCombiningAlgorithm)
		return int32(i)
	}
	// ves_io_schema_policy.RuleCombiningAlgorithm_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, ves_io_schema_policy.RuleCombiningAlgorithm_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for algo")
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["algo"]; exists {

		vOpts := append(opts, db.WithValidateField("algo"))
		if err := fv(ctx, m.GetAlgo(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["port_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("port_matcher"))
		if err := fv(ctx, m.GetPortMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["rule_choice"]; exists {
		val := m.GetRuleChoice()
		vOpts := append(opts,
			db.WithValidateField("rule_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetRuleChoice().(type) {
	case *ReplaceSpecType_AllowList:
		if fv, exists := v.FldValidators["rule_choice.allow_list"]; exists {
			val := m.GetRuleChoice().(*ReplaceSpecType_AllowList).AllowList
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("allow_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_DenyList:
		if fv, exists := v.FldValidators["rule_choice.deny_list"]; exists {
			val := m.GetRuleChoice().(*ReplaceSpecType_DenyList).DenyList
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("deny_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_RuleList:
		if fv, exists := v.FldValidators["rule_choice.rule_list"]; exists {
			val := m.GetRuleChoice().(*ReplaceSpecType_RuleList).RuleList
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("rule_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_LegacyRuleList:
		if fv, exists := v.FldValidators["rule_choice.legacy_rule_list"]; exists {
			val := m.GetRuleChoice().(*ReplaceSpecType_LegacyRuleList).LegacyRuleList
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("legacy_rule_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_InternallyGenerated:
		if fv, exists := v.FldValidators["rule_choice.internally_generated"]; exists {
			val := m.GetRuleChoice().(*ReplaceSpecType_InternallyGenerated).InternallyGenerated
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("internally_generated"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_AllowAllRequests:
		if fv, exists := v.FldValidators["rule_choice.allow_all_requests"]; exists {
			val := m.GetRuleChoice().(*ReplaceSpecType_AllowAllRequests).AllowAllRequests
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("allow_all_requests"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_DenyAllRequests:
		if fv, exists := v.FldValidators["rule_choice.deny_all_requests"]; exists {
			val := m.GetRuleChoice().(*ReplaceSpecType_DenyAllRequests).DenyAllRequests
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("deny_all_requests"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["segment_policy"]; exists {

		vOpts := append(opts, db.WithValidateField("segment_policy"))
		if err := fv(ctx, m.GetSegmentPolicy(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["server_choice"]; exists {
		val := m.GetServerChoice()
		vOpts := append(opts,
			db.WithValidateField("server_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetServerChoice().(type) {
	case *ReplaceSpecType_ServerName:
		if fv, exists := v.FldValidators["server_choice.server_name"]; exists {
			val := m.GetServerChoice().(*ReplaceSpecType_ServerName).ServerName
			vOpts := append(opts,
				db.WithValidateField("server_choice"),
				db.WithValidateField("server_name"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_ServerSelector:
		if fv, exists := v.FldValidators["server_choice.server_selector"]; exists {
			val := m.GetServerChoice().(*ReplaceSpecType_ServerSelector).ServerSelector
			vOpts := append(opts,
				db.WithValidateField("server_choice"),
				db.WithValidateField("server_selector"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_ServerNameMatcher:
		if fv, exists := v.FldValidators["server_choice.server_name_matcher"]; exists {
			val := m.GetServerChoice().(*ReplaceSpecType_ServerNameMatcher).ServerNameMatcher
			vOpts := append(opts,
				db.WithValidateField("server_choice"),
				db.WithValidateField("server_name_matcher"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_AnyServer:
		if fv, exists := v.FldValidators["server_choice.any_server"]; exists {
			val := m.GetServerChoice().(*ReplaceSpecType_AnyServer).AnyServer
			vOpts := append(opts,
				db.WithValidateField("server_choice"),
				db.WithValidateField("any_server"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhRuleChoice := v.RuleChoiceValidationRuleHandler
	rulesRuleChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhRuleChoice(rulesRuleChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.rule_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rule_choice"] = vFn

	vrhServerChoice := v.ServerChoiceValidationRuleHandler
	rulesServerChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhServerChoice(rulesServerChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.server_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["server_choice"] = vFn

	vrhServerChoiceServerName := v.ServerChoiceServerNameValidationRuleHandler
	rulesServerChoiceServerName := map[string]string{
		"ves.io.schema.rules.string.max_bytes": "256",
	}
	vFnMap["server_choice.server_name"], err = vrhServerChoiceServerName(rulesServerChoiceServerName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field ReplaceSpecType.server_choice_server_name: %s", err)
		panic(errMsg)
	}

	v.FldValidators["server_choice.server_name"] = vFnMap["server_choice.server_name"]

	vrhAlgo := v.AlgoValidationRuleHandler
	rulesAlgo := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhAlgo(rulesAlgo)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.algo: %s", err)
		panic(errMsg)
	}
	v.FldValidators["algo"] = vFn

	v.FldValidators["rule_choice.allow_list"] = SourceListValidator().Validate
	v.FldValidators["rule_choice.deny_list"] = SourceListValidator().Validate
	v.FldValidators["rule_choice.rule_list"] = RuleListValidator().Validate
	v.FldValidators["rule_choice.legacy_rule_list"] = LegacyRuleListValidator().Validate

	v.FldValidators["server_choice.server_selector"] = ves_io_schema.LabelSelectorTypeValidator().Validate
	v.FldValidators["server_choice.server_name_matcher"] = ves_io_schema_policy.MatcherTypeBasicValidator().Validate

	v.FldValidators["port_matcher"] = ves_io_schema_policy.PortMatcherTypeValidator().Validate

	v.FldValidators["segment_policy"] = ves_io_schema_policy.SegmentPolicyTypeValidator().Validate

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *Rule) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *Rule) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *Rule) DeepCopy() *Rule {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &Rule{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *Rule) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *Rule) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return RuleValidator().Validate(ctx, m, opts...)
}

func (m *Rule) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetSpecDRefInfo()

}

// GetDRefInfo for the field's type
func (m *Rule) GetSpecDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSpec() == nil {
		return nil, nil
	}

	drInfos, err := m.GetSpec().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetSpec().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "spec." + dri.DRField
	}
	return drInfos, err

}

type ValidateRule struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateRule) MetadataValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for metadata")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.MessageMetaTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateRule) SpecValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for spec")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema_service_policy_rule.GlobalSpecTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateRule) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*Rule)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *Rule got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["metadata"]; exists {

		vOpts := append(opts, db.WithValidateField("metadata"))
		if err := fv(ctx, m.GetMetadata(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["spec"]; exists {

		vOpts := append(opts, db.WithValidateField("spec"))
		if err := fv(ctx, m.GetSpec(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultRuleValidator = func() *ValidateRule {
	v := &ValidateRule{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhMetadata := v.MetadataValidationRuleHandler
	rulesMetadata := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhMetadata(rulesMetadata)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for Rule.metadata: %s", err)
		panic(errMsg)
	}
	v.FldValidators["metadata"] = vFn

	vrhSpec := v.SpecValidationRuleHandler
	rulesSpec := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhSpec(rulesSpec)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for Rule.spec: %s", err)
		panic(errMsg)
	}
	v.FldValidators["spec"] = vFn

	return v
}()

func RuleValidator() db.Validator {
	return DefaultRuleValidator
}

// augmented methods on protoc/std generated struct

func (m *RuleList) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *RuleList) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *RuleList) DeepCopy() *RuleList {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &RuleList{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *RuleList) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *RuleList) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return RuleListValidator().Validate(ctx, m, opts...)
}

func (m *RuleList) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetRulesDRefInfo()

}

// GetDRefInfo for the field's type
func (m *RuleList) GetRulesDRefInfo() ([]db.DRefInfo, error) {
	if m.GetRules() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetRules() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetRules() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("rules[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

type ValidateRuleList struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateRuleList) RulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*Rule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := RuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*Rule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*Rule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateRuleList) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*RuleList)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *RuleList got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["rules"]; exists {
		vOpts := append(opts, db.WithValidateField("rules"))
		if err := fv(ctx, m.GetRules(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultRuleListValidator = func() *ValidateRuleList {
	v := &ValidateRuleList{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhRules := v.RulesValidationRuleHandler
	rulesRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "256",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhRules(rulesRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RuleList.rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rules"] = vFn

	return v
}()

func RuleListValidator() db.Validator {
	return DefaultRuleListValidator
}

// augmented methods on protoc/std generated struct

func (m *SimpleRule) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SimpleRule) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SimpleRule) DeepCopy() *SimpleRule {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SimpleRule{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SimpleRule) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SimpleRule) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SimpleRuleValidator().Validate(ctx, m, opts...)
}

func (m *SimpleRule) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetAsnMatcherDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetAsnMatcherDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetDstAsnMatcherDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetDstAsnMatcherDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetDstIpMatcherDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetDstIpMatcherDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetGotoPolicyDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetGotoPolicyDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetIpMatcherDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetIpMatcherDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetRateLimiterSpecsDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetRateLimiterSpecsDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetRateLimitersDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetRateLimitersDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *SimpleRule) GetAsnMatcherDRefInfo() ([]db.DRefInfo, error) {
	if m.GetAsnMatcher() == nil {
		return nil, nil
	}

	drInfos, err := m.GetAsnMatcher().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetAsnMatcher().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "asn_matcher." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *SimpleRule) GetDstAsnMatcherDRefInfo() ([]db.DRefInfo, error) {
	if m.GetDstAsnMatcher() == nil {
		return nil, nil
	}

	drInfos, err := m.GetDstAsnMatcher().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetDstAsnMatcher().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "dst_asn_matcher." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *SimpleRule) GetDstIpMatcherDRefInfo() ([]db.DRefInfo, error) {
	if m.GetDstIpMatcher() == nil {
		return nil, nil
	}

	drInfos, err := m.GetDstIpMatcher().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetDstIpMatcher().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "dst_ip_matcher." + dri.DRField
	}
	return drInfos, err

}

func (m *SimpleRule) GetGotoPolicyDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetGotoPolicy()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("SimpleRule.goto_policy[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "service_policy.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "goto_policy",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetGotoPolicyDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *SimpleRule) GetGotoPolicyDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "service_policy.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: service_policy")
	}
	for _, ref := range m.GetGotoPolicy() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *SimpleRule) GetIpMatcherDRefInfo() ([]db.DRefInfo, error) {
	if m.GetIpMatcher() == nil {
		return nil, nil
	}

	drInfos, err := m.GetIpMatcher().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetIpMatcher().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "ip_matcher." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *SimpleRule) GetRateLimiterSpecsDRefInfo() ([]db.DRefInfo, error) {
	if m.GetRateLimiterSpecs() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetRateLimiterSpecs() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetRateLimiterSpecs() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("rate_limiter_specs[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

func (m *SimpleRule) GetRateLimitersDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetRateLimiters()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("SimpleRule.rate_limiters[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "rate_limiter.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "rate_limiters",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetRateLimitersDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *SimpleRule) GetRateLimitersDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "rate_limiter.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: rate_limiter")
	}
	for _, ref := range m.GetRateLimiters() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateSimpleRule struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSimpleRule) HeadersValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for headers")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_policy.HeaderMatcherType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_policy.HeaderMatcherTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for headers")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_policy.HeaderMatcherType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_policy.HeaderMatcherType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated headers")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items headers")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateSimpleRule) DescriptionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for description")
	}

	return validatorFn, nil
}

func (v *ValidateSimpleRule) SchemeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for scheme")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for scheme")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated scheme")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items scheme")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateSimpleRule) RateLimitersValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for rate_limiters")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for rate_limiters")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated rate_limiters")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items rate_limiters")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateSimpleRule) RateLimiterSpecsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for rate_limiter_specs")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_rate_limiter.GlobalSpecType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_rate_limiter.GlobalSpecTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for rate_limiter_specs")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_rate_limiter.GlobalSpecType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_rate_limiter.GlobalSpecType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated rate_limiter_specs")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items rate_limiter_specs")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateSimpleRule) GotoPolicyValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for goto_policy")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for goto_policy")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated goto_policy")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items goto_policy")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateSimpleRule) ChallengeActionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema_policy.ChallengeAction)
		return int32(i)
	}
	// ves_io_schema_policy.ChallengeAction_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, ves_io_schema_policy.ChallengeAction_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for challenge_action")
	}

	return validatorFn, nil
}

func (v *ValidateSimpleRule) AdditionalApiGroupMatchersValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for additional_api_group_matchers")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_policy.StringMatcherType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_policy.StringMatcherTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for additional_api_group_matchers")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_policy.StringMatcherType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_policy.StringMatcherType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated additional_api_group_matchers")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items additional_api_group_matchers")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateSimpleRule) ClientNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for client_name")
	}

	return validatorFn, nil
}

func (v *ValidateSimpleRule) JwtClaimsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for jwt_claims")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_policy.JWTClaimMatcherType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_policy.JWTClaimMatcherTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for jwt_claims")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_policy.JWTClaimMatcherType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_policy.JWTClaimMatcherType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated jwt_claims")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items jwt_claims")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateSimpleRule) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SimpleRule)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SimpleRule got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["action"]; exists {

		vOpts := append(opts, db.WithValidateField("action"))
		if err := fv(ctx, m.GetAction(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["additional_api_group_matchers"]; exists {
		vOpts := append(opts, db.WithValidateField("additional_api_group_matchers"))
		if err := fv(ctx, m.GetAdditionalApiGroupMatchers(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["api_group_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("api_group_matcher"))
		if err := fv(ctx, m.GetApiGroupMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["arg_matchers"]; exists {

		vOpts := append(opts, db.WithValidateField("arg_matchers"))
		for idx, item := range m.GetArgMatchers() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["asn_list"]; exists {

		vOpts := append(opts, db.WithValidateField("asn_list"))
		if err := fv(ctx, m.GetAsnList(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["asn_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("asn_matcher"))
		if err := fv(ctx, m.GetAsnMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["body_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("body_matcher"))
		if err := fv(ctx, m.GetBodyMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["bot_action"]; exists {

		vOpts := append(opts, db.WithValidateField("bot_action"))
		if err := fv(ctx, m.GetBotAction(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["challenge_action"]; exists {

		vOpts := append(opts, db.WithValidateField("challenge_action"))
		if err := fv(ctx, m.GetChallengeAction(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["client_name"]; exists {

		vOpts := append(opts, db.WithValidateField("client_name"))
		if err := fv(ctx, m.GetClientName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["client_name_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("client_name_matcher"))
		if err := fv(ctx, m.GetClientNameMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["client_role"]; exists {

		vOpts := append(opts, db.WithValidateField("client_role"))
		if err := fv(ctx, m.GetClientRole(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["client_selector"]; exists {

		vOpts := append(opts, db.WithValidateField("client_selector"))
		if err := fv(ctx, m.GetClientSelector(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["content_rewrite_action"]; exists {

		vOpts := append(opts, db.WithValidateField("content_rewrite_action"))
		if err := fv(ctx, m.GetContentRewriteAction(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["cookie_matchers"]; exists {

		vOpts := append(opts, db.WithValidateField("cookie_matchers"))
		for idx, item := range m.GetCookieMatchers() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["description"]; exists {

		vOpts := append(opts, db.WithValidateField("description"))
		if err := fv(ctx, m.GetDescription(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["domain_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("domain_matcher"))
		if err := fv(ctx, m.GetDomainMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["dst_asn_list"]; exists {

		vOpts := append(opts, db.WithValidateField("dst_asn_list"))
		if err := fv(ctx, m.GetDstAsnList(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["dst_asn_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("dst_asn_matcher"))
		if err := fv(ctx, m.GetDstAsnMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["dst_ip_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("dst_ip_matcher"))
		if err := fv(ctx, m.GetDstIpMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["dst_ip_prefix_list"]; exists {

		vOpts := append(opts, db.WithValidateField("dst_ip_prefix_list"))
		if err := fv(ctx, m.GetDstIpPrefixList(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["expiration_timestamp"]; exists {

		vOpts := append(opts, db.WithValidateField("expiration_timestamp"))
		if err := fv(ctx, m.GetExpirationTimestamp(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["goto_policy"]; exists {
		vOpts := append(opts, db.WithValidateField("goto_policy"))
		if err := fv(ctx, m.GetGotoPolicy(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["graphql_settings"]; exists {

		vOpts := append(opts, db.WithValidateField("graphql_settings"))
		if err := fv(ctx, m.GetGraphqlSettings(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["headers"]; exists {
		vOpts := append(opts, db.WithValidateField("headers"))
		if err := fv(ctx, m.GetHeaders(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["http_method"]; exists {

		vOpts := append(opts, db.WithValidateField("http_method"))
		if err := fv(ctx, m.GetHttpMethod(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["ip_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("ip_matcher"))
		if err := fv(ctx, m.GetIpMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["ip_prefix_list"]; exists {

		vOpts := append(opts, db.WithValidateField("ip_prefix_list"))
		if err := fv(ctx, m.GetIpPrefixList(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["ip_reputation_action"]; exists {

		vOpts := append(opts, db.WithValidateField("ip_reputation_action"))
		if err := fv(ctx, m.GetIpReputationAction(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["jwt_claims"]; exists {
		vOpts := append(opts, db.WithValidateField("jwt_claims"))
		if err := fv(ctx, m.GetJwtClaims(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["l4_dest_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("l4_dest_matcher"))
		if err := fv(ctx, m.GetL4DestMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["label_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("label_matcher"))
		if err := fv(ctx, m.GetLabelMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["metric_name_label"]; exists {

		vOpts := append(opts, db.WithValidateField("metric_name_label"))
		if err := fv(ctx, m.GetMetricNameLabel(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["mum_action"]; exists {

		vOpts := append(opts, db.WithValidateField("mum_action"))
		if err := fv(ctx, m.GetMumAction(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["openapi_validation_action"]; exists {

		vOpts := append(opts, db.WithValidateField("openapi_validation_action"))
		if err := fv(ctx, m.GetOpenapiValidationAction(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["origin_server_subsets_action"]; exists {

		vOpts := append(opts, db.WithValidateField("origin_server_subsets_action"))
		for key, value := range m.GetOriginServerSubsetsAction() {
			vOpts := append(vOpts, db.WithValidateMapKey(key))
			if err := fv(ctx, value, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["path"]; exists {

		vOpts := append(opts, db.WithValidateField("path"))
		if err := fv(ctx, m.GetPath(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["port_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("port_matcher"))
		if err := fv(ctx, m.GetPortMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["query_params"]; exists {

		vOpts := append(opts, db.WithValidateField("query_params"))
		for idx, item := range m.GetQueryParams() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["rate_limiter_specs"]; exists {
		vOpts := append(opts, db.WithValidateField("rate_limiter_specs"))
		if err := fv(ctx, m.GetRateLimiterSpecs(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["rate_limiters"]; exists {
		vOpts := append(opts, db.WithValidateField("rate_limiters"))
		if err := fv(ctx, m.GetRateLimiters(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["request_constraints"]; exists {

		vOpts := append(opts, db.WithValidateField("request_constraints"))
		if err := fv(ctx, m.GetRequestConstraints(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["scheme"]; exists {
		vOpts := append(opts, db.WithValidateField("scheme"))
		if err := fv(ctx, m.GetScheme(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["server_selector"]; exists {

		vOpts := append(opts, db.WithValidateField("server_selector"))
		if err := fv(ctx, m.GetServerSelector(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["shape_protected_endpoint_action"]; exists {

		vOpts := append(opts, db.WithValidateField("shape_protected_endpoint_action"))
		if err := fv(ctx, m.GetShapeProtectedEndpointAction(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["threat_intelligence_action"]; exists {

		vOpts := append(opts, db.WithValidateField("threat_intelligence_action"))
		if err := fv(ctx, m.GetThreatIntelligenceAction(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tls_fingerprint_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("tls_fingerprint_matcher"))
		if err := fv(ctx, m.GetTlsFingerprintMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["url_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("url_matcher"))
		if err := fv(ctx, m.GetUrlMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["user_identity_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("user_identity_matcher"))
		if err := fv(ctx, m.GetUserIdentityMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["virtual_host_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("virtual_host_matcher"))
		if err := fv(ctx, m.GetVirtualHostMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["waf_action"]; exists {

		vOpts := append(opts, db.WithValidateField("waf_action"))
		if err := fv(ctx, m.GetWafAction(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSimpleRuleValidator = func() *ValidateSimpleRule {
	v := &ValidateSimpleRule{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhHeaders := v.HeadersValidationRuleHandler
	rulesHeaders := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "16",
	}
	vFn, err = vrhHeaders(rulesHeaders)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SimpleRule.headers: %s", err)
		panic(errMsg)
	}
	v.FldValidators["headers"] = vFn

	vrhDescription := v.DescriptionValidationRuleHandler
	rulesDescription := map[string]string{
		"ves.io.schema.rules.string.max_len": "256",
	}
	vFn, err = vrhDescription(rulesDescription)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SimpleRule.description: %s", err)
		panic(errMsg)
	}
	v.FldValidators["description"] = vFn

	vrhScheme := v.SchemeValidationRuleHandler
	rulesScheme := map[string]string{
		"ves.io.schema.rules.repeated.items.string.in": "[\"ANY\", \"HTTP\", \"HTTPS\", \"TCP\", \"TLS\"]",
		"ves.io.schema.rules.repeated.max_items":       "4",
		"ves.io.schema.rules.repeated.unique":          "true",
	}
	vFn, err = vrhScheme(rulesScheme)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SimpleRule.scheme: %s", err)
		panic(errMsg)
	}
	v.FldValidators["scheme"] = vFn

	vrhRateLimiters := v.RateLimitersValidationRuleHandler
	rulesRateLimiters := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "2",
	}
	vFn, err = vrhRateLimiters(rulesRateLimiters)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SimpleRule.rate_limiters: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rate_limiters"] = vFn

	vrhRateLimiterSpecs := v.RateLimiterSpecsValidationRuleHandler
	rulesRateLimiterSpecs := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "2",
	}
	vFn, err = vrhRateLimiterSpecs(rulesRateLimiterSpecs)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SimpleRule.rate_limiter_specs: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rate_limiter_specs"] = vFn

	vrhGotoPolicy := v.GotoPolicyValidationRuleHandler
	rulesGotoPolicy := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1",
	}
	vFn, err = vrhGotoPolicy(rulesGotoPolicy)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SimpleRule.goto_policy: %s", err)
		panic(errMsg)
	}
	v.FldValidators["goto_policy"] = vFn

	vrhChallengeAction := v.ChallengeActionValidationRuleHandler
	rulesChallengeAction := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhChallengeAction(rulesChallengeAction)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SimpleRule.challenge_action: %s", err)
		panic(errMsg)
	}
	v.FldValidators["challenge_action"] = vFn

	vrhAdditionalApiGroupMatchers := v.AdditionalApiGroupMatchersValidationRuleHandler
	rulesAdditionalApiGroupMatchers := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "4",
	}
	vFn, err = vrhAdditionalApiGroupMatchers(rulesAdditionalApiGroupMatchers)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SimpleRule.additional_api_group_matchers: %s", err)
		panic(errMsg)
	}
	v.FldValidators["additional_api_group_matchers"] = vFn

	vrhClientName := v.ClientNameValidationRuleHandler
	rulesClientName := map[string]string{
		"ves.io.schema.rules.string.max_bytes": "256",
	}
	vFn, err = vrhClientName(rulesClientName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SimpleRule.client_name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["client_name"] = vFn

	vrhJwtClaims := v.JwtClaimsValidationRuleHandler
	rulesJwtClaims := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "16",
	}
	vFn, err = vrhJwtClaims(rulesJwtClaims)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SimpleRule.jwt_claims: %s", err)
		panic(errMsg)
	}
	v.FldValidators["jwt_claims"] = vFn

	v.FldValidators["domain_matcher"] = ves_io_schema_policy.MatcherTypeValidator().Validate

	v.FldValidators["path"] = ves_io_schema_policy.PathMatcherTypeValidator().Validate

	v.FldValidators["http_method"] = ves_io_schema_policy.HttpMethodMatcherTypeValidator().Validate

	v.FldValidators["waf_action"] = ves_io_schema_policy.WafActionValidator().Validate

	v.FldValidators["port_matcher"] = ves_io_schema_policy.PortMatcherTypeValidator().Validate

	v.FldValidators["url_matcher"] = ves_io_schema_policy.URLMatcherTypeValidator().Validate

	v.FldValidators["l4_dest_matcher"] = ves_io_schema_policy.L4DestMatcherTypeValidator().Validate

	v.FldValidators["ip_prefix_list"] = ves_io_schema_policy.PrefixMatchListValidator().Validate

	v.FldValidators["dst_ip_prefix_list"] = ves_io_schema_policy.PrefixMatchListValidator().Validate

	v.FldValidators["tls_fingerprint_matcher"] = ves_io_schema_policy.TlsFingerprintMatcherTypeValidator().Validate

	v.FldValidators["asn_list"] = ves_io_schema_policy.AsnMatchListValidator().Validate

	v.FldValidators["api_group_matcher"] = ves_io_schema_policy.StringMatcherTypeValidator().Validate

	v.FldValidators["client_role"] = ves_io_schema_policy.RoleMatcherTypeValidator().Validate

	v.FldValidators["client_selector"] = ves_io_schema.LabelSelectorTypeValidator().Validate

	v.FldValidators["server_selector"] = ves_io_schema.LabelSelectorTypeValidator().Validate

	v.FldValidators["label_matcher"] = ves_io_schema.LabelMatcherTypeValidator().Validate

	v.FldValidators["bot_action"] = ves_io_schema_policy.BotActionValidator().Validate

	v.FldValidators["content_rewrite_action"] = ves_io_schema_policy.ContentRewriteActionValidator().Validate

	v.FldValidators["shape_protected_endpoint_action"] = ves_io_schema_policy.ShapeProtectedEndpointActionValidator().Validate

	v.FldValidators["mum_action"] = ves_io_schema_policy.ModifyActionValidator().Validate

	v.FldValidators["ip_reputation_action"] = ves_io_schema_policy.ModifyActionValidator().Validate

	v.FldValidators["ip_matcher"] = ves_io_schema_policy.IpMatcherTypeValidator().Validate

	v.FldValidators["asn_matcher"] = ves_io_schema_policy.AsnMatcherTypeValidator().Validate

	v.FldValidators["user_identity_matcher"] = ves_io_schema_policy.MatcherTypeBasicValidator().Validate

	v.FldValidators["body_matcher"] = ves_io_schema_policy.MatcherTypeValidator().Validate

	v.FldValidators["virtual_host_matcher"] = ves_io_schema_policy.MatcherTypeValidator().Validate

	v.FldValidators["query_params"] = ves_io_schema_policy.QueryParameterMatcherTypeValidator().Validate

	v.FldValidators["arg_matchers"] = ves_io_schema_policy.ArgMatcherTypeValidator().Validate

	v.FldValidators["cookie_matchers"] = ves_io_schema_policy.CookieMatcherTypeValidator().Validate

	v.FldValidators["request_constraints"] = ves_io_schema_policy.RequestConstraintTypeValidator().Validate

	v.FldValidators["graphql_settings"] = ves_io_schema_policy.GraphQLSettingsTypeValidator().Validate

	v.FldValidators["openapi_validation_action"] = ves_io_schema_policy.OpenApiValidationActionValidator().Validate

	v.FldValidators["client_name_matcher"] = ves_io_schema_policy.MatcherTypeValidator().Validate

	v.FldValidators["dst_ip_matcher"] = ves_io_schema_policy.IpMatcherTypeValidator().Validate

	v.FldValidators["dst_asn_list"] = ves_io_schema_policy.AsnMatchListValidator().Validate

	v.FldValidators["dst_asn_matcher"] = ves_io_schema_policy.AsnMatcherTypeValidator().Validate

	v.FldValidators["threat_intelligence_action"] = ves_io_schema_policy.ModifyActionValidator().Validate

	return v
}()

func SimpleRuleValidator() db.Validator {
	return DefaultSimpleRuleValidator
}

// augmented methods on protoc/std generated struct

func (m *SourceList) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SourceList) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SourceList) DeepCopy() *SourceList {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SourceList{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SourceList) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SourceList) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SourceListValidator().Validate(ctx, m, opts...)
}

func (m *SourceList) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetAsnSetDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetAsnSetDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetIpPrefixSetDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetIpPrefixSetDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *SourceList) GetAsnSetDRefInfo() ([]db.DRefInfo, error) {
	vrefs := m.GetAsnSet()
	if len(vrefs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(vrefs))
	for i, vref := range vrefs {
		if vref == nil {
			return nil, fmt.Errorf("SourceList.asn_set[%d] has a nil value", i)
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("bgp_asn_set.Object")
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "bgp_asn_set.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "asn_set",
			Ref:        vdRef,
		})
	}
	return drInfos, nil

}

// GetAsnSetDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *SourceList) GetAsnSetDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "bgp_asn_set.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: bgp_asn_set")
	}
	for i, vref := range m.GetAsnSet() {
		if vref == nil {
			return nil, fmt.Errorf("SourceList.asn_set[%d] has a nil value", i)
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "bgp_asn_set.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

func (m *SourceList) GetIpPrefixSetDRefInfo() ([]db.DRefInfo, error) {
	vrefs := m.GetIpPrefixSet()
	if len(vrefs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(vrefs))
	for i, vref := range vrefs {
		if vref == nil {
			return nil, fmt.Errorf("SourceList.ip_prefix_set[%d] has a nil value", i)
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("ip_prefix_set.Object")
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "ip_prefix_set.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "ip_prefix_set",
			Ref:        vdRef,
		})
	}
	return drInfos, nil

}

// GetIpPrefixSetDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *SourceList) GetIpPrefixSetDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "ip_prefix_set.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: ip_prefix_set")
	}
	for i, vref := range m.GetIpPrefixSet() {
		if vref == nil {
			return nil, fmt.Errorf("SourceList.ip_prefix_set[%d] has a nil value", i)
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "ip_prefix_set.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateSourceList struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSourceList) DefaultActionChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for default_action_choice")
	}
	return validatorFn, nil
}

func (v *ValidateSourceList) IpPrefixSetValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for ip_prefix_set")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for ip_prefix_set")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated ip_prefix_set")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items ip_prefix_set")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateSourceList) AsnSetValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for asn_set")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for asn_set")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated asn_set")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items asn_set")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateSourceList) CountryListValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepEnumItemRules(rules)
	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema_policy.CountryCode)
		return int32(i)
	}
	// ves_io_schema_policy.CountryCode_name is generated in .pb.go
	itemValFn, err := db.NewEnumValidationRuleHandler(itemRules, ves_io_schema_policy.CountryCode_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for country_list")
	}
	itemsValidatorFn := func(ctx context.Context, elems []ves_io_schema_policy.CountryCode, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for country_list")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]ves_io_schema_policy.CountryCode)
		if !ok {
			return fmt.Errorf("Repeated validation expected []ves_io_schema_policy.CountryCode, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated country_list")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items country_list")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateSourceList) TlsFingerprintClassesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepEnumItemRules(rules)
	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema_policy.KnownTlsFingerprintClass)
		return int32(i)
	}
	// ves_io_schema_policy.KnownTlsFingerprintClass_name is generated in .pb.go
	itemValFn, err := db.NewEnumValidationRuleHandler(itemRules, ves_io_schema_policy.KnownTlsFingerprintClass_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for tls_fingerprint_classes")
	}
	itemsValidatorFn := func(ctx context.Context, elems []ves_io_schema_policy.KnownTlsFingerprintClass, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for tls_fingerprint_classes")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]ves_io_schema_policy.KnownTlsFingerprintClass)
		if !ok {
			return fmt.Errorf("Repeated validation expected []ves_io_schema_policy.KnownTlsFingerprintClass, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated tls_fingerprint_classes")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items tls_fingerprint_classes")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateSourceList) TlsFingerprintValuesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for tls_fingerprint_values")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for tls_fingerprint_values")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated tls_fingerprint_values")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items tls_fingerprint_values")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateSourceList) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SourceList)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SourceList got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["asn_list"]; exists {

		vOpts := append(opts, db.WithValidateField("asn_list"))
		if err := fv(ctx, m.GetAsnList(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["asn_set"]; exists {
		vOpts := append(opts, db.WithValidateField("asn_set"))
		if err := fv(ctx, m.GetAsnSet(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["country_list"]; exists {
		vOpts := append(opts, db.WithValidateField("country_list"))
		if err := fv(ctx, m.GetCountryList(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["default_action_choice"]; exists {
		val := m.GetDefaultActionChoice()
		vOpts := append(opts,
			db.WithValidateField("default_action_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDefaultActionChoice().(type) {
	case *SourceList_DefaultActionNextPolicy:
		if fv, exists := v.FldValidators["default_action_choice.default_action_next_policy"]; exists {
			val := m.GetDefaultActionChoice().(*SourceList_DefaultActionNextPolicy).DefaultActionNextPolicy
			vOpts := append(opts,
				db.WithValidateField("default_action_choice"),
				db.WithValidateField("default_action_next_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *SourceList_DefaultActionDeny:
		if fv, exists := v.FldValidators["default_action_choice.default_action_deny"]; exists {
			val := m.GetDefaultActionChoice().(*SourceList_DefaultActionDeny).DefaultActionDeny
			vOpts := append(opts,
				db.WithValidateField("default_action_choice"),
				db.WithValidateField("default_action_deny"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *SourceList_DefaultActionAllow:
		if fv, exists := v.FldValidators["default_action_choice.default_action_allow"]; exists {
			val := m.GetDefaultActionChoice().(*SourceList_DefaultActionAllow).DefaultActionAllow
			vOpts := append(opts,
				db.WithValidateField("default_action_choice"),
				db.WithValidateField("default_action_allow"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["ip_prefix_set"]; exists {
		vOpts := append(opts, db.WithValidateField("ip_prefix_set"))
		if err := fv(ctx, m.GetIpPrefixSet(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["prefix_list"]; exists {

		vOpts := append(opts, db.WithValidateField("prefix_list"))
		if err := fv(ctx, m.GetPrefixList(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tls_fingerprint_classes"]; exists {
		vOpts := append(opts, db.WithValidateField("tls_fingerprint_classes"))
		if err := fv(ctx, m.GetTlsFingerprintClasses(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tls_fingerprint_values"]; exists {
		vOpts := append(opts, db.WithValidateField("tls_fingerprint_values"))
		if err := fv(ctx, m.GetTlsFingerprintValues(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSourceListValidator = func() *ValidateSourceList {
	v := &ValidateSourceList{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDefaultActionChoice := v.DefaultActionChoiceValidationRuleHandler
	rulesDefaultActionChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDefaultActionChoice(rulesDefaultActionChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SourceList.default_action_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["default_action_choice"] = vFn

	vrhIpPrefixSet := v.IpPrefixSetValidationRuleHandler
	rulesIpPrefixSet := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "4",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhIpPrefixSet(rulesIpPrefixSet)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SourceList.ip_prefix_set: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ip_prefix_set"] = vFn

	vrhAsnSet := v.AsnSetValidationRuleHandler
	rulesAsnSet := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "4",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhAsnSet(rulesAsnSet)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SourceList.asn_set: %s", err)
		panic(errMsg)
	}
	v.FldValidators["asn_set"] = vFn

	vrhCountryList := v.CountryListValidationRuleHandler
	rulesCountryList := map[string]string{
		"ves.io.schema.rules.repeated.items.enum.defined_only": "true",
		"ves.io.schema.rules.repeated.items.enum.not_in":       "[0]",
		"ves.io.schema.rules.repeated.max_items":               "64",
		"ves.io.schema.rules.repeated.unique":                  "true",
	}
	vFn, err = vrhCountryList(rulesCountryList)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SourceList.country_list: %s", err)
		panic(errMsg)
	}
	v.FldValidators["country_list"] = vFn

	vrhTlsFingerprintClasses := v.TlsFingerprintClassesValidationRuleHandler
	rulesTlsFingerprintClasses := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "16",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhTlsFingerprintClasses(rulesTlsFingerprintClasses)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SourceList.tls_fingerprint_classes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["tls_fingerprint_classes"] = vFn

	vrhTlsFingerprintValues := v.TlsFingerprintValuesValidationRuleHandler
	rulesTlsFingerprintValues := map[string]string{
		"ves.io.schema.rules.repeated.items.string.len": "32",
		"ves.io.schema.rules.repeated.max_items":        "16",
		"ves.io.schema.rules.repeated.unique":           "true",
	}
	vFn, err = vrhTlsFingerprintValues(rulesTlsFingerprintValues)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SourceList.tls_fingerprint_values: %s", err)
		panic(errMsg)
	}
	v.FldValidators["tls_fingerprint_values"] = vFn

	v.FldValidators["prefix_list"] = ves_io_schema_views.PrefixStringListTypeValidator().Validate

	v.FldValidators["asn_list"] = ves_io_schema_policy.AsnMatchListValidator().Validate

	return v
}()

func SourceListValidator() db.Validator {
	return DefaultSourceListValidator
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetRuleChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.RuleChoice.(type) {
	case nil:
		o.RuleChoice = nil

	case *CreateSpecType_AllowAllRequests:
		o.RuleChoice = &GlobalSpecType_AllowAllRequests{AllowAllRequests: of.AllowAllRequests}

	case *CreateSpecType_AllowList:
		o.RuleChoice = &GlobalSpecType_AllowList{AllowList: of.AllowList}

	case *CreateSpecType_DenyAllRequests:
		o.RuleChoice = &GlobalSpecType_DenyAllRequests{DenyAllRequests: of.DenyAllRequests}

	case *CreateSpecType_DenyList:
		o.RuleChoice = &GlobalSpecType_DenyList{DenyList: of.DenyList}

	case *CreateSpecType_InternallyGenerated:
		o.RuleChoice = &GlobalSpecType_InternallyGenerated{InternallyGenerated: of.InternallyGenerated}

	case *CreateSpecType_LegacyRuleList:
		o.RuleChoice = &GlobalSpecType_LegacyRuleList{LegacyRuleList: of.LegacyRuleList}

	case *CreateSpecType_RuleList:
		o.RuleChoice = &GlobalSpecType_RuleList{RuleList: of.RuleList}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetRuleChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.RuleChoice.(type) {
	case nil:
		r.RuleChoice = nil

	case *GlobalSpecType_AllowAllRequests:
		r.RuleChoice = &CreateSpecType_AllowAllRequests{AllowAllRequests: of.AllowAllRequests}

	case *GlobalSpecType_AllowList:
		r.RuleChoice = &CreateSpecType_AllowList{AllowList: of.AllowList}

	case *GlobalSpecType_DenyAllRequests:
		r.RuleChoice = &CreateSpecType_DenyAllRequests{DenyAllRequests: of.DenyAllRequests}

	case *GlobalSpecType_DenyList:
		r.RuleChoice = &CreateSpecType_DenyList{DenyList: of.DenyList}

	case *GlobalSpecType_InternallyGenerated:
		r.RuleChoice = &CreateSpecType_InternallyGenerated{InternallyGenerated: of.InternallyGenerated}

	case *GlobalSpecType_LegacyRuleList:
		r.RuleChoice = &CreateSpecType_LegacyRuleList{LegacyRuleList: of.LegacyRuleList}

	case *GlobalSpecType_RuleList:
		r.RuleChoice = &CreateSpecType_RuleList{RuleList: of.RuleList}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetServerChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ServerChoice.(type) {
	case nil:
		o.ServerChoice = nil

	case *CreateSpecType_AnyServer:
		o.ServerChoice = &GlobalSpecType_AnyServer{AnyServer: of.AnyServer}

	case *CreateSpecType_ServerName:
		o.ServerChoice = &GlobalSpecType_ServerName{ServerName: of.ServerName}

	case *CreateSpecType_ServerNameMatcher:
		o.ServerChoice = &GlobalSpecType_ServerNameMatcher{ServerNameMatcher: of.ServerNameMatcher}

	case *CreateSpecType_ServerSelector:
		o.ServerChoice = &GlobalSpecType_ServerSelector{ServerSelector: of.ServerSelector}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetServerChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ServerChoice.(type) {
	case nil:
		r.ServerChoice = nil

	case *GlobalSpecType_AnyServer:
		r.ServerChoice = &CreateSpecType_AnyServer{AnyServer: of.AnyServer}

	case *GlobalSpecType_ServerName:
		r.ServerChoice = &CreateSpecType_ServerName{ServerName: of.ServerName}

	case *GlobalSpecType_ServerNameMatcher:
		r.ServerChoice = &CreateSpecType_ServerNameMatcher{ServerNameMatcher: of.ServerNameMatcher}

	case *GlobalSpecType_ServerSelector:
		r.ServerChoice = &CreateSpecType_ServerSelector{ServerSelector: of.ServerSelector}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *CreateSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.Algo = f.GetAlgo()
	m.PortMatcher = f.GetPortMatcher()
	m.GetRuleChoiceFromGlobalSpecType(f)
	m.SegmentPolicy = f.GetSegmentPolicy()
	m.GetServerChoiceFromGlobalSpecType(f)
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *CreateSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *CreateSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.Algo = m1.Algo
	f.PortMatcher = m1.PortMatcher
	m1.SetRuleChoiceToGlobalSpecType(f)
	f.SegmentPolicy = m1.SegmentPolicy
	m1.SetServerChoiceToGlobalSpecType(f)
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *CreateSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetRuleChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.RuleChoice.(type) {
	case nil:
		o.RuleChoice = nil

	case *GetSpecType_AllowAllRequests:
		o.RuleChoice = &GlobalSpecType_AllowAllRequests{AllowAllRequests: of.AllowAllRequests}

	case *GetSpecType_AllowList:
		o.RuleChoice = &GlobalSpecType_AllowList{AllowList: of.AllowList}

	case *GetSpecType_DenyAllRequests:
		o.RuleChoice = &GlobalSpecType_DenyAllRequests{DenyAllRequests: of.DenyAllRequests}

	case *GetSpecType_DenyList:
		o.RuleChoice = &GlobalSpecType_DenyList{DenyList: of.DenyList}

	case *GetSpecType_InternallyGenerated:
		o.RuleChoice = &GlobalSpecType_InternallyGenerated{InternallyGenerated: of.InternallyGenerated}

	case *GetSpecType_LegacyRuleList:
		o.RuleChoice = &GlobalSpecType_LegacyRuleList{LegacyRuleList: of.LegacyRuleList}

	case *GetSpecType_RuleList:
		o.RuleChoice = &GlobalSpecType_RuleList{RuleList: of.RuleList}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetRuleChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.RuleChoice.(type) {
	case nil:
		r.RuleChoice = nil

	case *GlobalSpecType_AllowAllRequests:
		r.RuleChoice = &GetSpecType_AllowAllRequests{AllowAllRequests: of.AllowAllRequests}

	case *GlobalSpecType_AllowList:
		r.RuleChoice = &GetSpecType_AllowList{AllowList: of.AllowList}

	case *GlobalSpecType_DenyAllRequests:
		r.RuleChoice = &GetSpecType_DenyAllRequests{DenyAllRequests: of.DenyAllRequests}

	case *GlobalSpecType_DenyList:
		r.RuleChoice = &GetSpecType_DenyList{DenyList: of.DenyList}

	case *GlobalSpecType_InternallyGenerated:
		r.RuleChoice = &GetSpecType_InternallyGenerated{InternallyGenerated: of.InternallyGenerated}

	case *GlobalSpecType_LegacyRuleList:
		r.RuleChoice = &GetSpecType_LegacyRuleList{LegacyRuleList: of.LegacyRuleList}

	case *GlobalSpecType_RuleList:
		r.RuleChoice = &GetSpecType_RuleList{RuleList: of.RuleList}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetServerChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ServerChoice.(type) {
	case nil:
		o.ServerChoice = nil

	case *GetSpecType_AnyServer:
		o.ServerChoice = &GlobalSpecType_AnyServer{AnyServer: of.AnyServer}

	case *GetSpecType_ServerName:
		o.ServerChoice = &GlobalSpecType_ServerName{ServerName: of.ServerName}

	case *GetSpecType_ServerNameMatcher:
		o.ServerChoice = &GlobalSpecType_ServerNameMatcher{ServerNameMatcher: of.ServerNameMatcher}

	case *GetSpecType_ServerSelector:
		o.ServerChoice = &GlobalSpecType_ServerSelector{ServerSelector: of.ServerSelector}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetServerChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ServerChoice.(type) {
	case nil:
		r.ServerChoice = nil

	case *GlobalSpecType_AnyServer:
		r.ServerChoice = &GetSpecType_AnyServer{AnyServer: of.AnyServer}

	case *GlobalSpecType_ServerName:
		r.ServerChoice = &GetSpecType_ServerName{ServerName: of.ServerName}

	case *GlobalSpecType_ServerNameMatcher:
		r.ServerChoice = &GetSpecType_ServerNameMatcher{ServerNameMatcher: of.ServerNameMatcher}

	case *GlobalSpecType_ServerSelector:
		r.ServerChoice = &GetSpecType_ServerSelector{ServerSelector: of.ServerSelector}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.Algo = f.GetAlgo()
	m.PortMatcher = f.GetPortMatcher()
	m.GetRuleChoiceFromGlobalSpecType(f)
	m.Rules = f.GetRules()
	m.SegmentPolicy = f.GetSegmentPolicy()
	m.GetServerChoiceFromGlobalSpecType(f)
	m.SimpleRules = f.GetSimpleRules()
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.Algo = m1.Algo
	f.PortMatcher = m1.PortMatcher
	m1.SetRuleChoiceToGlobalSpecType(f)
	f.Rules = m1.Rules
	f.SegmentPolicy = m1.SegmentPolicy
	m1.SetServerChoiceToGlobalSpecType(f)
	f.SimpleRules = m1.SimpleRules
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetRuleChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.RuleChoice.(type) {
	case nil:
		o.RuleChoice = nil

	case *ReplaceSpecType_AllowAllRequests:
		o.RuleChoice = &GlobalSpecType_AllowAllRequests{AllowAllRequests: of.AllowAllRequests}

	case *ReplaceSpecType_AllowList:
		o.RuleChoice = &GlobalSpecType_AllowList{AllowList: of.AllowList}

	case *ReplaceSpecType_DenyAllRequests:
		o.RuleChoice = &GlobalSpecType_DenyAllRequests{DenyAllRequests: of.DenyAllRequests}

	case *ReplaceSpecType_DenyList:
		o.RuleChoice = &GlobalSpecType_DenyList{DenyList: of.DenyList}

	case *ReplaceSpecType_InternallyGenerated:
		o.RuleChoice = &GlobalSpecType_InternallyGenerated{InternallyGenerated: of.InternallyGenerated}

	case *ReplaceSpecType_LegacyRuleList:
		o.RuleChoice = &GlobalSpecType_LegacyRuleList{LegacyRuleList: of.LegacyRuleList}

	case *ReplaceSpecType_RuleList:
		o.RuleChoice = &GlobalSpecType_RuleList{RuleList: of.RuleList}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetRuleChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.RuleChoice.(type) {
	case nil:
		r.RuleChoice = nil

	case *GlobalSpecType_AllowAllRequests:
		r.RuleChoice = &ReplaceSpecType_AllowAllRequests{AllowAllRequests: of.AllowAllRequests}

	case *GlobalSpecType_AllowList:
		r.RuleChoice = &ReplaceSpecType_AllowList{AllowList: of.AllowList}

	case *GlobalSpecType_DenyAllRequests:
		r.RuleChoice = &ReplaceSpecType_DenyAllRequests{DenyAllRequests: of.DenyAllRequests}

	case *GlobalSpecType_DenyList:
		r.RuleChoice = &ReplaceSpecType_DenyList{DenyList: of.DenyList}

	case *GlobalSpecType_InternallyGenerated:
		r.RuleChoice = &ReplaceSpecType_InternallyGenerated{InternallyGenerated: of.InternallyGenerated}

	case *GlobalSpecType_LegacyRuleList:
		r.RuleChoice = &ReplaceSpecType_LegacyRuleList{LegacyRuleList: of.LegacyRuleList}

	case *GlobalSpecType_RuleList:
		r.RuleChoice = &ReplaceSpecType_RuleList{RuleList: of.RuleList}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetServerChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ServerChoice.(type) {
	case nil:
		o.ServerChoice = nil

	case *ReplaceSpecType_AnyServer:
		o.ServerChoice = &GlobalSpecType_AnyServer{AnyServer: of.AnyServer}

	case *ReplaceSpecType_ServerName:
		o.ServerChoice = &GlobalSpecType_ServerName{ServerName: of.ServerName}

	case *ReplaceSpecType_ServerNameMatcher:
		o.ServerChoice = &GlobalSpecType_ServerNameMatcher{ServerNameMatcher: of.ServerNameMatcher}

	case *ReplaceSpecType_ServerSelector:
		o.ServerChoice = &GlobalSpecType_ServerSelector{ServerSelector: of.ServerSelector}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetServerChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ServerChoice.(type) {
	case nil:
		r.ServerChoice = nil

	case *GlobalSpecType_AnyServer:
		r.ServerChoice = &ReplaceSpecType_AnyServer{AnyServer: of.AnyServer}

	case *GlobalSpecType_ServerName:
		r.ServerChoice = &ReplaceSpecType_ServerName{ServerName: of.ServerName}

	case *GlobalSpecType_ServerNameMatcher:
		r.ServerChoice = &ReplaceSpecType_ServerNameMatcher{ServerNameMatcher: of.ServerNameMatcher}

	case *GlobalSpecType_ServerSelector:
		r.ServerChoice = &ReplaceSpecType_ServerSelector{ServerSelector: of.ServerSelector}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *ReplaceSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.Algo = f.GetAlgo()
	m.PortMatcher = f.GetPortMatcher()
	m.GetRuleChoiceFromGlobalSpecType(f)
	m.SegmentPolicy = f.GetSegmentPolicy()
	m.GetServerChoiceFromGlobalSpecType(f)
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.Algo = m1.Algo
	f.PortMatcher = m1.PortMatcher
	m1.SetRuleChoiceToGlobalSpecType(f)
	f.SegmentPolicy = m1.SegmentPolicy
	m1.SetServerChoiceToGlobalSpecType(f)
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

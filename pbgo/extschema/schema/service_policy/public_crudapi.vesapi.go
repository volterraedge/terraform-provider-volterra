//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.
//

package service_policy

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"strings"

	google_protobuf "github.com/gogo/protobuf/types"
	"github.com/grpc-ecosystem/grpc-gateway/runtime"
	multierror "github.com/hashicorp/go-multierror"
	"go.uber.org/zap"
	"google.golang.org/grpc"

	"gopkg.volterra.us/stdlib/client"
	"gopkg.volterra.us/stdlib/client/configapi"
	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"
	"gopkg.volterra.us/stdlib/flags"
	"gopkg.volterra.us/stdlib/log"
	"gopkg.volterra.us/stdlib/server"
	"gopkg.volterra.us/stdlib/svcfw"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
)

const (
	// CreateRequestFQN is the fully-qualified-name of the CreateRequest message
	CreateRequestFQN = "ves.io.schema.service_policy.CreateRequest"
	// CreateResponseFQN is the fully-qualified-name of the CreateResponse message
	CreateResponseFQN = "ves.io.schema.service_policy.CreateResponse"
	// ReplaceRequestFQN is the fully-qualified-name of the ReplaceRequest message
	ReplaceRequestFQN = "ves.io.schema.service_policy.ReplaceRequest"
	// ReplaceResponseFQN is the fully-qualified-name of the ReplaceResponse message
	ReplaceResponseFQN = "ves.io.schema.service_policy.ReplaceResponse"
	// GetRequestFQN is the fully-qualified-name of the GetRequest message
	GetRequestFQN = "ves.io.schema.service_policy.GetRequest"
	// GetResponseFQN is the fully-qualified-name of the GetResponse message
	GetResponseFQN = "ves.io.schema.service_policy.GetResponse"
	// ListRequestFQN is the fully-qualified-name of the ListRequest message
	ListRequestFQN = "ves.io.schema.service_policy.ListRequest"
	// ListResponseFQN is the fully-qualified-name of the ListResponse message
	ListResponseFQN = "ves.io.schema.service_policy.ListResponse"
	// DeleteRequestFQN is the fully-qualified-name of the DeleteRequest message
	DeleteRequestFQN = "ves.io.schema.service_policy.DeleteRequest"
	// DeleteResponseFQN is the fully-qualified-name of the DeleteResponse message
	DeleteResponseFQN = "ves.io.schema.service_policy.DeleteResponse"
)

// CLIENT side
func NewCreateRequest(e db.Entry) (*CreateRequest, error) {
	r := &CreateRequest{}
	if e == nil {
		return r, nil
	}
	r.FromObject(e)
	return r, nil
}

func NewReplaceRequest(e db.Entry) (*ReplaceRequest, error) {
	r := &ReplaceRequest{}
	if e == nil {
		return r, nil
	}
	r.FromObject(e)
	return r, nil
}

func NewGetRequest(key string, opts ...server.CRUDCallOpt) (*GetRequest, error) {
	strs := strings.Split(key, "/")
	if len(strs) != 2 {
		return nil, fmt.Errorf("key must have namespace and name separated by /, but found %s", key)
	}
	ccOpts := server.NewCRUDCallOpts()
	for _, o := range opts {
		o(ccOpts)
	}
	var rspFmt GetResponseFormatCode
	switch ccOpts.ResponseFormat {
	case server.DefaultForm:
		rspFmt = GET_RSP_FORMAT_DEFAULT
	case server.CreateRequestForm:
		rspFmt = GET_RSP_FORMAT_FOR_CREATE
	case server.ReplaceRequestForm:
		rspFmt = GET_RSP_FORMAT_FOR_REPLACE
	case server.StatusForm:
		rspFmt = GET_RSP_FORMAT_STATUS
	case server.GetSpecForm:
		rspFmt = GET_RSP_FORMAT_READ
	default:
		return nil, fmt.Errorf("Unsupported Response Format %s", ccOpts.ResponseFormat)
	}
	return &GetRequest{Namespace: strs[0], Name: strs[1], ResponseFormat: rspFmt}, nil
}
func (m *GetRequest) ResponseFormatString() string {
	return m.GetResponseFormat().String()
}

func NewListRequest(opts ...server.CRUDCallOpt) *ListRequest {
	ccOpts := server.NewCRUDCallOpts()
	for _, o := range opts {
		o(ccOpts)
	}
	return &ListRequest{Namespace: ccOpts.Namespace}
}

func NewDeleteRequest(key string) (*DeleteRequest, error) {
	strs := strings.Split(key, "/")
	if len(strs) != 2 {
		return nil, fmt.Errorf("key must have namespace and name separated by /, but found %s", key)
	}
	return &DeleteRequest{Namespace: strs[0], Name: strs[1]}, nil
}

// GRPC Client
type crudAPIGrpcClient struct {
	conn       *grpc.ClientConn
	grpcClient APIClient
}

func (c *crudAPIGrpcClient) Create(ctx context.Context, e db.Entry, opts ...server.CRUDCallOpt) (db.Entry, error) {

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	var req *CreateRequest
	if cco.RequestProto != nil {
		r, ok := cco.RequestProto.(*CreateRequest)
		if !ok {
			return nil, fmt.Errorf("%T is not *CreateRequest", cco.RequestProto)
		}
		req = r
	} else {
		r, err := NewCreateRequest(e)
		if err != nil {
			return nil, errors.Wrap(err, "Create")
		}
		req = r
		if cco.ObjToMsgConverter != nil {
			if err := cco.ObjToMsgConverter(e, req); err != nil {
				return nil, err
			}
		}
	}

	ctx = client.AddHdrsToCtx(cco.Headers, ctx)

	rsp, err := c.grpcClient.Create(ctx, req, cco.GrpcCallOpts...)
	if err != nil {
		return nil, err
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	obj := NewDBObject(nil)
	rsp.ToObject(obj)
	if cco.MsgToObjConverter != nil {
		if err := cco.MsgToObjConverter(rsp, obj); err != nil {
			return nil, err
		}
	}
	return obj, nil

}

func (c *crudAPIGrpcClient) Replace(ctx context.Context, e db.Entry, opts ...server.CRUDCallOpt) error {

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	var req *ReplaceRequest
	if cco.RequestProto != nil {
		r, ok := cco.RequestProto.(*ReplaceRequest)
		if !ok {
			return fmt.Errorf("%T is not *ReplaceRequest", cco.RequestProto)
		}
		req = r
	} else {
		r, err := NewReplaceRequest(e)
		if err != nil {
			return errors.Wrap(err, "Replace")
		}
		req = r
		if cco.ObjToMsgConverter != nil {
			if err := cco.ObjToMsgConverter(e, req); err != nil {
				return err
			}
		}
	}

	ctx = client.AddHdrsToCtx(cco.Headers, ctx)
	req.ResourceVersion = cco.ResourceVersion

	rsp, err := c.grpcClient.Replace(ctx, req, cco.GrpcCallOpts...)
	if err != nil {
		return err
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return nil

}

func (c *crudAPIGrpcClient) GetRaw(ctx context.Context, key string, opts ...server.CRUDCallOpt) (*GetResponse, error) {
	req, err := NewGetRequest(key, opts...)
	if err != nil {
		return nil, errors.Wrap(err, "Get")
	}
	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	ctx = client.AddHdrsToCtx(cco.Headers, ctx)

	rsp, err := c.grpcClient.Get(ctx, req, cco.GrpcCallOpts...)
	if err != nil {
		return nil, err
	}
	if cco.OutResourceVersion != nil {
		*cco.OutResourceVersion = rsp.ResourceVersion
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return rsp, nil
}

func (c *crudAPIGrpcClient) Get(ctx context.Context, key string, opts ...server.CRUDCallOpt) (db.Entry, error) {

	gRsp, err := c.GetRaw(ctx, key, opts...)
	if gRsp != nil {
		obj := NewDBObject(gRsp.Object)
		if gRsp.Object == nil {
			gRsp.ToObject(obj)
		}
		return obj, err
	}
	return nil, err

}

func (c *crudAPIGrpcClient) GetDetail(ctx context.Context, key string, nef db.NewEntryFunc, opts ...server.CRUDCallOpt) (*server.GetResponse, error) {

	gRsp, err := c.GetRaw(ctx, key, opts...)
	respDetail := server.GetResponse{}
	if gRsp != nil {
		respDetail.Entry = NewDBObject(gRsp.Object)
		if gRsp.Object == nil {
			gRsp.ToObject(respDetail.Entry)
		}
		for _, status := range gRsp.Status {
			respDetail.BackRefs = append(respDetail.BackRefs, NewDBStatusObject(status))
		}

		return &respDetail, err
	}
	return nil, err

}

func (c *crudAPIGrpcClient) ListIDs(ctx context.Context, opts ...server.CRUDCallOpt) ([]string, error) {

	idSet := []string{}
	listRsp, err := c.List(ctx, opts...)
	if listRsp == nil {
		return idSet, err
	}
	for _, li := range listRsp.GetItems() {
		idSet = append(idSet, li.GetUid())
	}
	return idSet, err

}

func (c *crudAPIGrpcClient) ListItems(ctx context.Context, opts ...server.CRUDCallOpt) ([]server.ListItem, error) {

	sliSet := []server.ListItem{}
	listRsp, err := c.List(ctx, opts...)
	if listRsp == nil {
		return sliSet, err
	}
	for _, li := range listRsp.GetItems() {
		sliSet = append(sliSet, li)
	}
	return sliSet, err

}

func (c *crudAPIGrpcClient) List(ctx context.Context, opts ...server.CRUDCallOpt) (*ListResponse, error) {
	req := NewListRequest(opts...)

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	ctx = client.AddHdrsToCtx(cco.Headers, ctx)

	switch len(cco.LabelFilter) {
	case 0:
	case 1:
		req.LabelFilter = cco.LabelFilter[0]
	default:
		return nil, fmt.Errorf("Only one label selector expression can be provided, got %d: %s", len(cco.LabelFilter), cco.LabelFilter)
	}
	req.ReportFields = cco.ReportFields
	req.ReportStatusFields = cco.ReportStatusFields
	rsp, err := c.grpcClient.List(ctx, req, cco.GrpcCallOpts...)
	if err != nil {
		return nil, err
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return rsp, nil
}

func (c *crudAPIGrpcClient) ListStream(ctx context.Context, opts ...server.CRUDCallOpt) (server.ListStreamRsp, error) {
	return nil, fmt.Errorf("Not implemented")
}

func (c *crudAPIGrpcClient) Delete(ctx context.Context, key string, opts ...server.CRUDCallOpt) error {

	req, err := NewDeleteRequest(key)
	if err != nil {
		return errors.Wrap(err, "Delete")
	}

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	ctx = client.AddHdrsToCtx(cco.Headers, ctx)

	rsp, err := c.grpcClient.Delete(ctx, req, cco.GrpcCallOpts...)
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return err

}

func NewCRUDAPIGrpcClient(cc *grpc.ClientConn) server.CRUDClient {
	ccl := &crudAPIGrpcClient{cc, NewAPIClient(cc)}
	return ccl
}

// REST Client
type crudAPIRestClient struct {
	baseURL string
	client  http.Client
}

func (c *crudAPIRestClient) Create(ctx context.Context, e db.Entry, opts ...server.CRUDCallOpt) (db.Entry, error) {

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	var req *CreateRequest
	if cco.RequestProto != nil {
		r, ok := cco.RequestProto.(*CreateRequest)
		if !ok {
			return nil, fmt.Errorf("%T is not *CreateRequest", cco.RequestProto)
		}
		req = r
	} else {
		r, err := NewCreateRequest(e)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new create request")
		}
		req = r
		if cco.ObjToMsgConverter != nil {
			if err := cco.ObjToMsgConverter(e, req); err != nil {
				return nil, err
			}
		}
	}

	url := fmt.Sprintf("%s/public/namespaces/%s/service_policys", c.baseURL, req.Metadata.GetNamespace())
	jsn, err := req.ToJSON()
	if err != nil {
		return nil, errors.Wrap(err, "RestClient Create")
	}

	hReq, err := http.NewRequest("POST", url, bytes.NewBuffer([]byte(jsn)))
	if err != nil {
		return nil, err
	}
	hReq = hReq.WithContext(ctx)

	client.AddHdrsToReq(cco.Headers, hReq)
	hReq.Header.Set("Content-Type", "application/json")

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, err
	}
	defer rsp.Body.Close()
	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful POST at URL %s, status code %d, body %s, err %s", url, rsp.StatusCode, body, err)
	}
	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "RestClient create")
	}

	rspo := &CreateResponse{}
	if err := codec.FromJSON(string(body), rspo); err != nil {
		return nil, errors.Wrap(err, "Converting json to response protobuf message")
	}
	configapi.TranscribeCall(ctx, req, rspo)
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rspo
		cco.OutCallResponse.JSON = string(body)
	}

	obj := NewDBObject(nil)
	rspo.ToObject(obj)
	if cco.MsgToObjConverter != nil {
		if err := cco.MsgToObjConverter(rspo, obj); err != nil {
			return nil, err
		}
	}
	return obj, nil

}

func (c *crudAPIRestClient) Replace(ctx context.Context, e db.Entry, opts ...server.CRUDCallOpt) error {

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	var rReq *ReplaceRequest
	if cco.RequestProto != nil {
		r, ok := cco.RequestProto.(*ReplaceRequest)
		if !ok {
			return fmt.Errorf("%T is not *ReplaceRequest", cco.RequestProto)
		}
		rReq = r
	} else {
		r, err := NewReplaceRequest(e)
		if err != nil {
			return errors.Wrap(err, "Creating new replace request")
		}
		rReq = r
		if cco.ObjToMsgConverter != nil {
			if err := cco.ObjToMsgConverter(e, rReq); err != nil {
				return err
			}
		}
	}

	got := 0
	if e != nil {
		got++
	}
	if cco.RequestProto != nil {
		got++
	}
	if cco.ReplaceJSONReq != "" {
		got++
	}
	if got != 1 {
		return fmt.Errorf("Only one of entry, WithRequestProto() or WithReplaceJSONRequest() should be specified")
	}
	if e == nil && cco.RequestProto == nil && cco.ReplaceJSONReq == "" {
		return fmt.Errorf("Neither entry nor WithRequestProto() nor WithReplaceJSONRequest() specified")
	}

	var jsn, namespace, name string
	var err error
	_ = namespace
	if e != nil || cco.RequestProto != nil {
		rReq.ResourceVersion = cco.ResourceVersion
		jsn, err = rReq.ToJSON()
		if err != nil {
			return errors.Wrap(err, "RestClient Replace")
		}
		namespace = rReq.GetMetadata().GetNamespace()
		name = rReq.GetMetadata().GetName()
	} else {
		jsn = cco.ReplaceJSONReq
		reqMap := make(map[string]interface{})
		if err := json.Unmarshal([]byte(jsn), &reqMap); err != nil {
			return errors.Wrapf(err, "Unmarshaling ReplaceJSONReq")
		}
		md, ok := reqMap["metadata"].(map[string]interface{})
		if !ok {
			return fmt.Errorf("ReplaceJSONReq does not have 'metadata'")
		}
		if val, ok := md["namespace"].(string); ok {
			namespace = val
		}
		if val, ok := md["name"].(string); ok {
			name = val
		}
	}

	url := fmt.Sprintf("%s/public/namespaces/%s/service_policys/%s", c.baseURL, namespace, name)

	hReq, err := http.NewRequest(http.MethodPut, url, bytes.NewBuffer([]byte(jsn)))
	if err != nil {
		return errors.Wrap(err, "RestClient replace")
	}
	hReq = hReq.WithContext(ctx)
	client.AddHdrsToReq(cco.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return err
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return fmt.Errorf("Unsuccessful PUT at URL %s, status code %d, body %s, err %s", url, rsp.StatusCode, body, err)
	}

	if _, err := ioutil.ReadAll(rsp.Body); err != nil {
		return errors.Wrap(err, "RestClient replace")
	}

	configapi.TranscribeCall(ctx, rReq, nil)
	return nil

}

func (c *crudAPIRestClient) GetRaw(ctx context.Context, key string, opts ...server.CRUDCallOpt) (*GetResponse, error) {
	req, err := NewGetRequest(key, opts...)
	if err != nil {
		return nil, errors.Wrap(err, "Get")
	}

	url := fmt.Sprintf("%s/public/namespaces/%s/service_policys/%s", c.baseURL, req.Namespace, req.Name)
	hReq, err := http.NewRequest("GET", url, nil)
	if err != nil {
		return nil, err
	}
	hReq = hReq.WithContext(ctx)

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	client.AddHdrsToReq(cco.Headers, hReq)

	q := hReq.URL.Query()
	q.Add("response_format", fmt.Sprintf("%d", req.ResponseFormat))
	hReq.URL.RawQuery += q.Encode()

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, err
	}
	defer rsp.Body.Close()
	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful GET at URL %s, status code %d, body %s, err %s", url, rsp.StatusCode, body, err)
	}
	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "RestClient Get")
	}

	rspo := &GetResponse{}
	if err := codec.FromJSON(string(body), rspo); err != nil {
		return nil, errors.Wrap(err, "Converting json to response protobuf message")
	}
	if cco.OutResourceVersion != nil {
		*cco.OutResourceVersion = rspo.ResourceVersion
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rspo
		cco.OutCallResponse.JSON = string(body)
	}
	configapi.TranscribeCall(ctx, req, rspo)
	return rspo, nil
}

func (c *crudAPIRestClient) Get(ctx context.Context, key string, opts ...server.CRUDCallOpt) (db.Entry, error) {

	gRsp, err := c.GetRaw(ctx, key, opts...)
	if gRsp != nil {
		obj := NewDBObject(gRsp.Object)
		if gRsp.Object == nil {
			gRsp.ToObject(obj)
		}
		return obj, err
	}
	return nil, err

}

func (c *crudAPIRestClient) GetDetail(ctx context.Context, key string, nef db.NewEntryFunc, opts ...server.CRUDCallOpt) (*server.GetResponse, error) {

	gRsp, err := c.GetRaw(ctx, key, opts...)
	respDetail := server.GetResponse{}
	if gRsp != nil {
		respDetail.Entry = NewDBObject(gRsp.Object)
		if gRsp.Object == nil {
			gRsp.ToObject(respDetail.Entry)
		}
		for _, status := range gRsp.Status {
			respDetail.BackRefs = append(respDetail.BackRefs, NewDBStatusObject(status))
		}

		return &respDetail, err
	}

	return nil, err

}

func (c *crudAPIRestClient) ListIDs(ctx context.Context, opts ...server.CRUDCallOpt) ([]string, error) {

	idSet := []string{}
	listRsp, err := c.List(ctx, opts...)
	if listRsp == nil {
		return idSet, err
	}
	for _, li := range listRsp.GetItems() {
		idSet = append(idSet, li.GetUid())
	}
	return idSet, err

}

func (c *crudAPIRestClient) ListItems(ctx context.Context, opts ...server.CRUDCallOpt) ([]server.ListItem, error) {

	sliSet := []server.ListItem{}
	listRsp, err := c.List(ctx, opts...)
	if listRsp == nil {
		return sliSet, err
	}
	for _, li := range listRsp.GetItems() {
		sliSet = append(sliSet, li)
	}
	return sliSet, err

}

func (c *crudAPIRestClient) List(ctx context.Context, opts ...server.CRUDCallOpt) (*ListResponse, error) {
	req := NewListRequest(opts...)
	_ = req
	url := fmt.Sprintf("%s/public/namespaces/%s/service_policys", c.baseURL, req.Namespace)

	hReq, err := http.NewRequest("GET", url, nil)
	if err != nil {
		return nil, err
	}
	hReq = hReq.WithContext(ctx)

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	client.AddHdrsToReq(cco.Headers, hReq)

	q := hReq.URL.Query()
	switch len(cco.LabelFilter) {
	case 0:
	case 1:
		q.Add("label_filter", cco.LabelFilter[0])
	default:
		return nil, fmt.Errorf("Only one label selector expression can be provided, got %d: %s", len(cco.LabelFilter), cco.LabelFilter)
	}

	for _, fName := range cco.ReportFields {
		q.Add("report_fields", fName)
	}
	for _, fName := range cco.ReportStatusFields {
		q.Add("report_status_fields", fName)
	}

	hReq.URL.RawQuery += q.Encode()
	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, err
	}
	defer rsp.Body.Close()
	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful List at URL %s, status code %d, body %s, err %s", url, rsp.StatusCode, body, err)
	}
	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "RestClient List")
	}

	rspo := &ListResponse{}
	if err := codec.FromJSON(string(body), rspo); err != nil {
		return nil, errors.Wrap(err, "Converting json to response protobuf message")
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rspo
		cco.OutCallResponse.JSON = string(body)
	}
	configapi.TranscribeCall(ctx, req, rspo)
	return rspo, nil
}

func (c *crudAPIRestClient) ListStream(ctx context.Context, opts ...server.CRUDCallOpt) (server.ListStreamRsp, error) {
	return nil, fmt.Errorf("Not implemented")
}

func (c *crudAPIRestClient) Delete(ctx context.Context, key string, opts ...server.CRUDCallOpt) error {

	dReq, err := NewDeleteRequest(key)
	if err != nil {
		return errors.Wrap(err, "Delete")
	}

	url := fmt.Sprintf("%s/public/namespaces/%s/service_policys/%s", c.baseURL, dReq.Namespace, dReq.Name)
	hReq, err := http.NewRequest(http.MethodDelete, url, nil)
	if err != nil {
		return errors.Wrap(err, "RestClient delete")
	}
	hReq = hReq.WithContext(ctx)

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	client.AddHdrsToReq(cco.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return err
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return fmt.Errorf("Unsuccessful DELETE at URL %s, status code %d, body %s, err %s", url, rsp.StatusCode, body, err)
	}

	_, err = ioutil.ReadAll(rsp.Body)
	if err != nil {
		return errors.Wrap(err, "RestClient delete")
	}
	configapi.TranscribeCall(ctx, dReq, nil)

	return nil

}

func NewCRUDAPIRestClient(baseURL string, cl http.Client) server.CRUDClient {
	crcl := &crudAPIRestClient{baseURL, cl}
	return crcl
}

// INPROC Client (satisfying APIClient interface)
type APIInprocClient struct {
	crudCl *crudAPIInprocClient
}

func (c *APIInprocClient) Create(ctx context.Context, req *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	ah := c.crudCl.svc.GetAPIHandler("ves.io.schema.service_policy.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		err := fmt.Errorf("No CRUD Server for ves.io.schema.service_policy")
		return nil, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	rsp, err := oah.Create(ctx, req)
	if err != nil {
		return rsp, err
	}
	return rsp, nil
}

func (c *APIInprocClient) Replace(ctx context.Context, req *ReplaceRequest, opts ...grpc.CallOption) (*ReplaceResponse, error) {
	ah := c.crudCl.svc.GetAPIHandler("ves.io.schema.service_policy.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		err := fmt.Errorf("No CRUD Server for ves.io.schema.service_policy")
		return nil, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}
	if rsp, err := oah.Replace(ctx, req); err != nil {
		return rsp, err
	}
	return NewObjectReplaceRsp(nil)
}

func (c *APIInprocClient) Get(ctx context.Context, req *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	ah := c.crudCl.svc.GetAPIHandler("ves.io.schema.service_policy.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		err := fmt.Errorf("No CRUD Server for ves.io.schema.service_policy")
		return nil, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}
	rsp, err := oah.Get(ctx, req)
	if err != nil {
		return rsp, err
	}
	return rsp, nil
}

func (c *APIInprocClient) List(ctx context.Context, req *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	ah := c.crudCl.svc.GetAPIHandler("ves.io.schema.service_policy.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		err := fmt.Errorf("No CRUD Server for ves.io.schema.service_policy")
		return nil, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}
	rsp, err := oah.List(ctx, req)
	if err != nil {
		return rsp, err
	}
	return rsp, nil
}

func (c *APIInprocClient) Delete(ctx context.Context, req *DeleteRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	ah := c.crudCl.svc.GetAPIHandler("ves.io.schema.service_policy.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		err := fmt.Errorf("No CRUD Server for ves.io.schema.service_policy")
		return nil, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}
	rsp, err := oah.Delete(ctx, req)
	if err != nil {
		return rsp, err
	}
	return rsp, nil
}

func NewAPIInprocClient(svc svcfw.Service) APIClient {
	crudCl := newCRUDAPIInprocClient(svc)
	return &APIInprocClient{crudCl}
}

// INPROC CRUD Client (satisfying server.CRUDClient interface)
type crudAPIInprocClient struct {
	svc svcfw.Service
}

func (c *crudAPIInprocClient) Create(ctx context.Context, e db.Entry, opts ...server.CRUDCallOpt) (db.Entry, error) {

	ah := c.svc.GetAPIHandler("ves.io.schema.service_policy.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		return nil, fmt.Errorf("No CRUD Server for ves.io.schema.service_policy")
	}

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	req, err := NewCreateRequest(e)
	if err != nil {
		return nil, errors.Wrap(err, "Creating new create request")
	}
	if cco.ObjToMsgConverter != nil {
		if err := cco.ObjToMsgConverter(e, req); err != nil {
			return nil, err
		}
	}

	rsp, err := oah.Create(ctx, req)

	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	if err != nil {
		return nil, err
	}
	obj := NewDBObject(nil)
	rsp.ToObject(obj)
	if cco.MsgToObjConverter != nil {
		if err := cco.MsgToObjConverter(rsp, obj); err != nil {
			return nil, err
		}
	}
	return obj, nil

}

func (c *crudAPIInprocClient) Replace(ctx context.Context, e db.Entry, opts ...server.CRUDCallOpt) error {

	ah := c.svc.GetAPIHandler("ves.io.schema.service_policy.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		return fmt.Errorf("No CRUD Server for ves.io.schema.service_policy")
	}

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	req, err := NewReplaceRequest(e)
	if err != nil {
		return errors.Wrap(err, "Creating new replace request")
	}
	if cco.ObjToMsgConverter != nil {
		if err := cco.ObjToMsgConverter(e, req); err != nil {
			return err
		}
	}

	req.ResourceVersion = cco.ResourceVersion

	rsp, err := oah.Replace(ctx, req)

	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return err

}

func (c *crudAPIInprocClient) GetRaw(ctx context.Context, key string, opts ...server.CRUDCallOpt) (*GetResponse, error) {
	ah := c.svc.GetAPIHandler("ves.io.schema.service_policy.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		return nil, fmt.Errorf("No CRUD Server for ves.io.schema.service_policy")
	}

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	req, err := NewGetRequest(key, opts...)
	if err != nil {
		return nil, errors.Wrap(err, "Get")
	}
	rsp, err := oah.Get(ctx, req)
	if err != nil {
		return nil, err
	}
	if cco.OutResourceVersion != nil {
		*cco.OutResourceVersion = rsp.ResourceVersion
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return rsp, nil
}

func (c *crudAPIInprocClient) Get(ctx context.Context, key string, opts ...server.CRUDCallOpt) (db.Entry, error) {

	gRsp, err := c.GetRaw(ctx, key, opts...)
	if gRsp != nil {
		obj := NewDBObject(gRsp.Object)
		if gRsp.Object == nil {
			gRsp.ToObject(obj)
		}
		return obj, err
	}
	return nil, err

}

func (c *crudAPIInprocClient) GetDetail(ctx context.Context, key string, nef db.NewEntryFunc, opts ...server.CRUDCallOpt) (*server.GetResponse, error) {

	gRsp, err := c.GetRaw(ctx, key, opts...)
	respDetail := server.GetResponse{}
	if gRsp != nil {
		respDetail.Entry = NewDBObject(gRsp.Object)
		if gRsp.Object == nil {
			gRsp.ToObject(respDetail.Entry)
		}
		for _, status := range gRsp.Status {
			respDetail.BackRefs = append(respDetail.BackRefs, NewDBStatusObject(status))
		}

		return &respDetail, err
	}

	return nil, err

}

func (c *crudAPIInprocClient) ListIDs(ctx context.Context, opts ...server.CRUDCallOpt) ([]string, error) {

	idSet := []string{}
	listRsp, err := c.List(ctx, opts...)
	if listRsp == nil {
		return idSet, err
	}
	for _, li := range listRsp.GetItems() {
		idSet = append(idSet, li.GetUid())
	}
	return idSet, err

}

func (c *crudAPIInprocClient) ListItems(ctx context.Context, opts ...server.CRUDCallOpt) ([]server.ListItem, error) {

	sliSet := []server.ListItem{}
	listRsp, err := c.List(ctx, opts...)
	if listRsp == nil {
		return sliSet, err
	}
	for _, li := range listRsp.GetItems() {
		sliSet = append(sliSet, li)
	}
	return sliSet, err

}

func (c *crudAPIInprocClient) List(ctx context.Context, opts ...server.CRUDCallOpt) (*ListResponse, error) {
	ah := c.svc.GetAPIHandler("ves.io.schema.service_policy.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		return nil, fmt.Errorf("No CRUD Server for ves.io.schema.service_policy")
	}

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	req := NewListRequest(opts...)
	switch len(cco.LabelFilter) {
	case 0:
	case 1:
		req.LabelFilter = cco.LabelFilter[0]
	default:
		return nil, fmt.Errorf("Only one label selector expression can be provided, got %d: %s", len(cco.LabelFilter), cco.LabelFilter)
	}

	rsp, err := oah.List(ctx, req)

	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return rsp, err
}

func (c *crudAPIInprocClient) ListStream(ctx context.Context, opts ...server.CRUDCallOpt) (server.ListStreamRsp, error) {
	return nil, fmt.Errorf("Not implemented")
}

func (c *crudAPIInprocClient) Delete(ctx context.Context, key string, opts ...server.CRUDCallOpt) error {

	ah := c.svc.GetAPIHandler("ves.io.schema.service_policy.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		return fmt.Errorf("No CRUD Server for ves.io.schema.service_policy")
	}

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	req, err := NewDeleteRequest(key)
	if err != nil {
		return errors.Wrap(err, "Delete")
	}

	rsp, err := oah.Delete(ctx, req)

	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return err

}

func newCRUDAPIInprocClient(svc svcfw.Service) *crudAPIInprocClient {
	crcl := &crudAPIInprocClient{svc: svc}
	return crcl
}

func NewCRUDAPIInprocClient(svc svcfw.Service) server.CRUDClient {
	return newCRUDAPIInprocClient(svc)
}

// SERVER side
type APISrv struct {
	oType   string
	tblName string
	sf      svcfw.Service

	opts *server.CrudServerOpts
	// derived from opts
	apiWrapper *server.DBAPIWrapper

	// resource handler function pointers
}

func (s *APISrv) validateTransport(ctx context.Context) error {
	if s.sf.IsTransportNotSupported("ves.io.schema.service_policy.API", server.TransportFromContext(ctx)) {
		userMsg := fmt.Sprintf("ves.io.schema.service_policy.API not allowed in transport '%s'", server.TransportFromContext(ctx))
		err := svcfw.NewPermissionDeniedError(userMsg, fmt.Errorf(userMsg))
		return server.GRPCStatusFromError(err).Err()
	}
	return nil
}

func (s *APISrv) Create(ctx context.Context, req *CreateRequest) (*CreateResponse, error) {
	if err := s.validateTransport(ctx); err != nil {
		return nil, err
	}
	if s.sf.Config().EnableAPIValidation {
		if rvFn := s.sf.GetRPCValidator("ves.io.schema.service_policy.API.Create"); rvFn != nil {
			if err := rvFn(ctx, req); err != nil {
				if !server.NoReqValidateFromContext(ctx) {
					err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "Validating Request"))
					return nil, server.GRPCStatusFromError(err).Err()
				}
				s.sf.Logger().Warn(server.NoReqValidateAcceptLog, zap.String("rpc_fqn", "ves.io.schema.service_policy.API.Create"), zap.Error(err))
			}
		}
	}
	reqMsgFQN := "ves.io.schema.service_policy.CreateRequest"
	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.sf, reqMsgFQN, req)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
	}()

	obj := NewDBObject(nil)
	req.ToObject(obj)
	if conv, exists := s.sf.Config().MsgToObjConverters[reqMsgFQN]; exists {
		if err := conv(req, obj); err != nil {
			return nil, err
		}
	}
	obj.SystemMetadata = &ves_io_schema.SystemObjectMetaType{}
	rsrcReq := &server.ResourceCreateRequest{Entry: obj}
	rsrcRsp, err := s.opts.RsrcHandler.CreateFn(ctx, rsrcReq, s.apiWrapper)
	if err != nil {
		err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "CreateResource"))
		return nil, server.GRPCStatusFromError(err).Err()
	}
	rsp, err := NewObjectCreateRsp(rsrcRsp.Entry)
	if err != nil {
		err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "CreateResponse"))
		return nil, server.GRPCStatusFromError(err).Err()
	}
	rspMsgFQN := "ves.io.schema.service_policy.CreateResponse"
	if conv, exists := s.sf.Config().ObjToMsgConverters[rspMsgFQN]; exists {
		if err := conv(rsrcRsp.Entry, rsp); err != nil {
			return nil, err
		}
	}
	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.sf, "ves.io.schema.service_policy.API.CreateResponse", rsp)...)
	return rsp, nil
}

func (s *APISrv) Replace(ctx context.Context, req *ReplaceRequest) (*ReplaceResponse, error) {
	if err := s.validateTransport(ctx); err != nil {
		return nil, err
	}
	if req.Spec == nil {
		err := fmt.Errorf("Nil spec in Replace Request")
		return nil, svcfw.NewInvalidInputError(err.Error(), err)
	}
	if s.sf.Config().EnableAPIValidation {
		if rvFn := s.sf.GetRPCValidator("ves.io.schema.service_policy.API.Replace"); rvFn != nil {
			if err := rvFn(ctx, req); err != nil {
				if !server.NoReqValidateFromContext(ctx) {
					err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "Validating Request"))
					return nil, server.GRPCStatusFromError(err).Err()
				}
				s.sf.Logger().Warn(server.NoReqValidateAcceptLog, zap.String("rpc_fqn", "ves.io.schema.service_policy.API.Replace"), zap.Error(err))
			}
		}
	}
	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.sf, "ves.io.schema.service_policy.API.ReplaceRequest", req)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
	}()

	rsrcReq := &server.ResourceReplaceRequest{RequestMsg: req}
	rsrcRsp, err := s.opts.RsrcHandler.ReplaceFn(ctx, rsrcReq, s.apiWrapper)
	if err != nil {
		err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "ReplaceResource"))
		return nil, server.GRPCStatusFromError(err).Err()
	}
	rsp, err := NewObjectReplaceRsp(rsrcRsp.Entry)
	if err != nil {
		err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "ReplaceResponse"))
		return nil, server.GRPCStatusFromError(err).Err()
	}
	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.sf, "ves.io.schema.service_policy.API.ReplaceResponse", rsp)...)
	return rsp, nil
}

func (s *APISrv) Get(ctx context.Context, req *GetRequest) (*GetResponse, error) {
	if err := s.validateTransport(ctx); err != nil {
		return nil, err
	}
	if s.sf.Config().EnableAPIValidation {
		if rvFn := s.sf.GetRPCValidator("ves.io.schema.service_policy.API.Get"); rvFn != nil {
			if err := rvFn(ctx, req); err != nil {
				err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}
	tenant := server.TenantFromContext(ctx)
	rsrcReq := &server.ResourceGetRequest{IsPublic: true, Tenant: tenant, Namespace: req.GetNamespace(), Name: req.GetName()}
	switch req.ResponseFormat {
	case GET_RSP_FORMAT_FOR_CREATE:
		rsrcReq.RspInCreateForm = true

	case GET_RSP_FORMAT_FOR_REPLACE:
		rsrcReq.RspInReplaceForm = true

	case GET_RSP_FORMAT_READ:
		rsrcReq.RspInReadForm = true

	case GET_RSP_FORMAT_STATUS:
		rsrcReq.RspInStatusForm = true

	case GET_RSP_FORMAT_REFERRING_OBJECTS:
		rsrcReq.RspInReferringObjectsForm = true

	}

	rsrcRsp, err := s.opts.RsrcHandler.GetFn(ctx, rsrcReq, s.apiWrapper)
	if err != nil {
		err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "GetResource"))
		return nil, server.GRPCStatusFromError(err).Err()
	}
	rsp, err := NewObjectGetRsp(ctx, s.sf, req, rsrcRsp)
	if err != nil {
		err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "GetResponse"))
		return nil, server.GRPCStatusFromError(err).Err()
	}
	rspMsgFQN := "ves.io.schema.service_policy.GetResponse"
	if conv, exists := s.sf.Config().ObjToMsgConverters[rspMsgFQN]; exists {
		if err := conv(rsrcRsp.Entry, rsp); err != nil {
			return nil, err
		}
	}
	return rsp, nil
}

func (s *APISrv) List(ctx context.Context, req *ListRequest) (*ListResponse, error) {
	if err := s.validateTransport(ctx); err != nil {
		return nil, err
	}
	if s.sf.Config().EnableAPIValidation {
		if rvFn := s.sf.GetRPCValidator("ves.io.schema.service_policy.API.List"); rvFn != nil {
			if err := rvFn(ctx, req); err != nil {
				err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}
	var merr *multierror.Error
	rsrcReq := &server.ResourceListRequest{
		Namespace:   req.Namespace,
		LabelFilter: req.LabelFilter,
		RspStreamed: false,
	}
	if len(req.ReportStatusFields) > 0 {
		rsrcReq.ReportStatusFields = &req.ReportStatusFields
	}
	rsrcRsp, err := s.opts.RsrcHandler.ListFn(ctx, rsrcReq, s.apiWrapper)
	if err != nil {
		merr = multierror.Append(merr, errors.Wrap(err, "ListResource"))
	}
	rsp, err := NewListResponse(ctx, req, s.sf, rsrcRsp)
	if err != nil {
		merr = multierror.Append(merr, errors.Wrap(err, "ListResponse allocation failed"))
	}
	if merr != nil {
		if rsp == nil {
			return nil, merr
		}
		rsp.Errors = append(rsp.Errors, &ves_io_schema.ErrorType{
			Code:    ves_io_schema.EINTERNAL,
			Message: merr.Error(),
		})

	}
	return rsp, nil
}

func (s *APISrv) Delete(ctx context.Context, req *DeleteRequest) (*google_protobuf.Empty, error) {
	if err := s.validateTransport(ctx); err != nil {
		return nil, err
	}
	if s.sf.Config().EnableAPIValidation {
		if rvFn := s.sf.GetRPCValidator("ves.io.schema.service_policy.API.Delete"); rvFn != nil {
			if err := rvFn(ctx, req); err != nil {
				if !server.NoReqValidateFromContext(ctx) {
					err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "Validating Request"))
					return nil, server.GRPCStatusFromError(err).Err()
				}
				s.sf.Logger().Warn(server.NoReqValidateAcceptLog, zap.String("rpc_fqn", "ves.io.schema.service_policy.API.Delete"), zap.Error(err))
			}
		}
	}
	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.sf, "ves.io.schema.service_policy.API.DeleteRequest", req)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
	}()

	tenant := server.TenantFromContext(ctx)
	key := fmt.Sprintf("%s/%s/%s", tenant, req.GetNamespace(), req.GetName())
	rsrcReq := &server.ResourceDeleteRequest{Key: key}
	rsrcReq.FailIfReferred = req.FailIfReferred
	_, err := s.opts.RsrcHandler.DeleteFn(ctx, rsrcReq, s.apiWrapper)
	if err != nil {
		err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "DeleteResource"))
		return nil, server.GRPCStatusFromError(err).Err()
	}
	return &google_protobuf.Empty{}, nil
}

// Assert that APISrv implements the generated gRPC APIServer interface
var _ APIServer = &APISrv{}

func NewCRUDAPIServer(oType string, tblName string, sf svcfw.Service, opts ...server.CRUDServerOpt) (server.APIHandler, string) {
	// convert ves.io.examplesvc.objectone.Object to
	//         ves.io.examplesvc.objectone.API
	sl := strings.Split(oType, ".")
	csOpts := server.NewCRUDServerOpts()
	for _, o := range opts {
		o(csOpts)
	}
	wrapper := server.NewDBAPIWrapper(csOpts.APIWrapperOpts...)
	s := &APISrv{
		oType:      oType,
		tblName:    tblName,
		sf:         sf,
		opts:       csOpts,
		apiWrapper: wrapper,
	}
	return s, fmt.Sprintf("%s.API", strings.Join(sl[:len(sl)-1], "."))
}

func (r *Object) Key() string {
	m := r.GetMetadata()
	if m == nil {
		return ""
	}
	return strings.Join([]string{m.Namespace, m.Name}, "/")
}

func (r *Object) Uid() string {
	return r.SystemMetadata.Uid
}

func (r *ListResponse) GetKeys() []string {
	var ret []string
	for _, i := range r.Items {
		ret = append(ret, i.Namespace+"/"+i.Name)
	}
	return ret
}

// Implement server.SROListItem interface on ListResponseItem
func (l *ListResponseItem) GetObjUid() string {
	return l.Uid
}

func (l *ListResponseItem) GetObjTenant() string {
	return l.Tenant
}

func (l *ListResponseItem) GetObjNamespace() string {
	return l.Namespace
}

func (l *ListResponseItem) GetObjName() string {
	return l.Name
}

func (l *ListResponseItem) GetObjLabels() map[string]string {
	return l.Labels
}

func NewObjectCreateRsp(e db.Entry) (*CreateResponse, error) {
	switch e.(type) {
	case nil:
		return nil, nil
	case *DBObject:
		rsp := &CreateResponse{}
		rsp.FromObject(e)
		return rsp, nil
	}
	return nil, fmt.Errorf("Entry not of type *DBObject in NewObjectCreateRsp")
}

func NewObjectReplaceRsp(e db.Entry) (*ReplaceResponse, error) {
	return &ReplaceResponse{}, nil
}

func NewObjectGetRsp(ctx context.Context, sf svcfw.Service, req *GetRequest, rsrcRsp *server.ResourceGetResponse) (*GetResponse, error) {
	rsp := &GetResponse{}
	e := rsrcRsp.Entry
	if e == nil {
		return rsp, nil
	}
	o, ok := e.(*DBObject)
	if !ok {
		return nil, fmt.Errorf("entry not of type *DBObject in NewObjectGetRsp")
	}

	rsp.ResourceVersion = rsrcRsp.ResourceVersion
	var merr *multierror.Error
	buildReadForm := func() {
		rsp.Metadata = &ves_io_schema.ObjectGetMetaType{}
		rsp.Metadata.FromObjectMetaType(o.Metadata)
		rsp.SystemMetadata = &ves_io_schema.SystemObjectGetMetaType{}
		rsp.SystemMetadata.FromSystemObjectMetaType(o.SystemMetadata)
		rsp.Spec = &GetSpecType{}
		rsp.Spec.FromGlobalSpecType(o.Spec.GcSpec)

	}
	_ = buildReadForm
	buildStatusForm := func() {
		for _, statusEnt := range rsrcRsp.BackRefs {
			statusObj, ok := statusEnt.ToStore().(*StatusObject)
			if !ok {
				merr = multierror.Append(merr, fmt.Errorf("%T is not *StatusObject", statusEnt))
				continue
			}
			rsp.Status = append(rsp.Status, statusObj)
		}

	}
	_ = buildStatusForm
	buildReferringObjectsForm := func() {
		for _, br := range rsrcRsp.ReferringObjects {
			rsp.ReferringObjects = append(rsp.ReferringObjects, &ves_io_schema.ObjectRefType{
				Kind:      db.KindForEntryType(br.Type),
				Uid:       br.UID,
				Tenant:    br.Tenant,
				Namespace: br.Namespace,
				Name:      br.Name,
			})
		}

	}
	_ = buildReferringObjectsForm

	switch req.ResponseFormat {

	case GET_RSP_FORMAT_FOR_CREATE:
		createReq, err := NewCreateRequest(e)
		if err != nil {
			return nil, errors.Wrap(err, "Building CreateRequest from entry")
		}
		// Name has to be specified for a new create
		createReq.Metadata.Name = ""
		rsp.CreateForm = createReq

	case GET_RSP_FORMAT_FOR_REPLACE:
		replaceReq, err := NewReplaceRequest(e)
		if err != nil {
			return nil, errors.Wrap(err, "Building ReplaceRequest from entry")
		}
		rsp.ReplaceForm = replaceReq

	case GET_RSP_FORMAT_STATUS:
		buildStatusForm()

	case GET_RSP_FORMAT_READ:
		buildReadForm()

	case GET_RSP_FORMAT_REFERRING_OBJECTS:
		buildReferringObjectsForm()

	default:
		noDBForm, _ := flags.GetEnvGetRspNoDBForm()
		if !noDBForm {
			rsp.Object = o.Object
			sf.Logger().Alert(svcfw.GetResponseInDBForm,
				log.MinorAlert,
				zap.String("user", server.UserFromContext(ctx)),
				zap.String("useragent", server.UseragentStrFromContext(ctx)),
				zap.String("operation", "Get"),
			)
			buildReadForm()

		} else {
			buildReadForm()

		}
		buildStatusForm()
	}

	return rsp, errors.ErrOrNil(merr)
}

func NewListResponse(ctx context.Context, req *ListRequest, sf svcfw.Service, rsrcRsp *server.ResourceListResponse) (*ListResponse, error) {
	if req == nil {
		return nil, fmt.Errorf("Nil ListRequest")
	}
	if rsrcRsp == nil {
		return nil, fmt.Errorf("Nil ResourceResponse")
	}

	errStrs := []string{}
	resp := &ListResponse{}
	resp.Items = []*ListResponseItem{}

	for _, rsrcItem := range rsrcRsp.Items {
		if rsrcItem == nil {
			errStrs = append(errStrs, fmt.Sprintf("Nil ResourceListResponseItem"))
			continue
		}

		e := rsrcItem.Entry
		o, ok := e.(*DBObject)
		if !ok {
			resp.Errors = append(resp.Errors, &ves_io_schema.ErrorType{
				Code:    ves_io_schema.EINTERNAL,
				Message: fmt.Sprintf("Entry %T not of type *DBObject in NewListResponse", e),
			})

			continue
		}
		item := &ListResponseItem{
			Tenant:    o.GetSystemMetadata().GetTenant(),
			Namespace: o.GetMetadata().GetNamespace(),
			Name:      o.GetMetadata().GetName(),
			Uid:       o.GetMetadata().GetUid(),
			OwnerView: o.GetSystemMetadata().GetOwnerView(),
			Labels:    o.GetMetadata().GetLabels(),
		}

		item.Description = o.GetMetadata().GetDescription()
		item.Annotations = o.GetMetadata().GetAnnotations()
		item.Disabled = o.GetMetadata().GetDisable()

		if len(req.ReportFields) > 0 {
			noDBForm, _ := flags.GetEnvGetRspNoDBForm()
			if !noDBForm {
				item.Object = o.Object
				sf.Logger().Alert(svcfw.GetResponseInDBForm,
					log.MinorAlert,
					zap.String("user", server.UserFromContext(ctx)),
					zap.String("useragent", server.UseragentStrFromContext(ctx)),
					zap.String("operation", "List"),
				)
			}

			item.Metadata = &ves_io_schema.ObjectGetMetaType{}
			item.Metadata.FromObjectMetaType(o.Metadata)
			item.SystemMetadata = &ves_io_schema.SystemObjectGetMetaType{}
			item.SystemMetadata.FromSystemObjectMetaType(o.SystemMetadata)

			if o.Object != nil && o.Object.GetSpec().GetGcSpec() != nil {
				msgFQN := "ves.io.schema.service_policy.GetResponse"
				if conv, exists := sf.Config().ObjToMsgConverters[msgFQN]; exists {
					getSpec := &GetSpecType{}
					getSpec.FromGlobalSpecType(o.Spec.GcSpec)
					getRsp := &GetResponse{Spec: getSpec}
					if err := conv(o, getRsp); err != nil {
						resp.Errors = append(resp.Errors, &ves_io_schema.ErrorType{
							Code:    ves_io_schema.EINTERNAL,
							Message: fmt.Sprintf("Converting entry to getResponse: %s", err),
						})

						continue
					}
					item.GetSpec = getRsp.Spec
				} else {
					item.GetSpec = &GetSpecType{}
					item.GetSpec.FromGlobalSpecType(o.Spec.GcSpec)
				}
			}

		}

		if len(req.ReportStatusFields) > 0 {
			for _, sroStatus := range rsrcItem.StatusSet {
				statusDBO, ok := sroStatus.(*DBStatusObject)
				if !ok {
					resp.Errors = append(resp.Errors, &ves_io_schema.ErrorType{
						Code:    ves_io_schema.EINTERNAL,
						Message: fmt.Sprintf("sro.Status %T is not of type *DBStatusObject in NewListResponse", sroStatus),
					})

					continue
				}
				item.StatusSet = append(item.StatusSet, statusDBO.StatusObject)
			}
		}

		resp.Items = append(resp.Items, item)
	}
	return resp, nil
}

func RegisterGwAPIHandler(ctx context.Context, mux *runtime.ServeMux, svc interface{}) error {
	s, ok := svc.(svcfw.Service)
	if !ok {
		return fmt.Errorf("svc is not svcfw.Service")
	}
	return RegisterAPIHandlerClient(ctx, mux, NewAPIInprocClient(s))
}

var APISwaggerJSON string = `{
    "swagger": "2.0",
    "info": {
        "title": "service policy object",
        "description": "A service_policy object consists of an unordered list of predicates and a list of service policy rules. The predicates are evaluated against a set of input\nfields that are extracted from or derived from an L7 request API. Any predicates that are not specified in a policy are implicitly considered to be true. The\nrules in the policy are also evaluated against the input fields. They are treated as an ordered or unordered list depending on the value of the rule combining\nalgorithm. A request API is considered to match a policy if all predicates in the policy evaluate to true and the request API matches one of the rules in the\npolicy.\n\nIf the configured rule combining algorithm is FIRST_MATCH, the rules in the policy are evaluated sequentially till a matching rule is identified. If the rule\ncombining algorithm is ALLOW_OVERRIDES all rules with an ALLOW action are evaluated prior to rules with a DENY action. If it is DENY_OVERRIDES, all rules with\na DENY action are evaluated prior to rules with a ALLOW action.\n\nA service policy is part of an ordered list of policies in one or more service policy sets. If a request API matches a policy, the resulting action for the\npolicy is the action configured in the matching rule. If a request API does not match a given policy, the next policy in the service policy set is evaluated.",
        "version": "version not set"
    },
    "schemes": [
        "http",
        "https"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "tags": null,
    "paths": {
        "/public/namespaces/{metadata.namespace}/service_policys": {
            "post": {
                "summary": "Create service policy",
                "description": "Create service_policy creates a new object in the storage backend for metadata.namespace.",
                "operationId": "ves.io.schema.service_policy.API.Create",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/service_policyCreateResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "metadata.namespace",
                        "description": "namespace\n\nx-example: \"staging\"\nThis defines the workspace within which each the configuration object is to be created. \nMust be a DNS_LABEL format. For a namespace object itself, namespace value will be \"\"",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service_policyCreateRequest"
                        }
                    }
                ],
                "tags": [
                    "API"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-service_policy-API-Create"
                },
                "x-ves-proto-rpc": "ves.io.schema.service_policy.API.Create"
            },
            "x-displayname": "Service Policy",
            "x-ves-proto-service": "ves.io.schema.service_policy.API",
            "x-ves-proto-service-type": "AUTO_CRUD_PUBLIC"
        },
        "/public/namespaces/{metadata.namespace}/service_policys/{metadata.name}": {
            "put": {
                "summary": "Replace service policy",
                "description": "Replace service_policy replaces an existing object in the storage backend for metadata.namespace.",
                "operationId": "ves.io.schema.service_policy.API.Replace",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/service_policyReplaceResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "metadata.namespace",
                        "description": "namespace\n\nx-example: \"staging\"\nThis defines the workspace within which each the configuration object is to be created. \nMust be a DNS_LABEL format. For a namespace object itself, namespace value will be \"\"",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "metadata.name",
                        "description": "name\n\nx-example: \"acmecorp-web\"\nThe configuration object to be replaced will be looked up by name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Name"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service_policyReplaceRequest"
                        }
                    }
                ],
                "tags": [
                    "API"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-service_policy-API-Replace"
                },
                "x-ves-proto-rpc": "ves.io.schema.service_policy.API.Replace"
            },
            "x-displayname": "Service Policy",
            "x-ves-proto-service": "ves.io.schema.service_policy.API",
            "x-ves-proto-service-type": "AUTO_CRUD_PUBLIC"
        },
        "/public/namespaces/{namespace}/service_policys": {
            "get": {
                "summary": "List",
                "description": "List the set of service_policy in a namespace",
                "operationId": "ves.io.schema.service_policy.API.List",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/service_policyListResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "namespace\n\nx-example: \"ns1\"\nNamespace to scope the listing of service_policy",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "label_filter",
                        "description": "x-example: \"env in (staging, testing), tier in (web, db)\"\nA LabelSelectorType expression that every item in list response will satisfy",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "x-displayname": "Label Filter"
                    },
                    {
                        "name": "report_fields",
                        "description": "x-example: \"\"\nExtra fields to return along with summary fields",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "x-displayname": "Report Fields"
                    },
                    {
                        "name": "report_status_fields",
                        "description": "x-example: \"\"\nExtra status fields to return along with summary fields",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "x-displayname": "Report Status Fields"
                    }
                ],
                "tags": [
                    "API"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-service_policy-API-List"
                },
                "x-ves-proto-rpc": "ves.io.schema.service_policy.API.List"
            },
            "x-displayname": "Service Policy",
            "x-ves-proto-service": "ves.io.schema.service_policy.API",
            "x-ves-proto-service-type": "AUTO_CRUD_PUBLIC"
        },
        "/public/namespaces/{namespace}/service_policys/{name}": {
            "get": {
                "summary": "Get service policy",
                "description": "Get service_policy reads a given object from storage backend for metadata.namespace.",
                "operationId": "ves.io.schema.service_policy.API.Get",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/service_policyGetResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "namespace\n\nx-example: \"ns1\"\nThe namespace in which the configuration object is present",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "name",
                        "description": "name\n\nx-example: \"name\"\nThe name of the configuration object to be fetched",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Name"
                    },
                    {
                        "name": "response_format",
                        "description": "The format in which the configuration object is to be fetched. This could be for example\n    - in GetSpec form for the contents of object\n    - in CreateRequest form to create a new similar object\n    - to ReplaceRequest form to replace changeable values\n\nDefault format of returned resource\nResponse should be in CreateRequest format\nResponse should be in ReplaceRequest format\nResponse should be in StatusObject(s) format\nResponse should be in format of GetSpecType\nResponse should have other objects referring to this object",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "GET_RSP_FORMAT_DEFAULT",
                            "GET_RSP_FORMAT_FOR_CREATE",
                            "GET_RSP_FORMAT_FOR_REPLACE",
                            "GET_RSP_FORMAT_STATUS",
                            "GET_RSP_FORMAT_READ",
                            "GET_RSP_FORMAT_REFERRING_OBJECTS"
                        ],
                        "default": "GET_RSP_FORMAT_DEFAULT",
                        "x-displayname": "Referring Objects"
                    }
                ],
                "tags": [
                    "API"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-service_policy-API-Get"
                },
                "x-ves-proto-rpc": "ves.io.schema.service_policy.API.Get"
            },
            "delete": {
                "summary": "Delete",
                "description": "Delete the specified service_policy",
                "operationId": "ves.io.schema.service_policy.API.Delete",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {}
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "namespace\n\nx-example: \"ns1\"\nNamespace in which the configuration object is present",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "name",
                        "description": "name\n\nx-example: \"name\"\nName of the configuration object",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Name"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service_policyDeleteRequest"
                        }
                    }
                ],
                "tags": [
                    "API"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-service_policy-API-Delete"
                },
                "x-ves-proto-rpc": "ves.io.schema.service_policy.API.Delete"
            },
            "x-displayname": "Service Policy",
            "x-ves-proto-service": "ves.io.schema.service_policy.API",
            "x-ves-proto-service-type": "AUTO_CRUD_PUBLIC"
        }
    },
    "definitions": {
        "ioschemaEmpty": {
            "type": "object",
            "description": "This can be used for messages where no values are needed",
            "title": "Empty",
            "x-displayname": "Empty",
            "x-ves-proto-message": "ves.io.schema.Empty"
        },
        "ioschemaObjectRefType": {
            "type": "object",
            "description": "This type establishes a 'direct reference' from one object(the referrer) to another(the referred). \nSuch a reference is in form of tenant/namespace/name for public API and Uid for private API\nThis type of reference is called direct because the relation is explicit and concrete (as opposed\nto selector reference which builds a group based on labels of selectee objects)",
            "title": "ObjectRefType",
            "x-displayname": "Object reference",
            "x-ves-proto-message": "ves.io.schema.ObjectRefType",
            "properties": {
                "kind": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then kind will hold the referred object's kind (e.g. \"route\")\n\nExample: - \"virtual_site\"-",
                    "title": "kind",
                    "x-displayname": "Kind",
                    "x-ves-example": "virtual_site"
                },
                "name": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then name will hold the referred object's(e.g. route's) name.\n\nExample: - \"contactus-route\"-",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "contactus-route"
                },
                "namespace": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then namespace will hold the referred object's(e.g. route's) namespace.\n\nExample: - \"ns1\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "ns1"
                },
                "tenant": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then tenant will hold the referred object's(e.g. route's) tenant.\n\nExample: - \"acmecorp\"-",
                    "title": "tenant",
                    "x-displayname": "Tenant",
                    "x-ves-example": "acmecorp"
                },
                "uid": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then uid will hold the referred object's(e.g. route's) uid.\n\nExample: - \"d15f1fad-4d37-48c0-8706-df1824d76d31\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "d15f1fad-4d37-48c0-8706-df1824d76d31"
                }
            }
        },
        "policyAppFirewallDetectionControl": {
            "type": "object",
            "description": "App Firewall detection changes to be applied for this request",
            "title": "App Firewall Detection Control",
            "x-displayname": "App Firewall Detection Control",
            "x-ves-proto-message": "ves.io.schema.policy.AppFirewallDetectionControl",
            "properties": {
                "exclude_signature_contexts": {
                    "type": "array",
                    "description": " App Firewall signature contexts to be excluded for this request",
                    "title": "Exclude Signature Contexts",
                    "items": {
                        "$ref": "#/definitions/policyAppFirewallSignatureContext"
                    },
                    "x-displayname": "Exclude App Firewall Signature Contexts"
                },
                "exclude_violation_contexts": {
                    "type": "array",
                    "description": " App Firewall violation contexts to be excluded for this request",
                    "title": "Exclude Signature Contexts",
                    "items": {
                        "$ref": "#/definitions/policyAppFirewallViolationContext"
                    },
                    "x-displayname": "Exclude App Firewall Violation Contexts"
                }
            }
        },
        "policyAppFirewallSignatureContext": {
            "type": "object",
            "description": "App Firewall signature context changes to be applied for this request",
            "title": "App Firewall Signature Context",
            "x-displayname": "App Firewall Signature Context",
            "x-ves-proto-message": "ves.io.schema.policy.AppFirewallSignatureContext",
            "properties": {
                "signature_id": {
                    "type": "integer",
                    "description": " App Firewall signature ID\nRequired: YES",
                    "title": "SignatureID",
                    "format": "int64",
                    "x-displayname": "SignatureID",
                    "x-ves-required": "true"
                }
            }
        },
        "policyAppFirewallViolationContext": {
            "type": "object",
            "description": "App Firewall violation context changes to be applied for this request",
            "title": "App Firewall Violation Context",
            "x-displayname": "App Firewall Violation Context",
            "x-ves-proto-message": "ves.io.schema.policy.AppFirewallViolationContext",
            "properties": {
                "exclude_violation": {
                    "description": " App Firewall violation type\nRequired: YES",
                    "title": "ViolationType",
                    "$ref": "#/definitions/schemaAppFirewallViolationType",
                    "x-displayname": "Violation Type",
                    "x-ves-required": "true"
                }
            }
        },
        "policyAppTrafficType": {
            "type": "string",
            "description": "Application traffic type\n\n - WEB: WebTrafficType\n\nWeb application traffic type.\n - MOBILE: MobileTrafficType\n\nMobile application traffic type.",
            "title": "AppTrafficType",
            "enum": [
                "WEB",
                "MOBILE"
            ],
            "default": "WEB",
            "x-displayname": "App Traffic type",
            "x-ves-proto-enum": "ves.io.schema.policy.AppTrafficType"
        },
        "policyArgMatcherType": {
            "type": "object",
            "description": "A argument matcher specifies the name of a single argument in the body and the criteria to match it.\nA argument matcher can check for one of the following:\n* Presence or absence of the argument\n* At least one of the values for the argument in the request satisfies the MatcherType item",
            "title": "ArgMatcherType",
            "x-displayname": "Argument Matcher",
            "x-ves-displayorder": "1,6,4",
            "x-ves-oneof-field-match": "[\"check_not_present\",\"check_present\",\"item\",\"presence\"]",
            "x-ves-proto-message": "ves.io.schema.policy.ArgMatcherType",
            "properties": {
                "check_not_present": {
                    "description": "Exclusive with [check_present item presence]\nx-displayName: \"Not Present\"\nCheck that the argument is not present.",
                    "title": "check_not_present",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "check_present": {
                    "description": "Exclusive with [check_not_present item presence]\nx-displayName: \"Present\"\nCheck that the argument is present.",
                    "title": "check_present",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "invert_matcher": {
                    "type": "boolean",
                    "description": " Invert Match of the expression defined",
                    "title": "invert_matcher",
                    "format": "boolean",
                    "x-displayname": "Invert Matcher"
                },
                "item": {
                    "description": "Exclusive with [check_not_present check_present presence]\nx-displayName: \"Match Values\"\nCriteria for matching the values for the Arg. The match is successful if any of the values in the input satisfies the criteria in the matcher.",
                    "title": "item",
                    "$ref": "#/definitions/policyMatcherType"
                },
                "name": {
                    "type": "string",
                    "description": " x-example: \"phones[_]\"\n x-example: \"cars.make.toyota.models[1]\"\n x-example: \"cars.make.honda.models[_]\"\n x-example: \"cars.make[_].models[_]\"\n A case-sensitive JSON path in the HTTP request body.\n\nExample: - \"name\"-\nRequired: YES",
                    "title": "name",
                    "x-displayname": "Argument Name",
                    "x-ves-example": "name",
                    "x-ves-required": "true"
                },
                "presence": {
                    "type": "boolean",
                    "description": "Exclusive with [check_not_present check_present item]\nx-displayName: \"Present Or Absent\"\nCheck if the arg is present or absent.",
                    "title": "presence",
                    "format": "boolean"
                }
            }
        },
        "policyAsnMatchList": {
            "type": "object",
            "description": "An unordered set of RFC 6793 defined 4-byte AS numbers that can be used to create allow or deny lists for use in network policy or service policy.",
            "title": "Asn Match List",
            "x-displayname": "ASN Match List",
            "x-ves-proto-message": "ves.io.schema.policy.AsnMatchList",
            "properties": {
                "as_numbers": {
                    "type": "array",
                    "description": " An unordered set of RFC 6793 defined 4-byte AS numbers that can be used to create allow or deny lists for use in network policy or service policy.\n\nExample: - \"[713, 7932, 847325, 4683, 15269, 1000001]\"-\nRequired: YES",
                    "title": "as numbers",
                    "items": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "x-displayname": "AS Numbers",
                    "x-ves-example": "[713, 7932, 847325, 4683, 15269, 1000001]",
                    "x-ves-required": "true"
                }
            }
        },
        "policyAsnMatcherType": {
            "type": "object",
            "description": "Match any AS number contained in the list of bgp_asn_sets.",
            "title": "asn matcher type",
            "x-displayname": "ASN Matcher",
            "x-ves-proto-message": "ves.io.schema.policy.AsnMatcherType",
            "properties": {
                "asn_sets": {
                    "type": "array",
                    "description": " A list of references to bgp_asn_set objects.\nRequired: YES",
                    "title": "asn_sets",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "BGP ASN Sets",
                    "x-ves-required": "true"
                }
            }
        },
        "policyChallengeAction": {
            "type": "string",
            "description": "The challenge options to use when a policy based challenge is configured.\n\n - DEFAULT_CHALLENGE: DEFAULT_CHALLENGE\n\nDefault challenge.\n - ENABLE_JAVASCRIPT_CHALLENGE: ENABLE_JAVASCRIPT_CHALLENGE\n\nEnable javascript challenge.\n - ENABLE_CAPTCHA_CHALLENGE: ENABLE_CAPTCHA_CHALLENGE\n\nCaptcha challenge.\n - DISABLE_CHALLENGE: DISABLE_CHALLENGE\n\nDisable challenge\n - TEMPORARY_BLOCKING: TEMPORARY_BLOCKING\n\nBlock the user temporarily.",
            "title": "Challenge Action",
            "enum": [
                "DEFAULT_CHALLENGE",
                "ENABLE_JAVASCRIPT_CHALLENGE",
                "ENABLE_CAPTCHA_CHALLENGE",
                "DISABLE_CHALLENGE",
                "TEMPORARY_BLOCKING"
            ],
            "default": "DEFAULT_CHALLENGE",
            "x-displayname": "Challenge Action",
            "x-ves-proto-enum": "ves.io.schema.policy.ChallengeAction"
        },
        "policyContentRewriteAction": {
            "type": "object",
            "description": "Rewrite HTML response action to insert HTML content such as Javascript \u003cscript\u003e tags into the HTML document",
            "title": "ContentRewriteAction",
            "x-displayname": "Content Rewrite Action",
            "x-ves-proto-message": "ves.io.schema.policy.ContentRewriteAction",
            "properties": {
                "element_selector": {
                    "type": "string",
                    "description": " Element selector to insert into.\nRequired: YES",
                    "title": "Element selector",
                    "x-displayname": "Element selector to rewrite",
                    "x-ves-required": "true"
                },
                "insert_content": {
                    "type": "string",
                    "description": " HTML content to insert.",
                    "title": "Insert Content",
                    "x-displayname": "HTML Content to insert"
                },
                "position": {
                    "description": " Position of HTML content to be inserted within HTML tag.",
                    "title": "Position",
                    "$ref": "#/definitions/policyHTMLPosition",
                    "x-displayname": "HTML position"
                }
            }
        },
        "policyCookieMatcherType": {
            "type": "object",
            "description": "A cookie matcher specifies the name of a single cookie and the criteria to match it. The input has a list of values for each\ncookie in the request.\nA cookie matcher can check for one of the following:\n* Presence or absence of the cookie\n* At least one of the values for the cookie in the request satisfies the MatcherType item",
            "title": "CookieMatcherType",
            "x-displayname": "Cookie Matcher",
            "x-ves-displayorder": "1,6,4",
            "x-ves-oneof-field-match": "[\"check_not_present\",\"check_present\",\"item\",\"presence\"]",
            "x-ves-proto-message": "ves.io.schema.policy.CookieMatcherType",
            "properties": {
                "check_not_present": {
                    "description": "Exclusive with [check_present item presence]\nx-displayName: \"Not Present\"\nCheck that the cookie is not present.",
                    "title": "check_not_present",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "check_present": {
                    "description": "Exclusive with [check_not_present item presence]\nx-displayName: \"Present\"\nCheck that the cookie is present.",
                    "title": "check_present",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "invert_matcher": {
                    "type": "boolean",
                    "description": " Invert Match of the expression defined",
                    "title": "invert_matcher",
                    "format": "boolean",
                    "x-displayname": "Invert Matcher"
                },
                "item": {
                    "description": "Exclusive with [check_not_present check_present presence]\nx-displayName: \"Match Values\"\nCriteria for matching the values for the cookie. The match is successful if any of the values in the input satisfies the criteria in the matcher.",
                    "title": "item",
                    "$ref": "#/definitions/policyMatcherType"
                },
                "name": {
                    "type": "string",
                    "description": " A case-sensitive cookie name.\n\nExample: - \"Session\"-\nRequired: YES",
                    "title": "name",
                    "x-displayname": "Cookie Name",
                    "x-ves-example": "Session",
                    "x-ves-required": "true"
                },
                "presence": {
                    "type": "boolean",
                    "description": "Exclusive with [check_not_present check_present item]\nx-displayName: \"Present Or Absent\"\nCheck if the cookie is present or absent.",
                    "title": "presence",
                    "format": "boolean"
                }
            }
        },
        "policyCountryCode": {
            "type": "string",
            "description": "ISO 3166 Aplpha-2 country codes\n",
            "title": "CountryCode",
            "enum": [
                "COUNTRY_NONE",
                "COUNTRY_AD",
                "COUNTRY_AE",
                "COUNTRY_AF",
                "COUNTRY_AG",
                "COUNTRY_AI",
                "COUNTRY_AL",
                "COUNTRY_AM",
                "COUNTRY_AN",
                "COUNTRY_AO",
                "COUNTRY_AQ",
                "COUNTRY_AR",
                "COUNTRY_AS",
                "COUNTRY_AT",
                "COUNTRY_AU",
                "COUNTRY_AW",
                "COUNTRY_AX",
                "COUNTRY_AZ",
                "COUNTRY_BA",
                "COUNTRY_BB",
                "COUNTRY_BD",
                "COUNTRY_BE",
                "COUNTRY_BF",
                "COUNTRY_BG",
                "COUNTRY_BH",
                "COUNTRY_BI",
                "COUNTRY_BJ",
                "COUNTRY_BL",
                "COUNTRY_BM",
                "COUNTRY_BN",
                "COUNTRY_BO",
                "COUNTRY_BQ",
                "COUNTRY_BR",
                "COUNTRY_BS",
                "COUNTRY_BT",
                "COUNTRY_BV",
                "COUNTRY_BW",
                "COUNTRY_BY",
                "COUNTRY_BZ",
                "COUNTRY_CA",
                "COUNTRY_CC",
                "COUNTRY_CD",
                "COUNTRY_CF",
                "COUNTRY_CG",
                "COUNTRY_CH",
                "COUNTRY_CI",
                "COUNTRY_CK",
                "COUNTRY_CL",
                "COUNTRY_CM",
                "COUNTRY_CN",
                "COUNTRY_CO",
                "COUNTRY_CR",
                "COUNTRY_CS",
                "COUNTRY_CU",
                "COUNTRY_CV",
                "COUNTRY_CW",
                "COUNTRY_CX",
                "COUNTRY_CY",
                "COUNTRY_CZ",
                "COUNTRY_DE",
                "COUNTRY_DJ",
                "COUNTRY_DK",
                "COUNTRY_DM",
                "COUNTRY_DO",
                "COUNTRY_DZ",
                "COUNTRY_EC",
                "COUNTRY_EE",
                "COUNTRY_EG",
                "COUNTRY_EH",
                "COUNTRY_ER",
                "COUNTRY_ES",
                "COUNTRY_ET",
                "COUNTRY_FI",
                "COUNTRY_FJ",
                "COUNTRY_FK",
                "COUNTRY_FM",
                "COUNTRY_FO",
                "COUNTRY_FR",
                "COUNTRY_GA",
                "COUNTRY_GB",
                "COUNTRY_GD",
                "COUNTRY_GE",
                "COUNTRY_GF",
                "COUNTRY_GG",
                "COUNTRY_GH",
                "COUNTRY_GI",
                "COUNTRY_GL",
                "COUNTRY_GM",
                "COUNTRY_GN",
                "COUNTRY_GP",
                "COUNTRY_GQ",
                "COUNTRY_GR",
                "COUNTRY_GS",
                "COUNTRY_GT",
                "COUNTRY_GU",
                "COUNTRY_GW",
                "COUNTRY_GY",
                "COUNTRY_HK",
                "COUNTRY_HM",
                "COUNTRY_HN",
                "COUNTRY_HR",
                "COUNTRY_HT",
                "COUNTRY_HU",
                "COUNTRY_ID",
                "COUNTRY_IE",
                "COUNTRY_IL",
                "COUNTRY_IM",
                "COUNTRY_IN",
                "COUNTRY_IO",
                "COUNTRY_IQ",
                "COUNTRY_IR",
                "COUNTRY_IS",
                "COUNTRY_IT",
                "COUNTRY_JE",
                "COUNTRY_JM",
                "COUNTRY_JO",
                "COUNTRY_JP",
                "COUNTRY_KE",
                "COUNTRY_KG",
                "COUNTRY_KH",
                "COUNTRY_KI",
                "COUNTRY_KM",
                "COUNTRY_KN",
                "COUNTRY_KP",
                "COUNTRY_KR",
                "COUNTRY_KW",
                "COUNTRY_KY",
                "COUNTRY_KZ",
                "COUNTRY_LA",
                "COUNTRY_LB",
                "COUNTRY_LC",
                "COUNTRY_LI",
                "COUNTRY_LK",
                "COUNTRY_LR",
                "COUNTRY_LS",
                "COUNTRY_LT",
                "COUNTRY_LU",
                "COUNTRY_LV",
                "COUNTRY_LY",
                "COUNTRY_MA",
                "COUNTRY_MC",
                "COUNTRY_MD",
                "COUNTRY_ME",
                "COUNTRY_MF",
                "COUNTRY_MG",
                "COUNTRY_MH",
                "COUNTRY_MK",
                "COUNTRY_ML",
                "COUNTRY_MM",
                "COUNTRY_MN",
                "COUNTRY_MO",
                "COUNTRY_MP",
                "COUNTRY_MQ",
                "COUNTRY_MR",
                "COUNTRY_MS",
                "COUNTRY_MT",
                "COUNTRY_MU",
                "COUNTRY_MV",
                "COUNTRY_MW",
                "COUNTRY_MX",
                "COUNTRY_MY",
                "COUNTRY_MZ",
                "COUNTRY_NA",
                "COUNTRY_NC",
                "COUNTRY_NE",
                "COUNTRY_NF",
                "COUNTRY_NG",
                "COUNTRY_NI",
                "COUNTRY_NL",
                "COUNTRY_NO",
                "COUNTRY_NP",
                "COUNTRY_NR",
                "COUNTRY_NU",
                "COUNTRY_NZ",
                "COUNTRY_OM",
                "COUNTRY_PA",
                "COUNTRY_PE",
                "COUNTRY_PF",
                "COUNTRY_PG",
                "COUNTRY_PH",
                "COUNTRY_PK",
                "COUNTRY_PL",
                "COUNTRY_PM",
                "COUNTRY_PN",
                "COUNTRY_PR",
                "COUNTRY_PS",
                "COUNTRY_PT",
                "COUNTRY_PW",
                "COUNTRY_PY",
                "COUNTRY_QA",
                "COUNTRY_RE",
                "COUNTRY_RO",
                "COUNTRY_RS",
                "COUNTRY_RU",
                "COUNTRY_RW",
                "COUNTRY_SA",
                "COUNTRY_SB",
                "COUNTRY_SC",
                "COUNTRY_SD",
                "COUNTRY_SE",
                "COUNTRY_SG",
                "COUNTRY_SH",
                "COUNTRY_SI",
                "COUNTRY_SJ",
                "COUNTRY_SK",
                "COUNTRY_SL",
                "COUNTRY_SM",
                "COUNTRY_SN",
                "COUNTRY_SO",
                "COUNTRY_SR",
                "COUNTRY_SS",
                "COUNTRY_ST",
                "COUNTRY_SV",
                "COUNTRY_SX",
                "COUNTRY_SY",
                "COUNTRY_SZ",
                "COUNTRY_TC",
                "COUNTRY_TD",
                "COUNTRY_TF",
                "COUNTRY_TG",
                "COUNTRY_TH",
                "COUNTRY_TJ",
                "COUNTRY_TK",
                "COUNTRY_TL",
                "COUNTRY_TM",
                "COUNTRY_TN",
                "COUNTRY_TO",
                "COUNTRY_TR",
                "COUNTRY_TT",
                "COUNTRY_TV",
                "COUNTRY_TW",
                "COUNTRY_TZ",
                "COUNTRY_UA",
                "COUNTRY_UG",
                "COUNTRY_UM",
                "COUNTRY_US",
                "COUNTRY_UY",
                "COUNTRY_UZ",
                "COUNTRY_VA",
                "COUNTRY_VC",
                "COUNTRY_VE",
                "COUNTRY_VG",
                "COUNTRY_VI",
                "COUNTRY_VN",
                "COUNTRY_VU",
                "COUNTRY_WF",
                "COUNTRY_WS",
                "COUNTRY_XK",
                "COUNTRY_XT",
                "COUNTRY_YE",
                "COUNTRY_YT",
                "COUNTRY_ZA",
                "COUNTRY_ZM",
                "COUNTRY_ZW"
            ],
            "default": "COUNTRY_NONE",
            "x-displayname": "Country Code",
            "x-ves-proto-enum": "ves.io.schema.policy.CountryCode"
        },
        "policyDenyInformation": {
            "type": "object",
            "description": "Detailed information including HTTP response code and error message to be sent when the policy or policy set action is DENY.",
            "title": "Deny Information",
            "x-displayname": "Deny Information",
            "x-ves-proto-message": "ves.io.schema.policy.DenyInformation",
            "properties": {
                "error_message": {
                    "type": "string",
                    "description": " An error message associated with a DENY action in a policy or policy set, that is meaningful to the end user. Note that this error message is included\n in the body but does not constitute the entire body.\n\nExample: - \"Denied because the URL path contains an unknown object type\"-",
                    "title": "error_message",
                    "x-displayname": "Error Message",
                    "x-ves-example": "Denied because the URL path contains an unknown object type"
                },
                "response_code": {
                    "type": "integer",
                    "description": " The HTTP status code to use in the response. The default code is Forbidden (403).\n\nExample: - 400-",
                    "title": "response_code",
                    "format": "int64",
                    "x-displayname": "HTTP Response Code"
                }
            }
        },
        "policyHTMLPosition": {
            "type": "string",
            "description": "Position of the HTML tag to insert in HTML document\n\nBeginning of HTML tag.\nEnd of HTML tag.\nBefore HTML tag.\nAfter HTML tag.",
            "title": "HTMLPosition",
            "enum": [
                "BEGINNING",
                "END",
                "BEFORE",
                "AFTER"
            ],
            "default": "BEGINNING",
            "x-displayname": "HTML Position",
            "x-ves-proto-enum": "ves.io.schema.policy.HTMLPosition"
        },
        "policyHttpMethodMatcherType": {
            "type": "object",
            "description": "A http method matcher specifies a list of methods to match an input HTTP method. The match is considered successful if the input method is a member of the list.\nThe result of the match based on the method list is inverted if invert_matcher is true.",
            "title": "HttpMethodMatcherType",
            "x-displayname": "HTTP Method Matcher",
            "x-ves-proto-message": "ves.io.schema.policy.HttpMethodMatcherType",
            "properties": {
                "invert_matcher": {
                    "type": "boolean",
                    "description": " Invert the match result.",
                    "title": "invert_matcher",
                    "format": "boolean",
                    "x-displayname": "Invert Method Matcher"
                },
                "methods": {
                    "type": "array",
                    "description": " List of methods values to match against.\n\nExample: - \"['GET', 'POST', 'DELETE']\"-",
                    "title": "methods",
                    "items": {
                        "$ref": "#/definitions/schemaHttpMethod"
                    },
                    "x-displayname": "Method List",
                    "x-ves-example": "['GET', 'POST', 'DELETE']"
                }
            }
        },
        "policyIpMatcherType": {
            "type": "object",
            "description": "Match any ip prefix contained in the list of ip_prefix_sets.\nThe result of the match is inverted if invert_matcher is true.",
            "title": "ip matcher type",
            "x-displayname": "IP Prefix Matcher",
            "x-ves-proto-message": "ves.io.schema.policy.IpMatcherType",
            "properties": {
                "invert_matcher": {
                    "type": "boolean",
                    "description": " Invert the match result.",
                    "title": "invert_matcher",
                    "format": "boolean",
                    "x-displayname": "Invert IP Matcher"
                },
                "prefix_sets": {
                    "type": "array",
                    "description": " A list of references to ip_prefix_set objects.\nRequired: YES",
                    "title": "prefix_sets",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "IP Prefix Sets",
                    "x-ves-required": "true"
                }
            }
        },
        "policyKnownTlsFingerprintClass": {
            "type": "string",
            "description": "Specifies known TLS fingerprint classes\n\n - TLS_FINGERPRINT_NONE: TLS_FINGERPRINT_NONE\n\nNo TLS fingerprint\n - ANY_MALICIOUS_FINGERPRINT: ANY_MALICIOUS_FINGERPRINT\n\nTLS fingerprints known to be associated with malicious clients\n - ADWARE: ADWARE\n\nTLS fingerprints known to be associated with adware\n - ADWIND: ADWIND\n\nTLS fingerprints known to be associated with adwind\n - DRIDEX: DRIDEX\n\nTLS fingerprints known to be associated with dridex\n - GOOTKIT: GOOTKIT\n\nTLS fingerprints known to be associated with gootkit\n - GOZI: GOZI\n\nTLS fingerprints known to be associated with gozi\n - JBIFROST: JBIFROST\n\nTLS fingerprints known to be associated with jbifrost\n - QUAKBOT: QUAKBOT\n\nTLS fingerprints known to be associated with quakbot\n - RANSOMWARE: RANSOMWARE\n\nTLS fingerprints known to be associated with ransomware\n - TROLDESH: TROLDESH\n\nTLS fingerprints known to be associated with troldesh\n - TOFSEE: TOFSEE\n\nTLS fingerprints known to be associated with tofsee\n - TORRENTLOCKER: TORRENTLOCKER\n\nTLS fingerprints known to be associated with torrentlocker\n - TRICKBOT: TRICKBOT\n\nTLS fingerprints known to be associated with trickbot",
            "title": "TLS known fingerprint class",
            "enum": [
                "TLS_FINGERPRINT_NONE",
                "ANY_MALICIOUS_FINGERPRINT",
                "ADWARE",
                "ADWIND",
                "DRIDEX",
                "GOOTKIT",
                "GOZI",
                "JBIFROST",
                "QUAKBOT",
                "RANSOMWARE",
                "TROLDESH",
                "TOFSEE",
                "TORRENTLOCKER",
                "TRICKBOT"
            ],
            "default": "TLS_FINGERPRINT_NONE",
            "x-displayname": "TLS known fingerprint class",
            "x-ves-proto-enum": "ves.io.schema.policy.KnownTlsFingerprintClass"
        },
        "policyL4DestMatcherType": {
            "type": "object",
            "description": "A L4 Destination matcher specifies a list of L4 Destinations as match criteria. The match is considered successful if the destination IP and port match any\nof the L4 Destinations.\nThe result of the match is inverted if invert_matcher is true.",
            "title": "l4 dest matcher type",
            "x-displayname": "L4 Destination Matcher",
            "x-ves-proto-message": "ves.io.schema.policy.L4DestMatcherType",
            "properties": {
                "invert_matcher": {
                    "type": "boolean",
                    "description": " Invert the match result.",
                    "title": "invert_matcher",
                    "format": "boolean",
                    "x-displayname": "Invert L4 Destination Matcher"
                },
                "l4_dests": {
                    "type": "array",
                    "description": " A list of L4 destinations used as match criteria. The match is considered successful if the destination IP and path match any of the L4 destinations.\nRequired: YES",
                    "title": "prefixes",
                    "items": {
                        "$ref": "#/definitions/schemaL4DestType"
                    },
                    "x-displayname": "L4 Destinations",
                    "x-ves-required": "true"
                }
            }
        },
        "policyMatcherType": {
            "type": "object",
            "description": "A matcher specifies multiple criteria for matching an input string. The match is considered successful if any of the criteria are satisfied. The set\nof supported match criteria includes a list of exact values and a list of regular expressions.",
            "title": "MatcherType",
            "x-displayname": "Matcher",
            "x-ves-proto-message": "ves.io.schema.policy.MatcherType",
            "properties": {
                "exact_values": {
                    "type": "array",
                    "description": " A list of exact values to match the input against.\n\nExample: - \"['new york', 'london', 'sydney', 'tokyo', 'cairo']\"-",
                    "title": "exact values",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Exact Values",
                    "x-ves-example": "['new york', 'london', 'sydney', 'tokyo', 'cairo']"
                },
                "regex_values": {
                    "type": "array",
                    "description": " A list of regular expressions to match the input against.\n\nExample: - \"['^new .*$', 'san f.*', '.* del .*']\"-",
                    "title": "regex values",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Regex Values",
                    "x-ves-example": "['^new .*$', 'san f.*', '.* del .*']"
                },
                "transformers": {
                    "type": "array",
                    "description": " An ordered list of transformers (starting from index 0) to be applied to the path before matching. \n\nExample: - \"[BASE64_DECODE, LOWER_CASE]-",
                    "title": "transformers",
                    "items": {
                        "$ref": "#/definitions/policyTransformer"
                    },
                    "x-displayname": "Transformers"
                }
            }
        },
        "policyMatcherTypeBasic": {
            "type": "object",
            "description": "A matcher specifies multiple criteria for matching an input string. The match is considered successful if any of the criteria are satisfied. The set\nof supported match criteria includes a list of exact values and a list of regular expressions.",
            "title": "MatcherTypeBasic",
            "x-displayname": "Matcher",
            "x-ves-proto-message": "ves.io.schema.policy.MatcherTypeBasic",
            "properties": {
                "exact_values": {
                    "type": "array",
                    "description": " A list of exact values to match the input against.\n\nExample: - \"['new york', 'london', 'sydney', 'tokyo', 'cairo']\"-",
                    "title": "exact values",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Exact Values",
                    "x-ves-example": "['new york', 'london', 'sydney', 'tokyo', 'cairo']"
                },
                "regex_values": {
                    "type": "array",
                    "description": " A list of regular expressions to match the input against.\n\nExample: - \"['^new .*$', 'san f.*', '.* del .*']\"-",
                    "title": "regex values",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Regex Values",
                    "x-ves-example": "['^new .*$', 'san f.*', '.* del .*']"
                }
            }
        },
        "policyPortMatcherType": {
            "type": "object",
            "description": "A port matcher specifies a list of port ranges as match criteria. The match is considered successful if the input port falls within any of the port ranges.\nThe result of the match is inverted if invert_matcher is true.",
            "title": "port matcher type",
            "x-displayname": "Port Matcher",
            "x-ves-proto-message": "ves.io.schema.policy.PortMatcherType",
            "properties": {
                "invert_matcher": {
                    "type": "boolean",
                    "description": " Invert the match result.",
                    "title": "invert_matcher",
                    "format": "boolean",
                    "x-displayname": "Invert Port Matcher"
                },
                "ports": {
                    "type": "array",
                    "description": " A list of strings, each of which is a single port value or a tuple of start and end port values separated by \"-\". The start and end values are considered\n to be part of the range.\n\nExample: - \"8000-8191\"-\nRequired: YES",
                    "title": "port ranges",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Port Ranges",
                    "x-ves-example": "8000-8191",
                    "x-ves-required": "true"
                }
            }
        },
        "policyPrefixMatchList": {
            "type": "object",
            "description": "List of IPv4 Prefix strings to match against.",
            "title": "Prefix Match List",
            "x-displayname": "IP Prefix Match List",
            "x-ves-proto-message": "ves.io.schema.policy.PrefixMatchList",
            "properties": {
                "invert_match": {
                    "type": "boolean",
                    "description": " Invert the match result.",
                    "title": "invert_matcher",
                    "format": "boolean",
                    "x-displayname": "Invert Match Result"
                },
                "ip_prefixes": {
                    "type": "array",
                    "description": " List of IPv4 prefix strings.\n\nExample: - \"192.168.20.0/24\"-\nRequired: YES",
                    "title": "ip prefixes",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "IP Prefix List",
                    "x-ves-example": "192.168.20.0/24",
                    "x-ves-required": "true"
                }
            }
        },
        "policyRoleMatcherType": {
            "type": "object",
            "description": "A role matcher specifies a single value for matching an input list of roles. The match is considered successful if the specified value is present in the input\nlist.",
            "title": "RoleMatcherType",
            "x-displayname": "Role Matcher",
            "x-ves-proto-message": "ves.io.schema.policy.RoleMatcherType",
            "properties": {
                "match": {
                    "type": "string",
                    "description": " x-example: \"ves-io-uam-role\"\n x-example: \"custom-role-security-czar'\"\n Value of the expected role.\n\nExample: - \"ves-io-monitor-role\"-\nRequired: YES",
                    "title": "match",
                    "x-displayname": "Role",
                    "x-ves-example": "ves-io-monitor-role",
                    "x-ves-required": "true"
                }
            }
        },
        "policyRuleAction": {
            "type": "string",
            "description": "The rule action determines the disposition of the input request API. If a policy matches a rule with an ALLOW action, the processing of the request proceeds\nforward. If it matches a rule with a DENY action, the processing of the request is terminated and an appropriate message/code returned to the originator. If\nit matches a rule with a NEXT_POLICY_SET action, evaluation of the current policy set terminates and evaluation of the next policy set in the chain begins.\n\n - DENY: DENY\n\nDeny the request.\n - ALLOW: ALLOW\n\nAllow the request to proceed.\n - NEXT_POLICY_SET: NEXT_POLICY_SET\n\nTerminate evaluation of the current policy set and begin evaluating the next policy set in the chain. Note that the evaluation of any remaining policies\nin the current policy set is skipped.\n - NEXT_POLICY: NEXT_POLICY\n\nTerminate evaluation of the current policy and begin evaluating the next policy in the policy set. Note that the evaluation of any remaining rules in the\ncurrent policy is skipped.\n - LAST_POLICY: LAST_POLICY\n\nTerminate evaluation of the current policy and begin evaluating the last policy in the policy set. Note that the evaluation of any remaining rules in the\ncurrent policy is skipped.\n - GOTO_POLICY: GOTO_POLICY\n\nTerminate evaluation of the current policy and begin evaluating a specific policy in the policy set. The policy is specified using the goto_policy field in\nthe rule and must be after the current policy in the policy set.",
            "title": "Rule Action",
            "enum": [
                "DENY",
                "ALLOW",
                "NEXT_POLICY_SET",
                "NEXT_POLICY",
                "LAST_POLICY",
                "GOTO_POLICY"
            ],
            "default": "DENY",
            "x-displayname": "Rule Action",
            "x-ves-proto-enum": "ves.io.schema.policy.RuleAction"
        },
        "policyRuleCombiningAlgorithm": {
            "type": "string",
            "description": "The rule combining algorithm for a policy determines how the list of rules in the policy is evaluated.\nIf any of the rules is configured with a App Firewall action, the rule combining algorithm must be configured to be FIRST_MATCH.\n\n- FIRST_MATCH Rules are evaluated sequentially till a matching rule is identified\n- ALLOW_OVERRIDES Rules with an ALLOW action are evaluated prior to rules with a DENY action\n- DENY_OVERRIDES Rules with a DENY action are evaluated prior to rules with an ALLOW action\n\n - FIRST_MATCH: First Match\n\nRules are evaluated sequentially till a matching rule is identified\n - DENY_OVERRIDES: Deny Overrides\n\nRules with a DENY action are evaluated prior to rules with an ALLOW action\n - ALLOW_OVERRIDES: Allow Overrides\n\nRules with an ALLOW action are evaluated prior to rules with a DENY action",
            "title": "RuleCombiningAlgorithm",
            "enum": [
                "FIRST_MATCH",
                "DENY_OVERRIDES",
                "ALLOW_OVERRIDES"
            ],
            "default": "FIRST_MATCH",
            "x-displayname": "Rule Combining Algorithm",
            "x-ves-proto-enum": "ves.io.schema.policy.RuleCombiningAlgorithm"
        },
        "policyShapeBotBlockMitigationActionType": {
            "type": "object",
            "description": "Block request and respond with custom content.",
            "title": "ShapeBotBlockMitigationActionType",
            "x-displayname": "Block bot mitigation",
            "x-ves-proto-message": "ves.io.schema.policy.ShapeBotBlockMitigationActionType",
            "properties": {
                "body": {
                    "type": "string",
                    "description": " Custom body message is of type uri_ref. Currently supported URL schemes is string:///.\n For string:/// scheme, message needs to be encoded in Base64 format.\n You can specify this message as base64 encoded plain text message e.g. \"Your request was blocked\"\n or it can be HTML paragraph or a body string encoded as base64 string\n E.g. \"\u003cp\u003e Your request was blocked \u003c/p\u003e\". Base64 encoded string for this html is \"LzxwPiBZb3VyIHJlcXVlc3Qgd2FzIGJsb2NrZWQgPC9wPg==\"\n\nExample: - \"string://LzxwPiBZb3VyIHJlcXVlc3Qgd2FzIGJsb2NrZWQgPC9wPg==\"-",
                    "title": "body",
                    "x-displayname": "Body",
                    "x-ves-example": "string://LzxwPiBZb3VyIHJlcXVlc3Qgd2FzIGJsb2NrZWQgPC9wPg=="
                },
                "status": {
                    "description": " HTTP Status code to respond with",
                    "title": "Status",
                    "$ref": "#/definitions/schemaHttpStatusCode",
                    "x-displayname": "Status"
                }
            }
        },
        "policyShapeBotMitigationAction": {
            "type": "object",
            "description": "Modify Shape Bot  behavior for a matching request.",
            "title": "ShapeBotMitigationAction",
            "x-displayname": "Shape Bot Mitigation Action",
            "x-ves-oneof-field-action_type": "[\"alert\",\"block\",\"drop\",\"none\",\"redirect\"]",
            "x-ves-proto-message": "ves.io.schema.policy.ShapeBotMitigationAction",
            "properties": {
                "alert": {
                    "description": "Exclusive with [block drop none redirect]\nx-displayName: \"Alert\"\nGenerate alert while not taking any invasive actions.",
                    "title": "Alert Only",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "block": {
                    "description": "Exclusive with [alert drop none redirect]\nx-displayName: \"Block\"\nBlock bot request and send response with custom content.",
                    "title": "Block",
                    "$ref": "#/definitions/policyShapeBotBlockMitigationActionType"
                },
                "drop": {
                    "description": "Exclusive with [alert block none redirect]\nx-displayName: \"Drop\"\nDrop network connection.",
                    "title": "Drop",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "none": {
                    "description": "Exclusive with [alert block drop redirect]\nx-displayName: \"No Action\"\nNo mitigation actions.",
                    "title": "None",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "redirect": {
                    "description": "Exclusive with [alert block drop none]\nx-displayName: \"Redirect\"\nRedirect bot request to a custom URI.",
                    "title": "Redirect",
                    "$ref": "#/definitions/policyShapeBotRedirectMitigationActionType"
                }
            }
        },
        "policyShapeBotRedirectMitigationActionType": {
            "type": "object",
            "description": "Redirect request to a custom URI.",
            "title": "ShapeBotRedirectMitigationTypeAction",
            "x-displayname": "Redirect bot mitigation",
            "x-ves-proto-message": "ves.io.schema.policy.ShapeBotRedirectMitigationActionType",
            "properties": {
                "uri": {
                    "type": "string",
                    "description": " URI location for redirect may be relative or absolute.",
                    "title": "URI",
                    "x-displayname": "URI"
                }
            }
        },
        "policyShapeProtectedEndpointAction": {
            "type": "object",
            "description": "Shape Protected Endpoint Action",
            "title": "ShapeProtectedEndpointAction",
            "x-displayname": "Shape Protected Endpoint Action",
            "x-ves-proto-message": "ves.io.schema.policy.ShapeProtectedEndpointAction",
            "properties": {
                "app_traffic_type": {
                    "description": " Traffic type\nRequired: YES",
                    "title": "Application traffic type",
                    "$ref": "#/definitions/policyAppTrafficType",
                    "x-displayname": "Traffic type",
                    "x-ves-required": "true"
                },
                "mitigation": {
                    "description": " Mitigation action for shape protected endpoint\nRequired: YES",
                    "title": "Mitigation",
                    "$ref": "#/definitions/policyShapeBotMitigationAction",
                    "x-displayname": "Mitigation",
                    "x-ves-required": "true"
                }
            }
        },
        "policyStringMatcherType": {
            "type": "object",
            "description": "A matcher specifies a list of values for matching an input string. The match is considered successful if the input value is present in the list. The result of\nthe match is inverted if invert_matcher is true.",
            "title": "StringMatcherType",
            "x-displayname": "String Matcher",
            "x-ves-proto-message": "ves.io.schema.policy.StringMatcherType",
            "properties": {
                "invert_matcher": {
                    "type": "boolean",
                    "description": " Invert the match result.",
                    "title": "invert_matcher",
                    "format": "boolean",
                    "x-displayname": "Invert String Matcher"
                },
                "match": {
                    "type": "array",
                    "description": " A list of exact values to match the input against.\n\nExample: - \"['new york', 'london', 'sydney', 'tokyo', 'cairo']\"-\nRequired: YES",
                    "title": "match",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Exact Values",
                    "x-ves-example": "['new york', 'london', 'sydney', 'tokyo', 'cairo']",
                    "x-ves-required": "true"
                }
            }
        },
        "policyTlsFingerprintMatcherType": {
            "type": "object",
            "description": "A TLS fingerprint matcher specifies multiple criteria for matching a TLS fingerprint. The set of supported positve match criteria includes a list of known\nclasses of TLS fingerprints and a list of exact values. The match is considered successful if either of these positive criteria are satisfied and the input\nfingerprint is not one of the excluded values.",
            "title": "TlsFingerprintMatcherType",
            "x-displayname": "TLS Fingerprint Matcher",
            "x-ves-proto-message": "ves.io.schema.policy.TlsFingerprintMatcherType",
            "properties": {
                "classes": {
                    "type": "array",
                    "description": " A list of known classes of TLS fingerprints to match the input TLS JA3 fingerprint against.\n\nExample: - \"['ADWARE', 'TRICKBOT']-",
                    "title": "classes",
                    "items": {
                        "$ref": "#/definitions/policyKnownTlsFingerprintClass"
                    },
                    "x-displayname": "TLS fingerprint classes"
                },
                "exact_values": {
                    "type": "array",
                    "description": " A list of exact TLS JA3 fingerprints to match the input TLS JA3 fingerprint against.\n\nExample: - \"['ed6dfd54b01ebe31b7a65b88abfa7297', '16efcf0e00504ddfedde13bfea997952', 'de364c46b0dfc283b5e38c79ceae3f8f']\"-",
                    "title": "exact values",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Exact Values",
                    "x-ves-example": "['ed6dfd54b01ebe31b7a65b88abfa7297', '16efcf0e00504ddfedde13bfea997952', 'de364c46b0dfc283b5e38c79ceae3f8f']"
                },
                "excluded_values": {
                    "type": "array",
                    "description": " A list of TLS JA3 fingerprints to be excluded when matching the input TLS JA3 fingerprint. This can be used to skip known false positives when using one\n or more known TLS fingerprint classes in the enclosing matcher.\n\nExample: - \"['fb00055a1196aeea8d1bc609885ba953', 'b386946a5a44d1ddcc843bc75336dfce']\"-",
                    "title": "excluded values",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Excluded Values",
                    "x-ves-example": "['fb00055a1196aeea8d1bc609885ba953', 'b386946a5a44d1ddcc843bc75336dfce']"
                }
            }
        },
        "policyTransformer": {
            "type": "string",
            "description": "Transformers to be applied on the part of the request before matching.\n\n - TRANSFORMER_NONE: transformer none\n\nNo transformers enabled\n - LOWER_CASE: lower case\n\nConvert string to lower case\n - UPPER_CASE: upper case\n\nConvert string to upper case\n - BASE64_DECODE: base64 decode\n\nDecode string assuming base64 encoding\n - NORMALIZE_PATH: normalize path\n\nNormalize URL path so that /a/b/../c will be transformed to /a/c\n - REMOVE_WHITESPACE: remove whitespace\n\nRemove whitespaces\n - URL_DECODE: URL decode\n\nDecode string assuming URL encoding as per rfc1738\n - TRIM_LEFT: trim left\n\nRemove whitespace from the left side of the input string\n - TRIM_RIGHT: trim right\n\nRemove whitespace from the right side of the input string\n - TRIM: trim\n\nRemove whitespace from the both sides of the input string",
            "title": "Transformer",
            "enum": [
                "TRANSFORMER_NONE",
                "LOWER_CASE",
                "UPPER_CASE",
                "BASE64_DECODE",
                "NORMALIZE_PATH",
                "REMOVE_WHITESPACE",
                "URL_DECODE",
                "TRIM_LEFT",
                "TRIM_RIGHT",
                "TRIM"
            ],
            "default": "TRANSFORMER_NONE",
            "x-displayname": "Transformer",
            "x-ves-proto-enum": "ves.io.schema.policy.Transformer"
        },
        "policyURLItem": {
            "type": "object",
            "description": "A URL item specifies exact or regular expression match criteria for the domain and path.",
            "title": "url item",
            "x-displayname": "URL Item",
            "x-ves-displayorder": "1,4",
            "x-ves-oneof-field-domain_choice": "[\"domain_regex\",\"domain_value\"]",
            "x-ves-oneof-field-path_choice": "[\"path_prefix\",\"path_regex\",\"path_value\"]",
            "x-ves-proto-message": "ves.io.schema.policy.URLItem",
            "properties": {
                "domain_regex": {
                    "type": "string",
                    "description": "Exclusive with [domain_value]\nx-displayName: \"Domain Regex\"\nx-example: \"*.mybloggingwebsite.org\"\nA regular expression to match the domain against.",
                    "title": "domain regex"
                },
                "domain_value": {
                    "type": "string",
                    "description": "Exclusive with [domain_regex]\nx-displayName: \"Domain Value\"\nx-example: \"www.mybloggingwebsite.org\"\nAn exact value to match the domain against.",
                    "title": "domain value"
                },
                "path_prefix": {
                    "type": "string",
                    "description": "Exclusive with [path_regex path_value]\nx-displayName: \"Path Prefix\"\nx-example: \"/api/web/namespaces/project179/users/\"\nAn prefix value to match the path against.",
                    "title": "path prefix"
                },
                "path_regex": {
                    "type": "string",
                    "description": "Exclusive with [path_prefix path_value]\nx-displayName: \"Path Regex\"\nx-example: \"^/api/web/namespaces/abc/users/([a-z]([-a-z0-9]*[a-z0-9])?)$\"\nA regular expression to match the path against.",
                    "title": "path regex"
                },
                "path_value": {
                    "type": "string",
                    "description": "Exclusive with [path_prefix path_regex]\nx-displayName: \"Path Value\"\nx-example: \"/api/web/namespaces/project179/users/user1\"\nAn exact value to match the path against.",
                    "title": "path value"
                }
            }
        },
        "policyURLMatcherType": {
            "type": "object",
            "description": "A URL matcher specifies a list of URL items as match criteria. The match is considered successful if the input domain and path match any of the URL items.\nThe result of the match is inverted if invert_matcher is true.",
            "title": "url matcher type",
            "x-displayname": "URL Matcher",
            "x-ves-proto-message": "ves.io.schema.policy.URLMatcherType",
            "properties": {
                "invert_matcher": {
                    "type": "boolean",
                    "description": " Invert the match result.",
                    "title": "invert_matcher",
                    "format": "boolean",
                    "x-displayname": "Invert URL Matcher"
                },
                "url_items": {
                    "type": "array",
                    "description": " A list of URL items used as match criteria. The match is considered successful if the domain and path match any of the URL items.\nRequired: YES",
                    "title": "url items",
                    "items": {
                        "$ref": "#/definitions/policyURLItem"
                    },
                    "x-displayname": "URL Items",
                    "x-ves-required": "true"
                }
            }
        },
        "policyWafAction": {
            "type": "object",
            "description": "Modify App Firewall behavior for a matching request. The modification could either be to entirely skip firewall processing or to customize the firewall rules\nto be applied as defined by App Firewall Rule Control settings.",
            "title": "App Firewall Action",
            "x-displayname": "App Firewall Action",
            "x-ves-oneof-field-action_type": "[\"app_firewall_detection_control\",\"none\",\"waf_in_monitoring_mode\",\"waf_inline_rule_control\",\"waf_rule_control\",\"waf_skip_processing\"]",
            "x-ves-proto-message": "ves.io.schema.policy.WafAction",
            "properties": {
                "app_firewall_detection_control": {
                    "description": "Exclusive with [none waf_in_monitoring_mode waf_inline_rule_control waf_rule_control waf_skip_processing]\nx-displayName: \"App Firewall Detection Control\"\nApp Firewall detection changes to be applied for this request",
                    "title": "App Firewall Detection control",
                    "$ref": "#/definitions/policyAppFirewallDetectionControl"
                },
                "none": {
                    "description": "Exclusive with [app_firewall_detection_control waf_in_monitoring_mode waf_inline_rule_control waf_rule_control waf_skip_processing]\nx-displayName: \"Do not modify App Firewall Processing\"\nPerform normal App Firewall processing for this request",
                    "title": "Normal App Firewall Processing",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "waf_in_monitoring_mode": {
                    "description": "Exclusive with [app_firewall_detection_control none waf_inline_rule_control waf_rule_control waf_skip_processing]\nx-displayName: \"Set App Firewall in Monitoring Mode\"\nApp Firewall will run in monitoring mode without blocking the request",
                    "title": "Set App Firewall in Monitoring Mode",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "waf_inline_rule_control": {
                    "description": "Exclusive with [app_firewall_detection_control none waf_in_monitoring_mode waf_rule_control waf_skip_processing]\nx-displayName: \"App Firewall Rule Control with inline Rule IDs\"\nApp Firewall rule changes to be applied for this request",
                    "title": "App Firewall Rule Control with inline Rule IDs",
                    "$ref": "#/definitions/policyWafInlineRuleControl"
                },
                "waf_rule_control": {
                    "description": "Exclusive with [app_firewall_detection_control none waf_in_monitoring_mode waf_inline_rule_control waf_skip_processing]\nx-displayName: \"App Firewall Rule Control\"\nApp Firewall rule changes to be applied for this request",
                    "title": "App Firewall Rule Control",
                    "$ref": "#/definitions/policyWafRuleControl"
                },
                "waf_skip_processing": {
                    "description": "Exclusive with [app_firewall_detection_control none waf_in_monitoring_mode waf_inline_rule_control waf_rule_control]\nx-displayName: \"Skip App Firewall Processing\"\nSkip all App Firewall processing for this request",
                    "title": "Skip App Firewall Processing",
                    "$ref": "#/definitions/ioschemaEmpty"
                }
            }
        },
        "policyWafInlineRuleControl": {
            "type": "object",
            "description": "App Firewall rule changes to be applied for this request",
            "title": "App Firewall Rule Control with inline Rule IDs",
            "x-displayname": "App Firewall Rule Control with inline Rule IDs",
            "x-ves-proto-message": "ves.io.schema.policy.WafInlineRuleControl",
            "properties": {
                "exclude_rule_ids": {
                    "type": "array",
                    "description": " App Firewall Rule IDs to be excluded for this request",
                    "title": "Exclude Rule IDs",
                    "items": {
                        "$ref": "#/definitions/waf_rule_listWafRuleID"
                    },
                    "x-displayname": "Exclude App Firewall Rule IDs"
                },
                "monitoring_mode": {
                    "type": "boolean",
                    "description": " App Firewall will run in monitoring mode without blocking the request",
                    "title": "Set App Firewall in Monitoring Mode",
                    "format": "boolean",
                    "x-displayname": "Set App Firewall in Monitoring Mode"
                }
            }
        },
        "policyWafRuleControl": {
            "type": "object",
            "description": "App Firewall rule changes to be applied for this request",
            "title": "App Firewall Rule Control",
            "x-displayname": "App Firewall Rule Control",
            "x-ves-proto-message": "ves.io.schema.policy.WafRuleControl",
            "properties": {
                "exclude_rule_ids": {
                    "type": "array",
                    "description": " App Firewall Rule List specifying the rule IDs to be excluded for this request",
                    "title": "Exclude Rule IDs",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Exclude App Firewall Rule List"
                },
                "monitoring_mode": {
                    "type": "boolean",
                    "description": " App Firewall will run in monitoring mode without blocking the request",
                    "title": "Set App Firewall in Monitoring Mode",
                    "format": "boolean",
                    "x-displayname": "Set App Firewall in Monitoring Mode"
                }
            }
        },
        "protobufAny": {
            "type": "object",
            "description": "-Any- contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := \u0026pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an -Any- value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field -@type- which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n-value- which holds the custom JSON in addition to the -@type-\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }",
            "properties": {
                "type_url": {
                    "type": "string",
                    "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n-path/google.protobuf.Duration-). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme -http-, -https-, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, -https- is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than -http-, -https- (or the empty scheme) might be\nused with implementation specific semantics."
                },
                "value": {
                    "type": "string",
                    "description": "Must be a valid serialized protocol buffer of the above specified type.",
                    "format": "byte"
                }
            }
        },
        "schemaAppFirewallViolationType": {
            "type": "string",
            "description": "List of all Violation Types\n",
            "title": "App Firewall Violation Type",
            "enum": [
                "VIOL_NONE",
                "VIOL_FILETYPE",
                "VIOL_METHOD",
                "VIOL_MANDATORY_HEADER",
                "VIOL_HTTP_RESPONSE_STATUS",
                "VIOL_REQUEST_MAX_LENGTH",
                "VIOL_FILE_UPLOAD",
                "VIOL_FILE_UPLOAD_IN_BODY",
                "VIOL_XML_MALFORMED",
                "VIOL_JSON_MALFORMED",
                "VIOL_ASM_COOKIE_MODIFIED",
                "VIOL_HTTP_PROTOCOL_MULTIPLE_HOST_HEADERS",
                "VIOL_HTTP_PROTOCOL_CHECK_MAXIMUM_NUMBER_OF_PARAMETERS",
                "VIOL_HTTP_PROTOCOL_BAD_HOST_HEADER_VALUE",
                "VIOL_HTTP_PROTOCOL_CHECK_MAXIMUM_NUMBER_OF_HEADERS",
                "VIOL_HTTP_PROTOCOL_UNPARSABLE_REQUEST_CONTENT",
                "VIOL_HTTP_PROTOCOL_HIGH_ASCII_CHARACTERS_IN_HEADERS",
                "VIOL_HTTP_PROTOCOL_NULL_IN_REQUEST",
                "VIOL_HTTP_PROTOCOL_BAD_HTTP_VERSION",
                "VIOL_HTTP_PROTOCOL_CONTENT_LENGTH_SHOULD_BE_A_POSITIVE_NUMBER",
                "VIOL_HTTP_PROTOCOL_HOST_HEADER_CONTAINS_IP_ADDRESS",
                "VIOL_HTTP_PROTOCOL_CRLF_CHARACTERS_BEFORE_REQUEST_START",
                "VIOL_HTTP_PROTOCOL_NO_HOST_HEADER_IN_HTTP_1_1_REQUEST",
                "VIOL_HTTP_PROTOCOL_BAD_MULTIPART_PARAMETERS_PARSING",
                "VIOL_HTTP_PROTOCOL_BAD_MULTIPART_FORM_DATA_REQUEST_PARSING",
                "VIOL_HTTP_PROTOCOL_BODY_IN_GET_OR_HEAD_REQUESTS",
                "VIOL_HTTP_PROTOCOL_CHUNKED_REQUEST_WITH_CONTENT_LENGTH_HEADER",
                "VIOL_HTTP_PROTOCOL_SEVERAL_CONTENT_LENGTH_HEADERS",
                "VIOL_HTTP_PROTOCOL_HEADER_NAME_WITH_NO_HEADER_VALUE",
                "VIOL_HTTP_PROTOCOL_POST_REQUEST_WITH_CONTENT_LENGTH_0",
                "VIOL_EVASION_BAD_UNESCAPE",
                "VIOL_EVASION_APACHE_WHITESPACE",
                "VIOL_EVASION_BARE_BYTE_DECODING",
                "VIOL_EVASION_IIS_UNICODE_CODEPOINTS",
                "VIOL_EVASION_IIS_BACKSLASHES",
                "VIOL_EVASION_U_DECODING",
                "VIOL_EVASION_MULTIPLE_DECODING",
                "VIOL_EVASION_DIRECTORY_TRAVERSALS"
            ],
            "default": "VIOL_NONE",
            "x-displayname": "App Firewall Violation Type",
            "x-ves-proto-enum": "ves.io.schema.AppFirewallViolationType"
        },
        "schemaConditionType": {
            "type": "object",
            "description": "Conditions are used in the object status to describe the current state of the\nobject, e.g. Ready, Succeeded, etc.",
            "title": "ConditionType",
            "x-displayname": "Status Condition",
            "x-ves-proto-message": "ves.io.schema.ConditionType",
            "properties": {
                "hostname": {
                    "type": "string",
                    "description": " Hostname of the instance of the site that sent the status",
                    "title": "hostname",
                    "x-displayname": "Hostname"
                },
                "last_update_time": {
                    "type": "string",
                    "description": " Last time the condition was updated",
                    "title": "last_update_time",
                    "format": "date-time",
                    "x-displayname": "Last Updated"
                },
                "reason": {
                    "type": "string",
                    "description": " x-reason: \"Insufficient memory in data plane\"\n A human readable string explaining the reason for reaching this condition\n\nExample: - \"value\"-",
                    "title": "reason",
                    "x-displayname": "Reason",
                    "x-ves-example": "value"
                },
                "service_name": {
                    "type": "string",
                    "description": " Name of the service that sent the status",
                    "title": "service name",
                    "x-displayname": "Service Name"
                },
                "status": {
                    "type": "string",
                    "description": " Status of the condition\n \"Success\" Validtion has succeded. Requested operation was successful.\n \"Failed\"  Validation has failed. \n \"Incomplete\" Validation of configuration has failed due to missing configuration.\n \"Installed\" Validation has passed and configuration has been installed in data path or K8s\n \"Down\" Configuration is operationally down. e.g. down interface\n \"Disabled\" Configuration is administratively disabled i.e. ObjectMetaType.Disable = true.\n \"NotApplicable\" Configuration is not applicable e.g. tenant service_policy_set(s) in system namespace are not applicable on REs\n\nExample: - \"Failed\"-",
                    "title": "status",
                    "x-displayname": "Status",
                    "x-ves-example": "Failed"
                },
                "type": {
                    "type": "string",
                    "description": " Type of the condition\n \"Validation\" represents validation user given configuration object\n \"Operational\" represents operational status of a given configuration object\n\nExample: - \"Operational\"-",
                    "title": "type",
                    "x-displayname": "Type",
                    "x-ves-example": "Operational"
                }
            }
        },
        "schemaErrorCode": {
            "type": "string",
            "description": "Union of all possible error-codes from system\n\n - EOK: No error\n - EPERMS: Permissions error\n - EBADINPUT: Input is not correct\n - ENOTFOUND: Not found\n - EEXISTS: Already exists\n - EUNKNOWN: Unknown/catchall error\n - ESERIALIZE: Error in serializing/de-serializing\n - EINTERNAL: Server error",
            "title": "ErrorCode",
            "enum": [
                "EOK",
                "EPERMS",
                "EBADINPUT",
                "ENOTFOUND",
                "EEXISTS",
                "EUNKNOWN",
                "ESERIALIZE",
                "EINTERNAL"
            ],
            "default": "EOK",
            "x-displayname": "Error Code",
            "x-ves-proto-enum": "ves.io.schema.ErrorCode"
        },
        "schemaErrorType": {
            "type": "object",
            "description": "Information about a error in API operation",
            "title": "ErrorType",
            "x-displayname": "Error Type",
            "x-ves-proto-message": "ves.io.schema.ErrorType",
            "properties": {
                "code": {
                    "description": " A simple general code by category",
                    "title": "code",
                    "$ref": "#/definitions/schemaErrorCode",
                    "x-displayname": "Code"
                },
                "error_obj": {
                    "description": " A structured error object for machine parsing",
                    "title": "error_obj",
                    "$ref": "#/definitions/protobufAny",
                    "x-displayname": "Error Object"
                },
                "message": {
                    "type": "string",
                    "description": " A human readable string of the error\n\nExample: - \"value\"-",
                    "title": "message",
                    "x-displayname": "Message",
                    "x-ves-example": "value"
                }
            }
        },
        "schemaHttpMethod": {
            "type": "string",
            "description": "Specifies the HTTP method used to acess a resource.\n\nAny HTTP Method\nGET method\nHEAD method\nPOST method\nPUT method\nDELETE method\nCONNECT method\nOPTIONS method\nTRACE method\nPATCH method",
            "title": "HttpMethod",
            "enum": [
                "ANY",
                "GET",
                "HEAD",
                "POST",
                "PUT",
                "DELETE",
                "CONNECT",
                "OPTIONS",
                "TRACE",
                "PATCH"
            ],
            "default": "ANY",
            "x-displayname": "HTTP Method",
            "x-ves-proto-enum": "ves.io.schema.HttpMethod"
        },
        "schemaHttpStatusCode": {
            "type": "string",
            "description": "HTTP response status codes\n\nEmptyStatusCode response codes means it is not specified\nCONTINUE code\nOK code\nCreated status code\nAccepted status code\nNonAuthoritativeInformation status code\nNoContent status code\nResetContent status code\nPartialContent status code\nMultiStatus status code\nAlreadyReported status code\nIMUsed status code\nMultipleChoices status code\nMovedPermanently status code\nFound status code\nSeeOther status code\nNotModified status code\nUseProxy status code\nTemporaryRedirect status code\nPermanentRedirect status code\nBadRequest status code\nUnauthorized status code\nPaymentRequired status code\nForbidden status code\nNotFound status code\nMethodNotAllowed status code\nNotAcceptable status code\nProxyAuthenticationRequired status code\nRequestTimeout status code\nConflict status code\nGone status code\nLengthRequired status code\nPreconditionFailed status code\nPayloadTooLarge status code\nURITooLong status code\nUnsupportedMediaType status code\nRangeNotSatisfiable status code\nExpectationFailed status code\nMisdirectedRequest status code\nUnprocessableEntity status code\nLocked status code\nFailedDependency status code\nUpgradeRequired status code\nPreconditionRequired status code\nTooManyRequests status code\nRequestHeaderFieldsTooLarge status code\nInternalServerError status code\nNotImplemented status code\nBadGateway status code\nServiceUnavailable status code\nGatewayTimeout status code\nHTTPVersionNotSupported status code\nVariantAlsoNegotiates status code\nInsufficientStorage status code\nLoopDetected status code\nNotExtended status code\nNetworkAuthenticationRequired status code",
            "title": "HttpStatusCode",
            "enum": [
                "EmptyStatusCode",
                "Continue",
                "OK",
                "Created",
                "Accepted",
                "NonAuthoritativeInformation",
                "NoContent",
                "ResetContent",
                "PartialContent",
                "MultiStatus",
                "AlreadyReported",
                "IMUsed",
                "MultipleChoices",
                "MovedPermanently",
                "Found",
                "SeeOther",
                "NotModified",
                "UseProxy",
                "TemporaryRedirect",
                "PermanentRedirect",
                "BadRequest",
                "Unauthorized",
                "PaymentRequired",
                "Forbidden",
                "NotFound",
                "MethodNotAllowed",
                "NotAcceptable",
                "ProxyAuthenticationRequired",
                "RequestTimeout",
                "Conflict",
                "Gone",
                "LengthRequired",
                "PreconditionFailed",
                "PayloadTooLarge",
                "URITooLong",
                "UnsupportedMediaType",
                "RangeNotSatisfiable",
                "ExpectationFailed",
                "MisdirectedRequest",
                "UnprocessableEntity",
                "Locked",
                "FailedDependency",
                "UpgradeRequired",
                "PreconditionRequired",
                "TooManyRequests",
                "RequestHeaderFieldsTooLarge",
                "InternalServerError",
                "NotImplemented",
                "BadGateway",
                "ServiceUnavailable",
                "GatewayTimeout",
                "HTTPVersionNotSupported",
                "VariantAlsoNegotiates",
                "InsufficientStorage",
                "LoopDetected",
                "NotExtended",
                "NetworkAuthenticationRequired"
            ],
            "default": "EmptyStatusCode",
            "x-displayname": "HTTP Status Code",
            "x-ves-proto-enum": "ves.io.schema.HttpStatusCode"
        },
        "schemaInitializerType": {
            "type": "object",
            "description": "Initializer is information about an initializer that has not yet completed.",
            "title": "InitializerType",
            "x-displayname": "Initializer",
            "x-ves-proto-message": "ves.io.schema.InitializerType",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " name of the service that is responsible for initializing this object.",
                    "title": "name",
                    "x-displayname": "Name"
                }
            }
        },
        "schemaInitializersType": {
            "type": "object",
            "description": "Initializers tracks the progress of initialization of a configuration object",
            "title": "InitializersType",
            "x-displayname": "Initializers",
            "x-ves-proto-message": "ves.io.schema.InitializersType",
            "properties": {
                "pending": {
                    "type": "array",
                    "description": " Pending is a list of initializers that must execute in order before this object is initialized.\n When the last pending initializer is removed, and no failing result is set, the initializers\n struct will be set to nil and the object is considered as initialized and visible to all\n clients.",
                    "title": "pending",
                    "items": {
                        "$ref": "#/definitions/schemaInitializerType"
                    },
                    "x-displayname": "Pending"
                },
                "result": {
                    "description": " If result is set with the Failure field, the object will be persisted to storage and then deleted,\n ensuring that other clients can observe the deletion.",
                    "title": "result",
                    "$ref": "#/definitions/schemaStatusType",
                    "x-displayname": "Result"
                }
            }
        },
        "schemaL4DestType": {
            "type": "object",
            "description": "L4 Destination consisting of IPv4 Prefixes and TCP Port Range",
            "title": "L4 Dest Type",
            "x-displayname": "L4 Destination",
            "x-ves-proto-message": "ves.io.schema.L4DestType",
            "properties": {
                "port_ranges": {
                    "type": "string",
                    "description": " A string containing a comma separated list of port ranges.\n Each port range consists of a single port or two ports separated by \"-\".\n\nExample: - \"80,443,8080-8191,9080\"-",
                    "title": "port_ranges",
                    "x-displayname": "Port Ranges",
                    "x-ves-example": "80,443,8080-8191,9080"
                },
                "prefixes": {
                    "type": "array",
                    "description": " Destination IPv4 prefixes.\nRequired: YES",
                    "title": "prefixes",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "IPv4 Prefixes",
                    "x-ves-required": "true"
                }
            }
        },
        "schemaLabelMatcherType": {
            "type": "object",
            "description": "A label matcher specifies a list of label keys whose values need to match for\nsource/client and destination/server. Note that the actual label values are not\nspecified and do not matter. This allows an ability to scope grouping by the \nlabel key name.",
            "title": "LabelMatcherType",
            "x-displayname": "Label Matcher",
            "x-ves-proto-message": "ves.io.schema.LabelMatcherType",
            "properties": {
                "keys": {
                    "type": "array",
                    "description": " The list of label key names that have to match\n\nExample: - \"['environment', 'location', 'deployment']\"-",
                    "title": "keys",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Keys",
                    "x-ves-example": "['environment', 'location', 'deployment']"
                }
            }
        },
        "schemaLabelSelectorType": {
            "type": "object",
            "description": "This type can be used to establish a 'selector reference' from one object(called selector) to \na set of other objects(called selectees) based on the value of expresssions. \nA label selector is a label query over a set of resources. An empty label selector matches all objects. \nA null label selector matches no objects. Label selector is immutable.\nexpressions is a list of strings of label selection expression. \nEach string has \",\" separated values which are \"AND\" and all strings are logically \"OR\".\nBNF for expression string\n\u003cselector-syntax\u003e         ::= \u003crequirement\u003e | \u003crequirement\u003e \",\" \u003cselector-syntax\u003e\n\u003crequirement\u003e             ::= [!] KEY [ \u003cset-based-restriction\u003e | \u003cexact-match-restriction\u003e ]\n\u003cset-based-restriction\u003e   ::= \"\" | \u003cinclusion-exclusion\u003e \u003cvalue-set\u003e\n\u003cinclusion-exclusion\u003e     ::= \u003cinclusion\u003e | \u003cexclusion\u003e\n\u003cexclusion\u003e               ::= \"notin\"\n\u003cinclusion\u003e               ::= \"in\"\n\u003cvalue-set\u003e               ::= \"(\" \u003cvalues\u003e \")\"\n\u003cvalues\u003e                  ::= VALUE | VALUE \",\" \u003cvalues\u003e\n\u003cexact-match-restriction\u003e ::= [\"=\"|\"==\"|\"!=\"] VALUE",
            "title": "LabelSelectorType",
            "x-displayname": "Label Selector",
            "x-ves-proto-message": "ves.io.schema.LabelSelectorType",
            "properties": {
                "expressions": {
                    "type": "array",
                    "description": " expressions contains the kubernetes style label expression for selections.\n\nExample: - \"region in (us-west1, us-west2),tier in (staging)\"-\nRequired: YES",
                    "title": "expressions",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Selector Expression",
                    "x-ves-example": "region in (us-west1, us-west2),tier in (staging)",
                    "x-ves-required": "true"
                }
            }
        },
        "schemaMessageMetaType": {
            "type": "object",
            "description": "MessageMetaType is metadata (common attributes) of a message that only certain messages\nhave. This information is propagated to the metadata of a child object that gets created\nfrom the containing message during view processing.\nThe information in this type can be specified by user during create and replace APIs.",
            "title": "MessageMetaType",
            "x-displayname": "Message Metadata",
            "x-ves-proto-message": "ves.io.schema.MessageMetaType",
            "properties": {
                "description": {
                    "type": "string",
                    "description": " Human readable description.\n\nExample: - \"Virtual Host for acmecorp website\"-",
                    "title": "description",
                    "x-displayname": "Description",
                    "x-ves-example": "Virtual Host for acmecorp website"
                },
                "disable": {
                    "type": "boolean",
                    "description": " A value of true will administratively disable the object that corresponds to the containing message.\n\nExample: - \"true\"-",
                    "title": "disable",
                    "format": "boolean",
                    "x-displayname": "Disable",
                    "x-ves-example": "true"
                },
                "name": {
                    "type": "string",
                    "description": " This is the name of the message.\n The value of name has to follow DNS-1035 format.\n\nExample: - \"acmecorp-web\"-\nRequired: YES",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "acmecorp-web",
                    "x-ves-required": "true"
                }
            }
        },
        "schemaObjectCreateMetaType": {
            "type": "object",
            "description": "ObjectCreateMetaType is metadata that can be specified in Create request of an object.",
            "title": "ObjectCreateMetaType",
            "x-displayname": "Create Metadata",
            "x-ves-proto-message": "ves.io.schema.ObjectCreateMetaType",
            "properties": {
                "annotations": {
                    "type": "object",
                    "description": " Annotations is an unstructured key value map stored with a resource that may be\n set by external tools to store and retrieve arbitrary metadata. They are not\n queryable and should be preserved when modifying objects.\n\nExample: - \"value\"-",
                    "title": "annotations",
                    "x-displayname": "Annotation"
                },
                "description": {
                    "type": "string",
                    "description": " Human readable description for the object\n\nExample: - \"Virtual Host for acmecorp website\"-",
                    "title": "description",
                    "x-displayname": "Description",
                    "x-ves-example": "Virtual Host for acmecorp website"
                },
                "disable": {
                    "type": "boolean",
                    "description": " A value of true will administratively disable the object\n\nExample: - \"true\"-",
                    "title": "disable",
                    "format": "boolean",
                    "x-displayname": "Disable"
                },
                "labels": {
                    "type": "object",
                    "description": " Map of string keys and values that can be used to organize and categorize\n (scope and select) objects as chosen by the user. Values specified here will be used\n by selector expression\n\nExample: - \"value\"-",
                    "title": "labels",
                    "x-displayname": "Labels"
                },
                "name": {
                    "type": "string",
                    "description": " This is the name of configuration object. It has to be unique within the namespace.\n It can only be specified during create API and cannot be changed during replace API.\n The value of name has to follow DNS-1035 format.\n\nExample: - \"acmecorp-web\"-\nRequired: YES",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "acmecorp-web",
                    "x-ves-required": "true"
                },
                "namespace": {
                    "type": "string",
                    "description": " This defines the workspace within which each the configuration object is to be created. \n Must be a DNS_LABEL format. For a namespace object itself, namespace value will be \"\"\n\nExample: - \"staging\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "staging"
                }
            }
        },
        "schemaObjectGetMetaType": {
            "type": "object",
            "description": "ObjectGetMetaType is metadata that can be specified in Get/Create response of an object.",
            "title": "ObjectGetMetaType",
            "x-displayname": "Get Metadata",
            "x-ves-proto-message": "ves.io.schema.ObjectGetMetaType",
            "properties": {
                "annotations": {
                    "type": "object",
                    "description": " Annotations is an unstructured key value map stored with a resource that may be\n set by external tools to store and retrieve arbitrary metadata. They are not\n queryable and should be preserved when modifying objects.\n\nExample: - \"value\"-",
                    "title": "annotations",
                    "x-displayname": "Annotation",
                    "x-ves-example": "value"
                },
                "description": {
                    "type": "string",
                    "description": " Human readable description for the object\n\nExample: - \"Virtual Host for acmecorp website\"-",
                    "title": "description",
                    "x-displayname": "Description",
                    "x-ves-example": "Virtual Host for acmecorp website"
                },
                "disable": {
                    "type": "boolean",
                    "description": " A value of true will administratively disable the object\n\nExample: - \"true\"-",
                    "title": "disable",
                    "format": "boolean",
                    "x-displayname": "Disable",
                    "x-ves-example": "true"
                },
                "labels": {
                    "type": "object",
                    "description": " Map of string keys and values that can be used to organize and categorize\n (scope and select) objects as chosen by the user. Values specified here will be used\n by selector expression\n\nExample: - \"value\"-",
                    "title": "labels",
                    "x-displayname": "Labels",
                    "x-ves-example": "value"
                },
                "name": {
                    "type": "string",
                    "description": " This is the name of configuration object. It has to be unique within the namespace.\n It can only be specified during create API and cannot be changed during replace API.\n The value of name has to follow DNS-1035 format.\n\nExample: - \"acmecorp-web\"-\nRequired: YES",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "acmecorp-web",
                    "x-ves-required": "true"
                },
                "namespace": {
                    "type": "string",
                    "description": " This defines the workspace within which each the configuration object is to be created. \n Must be a DNS_LABEL format. For a namespace object itself, namespace value will be \"\"\n\nExample: - \"staging\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "staging"
                }
            }
        },
        "schemaObjectMetaType": {
            "type": "object",
            "description": "ObjectMetaType is metadata(common attributes) of an object that all configuration objects will have.\nThe information in this type can be specified by user during create and replace APIs.",
            "title": "ObjectMetaType",
            "x-displayname": "Metadata",
            "x-ves-proto-message": "ves.io.schema.ObjectMetaType",
            "properties": {
                "annotations": {
                    "type": "object",
                    "description": " Annotations is an unstructured key value map stored with a resource that may be\n set by external tools to store and retrieve arbitrary metadata. They are not\n queryable and should be preserved when modifying objects.\n\nExample: - \"value\"-",
                    "title": "annotations",
                    "x-displayname": "Annotations",
                    "x-ves-example": "value"
                },
                "description": {
                    "type": "string",
                    "description": " Human readable description for the object\n\nExample: - \"Virtual Host for acmecorp website\"-",
                    "title": "description",
                    "x-displayname": "Description",
                    "x-ves-example": "Virtual Host for acmecorp website"
                },
                "disable": {
                    "type": "boolean",
                    "description": " A value of true will administratively disable the object\n\nExample: - \"true\"-",
                    "title": "disable",
                    "format": "boolean",
                    "x-displayname": "Disable",
                    "x-ves-example": "true"
                },
                "labels": {
                    "type": "object",
                    "description": " Map of string keys and values that can be used to organize and categorize\n (scope and select) objects as chosen by the user. Values specified here will be used\n by selector expression\n\nExample: - \"value\"-",
                    "title": "labels",
                    "x-displayname": "Labels",
                    "x-ves-example": "value"
                },
                "name": {
                    "type": "string",
                    "description": " This is the name of configuration object. It has to be unique within the namespace.\n It can only be specified during create API and cannot be changed during replace API.\n The value of name has to follow DNS-1035 format.\n\nExample: - \"acmecorp-web\"-\nRequired: YES",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "acmecorp-web",
                    "x-ves-required": "true"
                },
                "namespace": {
                    "type": "string",
                    "description": " This defines the workspace within which each the configuration object is to be created. \n Must be a DNS_LABEL format. For a namespace object itself, namespace value will be \"\"\n\nExample: - \"staging\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "staging"
                },
                "uid": {
                    "type": "string",
                    "description": " uid is the unique in time and space value for this object. Object create will fail if \n provided by the client and the value exists in the system. Typically generated by the\n server on successful creation of an object and is not allowed to change once populated.\n Shadowed by SystemObjectMeta's uid field.\n\nExample: - \"d15f1fad-4d37-48c0-8706-df1824d76d31\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "d15f1fad-4d37-48c0-8706-df1824d76d31"
                }
            }
        },
        "schemaObjectReplaceMetaType": {
            "type": "object",
            "description": "ObjectReplaceMetaType is metadata that can be specified in Replace request of an object.",
            "title": "ObjectReplaceMetaType",
            "x-displayname": "Replace Metadata",
            "x-ves-proto-message": "ves.io.schema.ObjectReplaceMetaType",
            "properties": {
                "annotations": {
                    "type": "object",
                    "description": " Annotations is an unstructured key value map stored with a resource that may be\n set by external tools to store and retrieve arbitrary metadata. They are not\n queryable and should be preserved when modifying objects.\n\nExample: - \"value\"-",
                    "title": "annotations",
                    "x-displayname": "Annotations"
                },
                "description": {
                    "type": "string",
                    "description": " Human readable description for the object\n\nExample: - \"Virtual Host for acmecorp website\"-",
                    "title": "description",
                    "x-displayname": "Description",
                    "x-ves-example": "Virtual Host for acmecorp website"
                },
                "disable": {
                    "type": "boolean",
                    "description": " A value of true will administratively disable the object\n\nExample: - \"true\"-",
                    "title": "disable",
                    "format": "boolean",
                    "x-displayname": "Disable"
                },
                "labels": {
                    "type": "object",
                    "description": " Map of string keys and values that can be used to organize and categorize\n (scope and select) objects as chosen by the user. Values specified here will be used\n by selector expression\n\nExample: - \"value\"-",
                    "title": "labels",
                    "x-displayname": "Labels"
                },
                "name": {
                    "type": "string",
                    "description": " This is the name of configuration object. It has to be unique within the namespace.\n It can only be specified during create API and cannot be changed during replace API.\n The value of name has to follow DNS-1035 format.\n\nExample: - \"acmecorp-web\"-\nRequired: YES",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "acmecorp-web"
                },
                "namespace": {
                    "type": "string",
                    "description": " This defines the workspace within which each the configuration object is to be created. \n Must be a DNS_LABEL format. For a namespace object itself, namespace value will be \"\"\n\nExample: - \"staging\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "staging"
                }
            }
        },
        "schemaStatusMetaType": {
            "type": "object",
            "description": "StatusMetaType is metadata that all status must have.",
            "title": "StatusMetaType",
            "x-displayname": "Metadata",
            "x-ves-proto-message": "ves.io.schema.StatusMetaType",
            "properties": {
                "creation_timestamp": {
                    "type": "string",
                    "description": " creation_timestamp is when the status object was created. It is used to find/tie-break\n for latest status object from same origin",
                    "title": "creation_timestamp",
                    "format": "date-time",
                    "x-displayname": "Creation Timestamp"
                },
                "creator_class": {
                    "type": "string",
                    "description": " Class of creator which created this StatusObject. This will be service's DNS FQDN.\n This will be set by the system based on client certificate information.\n\nExample: - \"ver.re1.int.ves.io\"-",
                    "title": "creator_class",
                    "x-displayname": "Creator Class",
                    "x-ves-example": "ver.re1.int.ves.io"
                },
                "creator_id": {
                    "type": "string",
                    "description": " ID of creator which created this StatusObject. This will be a concrete identifier for service (e.g.\n identifying the environment also). This will be set by the system based on client certificate\n information\n\nExample: - \"ver-instance-1\"-",
                    "title": "creator_id",
                    "x-displayname": "Creator ID",
                    "x-ves-example": "ver-instance-1"
                },
                "publish": {
                    "description": " Decides wether this status object will be propagated to user.",
                    "title": "publish",
                    "$ref": "#/definitions/schemaStatusPublishType",
                    "x-displayname": "Publish"
                },
                "status_id": {
                    "type": "string",
                    "description": " status_id is a field used by the generator to distinguish (if necessary) between two status \n objects for the same config object from the same site and same service and potentially same\n daemon(creator-id)",
                    "title": "status_id",
                    "x-displayname": "Status ID"
                },
                "uid": {
                    "type": "string",
                    "description": " uid is the unique in time and space value for a StatusObject.\n\nExample: - \"d15f1fad-4d37-48c0-8706-df1824d76d31\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "d15f1fad-4d37-48c0-8706-df1824d76d31"
                },
                "vtrp_id": {
                    "type": "string",
                    "description": " Oriong of this status exchanged by VTRP. ",
                    "title": "vtrp_id",
                    "x-displayname": "VTRP ID"
                }
            }
        },
        "schemaStatusPublishType": {
            "type": "string",
            "description": "StatusPublishType is all possible publish operations on a StatusObject\n\n - STATUS_DO_NOT_PUBLISH: Do not propagate this status to user. This could be because status is only informational\n - STATUS_PUBLISH: Propagate this status up to user as it might be actionable",
            "title": "StatusPublishType",
            "enum": [
                "STATUS_DO_NOT_PUBLISH",
                "STATUS_PUBLISH"
            ],
            "default": "STATUS_DO_NOT_PUBLISH",
            "x-displayname": "Publish",
            "x-ves-proto-enum": "ves.io.schema.StatusPublishType"
        },
        "schemaStatusType": {
            "type": "object",
            "description": "Status is a return value for calls that don't return other objects.",
            "title": "StatusType",
            "x-displayname": "Status",
            "x-ves-proto-message": "ves.io.schema.StatusType",
            "properties": {
                "code": {
                    "type": "integer",
                    "description": " Suggested HTTP return code for this status, 0 if not set.\n\nExample: - \"0\"-",
                    "title": "code",
                    "format": "int32",
                    "x-displayname": "Code",
                    "x-ves-example": "0"
                },
                "reason": {
                    "type": "string",
                    "description": " A human-readable description of why this operation is in the\n \"Failure\" status. If this value is empty there\n is no information available.\n\nExample: - \"value\"-",
                    "title": "reason",
                    "x-displayname": "Reason",
                    "x-ves-example": "value"
                },
                "status": {
                    "type": "string",
                    "description": " Status of the operation.\n One of: \"Success\" or \"Failure\".\n\nExample: - \"value\"-",
                    "title": "status",
                    "x-displayname": "Status",
                    "x-ves-example": "value"
                }
            }
        },
        "schemaSystemObjectGetMetaType": {
            "type": "object",
            "description": "SystemObjectGetMetaType is metadata generated or populated by the system for all persisted objects and\ncannot be updated directly by users.",
            "title": "SystemObjectGetMetaType",
            "x-displayname": "System Metadata",
            "x-ves-proto-message": "ves.io.schema.SystemObjectGetMetaType",
            "properties": {
                "creation_timestamp": {
                    "type": "string",
                    "description": " CreationTimestamp is a timestamp representing the server time when this object was\n created. It is not guaranteed to be set in happens-before order across separate operations.\n Clients may not set this value. It is represented in RFC3339 form and is in UTC.",
                    "title": "creation_timestamp",
                    "format": "date-time",
                    "x-displayname": "Creation Timestamp"
                },
                "creator_class": {
                    "type": "string",
                    "description": " A value identifying the class of the user or service which created this configuration object.\n\nExample: - \"value\"-",
                    "title": "creator_class",
                    "x-displayname": "Creator Class",
                    "x-ves-example": "prism"
                },
                "creator_id": {
                    "type": "string",
                    "description": " A value identifying the exact user or service that created this configuration object\n\nExample: - \"value\"-",
                    "title": "creator_id",
                    "x-displayname": "Creator ID",
                    "x-ves-example": "admin@acmecorp.com"
                },
                "deletion_timestamp": {
                    "type": "string",
                    "description": " DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This\n field is set by the server when a graceful deletion is requested by the user, and is not\n directly settable by a client. The resource is expected to be deleted (no longer visible\n from resource lists, and not reachable by name) after the time in this field, once the\n finalizers list is empty. As long as the finalizers list contains items, deletion is blocked.\n Once the deletionTimestamp is set, this value may not be unset or be set further into the\n future, although it may be shortened or the resource may be deleted prior to this time.\n For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react\n by sending a graceful termination signal to the containers in the pod. After that 30 seconds,\n the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup,\n remove the pod from the API. In the presence of network partitions, this object may still\n exist after this timestamp, until an administrator or automated process can determine the\n resource is fully terminated.\n If not set, graceful deletion of the object has not been requested.\n \n Populated by the system when a graceful deletion is requested.\n Read-only.",
                    "title": "deletion_timestamp",
                    "format": "date-time",
                    "x-displayname": "Deletion Timestamp"
                },
                "finalizers": {
                    "type": "array",
                    "description": " Must be empty before the object is deleted from the registry. Each entry\n is an identifier for the responsible component that will remove the entry\n from the list. If the deletionTimestamp of the object is non-nil, entries\n in this list can only be removed.\n\nExample: - \"value\"-",
                    "title": "finalizers",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Finalizers",
                    "x-ves-example": "value"
                },
                "initializers": {
                    "description": " An initializer is a controller which enforces some system invariant at object creation time.\n This field is a list of initializers that have not yet acted on this object. If nil or empty,\n this object has been completely initialized. Otherwise, the object is considered uninitialized\n and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to\n observe uninitialized objects.\n \n When an object is created, the system will populate this list with the current set of initializers.\n Only privileged users may set or modify this list. Once it is empty, it may not be modified further\n by any user.",
                    "title": "initializers",
                    "$ref": "#/definitions/schemaInitializersType",
                    "x-displayname": "Initializers"
                },
                "modification_timestamp": {
                    "type": "string",
                    "description": " ModificationTimestamp is a timestamp representing the server time when this object was\n last modified.",
                    "title": "modification_timestamp",
                    "format": "date-time",
                    "x-displayname": "Modification Timestamp"
                },
                "object_index": {
                    "type": "integer",
                    "description": " Unique index for the object. Some objects need a unique integer index to be allocated\n for each object type. This field will be populated for all objects that need it and will\n be zero otherwise.\n\nExample: - \"0\"-",
                    "title": "object_index",
                    "format": "int64",
                    "x-displayname": "Object Index",
                    "x-ves-example": "0"
                },
                "owner_view": {
                    "description": " Reference to the view object that owns this object.\n If there is no view owner, this field will be nil.\n If not nil, this object can only be edited/deleted through the view",
                    "title": "owner_view",
                    "$ref": "#/definitions/schemaViewRefType",
                    "x-displayname": "Owner View"
                },
                "tenant": {
                    "type": "string",
                    "description": " Tenant to which this configuration object belongs to. The value for this is found from\n presented credentials.\n\nExample: - \"acmecorp\"-",
                    "title": "tenant",
                    "x-displayname": "Tenant",
                    "x-ves-example": "acmecorp"
                },
                "uid": {
                    "type": "string",
                    "description": " uid is the unique in time and space value for this object. It is generated by\n the server on successful creation of an object and is not allowed to change on Replace\n API. The value of is taken from uid field of ObjectMetaType, if provided.\n\nExample: - \"d15f1fad-4d37-48c0-8706-df1824d76d31\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "d15f1fad-4d37-48c0-8706-df1824d76d31"
                }
            }
        },
        "schemaSystemObjectMetaType": {
            "type": "object",
            "description": "SystemObjectMetaType is metadata generated or populated by the system for all persisted objects and\ncannot be updated directly by users.",
            "title": "SystemObjectMetaType",
            "x-displayname": "System Metadata",
            "x-ves-proto-message": "ves.io.schema.SystemObjectMetaType",
            "properties": {
                "creation_timestamp": {
                    "type": "string",
                    "description": " CreationTimestamp is a timestamp representing the server time when this object was\n created. It is not guaranteed to be set in happens-before order across separate operations.\n Clients may not set this value. It is represented in RFC3339 form and is in UTC.",
                    "title": "creation_timestamp",
                    "format": "date-time",
                    "x-displayname": "Creation Timestamp"
                },
                "creator_class": {
                    "type": "string",
                    "description": " A value identifying the class of the user or service which created this configuration object.\n\nExample: - \"value\"-",
                    "title": "creator_class",
                    "x-displayname": "Creator Class",
                    "x-ves-example": "value"
                },
                "creator_cookie": {
                    "type": "string",
                    "description": " This can used by the creator of the object for later audit for e.g. by storing the\n version identifying information of the object so at future it can be determined if\n version present at remote end is current or stale.\n\nExample: - \"value\"-",
                    "title": "creator_cookie",
                    "x-displayname": "Creator Cookie",
                    "x-ves-example": "value"
                },
                "creator_id": {
                    "type": "string",
                    "description": " A value identifying the exact user or service that created this configuration object\n\nExample: - \"value\"-",
                    "title": "creator_id",
                    "x-displayname": "Creator ID",
                    "x-ves-example": "value"
                },
                "deletion_timestamp": {
                    "type": "string",
                    "description": " DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This\n field is set by the server when a graceful deletion is requested by the user, and is not\n directly settable by a client. The resource is expected to be deleted (no longer visible\n from resource lists, and not reachable by name) after the time in this field, once the\n finalizers list is empty. As long as the finalizers list contains items, deletion is blocked.\n Once the deletionTimestamp is set, this value may not be unset or be set further into the\n future, although it may be shortened or the resource may be deleted prior to this time.\n For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react\n by sending a graceful termination signal to the containers in the pod. After that 30 seconds,\n the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup,\n remove the pod from the API. In the presence of network partitions, this object may still\n exist after this timestamp, until an administrator or automated process can determine the\n resource is fully terminated.\n If not set, graceful deletion of the object has not been requested.\n \n Populated by the system when a graceful deletion is requested.\n Read-only.",
                    "title": "deletion_timestamp",
                    "format": "date-time",
                    "x-displayname": "Deletion Timestamp"
                },
                "finalizers": {
                    "type": "array",
                    "description": " Must be empty before the object is deleted from the registry. Each entry\n is an identifier for the responsible component that will remove the entry\n from the list. If the deletionTimestamp of the object is non-nil, entries\n in this list can only be removed.\n\nExample: - \"value\"-",
                    "title": "finalizers",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Finalizers",
                    "x-ves-example": "value"
                },
                "initializers": {
                    "description": " An initializer is a controller which enforces some system invariant at object creation time.\n This field is a list of initializers that have not yet acted on this object. If nil or empty,\n this object has been completely initialized. Otherwise, the object is considered uninitialized\n and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to\n observe uninitialized objects.\n \n When an object is created, the system will populate this list with the current set of initializers.\n Only privileged users may set or modify this list. Once it is empty, it may not be modified further\n by any user.",
                    "title": "initializers",
                    "$ref": "#/definitions/schemaInitializersType",
                    "x-displayname": "Initializers"
                },
                "modification_timestamp": {
                    "type": "string",
                    "description": " ModificationTimestamp is a timestamp representing the server time when this object was\n last modified.",
                    "title": "modification_timestamp",
                    "format": "date-time",
                    "x-displayname": "Modification Timestamp"
                },
                "namespace": {
                    "type": "array",
                    "description": " The namespace this object belongs to. This is populated by the service based on the\n metadata.namespace field when an object is created.",
                    "title": "namespace",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Namespace Reference"
                },
                "object_index": {
                    "type": "integer",
                    "description": " Unique index for the object. Some objects need a unique integer index to be allocated\n for each object type. This field will be populated for all objects that need it and will\n be zero otherwise.\n\nExample: - \"0\"-",
                    "title": "object_index",
                    "format": "int64",
                    "x-displayname": "Object Index",
                    "x-ves-example": "0"
                },
                "owner_view": {
                    "description": " Reference to the view object that owns this object.\n If there is no view owner, this field will be nil.\n If not nil, this object can only be edited/deleted through the view",
                    "title": "owner_view",
                    "$ref": "#/definitions/schemaViewRefType",
                    "x-displayname": "Owner View"
                },
                "sre_disable": {
                    "type": "boolean",
                    "description": " This should be set to true If VES/SRE operator wants to suppress an object from being\n presented to business-logic of a daemon(e.g. due to bad-form/issue-causing Object).\n This is meant only to be used in temporary situations for operational continuity till\n a fix is rolled out in business-logic.\n\nExample: - \"true\"-",
                    "title": "sre_disable",
                    "format": "boolean",
                    "x-displayname": "SRE Disable",
                    "x-ves-example": "true"
                },
                "tenant": {
                    "type": "string",
                    "description": " Tenant to which this configuration object belongs to. The value for this is found from\n presented credentials.\n\nExample: - \"acmecorp\"-",
                    "title": "tenant",
                    "x-displayname": "Tenant",
                    "x-ves-example": "acmecorp"
                },
                "trace_info": {
                    "type": "string",
                    "description": " trace_info holds information(\u003ctrace-id\u003e:\u003cspan-id\u003e:\u003cparent-span-id\u003e) of the request doing\n the object modification. This can be used on the watch side to create subsequent spans.\n This information can be used to co-relate activities across services (modulo state compression)\n for a synchronous API.\n\nExample: - \"value\"-",
                    "title": "trace_info",
                    "x-displayname": "Trace Info",
                    "x-ves-example": "value"
                },
                "uid": {
                    "type": "string",
                    "description": " uid is the unique in time and space value for this object. It is generated by\n the server on successful creation of an object and is not allowed to change on Replace\n API. The value of is taken from uid field of ObjectMetaType, if provided.\n\nExample: - \"d15f1fad-4d37-48c0-8706-df1824d76d31\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "d15f1fad-4d37-48c0-8706-df1824d76d31"
                },
                "vtrp_id": {
                    "type": "string",
                    "description": " Indicate origin of this object.",
                    "title": "vtrp_id",
                    "x-displayname": "VTRP ID"
                }
            }
        },
        "schemaViewRefType": {
            "type": "object",
            "description": "ViewRefType represents a reference to a view",
            "title": "ViewRefType",
            "x-displayname": "View Reference",
            "x-ves-proto-message": "ves.io.schema.ViewRefType",
            "properties": {
                "kind": {
                    "type": "string",
                    "description": " Kind of the view object\n\nExample: - \"http_proxy\"-",
                    "title": "kind",
                    "x-displayname": "Kind",
                    "x-ves-example": "http_proxy"
                },
                "name": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then name will hold the referred object's(e.g. route's) name.\n\nExample: - \"contactus-route\"-",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "contactus-route"
                },
                "namespace": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then namespace will hold the referred object's(e.g. route's) namespace.\n\nExample: - \"ns1\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "ns1"
                },
                "uid": {
                    "type": "string",
                    "description": " UID of the view object\n\nExample: - \"f3744323-1adf-4aaa-a5dc-0707c1d1bd82\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "f3744323-1adf-4aaa-a5dc-0707c1d1bd82"
                }
            }
        },
        "schemapolicyHeaderMatcherType": {
            "type": "object",
            "description": "A header matcher specifies the name of a single HTTP header and the criteria for the input request to match it. The input has a list of actual values for each\nheader name in the original HTTP request.\nA header matcher can check for one of the following:\n* Presence or absence of the header in the input\n* At least one of the values for the header in the input satisfies the MatcherType item",
            "title": "HeaderMatcherType",
            "x-displayname": "Header Matcher",
            "x-ves-displayorder": "1,6,4",
            "x-ves-oneof-field-match": "[\"check_not_present\",\"check_present\",\"item\",\"presence\"]",
            "x-ves-proto-message": "ves.io.schema.policy.HeaderMatcherType",
            "properties": {
                "check_not_present": {
                    "description": "Exclusive with [check_present item presence]\nx-displayName: \"Not Present\"\nCheck that the header is not present.",
                    "title": "check_not_present",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "check_present": {
                    "description": "Exclusive with [check_not_present item presence]\nx-displayName: \"Present\"\nCheck that the header is present.",
                    "title": "check_present",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "invert_matcher": {
                    "type": "boolean",
                    "description": " Invert the match result.",
                    "title": "invert_matcher",
                    "format": "boolean",
                    "x-displayname": "Invert Header Matcher"
                },
                "item": {
                    "description": "Exclusive with [check_not_present check_present presence]\nx-displayName: \"Match Values\"\nCriteria for matching the values for the header. The match is successful if any of the values in the input satisfies the criteria in the matcher.",
                    "title": "item",
                    "$ref": "#/definitions/policyMatcherType"
                },
                "name": {
                    "type": "string",
                    "description": " A case-insensitive HTTP header name.\n\nExample: - \"Accept-Encoding\"-\nRequired: YES",
                    "title": "name",
                    "x-displayname": "Header Name",
                    "x-ves-example": "Accept-Encoding",
                    "x-ves-required": "true"
                },
                "presence": {
                    "type": "boolean",
                    "description": "Exclusive with [check_not_present check_present item]\nx-displayName: \"Present Or Absent\"\nCheck if the header is present or absent.",
                    "title": "presence",
                    "format": "boolean"
                }
            }
        },
        "schemapolicyPathMatcherType": {
            "type": "object",
            "description": "A path matcher specifies multiple criteria for matching an HTTP path string. The match is considered successful if any of the criteria are satisfied. The set\nof supported match criteria includes a list of path prefixes, a list of exact path values and a list of regular expressions.",
            "title": "PathMatcherType",
            "x-displayname": "Path Matcher",
            "x-ves-proto-message": "ves.io.schema.policy.PathMatcherType",
            "properties": {
                "exact_values": {
                    "type": "array",
                    "description": " A list of exact path values to match the input HTTP path against.\n\nExample: - \"['/api/web/namespaces/project179/users/user1', '/api/config/namespaces/accounting/bgps', '/api/data/namespaces/project443/virtual_host_101']\"-",
                    "title": "exact values",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Exact Values",
                    "x-ves-example": "['/api/web/namespaces/project179/users/user1', '/api/config/namespaces/accounting/bgps', '/api/data/namespaces/project443/virtual_host_101']"
                },
                "prefix_values": {
                    "type": "array",
                    "description": " A list of path prefix values to match the input HTTP path against.\n\nExample: - \"['/api/web/namespaces/project179/users/', '/api/config/namespaces/', '/api/data/namespaces/']\"-",
                    "title": "prefix values",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Prefix Values",
                    "x-ves-example": "['/api/web/namespaces/project179/users/', '/api/config/namespaces/', '/api/data/namespaces/']"
                },
                "regex_values": {
                    "type": "array",
                    "description": " A list of regular expressions to match the input HTTP path against.\n\nExample: - \"['^/api/web/namespaces/abc/users/([a-z]([-a-z0-9]*[a-z0-9])?)$', '/api/data/namespaces/proj404/virtual_hosts/([a-z]([-a-z0-9]*[a-z0-9])?)$']\"-",
                    "title": "regex values",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Regex Values",
                    "x-ves-example": "['^/api/web/namespaces/abc/users/([a-z]([-a-z0-9]*[a-z0-9])?)$', '/api/data/namespaces/proj404/virtual_hosts/([a-z]([-a-z0-9]*[a-z0-9])?)$']"
                },
                "transformers": {
                    "type": "array",
                    "description": " An ordered list of transformers (starting from index 0) to be applied to the path before matching. \n\nExample: - \"[BASE64_DECODE, LOWER_CASE]-",
                    "title": "transformers",
                    "items": {
                        "$ref": "#/definitions/policyTransformer"
                    },
                    "x-displayname": "Transformers"
                }
            }
        },
        "schemapolicyQueryParameterMatcherType": {
            "type": "object",
            "description": "A query parameter matcher specifies the name of a single query parameter and the criteria for the input request to match it. The input has a list of actual\nvalues for each query parameter name in the original HTTP request.\nA query parameter matcher can check for one of the following:\n* Presence or absence of the query parameter in the input\n* At least one of the values for the query parameter in the input satisfies the MatcherType item",
            "title": "QueryParameterMatcherType",
            "x-displayname": "Query Parameter Matcher",
            "x-ves-displayorder": "1,6,4",
            "x-ves-oneof-field-match": "[\"check_not_present\",\"check_present\",\"item\",\"presence\"]",
            "x-ves-proto-message": "ves.io.schema.policy.QueryParameterMatcherType",
            "properties": {
                "check_not_present": {
                    "description": "Exclusive with [check_present item presence]\nx-displayName: \"Not Present\"\nCheck that the query parameter is not present.",
                    "title": "check_not_present",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "check_present": {
                    "description": "Exclusive with [check_not_present item presence]\nx-displayName: \"Present\"\nCheck that the query parameter is present.",
                    "title": "check_present",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "invert_matcher": {
                    "type": "boolean",
                    "description": " Invert the match result.",
                    "title": "invert_matcher",
                    "format": "boolean",
                    "x-displayname": "Invert Query Parameter Matcher"
                },
                "item": {
                    "description": "Exclusive with [check_not_present check_present presence]\nx-displayName: \"Match Values\"\nCriteria for matching the values for the given query parameter. The match is successful if any of the values for the query parameter satisfies the\ncriteria in the matcher.",
                    "title": "item",
                    "$ref": "#/definitions/policyMatcherType"
                },
                "key": {
                    "type": "string",
                    "description": " A case-sensitive HTTP query parameter name.\n\nExample: - \"sourceid\"-\nRequired: YES",
                    "title": "key",
                    "x-displayname": "Query Parameter Name",
                    "x-ves-example": "sourceid",
                    "x-ves-required": "true"
                },
                "presence": {
                    "type": "boolean",
                    "description": "Exclusive with [check_not_present check_present item]\nx-displayName: \"Present Or Absent\"\nCheck if the query parameter is present or absent.",
                    "title": "presence",
                    "format": "boolean"
                }
            }
        },
        "schemaservice_policyCreateSpecType": {
            "type": "object",
            "description": "Create service_policy creates a new object in the storage backend for metadata.namespace.",
            "title": "Create service policy",
            "x-displayname": "Create Service Policy",
            "x-ves-oneof-field-rule_choice": "[\"allow_all_requests\",\"allow_list\",\"deny_all_requests\",\"deny_list\",\"internally_generated\",\"legacy_rule_list\",\"rule_list\"]",
            "x-ves-oneof-field-server_choice": "[\"any_server\",\"server_name\",\"server_name_matcher\",\"server_selector\"]",
            "x-ves-proto-message": "ves.io.schema.service_policy.CreateSpecType",
            "properties": {
                "algo": {
                    "description": " The rule combining algorithm determines how the list of rules in the policy is evaluated.\n\n - FIRST_MATCH Rules are evaluated sequentially till a matching rule is identified\n - ALLOW_OVERRIDES Rules with an ALLOW action are evaluated prior to rules with a DENY action\n - DENY_OVERRIDES Rules with a DENY action are evaluated prior to rules with an ALLOW action\nRequired: YES",
                    "$ref": "#/definitions/policyRuleCombiningAlgorithm",
                    "x-displayname": "Rule Combining Algorithm",
                    "x-ves-required": "true"
                },
                "allow_all_requests": {
                    "description": "Exclusive with [allow_list deny_all_requests deny_list internally_generated legacy_rule_list rule_list]\n",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "allow_list": {
                    "description": "Exclusive with [allow_all_requests deny_all_requests deny_list internally_generated legacy_rule_list rule_list]\n",
                    "$ref": "#/definitions/service_policySourceList"
                },
                "any_server": {
                    "description": "Exclusive with [server_name server_name_matcher server_selector]\n",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "deny_all_requests": {
                    "description": "Exclusive with [allow_all_requests allow_list deny_list internally_generated legacy_rule_list rule_list]\n",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "deny_list": {
                    "description": "Exclusive with [allow_all_requests allow_list deny_all_requests internally_generated legacy_rule_list rule_list]\n",
                    "$ref": "#/definitions/service_policySourceList"
                },
                "internally_generated": {
                    "description": "Exclusive with [allow_all_requests allow_list deny_all_requests deny_list legacy_rule_list rule_list]\n",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "legacy_rule_list": {
                    "description": "Exclusive with [allow_all_requests allow_list deny_all_requests deny_list internally_generated rule_list]\n",
                    "$ref": "#/definitions/service_policyLegacyRuleList"
                },
                "port_matcher": {
                    "description": " The list of port ranges to which the destination port should belong. In case of an HTTP Connect, the port is extracted from the desired destination.",
                    "$ref": "#/definitions/policyPortMatcherType",
                    "x-displayname": "Port Matcher"
                },
                "rule_list": {
                    "description": "Exclusive with [allow_all_requests allow_list deny_all_requests deny_list internally_generated legacy_rule_list]\n",
                    "$ref": "#/definitions/service_policyRuleList"
                },
                "server_name": {
                    "type": "string",
                    "description": "Exclusive with [any_server server_name_matcher server_selector]\n"
                },
                "server_name_matcher": {
                    "description": "Exclusive with [any_server server_name server_selector]\n",
                    "$ref": "#/definitions/policyMatcherTypeBasic"
                },
                "server_selector": {
                    "description": "Exclusive with [any_server server_name server_name_matcher]\n",
                    "$ref": "#/definitions/schemaLabelSelectorType"
                }
            }
        },
        "schemaservice_policyGetSpecType": {
            "type": "object",
            "description": "Get service_policy reads a given object from storage backend for metadata.namespace.",
            "title": "Get service policy",
            "x-displayname": "Get Service Policy",
            "x-ves-oneof-field-rule_choice": "[\"allow_all_requests\",\"allow_list\",\"deny_all_requests\",\"deny_list\",\"internally_generated\",\"legacy_rule_list\",\"rule_list\"]",
            "x-ves-oneof-field-server_choice": "[\"any_server\",\"server_name\",\"server_name_matcher\",\"server_selector\"]",
            "x-ves-proto-message": "ves.io.schema.service_policy.GetSpecType",
            "properties": {
                "algo": {
                    "description": " The rule combining algorithm determines how the list of rules in the policy is evaluated.\n\n - FIRST_MATCH Rules are evaluated sequentially till a matching rule is identified\n - ALLOW_OVERRIDES Rules with an ALLOW action are evaluated prior to rules with a DENY action\n - DENY_OVERRIDES Rules with a DENY action are evaluated prior to rules with an ALLOW action\nRequired: YES",
                    "$ref": "#/definitions/policyRuleCombiningAlgorithm",
                    "x-displayname": "Rule Combining Algorithm",
                    "x-ves-required": "true"
                },
                "allow_all_requests": {
                    "description": "Exclusive with [allow_list deny_all_requests deny_list internally_generated legacy_rule_list rule_list]\n",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "allow_list": {
                    "description": "Exclusive with [allow_all_requests deny_all_requests deny_list internally_generated legacy_rule_list rule_list]\n",
                    "$ref": "#/definitions/service_policySourceList"
                },
                "any_server": {
                    "description": "Exclusive with [server_name server_name_matcher server_selector]\n",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "deny_all_requests": {
                    "description": "Exclusive with [allow_all_requests allow_list deny_list internally_generated legacy_rule_list rule_list]\n",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "deny_list": {
                    "description": "Exclusive with [allow_all_requests allow_list deny_all_requests internally_generated legacy_rule_list rule_list]\n",
                    "$ref": "#/definitions/service_policySourceList"
                },
                "internally_generated": {
                    "description": "Exclusive with [allow_all_requests allow_list deny_all_requests deny_list legacy_rule_list rule_list]\n",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "legacy_rule_list": {
                    "description": "Exclusive with [allow_all_requests allow_list deny_all_requests deny_list internally_generated rule_list]\n",
                    "$ref": "#/definitions/service_policyLegacyRuleList"
                },
                "port_matcher": {
                    "description": " The list of port ranges to which the destination port should belong. In case of an HTTP Connect, the port is extracted from the desired destination.",
                    "$ref": "#/definitions/policyPortMatcherType",
                    "x-displayname": "Port Matcher"
                },
                "rule_list": {
                    "description": "Exclusive with [allow_all_requests allow_list deny_all_requests deny_list internally_generated legacy_rule_list]\n",
                    "$ref": "#/definitions/service_policyRuleList"
                },
                "rules": {
                    "type": "array",
                    "description": " A list of references to service_policy_rule objects.\n The order of evaluation of the rules depends on the rule combining algorithm.\n TBD mark as hidden + internal after implementation is ready",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Rules"
                },
                "server_name": {
                    "type": "string",
                    "description": "Exclusive with [any_server server_name_matcher server_selector]\n"
                },
                "server_name_matcher": {
                    "description": "Exclusive with [any_server server_name server_selector]\n",
                    "$ref": "#/definitions/policyMatcherTypeBasic"
                },
                "server_selector": {
                    "description": "Exclusive with [any_server server_name server_name_matcher]\n",
                    "$ref": "#/definitions/schemaLabelSelectorType"
                },
                "simple_rules": {
                    "type": "array",
                    "description": " A list of SimpleRules.\n The order of evaluation of the simple rules depends on the rule combining algorithm.\n This is mutually exclusive with the rules field and is for internal use only.",
                    "items": {
                        "$ref": "#/definitions/service_policySimpleRule"
                    },
                    "x-displayname": "Simple Rules"
                }
            }
        },
        "schemaservice_policyGlobalSpecType": {
            "type": "object",
            "description": "Shape of service_policy in the storage backend.",
            "title": "GlobalSpecType",
            "x-displayname": "Specification",
            "x-ves-oneof-field-rule_choice": "[\"allow_all_requests\",\"allow_list\",\"deny_all_requests\",\"deny_list\",\"internally_generated\",\"legacy_rule_list\",\"rule_list\"]",
            "x-ves-oneof-field-server_choice": "[\"any_server\",\"server_name\",\"server_name_matcher\",\"server_selector\"]",
            "x-ves-proto-message": "ves.io.schema.service_policy.GlobalSpecType",
            "properties": {
                "algo": {
                    "description": " The rule combining algorithm determines how the list of rules in the policy is evaluated.\n\n - FIRST_MATCH Rules are evaluated sequentially till a matching rule is identified\n - ALLOW_OVERRIDES Rules with an ALLOW action are evaluated prior to rules with a DENY action\n - DENY_OVERRIDES Rules with a DENY action are evaluated prior to rules with an ALLOW action\nRequired: YES",
                    "title": "algo",
                    "$ref": "#/definitions/policyRuleCombiningAlgorithm",
                    "x-displayname": "Rule Combining Algorithm",
                    "x-ves-required": "true"
                },
                "allow_all_requests": {
                    "description": "Exclusive with [allow_list deny_all_requests deny_list internally_generated legacy_rule_list rule_list]\nx-displayName: \"Allow All Requests\"\nAllow all requests",
                    "title": "allow_all_requests",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "allow_list": {
                    "description": "Exclusive with [allow_all_requests deny_all_requests deny_list internally_generated legacy_rule_list rule_list]\nx-displayName: \"Allowed Sources\"\nList of allowed sources for requests",
                    "title": "allow_list",
                    "$ref": "#/definitions/service_policySourceList"
                },
                "any_server": {
                    "description": "Exclusive with [server_name server_name_matcher server_selector]\nx-displayName: \"Any Server\"\nAny Server",
                    "title": "any",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "default_forwarding_classes": {
                    "type": "array",
                    "description": " Ordered list of forwarding class to use for traffic that match the enclosing rule\n Action valid only when the policy is used PBR",
                    "title": "Default Forwarding Classes",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Default Forwarding Classes"
                },
                "deny_all_requests": {
                    "description": "Exclusive with [allow_all_requests allow_list deny_list internally_generated legacy_rule_list rule_list]\nx-displayName: \"Deny All Requests\"\nDeny all requests",
                    "title": "deny_all_requests",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "deny_info": {
                    "description": " Detailed information including HTTP response code and error message to be sent when the policy action is DENY.",
                    "title": "deny_info",
                    "$ref": "#/definitions/policyDenyInformation",
                    "x-displayname": "Deny Information"
                },
                "deny_list": {
                    "description": "Exclusive with [allow_all_requests allow_list deny_all_requests internally_generated legacy_rule_list rule_list]\nx-displayName: \"Denied Sources\"\nList of denied sources for requests",
                    "title": "deny_list",
                    "$ref": "#/definitions/service_policySourceList"
                },
                "internally_generated": {
                    "description": "Exclusive with [allow_all_requests allow_list deny_all_requests deny_list legacy_rule_list rule_list]\nx-displayName: \"Interally Generated\"\nPlaceholder that's used for internally generated service_policy objects to satisy the validation check that rule_choice is non-nil.",
                    "title": "internally_generated",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "legacy_rule_list": {
                    "description": "Exclusive with [allow_all_requests allow_list deny_all_requests deny_list internally_generated rule_list]\nx-displayName: \"Legacy Rule List\"\nList of references to service_policy_rule objects",
                    "title": "legacy_rule_list",
                    "$ref": "#/definitions/service_policyLegacyRuleList"
                },
                "port_matcher": {
                    "description": " The list of port ranges to which the destination port should belong. In case of an HTTP Connect, the port is extracted from the desired destination.",
                    "title": "port matcher",
                    "$ref": "#/definitions/policyPortMatcherType",
                    "x-displayname": "Port Matcher"
                },
                "role": {
                    "description": " The expected role of the client invoking the request API. The actual roles for the client are derived from the user and namespace information in the API\n request.\n The predicate evaluates to true if any of the client's roles match the value specified in role.",
                    "title": "role",
                    "$ref": "#/definitions/policyRoleMatcherType",
                    "x-displayname": "Role"
                },
                "rule_list": {
                    "description": "Exclusive with [allow_all_requests allow_list deny_all_requests deny_list internally_generated legacy_rule_list]\nx-displayName: \"Custom Rule List\"\nList of custom rules",
                    "title": "rule_list",
                    "$ref": "#/definitions/service_policyRuleList"
                },
                "rules": {
                    "type": "array",
                    "description": " A list of references to service_policy_rule objects.\n The order of evaluation of the rules depends on the rule combining algorithm.\n TBD mark as hidden + internal after implementation is ready",
                    "title": "rules",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Rules"
                },
                "server_name": {
                    "type": "string",
                    "description": "Exclusive with [any_server server_name_matcher server_selector]\nx-displayName: \"Server Name\"\nx-example: \"database.production.customer.volterra.us\"\nThe expected name of the server to which the request API is directed. The actual names for the server are extracted from the HTTP Host header and the name\nof the virtual_host to which the request is directed. If the request is directed to a virtual K8s service, the actual names also contain the name of that\nservice.\nThe predicate evaluates to true if any of the actual names is the same as the expected server name.",
                    "title": "server name"
                },
                "server_name_matcher": {
                    "description": "Exclusive with [any_server server_name server_selector]\nx-displayName: \"Group of Servers by Name\"\nA list of exact values and/or regular expressions for the expected name of the server. The actual names of server are extracted from the HTTP Host header\nand the name of the virtual_host to which the request is directed. If the request is directed to a virtual K8s service, the actual names also contain the\nname of that service.\nThis is a generalized version of the server name predicate that allows the same rule to be applicable to a set of server rather than a single server.\nThe predicate evaluates to true if any of the server's actual names match any of the exact values or regular expressions in the server name matcher.",
                    "title": "server name matcher",
                    "$ref": "#/definitions/policyMatcherTypeBasic"
                },
                "server_selector": {
                    "description": "Exclusive with [any_server server_name server_name_matcher]\nx-displayName: \"Group of Servers by Label Selector\"\nA label selector that describes the expected set of servers. The labels associated with the server to which the API request is directed are used to evaluate\nthe label expressions in the selector. These labels are derived from the server TLS certificate and the virtual host object for the server. If the request is\ndirected to a virtual K8s service, the K8s labels for the service are also included in the set of server labels.\nThis is a more flexible and powerful version of the server name matcher predicate that allows a given policy to be applicable to a set of servers based on the\nserver labels rather than being limited to relying on patterns in the server name.\nThe predicate evaluates to true if the expressions in the label selector are true for the server labels.",
                    "title": "server selector",
                    "$ref": "#/definitions/schemaLabelSelectorType"
                },
                "simple_rules": {
                    "type": "array",
                    "description": " A list of SimpleRules.\n The order of evaluation of the simple rules depends on the rule combining algorithm.\n This is mutually exclusive with the rules field and is for internal use only.",
                    "title": "simple_rules",
                    "items": {
                        "$ref": "#/definitions/service_policySimpleRule"
                    },
                    "x-displayname": "Simple Rules"
                },
                "view_internal": {
                    "description": " Reference to view internal object",
                    "title": "view_internal",
                    "$ref": "#/definitions/schemaviewsObjectRefType",
                    "x-displayname": "View Internal"
                }
            }
        },
        "schemaservice_policyReplaceSpecType": {
            "type": "object",
            "description": "Replace service_policy replaces an existing object in the storage backend for metadata.namespace.",
            "title": "Replace service policy",
            "x-displayname": "Replace Service Policy",
            "x-ves-oneof-field-rule_choice": "[\"allow_all_requests\",\"allow_list\",\"deny_all_requests\",\"deny_list\",\"internally_generated\",\"legacy_rule_list\",\"rule_list\"]",
            "x-ves-oneof-field-server_choice": "[\"any_server\",\"server_name\",\"server_name_matcher\",\"server_selector\"]",
            "x-ves-proto-message": "ves.io.schema.service_policy.ReplaceSpecType",
            "properties": {
                "algo": {
                    "description": " The rule combining algorithm determines how the list of rules in the policy is evaluated.\n\n - FIRST_MATCH Rules are evaluated sequentially till a matching rule is identified\n - ALLOW_OVERRIDES Rules with an ALLOW action are evaluated prior to rules with a DENY action\n - DENY_OVERRIDES Rules with a DENY action are evaluated prior to rules with an ALLOW action\nRequired: YES",
                    "$ref": "#/definitions/policyRuleCombiningAlgorithm",
                    "x-displayname": "Rule Combining Algorithm",
                    "x-ves-required": "true"
                },
                "allow_all_requests": {
                    "description": "Exclusive with [allow_list deny_all_requests deny_list internally_generated legacy_rule_list rule_list]\n",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "allow_list": {
                    "description": "Exclusive with [allow_all_requests deny_all_requests deny_list internally_generated legacy_rule_list rule_list]\n",
                    "$ref": "#/definitions/service_policySourceList"
                },
                "any_server": {
                    "description": "Exclusive with [server_name server_name_matcher server_selector]\n",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "deny_all_requests": {
                    "description": "Exclusive with [allow_all_requests allow_list deny_list internally_generated legacy_rule_list rule_list]\n",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "deny_list": {
                    "description": "Exclusive with [allow_all_requests allow_list deny_all_requests internally_generated legacy_rule_list rule_list]\n",
                    "$ref": "#/definitions/service_policySourceList"
                },
                "internally_generated": {
                    "description": "Exclusive with [allow_all_requests allow_list deny_all_requests deny_list legacy_rule_list rule_list]\n",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "legacy_rule_list": {
                    "description": "Exclusive with [allow_all_requests allow_list deny_all_requests deny_list internally_generated rule_list]\n",
                    "$ref": "#/definitions/service_policyLegacyRuleList"
                },
                "port_matcher": {
                    "description": " The list of port ranges to which the destination port should belong. In case of an HTTP Connect, the port is extracted from the desired destination.",
                    "$ref": "#/definitions/policyPortMatcherType",
                    "x-displayname": "Port Matcher"
                },
                "rule_list": {
                    "description": "Exclusive with [allow_all_requests allow_list deny_all_requests deny_list internally_generated legacy_rule_list]\n",
                    "$ref": "#/definitions/service_policyRuleList"
                },
                "server_name": {
                    "type": "string",
                    "description": "Exclusive with [any_server server_name_matcher server_selector]\n"
                },
                "server_name_matcher": {
                    "description": "Exclusive with [any_server server_name server_selector]\n",
                    "$ref": "#/definitions/policyMatcherTypeBasic"
                },
                "server_selector": {
                    "description": "Exclusive with [any_server server_name server_name_matcher]\n",
                    "$ref": "#/definitions/schemaLabelSelectorType"
                }
            }
        },
        "schemaservice_policy_ruleGlobalSpecType": {
            "type": "object",
            "description": "Shape of service_policy_rule in the storage backend.",
            "title": "GlobalSpecType",
            "x-displayname": "Specification",
            "x-ves-oneof-field-asn_choice": "[\"any_asn\",\"asn_list\",\"asn_matcher\"]",
            "x-ves-oneof-field-client_choice": "[\"any_client\",\"client_name\",\"client_name_matcher\",\"client_selector\"]",
            "x-ves-oneof-field-dst_asn_choice": "[\"any_dst_asn\",\"dst_asn_list\",\"dst_asn_matcher\"]",
            "x-ves-oneof-field-dst_ip_choice": "[\"any_dst_ip\",\"dst_ip_matcher\",\"dst_ip_prefix_list\"]",
            "x-ves-oneof-field-ip_choice": "[\"any_ip\",\"ip_matcher\",\"ip_prefix_list\"]",
            "x-ves-proto-message": "ves.io.schema.service_policy_rule.GlobalSpecType",
            "properties": {
                "action": {
                    "description": " Action to be enforced if the input request matches the rule.\nRequired: YES",
                    "title": "action",
                    "$ref": "#/definitions/policyRuleAction",
                    "x-displayname": "Action",
                    "x-ves-required": "true"
                },
                "any_asn": {
                    "description": "Exclusive with [asn_list asn_matcher]\nx-displayName: \"Any Source ASN\"\nAny origin ASN.",
                    "title": "any asn",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "any_client": {
                    "description": "Exclusive with [client_name client_name_matcher client_selector]\nx-displayName: \"Any Client\"\nAny Client",
                    "title": "any ip",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "any_dst_asn": {
                    "description": "Exclusive with [dst_asn_list dst_asn_matcher]\nx-displayName: \"Any Destination ASN\"\nAny origin ASN.",
                    "title": "any dst asn",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "any_dst_ip": {
                    "description": "Exclusive with [dst_ip_matcher dst_ip_prefix_list]\nx-displayName: \"Any Destination IP\"\nAny Destination IP",
                    "title": "any dst ip",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "any_ip": {
                    "description": "Exclusive with [ip_matcher ip_prefix_list]\nx-displayName: \"Any Source IP\"\nAny Source IP",
                    "title": "any ip",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "api_group_matcher": {
                    "description": " The list of expected API group names to which the request API belongs. The actual list of API group names for the request API is determined from the api\n group and api group element configuration objects using the HTTP method and the HTTP path as inputs.\n The predicate evaluates to true if any of the actual API group names for the request is equal to any of the values in the api group matcher.",
                    "title": "api group matcher",
                    "$ref": "#/definitions/policyStringMatcherType",
                    "x-displayname": "API Group Matcher"
                },
                "arg_matchers": {
                    "type": "array",
                    "description": " A list of predicates for all POST args that need to be matched. The criteria for matching each arg are described in individual instances\n of ArgMatcherType. The actual arg values are extracted from the request API as a list of strings for each arg selector name.\n Note that all specified arg matcher predicates must evaluate to true.",
                    "title": "arg matchers",
                    "items": {
                        "$ref": "#/definitions/policyArgMatcherType"
                    },
                    "x-displayname": "Argument Matchers"
                },
                "asn_list": {
                    "description": "Exclusive with [any_asn asn_matcher]\nx-displayName: \"ASN List\"\nList of 4-byte ASN values.\nThe predicate evaluates to true if the origin ASN is present in the ASN list.",
                    "title": "asn list",
                    "$ref": "#/definitions/policyAsnMatchList"
                },
                "asn_matcher": {
                    "description": "Exclusive with [any_asn asn_list]\nx-displayName: \"BGP ASN Sets\"\nList of references to BGP ASN Set objects.\nThe predicate evaluates to true if the origin ASN is present in one of the BGP ASN Set objects.",
                    "title": "asn matcher",
                    "$ref": "#/definitions/policyAsnMatcherType"
                },
                "body_matcher": {
                    "description": " Predicate for matching the request body string. The criteria for matching the request body is described in MatcherType.\n The actual request body value is extracted from the request API as a string.",
                    "title": "request body matcher",
                    "$ref": "#/definitions/policyMatcherType",
                    "x-displayname": "Request Body Matcher"
                },
                "challenge_action": {
                    "description": " Select challenge action, enable javascript/captcha challenge or disable challenge\nRequired: YES",
                    "title": "Challenge Action",
                    "$ref": "#/definitions/policyChallengeAction",
                    "x-displayname": "Select Challenge Action Type",
                    "x-ves-required": "true"
                },
                "client_name": {
                    "type": "string",
                    "description": "Exclusive with [any_client client_name_matcher client_selector]\nx-displayName: \"Client Name\"\nx-example: \"backend.production.customer.volterra.us\"\nThe expected name of the client invoking the request API.\nThe predicate evaluates to true if any of the actual names is the same as the expected client name.",
                    "title": "client name"
                },
                "client_name_matcher": {
                    "description": "Exclusive with [any_client client_name client_selector]\nx-displayName: \"Group of Clients by Name\"\nA list of exact values and/or regular expressions for the expected name of the client.\nThis is a generalized version of the client name predicate that allows the same rule to be applicable to a set of clients rather than a single client.\nThe predicate evaluates to true if any of the client's actual names match any of the exact values or regular expressions in the client name matcher.",
                    "title": "client name matcher",
                    "$ref": "#/definitions/policyMatcherType"
                },
                "client_role": {
                    "description": " The expected role(s) of the client invoking the request API. The actual roles for the client are derived from the user and namespace information in the\n API request.\n The predicate evaluates to true if any of the client's roles match the value(s) specified in client role.",
                    "title": "client role",
                    "$ref": "#/definitions/policyRoleMatcherType",
                    "x-displayname": "Client Role"
                },
                "client_selector": {
                    "description": "Exclusive with [any_client client_name client_name_matcher]\nx-displayName: \"Group of Clients by Label Selector\"\nA label selector that describes the expected set of clients. The labels associated with the client making the API request are used to evaluate the label\nexpressions in the selector. These labels can be derived from the client TLS certificate or from the volterra internal control plane.\nThis is a more flexible and powerful version of the client name matcher predicate that allows a given rule to be applicable to a set of clients based on the\nclient labels rather than being limited to relying on patterns in the client name.\nThe predicate evaluates to true if the expressions in the label selector are true for the client labels.",
                    "title": "client selector",
                    "$ref": "#/definitions/schemaLabelSelectorType"
                },
                "content_rewrite_action": {
                    "description": " Rewrite HTML response action to insert HTML content such as Javascript \u003cscript\u003e tags into the HTML document",
                    "title": "Shape Content Rewrite Action",
                    "$ref": "#/definitions/policyContentRewriteAction",
                    "x-displayname": "Shape Content Rewrite Action Type"
                },
                "cookie_matchers": {
                    "type": "array",
                    "description": " A list of predicates for all cookies that need to be matched. The criteria for matching each cookie is described in individual instances\n of CookieMatcherType. The actual cookie values are extracted from the request API as a list of strings for each cookie name.\n Note that all specified cookie matcher predicates must evaluate to true.",
                    "title": "cookie matchers",
                    "items": {
                        "$ref": "#/definitions/policyCookieMatcherType"
                    },
                    "x-displayname": "Cookie Matchers"
                },
                "domain_matcher": {
                    "description": " A list of exact values and/or regular expressions for the expected name of the domain. The actual value of domain is the host component\n from the URL. The predicate evaluates to true if the domain value matches any of the exact values or regular expressions in the domain\n matcher.",
                    "title": "domain matcher",
                    "$ref": "#/definitions/policyMatcherType",
                    "x-displayname": "Domain Matcher"
                },
                "dst_asn_list": {
                    "description": "Exclusive with [any_dst_asn dst_asn_matcher]\nx-displayName: \"Destination ASN List\"\nList of 4-byte ASN values.\nThe predicate evaluates to true if the destination ASN is present in the ASN list.",
                    "title": "dst asn list",
                    "$ref": "#/definitions/policyAsnMatchList"
                },
                "dst_asn_matcher": {
                    "description": "Exclusive with [any_dst_asn dst_asn_list]\nx-displayName: \"Destination BGP ASN Sets\"\nList of references to BGP ASN Set objects.\nThe predicate evaluates to true if the destination ASN is present in one of the BGP ASN Set objects.",
                    "title": "dst asn matcher",
                    "$ref": "#/definitions/policyAsnMatcherType"
                },
                "dst_ip_matcher": {
                    "description": "Exclusive with [any_dst_ip dst_ip_prefix_list]\nx-displayName: \"Destination IP Prefix Sets\"\nList of references to IP Prefix Set objects.\nThe predicate evaluates to true if the client IPv4 Address is covered by one or more of the IPv4 Prefixes in the IP Prefix Sets.",
                    "title": "ip matcher",
                    "$ref": "#/definitions/policyIpMatcherType"
                },
                "dst_ip_prefix_list": {
                    "description": "Exclusive with [any_dst_ip dst_ip_matcher]\nx-displayName: \"Destination IPv4 Prefix List\"\nList of IPv4 Prefixes values.\nThe predicate evaluates to true if the destination address is covered by one or more of the IPv4 Prefixes from the list.",
                    "title": "ip prefix list",
                    "$ref": "#/definitions/policyPrefixMatchList"
                },
                "expiration_timestamp": {
                    "type": "string",
                    "description": " The expiration_timestamp is the RFC 3339 format timestamp at which the containing rule is considered to be logically expired. The rule continues to exist in\n the configuration but is not applied anymore.\n\nExample: - \"2019-12-31:44:34.171543432Z\"-",
                    "title": "expiration timestamp",
                    "format": "date-time",
                    "x-displayname": "Expiration Timestamp",
                    "x-ves-example": "2019-12-31:44:34.171543432Z"
                },
                "forwarding_class": {
                    "type": "array",
                    "description": " Ordered list of forwarding class to use for traffic that match the enclosing rule\n Action valid only when the policy is used PBR",
                    "title": "Forwarding Classes",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Forwarding Classes"
                },
                "goto_policy": {
                    "type": "array",
                    "description": " A reference to a service_policy object.\n Target of the GOTO_POLICY action.\n The target policy must be part of the current policy set and must be after the current policy in the policy set.",
                    "title": "goto_policy",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Goto Policy"
                },
                "headers": {
                    "type": "array",
                    "description": " A list of predicates for various HTTP headers that need to match. The criteria for matching each HTTP header are described in individual HeaderMatcherType\n instances. The actual HTTP header values are extracted from the request API as a list of strings for each HTTP header type.\n Note that all specified header predicates must evaluate to true.",
                    "title": "headers",
                    "items": {
                        "$ref": "#/definitions/schemapolicyHeaderMatcherType"
                    },
                    "x-displayname": "HTTP Headers"
                },
                "http_method": {
                    "description": " The list of expected values for the HTTP method in the request API. The actual value of the HTTP method is extracted from the HTTP request.\n The predicate evaluates to true if the actual HTTP method belongs is present in the list of expected values.",
                    "title": "method",
                    "$ref": "#/definitions/policyHttpMethodMatcherType",
                    "x-displayname": "HTTP Method"
                },
                "ip_matcher": {
                    "description": "Exclusive with [any_ip ip_prefix_list]\nx-displayName: \"IP Prefix Sets\"\nList of references to IP Prefix Set objects.\nThe predicate evaluates to true if the client IPv4 Address is covered by one or more of the IPv4 Prefixes in the IP Prefix Sets.",
                    "title": "ip matcher",
                    "$ref": "#/definitions/policyIpMatcherType"
                },
                "ip_prefix_list": {
                    "description": "Exclusive with [any_ip ip_matcher]\nx-displayName: \"IPv4 Prefix List\"\nList of IPv4 Prefixes values.\nThe predicate evaluates to true if the client IPv4 Address is covered by one or more of the IPv4 Prefixes from the list.",
                    "title": "ip prefix list",
                    "$ref": "#/definitions/policyPrefixMatchList"
                },
                "l4_dest_matcher": {
                    "description": " A L4 Destination matcher specifies a list of IPv4 prefixes and a TCP port range as match criteria. The match is considered successful if the destination\n IP matches one of the prefixes and the destination port belongs to the port range.",
                    "title": "l4 dest matcher",
                    "$ref": "#/definitions/policyL4DestMatcherType",
                    "x-displayname": "L4 Destination Matcher"
                },
                "label_matcher": {
                    "description": " A list of label keys that identify the label values that need to be the same for the client and server. Note that the actual label values are not specified\n here, just the label keys. This predicate facilitates reuse of rules and policies across multiple dimensions such as deployment, environment, and location.\n The predicate evaluates to true if the values of the client and server labels for all the keys specified in the label matcher are equal. The values of any\n other labels do not matter.\n\nExample: - \"['environment', 'location', 'deployment']\"-",
                    "title": "label matcher",
                    "$ref": "#/definitions/schemaLabelMatcherType",
                    "x-displayname": "Label Matcher",
                    "x-ves-example": "['environment', 'location', 'deployment']"
                },
                "malicious_user_mitigation_bypass": {
                    "description": " When user behavior analyses is enabled, all requests in the application namespace\n are subjected to user behavior analyses and mitigation actions are taken as configured in MaliciousUserMitigationRule.\n If required, the behavior checks can be disabled for certain requests by configuring\n the appropriate match conditions in the enclosing policy rule and setting malicious user mitigation bypass flag.",
                    "title": "malicious user mitigation bypass",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Malicious User Mitigation Bypass"
                },
                "path": {
                    "description": " A list of exact values, prefixes and regular expressions for the expected value of the HTTP path. The actual value of the HTTP path is the unescaped path\n value extracted from the HTTP URL Resource, excluding any query and fragment information.\n The predicate evaluates to true if the actual path value matches any of the exact or prefix values or regular expressions in the path matcher.",
                    "title": "path",
                    "$ref": "#/definitions/schemapolicyPathMatcherType",
                    "x-displayname": "HTTP Path"
                },
                "port_matcher": {
                    "description": " The list of port ranges to which the destination port should belong. In case of an HTTP Connect, the port is extracted from the desired destination.",
                    "title": "port matcher",
                    "$ref": "#/definitions/policyPortMatcherType",
                    "x-displayname": "Port Matcher"
                },
                "query_params": {
                    "type": "array",
                    "description": " A list of predicates for all query parameters that need to be matched. The criteria for matching each query parameter are described in individual instances\n of QueryParameterMatcherType. The actual query parameter values are extracted from the request API as a list of strings for each query parameter name.\n Note that all specified query parameter predicates must evaluate to true.",
                    "title": "query params",
                    "items": {
                        "$ref": "#/definitions/schemapolicyQueryParameterMatcherType"
                    },
                    "x-displayname": "HTTP Query Parameters"
                },
                "rate_limiter": {
                    "type": "array",
                    "description": " A reference to rate_limiter object.\n Requests matching this the enclosing rule are subjected to the specified rate_limiter.",
                    "title": "rate_limiter",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Rate Limiter"
                },
                "scheme": {
                    "type": "array",
                    "description": " The scheme in the request.\n\nExample: - \"HTTPS\"-",
                    "title": "scheme",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Scheme",
                    "x-ves-example": "HTTPS"
                },
                "server_selector": {
                    "description": " A label selector that describes the expected set of servers.\n The predicate evaluates to true if the expressions in the label selector are true for the server labels.",
                    "title": "server selector",
                    "$ref": "#/definitions/schemaLabelSelectorType",
                    "x-displayname": "Group of Servers by Label Selector"
                },
                "shape_protected_endpoint_action": {
                    "description": " Shape Protected Endpoint Action that include application traffic type and mitigation",
                    "title": "Shape Protected Endpoint Action",
                    "$ref": "#/definitions/policyShapeProtectedEndpointAction",
                    "x-displayname": "Shape Protected Endpoint Action"
                },
                "tls_fingerprint_matcher": {
                    "description": " TLS JA3 fingerprints to be matched.\n The predicate evaluates to true if the TLS fingerprint matches any of the exact values or classes of known TLS fingerprints.",
                    "title": "TLS JA3 fingerprint matcher",
                    "$ref": "#/definitions/policyTlsFingerprintMatcherType",
                    "x-displayname": "TLS Fingerprint Matcher"
                },
                "url_matcher": {
                    "description": " A URL matcher specifies a list of URL items as match criteria. The match is considered successful if the domain and path match any of the URL items.",
                    "title": "url matcher",
                    "$ref": "#/definitions/policyURLMatcherType",
                    "x-displayname": "URL Matcher"
                },
                "virtual_host_matcher": {
                    "description": " A list of exact values and/or regular expressions for the expected name of the virtual_host. The name of the virtual_host is is part of the context in\n which a service_policy_set is evaluated. The predicate evaluates to true if the virtual_host name matches any of the exact values or regular expressions\n in the virtual_host matcher.\n Hidden because this will be used only in system generated rate limiting service_policy_sets.",
                    "title": "virtual_host matcher",
                    "$ref": "#/definitions/policyMatcherType",
                    "x-displayname": "Virtual Host Matcher"
                },
                "waf_action": {
                    "description": " App Firewall action to be enforced if the input request matches the rule.\nRequired: YES",
                    "title": "App Firewall Action",
                    "$ref": "#/definitions/policyWafAction",
                    "x-displayname": "App Firewall Action",
                    "x-ves-required": "true"
                }
            }
        },
        "schemaviewsObjectRefType": {
            "type": "object",
            "description": "This type establishes a direct reference from one object(the referrer) to another(the referred). \nSuch a reference is in form of tenant/namespace/name",
            "title": "ObjectRefType",
            "x-displayname": "Object reference",
            "x-ves-proto-message": "ves.io.schema.views.ObjectRefType",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then name will hold the referred object's(e.g. route's) name.\n\nExample: - \"contacts-route\"-\nRequired: YES",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "contacts-route",
                    "x-ves-required": "true"
                },
                "namespace": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then namespace will hold the referred object's(e.g. route's) namespace.\n\nExample: - \"ns1\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "ns1"
                },
                "tenant": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then tenant will hold the referred object's(e.g. route's) tenant.\n\nExample: - \"acmecorp\"-",
                    "title": "tenant",
                    "x-displayname": "Tenant",
                    "x-ves-example": "acmecorp"
                }
            }
        },
        "service_policyCreateRequest": {
            "type": "object",
            "description": "This is the input message of the 'Create' RPC",
            "title": "CreateRequest is used to create an instance of service_policy",
            "x-displayname": "Create Request",
            "x-ves-proto-message": "ves.io.schema.service_policy.CreateRequest",
            "properties": {
                "metadata": {
                    "description": " Standard object's metadata",
                    "title": "metadata",
                    "$ref": "#/definitions/schemaObjectCreateMetaType",
                    "x-displayname": "Metadata"
                },
                "spec": {
                    "description": " Specification of the desired behavior of the service_policy",
                    "title": "spec",
                    "$ref": "#/definitions/schemaservice_policyCreateSpecType",
                    "x-displayname": "Spec"
                }
            }
        },
        "service_policyCreateResponse": {
            "type": "object",
            "x-ves-proto-message": "ves.io.schema.service_policy.CreateResponse",
            "properties": {
                "metadata": {
                    "description": " Standard object's metadata",
                    "title": "metadata",
                    "$ref": "#/definitions/schemaObjectGetMetaType",
                    "x-displayname": "Metadata"
                },
                "spec": {
                    "description": " Specification of the desired behavior of the service_policy",
                    "title": "spec",
                    "$ref": "#/definitions/schemaservice_policyGetSpecType",
                    "x-displayname": "Spec"
                },
                "system_metadata": {
                    "description": " System generated object's metadata",
                    "title": "system metadata",
                    "$ref": "#/definitions/schemaSystemObjectGetMetaType",
                    "x-displayname": "System Metadata"
                }
            }
        },
        "service_policyDeleteRequest": {
            "type": "object",
            "description": "This is the input message of the 'Delete' RPC.",
            "title": "DeleteRequest is used to delete a service_policy",
            "x-displayname": "Delete Request",
            "x-ves-proto-message": "ves.io.schema.service_policy.DeleteRequest",
            "properties": {
                "fail_if_referred": {
                    "type": "boolean",
                    "description": " Fail the delete operation if this object is being referred by other objects",
                    "title": "fail_if_referred",
                    "format": "boolean",
                    "x-displayname": "Fail-If-Referred"
                },
                "name": {
                    "type": "string",
                    "description": " Name of the configuration object\n\nExample: - \"name\"-",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "name"
                },
                "namespace": {
                    "type": "string",
                    "description": " Namespace in which the configuration object is present\n\nExample: - \"ns1\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "ns1"
                }
            }
        },
        "service_policyGetResponse": {
            "type": "object",
            "description": "This is the output message of the 'Get' RPC",
            "title": "GetResponse is the shape of a read service_policy",
            "x-displayname": "Get Response",
            "x-ves-proto-message": "ves.io.schema.service_policy.GetResponse",
            "properties": {
                "create_form": {
                    "description": "Format used to create a new similar object",
                    "title": "create_form",
                    "$ref": "#/definitions/service_policyCreateRequest",
                    "x-displayname": "CreateRequest Format"
                },
                "metadata": {
                    "description": " Standard object's metadata",
                    "title": "metadata",
                    "$ref": "#/definitions/schemaObjectGetMetaType",
                    "x-displayname": "Metadata"
                },
                "object": {
                    "title": "object",
                    "$ref": "#/definitions/service_policyObject",
                    "x-displayname": "Object"
                },
                "referring_objects": {
                    "type": "array",
                    "description": "The set of objects that are referring to this object in their spec",
                    "title": "referring_objects",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Referring Objects"
                },
                "replace_form": {
                    "description": "Format to replace changeable values in object",
                    "title": "replace_form",
                    "$ref": "#/definitions/service_policyReplaceRequest",
                    "x-displayname": "ReplaceRequest Format"
                },
                "resource_version": {
                    "type": "string",
                    "description": "Version of the object\n\nExample: -\"42\"-",
                    "title": "resource_version",
                    "x-displayname": "Resource Version",
                    "x-ves-example": "42"
                },
                "spec": {
                    "description": " Specification of the desired behavior of the service_policy",
                    "title": "spec",
                    "$ref": "#/definitions/schemaservice_policyGetSpecType",
                    "x-displayname": "Spec"
                },
                "status": {
                    "type": "array",
                    "description": "The status reported by different services for this configuration object",
                    "title": "status",
                    "items": {
                        "$ref": "#/definitions/service_policyStatusObject"
                    },
                    "x-displayname": "Status"
                },
                "system_metadata": {
                    "description": " System generated object's metadata",
                    "title": "system metadata",
                    "$ref": "#/definitions/schemaSystemObjectGetMetaType",
                    "x-displayname": "System Metadata"
                }
            }
        },
        "service_policyGetResponseFormatCode": {
            "type": "string",
            "description": "x-displayName: \"Get Response Format\"\nThis is the various forms that can be requested to be sent in the GetResponse\n\n - GET_RSP_FORMAT_DEFAULT: x-displayName: \"Default Format\"\nDefault format of returned resource\n - GET_RSP_FORMAT_FOR_CREATE: x-displayName: \"Create request Format\"\nResponse should be in CreateRequest format\n - GET_RSP_FORMAT_FOR_REPLACE: x-displayName: \"Replace request format\"\nResponse should be in ReplaceRequest format\n - GET_RSP_FORMAT_STATUS: x-displayName: \"Status format\"\nResponse should be in StatusObject(s) format\n - GET_RSP_FORMAT_READ: x-displayName: \"GetSpecType format\"\nResponse should be in format of GetSpecType\n - GET_RSP_FORMAT_REFERRING_OBJECTS: x-displayName: \"Referring Objects\"\nResponse should have other objects referring to this object",
            "title": "GetResponseFormatCode",
            "enum": [
                "GET_RSP_FORMAT_DEFAULT",
                "GET_RSP_FORMAT_FOR_CREATE",
                "GET_RSP_FORMAT_FOR_REPLACE",
                "GET_RSP_FORMAT_STATUS",
                "GET_RSP_FORMAT_READ",
                "GET_RSP_FORMAT_REFERRING_OBJECTS"
            ],
            "default": "GET_RSP_FORMAT_DEFAULT"
        },
        "service_policyLegacyRuleList": {
            "type": "object",
            "description": "A list of references to service_policy_rule objects.\nThe order of evaluation of the rules depends on the rule combining algorithm.",
            "title": "LegacyRuleList",
            "x-displayname": "Legacy Rules",
            "x-ves-proto-message": "ves.io.schema.service_policy.LegacyRuleList",
            "properties": {
                "rules": {
                    "type": "array",
                    "description": " A list of references to service_policy_rule objects.\n The order of evaluation of the rules depends on the rule combining algorithm.",
                    "title": "rules",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Rules"
                }
            }
        },
        "service_policyListResponse": {
            "type": "object",
            "description": "This is the output message of 'List' RPC.",
            "title": "ListResponse is the collection of service_policy",
            "x-displayname": "List Response",
            "x-ves-proto-message": "ves.io.schema.service_policy.ListResponse",
            "properties": {
                "errors": {
                    "type": "array",
                    "description": " Errors(if any) while listing items from collection",
                    "title": "errors",
                    "items": {
                        "$ref": "#/definitions/schemaErrorType"
                    },
                    "x-displayname": "Errors"
                },
                "items": {
                    "type": "array",
                    "description": " items represents the collection in response",
                    "title": "items",
                    "items": {
                        "$ref": "#/definitions/service_policyListResponseItem"
                    },
                    "x-displayname": "Items"
                }
            }
        },
        "service_policyListResponseItem": {
            "type": "object",
            "description": "By default a summary of service_policy is returned in 'List'. By setting\n'report_fields' in the ListRequest more details of each item can be got.",
            "title": "ListResponseItem is an individual item in a collection of service_policy",
            "x-displayname": "List Item",
            "x-ves-proto-message": "ves.io.schema.service_policy.ListResponseItem",
            "properties": {
                "annotations": {
                    "type": "object",
                    "description": " The set of annotations present on this service_policy",
                    "title": "annotations",
                    "x-displayname": "Annotations"
                },
                "description": {
                    "type": "string",
                    "description": " The description set for this service_policy",
                    "title": "description",
                    "x-displayname": "Description"
                },
                "disabled": {
                    "type": "boolean",
                    "description": " A value of true indicates service_policy is administratively disabled",
                    "title": "disabled",
                    "format": "boolean",
                    "x-displayname": "Disabled"
                },
                "get_spec": {
                    "description": " If ListRequest has any specified report_fields, it will appear in object",
                    "title": "get_spec",
                    "$ref": "#/definitions/schemaservice_policyGetSpecType",
                    "x-displayname": "Get Specification"
                },
                "labels": {
                    "type": "object",
                    "description": " The set of labels present on this service_policy",
                    "title": "labels",
                    "x-displayname": "Labels"
                },
                "metadata": {
                    "description": " If list request has report_fields set then metadata will\n contain all the metadata associated with the object.",
                    "title": "metadata",
                    "$ref": "#/definitions/schemaObjectGetMetaType",
                    "x-displayname": "Metadata"
                },
                "name": {
                    "type": "string",
                    "description": " The name of this service_policy\n\nExample: - \"name\"-",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "name"
                },
                "namespace": {
                    "type": "string",
                    "description": " The namespace this item belongs to\n\nExample: - \"ns1\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "ns1"
                },
                "object": {
                    "description": " If ListRequest has any specified report_fields, it will appear in object\n DEPRECATED by get_spec, metadata and system_metadata",
                    "title": "object",
                    "$ref": "#/definitions/service_policyObject",
                    "x-displayname": "Object"
                },
                "owner_view": {
                    "description": " Reference to the view object that owns this object.\n If there is no view owner, this field will be nil.\n If not nil, this object can only be edited/deleted through the view",
                    "title": "owner_view",
                    "$ref": "#/definitions/schemaViewRefType",
                    "x-displayname": "Owner View"
                },
                "status_set": {
                    "type": "array",
                    "description": " The status reported by different services for this configuration object",
                    "title": "status",
                    "items": {
                        "$ref": "#/definitions/service_policyStatusObject"
                    },
                    "x-displayname": "Status"
                },
                "system_metadata": {
                    "description": " If list request has report_fields set then system_metadata will\n contain all the system generated details of this object.",
                    "title": "system_metadata",
                    "$ref": "#/definitions/schemaSystemObjectGetMetaType",
                    "x-displayname": "System Metadata"
                },
                "tenant": {
                    "type": "string",
                    "description": " The tenant this item belongs to\n\nExample: - \"acmecorp\"-",
                    "title": "tenant",
                    "x-displayname": "Tenant",
                    "x-ves-example": "acmecorp"
                },
                "uid": {
                    "type": "string",
                    "description": " The unique uid of this service_policy\n\nExample: - \"d27938ba-967e-40a7-9709-57b8627f9f75\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "d27938ba-967e-40a7-9709-57b8627f9f75"
                }
            }
        },
        "service_policyObject": {
            "type": "object",
            "description": "Service Policy object",
            "title": "Service Policy object",
            "x-displayname": "Object",
            "x-ves-proto-message": "ves.io.schema.service_policy.Object",
            "properties": {
                "metadata": {
                    "description": " Standard object's metadata",
                    "title": "metadata",
                    "$ref": "#/definitions/schemaObjectMetaType",
                    "x-displayname": "Metadata"
                },
                "spec": {
                    "description": " Specification of the desired behavior of the service_policy",
                    "title": "spec",
                    "$ref": "#/definitions/service_policySpecType",
                    "x-displayname": "Spec"
                },
                "system_metadata": {
                    "description": " System generated object's metadata",
                    "title": "system_metadata",
                    "$ref": "#/definitions/schemaSystemObjectMetaType",
                    "x-displayname": "System Metadata"
                }
            }
        },
        "service_policyReplaceRequest": {
            "type": "object",
            "description": "This is the input message of the 'Replace' RPC",
            "title": "ReplaceRequest is used to replace contents of a service_policy",
            "x-displayname": "Replace Request",
            "x-ves-proto-message": "ves.io.schema.service_policy.ReplaceRequest",
            "properties": {
                "metadata": {
                    "description": " Standard object's metadata",
                    "title": "metadata",
                    "$ref": "#/definitions/schemaObjectReplaceMetaType",
                    "x-displayname": "Metadata"
                },
                "resource_version": {
                    "type": "string",
                    "description": "If provided, do the replace operation if the configuration object is still at 'resource_version'\n\nExample: -\"42\"-",
                    "title": "resource_version",
                    "x-displayname": "Resource Version",
                    "x-ves-example": "42"
                },
                "spec": {
                    "description": " Specification of the desired behavior of the service_policy",
                    "title": "spec",
                    "$ref": "#/definitions/schemaservice_policyReplaceSpecType",
                    "x-displayname": "Spec"
                }
            }
        },
        "service_policyReplaceResponse": {
            "type": "object",
            "x-ves-proto-message": "ves.io.schema.service_policy.ReplaceResponse"
        },
        "service_policyRule": {
            "type": "object",
            "description": "A Rule consists of an unordered list of predicates and an action. The predicates are evaluated against a set of input fields that are extracted from\nor derived from an L7 request API. A request API is considered to match the simple rule if all predicates in the rule evaluate to true for that request. Any\npredicates that are not specified in a rule are implicitly considered to be true. If a request API matches a simple rule, the action for the simple rule is\nenforced.",
            "title": "rule",
            "x-displayname": "Rule",
            "x-ves-proto-message": "ves.io.schema.service_policy.Rule",
            "properties": {
                "metadata": {
                    "description": " Common attributes for the rule including name and description.\nRequired: YES",
                    "title": "metadata",
                    "$ref": "#/definitions/schemaMessageMetaType",
                    "x-displayname": "Metadata",
                    "x-ves-required": "true"
                },
                "spec": {
                    "description": " Specification for the rule including match predicates and actions.\nRequired: YES",
                    "title": "spec",
                    "$ref": "#/definitions/schemaservice_policy_ruleGlobalSpecType",
                    "x-displayname": "Rule Specification",
                    "x-ves-required": "true"
                }
            }
        },
        "service_policyRuleList": {
            "type": "object",
            "description": "A list of rules.\nThe order of evaluation of the rules depends on the rule combining algorithm.",
            "title": "rule list",
            "x-displayname": "Rule List",
            "x-ves-proto-message": "ves.io.schema.service_policy.RuleList",
            "properties": {
                "rules": {
                    "type": "array",
                    "description": " A list of rules.\n The order of evaluation of the rules depends on the rule combining algorithm.",
                    "title": "rules",
                    "items": {
                        "$ref": "#/definitions/service_policyRule"
                    },
                    "x-displayname": "Rules"
                }
            }
        },
        "service_policySimpleRule": {
            "type": "object",
            "description": "A SimpleRule consists of an unordered list of predicates and an action. The predicates are evaluated against a set of input fields that are extracted from\nor derived from an L7 request API. A request API is considered to match the simple rule if all predicates in the rule evaluate to true for that request. Any\npredicates that are not specified in a rule are implicitly considered to be true. If a request API matches a simple rule, the action for the simple rule is\nenforced.\n\nA SimpleRule does not currently support any predicates that contain references to objects.",
            "title": "simple rule",
            "x-displayname": "Simple Rule",
            "x-ves-proto-message": "ves.io.schema.service_policy.SimpleRule",
            "properties": {
                "action": {
                    "description": " Action to be enforced if the input request matches the rule.",
                    "title": "action",
                    "$ref": "#/definitions/policyRuleAction",
                    "x-displayname": "Action"
                },
                "api_group_matcher": {
                    "description": " The list of expected API group names to which the request API belongs. The actual list of API group names for the request API is determined from the api\n group and api group element configuration objects using the HTTP method and the HTTP path as inputs.\n The predicate evaluates to true if any of the actual API group names for the request is equal to any of the values in the api group matcher.",
                    "title": "api group matcher",
                    "$ref": "#/definitions/policyStringMatcherType",
                    "x-displayname": "API Group Matcher"
                },
                "asn_list": {
                    "description": " List of 4-byte ASN values.\n The predicate evaluates to true if the origin ASN is present in the ASN list.",
                    "title": "asn list",
                    "$ref": "#/definitions/policyAsnMatchList",
                    "x-displayname": "ASN List"
                },
                "client_role": {
                    "description": " The expected role(s) of the client invoking the request API. The actual roles for the client are derived from the user and namespace information in the\n API request.\n The predicate evaluates to true if any of the client's roles match the value(s) specified in client role.",
                    "title": "client role",
                    "$ref": "#/definitions/policyRoleMatcherType",
                    "x-displayname": "Client Role"
                },
                "client_selector": {
                    "description": " A label selector that describes the expected set of clients. The labels associated with the client making the API request are used to evaluate the label\n expressions in the selector. These labels can be derived from the client TLS certificate or from the volterra internal control plane.\n This is a more flexible and powerful version of the client name matcher predicate that allows a given rule to be applicable to a set of clients based on the\n client labels rather than being limited to relying on patterns in the client name.\n The predicate evaluates to true if the expressions in the label selector are true for the client labels.",
                    "title": "client selector",
                    "$ref": "#/definitions/schemaLabelSelectorType",
                    "x-displayname": "Group of Clients by Label Selector"
                },
                "description": {
                    "type": "string",
                    "description": " Description for the rule.\n\nExample: - \"Deny access to Facebook\"-",
                    "title": "description",
                    "x-displayname": "Description",
                    "x-ves-example": "Deny access to Facebook"
                },
                "domain_matcher": {
                    "description": " A list of exact values and/or regular expressions for the expected name of the domain. The actual value of domain is the host component\n from the URL. The predicate evaluates to true if the domain value matches any of the exact values or regular expressions in the domain\n matcher.",
                    "title": "domain matcher",
                    "$ref": "#/definitions/policyMatcherType",
                    "x-displayname": "Domain Matcher"
                },
                "dst_ip_prefix_list": {
                    "description": " List of IPv4 Prefixes values.\n The predicate evaluates to true if the destination address is covered by one or more of the IPv4 Prefixes from the list.",
                    "title": "dst ip prefix list",
                    "$ref": "#/definitions/policyPrefixMatchList",
                    "x-displayname": "Destination IPv4 Prefix List"
                },
                "expiration_timestamp": {
                    "type": "string",
                    "description": " The expiration_timestamp is the RFC 3339 format timestamp at which the containing rule is considered to be logically expired. The rule continues to exist in\n the configuration but is not applied anymore.\n\nExample: - \"2019-12-31:44:34.171543432Z\"-",
                    "title": "expiration timestamp",
                    "format": "date-time",
                    "x-displayname": "Expiration Timestamp",
                    "x-ves-example": "2019-12-31:44:34.171543432Z"
                },
                "headers": {
                    "type": "array",
                    "description": " A list of predicates for various HTTP headers that need to match. The criteria for matching each HTTP header are described in individual HeaderMatcherType\n instances. The actual HTTP header values are extracted from the request API as a list of strings for each HTTP header type.\n Note that all specified header predicates must evaluate to true.",
                    "title": "headers",
                    "items": {
                        "$ref": "#/definitions/schemapolicyHeaderMatcherType"
                    },
                    "x-displayname": "HTTP Headers"
                },
                "http_method": {
                    "description": " The list of expected values for the HTTP method in the request API. The actual value of the HTTP method is extracted from the HTTP request.\n The predicate evaluates to true if the actual HTTP method belongs is present in the list of expected values.",
                    "title": "method",
                    "$ref": "#/definitions/policyHttpMethodMatcherType",
                    "x-displayname": "HTTP Method"
                },
                "ip_prefix_list": {
                    "description": " List of IPv4 Prefixes values.\n The predicate evaluates to true if the client IPv4 Address is covered by one or more of the IPv4 Prefixes from the list.",
                    "title": "ip prefix list",
                    "$ref": "#/definitions/policyPrefixMatchList",
                    "x-displayname": "IPv4 Prefix List"
                },
                "l4_dest_matcher": {
                    "description": " A L4 Destination matcher specifies a list of IPv4 prefixes and a TCP port range as match criteria. The match is considered successful if the destination\n IP matches one of the prefixes and the destination port belongs to the port range.",
                    "title": "l4 dest matcher",
                    "$ref": "#/definitions/policyL4DestMatcherType",
                    "x-displayname": "L4 Destination Matcher"
                },
                "label_matcher": {
                    "description": " A list of label keys that identify the label values that need to be the same for the client and server. Note that the actual label values are not specified\n here, just the label keys. This predicate facilitates reuse of rules and policies across multiple dimensions such as deployment, environment, and location.\n The predicate evaluates to true if the values of the client and server labels for all the keys specified in the label matcher are equal. The values of any\n other labels do not matter.\n\nExample: - \"['environment', 'location', 'deployment']\"-",
                    "title": "label matcher",
                    "$ref": "#/definitions/schemaLabelMatcherType",
                    "x-displayname": "Label Matcher",
                    "x-ves-example": "['environment', 'location', 'deployment']"
                },
                "metric_name_label": {
                    "type": "string",
                    "description": " Name label to use in service policy rule metrics generated for this simple rule.",
                    "title": "metric_name_label",
                    "x-displayname": "Metric Name Label"
                },
                "name": {
                    "type": "string",
                    "description": " Name of the rule.",
                    "title": "name",
                    "x-displayname": "Name"
                },
                "path": {
                    "description": " A list of exact values, prefixes and regular expressions for the expected value of the HTTP path. The actual value of the HTTP path is the unescaped path\n value extracted from the HTTP URL Resource, excluding any query and fragment information.\n The predicate evaluates to true if the actual path value matches any of the exact or prefix values or regular expressions in the path matcher.",
                    "title": "path",
                    "$ref": "#/definitions/schemapolicyPathMatcherType",
                    "x-displayname": "HTTP Path"
                },
                "port_matcher": {
                    "description": " The list of port ranges to which the destination port should belong. In case of an HTTP Connect, the port is extracted from the desired destination.",
                    "title": "port matcher",
                    "$ref": "#/definitions/policyPortMatcherType",
                    "x-displayname": "Port Matcher"
                },
                "scheme": {
                    "type": "array",
                    "description": " The scheme in the request.\n\nExample: - \"HTTPS\"-",
                    "title": "scheme",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Scheme",
                    "x-ves-example": "HTTPS"
                },
                "server_selector": {
                    "description": " A label selector that describes the expected set of servers.\n The predicate evaluates to true if the expressions in the label selector are true for the server labels.",
                    "title": "server selector",
                    "$ref": "#/definitions/schemaLabelSelectorType",
                    "x-displayname": "Group of Servers by Label Selector"
                },
                "tls_fingerprint_matcher": {
                    "description": " TLS JA3 fingerprints to be matched.\n The predicate evaluates to true if the TLS fingerprint matches any of the exact values or classes of known TLS fingerprints.",
                    "title": "TLS JA3 fingerprint matcher",
                    "$ref": "#/definitions/policyTlsFingerprintMatcherType",
                    "x-displayname": "TLS Fingerprint Matcher"
                },
                "url_matcher": {
                    "description": " A URL matcher specifies a list of URL items as match criteria. The match is considered successful if the domain and path match any of the URL items.",
                    "title": "url matcher",
                    "$ref": "#/definitions/policyURLMatcherType",
                    "x-displayname": "URL Matcher"
                },
                "waf_action": {
                    "description": " App Firewall action to be enforced if the input request matches the rule.",
                    "title": "App Firewall Action",
                    "$ref": "#/definitions/policyWafAction",
                    "x-displayname": "App Firewall Action"
                }
            }
        },
        "service_policySourceList": {
            "type": "object",
            "description": "List of sources. A request belongs to this list if it satifies any of the match criteria.",
            "title": "source_list",
            "x-displayname": "Source List",
            "x-ves-displayorder": "2,3,4,5,6,7",
            "x-ves-oneof-field-default_action_choice": "[\"default_action_allow\",\"default_action_deny\",\"default_action_next_policy\"]",
            "x-ves-proto-message": "ves.io.schema.service_policy.SourceList",
            "properties": {
                "asn_list": {
                    "description": " Addresses that belong to the ASNs in the given list\n The ASN is obtained by performing a lookup for the source IPv4 Address in a GeoIP DB.",
                    "title": "asn_list",
                    "$ref": "#/definitions/policyAsnMatchList",
                    "x-displayname": "BGP ASN List"
                },
                "asn_set": {
                    "type": "array",
                    "description": " Addresses that belong to the ASNs in the given bgp_asn_set\n The ASN is obtained by performing a lookup for the source IPv4 Address in a GeoIP DB.",
                    "title": "asn_set",
                    "items": {
                        "$ref": "#/definitions/schemaviewsObjectRefType"
                    },
                    "x-displayname": "BGP ASN Set"
                },
                "country_list": {
                    "type": "array",
                    "description": " Addresses that belong to one of the countries in the given list\n The country is obtained by performing a lookup for the source IPv4 Address in a GeoIP DB.",
                    "title": "country_list",
                    "items": {
                        "$ref": "#/definitions/policyCountryCode"
                    },
                    "x-displayname": "Country List"
                },
                "default_action_allow": {
                    "description": "Exclusive with [default_action_deny default_action_next_policy]\nx-displayName: \"Allow\"\nAllow all requests",
                    "title": "Allow",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "default_action_deny": {
                    "description": "Exclusive with [default_action_allow default_action_next_policy]\nx-displayName: \"Deny\"\nDeny all requests",
                    "title": "Deny",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "default_action_next_policy": {
                    "description": "Exclusive with [default_action_allow default_action_deny]\nx-displayName: \"Next Policy\"\nEvaluate the next service policy",
                    "title": "Next Policy",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "ip_prefix_set": {
                    "type": "array",
                    "description": " Addresses that are covered by the prefixes in the given ip_prefix_set",
                    "title": "ip_prefix_set",
                    "items": {
                        "$ref": "#/definitions/schemaviewsObjectRefType"
                    },
                    "x-displayname": "IP Prefix Set"
                },
                "prefix_list": {
                    "description": " Addresses that are covered by the given list of IPv4 prefixes",
                    "title": "prefix_list",
                    "$ref": "#/definitions/viewsPrefixStringListType",
                    "x-displayname": "IPv4 Prefix List"
                },
                "tls_fingerprint_classes": {
                    "type": "array",
                    "description": " A list of known classes of TLS fingerprints to match the input TLS JA3 fingerprint against.",
                    "title": "tls_fingerprint_classes",
                    "items": {
                        "$ref": "#/definitions/policyKnownTlsFingerprintClass"
                    },
                    "x-displayname": "TLS Fingerprint Classes"
                },
                "tls_fingerprint_values": {
                    "type": "array",
                    "description": " A list of exact TLS JA3 fingerprints to match the input TLS JA3 fingerprint against.",
                    "title": "tls_fingerprint_classes",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "TLS Fingerprint Values"
                }
            }
        },
        "service_policySpecType": {
            "type": "object",
            "description": "Shape of the service_policy specification",
            "title": "Specification of service policy",
            "x-displayname": "Specification",
            "x-ves-proto-message": "ves.io.schema.service_policy.SpecType",
            "properties": {
                "gc_spec": {
                    "title": "gc_spec",
                    "$ref": "#/definitions/schemaservice_policyGlobalSpecType",
                    "x-displayname": "GC Spec"
                }
            }
        },
        "service_policyStatusObject": {
            "type": "object",
            "description": "Most recently observed status of object",
            "title": "Status of service Policy",
            "x-displayname": "Status",
            "x-ves-proto-message": "ves.io.schema.service_policy.StatusObject",
            "properties": {
                "conditions": {
                    "type": "array",
                    "description": " Conditions reported by various component of the system",
                    "title": "conditions",
                    "items": {
                        "$ref": "#/definitions/schemaConditionType"
                    },
                    "x-displayname": "Conditions"
                },
                "metadata": {
                    "description": " Standard status's metadata",
                    "title": "metadata",
                    "$ref": "#/definitions/schemaStatusMetaType",
                    "x-displayname": "Metadata"
                },
                "object_refs": {
                    "type": "array",
                    "description": " Object reference",
                    "title": "object_refs",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Config Object"
                }
            }
        },
        "viewsPrefixStringListType": {
            "type": "object",
            "description": "x-example: \"192.168.20.0/24\"\nList of IPv4 prefixes that represent an endpoint",
            "title": "ipv4 prefix list",
            "x-displayname": "IPv4 Prefix List",
            "x-ves-proto-message": "ves.io.schema.views.PrefixStringListType",
            "properties": {
                "prefixes": {
                    "type": "array",
                    "description": " List of IPv4 prefixes that represent an endpoint\n\nExample: - \"192.168.20.0/24\"-\nRequired: YES",
                    "title": "ipv4 prefix list",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "IPv4 Prefix List",
                    "x-ves-example": "192.168.20.0/24",
                    "x-ves-required": "true"
                }
            }
        },
        "waf_rule_listWafRuleID": {
            "type": "string",
            "description": "Supported WAF rule IDs\n\nUsed internally to instruct the modsec code in envoy to skip all rules\nRequest from Known Malicious Client (Based on previous traffic violations).\nClient IP is from a HIGH Risk Country Location.\nHTTP Blacklist match for search engine IP\nHTTP Blacklist match for spammer IP\nHTTP Blacklist match for suspicious IP\nHTTP Blacklist match for harvester IP\nMethod is not allowed by policy\nDenial of Service (DoS) attack identified from %{tx.real_ip} (%{tx.dos_block_counter} hits since last alert)\nFound User-Agent associated with security scanner\nFound User-Agent associated with scripting/generic HTTP client\nFound User-Agent associated with web crawler/bot\nFound request header associated with security scanner\nFound request filename/argument associated with security scanner\nInvalid HTTP Request Line\nAttempted multipart/form-data bypass\nAttempted multipart/form-data bypass\nFailed to parse request body.\nMultipart request body failed strict validation:PE %{REQBODY_PROCESSOR_ERROR},BQ %{MULTIPART_BOUNDARY_QUOTED},BW %{MULTIPART_BOUNDARY_WHITESPACE},DB %{MULTIPART_DATA_BEFORE},DA %{MULTIPART_DATA_AFTER},HF %{MULTIPART_HEADER_FOLDING},LF %{MULTIPART_LF_LINE},SM %{MULTIPART_MISSING_SEMICOLON},IQ %{MULTIPART_INVALID_QUOTING},IH %{MULTIPART_INVALID_HEADER_FOLDING},FLE %{MULTIPART_FILE_LIMIT_EXCEEDED}\nContent-Length HTTP header is not numeric.\nGET or HEAD Request with Body Content.\nGET or HEAD Request with Transfer-Encoding.\nPOST without Content-Length or Transfer-Encoding headers.\nRange: Invalid Last Byte Value.\nRange: Too many fields (6 or more)\nRange: Too many fields for pdf request (63 or more)\nRange: Too many fields for pdf request (6 or more)\nMultiple/Conflicting Connection Header Data Found.\nURL Encoding Abuse Attack Attempt\nMultiple URL Encoding Detected\nURL Encoding Abuse Attack Attempt\nUTF8 Encoding Abuse Attack Attempt\nUnicode Full/Half Width Abuse Attack Attempt\nInvalid character in request (null character)\nInvalid character in request (non printable characters)\nInvalid character in request (outside of printable chars below ascii 127)\nInvalid character in request (outside of very strict set)\nInvalid character in request headers (outside of very strict set)\nRequest Containing Content Requires Content-Type header\nHost header is a numeric IP address\nArgument name too long\nArgument value too long\nToo many arguments in request\nTotal arguments size exceeded\nUploaded file size too large\nTotal uploaded files size too large\nRequest content type is not allowed by policy\nHTTP protocol version is not allowed by policy\nURL file extension is restricted by policy\nHTTP header is restricted by policy (%{MATCHED_VAR})\nAbnormal character escapes in request\nIllegal Content-Type header\nRequest content type charset is not allowed by policy\nHTTP Request Smuggling Attack\nHTTP Response Splitting Attack\nHTTP Response Splitting Attack\nHTTP Header Injection Attack via headers\nHTTP Header Injection Attack via payload (CR/LF detected)\nHTTP Header Injection Attack via payload (CR/LF detected)\nHTTP Header Injection Attack via payload (CR/LF and header-name detected)\nPath Traversal Attack (/../)\nPath Traversal Attack (/../)\nOS File Access Attempt\nRestricted File Access Attempt\nPossible Remote File Inclusion (RFI) Attack: URL Parameter using IP Address\nPossible Remote File Inclusion (RFI) Attack: Common RFI Vulnerable Parameter Name used w/URL Payload\nPossible Remote File Inclusion (RFI) Attack: URL Payload Used w/Trailing Question Mark Character (?)\nPossible Remote File Inclusion (RFI) Attack: Off-Domain Reference/Link\nRemote Command Execution: Unix Command Injection\nRemote Command Execution: Unix Command Injection\nRemote Command Execution: Unix Command Injection\nRemote Command Execution: Windows Command Injection\nRemote Command Execution: Windows Command Injection\nRemote Command Execution: Windows PowerShell Command Found\nRemote Command Execution: Unix Shell Expression Found\nRemote Command Execution: Windows FOR/IF Command Found\nRemote Command Execution: Direct Unix Command Execution\nRemote Command Execution: Unix Shell Code Found\nRemote Command Execution: Shellshock (CVE-2014-6271)\nRemote Command Execution: Shellshock (CVE-2014-6271)\nRestricted File Upload Attempt\nRemote Command Execution: Wildcard bypass technique attempt\nPHP Injection Attack: PHP Open Tag Found\nPHP Injection Attack: PHP Script File Upload Found\nPHP Injection Attack: PHP Script File Upload Found\nPHP Injection Attack: Configuration Directive Found\nPHP Injection Attack: Variables Found\nPHP Injection Attack: Variables Found\nPHP Injection Attack: I/O Stream Found\nPHP Injection Attack: High-Risk PHP Function Name Found\nPHP Injection Attack: Medium-Risk PHP Function Name Found\nPHP Injection Attack: High-Risk PHP Function Call Found\nPHP Injection Attack: Low-Value PHP Function Call Found\nPHP Injection Attack: Serialized Object Injection\nPHP Injection Attack: Variable Function Call Found\nPHP Injection Attack: PHP Closing Tag Found\nXSS Attack Detected via libinjection\nXSS Attack Detected via libinjection\nXSS Filter - Category 1: Script Tag Vector\nXSS Filter - Category 2: Event Handler Vector\nXSS Filter - Category 3: Attribute Vector\nXSS Filter - Category 4: Javascript URI Vector\nXSS Filter - Category 5: Disallowed HTML Attributes\nNoScript XSS InjectionChecker: HTML Injection\nNoScript XSS InjectionChecker: Attribute Injection\nNode-Validator Blacklist Keywords\nIE XSS Filters - Attack Detected.\nIE XSS Filters - Attack Detected.\nIE XSS Filters - Attack Detected.\nIE XSS Filters - Attack Detected.\nIE XSS Filters - Attack Detected.\nIE XSS Filters - Attack Detected.\nIE XSS Filters - Attack Detected.\nIE XSS Filters - Attack Detected.\nIE XSS Filters - Attack Detected.\nIE XSS Filters - Attack Detected.\nIE XSS Filters - Attack Detected.\nIE XSS Filters - Attack Detected.\nUS-ASCII Malformed Encoding XSS Filter - Attack Detected.\nPossible XSS Attack Detected - HTML Tag Handler\nIE XSS Filters - Attack Detected.\nIE XSS Filters - Attack Detected.\nUTF-7 Encoding IE XSS - Attack Detected.\nSQL Injection Attack Detected via libinjection\nSQL Injection Attack: Common Injection Testing Detected\nSQL Injection Attack: SQL Operator Detected\nSQL Injection Attack: SQL Tautology Detected.\nSQL Injection Attack: Common DB Names Detected\nSQL Injection Attack\nDetects blind sqli tests using sleep() or benchmark().\nDetects SQL benchmark and sleep injection attempts including conditional queries\nDetects basic SQL authentication bypass attempts 1/3\nDetects MSSQL code execution and information gathering attempts\nDetects MySQL comment-/space-obfuscated injections and backtick termination\nDetects chained SQL injection attempts 1/2\nLooking for integer overflow attacks, these are taken from skipfish, except 3.0.00738585072007e-308 is the \\\nDetects conditional SQL injection attempts\nDetects MySQL charset switch and MSSQL DoS attempts\nDetects MATCH AGAINST, MERGE and EXECUTE IMMEDIATE injections\nDetects HAVING injections\nDetects basic SQL authentication bypass attempts 2/3\nLooking for basic sql injection. Common attack string for mysql, oracle and others.\nDetects Postgres pg_sleep injection, waitfor delay attacks and database shutdown attempts\nFinds basic MongoDB SQL injection attempts\nDetects MySQL comments, conditions and ch(a)r injections\nDetects chained SQL injection attempts 2/2\nDetects MySQL and PostgreSQL stored procedure/function injections\nDetects classic SQL injection probings 1/3\nDetects basic SQL authentication bypass attempts 3/3\nDetects MySQL UDF injection and other data/structure manipulation attempts\nDetects concatenated basic SQL injection and SQLLFI attempts\nDetects basic SQL injection based on keyword alter or union\nDetects classic SQL injection probings 2/3\nSQL Injection Attack\nSQL Injection Attack\nSQL Injection Attack\nSQL Injection Attack\nRestricted SQL Character Anomaly Detection (cookies): # of special characters exceeded (8)\nRestricted SQL Character Anomaly Detection (cookies): # of special characters exceeded (3)\nRestricted SQL Character Anomaly Detection (args): # of special characters exceeded (12)\nRestricted SQL Character Anomaly Detection (args): # of special characters exceeded (6)\nRestricted SQL Character Anomaly Detection (args): # of special characters exceeded (2)\nSQL Comment Sequence Detected.\nSQL Hex Encoding Identified\nMeta-Character Anomaly Detection Alert - Repetitive Non-Word Characters\nSQL Injection Attack\nSQL Injection Attack\nDetects classic SQL injection probings 3/3\nPossible Session Fixation Attack: Setting Cookie Values in HTML\nPossible Session Fixation Attack: SessionID Parameter Name with Off-Domain Referer\nPossible Session Fixation Attack: SessionID Parameter Name with No Referer\nRemote Command Execution: Suspicious Java class detected\nRemote Command Execution: Java process spawn (CVE-2017-9805)\nRemote Command Execution: Java serialization (CVE-2015-5842)\nSuspicious Java class detected\nMagic bytes Detected, probable java serialization in use\nMagic bytes Detected Base64 Encoded, probable java serialization in use\nRemote Command Execution: Java serialization (CVE-2015-5842)\nRemote Command Execution: Suspicious Java method detected\nBase64 encoded string matched suspicious keyword\nThe Application Returned a 500-Level Status Code\nDirectory Listing\nMicrosoft Access SQL Information Leakage\nOracle SQL Information Leakage\nDB2 SQL Information Leakage\nEMC SQL Information Leakage\nfirebird SQL Information Leakage\nFrontbase SQL Information Leakage\nhsqldb SQL Information Leakage\ninformix SQL Information Leakage\ningres SQL Information Leakage\ninterbase SQL Information Leakage\nmaxDB SQL Information Leakage\nmssql SQL Information Leakage\nmysql SQL Information Leakage\npostgres SQL Information Leakage\nsqlite SQL Information Leakage\nSybase SQL Information Leakage\nJava Source Code Leakage\nJava Errors\nPHP Information Leakage\nPHP source code leakage\nPHP source code leakage\nDisclosure of IIS install location\nApplication Availability Error\nIIS Information Leakage\nIIS Information Leakage\nEnable Drupal specific CRS exclusions\nEnable Wordpress specific CRS exclusions\nEnable Cpanel specific CRS exclusions\nEnable Dokuwiki specific CRS exclusions\nEnable Nextcloud specific CRS exclusions\nEnable Xenforo specific CRS exclusions",
            "title": "WAF Rule ID",
            "enum": [
                "WAF_RULE_ALL",
                "WAF_RULE_910000",
                "WAF_RULE_910100",
                "WAF_RULE_910150",
                "WAF_RULE_910160",
                "WAF_RULE_910170",
                "WAF_RULE_910180",
                "WAF_RULE_911100",
                "WAF_RULE_912120",
                "WAF_RULE_913100",
                "WAF_RULE_913101",
                "WAF_RULE_913102",
                "WAF_RULE_913110",
                "WAF_RULE_913120",
                "WAF_RULE_920100",
                "WAF_RULE_920120",
                "WAF_RULE_920121",
                "WAF_RULE_920130",
                "WAF_RULE_920140",
                "WAF_RULE_920160",
                "WAF_RULE_920170",
                "WAF_RULE_920171",
                "WAF_RULE_920180",
                "WAF_RULE_920190",
                "WAF_RULE_920200",
                "WAF_RULE_920201",
                "WAF_RULE_920202",
                "WAF_RULE_920210",
                "WAF_RULE_920220",
                "WAF_RULE_920230",
                "WAF_RULE_920240",
                "WAF_RULE_920250",
                "WAF_RULE_920260",
                "WAF_RULE_920270",
                "WAF_RULE_920271",
                "WAF_RULE_920272",
                "WAF_RULE_920273",
                "WAF_RULE_920274",
                "WAF_RULE_920341",
                "WAF_RULE_920350",
                "WAF_RULE_920360",
                "WAF_RULE_920370",
                "WAF_RULE_920380",
                "WAF_RULE_920390",
                "WAF_RULE_920400",
                "WAF_RULE_920410",
                "WAF_RULE_920420",
                "WAF_RULE_920430",
                "WAF_RULE_920440",
                "WAF_RULE_920450",
                "WAF_RULE_920460",
                "WAF_RULE_920470",
                "WAF_RULE_920480",
                "WAF_RULE_921110",
                "WAF_RULE_921120",
                "WAF_RULE_921130",
                "WAF_RULE_921140",
                "WAF_RULE_921150",
                "WAF_RULE_921151",
                "WAF_RULE_921160",
                "WAF_RULE_930100",
                "WAF_RULE_930110",
                "WAF_RULE_930120",
                "WAF_RULE_930130",
                "WAF_RULE_931100",
                "WAF_RULE_931110",
                "WAF_RULE_931120",
                "WAF_RULE_931130",
                "WAF_RULE_932100",
                "WAF_RULE_932105",
                "WAF_RULE_932106",
                "WAF_RULE_932110",
                "WAF_RULE_932115",
                "WAF_RULE_932120",
                "WAF_RULE_932130",
                "WAF_RULE_932140",
                "WAF_RULE_932150",
                "WAF_RULE_932160",
                "WAF_RULE_932170",
                "WAF_RULE_932171",
                "WAF_RULE_932180",
                "WAF_RULE_932190",
                "WAF_RULE_933100",
                "WAF_RULE_933110",
                "WAF_RULE_933111",
                "WAF_RULE_933120",
                "WAF_RULE_933130",
                "WAF_RULE_933131",
                "WAF_RULE_933140",
                "WAF_RULE_933150",
                "WAF_RULE_933151",
                "WAF_RULE_933160",
                "WAF_RULE_933161",
                "WAF_RULE_933170",
                "WAF_RULE_933180",
                "WAF_RULE_933190",
                "WAF_RULE_941100",
                "WAF_RULE_941101",
                "WAF_RULE_941110",
                "WAF_RULE_941120",
                "WAF_RULE_941130",
                "WAF_RULE_941140",
                "WAF_RULE_941150",
                "WAF_RULE_941160",
                "WAF_RULE_941170",
                "WAF_RULE_941180",
                "WAF_RULE_941190",
                "WAF_RULE_941200",
                "WAF_RULE_941210",
                "WAF_RULE_941220",
                "WAF_RULE_941230",
                "WAF_RULE_941240",
                "WAF_RULE_941250",
                "WAF_RULE_941260",
                "WAF_RULE_941270",
                "WAF_RULE_941280",
                "WAF_RULE_941290",
                "WAF_RULE_941300",
                "WAF_RULE_941310",
                "WAF_RULE_941320",
                "WAF_RULE_941330",
                "WAF_RULE_941340",
                "WAF_RULE_941350",
                "WAF_RULE_942100",
                "WAF_RULE_942110",
                "WAF_RULE_942120",
                "WAF_RULE_942130",
                "WAF_RULE_942140",
                "WAF_RULE_942150",
                "WAF_RULE_942160",
                "WAF_RULE_942170",
                "WAF_RULE_942180",
                "WAF_RULE_942190",
                "WAF_RULE_942200",
                "WAF_RULE_942210",
                "WAF_RULE_942220",
                "WAF_RULE_942230",
                "WAF_RULE_942240",
                "WAF_RULE_942250",
                "WAF_RULE_942251",
                "WAF_RULE_942260",
                "WAF_RULE_942270",
                "WAF_RULE_942280",
                "WAF_RULE_942290",
                "WAF_RULE_942300",
                "WAF_RULE_942310",
                "WAF_RULE_942320",
                "WAF_RULE_942330",
                "WAF_RULE_942340",
                "WAF_RULE_942350",
                "WAF_RULE_942360",
                "WAF_RULE_942361",
                "WAF_RULE_942370",
                "WAF_RULE_942380",
                "WAF_RULE_942390",
                "WAF_RULE_942400",
                "WAF_RULE_942410",
                "WAF_RULE_942420",
                "WAF_RULE_942421",
                "WAF_RULE_942430",
                "WAF_RULE_942431",
                "WAF_RULE_942432",
                "WAF_RULE_942440",
                "WAF_RULE_942450",
                "WAF_RULE_942460",
                "WAF_RULE_942470",
                "WAF_RULE_942480",
                "WAF_RULE_942490",
                "WAF_RULE_943100",
                "WAF_RULE_943110",
                "WAF_RULE_943120",
                "WAF_RULE_944100",
                "WAF_RULE_944110",
                "WAF_RULE_944120",
                "WAF_RULE_944130",
                "WAF_RULE_944200",
                "WAF_RULE_944210",
                "WAF_RULE_944240",
                "WAF_RULE_944250",
                "WAF_RULE_944300",
                "WAF_RULE_950100",
                "WAF_RULE_950130",
                "WAF_RULE_951110",
                "WAF_RULE_951120",
                "WAF_RULE_951130",
                "WAF_RULE_951140",
                "WAF_RULE_951150",
                "WAF_RULE_951160",
                "WAF_RULE_951170",
                "WAF_RULE_951180",
                "WAF_RULE_951190",
                "WAF_RULE_951200",
                "WAF_RULE_951210",
                "WAF_RULE_951220",
                "WAF_RULE_951230",
                "WAF_RULE_951240",
                "WAF_RULE_951250",
                "WAF_RULE_951260",
                "WAF_RULE_952100",
                "WAF_RULE_952110",
                "WAF_RULE_953100",
                "WAF_RULE_953110",
                "WAF_RULE_953120",
                "WAF_RULE_954100",
                "WAF_RULE_954110",
                "WAF_RULE_954120",
                "WAF_RULE_954130",
                "WAF_RULE_4295001",
                "WAF_RULE_4295002",
                "WAF_RULE_4295003",
                "WAF_RULE_4295004",
                "WAF_RULE_4295005",
                "WAF_RULE_4295006"
            ],
            "default": "WAF_RULE_ALL",
            "x-displayname": "WAF Rule ID",
            "x-ves-proto-enum": "ves.io.schema.waf_rule_list.WafRuleID"
        }
    },
    "x-displayname": "Service Policy",
    "x-ves-proto-file": "ves.io/schema/service_policy/public_crudapi.proto"
}`

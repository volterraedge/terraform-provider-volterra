// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package waf_signatures_changelog

import (
	"bytes"
	"context"
	"fmt"
	io "io"
	"net/http"
	"strings"

	"github.com/gogo/protobuf/proto"
	"github.com/grpc-ecosystem/grpc-gateway/runtime"
	"google.golang.org/grpc"

	"gopkg.volterra.us/stdlib/client"
	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/errors"
	"gopkg.volterra.us/stdlib/server"
	"gopkg.volterra.us/stdlib/svcfw"
)

var (
	_ = fmt.Sprintf("dummy for fmt import use")
)

// Create SignatureCustomApi GRPC Client satisfying server.CustomClient
type SignatureCustomApiGrpcClient struct {
	conn       *grpc.ClientConn
	grpcClient SignatureCustomApiClient
	// map of rpc name to its invocation
	rpcFns map[string]func(context.Context, string, ...grpc.CallOption) (proto.Message, error)
}

func (c *SignatureCustomApiGrpcClient) doRPCGetStagedSignatures(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &StagedSignaturesReq{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.waf_signatures_changelog.StagedSignaturesReq", yamlReq)
	}
	rsp, err := c.grpcClient.GetStagedSignatures(ctx, req, opts...)
	return rsp, err
}

func (c *SignatureCustomApiGrpcClient) DoRPC(ctx context.Context, rpc string, opts ...server.CustomCallOpt) (proto.Message, error) {
	rpcFn, exists := c.rpcFns[rpc]
	if !exists {
		return nil, fmt.Errorf("Error, no such rpc %s", rpc)
	}
	cco := server.NewCustomCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	if cco.YAMLReq == "" {
		return nil, fmt.Errorf("Error, empty request body")
	}
	ctx = client.AddHdrsToCtx(cco.Headers, ctx)

	rsp, err := rpcFn(ctx, cco.YAMLReq, cco.GrpcCallOpts...)
	if err != nil {
		return nil, errors.Wrap(err, "Doing custom RPC using GRPC")
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return rsp, nil
}

func NewSignatureCustomApiGrpcClient(cc *grpc.ClientConn) server.CustomClient {
	ccl := &SignatureCustomApiGrpcClient{
		conn:       cc,
		grpcClient: NewSignatureCustomApiClient(cc),
	}
	rpcFns := make(map[string]func(context.Context, string, ...grpc.CallOption) (proto.Message, error))
	rpcFns["GetStagedSignatures"] = ccl.doRPCGetStagedSignatures

	ccl.rpcFns = rpcFns

	return ccl
}

// Create SignatureCustomApi REST Client satisfying server.CustomClient
type SignatureCustomApiRestClient struct {
	baseURL string
	client  http.Client
	// map of rpc name to its invocation
	rpcFns map[string]func(context.Context, *server.CustomCallOpts) (proto.Message, error)
}

func (c *SignatureCustomApiRestClient) doRPCGetStagedSignatures(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &StagedSignaturesReq{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.waf_signatures_changelog.StagedSignaturesReq: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("end_time", fmt.Sprintf("%v", req.EndTime))
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))
		q.Add("start_time", fmt.Sprintf("%v", req.StartTime))
		q.Add("vh_name", fmt.Sprintf("%v", req.VhName))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &StagedSignaturesRsp{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.waf_signatures_changelog.StagedSignaturesRsp", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *SignatureCustomApiRestClient) DoRPC(ctx context.Context, rpc string, opts ...server.CustomCallOpt) (proto.Message, error) {
	rpcFn, exists := c.rpcFns[rpc]
	if !exists {
		return nil, fmt.Errorf("Error, no such rpc %s", rpc)
	}
	cco := server.NewCustomCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	rsp, err := rpcFn(ctx, cco)
	if err != nil {
		return nil, errors.Wrap(err, "Doing custom RPC using Rest")
	}
	return rsp, nil
}

func NewSignatureCustomApiRestClient(baseURL string, hc http.Client) server.CustomClient {
	ccl := &SignatureCustomApiRestClient{
		baseURL: baseURL,
		client:  hc,
	}

	rpcFns := make(map[string]func(context.Context, *server.CustomCallOpts) (proto.Message, error))
	rpcFns["GetStagedSignatures"] = ccl.doRPCGetStagedSignatures

	ccl.rpcFns = rpcFns

	return ccl
}

// Create signatureCustomApiInprocClient

// INPROC Client (satisfying SignatureCustomApiClient interface)
type signatureCustomApiInprocClient struct {
	SignatureCustomApiServer
}

func (c *signatureCustomApiInprocClient) GetStagedSignatures(ctx context.Context, in *StagedSignaturesReq, opts ...grpc.CallOption) (*StagedSignaturesRsp, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.waf_signatures_changelog.SignatureCustomApi.GetStagedSignatures")
	return c.SignatureCustomApiServer.GetStagedSignatures(ctx, in)
}

func NewSignatureCustomApiInprocClient(svc svcfw.Service) SignatureCustomApiClient {
	return &signatureCustomApiInprocClient{SignatureCustomApiServer: NewSignatureCustomApiServer(svc)}
}

// RegisterGwSignatureCustomApiHandler registers with grpc-gw with an inproc-client backing so that
// rest to grpc happens without a grpc.Dial (thus avoiding additional certs for mTLS)
func RegisterGwSignatureCustomApiHandler(ctx context.Context, mux *runtime.ServeMux, svc interface{}) error {
	s, ok := svc.(svcfw.Service)
	if !ok {
		return fmt.Errorf("svc is not svcfw.Service")
	}
	return RegisterSignatureCustomApiHandlerClient(ctx, mux, NewSignatureCustomApiInprocClient(s))
}

// Create signatureCustomApiSrv

// SERVER (satisfying SignatureCustomApiServer interface)
type signatureCustomApiSrv struct {
	svc svcfw.Service
}

func (s *signatureCustomApiSrv) GetStagedSignatures(ctx context.Context, in *StagedSignaturesReq) (*StagedSignaturesRsp, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.waf_signatures_changelog.SignatureCustomApi")
	cah, ok := ah.(SignatureCustomApiServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *SignatureCustomApiServer", ah)
	}

	var (
		rsp *StagedSignaturesRsp
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.waf_signatures_changelog.StagedSignaturesReq", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'SignatureCustomApi.GetStagedSignatures' operation on 'waf_signatures_changelog'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.waf_signatures_changelog.SignatureCustomApi.GetStagedSignatures"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.GetStagedSignatures(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.waf_signatures_changelog.StagedSignaturesRsp", rsp)...)

	return rsp, nil
}

func NewSignatureCustomApiServer(svc svcfw.Service) SignatureCustomApiServer {
	return &signatureCustomApiSrv{svc: svc}
}

var SignatureCustomApiSwaggerJSON string = `{
    "swagger": "2.0",
    "info": {
        "title": "WAF signature related Custom APIs",
        "description": "WAF Signatures Changelog custom APIs",
        "version": "version not set"
    },
    "schemes": [
        "http",
        "https"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "tags": [],
    "paths": {
        "/public/namespaces/{namespace}/virtual_hosts/{vh_name}/staged_signatures": {
            "post": {
                "summary": "Staged Signatures",
                "description": "API to get Staged Signatures",
                "operationId": "ves.io.schema.waf_signatures_changelog.SignatureCustomApi.GetStagedSignatures",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/waf_signatures_changelogStagedSignaturesRsp"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "namespace\n\nx-example: \"shared\"\nFetch staged signatures for the given namespace",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "vh_name",
                        "description": "vh_name\n\nx-example: \"blogging-app\"\nVirtual Host for current request",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Virtual Host Name"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/waf_signatures_changelogStagedSignaturesReq"
                        }
                    }
                ],
                "tags": [
                    "SignatureCustomApi"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-waf_signatures_changelog-signaturecustomapi-getstagedsignatures"
                },
                "x-ves-proto-rpc": "ves.io.schema.waf_signatures_changelog.SignatureCustomApi.GetStagedSignatures"
            },
            "x-displayname": "Signature Custom API",
            "x-ves-proto-service": "ves.io.schema.waf_signatures_changelog.SignatureCustomApi",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        }
    },
    "definitions": {
        "waf_signatures_changelogStagedSignature": {
            "type": "object",
            "description": "Staged signature details",
            "title": "StagedSignature",
            "x-displayname": "Staged Signature",
            "x-ves-proto-message": "ves.io.schema.waf_signatures_changelog.StagedSignature",
            "properties": {
                "accuracy": {
                    "type": "string",
                    "description": " Detected signature accuracy\n\nExample: - \"Medium\"-",
                    "title": "accuracy",
                    "x-displayname": "Accuracy",
                    "x-ves-example": "Medium"
                },
                "attack_type": {
                    "type": "string",
                    "description": " The Signature Attack Type\n\nExample: - \"Server Side Code Injection\"-",
                    "title": "attack_type",
                    "x-displayname": "Attack Type",
                    "x-ves-example": "Server Side Code Injection"
                },
                "context": {
                    "type": "string",
                    "description": " Context of the signature detected.",
                    "title": "context",
                    "x-displayname": "Context"
                },
                "count": {
                    "type": "integer",
                    "description": " Number of times signature detected in traffic\n\nExample: - \"5\"-",
                    "title": "count",
                    "format": "int32",
                    "x-displayname": "Count",
                    "x-ves-example": "5"
                },
                "id": {
                    "type": "string",
                    "description": " Detected signature id\n\nExample: - \"200104853\"-",
                    "title": "id",
                    "x-displayname": "ID",
                    "x-ves-example": "200104853"
                },
                "id_name": {
                    "type": "string",
                    "description": " Signature Id name\n\nExample: - \"200101746, ontransitionrun (URI)\"-",
                    "title": "id_name",
                    "x-displayname": "Id name",
                    "x-ves-example": "200101746, ontransitionrun (URI)"
                },
                "matching_info": {
                    "type": "string",
                    "description": " Request details for the matched signature\n\nExample: - \"Matched 16 characters on offset 22 against value'/ontransitionrun/abbc/ontransitionrun='. \"-",
                    "title": "matching_info",
                    "x-displayname": "Matching Info",
                    "x-ves-example": "Matched 16 characters on offset 22 against value: '/ontransitionrun/abbc/ontransitionrun='. "
                },
                "name": {
                    "type": "string",
                    "description": " Detected signature name\n\nExample: - \"Java code injection FreeMarker - objectWrapper (URI)\"-",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "Java code injection FreeMarker - objectWrapper (URI)"
                },
                "state": {
                    "type": "string",
                    "description": " State of the signature\n\nExample: - \"Staged\"-",
                    "title": "state",
                    "x-displayname": "State",
                    "x-ves-example": "Staged"
                }
            }
        },
        "waf_signatures_changelogStagedSignaturesReq": {
            "type": "object",
            "description": "Request to get the list of all staged signatures",
            "title": "StagedSignaturesReq",
            "x-displayname": "Staged Signatures Request",
            "x-ves-proto-message": "ves.io.schema.waf_signatures_changelog.StagedSignaturesReq",
            "properties": {
                "end_time": {
                    "type": "string",
                    "description": " Fetch staged signatures whose timestamp \u003c= end_time\n format: unix_timestamp|rfc 3339\n\nExample: - \"2019-09-23T12:30:11.733Z\"-",
                    "title": "end_time",
                    "x-displayname": "End Time",
                    "x-ves-example": "2019-09-23T12:30:11.733Z"
                },
                "namespace": {
                    "type": "string",
                    "description": " Fetch staged signatures for the given namespace\n\nExample: - \"shared\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "shared"
                },
                "start_time": {
                    "type": "string",
                    "description": " Fetch staged signatures whose timestamp \u003e= start_time\n format: unix_timestamp|rfc 3339\n\nExample: - \"2019-09-23T12:30:11.733Z\"-",
                    "title": "start_time",
                    "x-displayname": "Start Time",
                    "x-ves-example": "2019-09-23T12:30:11.733Z"
                },
                "vh_name": {
                    "type": "string",
                    "description": " Virtual Host for current request\n\nExample: - \"blogging-app\"-",
                    "title": "vh_name",
                    "x-displayname": "Virtual Host Name",
                    "x-ves-example": "blogging-app"
                }
            }
        },
        "waf_signatures_changelogStagedSignaturesRsp": {
            "type": "object",
            "description": "Response to get the list of all staged signatures",
            "title": "StagedSignaturesRsp",
            "x-displayname": "Staged Signatures Response",
            "x-ves-proto-message": "ves.io.schema.waf_signatures_changelog.StagedSignaturesRsp",
            "properties": {
                "staged_signatures": {
                    "type": "array",
                    "description": " List of staged signatures",
                    "title": "staged_signatures",
                    "items": {
                        "$ref": "#/definitions/waf_signatures_changelogStagedSignature"
                    },
                    "x-displayname": "Staged Signatures"
                }
            }
        }
    },
    "x-displayname": "WAF Signatures Changelog",
    "x-ves-proto-file": "ves.io/schema/waf_signatures_changelog/public_custom_ml_api.proto"
}`

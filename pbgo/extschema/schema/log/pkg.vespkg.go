// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package log

import (
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/server"
	"gopkg.volterra.us/stdlib/svcfw"
)

func initializeValidatorRegistry(vr map[string]db.Validator) {
	vr["ves.io.schema.log.AccessLogAggregationRequest"] = AccessLogAggregationRequestValidator()
	vr["ves.io.schema.log.AccessLogRequestV2"] = AccessLogRequestV2Validator()
	vr["ves.io.schema.log.AuditLogAggregationRequest"] = AuditLogAggregationRequestValidator()
	vr["ves.io.schema.log.AuditLogRequestV2"] = AuditLogRequestV2Validator()
	vr["ves.io.schema.log.FirewallLogAggregationRequest"] = FirewallLogAggregationRequestValidator()
	vr["ves.io.schema.log.FirewallLogRequest"] = FirewallLogRequestValidator()
	vr["ves.io.schema.log.K8SAuditLogAggregationRequest"] = K8SAuditLogAggregationRequestValidator()
	vr["ves.io.schema.log.K8SAuditLogRequest"] = K8SAuditLogRequestValidator()
	vr["ves.io.schema.log.K8SEventsAggregationRequest"] = K8SEventsAggregationRequestValidator()
	vr["ves.io.schema.log.K8SEventsRequest"] = K8SEventsRequestValidator()
	vr["ves.io.schema.log.LogAggregationResponse"] = LogAggregationResponseValidator()
	vr["ves.io.schema.log.LogResponse"] = LogResponseValidator()
	vr["ves.io.schema.log.LogScrollRequest"] = LogScrollRequestValidator()
	vr["ves.io.schema.log.VK8SAuditLogAggregationRequest"] = VK8SAuditLogAggregationRequestValidator()
	vr["ves.io.schema.log.VK8SAuditLogRequest"] = VK8SAuditLogRequestValidator()
	vr["ves.io.schema.log.VK8SEventsAggregationRequest"] = VK8SEventsAggregationRequestValidator()
	vr["ves.io.schema.log.VK8SEventsRequest"] = VK8SEventsRequestValidator()

	vr["ves.io.schema.log.CardinalityAggregationData"] = CardinalityAggregationDataValidator()
	vr["ves.io.schema.log.DateAggregationBucket"] = DateAggregationBucketValidator()
	vr["ves.io.schema.log.DateAggregationData"] = DateAggregationDataValidator()
	vr["ves.io.schema.log.DateSubAggregationData"] = DateSubAggregationDataValidator()
	vr["ves.io.schema.log.FieldAggregationBucket"] = FieldAggregationBucketValidator()
	vr["ves.io.schema.log.FieldAggregationData"] = FieldAggregationDataValidator()
	vr["ves.io.schema.log.FieldSubAggregationBucket"] = FieldSubAggregationBucketValidator()
	vr["ves.io.schema.log.FieldSubAggregationData"] = FieldSubAggregationDataValidator()
	vr["ves.io.schema.log.LogAggregationData"] = LogAggregationDataValidator()
	vr["ves.io.schema.log.MetricsAggregationData"] = MetricsAggregationDataValidator()
	vr["ves.io.schema.log.MultiFieldAggregationBucket"] = MultiFieldAggregationBucketValidator()
	vr["ves.io.schema.log.MultiFieldAggregationData"] = MultiFieldAggregationDataValidator()
	vr["ves.io.schema.log.MultiFieldSubAggregationData"] = MultiFieldSubAggregationDataValidator()
	vr["ves.io.schema.log.OrderByData"] = OrderByDataValidator()
	vr["ves.io.schema.log.PercentileAggregationData"] = PercentileAggregationDataValidator()

}

func initializeEntryRegistry(mdr *svcfw.MDRegistry) {

}

func initializeRPCRegistry(mdr *svcfw.MDRegistry) {

}

func initializeAPIGwServiceSlugsRegistry(sm map[string]string) {
	sm["ves.io.schema.log.CustomAPI"] = "data"

}

func initializeP0PolicyRegistry(sm map[string]svcfw.P0PolicyInfo) {

}

func initializeCRUDServiceRegistry(mdr *svcfw.MDRegistry, isExternal bool) {
	var (
		csr       *svcfw.CRUDServiceRegistry
		customCSR *svcfw.CustomServiceRegistry
	)
	_, _ = csr, customCSR

	customCSR = mdr.PubCustomServiceRegistry

	func() {
		// set swagger jsons for our and external schemas

		customCSR.SwaggerRegistry["ves.io.schema.log.Object"] = CustomAPISwaggerJSON

		customCSR.GrpcClientRegistry["ves.io.schema.log.CustomAPI"] = NewCustomAPIGrpcClient
		customCSR.RestClientRegistry["ves.io.schema.log.CustomAPI"] = NewCustomAPIRestClient
		if isExternal {
			return
		}
		mdr.SvcRegisterHandlers["ves.io.schema.log.CustomAPI"] = RegisterCustomAPIServer
		mdr.SvcGwRegisterHandlers["ves.io.schema.log.CustomAPI"] = RegisterGwCustomAPIHandler
		customCSR.ServerRegistry["ves.io.schema.log.CustomAPI"] = func(svc svcfw.Service) server.APIHandler {
			return NewCustomAPIServer(svc)
		}

	}()

}

func InitializeMDRegistry(mdr *svcfw.MDRegistry, isExternal bool) {
	initializeEntryRegistry(mdr)
	initializeValidatorRegistry(mdr.ValidatorRegistry)

	initializeCRUDServiceRegistry(mdr, isExternal)
	if isExternal {
		return
	}

	initializeRPCRegistry(mdr)
	initializeAPIGwServiceSlugsRegistry(mdr.APIGwServiceSlugs)
	initializeP0PolicyRegistry(mdr.P0PolicyRegistry)

}

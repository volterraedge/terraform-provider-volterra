// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/log/access_log/types.proto

package access_log

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Key Field
//
// x-displayName: "Key Field"
// Access log can be aggregated based on these fields.
type KeyField int32

const (
	// x-displayName: "API Endpoint"
	API_ENDPOINT KeyField = 0
	// x-displayName: "App Type"
	APP_TYPE KeyField = 1
	// x-displayName: "Authority"
	AUTHORITY KeyField = 2
	// x-displayName: "ASN"
	ASN KeyField = 3
	// x-displayName: "Browser Type"
	BROWSER_TYPE KeyField = 4
	// x-displayName: "City"
	CITY KeyField = 5
	// x-displayName: "Country"
	COUNTRY KeyField = 6
	// x-displayName: "Device Type"
	DEVICE_TYPE KeyField = 7
	// x-displayName: "Destination Service"
	DST KeyField = 8
	// x-displayName: "Destination Instance"
	DST_INSTANCE KeyField = 9
	// x-displayName: "Destination Site"
	DST_SITE KeyField = 10
	// x-displayName: "Method"
	METHOD KeyField = 11
	// x-displayName: "Scheme"
	SCHEME KeyField = 12
	// x-displayName: "Remote Location"
	REMOTE_LOCATION KeyField = 13 // Deprecated: Do not use.
	// x-displayName: "Request Path"
	REQ_PATH KeyField = 14
	// x-displayName: "Response Code"
	RSP_CODE KeyField = 15
	// x-displayName: "Response Code Class"
	RSP_CODE_CLASS KeyField = 26
	// x-displayName: "Response Code Details"
	RSP_CODE_DETAILS KeyField = 28
	// x-displayName: "Source Service"
	SRC KeyField = 16
	// x-displayName: "Source Instance"
	SRC_INSTANCE KeyField = 17
	// x-displayName: "Source IP"
	SRC_IP KeyField = 18
	// x-displayName: "Source Site"
	SRC_SITE KeyField = 19
	// x-displayName: "TLS Cipher Suite"
	TLS_CIPHER_SUITE KeyField = 20
	// x-displayName: "TLS Fingerprint"
	TLS_FINGERPRINT KeyField = 25
	// x-displayName: "TLS Version"
	TLS_VERSION KeyField = 21
	// x-displayName: "User"
	USER KeyField = 22
	// x-displayName: "Virtual Host Name"
	VH_NAME KeyField = 23
	// x-displayName: "Virtual Host Type"
	VH_TYPE KeyField = 24
	// x-displayName: "Visitor Id"
	VISITOR_ID KeyField = 27
)

var KeyField_name = map[int32]string{
	0:  "API_ENDPOINT",
	1:  "APP_TYPE",
	2:  "AUTHORITY",
	3:  "ASN",
	4:  "BROWSER_TYPE",
	5:  "CITY",
	6:  "COUNTRY",
	7:  "DEVICE_TYPE",
	8:  "DST",
	9:  "DST_INSTANCE",
	10: "DST_SITE",
	11: "METHOD",
	12: "SCHEME",
	13: "REMOTE_LOCATION",
	14: "REQ_PATH",
	15: "RSP_CODE",
	26: "RSP_CODE_CLASS",
	28: "RSP_CODE_DETAILS",
	16: "SRC",
	17: "SRC_INSTANCE",
	18: "SRC_IP",
	19: "SRC_SITE",
	20: "TLS_CIPHER_SUITE",
	25: "TLS_FINGERPRINT",
	21: "TLS_VERSION",
	22: "USER",
	23: "VH_NAME",
	24: "VH_TYPE",
	27: "VISITOR_ID",
}

var KeyField_value = map[string]int32{
	"API_ENDPOINT":     0,
	"APP_TYPE":         1,
	"AUTHORITY":        2,
	"ASN":              3,
	"BROWSER_TYPE":     4,
	"CITY":             5,
	"COUNTRY":          6,
	"DEVICE_TYPE":      7,
	"DST":              8,
	"DST_INSTANCE":     9,
	"DST_SITE":         10,
	"METHOD":           11,
	"SCHEME":           12,
	"REMOTE_LOCATION":  13,
	"REQ_PATH":         14,
	"RSP_CODE":         15,
	"RSP_CODE_CLASS":   26,
	"RSP_CODE_DETAILS": 28,
	"SRC":              16,
	"SRC_INSTANCE":     17,
	"SRC_IP":           18,
	"SRC_SITE":         19,
	"TLS_CIPHER_SUITE": 20,
	"TLS_FINGERPRINT":  25,
	"TLS_VERSION":      21,
	"USER":             22,
	"VH_NAME":          23,
	"VH_TYPE":          24,
	"VISITOR_ID":       27,
}

func (KeyField) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_57d2eb71018ba70a, []int{0}
}

// Multi-Key Field
//
// x-displayName: "Multi-Key Field"
// Security events can be aggregated based on these multiple key fields
type MultiKeyField int32

const (
	// x-displayName: "VH Name, Namespace"
	// Aggregated by (KeyField.VH_NAME, KeyField.NAMESPACE)
	VH_NAME_NAMESPACE MultiKeyField = 0
	// x-displayName: "api_endpoint, method"
	// Aggregated by (KeyField.API_ENDPOINT, KeyField.METHOD)
	API_ENDPOINT_METHOD MultiKeyField = 1
	// x-displayName: "api_endpoint, method, rsp_code_class"
	// Aggregated by (KeyField.API_ENDPOINT, KeyField.METHOD, KeyField.rsp_code_class)
	API_ENDPOINT_METHOD_RSP_CODE_CLASS MultiKeyField = 2
)

var MultiKeyField_name = map[int32]string{
	0: "VH_NAME_NAMESPACE",
	1: "API_ENDPOINT_METHOD",
	2: "API_ENDPOINT_METHOD_RSP_CODE_CLASS",
}

var MultiKeyField_value = map[string]int32{
	"VH_NAME_NAMESPACE":                  0,
	"API_ENDPOINT_METHOD":                1,
	"API_ENDPOINT_METHOD_RSP_CODE_CLASS": 2,
}

func (MultiKeyField) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_57d2eb71018ba70a, []int{1}
}

// Numeric-Key Field
//
// x-displayName: "Num-Key Field"
// Access log can be aggregated based on these numeric fields.
type NumKeyField int32

const (
	// x-displayName: "DURATION WITH DATA TX DELAY"
	DURATION_WITH_DATA_TX_DELAY NumKeyField = 0
	//x-displayName: "TIMESTAMP"
	TIMESTAMP NumKeyField = 1
)

var NumKeyField_name = map[int32]string{
	0: "DURATION_WITH_DATA_TX_DELAY",
	1: "TIMESTAMP",
}

var NumKeyField_value = map[string]int32{
	"DURATION_WITH_DATA_TX_DELAY": 0,
	"TIMESTAMP":                   1,
}

func (NumKeyField) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_57d2eb71018ba70a, []int{2}
}

// Date SubAggregation
//
// x-displayName: "Date SubAggregation"
// Aggregate access logs in each date bucket based on one of the sub aggregation types
type DateSubAggregation struct {
	// aggregation type
	//
	// x-displayName: "Aggregation Type"
	// Specify one of the aggregation types
	//
	// Types that are valid to be assigned to AggregationType:
	//	*DateSubAggregation_FieldAggregation
	//	*DateSubAggregation_MultiFieldAggregation
	AggregationType isDateSubAggregation_AggregationType `protobuf_oneof:"aggregation_type"`
}

func (m *DateSubAggregation) Reset()      { *m = DateSubAggregation{} }
func (*DateSubAggregation) ProtoMessage() {}
func (*DateSubAggregation) Descriptor() ([]byte, []int) {
	return fileDescriptor_57d2eb71018ba70a, []int{0}
}
func (m *DateSubAggregation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DateSubAggregation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DateSubAggregation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DateSubAggregation.Merge(m, src)
}
func (m *DateSubAggregation) XXX_Size() int {
	return m.Size()
}
func (m *DateSubAggregation) XXX_DiscardUnknown() {
	xxx_messageInfo_DateSubAggregation.DiscardUnknown(m)
}

var xxx_messageInfo_DateSubAggregation proto.InternalMessageInfo

type isDateSubAggregation_AggregationType interface {
	isDateSubAggregation_AggregationType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type DateSubAggregation_FieldAggregation struct {
	FieldAggregation *FieldAggregation `protobuf:"bytes,1,opt,name=field_aggregation,json=fieldAggregation,proto3,oneof" json:"field_aggregation,omitempty"`
}
type DateSubAggregation_MultiFieldAggregation struct {
	MultiFieldAggregation *MultiFieldAggregation `protobuf:"bytes,3,opt,name=multi_field_aggregation,json=multiFieldAggregation,proto3,oneof" json:"multi_field_aggregation,omitempty"`
}

func (*DateSubAggregation_FieldAggregation) isDateSubAggregation_AggregationType()      {}
func (*DateSubAggregation_MultiFieldAggregation) isDateSubAggregation_AggregationType() {}

func (m *DateSubAggregation) GetAggregationType() isDateSubAggregation_AggregationType {
	if m != nil {
		return m.AggregationType
	}
	return nil
}

func (m *DateSubAggregation) GetFieldAggregation() *FieldAggregation {
	if x, ok := m.GetAggregationType().(*DateSubAggregation_FieldAggregation); ok {
		return x.FieldAggregation
	}
	return nil
}

func (m *DateSubAggregation) GetMultiFieldAggregation() *MultiFieldAggregation {
	if x, ok := m.GetAggregationType().(*DateSubAggregation_MultiFieldAggregation); ok {
		return x.MultiFieldAggregation
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DateSubAggregation) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DateSubAggregation_FieldAggregation)(nil),
		(*DateSubAggregation_MultiFieldAggregation)(nil),
	}
}

// Date Aggregation
//
// x-displayName: "Date Aggregation"
// Aggregate access logs based on timestamp in the log
type DateAggregation struct {
	// step
	//
	// x-displayName: "Step"
	// x-required
	// x-example: "5m"
	//
	// step is the resolution width, which determines the number of the data points [x-axis (time)] to be returned in the response.
	// The timestamps in the response will be t1=start_time, t2=t1+step, ... tn=tn-1+step, where tn <= end_time.
	// Format: [0-9][smhd], where s - seconds, m - minutes, h - hours, d - days
	Step string `protobuf:"bytes,1,opt,name=step,proto3" json:"step,omitempty"`
	// sub aggregation
	//
	// x-displayName: "Sub Aggregation"
	// This option provides sub-aggregation for each date bucket
	SubAggs map[string]*DateSubAggregation `protobuf:"bytes,2,rep,name=sub_aggs,json=subAggs,proto3" json:"sub_aggs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *DateAggregation) Reset()      { *m = DateAggregation{} }
func (*DateAggregation) ProtoMessage() {}
func (*DateAggregation) Descriptor() ([]byte, []int) {
	return fileDescriptor_57d2eb71018ba70a, []int{1}
}
func (m *DateAggregation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DateAggregation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DateAggregation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DateAggregation.Merge(m, src)
}
func (m *DateAggregation) XXX_Size() int {
	return m.Size()
}
func (m *DateAggregation) XXX_DiscardUnknown() {
	xxx_messageInfo_DateAggregation.DiscardUnknown(m)
}

var xxx_messageInfo_DateAggregation proto.InternalMessageInfo

func (m *DateAggregation) GetStep() string {
	if m != nil {
		return m.Step
	}
	return ""
}

func (m *DateAggregation) GetSubAggs() map[string]*DateSubAggregation {
	if m != nil {
		return m.SubAggs
	}
	return nil
}

// Multi-Field Aggregation
//
// x-displayName: "Multi-Field Aggregation"
// Aggregate security events based on the multiple fields in the security event.
type MultiFieldAggregation struct {
	// field
	//
	// x-displayName: "Field"
	// x-required
	//
	// Multi-key field by which the access logs should be aggregated.
	Field MultiKeyField `protobuf:"varint,1,opt,name=field,proto3,enum=ves.io.schema.log.access_log.MultiKeyField" json:"field,omitempty"`
	// topk
	//
	// x-displayName: "TopK"
	// x-example: "10"
	//
	// Number of top field values to be returned in the response.
	Topk uint32 `protobuf:"varint,2,opt,name=topk,proto3" json:"topk,omitempty"`
	// sub aggregation
	//
	// x-displayName: "Sub Aggregation"
	// This option provides sub-aggregation for each multi-field aggregation bucket.
	SubAggs map[string]*FieldSubAggregation `protobuf:"bytes,3,rep,name=sub_aggs,json=subAggs,proto3" json:"sub_aggs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *MultiFieldAggregation) Reset()      { *m = MultiFieldAggregation{} }
func (*MultiFieldAggregation) ProtoMessage() {}
func (*MultiFieldAggregation) Descriptor() ([]byte, []int) {
	return fileDescriptor_57d2eb71018ba70a, []int{2}
}
func (m *MultiFieldAggregation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiFieldAggregation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MultiFieldAggregation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiFieldAggregation.Merge(m, src)
}
func (m *MultiFieldAggregation) XXX_Size() int {
	return m.Size()
}
func (m *MultiFieldAggregation) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiFieldAggregation.DiscardUnknown(m)
}

var xxx_messageInfo_MultiFieldAggregation proto.InternalMessageInfo

func (m *MultiFieldAggregation) GetField() MultiKeyField {
	if m != nil {
		return m.Field
	}
	return VH_NAME_NAMESPACE
}

func (m *MultiFieldAggregation) GetTopk() uint32 {
	if m != nil {
		return m.Topk
	}
	return 0
}

func (m *MultiFieldAggregation) GetSubAggs() map[string]*FieldSubAggregation {
	if m != nil {
		return m.SubAggs
	}
	return nil
}

// Field SubAggregation
//
// x-displayName: "Field SubAggregation"
// Aggregate access logs in each aggregation field bucket based on one of the sub aggregation types
type FieldSubAggregation struct {
	// aggregation type
	//
	// x-required
	// x-displayName: "Aggregation Type"
	// Specify one of the aggregation types
	//
	// Types that are valid to be assigned to AggregationType:
	//	*FieldSubAggregation_MaxAggregation
	//	*FieldSubAggregation_MinAggregation
	//	*FieldSubAggregation_AvgAggregation
	AggregationType isFieldSubAggregation_AggregationType `protobuf_oneof:"aggregation_type"`
}

func (m *FieldSubAggregation) Reset()      { *m = FieldSubAggregation{} }
func (*FieldSubAggregation) ProtoMessage() {}
func (*FieldSubAggregation) Descriptor() ([]byte, []int) {
	return fileDescriptor_57d2eb71018ba70a, []int{3}
}
func (m *FieldSubAggregation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FieldSubAggregation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FieldSubAggregation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FieldSubAggregation.Merge(m, src)
}
func (m *FieldSubAggregation) XXX_Size() int {
	return m.Size()
}
func (m *FieldSubAggregation) XXX_DiscardUnknown() {
	xxx_messageInfo_FieldSubAggregation.DiscardUnknown(m)
}

var xxx_messageInfo_FieldSubAggregation proto.InternalMessageInfo

type isFieldSubAggregation_AggregationType interface {
	isFieldSubAggregation_AggregationType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type FieldSubAggregation_MaxAggregation struct {
	MaxAggregation *MaxAggregation `protobuf:"bytes,2,opt,name=max_aggregation,json=maxAggregation,proto3,oneof" json:"max_aggregation,omitempty"`
}
type FieldSubAggregation_MinAggregation struct {
	MinAggregation *MinAggregation `protobuf:"bytes,3,opt,name=min_aggregation,json=minAggregation,proto3,oneof" json:"min_aggregation,omitempty"`
}
type FieldSubAggregation_AvgAggregation struct {
	AvgAggregation *AvgAggregation `protobuf:"bytes,4,opt,name=avg_aggregation,json=avgAggregation,proto3,oneof" json:"avg_aggregation,omitempty"`
}

func (*FieldSubAggregation_MaxAggregation) isFieldSubAggregation_AggregationType() {}
func (*FieldSubAggregation_MinAggregation) isFieldSubAggregation_AggregationType() {}
func (*FieldSubAggregation_AvgAggregation) isFieldSubAggregation_AggregationType() {}

func (m *FieldSubAggregation) GetAggregationType() isFieldSubAggregation_AggregationType {
	if m != nil {
		return m.AggregationType
	}
	return nil
}

func (m *FieldSubAggregation) GetMaxAggregation() *MaxAggregation {
	if x, ok := m.GetAggregationType().(*FieldSubAggregation_MaxAggregation); ok {
		return x.MaxAggregation
	}
	return nil
}

func (m *FieldSubAggregation) GetMinAggregation() *MinAggregation {
	if x, ok := m.GetAggregationType().(*FieldSubAggregation_MinAggregation); ok {
		return x.MinAggregation
	}
	return nil
}

func (m *FieldSubAggregation) GetAvgAggregation() *AvgAggregation {
	if x, ok := m.GetAggregationType().(*FieldSubAggregation_AvgAggregation); ok {
		return x.AvgAggregation
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*FieldSubAggregation) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*FieldSubAggregation_MaxAggregation)(nil),
		(*FieldSubAggregation_MinAggregation)(nil),
		(*FieldSubAggregation_AvgAggregation)(nil),
	}
}

// Field Aggregation
//
// x-displayName: "Field Aggregation"
// Aggregate access logs based on the key fields in the log.
type FieldAggregation struct {
	// field
	//
	// x-displayName: "Field"
	// x-required
	//
	// Field name by which the logs should be aggregated.
	Field KeyField `protobuf:"varint,1,opt,name=field,proto3,enum=ves.io.schema.log.access_log.KeyField" json:"field,omitempty"`
	// topk
	//
	// x-displayName: "TopK"
	// x-example: "5"
	// Number of top field values to be returned in the response.
	// Optional: If not specified, top 5 values will be returned in the response.
	Topk uint32 `protobuf:"varint,2,opt,name=topk,proto3" json:"topk,omitempty"`
	// sub aggregation
	//
	// x-displayName: "Sub Aggregation"
	// This option provides sub-aggregation for each field aggregation bucket.
	SubAggs map[string]*FieldSubAggregation `protobuf:"bytes,3,rep,name=sub_aggs,json=subAggs,proto3" json:"sub_aggs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *FieldAggregation) Reset()      { *m = FieldAggregation{} }
func (*FieldAggregation) ProtoMessage() {}
func (*FieldAggregation) Descriptor() ([]byte, []int) {
	return fileDescriptor_57d2eb71018ba70a, []int{4}
}
func (m *FieldAggregation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FieldAggregation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FieldAggregation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FieldAggregation.Merge(m, src)
}
func (m *FieldAggregation) XXX_Size() int {
	return m.Size()
}
func (m *FieldAggregation) XXX_DiscardUnknown() {
	xxx_messageInfo_FieldAggregation.DiscardUnknown(m)
}

var xxx_messageInfo_FieldAggregation proto.InternalMessageInfo

func (m *FieldAggregation) GetField() KeyField {
	if m != nil {
		return m.Field
	}
	return API_ENDPOINT
}

func (m *FieldAggregation) GetTopk() uint32 {
	if m != nil {
		return m.Topk
	}
	return 0
}

func (m *FieldAggregation) GetSubAggs() map[string]*FieldSubAggregation {
	if m != nil {
		return m.SubAggs
	}
	return nil
}

// Cardinality Aggregation
//
// x-displayName: "Cardinality Aggregation"
// Get approximate count of distinct values for the field in the access log.
type CardinalityAggregation struct {
	// field
	//
	// x-displayName: "Field"
	// x-required
	//
	// Field name for which count of distinct values should be computed.
	Field KeyField `protobuf:"varint,1,opt,name=field,proto3,enum=ves.io.schema.log.access_log.KeyField" json:"field,omitempty"`
}

func (m *CardinalityAggregation) Reset()      { *m = CardinalityAggregation{} }
func (*CardinalityAggregation) ProtoMessage() {}
func (*CardinalityAggregation) Descriptor() ([]byte, []int) {
	return fileDescriptor_57d2eb71018ba70a, []int{5}
}
func (m *CardinalityAggregation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CardinalityAggregation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CardinalityAggregation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CardinalityAggregation.Merge(m, src)
}
func (m *CardinalityAggregation) XXX_Size() int {
	return m.Size()
}
func (m *CardinalityAggregation) XXX_DiscardUnknown() {
	xxx_messageInfo_CardinalityAggregation.DiscardUnknown(m)
}

var xxx_messageInfo_CardinalityAggregation proto.InternalMessageInfo

func (m *CardinalityAggregation) GetField() KeyField {
	if m != nil {
		return m.Field
	}
	return API_ENDPOINT
}

// Max aggregation
//
// x-displayName: "Max aggregation"
// Get the maximum value among the numeric values extracted from the field in the access log.
type MaxAggregation struct {
	// field
	//
	// x-displayName: "Field"
	// x-required
	//
	// Field name for which maximum value should be computed.
	Field NumKeyField `protobuf:"varint,1,opt,name=field,proto3,enum=ves.io.schema.log.access_log.NumKeyField" json:"field,omitempty"`
}

func (m *MaxAggregation) Reset()      { *m = MaxAggregation{} }
func (*MaxAggregation) ProtoMessage() {}
func (*MaxAggregation) Descriptor() ([]byte, []int) {
	return fileDescriptor_57d2eb71018ba70a, []int{6}
}
func (m *MaxAggregation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MaxAggregation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MaxAggregation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MaxAggregation.Merge(m, src)
}
func (m *MaxAggregation) XXX_Size() int {
	return m.Size()
}
func (m *MaxAggregation) XXX_DiscardUnknown() {
	xxx_messageInfo_MaxAggregation.DiscardUnknown(m)
}

var xxx_messageInfo_MaxAggregation proto.InternalMessageInfo

func (m *MaxAggregation) GetField() NumKeyField {
	if m != nil {
		return m.Field
	}
	return DURATION_WITH_DATA_TX_DELAY
}

// Min aggregation
//
// x-displayName: "Min aggregation"
// Get the minimum value among the numeric values extracted from the field in the access log.
type MinAggregation struct {
	// field
	//
	// x-displayName: "Field"
	// x-required
	//
	// Field name for which minimum value should be computed.
	Field NumKeyField `protobuf:"varint,1,opt,name=field,proto3,enum=ves.io.schema.log.access_log.NumKeyField" json:"field,omitempty"`
}

func (m *MinAggregation) Reset()      { *m = MinAggregation{} }
func (*MinAggregation) ProtoMessage() {}
func (*MinAggregation) Descriptor() ([]byte, []int) {
	return fileDescriptor_57d2eb71018ba70a, []int{7}
}
func (m *MinAggregation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MinAggregation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MinAggregation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MinAggregation.Merge(m, src)
}
func (m *MinAggregation) XXX_Size() int {
	return m.Size()
}
func (m *MinAggregation) XXX_DiscardUnknown() {
	xxx_messageInfo_MinAggregation.DiscardUnknown(m)
}

var xxx_messageInfo_MinAggregation proto.InternalMessageInfo

func (m *MinAggregation) GetField() NumKeyField {
	if m != nil {
		return m.Field
	}
	return DURATION_WITH_DATA_TX_DELAY
}

// Average aggregation
//
// x-displayName: "Avg aggregation"
// Get the average value of the numeric values extracted from the field in the access log.
type AvgAggregation struct {
	// field
	//
	// x-displayName: "Field"
	// x-required
	//
	// Field name for which average value should be computed.
	Field NumKeyField `protobuf:"varint,1,opt,name=field,proto3,enum=ves.io.schema.log.access_log.NumKeyField" json:"field,omitempty"`
}

func (m *AvgAggregation) Reset()      { *m = AvgAggregation{} }
func (*AvgAggregation) ProtoMessage() {}
func (*AvgAggregation) Descriptor() ([]byte, []int) {
	return fileDescriptor_57d2eb71018ba70a, []int{8}
}
func (m *AvgAggregation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AvgAggregation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AvgAggregation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AvgAggregation.Merge(m, src)
}
func (m *AvgAggregation) XXX_Size() int {
	return m.Size()
}
func (m *AvgAggregation) XXX_DiscardUnknown() {
	xxx_messageInfo_AvgAggregation.DiscardUnknown(m)
}

var xxx_messageInfo_AvgAggregation proto.InternalMessageInfo

func (m *AvgAggregation) GetField() NumKeyField {
	if m != nil {
		return m.Field
	}
	return DURATION_WITH_DATA_TX_DELAY
}

// Aggregation Request
//
// x-displayName: "Aggregation Request"
// Aggregation request to provide analytics data over the log response
type AggregationRequest struct {
	// aggregation type
	//
	// x-displayName: "Aggregation Type"
	// Specify one of the aggregation types
	//
	// Types that are valid to be assigned to AggregationType:
	//	*AggregationRequest_DateAggregation
	//	*AggregationRequest_FieldAggregation
	//	*AggregationRequest_CardinalityAggregation
	//	*AggregationRequest_MultiFieldAggregation
	//	*AggregationRequest_MaxAggregation
	//	*AggregationRequest_MinAggregation
	//	*AggregationRequest_AvgAggregation
	AggregationType isAggregationRequest_AggregationType `protobuf_oneof:"aggregation_type"`
}

func (m *AggregationRequest) Reset()      { *m = AggregationRequest{} }
func (*AggregationRequest) ProtoMessage() {}
func (*AggregationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_57d2eb71018ba70a, []int{9}
}
func (m *AggregationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AggregationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AggregationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AggregationRequest.Merge(m, src)
}
func (m *AggregationRequest) XXX_Size() int {
	return m.Size()
}
func (m *AggregationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AggregationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AggregationRequest proto.InternalMessageInfo

type isAggregationRequest_AggregationType interface {
	isAggregationRequest_AggregationType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type AggregationRequest_DateAggregation struct {
	DateAggregation *DateAggregation `protobuf:"bytes,1,opt,name=date_aggregation,json=dateAggregation,proto3,oneof" json:"date_aggregation,omitempty"`
}
type AggregationRequest_FieldAggregation struct {
	FieldAggregation *FieldAggregation `protobuf:"bytes,2,opt,name=field_aggregation,json=fieldAggregation,proto3,oneof" json:"field_aggregation,omitempty"`
}
type AggregationRequest_CardinalityAggregation struct {
	CardinalityAggregation *CardinalityAggregation `protobuf:"bytes,3,opt,name=cardinality_aggregation,json=cardinalityAggregation,proto3,oneof" json:"cardinality_aggregation,omitempty"`
}
type AggregationRequest_MultiFieldAggregation struct {
	MultiFieldAggregation *MultiFieldAggregation `protobuf:"bytes,5,opt,name=multi_field_aggregation,json=multiFieldAggregation,proto3,oneof" json:"multi_field_aggregation,omitempty"`
}
type AggregationRequest_MaxAggregation struct {
	MaxAggregation *MaxAggregation `protobuf:"bytes,6,opt,name=max_aggregation,json=maxAggregation,proto3,oneof" json:"max_aggregation,omitempty"`
}
type AggregationRequest_MinAggregation struct {
	MinAggregation *MinAggregation `protobuf:"bytes,7,opt,name=min_aggregation,json=minAggregation,proto3,oneof" json:"min_aggregation,omitempty"`
}
type AggregationRequest_AvgAggregation struct {
	AvgAggregation *AvgAggregation `protobuf:"bytes,8,opt,name=avg_aggregation,json=avgAggregation,proto3,oneof" json:"avg_aggregation,omitempty"`
}

func (*AggregationRequest_DateAggregation) isAggregationRequest_AggregationType()        {}
func (*AggregationRequest_FieldAggregation) isAggregationRequest_AggregationType()       {}
func (*AggregationRequest_CardinalityAggregation) isAggregationRequest_AggregationType() {}
func (*AggregationRequest_MultiFieldAggregation) isAggregationRequest_AggregationType()  {}
func (*AggregationRequest_MaxAggregation) isAggregationRequest_AggregationType()         {}
func (*AggregationRequest_MinAggregation) isAggregationRequest_AggregationType()         {}
func (*AggregationRequest_AvgAggregation) isAggregationRequest_AggregationType()         {}

func (m *AggregationRequest) GetAggregationType() isAggregationRequest_AggregationType {
	if m != nil {
		return m.AggregationType
	}
	return nil
}

func (m *AggregationRequest) GetDateAggregation() *DateAggregation {
	if x, ok := m.GetAggregationType().(*AggregationRequest_DateAggregation); ok {
		return x.DateAggregation
	}
	return nil
}

func (m *AggregationRequest) GetFieldAggregation() *FieldAggregation {
	if x, ok := m.GetAggregationType().(*AggregationRequest_FieldAggregation); ok {
		return x.FieldAggregation
	}
	return nil
}

func (m *AggregationRequest) GetCardinalityAggregation() *CardinalityAggregation {
	if x, ok := m.GetAggregationType().(*AggregationRequest_CardinalityAggregation); ok {
		return x.CardinalityAggregation
	}
	return nil
}

func (m *AggregationRequest) GetMultiFieldAggregation() *MultiFieldAggregation {
	if x, ok := m.GetAggregationType().(*AggregationRequest_MultiFieldAggregation); ok {
		return x.MultiFieldAggregation
	}
	return nil
}

func (m *AggregationRequest) GetMaxAggregation() *MaxAggregation {
	if x, ok := m.GetAggregationType().(*AggregationRequest_MaxAggregation); ok {
		return x.MaxAggregation
	}
	return nil
}

func (m *AggregationRequest) GetMinAggregation() *MinAggregation {
	if x, ok := m.GetAggregationType().(*AggregationRequest_MinAggregation); ok {
		return x.MinAggregation
	}
	return nil
}

func (m *AggregationRequest) GetAvgAggregation() *AvgAggregation {
	if x, ok := m.GetAggregationType().(*AggregationRequest_AvgAggregation); ok {
		return x.AvgAggregation
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AggregationRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AggregationRequest_DateAggregation)(nil),
		(*AggregationRequest_FieldAggregation)(nil),
		(*AggregationRequest_CardinalityAggregation)(nil),
		(*AggregationRequest_MultiFieldAggregation)(nil),
		(*AggregationRequest_MaxAggregation)(nil),
		(*AggregationRequest_MinAggregation)(nil),
		(*AggregationRequest_AvgAggregation)(nil),
	}
}

func init() {
	proto.RegisterEnum("ves.io.schema.log.access_log.KeyField", KeyField_name, KeyField_value)
	proto.RegisterEnum("ves.io.schema.log.access_log.MultiKeyField", MultiKeyField_name, MultiKeyField_value)
	proto.RegisterEnum("ves.io.schema.log.access_log.NumKeyField", NumKeyField_name, NumKeyField_value)
	proto.RegisterType((*DateSubAggregation)(nil), "ves.io.schema.log.access_log.DateSubAggregation")
	proto.RegisterType((*DateAggregation)(nil), "ves.io.schema.log.access_log.DateAggregation")
	proto.RegisterMapType((map[string]*DateSubAggregation)(nil), "ves.io.schema.log.access_log.DateAggregation.SubAggsEntry")
	proto.RegisterType((*MultiFieldAggregation)(nil), "ves.io.schema.log.access_log.MultiFieldAggregation")
	proto.RegisterMapType((map[string]*FieldSubAggregation)(nil), "ves.io.schema.log.access_log.MultiFieldAggregation.SubAggsEntry")
	proto.RegisterType((*FieldSubAggregation)(nil), "ves.io.schema.log.access_log.FieldSubAggregation")
	proto.RegisterType((*FieldAggregation)(nil), "ves.io.schema.log.access_log.FieldAggregation")
	proto.RegisterMapType((map[string]*FieldSubAggregation)(nil), "ves.io.schema.log.access_log.FieldAggregation.SubAggsEntry")
	proto.RegisterType((*CardinalityAggregation)(nil), "ves.io.schema.log.access_log.CardinalityAggregation")
	proto.RegisterType((*MaxAggregation)(nil), "ves.io.schema.log.access_log.MaxAggregation")
	proto.RegisterType((*MinAggregation)(nil), "ves.io.schema.log.access_log.MinAggregation")
	proto.RegisterType((*AvgAggregation)(nil), "ves.io.schema.log.access_log.AvgAggregation")
	proto.RegisterType((*AggregationRequest)(nil), "ves.io.schema.log.access_log.AggregationRequest")
}

func init() {
	proto.RegisterFile("ves.io/schema/log/access_log/types.proto", fileDescriptor_57d2eb71018ba70a)
}

var fileDescriptor_57d2eb71018ba70a = []byte{
	// 1517 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0x4f, 0x6f, 0xdb, 0x46,
	0x1e, 0x15, 0xa9, 0x3f, 0x96, 0x7e, 0xb2, 0xa5, 0x31, 0x1d, 0xc7, 0x0e, 0xed, 0x10, 0x8e, 0x17,
	0xc8, 0x26, 0xce, 0x5a, 0xda, 0x4d, 0x76, 0x81, 0x45, 0x76, 0x81, 0x86, 0x96, 0x98, 0x48, 0xa9,
	0x2d, 0x29, 0x24, 0xed, 0xd4, 0x29, 0x8a, 0x01, 0x2d, 0x8e, 0x25, 0x22, 0x92, 0xc8, 0x90, 0x94,
	0x62, 0x1f, 0x04, 0xf4, 0x03, 0x14, 0x45, 0xa1, 0x4f, 0xd0, 0x63, 0x3f, 0x41, 0x0f, 0xf5, 0x25,
	0xc7, 0x22, 0xe8, 0xc1, 0xc7, 0xa0, 0xa7, 0x46, 0x01, 0x8a, 0xf6, 0x96, 0x53, 0x4f, 0x3d, 0x14,
	0x43, 0xd1, 0xb1, 0xa8, 0x28, 0x76, 0xd2, 0x3a, 0x45, 0x2f, 0x02, 0x39, 0xef, 0x37, 0xef, 0xcd,
	0x3c, 0x3e, 0xce, 0x4f, 0x84, 0x2b, 0x1d, 0xe2, 0x64, 0x0c, 0x33, 0xeb, 0x54, 0xeb, 0xa4, 0xa9,
	0x65, 0x1b, 0x66, 0x2d, 0xab, 0x55, 0xab, 0xc4, 0x71, 0x30, 0xbd, 0x74, 0xf7, 0x2d, 0xe2, 0x64,
	0x2c, 0xdb, 0x74, 0x4d, 0x6e, 0x71, 0x50, 0x99, 0x19, 0x54, 0x66, 0x1a, 0x66, 0x2d, 0x73, 0x5c,
	0xc9, 0xaf, 0xd6, 0x0c, 0xb7, 0xde, 0xde, 0xc9, 0x54, 0xcd, 0x66, 0xb6, 0x66, 0xd6, 0xcc, 0xac,
	0x37, 0x69, 0xa7, 0xbd, 0xeb, 0xdd, 0x79, 0x37, 0xde, 0xd5, 0x80, 0x8c, 0x5f, 0x08, 0xca, 0x9a,
	0x96, 0x6b, 0x98, 0x2d, 0x5f, 0x89, 0x5f, 0x0c, 0x82, 0x1d, 0xad, 0x61, 0xe8, 0x9a, 0x4b, 0x7c,
	0x74, 0x69, 0x04, 0x35, 0xc8, 0x63, 0x1c, 0x98, 0xbf, 0xfc, 0x39, 0x0b, 0x5c, 0x5e, 0x73, 0x89,
	0xd2, 0xde, 0x11, 0x6b, 0x35, 0x9b, 0xd4, 0x34, 0x8a, 0x72, 0x9f, 0xc0, 0xf4, 0xae, 0x41, 0x1a,
	0x3a, 0xd6, 0x8e, 0x07, 0xe7, 0x99, 0x25, 0xe6, 0x4a, 0xf2, 0x7a, 0x26, 0x73, 0xd2, 0xe6, 0x32,
	0xb7, 0xe9, 0xb4, 0x21, 0xaa, 0x42, 0x48, 0x46, 0xbb, 0x23, 0x63, 0x5c, 0x13, 0xe6, 0x9a, 0xed,
	0x86, 0x6b, 0xe0, 0xd7, 0x45, 0xc2, 0x9e, 0xc8, 0x8d, 0x93, 0x45, 0x36, 0xe8, 0xe4, 0x31, 0x4a,
	0xb3, 0xcd, 0x71, 0xc0, 0xcd, 0xd8, 0xd3, 0x03, 0x86, 0x45, 0xcc, 0xda, 0x22, 0xa0, 0x21, 0x29,
	0x4c, 0x9f, 0x18, 0x17, 0x7f, 0x72, 0xc0, 0x30, 0x87, 0x07, 0x0c, 0x7b, 0x37, 0x12, 0x67, 0x51,
	0x78, 0xf9, 0x17, 0x06, 0xd2, 0xd4, 0x90, 0xe1, 0xe5, 0x0a, 0x10, 0x71, 0x5c, 0x62, 0x79, 0x06,
	0x24, 0xd6, 0xe0, 0x9b, 0x9f, 0x9f, 0x84, 0xa3, 0x76, 0xf8, 0xcb, 0x08, 0x23, 0x7b, 0xe3, 0xdc,
	0x26, 0xc4, 0x9d, 0xf6, 0x0e, 0xdd, 0x86, 0x33, 0xcf, 0x2e, 0x85, 0xaf, 0x24, 0xaf, 0xdf, 0x3c,
	0x79, 0xfd, 0x23, 0x02, 0x99, 0x81, 0xfb, 0x8e, 0xd4, 0x72, 0xed, 0x7d, 0x79, 0xc2, 0x19, 0xdc,
	0xf1, 0x0d, 0x98, 0x1c, 0x06, 0x38, 0x04, 0xe1, 0x87, 0x64, 0x7f, 0xb0, 0x0a, 0x99, 0x5e, 0x72,
	0xb7, 0x21, 0xda, 0xd1, 0x1a, 0x6d, 0x32, 0xcf, 0x7a, 0xae, 0xfd, 0xf3, 0x74, 0xd5, 0xe0, 0x73,
	0x96, 0x07, 0xd3, 0x6f, 0xb2, 0xff, 0x65, 0x96, 0x9f, 0xb2, 0x30, 0x3b, 0xd6, 0x57, 0x4e, 0x84,
	0xa8, 0xf7, 0x9c, 0x3c, 0xe5, 0xd4, 0xf5, 0x6b, 0x6f, 0xf1, 0x6c, 0x3e, 0x24, 0xfb, 0x1e, 0x8d,
	0x3c, 0x98, 0xc9, 0x2d, 0x43, 0xc4, 0x35, 0xad, 0x87, 0xde, 0x3a, 0xa7, 0xd6, 0x52, 0xdf, 0x1f,
	0x30, 0xcc, 0x7f, 0xa8, 0x8d, 0x91, 0x15, 0x76, 0x5e, 0x97, 0x3d, 0x8c, 0xfb, 0x78, 0xc8, 0xc5,
	0xb0, 0xe7, 0xe2, 0xad, 0xdf, 0x91, 0x82, 0x37, 0x78, 0xd9, 0x3c, 0xd5, 0xcb, 0x3b, 0x41, 0x2f,
	0xff, 0xf5, 0x16, 0x31, 0x7f, 0xb3, 0x99, 0xdf, 0xb1, 0x30, 0x33, 0xa6, 0x84, 0xbb, 0x0f, 0xe9,
	0xa6, 0xb6, 0x17, 0x08, 0xfc, 0x40, 0xee, 0x1f, 0xa7, 0x6c, 0x55, 0xdb, 0x0b, 0x26, 0x3d, 0xd5,
	0x0c, 0x8c, 0x78, 0xc4, 0x46, 0x6b, 0xcc, 0x9b, 0x74, 0x1a, 0xb1, 0xd1, 0x1a, 0x25, 0x0e, 0x8c,
	0x50, 0x62, 0xad, 0x53, 0x0b, 0x10, 0x47, 0xde, 0x86, 0x58, 0xec, 0xd4, 0x46, 0x88, 0xb5, 0xc0,
	0xc8, 0xa9, 0x2f, 0x25, 0x7b, 0x78, 0xc0, 0x30, 0x77, 0x23, 0x71, 0x06, 0xb1, 0xcb, 0x5f, 0xb3,
	0x80, 0x5e, 0x8b, 0xe5, 0xff, 0x83, 0xb1, 0xbc, 0x7c, 0xf2, 0x7a, 0x46, 0x13, 0x79, 0x31, 0x90,
	0xc8, 0xc4, 0x68, 0x18, 0xb7, 0x5e, 0x0b, 0xe3, 0xff, 0xde, 0xed, 0xdc, 0xfb, 0x6b, 0xe4, 0x70,
	0x0b, 0xce, 0xe7, 0x34, 0x5b, 0x37, 0x5a, 0x5a, 0xc3, 0x70, 0xf7, 0xcf, 0xcc, 0xbd, 0xe5, 0x7b,
	0x90, 0x0a, 0x46, 0x92, 0xfb, 0x20, 0xc8, 0x77, 0xf5, 0x64, 0xbe, 0x52, 0xbb, 0x39, 0x8e, 0x32,
	0x18, 0xbd, 0xb3, 0xa0, 0x0c, 0xc6, 0xf0, 0x8f, 0x53, 0xfe, 0x18, 0x05, 0x6e, 0xd8, 0x6b, 0xf2,
	0xa8, 0x4d, 0x1c, 0x97, 0x7b, 0x00, 0x88, 0xb6, 0xdd, 0x31, 0xed, 0x72, 0xf5, 0x9d, 0x3a, 0x41,
	0x21, 0x24, 0xa7, 0xf5, 0x91, 0xee, 0x33, 0xb6, 0x17, 0xb3, 0x67, 0xd6, 0x8b, 0x4d, 0x98, 0xab,
	0x1e, 0x47, 0x64, 0xcc, 0x09, 0xf2, 0xef, 0x93, 0x45, 0xc6, 0xe7, 0xab, 0x10, 0x92, 0xcf, 0x57,
	0xc7, 0x27, 0xef, 0x84, 0xe6, 0x1f, 0x3d, 0xfb, 0xe6, 0x3f, 0xee, 0xc8, 0x8d, 0xbd, 0xaf, 0x23,
	0x77, 0xe2, 0x7d, 0x1d, 0xb9, 0xf1, 0x3f, 0xe5, 0xc8, 0xa5, 0xff, 0x83, 0x22, 0x77, 0x23, 0xf1,
	0x08, 0x8a, 0xae, 0xfc, 0x1a, 0x83, 0xf8, 0x51, 0xf8, 0xb9, 0xbf, 0xc1, 0xa4, 0x58, 0x29, 0x62,
	0xa9, 0x94, 0xaf, 0x94, 0x8b, 0x25, 0x15, 0x85, 0xf8, 0xe9, 0x5e, 0x37, 0x05, 0x93, 0x9a, 0x65,
	0x60, 0xd2, 0xd2, 0x2d, 0xd3, 0x68, 0xb9, 0xdc, 0x02, 0xc4, 0xc5, 0x4a, 0x05, 0xab, 0xdb, 0x15,
	0x09, 0x31, 0xfc, 0x54, 0xaf, 0x0b, 0x10, 0xd7, 0x2c, 0x6b, 0x40, 0x7f, 0x11, 0x12, 0xe2, 0xa6,
	0x5a, 0x28, 0xcb, 0x45, 0x75, 0x1b, 0xb1, 0x7c, 0xaa, 0xd7, 0x4d, 0x42, 0x42, 0x6b, 0xbb, 0x75,
	0xd3, 0x36, 0xdc, 0x7d, 0x6e, 0x1a, 0xc2, 0xa2, 0x52, 0x42, 0x61, 0x3e, 0xde, 0xeb, 0x46, 0x21,
	0xac, 0x39, 0x2d, 0xaa, 0xb9, 0x26, 0x97, 0xef, 0x2b, 0x92, 0x3c, 0xa0, 0x8c, 0xf8, 0x9a, 0x3b,
	0xb6, 0xf9, 0xd8, 0x21, 0xf6, 0x80, 0x76, 0x06, 0x22, 0x39, 0xca, 0x18, 0xe5, 0x13, 0xbd, 0x6e,
	0x0c, 0x22, 0x55, 0x4a, 0x76, 0x01, 0x26, 0x72, 0xe5, 0xcd, 0x92, 0x2a, 0x6f, 0xa3, 0x18, 0x3f,
	0xd9, 0xeb, 0x26, 0x60, 0xa2, 0x6a, 0xb6, 0xbd, 0xe3, 0xf6, 0x12, 0x24, 0xf3, 0xd2, 0x56, 0x31,
	0x27, 0x0d, 0x38, 0x27, 0x78, 0xd4, 0xeb, 0x4e, 0x41, 0x52, 0x27, 0x1d, 0xa3, 0x4a, 0x06, 0x94,
	0xd3, 0x10, 0xce, 0x2b, 0x2a, 0x8a, 0xfb, 0x4b, 0xd1, 0x1d, 0x97, 0x2e, 0x25, 0xaf, 0xa8, 0xb8,
	0x58, 0x52, 0x54, 0xb1, 0x94, 0x93, 0x50, 0xc2, 0x5f, 0x8a, 0xee, 0xb8, 0xd8, 0x68, 0x39, 0xae,
	0xd6, 0xaa, 0x12, 0xba, 0x7d, 0x5a, 0xa4, 0x14, 0x55, 0x09, 0x81, 0xbf, 0x7d, 0x5a, 0xe0, 0x18,
	0x2e, 0xe1, 0xe6, 0x20, 0xb6, 0x21, 0xa9, 0x85, 0x72, 0x1e, 0x25, 0xf9, 0x64, 0xaf, 0x1b, 0x87,
	0x58, 0x93, 0xb8, 0x75, 0x53, 0xa7, 0x80, 0x92, 0x2b, 0x48, 0x1b, 0x12, 0x9a, 0xf4, 0x01, 0xef,
	0xd9, 0xd2, 0x19, 0x69, 0x59, 0xda, 0x28, 0xab, 0x12, 0x5e, 0x2f, 0xe7, 0x44, 0xb5, 0x58, 0x2e,
	0xa1, 0x29, 0x9e, 0x8d, 0x33, 0x54, 0x47, 0x96, 0xee, 0xe1, 0x8a, 0xa8, 0x16, 0x50, 0xca, 0xd7,
	0xb1, 0xc9, 0x23, 0x6c, 0x69, 0x6e, 0xdd, 0x03, 0x95, 0x0a, 0xce, 0x95, 0xf3, 0x12, 0x4a, 0x1f,
	0x81, 0x8e, 0x85, 0xab, 0xa6, 0x4e, 0xb8, 0xbf, 0x43, 0xea, 0x08, 0xc4, 0xb9, 0x75, 0x51, 0x51,
	0x10, 0xcf, 0xcf, 0xf4, 0xba, 0x08, 0x52, 0x47, 0x25, 0xb8, 0xda, 0xd0, 0x1c, 0x87, 0xbb, 0x06,
	0xe8, 0x55, 0x61, 0x5e, 0x52, 0xc5, 0xe2, 0xba, 0x82, 0x16, 0xf9, 0xd9, 0x5e, 0x97, 0x03, 0xf4,
	0xaa, 0x54, 0x27, 0xae, 0x66, 0x34, 0x1c, 0xea, 0x97, 0x22, 0xe7, 0x10, 0xf2, 0xfd, 0x72, 0xec,
	0x2a, 0xf5, 0x4b, 0x91, 0x73, 0xc7, 0x7e, 0x4d, 0xfb, 0x7e, 0x39, 0x76, 0xf5, 0xd8, 0x2f, 0xba,
	0x73, 0x5a, 0x54, 0x41, 0xdc, 0xd1, 0xce, 0x29, 0x6c, 0xd1, 0x3d, 0x50, 0xc0, 0x33, 0x72, 0xc6,
	0xdf, 0x03, 0x85, 0x3c, 0x23, 0xaf, 0x01, 0x52, 0xd7, 0x15, 0x9c, 0x2b, 0x56, 0x0a, 0x92, 0x8c,
	0x95, 0x4d, 0x5a, 0x74, 0xce, 0x5f, 0x9a, 0xdb, 0x70, 0x70, 0xd5, 0xb0, 0xea, 0xc4, 0xc6, 0x4e,
	0x9b, 0x16, 0x5f, 0x85, 0x34, 0x2d, 0xbe, 0x5d, 0x2c, 0xdd, 0x91, 0xe4, 0x8a, 0x4c, 0x93, 0x7b,
	0x81, 0x3f, 0xd7, 0xeb, 0x4e, 0x43, 0x9a, 0xd6, 0xee, 0x1a, 0xad, 0x1a, 0xb1, 0x2d, 0x9b, 0x86,
	0xf7, 0x12, 0x24, 0x69, 0xe9, 0x96, 0x24, 0x2b, 0xd4, 0xea, 0x59, 0x3f, 0x18, 0xb4, 0xac, 0x43,
	0x6c, 0x87, 0xbe, 0x96, 0x33, 0x10, 0xd9, 0x54, 0x24, 0x19, 0x9d, 0xf7, 0xb3, 0xd6, 0x76, 0x88,
	0x4d, 0xb3, 0xb6, 0x55, 0xc0, 0x25, 0x71, 0x43, 0x42, 0x73, 0x7e, 0xd6, 0x3a, 0x75, 0xdc, 0xd2,
	0x9a, 0xc4, 0x87, 0xbc, 0x9c, 0xcd, 0x1f, 0x43, 0x5e, 0xc6, 0x96, 0x00, 0xb6, 0x8a, 0x4a, 0x51,
	0x2d, 0xcb, 0xb8, 0x98, 0x47, 0x0b, 0xbe, 0x18, 0xee, 0x18, 0x8e, 0xe1, 0x9a, 0x36, 0x36, 0xf4,
	0x95, 0x1a, 0x4c, 0x05, 0xfe, 0x48, 0x73, 0xb3, 0x30, 0xed, 0x0b, 0x79, 0x3f, 0x4a, 0x45, 0xcc,
	0x49, 0x28, 0xc4, 0xcd, 0xc1, 0xcc, 0xf0, 0x9b, 0x89, 0xfd, 0x94, 0x31, 0xdc, 0x65, 0x58, 0x1e,
	0x03, 0xe0, 0x91, 0x00, 0xb0, 0x2b, 0x16, 0x24, 0x87, 0xda, 0x1c, 0x27, 0xc2, 0x42, 0x7e, 0x53,
	0xf6, 0xf2, 0x86, 0xef, 0x17, 0xd5, 0x02, 0xce, 0x8b, 0xaa, 0x88, 0xd5, 0x8f, 0x70, 0x5e, 0x5a,
	0x17, 0xb7, 0x51, 0x88, 0x5f, 0xea, 0x75, 0x2f, 0xc2, 0x82, 0xde, 0xb6, 0x07, 0x67, 0xc7, 0x63,
	0xc3, 0xad, 0x63, 0x5d, 0x73, 0x35, 0xec, 0xee, 0x61, 0x9d, 0x34, 0xb4, 0x7d, 0x4e, 0x80, 0x84,
	0x5a, 0xdc, 0x90, 0x14, 0x55, 0xdc, 0xa8, 0x20, 0x86, 0x4f, 0xf7, 0xba, 0x93, 0x00, 0xb7, 0x5c,
	0xa3, 0x49, 0x1c, 0x57, 0x6b, 0x5a, 0x6b, 0x9f, 0x31, 0x87, 0xcf, 0x85, 0xd0, 0xb3, 0xe7, 0x42,
	0xe8, 0xe5, 0x73, 0x81, 0xf9, 0xb4, 0x2f, 0x30, 0x5f, 0xf5, 0x05, 0xe6, 0xdb, 0xbe, 0xc0, 0x1c,
	0xf6, 0x05, 0xe6, 0x59, 0x5f, 0x60, 0x7e, 0xe8, 0x0b, 0xcc, 0x4f, 0x7d, 0x21, 0xf4, 0xb2, 0x2f,
	0x30, 0x5f, 0xbc, 0x10, 0x42, 0x87, 0x2f, 0x84, 0xd0, 0xb3, 0x17, 0x42, 0xe8, 0x81, 0x5c, 0x33,
	0xad, 0x87, 0xb5, 0x4c, 0xc7, 0x6c, 0xb8, 0xc4, 0xb6, 0xb5, 0x4c, 0xdb, 0xc9, 0x7a, 0x17, 0xbb,
	0xa6, 0xdd, 0x5c, 0xb5, 0x6c, 0xb3, 0x63, 0xe8, 0xc4, 0x5e, 0x3d, 0x82, 0xb3, 0xd6, 0x4e, 0xcd,
	0xcc, 0x92, 0x3d, 0xd7, 0xff, 0xfc, 0x1d, 0xfb, 0xdd, 0xbe, 0x13, 0xf3, 0x3e, 0x84, 0x6f, 0xfc,
	0x16, 0x00, 0x00, 0xff, 0xff, 0xad, 0x9d, 0x30, 0x39, 0xde, 0x0f, 0x00, 0x00,
}

func (x KeyField) String() string {
	s, ok := KeyField_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x MultiKeyField) String() string {
	s, ok := MultiKeyField_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x NumKeyField) String() string {
	s, ok := NumKeyField_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *DateSubAggregation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DateSubAggregation)
	if !ok {
		that2, ok := that.(DateSubAggregation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.AggregationType == nil {
		if this.AggregationType != nil {
			return false
		}
	} else if this.AggregationType == nil {
		return false
	} else if !this.AggregationType.Equal(that1.AggregationType) {
		return false
	}
	return true
}
func (this *DateSubAggregation_FieldAggregation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DateSubAggregation_FieldAggregation)
	if !ok {
		that2, ok := that.(DateSubAggregation_FieldAggregation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FieldAggregation.Equal(that1.FieldAggregation) {
		return false
	}
	return true
}
func (this *DateSubAggregation_MultiFieldAggregation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DateSubAggregation_MultiFieldAggregation)
	if !ok {
		that2, ok := that.(DateSubAggregation_MultiFieldAggregation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MultiFieldAggregation.Equal(that1.MultiFieldAggregation) {
		return false
	}
	return true
}
func (this *DateAggregation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DateAggregation)
	if !ok {
		that2, ok := that.(DateAggregation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Step != that1.Step {
		return false
	}
	if len(this.SubAggs) != len(that1.SubAggs) {
		return false
	}
	for i := range this.SubAggs {
		if !this.SubAggs[i].Equal(that1.SubAggs[i]) {
			return false
		}
	}
	return true
}
func (this *MultiFieldAggregation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MultiFieldAggregation)
	if !ok {
		that2, ok := that.(MultiFieldAggregation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Field != that1.Field {
		return false
	}
	if this.Topk != that1.Topk {
		return false
	}
	if len(this.SubAggs) != len(that1.SubAggs) {
		return false
	}
	for i := range this.SubAggs {
		if !this.SubAggs[i].Equal(that1.SubAggs[i]) {
			return false
		}
	}
	return true
}
func (this *FieldSubAggregation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldSubAggregation)
	if !ok {
		that2, ok := that.(FieldSubAggregation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.AggregationType == nil {
		if this.AggregationType != nil {
			return false
		}
	} else if this.AggregationType == nil {
		return false
	} else if !this.AggregationType.Equal(that1.AggregationType) {
		return false
	}
	return true
}
func (this *FieldSubAggregation_MaxAggregation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldSubAggregation_MaxAggregation)
	if !ok {
		that2, ok := that.(FieldSubAggregation_MaxAggregation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MaxAggregation.Equal(that1.MaxAggregation) {
		return false
	}
	return true
}
func (this *FieldSubAggregation_MinAggregation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldSubAggregation_MinAggregation)
	if !ok {
		that2, ok := that.(FieldSubAggregation_MinAggregation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MinAggregation.Equal(that1.MinAggregation) {
		return false
	}
	return true
}
func (this *FieldSubAggregation_AvgAggregation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldSubAggregation_AvgAggregation)
	if !ok {
		that2, ok := that.(FieldSubAggregation_AvgAggregation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AvgAggregation.Equal(that1.AvgAggregation) {
		return false
	}
	return true
}
func (this *FieldAggregation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldAggregation)
	if !ok {
		that2, ok := that.(FieldAggregation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Field != that1.Field {
		return false
	}
	if this.Topk != that1.Topk {
		return false
	}
	if len(this.SubAggs) != len(that1.SubAggs) {
		return false
	}
	for i := range this.SubAggs {
		if !this.SubAggs[i].Equal(that1.SubAggs[i]) {
			return false
		}
	}
	return true
}
func (this *CardinalityAggregation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CardinalityAggregation)
	if !ok {
		that2, ok := that.(CardinalityAggregation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Field != that1.Field {
		return false
	}
	return true
}
func (this *MaxAggregation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MaxAggregation)
	if !ok {
		that2, ok := that.(MaxAggregation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Field != that1.Field {
		return false
	}
	return true
}
func (this *MinAggregation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MinAggregation)
	if !ok {
		that2, ok := that.(MinAggregation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Field != that1.Field {
		return false
	}
	return true
}
func (this *AvgAggregation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AvgAggregation)
	if !ok {
		that2, ok := that.(AvgAggregation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Field != that1.Field {
		return false
	}
	return true
}
func (this *AggregationRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AggregationRequest)
	if !ok {
		that2, ok := that.(AggregationRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.AggregationType == nil {
		if this.AggregationType != nil {
			return false
		}
	} else if this.AggregationType == nil {
		return false
	} else if !this.AggregationType.Equal(that1.AggregationType) {
		return false
	}
	return true
}
func (this *AggregationRequest_DateAggregation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AggregationRequest_DateAggregation)
	if !ok {
		that2, ok := that.(AggregationRequest_DateAggregation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DateAggregation.Equal(that1.DateAggregation) {
		return false
	}
	return true
}
func (this *AggregationRequest_FieldAggregation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AggregationRequest_FieldAggregation)
	if !ok {
		that2, ok := that.(AggregationRequest_FieldAggregation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FieldAggregation.Equal(that1.FieldAggregation) {
		return false
	}
	return true
}
func (this *AggregationRequest_CardinalityAggregation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AggregationRequest_CardinalityAggregation)
	if !ok {
		that2, ok := that.(AggregationRequest_CardinalityAggregation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CardinalityAggregation.Equal(that1.CardinalityAggregation) {
		return false
	}
	return true
}
func (this *AggregationRequest_MultiFieldAggregation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AggregationRequest_MultiFieldAggregation)
	if !ok {
		that2, ok := that.(AggregationRequest_MultiFieldAggregation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MultiFieldAggregation.Equal(that1.MultiFieldAggregation) {
		return false
	}
	return true
}
func (this *AggregationRequest_MaxAggregation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AggregationRequest_MaxAggregation)
	if !ok {
		that2, ok := that.(AggregationRequest_MaxAggregation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MaxAggregation.Equal(that1.MaxAggregation) {
		return false
	}
	return true
}
func (this *AggregationRequest_MinAggregation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AggregationRequest_MinAggregation)
	if !ok {
		that2, ok := that.(AggregationRequest_MinAggregation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MinAggregation.Equal(that1.MinAggregation) {
		return false
	}
	return true
}
func (this *AggregationRequest_AvgAggregation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AggregationRequest_AvgAggregation)
	if !ok {
		that2, ok := that.(AggregationRequest_AvgAggregation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AvgAggregation.Equal(that1.AvgAggregation) {
		return false
	}
	return true
}
func (this *DateSubAggregation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&access_log.DateSubAggregation{")
	if this.AggregationType != nil {
		s = append(s, "AggregationType: "+fmt.Sprintf("%#v", this.AggregationType)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DateSubAggregation_FieldAggregation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&access_log.DateSubAggregation_FieldAggregation{` +
		`FieldAggregation:` + fmt.Sprintf("%#v", this.FieldAggregation) + `}`}, ", ")
	return s
}
func (this *DateSubAggregation_MultiFieldAggregation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&access_log.DateSubAggregation_MultiFieldAggregation{` +
		`MultiFieldAggregation:` + fmt.Sprintf("%#v", this.MultiFieldAggregation) + `}`}, ", ")
	return s
}
func (this *DateAggregation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&access_log.DateAggregation{")
	s = append(s, "Step: "+fmt.Sprintf("%#v", this.Step)+",\n")
	keysForSubAggs := make([]string, 0, len(this.SubAggs))
	for k, _ := range this.SubAggs {
		keysForSubAggs = append(keysForSubAggs, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForSubAggs)
	mapStringForSubAggs := "map[string]*DateSubAggregation{"
	for _, k := range keysForSubAggs {
		mapStringForSubAggs += fmt.Sprintf("%#v: %#v,", k, this.SubAggs[k])
	}
	mapStringForSubAggs += "}"
	if this.SubAggs != nil {
		s = append(s, "SubAggs: "+mapStringForSubAggs+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MultiFieldAggregation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&access_log.MultiFieldAggregation{")
	s = append(s, "Field: "+fmt.Sprintf("%#v", this.Field)+",\n")
	s = append(s, "Topk: "+fmt.Sprintf("%#v", this.Topk)+",\n")
	keysForSubAggs := make([]string, 0, len(this.SubAggs))
	for k, _ := range this.SubAggs {
		keysForSubAggs = append(keysForSubAggs, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForSubAggs)
	mapStringForSubAggs := "map[string]*FieldSubAggregation{"
	for _, k := range keysForSubAggs {
		mapStringForSubAggs += fmt.Sprintf("%#v: %#v,", k, this.SubAggs[k])
	}
	mapStringForSubAggs += "}"
	if this.SubAggs != nil {
		s = append(s, "SubAggs: "+mapStringForSubAggs+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FieldSubAggregation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&access_log.FieldSubAggregation{")
	if this.AggregationType != nil {
		s = append(s, "AggregationType: "+fmt.Sprintf("%#v", this.AggregationType)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FieldSubAggregation_MaxAggregation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&access_log.FieldSubAggregation_MaxAggregation{` +
		`MaxAggregation:` + fmt.Sprintf("%#v", this.MaxAggregation) + `}`}, ", ")
	return s
}
func (this *FieldSubAggregation_MinAggregation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&access_log.FieldSubAggregation_MinAggregation{` +
		`MinAggregation:` + fmt.Sprintf("%#v", this.MinAggregation) + `}`}, ", ")
	return s
}
func (this *FieldSubAggregation_AvgAggregation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&access_log.FieldSubAggregation_AvgAggregation{` +
		`AvgAggregation:` + fmt.Sprintf("%#v", this.AvgAggregation) + `}`}, ", ")
	return s
}
func (this *FieldAggregation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&access_log.FieldAggregation{")
	s = append(s, "Field: "+fmt.Sprintf("%#v", this.Field)+",\n")
	s = append(s, "Topk: "+fmt.Sprintf("%#v", this.Topk)+",\n")
	keysForSubAggs := make([]string, 0, len(this.SubAggs))
	for k, _ := range this.SubAggs {
		keysForSubAggs = append(keysForSubAggs, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForSubAggs)
	mapStringForSubAggs := "map[string]*FieldSubAggregation{"
	for _, k := range keysForSubAggs {
		mapStringForSubAggs += fmt.Sprintf("%#v: %#v,", k, this.SubAggs[k])
	}
	mapStringForSubAggs += "}"
	if this.SubAggs != nil {
		s = append(s, "SubAggs: "+mapStringForSubAggs+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CardinalityAggregation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&access_log.CardinalityAggregation{")
	s = append(s, "Field: "+fmt.Sprintf("%#v", this.Field)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MaxAggregation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&access_log.MaxAggregation{")
	s = append(s, "Field: "+fmt.Sprintf("%#v", this.Field)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MinAggregation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&access_log.MinAggregation{")
	s = append(s, "Field: "+fmt.Sprintf("%#v", this.Field)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AvgAggregation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&access_log.AvgAggregation{")
	s = append(s, "Field: "+fmt.Sprintf("%#v", this.Field)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AggregationRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&access_log.AggregationRequest{")
	if this.AggregationType != nil {
		s = append(s, "AggregationType: "+fmt.Sprintf("%#v", this.AggregationType)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AggregationRequest_DateAggregation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&access_log.AggregationRequest_DateAggregation{` +
		`DateAggregation:` + fmt.Sprintf("%#v", this.DateAggregation) + `}`}, ", ")
	return s
}
func (this *AggregationRequest_FieldAggregation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&access_log.AggregationRequest_FieldAggregation{` +
		`FieldAggregation:` + fmt.Sprintf("%#v", this.FieldAggregation) + `}`}, ", ")
	return s
}
func (this *AggregationRequest_CardinalityAggregation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&access_log.AggregationRequest_CardinalityAggregation{` +
		`CardinalityAggregation:` + fmt.Sprintf("%#v", this.CardinalityAggregation) + `}`}, ", ")
	return s
}
func (this *AggregationRequest_MultiFieldAggregation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&access_log.AggregationRequest_MultiFieldAggregation{` +
		`MultiFieldAggregation:` + fmt.Sprintf("%#v", this.MultiFieldAggregation) + `}`}, ", ")
	return s
}
func (this *AggregationRequest_MaxAggregation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&access_log.AggregationRequest_MaxAggregation{` +
		`MaxAggregation:` + fmt.Sprintf("%#v", this.MaxAggregation) + `}`}, ", ")
	return s
}
func (this *AggregationRequest_MinAggregation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&access_log.AggregationRequest_MinAggregation{` +
		`MinAggregation:` + fmt.Sprintf("%#v", this.MinAggregation) + `}`}, ", ")
	return s
}
func (this *AggregationRequest_AvgAggregation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&access_log.AggregationRequest_AvgAggregation{` +
		`AvgAggregation:` + fmt.Sprintf("%#v", this.AvgAggregation) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *DateSubAggregation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DateSubAggregation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DateSubAggregation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AggregationType != nil {
		{
			size := m.AggregationType.Size()
			i -= size
			if _, err := m.AggregationType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *DateSubAggregation_FieldAggregation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DateSubAggregation_FieldAggregation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FieldAggregation != nil {
		{
			size, err := m.FieldAggregation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *DateSubAggregation_MultiFieldAggregation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DateSubAggregation_MultiFieldAggregation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MultiFieldAggregation != nil {
		{
			size, err := m.MultiFieldAggregation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *DateAggregation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DateAggregation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DateAggregation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubAggs) > 0 {
		keysForSubAggs := make([]string, 0, len(m.SubAggs))
		for k := range m.SubAggs {
			keysForSubAggs = append(keysForSubAggs, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForSubAggs)
		for iNdEx := len(keysForSubAggs) - 1; iNdEx >= 0; iNdEx-- {
			v := m.SubAggs[string(keysForSubAggs[iNdEx])]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintTypes(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(keysForSubAggs[iNdEx])
			copy(dAtA[i:], keysForSubAggs[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(keysForSubAggs[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Step) > 0 {
		i -= len(m.Step)
		copy(dAtA[i:], m.Step)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Step)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MultiFieldAggregation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiFieldAggregation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultiFieldAggregation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubAggs) > 0 {
		keysForSubAggs := make([]string, 0, len(m.SubAggs))
		for k := range m.SubAggs {
			keysForSubAggs = append(keysForSubAggs, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForSubAggs)
		for iNdEx := len(keysForSubAggs) - 1; iNdEx >= 0; iNdEx-- {
			v := m.SubAggs[string(keysForSubAggs[iNdEx])]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintTypes(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(keysForSubAggs[iNdEx])
			copy(dAtA[i:], keysForSubAggs[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(keysForSubAggs[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Topk != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Topk))
		i--
		dAtA[i] = 0x10
	}
	if m.Field != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Field))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FieldSubAggregation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FieldSubAggregation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldSubAggregation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AggregationType != nil {
		{
			size := m.AggregationType.Size()
			i -= size
			if _, err := m.AggregationType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *FieldSubAggregation_MaxAggregation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldSubAggregation_MaxAggregation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MaxAggregation != nil {
		{
			size, err := m.MaxAggregation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *FieldSubAggregation_MinAggregation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldSubAggregation_MinAggregation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MinAggregation != nil {
		{
			size, err := m.MinAggregation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *FieldSubAggregation_AvgAggregation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldSubAggregation_AvgAggregation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AvgAggregation != nil {
		{
			size, err := m.AvgAggregation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *FieldAggregation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FieldAggregation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldAggregation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubAggs) > 0 {
		keysForSubAggs := make([]string, 0, len(m.SubAggs))
		for k := range m.SubAggs {
			keysForSubAggs = append(keysForSubAggs, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForSubAggs)
		for iNdEx := len(keysForSubAggs) - 1; iNdEx >= 0; iNdEx-- {
			v := m.SubAggs[string(keysForSubAggs[iNdEx])]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintTypes(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(keysForSubAggs[iNdEx])
			copy(dAtA[i:], keysForSubAggs[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(keysForSubAggs[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Topk != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Topk))
		i--
		dAtA[i] = 0x10
	}
	if m.Field != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Field))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CardinalityAggregation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CardinalityAggregation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CardinalityAggregation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Field != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Field))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MaxAggregation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MaxAggregation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MaxAggregation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Field != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Field))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MinAggregation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MinAggregation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MinAggregation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Field != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Field))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AvgAggregation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AvgAggregation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AvgAggregation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Field != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Field))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AggregationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AggregationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AggregationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AggregationType != nil {
		{
			size := m.AggregationType.Size()
			i -= size
			if _, err := m.AggregationType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *AggregationRequest_DateAggregation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AggregationRequest_DateAggregation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DateAggregation != nil {
		{
			size, err := m.DateAggregation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *AggregationRequest_FieldAggregation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AggregationRequest_FieldAggregation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FieldAggregation != nil {
		{
			size, err := m.FieldAggregation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *AggregationRequest_CardinalityAggregation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AggregationRequest_CardinalityAggregation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CardinalityAggregation != nil {
		{
			size, err := m.CardinalityAggregation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *AggregationRequest_MultiFieldAggregation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AggregationRequest_MultiFieldAggregation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MultiFieldAggregation != nil {
		{
			size, err := m.MultiFieldAggregation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *AggregationRequest_MaxAggregation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AggregationRequest_MaxAggregation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MaxAggregation != nil {
		{
			size, err := m.MaxAggregation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *AggregationRequest_MinAggregation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AggregationRequest_MinAggregation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MinAggregation != nil {
		{
			size, err := m.MinAggregation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *AggregationRequest_AvgAggregation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AggregationRequest_AvgAggregation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AvgAggregation != nil {
		{
			size, err := m.AvgAggregation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DateSubAggregation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AggregationType != nil {
		n += m.AggregationType.Size()
	}
	return n
}

func (m *DateSubAggregation_FieldAggregation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FieldAggregation != nil {
		l = m.FieldAggregation.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DateSubAggregation_MultiFieldAggregation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MultiFieldAggregation != nil {
		l = m.MultiFieldAggregation.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DateAggregation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Step)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.SubAggs) > 0 {
		for k, v := range m.SubAggs {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTypes(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *MultiFieldAggregation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Field != 0 {
		n += 1 + sovTypes(uint64(m.Field))
	}
	if m.Topk != 0 {
		n += 1 + sovTypes(uint64(m.Topk))
	}
	if len(m.SubAggs) > 0 {
		for k, v := range m.SubAggs {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTypes(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *FieldSubAggregation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AggregationType != nil {
		n += m.AggregationType.Size()
	}
	return n
}

func (m *FieldSubAggregation_MaxAggregation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxAggregation != nil {
		l = m.MaxAggregation.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *FieldSubAggregation_MinAggregation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinAggregation != nil {
		l = m.MinAggregation.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *FieldSubAggregation_AvgAggregation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AvgAggregation != nil {
		l = m.AvgAggregation.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *FieldAggregation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Field != 0 {
		n += 1 + sovTypes(uint64(m.Field))
	}
	if m.Topk != 0 {
		n += 1 + sovTypes(uint64(m.Topk))
	}
	if len(m.SubAggs) > 0 {
		for k, v := range m.SubAggs {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTypes(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *CardinalityAggregation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Field != 0 {
		n += 1 + sovTypes(uint64(m.Field))
	}
	return n
}

func (m *MaxAggregation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Field != 0 {
		n += 1 + sovTypes(uint64(m.Field))
	}
	return n
}

func (m *MinAggregation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Field != 0 {
		n += 1 + sovTypes(uint64(m.Field))
	}
	return n
}

func (m *AvgAggregation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Field != 0 {
		n += 1 + sovTypes(uint64(m.Field))
	}
	return n
}

func (m *AggregationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AggregationType != nil {
		n += m.AggregationType.Size()
	}
	return n
}

func (m *AggregationRequest_DateAggregation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DateAggregation != nil {
		l = m.DateAggregation.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AggregationRequest_FieldAggregation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FieldAggregation != nil {
		l = m.FieldAggregation.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AggregationRequest_CardinalityAggregation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CardinalityAggregation != nil {
		l = m.CardinalityAggregation.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AggregationRequest_MultiFieldAggregation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MultiFieldAggregation != nil {
		l = m.MultiFieldAggregation.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AggregationRequest_MaxAggregation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxAggregation != nil {
		l = m.MaxAggregation.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AggregationRequest_MinAggregation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinAggregation != nil {
		l = m.MinAggregation.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AggregationRequest_AvgAggregation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AvgAggregation != nil {
		l = m.AvgAggregation.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *DateSubAggregation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DateSubAggregation{`,
		`AggregationType:` + fmt.Sprintf("%v", this.AggregationType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DateSubAggregation_FieldAggregation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DateSubAggregation_FieldAggregation{`,
		`FieldAggregation:` + strings.Replace(fmt.Sprintf("%v", this.FieldAggregation), "FieldAggregation", "FieldAggregation", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DateSubAggregation_MultiFieldAggregation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DateSubAggregation_MultiFieldAggregation{`,
		`MultiFieldAggregation:` + strings.Replace(fmt.Sprintf("%v", this.MultiFieldAggregation), "MultiFieldAggregation", "MultiFieldAggregation", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DateAggregation) String() string {
	if this == nil {
		return "nil"
	}
	keysForSubAggs := make([]string, 0, len(this.SubAggs))
	for k, _ := range this.SubAggs {
		keysForSubAggs = append(keysForSubAggs, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForSubAggs)
	mapStringForSubAggs := "map[string]*DateSubAggregation{"
	for _, k := range keysForSubAggs {
		mapStringForSubAggs += fmt.Sprintf("%v: %v,", k, this.SubAggs[k])
	}
	mapStringForSubAggs += "}"
	s := strings.Join([]string{`&DateAggregation{`,
		`Step:` + fmt.Sprintf("%v", this.Step) + `,`,
		`SubAggs:` + mapStringForSubAggs + `,`,
		`}`,
	}, "")
	return s
}
func (this *MultiFieldAggregation) String() string {
	if this == nil {
		return "nil"
	}
	keysForSubAggs := make([]string, 0, len(this.SubAggs))
	for k, _ := range this.SubAggs {
		keysForSubAggs = append(keysForSubAggs, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForSubAggs)
	mapStringForSubAggs := "map[string]*FieldSubAggregation{"
	for _, k := range keysForSubAggs {
		mapStringForSubAggs += fmt.Sprintf("%v: %v,", k, this.SubAggs[k])
	}
	mapStringForSubAggs += "}"
	s := strings.Join([]string{`&MultiFieldAggregation{`,
		`Field:` + fmt.Sprintf("%v", this.Field) + `,`,
		`Topk:` + fmt.Sprintf("%v", this.Topk) + `,`,
		`SubAggs:` + mapStringForSubAggs + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldSubAggregation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldSubAggregation{`,
		`AggregationType:` + fmt.Sprintf("%v", this.AggregationType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldSubAggregation_MaxAggregation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldSubAggregation_MaxAggregation{`,
		`MaxAggregation:` + strings.Replace(fmt.Sprintf("%v", this.MaxAggregation), "MaxAggregation", "MaxAggregation", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldSubAggregation_MinAggregation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldSubAggregation_MinAggregation{`,
		`MinAggregation:` + strings.Replace(fmt.Sprintf("%v", this.MinAggregation), "MinAggregation", "MinAggregation", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldSubAggregation_AvgAggregation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldSubAggregation_AvgAggregation{`,
		`AvgAggregation:` + strings.Replace(fmt.Sprintf("%v", this.AvgAggregation), "AvgAggregation", "AvgAggregation", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldAggregation) String() string {
	if this == nil {
		return "nil"
	}
	keysForSubAggs := make([]string, 0, len(this.SubAggs))
	for k, _ := range this.SubAggs {
		keysForSubAggs = append(keysForSubAggs, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForSubAggs)
	mapStringForSubAggs := "map[string]*FieldSubAggregation{"
	for _, k := range keysForSubAggs {
		mapStringForSubAggs += fmt.Sprintf("%v: %v,", k, this.SubAggs[k])
	}
	mapStringForSubAggs += "}"
	s := strings.Join([]string{`&FieldAggregation{`,
		`Field:` + fmt.Sprintf("%v", this.Field) + `,`,
		`Topk:` + fmt.Sprintf("%v", this.Topk) + `,`,
		`SubAggs:` + mapStringForSubAggs + `,`,
		`}`,
	}, "")
	return s
}
func (this *CardinalityAggregation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CardinalityAggregation{`,
		`Field:` + fmt.Sprintf("%v", this.Field) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MaxAggregation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MaxAggregation{`,
		`Field:` + fmt.Sprintf("%v", this.Field) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MinAggregation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MinAggregation{`,
		`Field:` + fmt.Sprintf("%v", this.Field) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AvgAggregation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AvgAggregation{`,
		`Field:` + fmt.Sprintf("%v", this.Field) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AggregationRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AggregationRequest{`,
		`AggregationType:` + fmt.Sprintf("%v", this.AggregationType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AggregationRequest_DateAggregation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AggregationRequest_DateAggregation{`,
		`DateAggregation:` + strings.Replace(fmt.Sprintf("%v", this.DateAggregation), "DateAggregation", "DateAggregation", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AggregationRequest_FieldAggregation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AggregationRequest_FieldAggregation{`,
		`FieldAggregation:` + strings.Replace(fmt.Sprintf("%v", this.FieldAggregation), "FieldAggregation", "FieldAggregation", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AggregationRequest_CardinalityAggregation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AggregationRequest_CardinalityAggregation{`,
		`CardinalityAggregation:` + strings.Replace(fmt.Sprintf("%v", this.CardinalityAggregation), "CardinalityAggregation", "CardinalityAggregation", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AggregationRequest_MultiFieldAggregation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AggregationRequest_MultiFieldAggregation{`,
		`MultiFieldAggregation:` + strings.Replace(fmt.Sprintf("%v", this.MultiFieldAggregation), "MultiFieldAggregation", "MultiFieldAggregation", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AggregationRequest_MaxAggregation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AggregationRequest_MaxAggregation{`,
		`MaxAggregation:` + strings.Replace(fmt.Sprintf("%v", this.MaxAggregation), "MaxAggregation", "MaxAggregation", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AggregationRequest_MinAggregation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AggregationRequest_MinAggregation{`,
		`MinAggregation:` + strings.Replace(fmt.Sprintf("%v", this.MinAggregation), "MinAggregation", "MinAggregation", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AggregationRequest_AvgAggregation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AggregationRequest_AvgAggregation{`,
		`AvgAggregation:` + strings.Replace(fmt.Sprintf("%v", this.AvgAggregation), "AvgAggregation", "AvgAggregation", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *DateSubAggregation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DateSubAggregation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DateSubAggregation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldAggregation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FieldAggregation{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AggregationType = &DateSubAggregation_FieldAggregation{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultiFieldAggregation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MultiFieldAggregation{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AggregationType = &DateSubAggregation_MultiFieldAggregation{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DateAggregation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DateAggregation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DateAggregation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Step = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubAggs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SubAggs == nil {
				m.SubAggs = make(map[string]*DateSubAggregation)
			}
			var mapkey string
			var mapvalue *DateSubAggregation
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTypes
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthTypes
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &DateSubAggregation{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SubAggs[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiFieldAggregation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiFieldAggregation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiFieldAggregation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			m.Field = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Field |= MultiKeyField(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topk", wireType)
			}
			m.Topk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Topk |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubAggs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SubAggs == nil {
				m.SubAggs = make(map[string]*FieldSubAggregation)
			}
			var mapkey string
			var mapvalue *FieldSubAggregation
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTypes
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthTypes
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &FieldSubAggregation{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SubAggs[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FieldSubAggregation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FieldSubAggregation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FieldSubAggregation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAggregation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MaxAggregation{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AggregationType = &FieldSubAggregation_MaxAggregation{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinAggregation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MinAggregation{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AggregationType = &FieldSubAggregation_MinAggregation{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvgAggregation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AvgAggregation{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AggregationType = &FieldSubAggregation_AvgAggregation{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FieldAggregation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FieldAggregation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FieldAggregation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			m.Field = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Field |= KeyField(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topk", wireType)
			}
			m.Topk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Topk |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubAggs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SubAggs == nil {
				m.SubAggs = make(map[string]*FieldSubAggregation)
			}
			var mapkey string
			var mapvalue *FieldSubAggregation
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTypes
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthTypes
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &FieldSubAggregation{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SubAggs[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardinalityAggregation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CardinalityAggregation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CardinalityAggregation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			m.Field = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Field |= KeyField(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MaxAggregation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MaxAggregation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MaxAggregation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			m.Field = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Field |= NumKeyField(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MinAggregation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MinAggregation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MinAggregation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			m.Field = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Field |= NumKeyField(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AvgAggregation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AvgAggregation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AvgAggregation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			m.Field = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Field |= NumKeyField(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AggregationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AggregationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AggregationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DateAggregation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DateAggregation{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AggregationType = &AggregationRequest_DateAggregation{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldAggregation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FieldAggregation{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AggregationType = &AggregationRequest_FieldAggregation{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardinalityAggregation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CardinalityAggregation{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AggregationType = &AggregationRequest_CardinalityAggregation{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultiFieldAggregation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MultiFieldAggregation{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AggregationType = &AggregationRequest_MultiFieldAggregation{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAggregation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MaxAggregation{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AggregationType = &AggregationRequest_MaxAggregation{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinAggregation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MinAggregation{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AggregationType = &AggregationRequest_MinAggregation{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvgAggregation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AvgAggregation{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AggregationType = &AggregationRequest_AvgAggregation{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

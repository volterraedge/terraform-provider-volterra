// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package access_log

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *AggregationRequest) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AggregationRequest) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AggregationRequest) DeepCopy() *AggregationRequest {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AggregationRequest{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AggregationRequest) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AggregationRequest) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AggregationRequestValidator().Validate(ctx, m, opts...)
}

type ValidateAggregationRequest struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAggregationRequest) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AggregationRequest)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AggregationRequest got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	switch m.GetAggregationType().(type) {
	case *AggregationRequest_DateAggregation:
		if fv, exists := v.FldValidators["aggregation_type.date_aggregation"]; exists {
			val := m.GetAggregationType().(*AggregationRequest_DateAggregation).DateAggregation
			vOpts := append(opts,
				db.WithValidateField("aggregation_type"),
				db.WithValidateField("date_aggregation"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AggregationRequest_FieldAggregation:
		if fv, exists := v.FldValidators["aggregation_type.field_aggregation"]; exists {
			val := m.GetAggregationType().(*AggregationRequest_FieldAggregation).FieldAggregation
			vOpts := append(opts,
				db.WithValidateField("aggregation_type"),
				db.WithValidateField("field_aggregation"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AggregationRequest_CardinalityAggregation:
		if fv, exists := v.FldValidators["aggregation_type.cardinality_aggregation"]; exists {
			val := m.GetAggregationType().(*AggregationRequest_CardinalityAggregation).CardinalityAggregation
			vOpts := append(opts,
				db.WithValidateField("aggregation_type"),
				db.WithValidateField("cardinality_aggregation"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AggregationRequest_MultiFieldAggregation:
		if fv, exists := v.FldValidators["aggregation_type.multi_field_aggregation"]; exists {
			val := m.GetAggregationType().(*AggregationRequest_MultiFieldAggregation).MultiFieldAggregation
			vOpts := append(opts,
				db.WithValidateField("aggregation_type"),
				db.WithValidateField("multi_field_aggregation"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AggregationRequest_MaxAggregation:
		if fv, exists := v.FldValidators["aggregation_type.max_aggregation"]; exists {
			val := m.GetAggregationType().(*AggregationRequest_MaxAggregation).MaxAggregation
			vOpts := append(opts,
				db.WithValidateField("aggregation_type"),
				db.WithValidateField("max_aggregation"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AggregationRequest_MinAggregation:
		if fv, exists := v.FldValidators["aggregation_type.min_aggregation"]; exists {
			val := m.GetAggregationType().(*AggregationRequest_MinAggregation).MinAggregation
			vOpts := append(opts,
				db.WithValidateField("aggregation_type"),
				db.WithValidateField("min_aggregation"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AggregationRequest_AvgAggregation:
		if fv, exists := v.FldValidators["aggregation_type.avg_aggregation"]; exists {
			val := m.GetAggregationType().(*AggregationRequest_AvgAggregation).AvgAggregation
			vOpts := append(opts,
				db.WithValidateField("aggregation_type"),
				db.WithValidateField("avg_aggregation"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAggregationRequestValidator = func() *ValidateAggregationRequest {
	v := &ValidateAggregationRequest{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["aggregation_type.date_aggregation"] = DateAggregationValidator().Validate
	v.FldValidators["aggregation_type.field_aggregation"] = FieldAggregationValidator().Validate
	v.FldValidators["aggregation_type.cardinality_aggregation"] = CardinalityAggregationValidator().Validate
	v.FldValidators["aggregation_type.multi_field_aggregation"] = MultiFieldAggregationValidator().Validate
	v.FldValidators["aggregation_type.max_aggregation"] = MaxAggregationValidator().Validate
	v.FldValidators["aggregation_type.min_aggregation"] = MinAggregationValidator().Validate
	v.FldValidators["aggregation_type.avg_aggregation"] = AvgAggregationValidator().Validate

	return v
}()

func AggregationRequestValidator() db.Validator {
	return DefaultAggregationRequestValidator
}

// augmented methods on protoc/std generated struct

func (m *AvgAggregation) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AvgAggregation) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AvgAggregation) DeepCopy() *AvgAggregation {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AvgAggregation{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AvgAggregation) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AvgAggregation) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AvgAggregationValidator().Validate(ctx, m, opts...)
}

type ValidateAvgAggregation struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAvgAggregation) FieldValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(NumKeyField)
		return int32(i)
	}
	// NumKeyField_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, NumKeyField_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for field")
	}

	return validatorFn, nil
}

func (v *ValidateAvgAggregation) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AvgAggregation)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AvgAggregation got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["field"]; exists {

		vOpts := append(opts, db.WithValidateField("field"))
		if err := fv(ctx, m.GetField(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAvgAggregationValidator = func() *ValidateAvgAggregation {
	v := &ValidateAvgAggregation{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhField := v.FieldValidationRuleHandler
	rulesField := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhField(rulesField)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AvgAggregation.field: %s", err)
		panic(errMsg)
	}
	v.FldValidators["field"] = vFn

	return v
}()

func AvgAggregationValidator() db.Validator {
	return DefaultAvgAggregationValidator
}

// augmented methods on protoc/std generated struct

func (m *CardinalityAggregation) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CardinalityAggregation) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CardinalityAggregation) DeepCopy() *CardinalityAggregation {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CardinalityAggregation{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CardinalityAggregation) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CardinalityAggregation) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CardinalityAggregationValidator().Validate(ctx, m, opts...)
}

type ValidateCardinalityAggregation struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCardinalityAggregation) FieldValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(KeyField)
		return int32(i)
	}
	// KeyField_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, KeyField_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for field")
	}

	return validatorFn, nil
}

func (v *ValidateCardinalityAggregation) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CardinalityAggregation)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CardinalityAggregation got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["field"]; exists {

		vOpts := append(opts, db.WithValidateField("field"))
		if err := fv(ctx, m.GetField(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCardinalityAggregationValidator = func() *ValidateCardinalityAggregation {
	v := &ValidateCardinalityAggregation{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhField := v.FieldValidationRuleHandler
	rulesField := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhField(rulesField)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CardinalityAggregation.field: %s", err)
		panic(errMsg)
	}
	v.FldValidators["field"] = vFn

	return v
}()

func CardinalityAggregationValidator() db.Validator {
	return DefaultCardinalityAggregationValidator
}

// augmented methods on protoc/std generated struct

func (m *DateAggregation) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DateAggregation) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DateAggregation) DeepCopy() *DateAggregation {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DateAggregation{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DateAggregation) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DateAggregation) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DateAggregationValidator().Validate(ctx, m, opts...)
}

type ValidateDateAggregation struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDateAggregation) StepValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for step")
	}

	return validatorFn, nil
}

func (v *ValidateDateAggregation) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DateAggregation)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DateAggregation got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["step"]; exists {

		vOpts := append(opts, db.WithValidateField("step"))
		if err := fv(ctx, m.GetStep(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["sub_aggs"]; exists {

		vOpts := append(opts, db.WithValidateField("sub_aggs"))
		for key, value := range m.GetSubAggs() {
			vOpts := append(vOpts, db.WithValidateMapKey(key))
			if err := fv(ctx, value, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDateAggregationValidator = func() *ValidateDateAggregation {
	v := &ValidateDateAggregation{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhStep := v.StepValidationRuleHandler
	rulesStep := map[string]string{
		"ves.io.schema.rules.message.required":  "true",
		"ves.io.schema.rules.string.query_step": "true",
	}
	vFn, err = vrhStep(rulesStep)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DateAggregation.step: %s", err)
		panic(errMsg)
	}
	v.FldValidators["step"] = vFn

	v.FldValidators["sub_aggs"] = DateSubAggregationValidator().Validate

	return v
}()

func DateAggregationValidator() db.Validator {
	return DefaultDateAggregationValidator
}

// augmented methods on protoc/std generated struct

func (m *DateSubAggregation) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DateSubAggregation) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DateSubAggregation) DeepCopy() *DateSubAggregation {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DateSubAggregation{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DateSubAggregation) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DateSubAggregation) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DateSubAggregationValidator().Validate(ctx, m, opts...)
}

type ValidateDateSubAggregation struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDateSubAggregation) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DateSubAggregation)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DateSubAggregation got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	switch m.GetAggregationType().(type) {
	case *DateSubAggregation_FieldAggregation:
		if fv, exists := v.FldValidators["aggregation_type.field_aggregation"]; exists {
			val := m.GetAggregationType().(*DateSubAggregation_FieldAggregation).FieldAggregation
			vOpts := append(opts,
				db.WithValidateField("aggregation_type"),
				db.WithValidateField("field_aggregation"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *DateSubAggregation_MultiFieldAggregation:
		if fv, exists := v.FldValidators["aggregation_type.multi_field_aggregation"]; exists {
			val := m.GetAggregationType().(*DateSubAggregation_MultiFieldAggregation).MultiFieldAggregation
			vOpts := append(opts,
				db.WithValidateField("aggregation_type"),
				db.WithValidateField("multi_field_aggregation"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDateSubAggregationValidator = func() *ValidateDateSubAggregation {
	v := &ValidateDateSubAggregation{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["aggregation_type.field_aggregation"] = FieldAggregationValidator().Validate
	v.FldValidators["aggregation_type.multi_field_aggregation"] = MultiFieldAggregationValidator().Validate

	return v
}()

func DateSubAggregationValidator() db.Validator {
	return DefaultDateSubAggregationValidator
}

// augmented methods on protoc/std generated struct

func (m *FieldAggregation) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *FieldAggregation) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *FieldAggregation) DeepCopy() *FieldAggregation {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &FieldAggregation{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *FieldAggregation) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *FieldAggregation) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return FieldAggregationValidator().Validate(ctx, m, opts...)
}

type ValidateFieldAggregation struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateFieldAggregation) FieldValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(KeyField)
		return int32(i)
	}
	// KeyField_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, KeyField_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for field")
	}

	return validatorFn, nil
}

func (v *ValidateFieldAggregation) TopkValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for topk")
	}

	return validatorFn, nil
}

func (v *ValidateFieldAggregation) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*FieldAggregation)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *FieldAggregation got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["field"]; exists {

		vOpts := append(opts, db.WithValidateField("field"))
		if err := fv(ctx, m.GetField(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["sub_aggs"]; exists {

		vOpts := append(opts, db.WithValidateField("sub_aggs"))
		for key, value := range m.GetSubAggs() {
			vOpts := append(vOpts, db.WithValidateMapKey(key))
			if err := fv(ctx, value, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["topk"]; exists {

		vOpts := append(opts, db.WithValidateField("topk"))
		if err := fv(ctx, m.GetTopk(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultFieldAggregationValidator = func() *ValidateFieldAggregation {
	v := &ValidateFieldAggregation{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhField := v.FieldValidationRuleHandler
	rulesField := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhField(rulesField)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for FieldAggregation.field: %s", err)
		panic(errMsg)
	}
	v.FldValidators["field"] = vFn

	vrhTopk := v.TopkValidationRuleHandler
	rulesTopk := map[string]string{
		"ves.io.schema.rules.uint32.gte": "0",
		"ves.io.schema.rules.uint32.lte": "100",
	}
	vFn, err = vrhTopk(rulesTopk)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for FieldAggregation.topk: %s", err)
		panic(errMsg)
	}
	v.FldValidators["topk"] = vFn

	v.FldValidators["sub_aggs"] = FieldSubAggregationValidator().Validate

	return v
}()

func FieldAggregationValidator() db.Validator {
	return DefaultFieldAggregationValidator
}

// augmented methods on protoc/std generated struct

func (m *FieldSubAggregation) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *FieldSubAggregation) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *FieldSubAggregation) DeepCopy() *FieldSubAggregation {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &FieldSubAggregation{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *FieldSubAggregation) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *FieldSubAggregation) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return FieldSubAggregationValidator().Validate(ctx, m, opts...)
}

type ValidateFieldSubAggregation struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateFieldSubAggregation) AggregationTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for aggregation_type")
	}
	return validatorFn, nil
}

func (v *ValidateFieldSubAggregation) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*FieldSubAggregation)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *FieldSubAggregation got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["aggregation_type"]; exists {
		val := m.GetAggregationType()
		vOpts := append(opts,
			db.WithValidateField("aggregation_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetAggregationType().(type) {
	case *FieldSubAggregation_MaxAggregation:
		if fv, exists := v.FldValidators["aggregation_type.max_aggregation"]; exists {
			val := m.GetAggregationType().(*FieldSubAggregation_MaxAggregation).MaxAggregation
			vOpts := append(opts,
				db.WithValidateField("aggregation_type"),
				db.WithValidateField("max_aggregation"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *FieldSubAggregation_MinAggregation:
		if fv, exists := v.FldValidators["aggregation_type.min_aggregation"]; exists {
			val := m.GetAggregationType().(*FieldSubAggregation_MinAggregation).MinAggregation
			vOpts := append(opts,
				db.WithValidateField("aggregation_type"),
				db.WithValidateField("min_aggregation"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *FieldSubAggregation_AvgAggregation:
		if fv, exists := v.FldValidators["aggregation_type.avg_aggregation"]; exists {
			val := m.GetAggregationType().(*FieldSubAggregation_AvgAggregation).AvgAggregation
			vOpts := append(opts,
				db.WithValidateField("aggregation_type"),
				db.WithValidateField("avg_aggregation"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultFieldSubAggregationValidator = func() *ValidateFieldSubAggregation {
	v := &ValidateFieldSubAggregation{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAggregationType := v.AggregationTypeValidationRuleHandler
	rulesAggregationType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhAggregationType(rulesAggregationType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for FieldSubAggregation.aggregation_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["aggregation_type"] = vFn

	v.FldValidators["aggregation_type.max_aggregation"] = MaxAggregationValidator().Validate
	v.FldValidators["aggregation_type.min_aggregation"] = MinAggregationValidator().Validate
	v.FldValidators["aggregation_type.avg_aggregation"] = AvgAggregationValidator().Validate

	return v
}()

func FieldSubAggregationValidator() db.Validator {
	return DefaultFieldSubAggregationValidator
}

// augmented methods on protoc/std generated struct

func (m *MaxAggregation) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *MaxAggregation) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *MaxAggregation) DeepCopy() *MaxAggregation {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &MaxAggregation{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *MaxAggregation) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *MaxAggregation) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return MaxAggregationValidator().Validate(ctx, m, opts...)
}

type ValidateMaxAggregation struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateMaxAggregation) FieldValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(NumKeyField)
		return int32(i)
	}
	// NumKeyField_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, NumKeyField_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for field")
	}

	return validatorFn, nil
}

func (v *ValidateMaxAggregation) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*MaxAggregation)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *MaxAggregation got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["field"]; exists {

		vOpts := append(opts, db.WithValidateField("field"))
		if err := fv(ctx, m.GetField(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultMaxAggregationValidator = func() *ValidateMaxAggregation {
	v := &ValidateMaxAggregation{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhField := v.FieldValidationRuleHandler
	rulesField := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhField(rulesField)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for MaxAggregation.field: %s", err)
		panic(errMsg)
	}
	v.FldValidators["field"] = vFn

	return v
}()

func MaxAggregationValidator() db.Validator {
	return DefaultMaxAggregationValidator
}

// augmented methods on protoc/std generated struct

func (m *MinAggregation) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *MinAggregation) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *MinAggregation) DeepCopy() *MinAggregation {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &MinAggregation{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *MinAggregation) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *MinAggregation) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return MinAggregationValidator().Validate(ctx, m, opts...)
}

type ValidateMinAggregation struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateMinAggregation) FieldValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(NumKeyField)
		return int32(i)
	}
	// NumKeyField_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, NumKeyField_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for field")
	}

	return validatorFn, nil
}

func (v *ValidateMinAggregation) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*MinAggregation)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *MinAggregation got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["field"]; exists {

		vOpts := append(opts, db.WithValidateField("field"))
		if err := fv(ctx, m.GetField(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultMinAggregationValidator = func() *ValidateMinAggregation {
	v := &ValidateMinAggregation{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhField := v.FieldValidationRuleHandler
	rulesField := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhField(rulesField)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for MinAggregation.field: %s", err)
		panic(errMsg)
	}
	v.FldValidators["field"] = vFn

	return v
}()

func MinAggregationValidator() db.Validator {
	return DefaultMinAggregationValidator
}

// augmented methods on protoc/std generated struct

func (m *MultiFieldAggregation) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *MultiFieldAggregation) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *MultiFieldAggregation) DeepCopy() *MultiFieldAggregation {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &MultiFieldAggregation{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *MultiFieldAggregation) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *MultiFieldAggregation) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return MultiFieldAggregationValidator().Validate(ctx, m, opts...)
}

type ValidateMultiFieldAggregation struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateMultiFieldAggregation) FieldValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(MultiKeyField)
		return int32(i)
	}
	// MultiKeyField_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, MultiKeyField_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for field")
	}

	return validatorFn, nil
}

func (v *ValidateMultiFieldAggregation) TopkValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for topk")
	}

	return validatorFn, nil
}

func (v *ValidateMultiFieldAggregation) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*MultiFieldAggregation)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *MultiFieldAggregation got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["field"]; exists {

		vOpts := append(opts, db.WithValidateField("field"))
		if err := fv(ctx, m.GetField(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["sub_aggs"]; exists {

		vOpts := append(opts, db.WithValidateField("sub_aggs"))
		for key, value := range m.GetSubAggs() {
			vOpts := append(vOpts, db.WithValidateMapKey(key))
			if err := fv(ctx, value, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["topk"]; exists {

		vOpts := append(opts, db.WithValidateField("topk"))
		if err := fv(ctx, m.GetTopk(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultMultiFieldAggregationValidator = func() *ValidateMultiFieldAggregation {
	v := &ValidateMultiFieldAggregation{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhField := v.FieldValidationRuleHandler
	rulesField := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhField(rulesField)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for MultiFieldAggregation.field: %s", err)
		panic(errMsg)
	}
	v.FldValidators["field"] = vFn

	vrhTopk := v.TopkValidationRuleHandler
	rulesTopk := map[string]string{
		"ves.io.schema.rules.uint32.gte": "0",
		"ves.io.schema.rules.uint32.lte": "100",
	}
	vFn, err = vrhTopk(rulesTopk)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for MultiFieldAggregation.topk: %s", err)
		panic(errMsg)
	}
	v.FldValidators["topk"] = vFn

	v.FldValidators["sub_aggs"] = FieldSubAggregationValidator().Validate

	return v
}()

func MultiFieldAggregationValidator() db.Validator {
	return DefaultMultiFieldAggregationValidator
}

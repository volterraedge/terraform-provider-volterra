// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/nfv_service/types.proto

package nfv_service

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/network_policy_set"
	views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Palo Alto Networks VM-Series Instance Type
//
// x-displayName: "Palo Alto Networks VM-Series Instance Typ"
type PaloAltoFWAWSInstanceType int32

const (
	// m4.xlarge
	//
	// x-displayName: "m4.xlarge"
	PALO_ALTO_FW_AWS_INSTANCE_TYPE_M4_XLARGE PaloAltoFWAWSInstanceType = 0
	// m4.2xlarge
	//
	// x-displayName: "m4.2xlarge"
	PALO_ALTO_FW_AWS_INSTANCE_TYPE_M4_2XLARGE PaloAltoFWAWSInstanceType = 1
	// m4.4xlarge
	//
	// x-displayName: "m4.4xlarge"
	PALO_ALTO_FW_AWS_INSTANCE_TYPE_M4_4XLARGE PaloAltoFWAWSInstanceType = 2
	// m5.large
	//
	// x-displayName: "m5.large"
	PALO_ALTO_FW_AWS_INSTANCE_TYPE_M5_LARGE PaloAltoFWAWSInstanceType = 3
	// m5.xlarge
	//
	// x-displayName: "m5.xlarge"
	PALO_ALTO_FW_AWS_INSTANCE_TYPE_M5_XLARGE PaloAltoFWAWSInstanceType = 4
	// m5.2xlarge
	//
	// x-displayName: "m5.2xlarge"
	PALO_ALTO_FW_AWS_INSTANCE_TYPE_M5_2XLARGE PaloAltoFWAWSInstanceType = 5
	// m5.4xlarge
	//
	// x-displayName: "m5.4xlarge"
	PALO_ALTO_FW_AWS_INSTANCE_TYPE_M5_4XLARGE PaloAltoFWAWSInstanceType = 6
	// m5.12xlarge
	//
	// x-displayName: "m5.12xlarge"
	PALO_ALTO_FW_AWS_INSTANCE_TYPE_M5_12XLARGE PaloAltoFWAWSInstanceType = 7
	// m5n.large
	//
	// x-displayName: "m5n.large"
	PALO_ALTO_FW_AWS_INSTANCE_TYPE_M5N_LARGE PaloAltoFWAWSInstanceType = 8
	// m5n.xlarge
	//
	// x-displayName: "m5n.xlarge"
	PALO_ALTO_FW_AWS_INSTANCE_TYPE_M5N_XLARGE PaloAltoFWAWSInstanceType = 9
	// m5n.2xlarge
	//
	// x-displayName: "m5n.2xlarge"
	PALO_ALTO_FW_AWS_INSTANCE_TYPE_M5N_2XLARGE PaloAltoFWAWSInstanceType = 10
	// m5n.4xlarge
	//
	// x-displayName: "m5n.4xlarge"
	PALO_ALTO_FW_AWS_INSTANCE_TYPE_M5N_4XLARGE PaloAltoFWAWSInstanceType = 11
	// c4.large
	//
	// x-displayName: "c4.large"
	PALO_ALTO_FW_AWS_INSTANCE_TYPE_C4_LARGE PaloAltoFWAWSInstanceType = 12
	// c4.xlarge
	//
	// x-displayName: "c4.xlarge"
	PALO_ALTO_FW_AWS_INSTANCE_TYPE_C4_XLARGE PaloAltoFWAWSInstanceType = 13
	// c4.2xlarge
	//
	// x-displayName: "c4.2xlarge"
	PALO_ALTO_FW_AWS_INSTANCE_TYPE_C4_2XLARGE PaloAltoFWAWSInstanceType = 14
	// c4.4xlarge
	//
	// x-displayName: "c4.4xlarge"
	PALO_ALTO_FW_AWS_INSTANCE_TYPE_C4_4XLARGE PaloAltoFWAWSInstanceType = 15
	// c4.8xlarge
	//
	// x-displayName: "c4.8xlarge"
	PALO_ALTO_FW_AWS_INSTANCE_TYPE_C4_8XLARGE PaloAltoFWAWSInstanceType = 16
	// c5.large
	//
	// x-displayName: "c5.large"
	PALO_ALTO_FW_AWS_INSTANCE_TYPE_C5_LARGE PaloAltoFWAWSInstanceType = 17
	// c5.xlarge
	//
	// x-displayName: "c5.xlarge"
	PALO_ALTO_FW_AWS_INSTANCE_TYPE_C5_XLARGE PaloAltoFWAWSInstanceType = 18
	// c5.2xlarge
	//
	// x-displayName: "c5.2xlarge"
	PALO_ALTO_FW_AWS_INSTANCE_TYPE_C5_2XLARGE PaloAltoFWAWSInstanceType = 19
	// c5.4xlarge
	//
	// x-displayName: "c5.4xlarge"
	PALO_ALTO_FW_AWS_INSTANCE_TYPE_C5_4XLARGE PaloAltoFWAWSInstanceType = 20
	// c5.9xlarge
	//
	// x-displayName: "c5.9xlarge"
	PALO_ALTO_FW_AWS_INSTANCE_TYPE_C5_9XLARGE PaloAltoFWAWSInstanceType = 21
	// c5.18xlarge
	//
	// x-displayName: "c5.18xlarge"
	PALO_ALTO_FW_AWS_INSTANCE_TYPE_C5_18XLARGE PaloAltoFWAWSInstanceType = 22
	// c5n.large
	//
	// x-displayName: "c5n.large"
	PALO_ALTO_FW_AWS_INSTANCE_TYPE_C5N_LARGE PaloAltoFWAWSInstanceType = 23
	// c5n.xlarge
	//
	// x-displayName: "c5n.xlarge"
	PALO_ALTO_FW_AWS_INSTANCE_TYPE_C5N_XLARGE PaloAltoFWAWSInstanceType = 24
	// c5n.2xlarge
	//
	// x-displayName: "c5n.2xlarge"
	PALO_ALTO_FW_AWS_INSTANCE_TYPE_C5N_2XLARGE PaloAltoFWAWSInstanceType = 25
	// c5n.4xlarge
	//
	// x-displayName: "c5n.4xlarge"
	PALO_ALTO_FW_AWS_INSTANCE_TYPE_C5N_4XLARGE PaloAltoFWAWSInstanceType = 26
	// c5n.9xlarge
	//
	// x-displayName: "c5n.9xlarge"
	PALO_ALTO_FW_AWS_INSTANCE_TYPE_C5N_9XLARGE PaloAltoFWAWSInstanceType = 27
	// c5n.18xlarge
	//
	// x-displayName: "c5n.18xlarge"
	PALO_ALTO_FW_AWS_INSTANCE_TYPE_C5N_18XLARGE PaloAltoFWAWSInstanceType = 28
	// r5.2xlarge
	//
	// x-displayName: "r5.2xlarge"
	PALO_ALTO_FW_AWS_INSTANCE_TYPE_R5_2XLARGE PaloAltoFWAWSInstanceType = 29
)

var PaloAltoFWAWSInstanceType_name = map[int32]string{
	0:  "PALO_ALTO_FW_AWS_INSTANCE_TYPE_M4_XLARGE",
	1:  "PALO_ALTO_FW_AWS_INSTANCE_TYPE_M4_2XLARGE",
	2:  "PALO_ALTO_FW_AWS_INSTANCE_TYPE_M4_4XLARGE",
	3:  "PALO_ALTO_FW_AWS_INSTANCE_TYPE_M5_LARGE",
	4:  "PALO_ALTO_FW_AWS_INSTANCE_TYPE_M5_XLARGE",
	5:  "PALO_ALTO_FW_AWS_INSTANCE_TYPE_M5_2XLARGE",
	6:  "PALO_ALTO_FW_AWS_INSTANCE_TYPE_M5_4XLARGE",
	7:  "PALO_ALTO_FW_AWS_INSTANCE_TYPE_M5_12XLARGE",
	8:  "PALO_ALTO_FW_AWS_INSTANCE_TYPE_M5N_LARGE",
	9:  "PALO_ALTO_FW_AWS_INSTANCE_TYPE_M5N_XLARGE",
	10: "PALO_ALTO_FW_AWS_INSTANCE_TYPE_M5N_2XLARGE",
	11: "PALO_ALTO_FW_AWS_INSTANCE_TYPE_M5N_4XLARGE",
	12: "PALO_ALTO_FW_AWS_INSTANCE_TYPE_C4_LARGE",
	13: "PALO_ALTO_FW_AWS_INSTANCE_TYPE_C4_XLARGE",
	14: "PALO_ALTO_FW_AWS_INSTANCE_TYPE_C4_2XLARGE",
	15: "PALO_ALTO_FW_AWS_INSTANCE_TYPE_C4_4XLARGE",
	16: "PALO_ALTO_FW_AWS_INSTANCE_TYPE_C4_8XLARGE",
	17: "PALO_ALTO_FW_AWS_INSTANCE_TYPE_C5_LARGE",
	18: "PALO_ALTO_FW_AWS_INSTANCE_TYPE_C5_XLARGE",
	19: "PALO_ALTO_FW_AWS_INSTANCE_TYPE_C5_2XLARGE",
	20: "PALO_ALTO_FW_AWS_INSTANCE_TYPE_C5_4XLARGE",
	21: "PALO_ALTO_FW_AWS_INSTANCE_TYPE_C5_9XLARGE",
	22: "PALO_ALTO_FW_AWS_INSTANCE_TYPE_C5_18XLARGE",
	23: "PALO_ALTO_FW_AWS_INSTANCE_TYPE_C5N_LARGE",
	24: "PALO_ALTO_FW_AWS_INSTANCE_TYPE_C5N_XLARGE",
	25: "PALO_ALTO_FW_AWS_INSTANCE_TYPE_C5N_2XLARGE",
	26: "PALO_ALTO_FW_AWS_INSTANCE_TYPE_C5N_4XLARGE",
	27: "PALO_ALTO_FW_AWS_INSTANCE_TYPE_C5N_9XLARGE",
	28: "PALO_ALTO_FW_AWS_INSTANCE_TYPE_C5N_18XLARGE",
	29: "PALO_ALTO_FW_AWS_INSTANCE_TYPE_R5_2XLARGE",
}

var PaloAltoFWAWSInstanceType_value = map[string]int32{
	"PALO_ALTO_FW_AWS_INSTANCE_TYPE_M4_XLARGE":    0,
	"PALO_ALTO_FW_AWS_INSTANCE_TYPE_M4_2XLARGE":   1,
	"PALO_ALTO_FW_AWS_INSTANCE_TYPE_M4_4XLARGE":   2,
	"PALO_ALTO_FW_AWS_INSTANCE_TYPE_M5_LARGE":     3,
	"PALO_ALTO_FW_AWS_INSTANCE_TYPE_M5_XLARGE":    4,
	"PALO_ALTO_FW_AWS_INSTANCE_TYPE_M5_2XLARGE":   5,
	"PALO_ALTO_FW_AWS_INSTANCE_TYPE_M5_4XLARGE":   6,
	"PALO_ALTO_FW_AWS_INSTANCE_TYPE_M5_12XLARGE":  7,
	"PALO_ALTO_FW_AWS_INSTANCE_TYPE_M5N_LARGE":    8,
	"PALO_ALTO_FW_AWS_INSTANCE_TYPE_M5N_XLARGE":   9,
	"PALO_ALTO_FW_AWS_INSTANCE_TYPE_M5N_2XLARGE":  10,
	"PALO_ALTO_FW_AWS_INSTANCE_TYPE_M5N_4XLARGE":  11,
	"PALO_ALTO_FW_AWS_INSTANCE_TYPE_C4_LARGE":     12,
	"PALO_ALTO_FW_AWS_INSTANCE_TYPE_C4_XLARGE":    13,
	"PALO_ALTO_FW_AWS_INSTANCE_TYPE_C4_2XLARGE":   14,
	"PALO_ALTO_FW_AWS_INSTANCE_TYPE_C4_4XLARGE":   15,
	"PALO_ALTO_FW_AWS_INSTANCE_TYPE_C4_8XLARGE":   16,
	"PALO_ALTO_FW_AWS_INSTANCE_TYPE_C5_LARGE":     17,
	"PALO_ALTO_FW_AWS_INSTANCE_TYPE_C5_XLARGE":    18,
	"PALO_ALTO_FW_AWS_INSTANCE_TYPE_C5_2XLARGE":   19,
	"PALO_ALTO_FW_AWS_INSTANCE_TYPE_C5_4XLARGE":   20,
	"PALO_ALTO_FW_AWS_INSTANCE_TYPE_C5_9XLARGE":   21,
	"PALO_ALTO_FW_AWS_INSTANCE_TYPE_C5_18XLARGE":  22,
	"PALO_ALTO_FW_AWS_INSTANCE_TYPE_C5N_LARGE":    23,
	"PALO_ALTO_FW_AWS_INSTANCE_TYPE_C5N_XLARGE":   24,
	"PALO_ALTO_FW_AWS_INSTANCE_TYPE_C5N_2XLARGE":  25,
	"PALO_ALTO_FW_AWS_INSTANCE_TYPE_C5N_4XLARGE":  26,
	"PALO_ALTO_FW_AWS_INSTANCE_TYPE_C5N_9XLARGE":  27,
	"PALO_ALTO_FW_AWS_INSTANCE_TYPE_C5N_18XLARGE": 28,
	"PALO_ALTO_FW_AWS_INSTANCE_TYPE_R5_2XLARGE":   29,
}

func (PaloAltoFWAWSInstanceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a04d33a158d31df9, []int{0}
}

// Option to select number of virtual CPUs
//
// x-displayName: "Bare Metal ServiceNode Virtual CPU Count"
// Enum to define number of virtual CPU's to be assigned to the node
type BMNodeVirtualCpuCount int32

const (
	// 4 virtual CPUs
	//
	// x-displayName: "4 vCPU"
	BM_4_VCPU BMNodeVirtualCpuCount = 0
	// 8 virtual CPUs
	//
	// x-displayName: "8 vCPU"
	BM_8_VCPU BMNodeVirtualCpuCount = 1
)

var BMNodeVirtualCpuCount_name = map[int32]string{
	0: "BM_4_VCPU",
	1: "BM_8_VCPU",
}

var BMNodeVirtualCpuCount_value = map[string]int32{
	"BM_4_VCPU": 0,
	"BM_8_VCPU": 1,
}

func (BMNodeVirtualCpuCount) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a04d33a158d31df9, []int{1}
}

// Option to select amount of memory
//
// x-displayName: "Bare Metal ServiceNode Memory Size"
// Enum to define amount of memory to be assigned to the node
type BMNodeMemorySize int32

const (
	// 8 GB
	//
	// x-displayName: "8 GB"
	BM_8_GB_MEMORY BMNodeMemorySize = 0
	// 16 GB
	//
	// x-displayName: "16 GB"
	BM_16_GB_MEMORY BMNodeMemorySize = 1
	// 32 GB
	//
	// x-displayName: "32 GB"
	BM_32_GB_MEMORY BMNodeMemorySize = 2
)

var BMNodeMemorySize_name = map[int32]string{
	0: "BM_8_GB_MEMORY",
	1: "BM_16_GB_MEMORY",
	2: "BM_32_GB_MEMORY",
}

var BMNodeMemorySize_value = map[string]int32{
	"BM_8_GB_MEMORY":  0,
	"BM_16_GB_MEMORY": 1,
	"BM_32_GB_MEMORY": 2,
}

func (BMNodeMemorySize) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a04d33a158d31df9, []int{2}
}

// Service Type
//
// x-displayName: "Service Type"
// Enum to define the service types that have used the NFV service as child object, for internal use
type ServiceType int32

const (
	// none
	//
	// x-displayName: "None"
	// ServiceType is set to None for NFV Services by default
	NONE ServiceType = 0
	// BIG-IP APM
	//
	// x-displayName: "BIG-IP APM"
	// ServiceType will be set to this value when APM object is created with NFV as it's child object
	BIGIP_APM ServiceType = 1
)

var ServiceType_name = map[int32]string{
	0: "NONE",
	1: "BIGIP_APM",
}

var ServiceType_value = map[string]int32{
	"NONE":      0,
	"BIGIP_APM": 1,
}

func (ServiceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a04d33a158d31df9, []int{3}
}

// Forwarding Service
//
// x-displayName: "Forwarding Service"
// Forwarding Service is a type of NFV service that processes the original packet as received from source and forwards it to the original
// destination without modifying the destination addresses. The traffic is attracted to NFV using set of traffic selector
// rules.
type ForwardingServiceType struct {
}

func (m *ForwardingServiceType) Reset()      { *m = ForwardingServiceType{} }
func (*ForwardingServiceType) ProtoMessage() {}
func (*ForwardingServiceType) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04d33a158d31df9, []int{0}
}
func (m *ForwardingServiceType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForwardingServiceType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ForwardingServiceType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForwardingServiceType.Merge(m, src)
}
func (m *ForwardingServiceType) XXX_Size() int {
	return m.Size()
}
func (m *ForwardingServiceType) XXX_DiscardUnknown() {
	xxx_messageInfo_ForwardingServiceType.DiscardUnknown(m)
}

var xxx_messageInfo_ForwardingServiceType proto.InternalMessageInfo

// Endpoint Service
//
// x-displayName: "Endpoint Service"
// Endpoint Service is a type of NFV service where the packets are destined to NFV and service modifies the destination with
// a new destination address
type EndpointServiceType struct {
	// Inside VIP
	//
	// x-displayName: "Inside VIP"
	// x-required
	// Advertise on site local inside network, this will be mainly used for the east west traffic between spoke/application vpcs
	//
	// Types that are valid to be assigned to InsideVipChoice:
	//	*EndpointServiceType_AutomaticVip
	//	*EndpointServiceType_ConfiguredVip
	InsideVipChoice isEndpointServiceType_InsideVipChoice `protobuf_oneof:"inside_vip_choice"`
	// Outside VIP
	//
	// x-displayName: "Outside VIP"
	// x-required
	// Advertise on site local network
	//
	// Types that are valid to be assigned to ExternalVipChoice:
	//	*EndpointServiceType_DisableAdvertiseOnSloIp
	//	*EndpointServiceType_AdvertiseOnSloIp
	//	*EndpointServiceType_AdvertiseOnSloIpExternal
	ExternalVipChoice isEndpointServiceType_ExternalVipChoice `protobuf_oneof:"external_vip_choice"`
	//  TCP Port Choice
	//
	// x-displayName: "TCP Port Choice"
	// x-required
	// Select TCP ports of this endpoint service
	//
	// Types that are valid to be assigned to TcpPortChoice:
	//	*EndpointServiceType_DefaultTcpPorts
	//	*EndpointServiceType_HttpPort
	//	*EndpointServiceType_HttpsPort
	//	*EndpointServiceType_CustomTcpPorts
	//	*EndpointServiceType_NoTcpPorts
	TcpPortChoice isEndpointServiceType_TcpPortChoice `protobuf_oneof:"tcp_port_choice"`
	//  UDP Port Choice
	//
	// x-displayName: "UDP Listen Port Choice"
	// x-required
	// Select UDP ports of this endpoint_service
	//
	// Types that are valid to be assigned to UdpPortChoice:
	//	*EndpointServiceType_NoUdpPorts
	//	*EndpointServiceType_CustomUdpPorts
	UdpPortChoice isEndpointServiceType_UdpPortChoice `protobuf_oneof:"udp_port_choice"`
}

func (m *EndpointServiceType) Reset()      { *m = EndpointServiceType{} }
func (*EndpointServiceType) ProtoMessage() {}
func (*EndpointServiceType) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04d33a158d31df9, []int{1}
}
func (m *EndpointServiceType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndpointServiceType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EndpointServiceType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndpointServiceType.Merge(m, src)
}
func (m *EndpointServiceType) XXX_Size() int {
	return m.Size()
}
func (m *EndpointServiceType) XXX_DiscardUnknown() {
	xxx_messageInfo_EndpointServiceType.DiscardUnknown(m)
}

var xxx_messageInfo_EndpointServiceType proto.InternalMessageInfo

type isEndpointServiceType_InsideVipChoice interface {
	isEndpointServiceType_InsideVipChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isEndpointServiceType_ExternalVipChoice interface {
	isEndpointServiceType_ExternalVipChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isEndpointServiceType_TcpPortChoice interface {
	isEndpointServiceType_TcpPortChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isEndpointServiceType_UdpPortChoice interface {
	isEndpointServiceType_UdpPortChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type EndpointServiceType_AutomaticVip struct {
	AutomaticVip *schema.Empty `protobuf:"bytes,3,opt,name=automatic_vip,json=automaticVip,proto3,oneof" json:"automatic_vip,omitempty"`
}
type EndpointServiceType_ConfiguredVip struct {
	ConfiguredVip string `protobuf:"bytes,4,opt,name=configured_vip,json=configuredVip,proto3,oneof" json:"configured_vip,omitempty"`
}
type EndpointServiceType_DisableAdvertiseOnSloIp struct {
	DisableAdvertiseOnSloIp *schema.Empty `protobuf:"bytes,6,opt,name=disable_advertise_on_slo_ip,json=disableAdvertiseOnSloIp,proto3,oneof" json:"disable_advertise_on_slo_ip,omitempty"`
}
type EndpointServiceType_AdvertiseOnSloIp struct {
	AdvertiseOnSloIp *schema.Empty `protobuf:"bytes,7,opt,name=advertise_on_slo_ip,json=advertiseOnSloIp,proto3,oneof" json:"advertise_on_slo_ip,omitempty"`
}
type EndpointServiceType_AdvertiseOnSloIpExternal struct {
	AdvertiseOnSloIpExternal *schema.Empty `protobuf:"bytes,8,opt,name=advertise_on_slo_ip_external,json=advertiseOnSloIpExternal,proto3,oneof" json:"advertise_on_slo_ip_external,omitempty"`
}
type EndpointServiceType_DefaultTcpPorts struct {
	DefaultTcpPorts *schema.Empty `protobuf:"bytes,10,opt,name=default_tcp_ports,json=defaultTcpPorts,proto3,oneof" json:"default_tcp_ports,omitempty"`
}
type EndpointServiceType_HttpPort struct {
	HttpPort *schema.Empty `protobuf:"bytes,11,opt,name=http_port,json=httpPort,proto3,oneof" json:"http_port,omitempty"`
}
type EndpointServiceType_HttpsPort struct {
	HttpsPort *schema.Empty `protobuf:"bytes,12,opt,name=https_port,json=httpsPort,proto3,oneof" json:"https_port,omitempty"`
}
type EndpointServiceType_CustomTcpPorts struct {
	CustomTcpPorts *schema.PortRangesType `protobuf:"bytes,13,opt,name=custom_tcp_ports,json=customTcpPorts,proto3,oneof" json:"custom_tcp_ports,omitempty"`
}
type EndpointServiceType_NoTcpPorts struct {
	NoTcpPorts *schema.Empty `protobuf:"bytes,14,opt,name=no_tcp_ports,json=noTcpPorts,proto3,oneof" json:"no_tcp_ports,omitempty"`
}
type EndpointServiceType_NoUdpPorts struct {
	NoUdpPorts *schema.Empty `protobuf:"bytes,16,opt,name=no_udp_ports,json=noUdpPorts,proto3,oneof" json:"no_udp_ports,omitempty"`
}
type EndpointServiceType_CustomUdpPorts struct {
	CustomUdpPorts *schema.PortRangesType `protobuf:"bytes,17,opt,name=custom_udp_ports,json=customUdpPorts,proto3,oneof" json:"custom_udp_ports,omitempty"`
}

func (*EndpointServiceType_AutomaticVip) isEndpointServiceType_InsideVipChoice()               {}
func (*EndpointServiceType_ConfiguredVip) isEndpointServiceType_InsideVipChoice()              {}
func (*EndpointServiceType_DisableAdvertiseOnSloIp) isEndpointServiceType_ExternalVipChoice()  {}
func (*EndpointServiceType_AdvertiseOnSloIp) isEndpointServiceType_ExternalVipChoice()         {}
func (*EndpointServiceType_AdvertiseOnSloIpExternal) isEndpointServiceType_ExternalVipChoice() {}
func (*EndpointServiceType_DefaultTcpPorts) isEndpointServiceType_TcpPortChoice()              {}
func (*EndpointServiceType_HttpPort) isEndpointServiceType_TcpPortChoice()                     {}
func (*EndpointServiceType_HttpsPort) isEndpointServiceType_TcpPortChoice()                    {}
func (*EndpointServiceType_CustomTcpPorts) isEndpointServiceType_TcpPortChoice()               {}
func (*EndpointServiceType_NoTcpPorts) isEndpointServiceType_TcpPortChoice()                   {}
func (*EndpointServiceType_NoUdpPorts) isEndpointServiceType_UdpPortChoice()                   {}
func (*EndpointServiceType_CustomUdpPorts) isEndpointServiceType_UdpPortChoice()               {}

func (m *EndpointServiceType) GetInsideVipChoice() isEndpointServiceType_InsideVipChoice {
	if m != nil {
		return m.InsideVipChoice
	}
	return nil
}
func (m *EndpointServiceType) GetExternalVipChoice() isEndpointServiceType_ExternalVipChoice {
	if m != nil {
		return m.ExternalVipChoice
	}
	return nil
}
func (m *EndpointServiceType) GetTcpPortChoice() isEndpointServiceType_TcpPortChoice {
	if m != nil {
		return m.TcpPortChoice
	}
	return nil
}
func (m *EndpointServiceType) GetUdpPortChoice() isEndpointServiceType_UdpPortChoice {
	if m != nil {
		return m.UdpPortChoice
	}
	return nil
}

func (m *EndpointServiceType) GetAutomaticVip() *schema.Empty {
	if x, ok := m.GetInsideVipChoice().(*EndpointServiceType_AutomaticVip); ok {
		return x.AutomaticVip
	}
	return nil
}

func (m *EndpointServiceType) GetConfiguredVip() string {
	if x, ok := m.GetInsideVipChoice().(*EndpointServiceType_ConfiguredVip); ok {
		return x.ConfiguredVip
	}
	return ""
}

func (m *EndpointServiceType) GetDisableAdvertiseOnSloIp() *schema.Empty {
	if x, ok := m.GetExternalVipChoice().(*EndpointServiceType_DisableAdvertiseOnSloIp); ok {
		return x.DisableAdvertiseOnSloIp
	}
	return nil
}

func (m *EndpointServiceType) GetAdvertiseOnSloIp() *schema.Empty {
	if x, ok := m.GetExternalVipChoice().(*EndpointServiceType_AdvertiseOnSloIp); ok {
		return x.AdvertiseOnSloIp
	}
	return nil
}

func (m *EndpointServiceType) GetAdvertiseOnSloIpExternal() *schema.Empty {
	if x, ok := m.GetExternalVipChoice().(*EndpointServiceType_AdvertiseOnSloIpExternal); ok {
		return x.AdvertiseOnSloIpExternal
	}
	return nil
}

func (m *EndpointServiceType) GetDefaultTcpPorts() *schema.Empty {
	if x, ok := m.GetTcpPortChoice().(*EndpointServiceType_DefaultTcpPorts); ok {
		return x.DefaultTcpPorts
	}
	return nil
}

func (m *EndpointServiceType) GetHttpPort() *schema.Empty {
	if x, ok := m.GetTcpPortChoice().(*EndpointServiceType_HttpPort); ok {
		return x.HttpPort
	}
	return nil
}

func (m *EndpointServiceType) GetHttpsPort() *schema.Empty {
	if x, ok := m.GetTcpPortChoice().(*EndpointServiceType_HttpsPort); ok {
		return x.HttpsPort
	}
	return nil
}

func (m *EndpointServiceType) GetCustomTcpPorts() *schema.PortRangesType {
	if x, ok := m.GetTcpPortChoice().(*EndpointServiceType_CustomTcpPorts); ok {
		return x.CustomTcpPorts
	}
	return nil
}

func (m *EndpointServiceType) GetNoTcpPorts() *schema.Empty {
	if x, ok := m.GetTcpPortChoice().(*EndpointServiceType_NoTcpPorts); ok {
		return x.NoTcpPorts
	}
	return nil
}

func (m *EndpointServiceType) GetNoUdpPorts() *schema.Empty {
	if x, ok := m.GetUdpPortChoice().(*EndpointServiceType_NoUdpPorts); ok {
		return x.NoUdpPorts
	}
	return nil
}

func (m *EndpointServiceType) GetCustomUdpPorts() *schema.PortRangesType {
	if x, ok := m.GetUdpPortChoice().(*EndpointServiceType_CustomUdpPorts); ok {
		return x.CustomUdpPorts
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*EndpointServiceType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*EndpointServiceType_AutomaticVip)(nil),
		(*EndpointServiceType_ConfiguredVip)(nil),
		(*EndpointServiceType_DisableAdvertiseOnSloIp)(nil),
		(*EndpointServiceType_AdvertiseOnSloIp)(nil),
		(*EndpointServiceType_AdvertiseOnSloIpExternal)(nil),
		(*EndpointServiceType_DefaultTcpPorts)(nil),
		(*EndpointServiceType_HttpPort)(nil),
		(*EndpointServiceType_HttpsPort)(nil),
		(*EndpointServiceType_CustomTcpPorts)(nil),
		(*EndpointServiceType_NoTcpPorts)(nil),
		(*EndpointServiceType_NoUdpPorts)(nil),
		(*EndpointServiceType_CustomUdpPorts)(nil),
	}
}

// Service Nodes
//
// x-displayName: "Service Nodes"
// Specification for service nodes, how and where
type ServiceNodesAWSType struct {
	// Node Name
	//
	// x-displayName: "Node Name"
	// x-example: "node1"
	// x-required
	// Node Name will be used to assign as hostname to the service
	NodeName string `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// AWS AZ
	//
	// x-displayName: "AWS AZ Name"
	// x-required
	// x-example: "us-west-2a"
	// The AWS Availability Zone must be consistent with the AWS Region chosen. Please select an AZ in the same Region as your TGW Site
	AwsAzName string `protobuf:"bytes,2,opt,name=aws_az_name,json=awsAzName,proto3" json:"aws_az_name,omitempty"`
	// IP Prefix for Tunnel
	//
	// x-displayName: "IP Prefix for Tunnel"
	// x-required
	// Select IP Prefix for tunnel
	//
	// Types that are valid to be assigned to TunnelPrefixChoice:
	//	*ServiceNodesAWSType_AutomaticPrefix
	//	*ServiceNodesAWSType_TunnelPrefix
	TunnelPrefixChoice isServiceNodesAWSType_TunnelPrefixChoice `protobuf_oneof:"tunnel_prefix_choice"`
	// BIG-IP Management Subnet Choices
	//
	// x-displayName: "Subnet for BIG-IP Management Interface"
	// x-required
	// Subnet for the BIG-IP Management Interface of the node
	//
	// Types that are valid to be assigned to MgmtSubnetChoice:
	//	*ServiceNodesAWSType_ReservedMgmtSubnet
	//	*ServiceNodesAWSType_MgmtSubnet
	MgmtSubnetChoice isServiceNodesAWSType_MgmtSubnetChoice `protobuf_oneof:"mgmt_subnet_choice"`
}

func (m *ServiceNodesAWSType) Reset()      { *m = ServiceNodesAWSType{} }
func (*ServiceNodesAWSType) ProtoMessage() {}
func (*ServiceNodesAWSType) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04d33a158d31df9, []int{2}
}
func (m *ServiceNodesAWSType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceNodesAWSType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ServiceNodesAWSType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceNodesAWSType.Merge(m, src)
}
func (m *ServiceNodesAWSType) XXX_Size() int {
	return m.Size()
}
func (m *ServiceNodesAWSType) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceNodesAWSType.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceNodesAWSType proto.InternalMessageInfo

type isServiceNodesAWSType_TunnelPrefixChoice interface {
	isServiceNodesAWSType_TunnelPrefixChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isServiceNodesAWSType_MgmtSubnetChoice interface {
	isServiceNodesAWSType_MgmtSubnetChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ServiceNodesAWSType_AutomaticPrefix struct {
	AutomaticPrefix *schema.Empty `protobuf:"bytes,4,opt,name=automatic_prefix,json=automaticPrefix,proto3,oneof" json:"automatic_prefix,omitempty"`
}
type ServiceNodesAWSType_TunnelPrefix struct {
	TunnelPrefix string `protobuf:"bytes,5,opt,name=tunnel_prefix,json=tunnelPrefix,proto3,oneof" json:"tunnel_prefix,omitempty"`
}
type ServiceNodesAWSType_ReservedMgmtSubnet struct {
	ReservedMgmtSubnet *schema.Empty `protobuf:"bytes,7,opt,name=reserved_mgmt_subnet,json=reservedMgmtSubnet,proto3,oneof" json:"reserved_mgmt_subnet,omitempty"`
}
type ServiceNodesAWSType_MgmtSubnet struct {
	MgmtSubnet *views.CloudSubnetType `protobuf:"bytes,8,opt,name=mgmt_subnet,json=mgmtSubnet,proto3,oneof" json:"mgmt_subnet,omitempty"`
}

func (*ServiceNodesAWSType_AutomaticPrefix) isServiceNodesAWSType_TunnelPrefixChoice()  {}
func (*ServiceNodesAWSType_TunnelPrefix) isServiceNodesAWSType_TunnelPrefixChoice()     {}
func (*ServiceNodesAWSType_ReservedMgmtSubnet) isServiceNodesAWSType_MgmtSubnetChoice() {}
func (*ServiceNodesAWSType_MgmtSubnet) isServiceNodesAWSType_MgmtSubnetChoice()         {}

func (m *ServiceNodesAWSType) GetTunnelPrefixChoice() isServiceNodesAWSType_TunnelPrefixChoice {
	if m != nil {
		return m.TunnelPrefixChoice
	}
	return nil
}
func (m *ServiceNodesAWSType) GetMgmtSubnetChoice() isServiceNodesAWSType_MgmtSubnetChoice {
	if m != nil {
		return m.MgmtSubnetChoice
	}
	return nil
}

func (m *ServiceNodesAWSType) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *ServiceNodesAWSType) GetAwsAzName() string {
	if m != nil {
		return m.AwsAzName
	}
	return ""
}

func (m *ServiceNodesAWSType) GetAutomaticPrefix() *schema.Empty {
	if x, ok := m.GetTunnelPrefixChoice().(*ServiceNodesAWSType_AutomaticPrefix); ok {
		return x.AutomaticPrefix
	}
	return nil
}

func (m *ServiceNodesAWSType) GetTunnelPrefix() string {
	if x, ok := m.GetTunnelPrefixChoice().(*ServiceNodesAWSType_TunnelPrefix); ok {
		return x.TunnelPrefix
	}
	return ""
}

func (m *ServiceNodesAWSType) GetReservedMgmtSubnet() *schema.Empty {
	if x, ok := m.GetMgmtSubnetChoice().(*ServiceNodesAWSType_ReservedMgmtSubnet); ok {
		return x.ReservedMgmtSubnet
	}
	return nil
}

func (m *ServiceNodesAWSType) GetMgmtSubnet() *views.CloudSubnetType {
	if x, ok := m.GetMgmtSubnetChoice().(*ServiceNodesAWSType_MgmtSubnet); ok {
		return x.MgmtSubnet
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ServiceNodesAWSType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ServiceNodesAWSType_AutomaticPrefix)(nil),
		(*ServiceNodesAWSType_TunnelPrefix)(nil),
		(*ServiceNodesAWSType_ReservedMgmtSubnet)(nil),
		(*ServiceNodesAWSType_MgmtSubnet)(nil),
	}
}

// BIG-IP AWS TGW Site
//
// x-displayName: "BIG-IP AWS TGW Site"
// BIG-IP AWS TGW site specification
type F5BigIpAWSTGWSiteType struct {
	// AWS Transit Gateway Site
	//
	// x-displayName: "AWS Transit Gateway Site"
	// x-required
	// Reference to AWS transit gateway site
	AwsTgwSite *views.ObjectRefType `protobuf:"bytes,3,opt,name=aws_tgw_site,json=awsTgwSite,proto3" json:"aws_tgw_site,omitempty"`
}

func (m *F5BigIpAWSTGWSiteType) Reset()      { *m = F5BigIpAWSTGWSiteType{} }
func (*F5BigIpAWSTGWSiteType) ProtoMessage() {}
func (*F5BigIpAWSTGWSiteType) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04d33a158d31df9, []int{3}
}
func (m *F5BigIpAWSTGWSiteType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *F5BigIpAWSTGWSiteType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *F5BigIpAWSTGWSiteType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_F5BigIpAWSTGWSiteType.Merge(m, src)
}
func (m *F5BigIpAWSTGWSiteType) XXX_Size() int {
	return m.Size()
}
func (m *F5BigIpAWSTGWSiteType) XXX_DiscardUnknown() {
	xxx_messageInfo_F5BigIpAWSTGWSiteType.DiscardUnknown(m)
}

var xxx_messageInfo_F5BigIpAWSTGWSiteType proto.InternalMessageInfo

func (m *F5BigIpAWSTGWSiteType) GetAwsTgwSite() *views.ObjectRefType {
	if m != nil {
		return m.AwsTgwSite
	}
	return nil
}

// BIG-IP AWS VPC Site
//
// x-displayName: "BIG-IP AWS VPC Site"
// BIG-IP AWS VPC site specification
type F5BigIpAWSVPCSiteType struct {
	// AWS VPC Site
	//
	// x-displayName: "AWS VPC Site"
	// x-required
	// Reference to AWS VPC site
	AwsVpcSite *views.ObjectRefType `protobuf:"bytes,3,opt,name=aws_vpc_site,json=awsVpcSite,proto3" json:"aws_vpc_site,omitempty"`
}

func (m *F5BigIpAWSVPCSiteType) Reset()      { *m = F5BigIpAWSVPCSiteType{} }
func (*F5BigIpAWSVPCSiteType) ProtoMessage() {}
func (*F5BigIpAWSVPCSiteType) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04d33a158d31df9, []int{4}
}
func (m *F5BigIpAWSVPCSiteType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *F5BigIpAWSVPCSiteType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *F5BigIpAWSVPCSiteType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_F5BigIpAWSVPCSiteType.Merge(m, src)
}
func (m *F5BigIpAWSVPCSiteType) XXX_Size() int {
	return m.Size()
}
func (m *F5BigIpAWSVPCSiteType) XXX_DiscardUnknown() {
	xxx_messageInfo_F5BigIpAWSVPCSiteType.DiscardUnknown(m)
}

var xxx_messageInfo_F5BigIpAWSVPCSiteType proto.InternalMessageInfo

func (m *F5BigIpAWSVPCSiteType) GetAwsVpcSite() *views.ObjectRefType {
	if m != nil {
		return m.AwsVpcSite
	}
	return nil
}

// BIG-IP AWS BYOL Image
//
// x-displayName: "BIG-IP AWS BYOL Image"
// BIG-IP AWS VPC site specification
type F5BigIpAWSBYOLImageType struct {
	// BIG-IP AWS Image
	//
	// x-displayName: "BIG-IP AWS Image"
	// x-required
	// x-example: "image1"
	// Select the BIG-IP pay as you go image to be used for this service
	Image string `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	// License
	//
	// x-displayName: "License"
	// Secret License data
	License *schema.SecretType `protobuf:"bytes,2,opt,name=license,proto3" json:"license,omitempty"`
}

func (m *F5BigIpAWSBYOLImageType) Reset()      { *m = F5BigIpAWSBYOLImageType{} }
func (*F5BigIpAWSBYOLImageType) ProtoMessage() {}
func (*F5BigIpAWSBYOLImageType) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04d33a158d31df9, []int{5}
}
func (m *F5BigIpAWSBYOLImageType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *F5BigIpAWSBYOLImageType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *F5BigIpAWSBYOLImageType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_F5BigIpAWSBYOLImageType.Merge(m, src)
}
func (m *F5BigIpAWSBYOLImageType) XXX_Size() int {
	return m.Size()
}
func (m *F5BigIpAWSBYOLImageType) XXX_DiscardUnknown() {
	xxx_messageInfo_F5BigIpAWSBYOLImageType.DiscardUnknown(m)
}

var xxx_messageInfo_F5BigIpAWSBYOLImageType proto.InternalMessageInfo

func (m *F5BigIpAWSBYOLImageType) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *F5BigIpAWSBYOLImageType) GetLicense() *schema.SecretType {
	if m != nil {
		return m.License
	}
	return nil
}

// BIG-IP AWS PayG Image
//
// x-displayName: "BIG-IP AWS Pay as You Go Image"
// BIG-IP AWS Pay as You Go Image Selection
type F5BigIpAWSMarketPlaceImageType struct {
	// AMI choice
	//
	// x-displayName: "AMI Choice"
	// x-required
	// AMI Choice for BIG-IP AWs Marketplace Image
	//
	// Types that are valid to be assigned to AmiChoice:
	//	*F5BigIpAWSMarketPlaceImageType_AWAFPayG200Mbps
	//	*F5BigIpAWSMarketPlaceImageType_AWAFPayG3Gbps
	//	*F5BigIpAWSMarketPlaceImageType_BestPlusPayG200Mbps
	//	*F5BigIpAWSMarketPlaceImageType_BestPlusPayg_1Gbps
	AmiChoice isF5BigIpAWSMarketPlaceImageType_AmiChoice `protobuf_oneof:"ami_choice"`
}

func (m *F5BigIpAWSMarketPlaceImageType) Reset()      { *m = F5BigIpAWSMarketPlaceImageType{} }
func (*F5BigIpAWSMarketPlaceImageType) ProtoMessage() {}
func (*F5BigIpAWSMarketPlaceImageType) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04d33a158d31df9, []int{6}
}
func (m *F5BigIpAWSMarketPlaceImageType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *F5BigIpAWSMarketPlaceImageType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *F5BigIpAWSMarketPlaceImageType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_F5BigIpAWSMarketPlaceImageType.Merge(m, src)
}
func (m *F5BigIpAWSMarketPlaceImageType) XXX_Size() int {
	return m.Size()
}
func (m *F5BigIpAWSMarketPlaceImageType) XXX_DiscardUnknown() {
	xxx_messageInfo_F5BigIpAWSMarketPlaceImageType.DiscardUnknown(m)
}

var xxx_messageInfo_F5BigIpAWSMarketPlaceImageType proto.InternalMessageInfo

type isF5BigIpAWSMarketPlaceImageType_AmiChoice interface {
	isF5BigIpAWSMarketPlaceImageType_AmiChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type F5BigIpAWSMarketPlaceImageType_AWAFPayG200Mbps struct {
	AWAFPayG200Mbps *schema.Empty `protobuf:"bytes,2,opt,name=AWAFPayG200Mbps,proto3,oneof" json:"AWAFPayG200Mbps,omitempty"`
}
type F5BigIpAWSMarketPlaceImageType_AWAFPayG3Gbps struct {
	AWAFPayG3Gbps *schema.Empty `protobuf:"bytes,3,opt,name=AWAFPayG3Gbps,proto3,oneof" json:"AWAFPayG3Gbps,omitempty"`
}
type F5BigIpAWSMarketPlaceImageType_BestPlusPayG200Mbps struct {
	BestPlusPayG200Mbps *schema.Empty `protobuf:"bytes,4,opt,name=BestPlusPayG200Mbps,proto3,oneof" json:"BestPlusPayG200Mbps,omitempty"`
}
type F5BigIpAWSMarketPlaceImageType_BestPlusPayg_1Gbps struct {
	BestPlusPayg_1Gbps *schema.Empty `protobuf:"bytes,5,opt,name=best_plus_payg_1gbps,json=bestPlusPayg1gbps,proto3,oneof" json:"best_plus_payg_1gbps,omitempty"`
}

func (*F5BigIpAWSMarketPlaceImageType_AWAFPayG200Mbps) isF5BigIpAWSMarketPlaceImageType_AmiChoice() {}
func (*F5BigIpAWSMarketPlaceImageType_AWAFPayG3Gbps) isF5BigIpAWSMarketPlaceImageType_AmiChoice()   {}
func (*F5BigIpAWSMarketPlaceImageType_BestPlusPayG200Mbps) isF5BigIpAWSMarketPlaceImageType_AmiChoice() {
}
func (*F5BigIpAWSMarketPlaceImageType_BestPlusPayg_1Gbps) isF5BigIpAWSMarketPlaceImageType_AmiChoice() {
}

func (m *F5BigIpAWSMarketPlaceImageType) GetAmiChoice() isF5BigIpAWSMarketPlaceImageType_AmiChoice {
	if m != nil {
		return m.AmiChoice
	}
	return nil
}

func (m *F5BigIpAWSMarketPlaceImageType) GetAWAFPayG200Mbps() *schema.Empty {
	if x, ok := m.GetAmiChoice().(*F5BigIpAWSMarketPlaceImageType_AWAFPayG200Mbps); ok {
		return x.AWAFPayG200Mbps
	}
	return nil
}

func (m *F5BigIpAWSMarketPlaceImageType) GetAWAFPayG3Gbps() *schema.Empty {
	if x, ok := m.GetAmiChoice().(*F5BigIpAWSMarketPlaceImageType_AWAFPayG3Gbps); ok {
		return x.AWAFPayG3Gbps
	}
	return nil
}

func (m *F5BigIpAWSMarketPlaceImageType) GetBestPlusPayG200Mbps() *schema.Empty {
	if x, ok := m.GetAmiChoice().(*F5BigIpAWSMarketPlaceImageType_BestPlusPayG200Mbps); ok {
		return x.BestPlusPayG200Mbps
	}
	return nil
}

func (m *F5BigIpAWSMarketPlaceImageType) GetBestPlusPayg_1Gbps() *schema.Empty {
	if x, ok := m.GetAmiChoice().(*F5BigIpAWSMarketPlaceImageType_BestPlusPayg_1Gbps); ok {
		return x.BestPlusPayg_1Gbps
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*F5BigIpAWSMarketPlaceImageType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*F5BigIpAWSMarketPlaceImageType_AWAFPayG200Mbps)(nil),
		(*F5BigIpAWSMarketPlaceImageType_AWAFPayG3Gbps)(nil),
		(*F5BigIpAWSMarketPlaceImageType_BestPlusPayG200Mbps)(nil),
		(*F5BigIpAWSMarketPlaceImageType_BestPlusPayg_1Gbps)(nil),
	}
}

// Virtual BIG-IP AWS
//
// x-displayName: "Virtual BIG-IP AWS"
// Virtual BIG-IP specification for AWS
type F5BigIpAWSType struct {
	// Image
	//
	// x-displayName: "Image"
	// x-required
	// Select image for bring your own license or pay as you go
	//
	// Types that are valid to be assigned to ImageChoice:
	//	*F5BigIpAWSType_MarketPlaceImage
	//	*F5BigIpAWSType_ByolImage
	ImageChoice isF5BigIpAWSType_ImageChoice `protobuf_oneof:"image_choice"`
	// Admin Password
	//
	// x-displayName: "Admin Password"
	// x-required
	// Secret admin password for BIG ip
	AdminPassword *schema.SecretType `protobuf:"bytes,4,opt,name=admin_password,json=adminPassword,proto3" json:"admin_password,omitempty"`
	// Admin Username
	//
	// x-displayName: "Admin Username"
	// x-example: "admin"
	// x-required
	// Admin Username for BIG-IP
	AdminUsername string `protobuf:"bytes,10,opt,name=admin_username,json=adminUsername,proto3" json:"admin_username,omitempty"`
	// Public SSH key
	//
	// x-displayName: "Public SSH key"
	// x-example: "ssh-rsa AAAAB..."
	// x-required
	// Public SSH key for accessing the Big IP nodes.
	SshKey string `protobuf:"bytes,5,opt,name=ssh_key,json=sshKey,proto3" json:"ssh_key,omitempty"`
	// Site Type
	//
	// x-displayName: "Site Type"
	// x-required
	// Select type of site where the service will be present
	//
	// Types that are valid to be assigned to SiteTypeChoice:
	//	*F5BigIpAWSType_AwsTgwSiteParams
	//	*F5BigIpAWSType_AwsVpcSiteParams
	SiteTypeChoice isF5BigIpAWSType_SiteTypeChoice `protobuf_oneof:"site_type_choice"`
	// Service Nodes
	//
	// x-displayName: "Service Nodes"
	// x-required
	// Specify how and where the service nodes are spawned
	Nodes []*ServiceNodesAWSType `protobuf:"bytes,9,rep,name=nodes,proto3" json:"nodes,omitempty"`
	// AWS Tags
	//
	// x-displayName: "AWS Tags"
	// x-example: "dev: staging"
	// AWS Tags is a label consisting of a user-defined key and value.
	// It helps to manage, identify, organize, search for, and filter resources in AWS console.
	Tags map[string]string `protobuf:"bytes,12,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Endpoint Service
	//
	// x-displayName: "Endpoint Service"
	// External service type is Endpoint service
	EndpointService *EndpointServiceType `protobuf:"bytes,13,opt,name=endpoint_service,json=endpointService,proto3" json:"endpoint_service,omitempty"`
}

func (m *F5BigIpAWSType) Reset()      { *m = F5BigIpAWSType{} }
func (*F5BigIpAWSType) ProtoMessage() {}
func (*F5BigIpAWSType) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04d33a158d31df9, []int{7}
}
func (m *F5BigIpAWSType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *F5BigIpAWSType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *F5BigIpAWSType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_F5BigIpAWSType.Merge(m, src)
}
func (m *F5BigIpAWSType) XXX_Size() int {
	return m.Size()
}
func (m *F5BigIpAWSType) XXX_DiscardUnknown() {
	xxx_messageInfo_F5BigIpAWSType.DiscardUnknown(m)
}

var xxx_messageInfo_F5BigIpAWSType proto.InternalMessageInfo

type isF5BigIpAWSType_ImageChoice interface {
	isF5BigIpAWSType_ImageChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isF5BigIpAWSType_SiteTypeChoice interface {
	isF5BigIpAWSType_SiteTypeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type F5BigIpAWSType_MarketPlaceImage struct {
	MarketPlaceImage *F5BigIpAWSMarketPlaceImageType `protobuf:"bytes,11,opt,name=market_place_image,json=marketPlaceImage,proto3,oneof" json:"market_place_image,omitempty"`
}
type F5BigIpAWSType_ByolImage struct {
	ByolImage *F5BigIpAWSBYOLImageType `protobuf:"bytes,3,opt,name=byol_image,json=byolImage,proto3,oneof" json:"byol_image,omitempty"`
}
type F5BigIpAWSType_AwsTgwSiteParams struct {
	AwsTgwSiteParams *F5BigIpAWSTGWSiteType `protobuf:"bytes,7,opt,name=aws_tgw_site_params,json=awsTgwSiteParams,proto3,oneof" json:"aws_tgw_site_params,omitempty"`
}
type F5BigIpAWSType_AwsVpcSiteParams struct {
	AwsVpcSiteParams *F5BigIpAWSVPCSiteType `protobuf:"bytes,8,opt,name=aws_vpc_site_params,json=awsVpcSiteParams,proto3,oneof" json:"aws_vpc_site_params,omitempty"`
}

func (*F5BigIpAWSType_MarketPlaceImage) isF5BigIpAWSType_ImageChoice()    {}
func (*F5BigIpAWSType_ByolImage) isF5BigIpAWSType_ImageChoice()           {}
func (*F5BigIpAWSType_AwsTgwSiteParams) isF5BigIpAWSType_SiteTypeChoice() {}
func (*F5BigIpAWSType_AwsVpcSiteParams) isF5BigIpAWSType_SiteTypeChoice() {}

func (m *F5BigIpAWSType) GetImageChoice() isF5BigIpAWSType_ImageChoice {
	if m != nil {
		return m.ImageChoice
	}
	return nil
}
func (m *F5BigIpAWSType) GetSiteTypeChoice() isF5BigIpAWSType_SiteTypeChoice {
	if m != nil {
		return m.SiteTypeChoice
	}
	return nil
}

func (m *F5BigIpAWSType) GetMarketPlaceImage() *F5BigIpAWSMarketPlaceImageType {
	if x, ok := m.GetImageChoice().(*F5BigIpAWSType_MarketPlaceImage); ok {
		return x.MarketPlaceImage
	}
	return nil
}

func (m *F5BigIpAWSType) GetByolImage() *F5BigIpAWSBYOLImageType {
	if x, ok := m.GetImageChoice().(*F5BigIpAWSType_ByolImage); ok {
		return x.ByolImage
	}
	return nil
}

func (m *F5BigIpAWSType) GetAdminPassword() *schema.SecretType {
	if m != nil {
		return m.AdminPassword
	}
	return nil
}

func (m *F5BigIpAWSType) GetAdminUsername() string {
	if m != nil {
		return m.AdminUsername
	}
	return ""
}

func (m *F5BigIpAWSType) GetSshKey() string {
	if m != nil {
		return m.SshKey
	}
	return ""
}

func (m *F5BigIpAWSType) GetAwsTgwSiteParams() *F5BigIpAWSTGWSiteType {
	if x, ok := m.GetSiteTypeChoice().(*F5BigIpAWSType_AwsTgwSiteParams); ok {
		return x.AwsTgwSiteParams
	}
	return nil
}

func (m *F5BigIpAWSType) GetAwsVpcSiteParams() *F5BigIpAWSVPCSiteType {
	if x, ok := m.GetSiteTypeChoice().(*F5BigIpAWSType_AwsVpcSiteParams); ok {
		return x.AwsVpcSiteParams
	}
	return nil
}

func (m *F5BigIpAWSType) GetNodes() []*ServiceNodesAWSType {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *F5BigIpAWSType) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *F5BigIpAWSType) GetEndpointService() *EndpointServiceType {
	if m != nil {
		return m.EndpointService
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*F5BigIpAWSType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*F5BigIpAWSType_MarketPlaceImage)(nil),
		(*F5BigIpAWSType_ByolImage)(nil),
		(*F5BigIpAWSType_AwsTgwSiteParams)(nil),
		(*F5BigIpAWSType_AwsVpcSiteParams)(nil),
	}
}

// Virtual BIG-IP AWS
//
// x-displayName: "Virtual BIG-IP AWS"
// Virtual BIG-IP specification for AWS
type F5BigIpAWSReplaceType struct {
	// AWS Tags
	//
	// x-displayName: "AWS Tags"
	// x-example: "dev: staging"
	// AWS Tags is a label consisting of a user-defined key and value.
	// It helps to manage, identify, organize, search for, and filter resources in AWS console.
	Tags map[string]string `protobuf:"bytes,12,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Endpoint Service
	//
	// x-displayName: "Endpoint Service"
	// External service type is Endpoint service
	EndpointService *EndpointServiceReplaceType `protobuf:"bytes,13,opt,name=endpoint_service,json=endpointService,proto3" json:"endpoint_service,omitempty"`
}

func (m *F5BigIpAWSReplaceType) Reset()      { *m = F5BigIpAWSReplaceType{} }
func (*F5BigIpAWSReplaceType) ProtoMessage() {}
func (*F5BigIpAWSReplaceType) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04d33a158d31df9, []int{8}
}
func (m *F5BigIpAWSReplaceType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *F5BigIpAWSReplaceType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *F5BigIpAWSReplaceType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_F5BigIpAWSReplaceType.Merge(m, src)
}
func (m *F5BigIpAWSReplaceType) XXX_Size() int {
	return m.Size()
}
func (m *F5BigIpAWSReplaceType) XXX_DiscardUnknown() {
	xxx_messageInfo_F5BigIpAWSReplaceType.DiscardUnknown(m)
}

var xxx_messageInfo_F5BigIpAWSReplaceType proto.InternalMessageInfo

func (m *F5BigIpAWSReplaceType) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *F5BigIpAWSReplaceType) GetEndpointService() *EndpointServiceReplaceType {
	if m != nil {
		return m.EndpointService
	}
	return nil
}

// Panorama server type
//
// x-displayName: "Panorama Server Type"
// Panorama Server Type
type PanoramaServerType struct {
	// Server Ipv4 Address
	//
	// x-displayName: "Server Ipv4 Address"
	// x-example: "1.1.1.1"
	// x-required
	// Panorama Server Address to which the firewall should connect to
	Server string `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	// Authentication key for Panorama
	//
	// x-displayName: "Authentication key for Panorama"
	// x-required
	// Authentication key for Panorama
	AuthorizationKey *schema.SecretType `protobuf:"bytes,2,opt,name=authorization_key,json=authorizationKey,proto3" json:"authorization_key,omitempty"`
	// Template Stack Name
	//
	// x-displayName: "template stack name"
	// x-example: "template1"
	// Template Stack Name
	TemplateStackName string `protobuf:"bytes,3,opt,name=template_stack_name,json=templateStackName,proto3" json:"template_stack_name,omitempty"`
	// Device Group Name
	//
	// x-displayName: "Device Group Name"
	// x-example: "group1"
	// Device Group Name
	DeviceGroupName string `protobuf:"bytes,4,opt,name=device_group_name,json=deviceGroupName,proto3" json:"device_group_name,omitempty"`
}

func (m *PanoramaServerType) Reset()      { *m = PanoramaServerType{} }
func (*PanoramaServerType) ProtoMessage() {}
func (*PanoramaServerType) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04d33a158d31df9, []int{9}
}
func (m *PanoramaServerType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PanoramaServerType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PanoramaServerType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PanoramaServerType.Merge(m, src)
}
func (m *PanoramaServerType) XXX_Size() int {
	return m.Size()
}
func (m *PanoramaServerType) XXX_DiscardUnknown() {
	xxx_messageInfo_PanoramaServerType.DiscardUnknown(m)
}

var xxx_messageInfo_PanoramaServerType proto.InternalMessageInfo

func (m *PanoramaServerType) GetServer() string {
	if m != nil {
		return m.Server
	}
	return ""
}

func (m *PanoramaServerType) GetAuthorizationKey() *schema.SecretType {
	if m != nil {
		return m.AuthorizationKey
	}
	return nil
}

func (m *PanoramaServerType) GetTemplateStackName() string {
	if m != nil {
		return m.TemplateStackName
	}
	return ""
}

func (m *PanoramaServerType) GetDeviceGroupName() string {
	if m != nil {
		return m.DeviceGroupName
	}
	return ""
}

// SSH key
//
// x-displayName: "SSH key"
// SSH Key includes both public and private key
type SSHKeyType struct {
	// Public SSH key
	//
	// x-displayName: "Public SSH key"
	// x-example: "ssh-rsa AAAAB..."
	// x-required
	// Authorized Public SSH key which will be programmed on the node
	PublicKey string `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// Private SSH key
	//
	// x-displayName: "Private SSH key"
	// x-required
	// Authorized Public SSH key which will be programmed on the node
	PrivateKey *schema.SecretType `protobuf:"bytes,2,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
}

func (m *SSHKeyType) Reset()      { *m = SSHKeyType{} }
func (*SSHKeyType) ProtoMessage() {}
func (*SSHKeyType) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04d33a158d31df9, []int{10}
}
func (m *SSHKeyType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SSHKeyType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SSHKeyType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SSHKeyType.Merge(m, src)
}
func (m *SSHKeyType) XXX_Size() int {
	return m.Size()
}
func (m *SSHKeyType) XXX_DiscardUnknown() {
	xxx_messageInfo_SSHKeyType.DiscardUnknown(m)
}

var xxx_messageInfo_SSHKeyType proto.InternalMessageInfo

func (m *SSHKeyType) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *SSHKeyType) GetPrivateKey() *schema.SecretType {
	if m != nil {
		return m.PrivateKey
	}
	return nil
}

// PAN VM Series Firewall Auto Setup
//
// x-displayName: "PAN VM Series Firewall Auto Setup"
// For auto-setup, ssh public and pvt keys are needed.
// Using the given config user, ssh and api access will be configured
type PANAWSAutoSetupType struct {
	// SSH Key Option
	//
	// x-displayName: "SSH Key Option"
	// x-required
	// SSH Key option, where user can manually input generated key or ask platform to generate one
	//
	// Types that are valid to be assigned to SshKeysChoice:
	//	*PANAWSAutoSetupType_ManualSshKeys
	//	*PANAWSAutoSetupType_AutogeneratedSshKeys
	SshKeysChoice isPANAWSAutoSetupType_SshKeysChoice `protobuf_oneof:"ssh_keys_choice"`
	// Firewall Admin Username
	//
	// x-displayName: "Firewall Admin Username"
	// x-example: "admin"
	// x-required
	// Firewall Admin Username
	AdminUsername string `protobuf:"bytes,4,opt,name=admin_username,json=adminUsername,proto3" json:"admin_username,omitempty"`
	// Firewall Admin Password
	//
	// x-displayName: "Firewall Admin Password"
	// x-required
	// Firewall Admin Password
	AdminPassword *schema.SecretType `protobuf:"bytes,5,opt,name=admin_password,json=adminPassword,proto3" json:"admin_password,omitempty"`
}

func (m *PANAWSAutoSetupType) Reset()      { *m = PANAWSAutoSetupType{} }
func (*PANAWSAutoSetupType) ProtoMessage() {}
func (*PANAWSAutoSetupType) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04d33a158d31df9, []int{11}
}
func (m *PANAWSAutoSetupType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PANAWSAutoSetupType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PANAWSAutoSetupType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PANAWSAutoSetupType.Merge(m, src)
}
func (m *PANAWSAutoSetupType) XXX_Size() int {
	return m.Size()
}
func (m *PANAWSAutoSetupType) XXX_DiscardUnknown() {
	xxx_messageInfo_PANAWSAutoSetupType.DiscardUnknown(m)
}

var xxx_messageInfo_PANAWSAutoSetupType proto.InternalMessageInfo

type isPANAWSAutoSetupType_SshKeysChoice interface {
	isPANAWSAutoSetupType_SshKeysChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type PANAWSAutoSetupType_ManualSshKeys struct {
	ManualSshKeys *SSHKeyType `protobuf:"bytes,2,opt,name=manual_ssh_keys,json=manualSshKeys,proto3,oneof" json:"manual_ssh_keys,omitempty"`
}
type PANAWSAutoSetupType_AutogeneratedSshKeys struct {
	AutogeneratedSshKeys *schema.Empty `protobuf:"bytes,3,opt,name=autogenerated_ssh_keys,json=autogeneratedSshKeys,proto3,oneof" json:"autogenerated_ssh_keys,omitempty"`
}

func (*PANAWSAutoSetupType_ManualSshKeys) isPANAWSAutoSetupType_SshKeysChoice()        {}
func (*PANAWSAutoSetupType_AutogeneratedSshKeys) isPANAWSAutoSetupType_SshKeysChoice() {}

func (m *PANAWSAutoSetupType) GetSshKeysChoice() isPANAWSAutoSetupType_SshKeysChoice {
	if m != nil {
		return m.SshKeysChoice
	}
	return nil
}

func (m *PANAWSAutoSetupType) GetManualSshKeys() *SSHKeyType {
	if x, ok := m.GetSshKeysChoice().(*PANAWSAutoSetupType_ManualSshKeys); ok {
		return x.ManualSshKeys
	}
	return nil
}

func (m *PANAWSAutoSetupType) GetAutogeneratedSshKeys() *schema.Empty {
	if x, ok := m.GetSshKeysChoice().(*PANAWSAutoSetupType_AutogeneratedSshKeys); ok {
		return x.AutogeneratedSshKeys
	}
	return nil
}

func (m *PANAWSAutoSetupType) GetAdminUsername() string {
	if m != nil {
		return m.AdminUsername
	}
	return ""
}

func (m *PANAWSAutoSetupType) GetAdminPassword() *schema.SecretType {
	if m != nil {
		return m.AdminPassword
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PANAWSAutoSetupType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PANAWSAutoSetupType_ManualSshKeys)(nil),
		(*PANAWSAutoSetupType_AutogeneratedSshKeys)(nil),
	}
}

// Service Nodes
//
// x-displayName: "Service Nodes"
// Specification for service nodes, how and where
type PaloAltoServiceNodesAWSType struct {
	// Node Name
	//
	// x-displayName: "Node Name"
	// x-example: "node1"
	// x-required
	// Node Name will be used to assign as hostname to the service
	NodeName string `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// AWS AZ
	//
	// x-displayName: "AWS AZ Name"
	// x-required
	// x-example: "us-west-2a"
	// AWS availability zone, must be consistent with the selected AWS region. It is recommended that AZ is one of the AZ for sites
	AwsAzName string `protobuf:"bytes,2,opt,name=aws_az_name,json=awsAzName,proto3" json:"aws_az_name,omitempty"`
	// Management Subnet Choices
	//
	// x-displayName: "Subnet for Management Interface"
	// x-required
	// Subnet for the Management Interface of the node
	//
	// Types that are valid to be assigned to MgmtSubnetChoice:
	//	*PaloAltoServiceNodesAWSType_ReservedMgmtSubnet
	//	*PaloAltoServiceNodesAWSType_MgmtSubnet
	MgmtSubnetChoice isPaloAltoServiceNodesAWSType_MgmtSubnetChoice `protobuf_oneof:"mgmt_subnet_choice"`
}

func (m *PaloAltoServiceNodesAWSType) Reset()      { *m = PaloAltoServiceNodesAWSType{} }
func (*PaloAltoServiceNodesAWSType) ProtoMessage() {}
func (*PaloAltoServiceNodesAWSType) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04d33a158d31df9, []int{12}
}
func (m *PaloAltoServiceNodesAWSType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PaloAltoServiceNodesAWSType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PaloAltoServiceNodesAWSType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaloAltoServiceNodesAWSType.Merge(m, src)
}
func (m *PaloAltoServiceNodesAWSType) XXX_Size() int {
	return m.Size()
}
func (m *PaloAltoServiceNodesAWSType) XXX_DiscardUnknown() {
	xxx_messageInfo_PaloAltoServiceNodesAWSType.DiscardUnknown(m)
}

var xxx_messageInfo_PaloAltoServiceNodesAWSType proto.InternalMessageInfo

type isPaloAltoServiceNodesAWSType_MgmtSubnetChoice interface {
	isPaloAltoServiceNodesAWSType_MgmtSubnetChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type PaloAltoServiceNodesAWSType_ReservedMgmtSubnet struct {
	ReservedMgmtSubnet *schema.Empty `protobuf:"bytes,4,opt,name=reserved_mgmt_subnet,json=reservedMgmtSubnet,proto3,oneof" json:"reserved_mgmt_subnet,omitempty"`
}
type PaloAltoServiceNodesAWSType_MgmtSubnet struct {
	MgmtSubnet *views.CloudSubnetType `protobuf:"bytes,5,opt,name=mgmt_subnet,json=mgmtSubnet,proto3,oneof" json:"mgmt_subnet,omitempty"`
}

func (*PaloAltoServiceNodesAWSType_ReservedMgmtSubnet) isPaloAltoServiceNodesAWSType_MgmtSubnetChoice() {
}
func (*PaloAltoServiceNodesAWSType_MgmtSubnet) isPaloAltoServiceNodesAWSType_MgmtSubnetChoice() {}

func (m *PaloAltoServiceNodesAWSType) GetMgmtSubnetChoice() isPaloAltoServiceNodesAWSType_MgmtSubnetChoice {
	if m != nil {
		return m.MgmtSubnetChoice
	}
	return nil
}

func (m *PaloAltoServiceNodesAWSType) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *PaloAltoServiceNodesAWSType) GetAwsAzName() string {
	if m != nil {
		return m.AwsAzName
	}
	return ""
}

func (m *PaloAltoServiceNodesAWSType) GetReservedMgmtSubnet() *schema.Empty {
	if x, ok := m.GetMgmtSubnetChoice().(*PaloAltoServiceNodesAWSType_ReservedMgmtSubnet); ok {
		return x.ReservedMgmtSubnet
	}
	return nil
}

func (m *PaloAltoServiceNodesAWSType) GetMgmtSubnet() *views.CloudSubnetType {
	if x, ok := m.GetMgmtSubnetChoice().(*PaloAltoServiceNodesAWSType_MgmtSubnet); ok {
		return x.MgmtSubnet
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PaloAltoServiceNodesAWSType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PaloAltoServiceNodesAWSType_ReservedMgmtSubnet)(nil),
		(*PaloAltoServiceNodesAWSType_MgmtSubnet)(nil),
	}
}

// Palo Alto Networks VM-Series Firewall
//
// x-displayName: "Palo Alto Networks VM-Series Firewall"
// Palo Alto Networks VM-Series next-generation firewall configuration
type PaloAltoFWAWSType struct {
	// Instance Type
	//
	// x-displayName: "Instance Type"
	// x-example: "m4.large"
	// x-required
	// AWS Instance type
	InstanceType PaloAltoFWAWSInstanceType `protobuf:"varint,1,opt,name=instance_type,json=instanceType,proto3,enum=ves.io.schema.nfv_service.PaloAltoFWAWSInstanceType" json:"instance_type,omitempty"`
	// AMI choice
	//
	// x-required
	// x-displayName: "AMI Choice"
	// AMI Choice for Palo Alto Networks VM-Series Firewall market place image
	//
	// Types that are valid to be assigned to AmiChoice:
	//	*PaloAltoFWAWSType_PanAmiBundle1
	//	*PaloAltoFWAWSType_PanAmiBundle2
	AmiChoice isPaloAltoFWAWSType_AmiChoice `protobuf_oneof:"ami_choice"`
	// Panorama Connection
	//
	// x-displayName: "Panorama Connection "
	// User can choose to add firewall to Panorama for config management, by default firewall will not be connected
	//
	// Types that are valid to be assigned to PanaromaConnection:
	//	*PaloAltoFWAWSType_DisablePanaroma
	//	*PaloAltoFWAWSType_PanoramaServer
	PanaromaConnection isPaloAltoFWAWSType_PanaromaConnection `protobuf_oneof:"panaroma_connection"`
	// Initial Setup Option
	//
	// x-displayName: "Initial Setup Option"
	// x-required
	// Initial setup option for firewall system config
	//
	// Types that are valid to be assigned to SetupOptions:
	//	*PaloAltoFWAWSType_AutoSetup
	//	*PaloAltoFWAWSType_SshKey
	SetupOptions isPaloAltoFWAWSType_SetupOptions `protobuf_oneof:"setup_options"`
	// AWS Transit Gateway Site
	//
	// x-displayName: "AWS Transit Gateway Site"
	// x-required
	// Select AWS transit gateway site
	AwsTgwSite *views.ObjectRefType `protobuf:"bytes,9,opt,name=aws_tgw_site,json=awsTgwSite,proto3" json:"aws_tgw_site,omitempty"`
	// Palo Alto Networks Vm-Series AZ Nodes
	//
	// x-displayName: "Palo Alto Networks Vm-Series AZ Nodes"
	// x-required
	// Specify how and where the Palo Alto Networks Vm-Series AZ Nodes are spawned
	ServiceNodes *PaloAltoAzNodesAWSType `protobuf:"bytes,10,opt,name=service_nodes,json=serviceNodes,proto3" json:"service_nodes,omitempty"`
	// AWS Tags
	//
	// x-displayName: "AWS Tags"
	// x-example: "dev: staging"
	// AWS Tags is a label consisting of a user-defined key and value.
	// It helps to manage, identify, organize, search for, and filter resources in AWS console.
	Tags map[string]string `protobuf:"bytes,11,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// PAN VM-Series version
	//
	// x-displayName: "PAN VM-Series version"
	// x-example: "11.0.0"
	// PAN-OS version
	Version string `protobuf:"bytes,19,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *PaloAltoFWAWSType) Reset()      { *m = PaloAltoFWAWSType{} }
func (*PaloAltoFWAWSType) ProtoMessage() {}
func (*PaloAltoFWAWSType) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04d33a158d31df9, []int{13}
}
func (m *PaloAltoFWAWSType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PaloAltoFWAWSType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PaloAltoFWAWSType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaloAltoFWAWSType.Merge(m, src)
}
func (m *PaloAltoFWAWSType) XXX_Size() int {
	return m.Size()
}
func (m *PaloAltoFWAWSType) XXX_DiscardUnknown() {
	xxx_messageInfo_PaloAltoFWAWSType.DiscardUnknown(m)
}

var xxx_messageInfo_PaloAltoFWAWSType proto.InternalMessageInfo

type isPaloAltoFWAWSType_AmiChoice interface {
	isPaloAltoFWAWSType_AmiChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isPaloAltoFWAWSType_PanaromaConnection interface {
	isPaloAltoFWAWSType_PanaromaConnection()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isPaloAltoFWAWSType_SetupOptions interface {
	isPaloAltoFWAWSType_SetupOptions()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type PaloAltoFWAWSType_PanAmiBundle1 struct {
	PanAmiBundle1 *schema.Empty `protobuf:"bytes,3,opt,name=pan_ami_bundle1,json=panAmiBundle1,proto3,oneof" json:"pan_ami_bundle1,omitempty"`
}
type PaloAltoFWAWSType_PanAmiBundle2 struct {
	PanAmiBundle2 *schema.Empty `protobuf:"bytes,4,opt,name=pan_ami_bundle2,json=panAmiBundle2,proto3,oneof" json:"pan_ami_bundle2,omitempty"`
}
type PaloAltoFWAWSType_DisablePanaroma struct {
	DisablePanaroma *schema.Empty `protobuf:"bytes,15,opt,name=disable_panaroma,json=disablePanaroma,proto3,oneof" json:"disable_panaroma,omitempty"`
}
type PaloAltoFWAWSType_PanoramaServer struct {
	PanoramaServer *PanoramaServerType `protobuf:"bytes,5,opt,name=panorama_server,json=panoramaServer,proto3,oneof" json:"panorama_server,omitempty"`
}
type PaloAltoFWAWSType_AutoSetup struct {
	AutoSetup *PANAWSAutoSetupType `protobuf:"bytes,17,opt,name=auto_setup,json=autoSetup,proto3,oneof" json:"auto_setup,omitempty"`
}
type PaloAltoFWAWSType_SshKey struct {
	SshKey string `protobuf:"bytes,8,opt,name=ssh_key,json=sshKey,proto3,oneof" json:"ssh_key,omitempty"`
}

func (*PaloAltoFWAWSType_PanAmiBundle1) isPaloAltoFWAWSType_AmiChoice()            {}
func (*PaloAltoFWAWSType_PanAmiBundle2) isPaloAltoFWAWSType_AmiChoice()            {}
func (*PaloAltoFWAWSType_DisablePanaroma) isPaloAltoFWAWSType_PanaromaConnection() {}
func (*PaloAltoFWAWSType_PanoramaServer) isPaloAltoFWAWSType_PanaromaConnection()  {}
func (*PaloAltoFWAWSType_AutoSetup) isPaloAltoFWAWSType_SetupOptions()             {}
func (*PaloAltoFWAWSType_SshKey) isPaloAltoFWAWSType_SetupOptions()                {}

func (m *PaloAltoFWAWSType) GetAmiChoice() isPaloAltoFWAWSType_AmiChoice {
	if m != nil {
		return m.AmiChoice
	}
	return nil
}
func (m *PaloAltoFWAWSType) GetPanaromaConnection() isPaloAltoFWAWSType_PanaromaConnection {
	if m != nil {
		return m.PanaromaConnection
	}
	return nil
}
func (m *PaloAltoFWAWSType) GetSetupOptions() isPaloAltoFWAWSType_SetupOptions {
	if m != nil {
		return m.SetupOptions
	}
	return nil
}

func (m *PaloAltoFWAWSType) GetInstanceType() PaloAltoFWAWSInstanceType {
	if m != nil {
		return m.InstanceType
	}
	return PALO_ALTO_FW_AWS_INSTANCE_TYPE_M4_XLARGE
}

func (m *PaloAltoFWAWSType) GetPanAmiBundle1() *schema.Empty {
	if x, ok := m.GetAmiChoice().(*PaloAltoFWAWSType_PanAmiBundle1); ok {
		return x.PanAmiBundle1
	}
	return nil
}

func (m *PaloAltoFWAWSType) GetPanAmiBundle2() *schema.Empty {
	if x, ok := m.GetAmiChoice().(*PaloAltoFWAWSType_PanAmiBundle2); ok {
		return x.PanAmiBundle2
	}
	return nil
}

func (m *PaloAltoFWAWSType) GetDisablePanaroma() *schema.Empty {
	if x, ok := m.GetPanaromaConnection().(*PaloAltoFWAWSType_DisablePanaroma); ok {
		return x.DisablePanaroma
	}
	return nil
}

func (m *PaloAltoFWAWSType) GetPanoramaServer() *PanoramaServerType {
	if x, ok := m.GetPanaromaConnection().(*PaloAltoFWAWSType_PanoramaServer); ok {
		return x.PanoramaServer
	}
	return nil
}

func (m *PaloAltoFWAWSType) GetAutoSetup() *PANAWSAutoSetupType {
	if x, ok := m.GetSetupOptions().(*PaloAltoFWAWSType_AutoSetup); ok {
		return x.AutoSetup
	}
	return nil
}

func (m *PaloAltoFWAWSType) GetSshKey() string {
	if x, ok := m.GetSetupOptions().(*PaloAltoFWAWSType_SshKey); ok {
		return x.SshKey
	}
	return ""
}

func (m *PaloAltoFWAWSType) GetAwsTgwSite() *views.ObjectRefType {
	if m != nil {
		return m.AwsTgwSite
	}
	return nil
}

func (m *PaloAltoFWAWSType) GetServiceNodes() *PaloAltoAzNodesAWSType {
	if m != nil {
		return m.ServiceNodes
	}
	return nil
}

func (m *PaloAltoFWAWSType) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *PaloAltoFWAWSType) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PaloAltoFWAWSType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PaloAltoFWAWSType_PanAmiBundle1)(nil),
		(*PaloAltoFWAWSType_PanAmiBundle2)(nil),
		(*PaloAltoFWAWSType_DisablePanaroma)(nil),
		(*PaloAltoFWAWSType_PanoramaServer)(nil),
		(*PaloAltoFWAWSType_AutoSetup)(nil),
		(*PaloAltoFWAWSType_SshKey)(nil),
	}
}

// Palo Alto Networks Vm-Series AZ Nodes
//
// x-displayName: "Palo Alto Networks Vm-Series AZ Nodes"
type PaloAltoAzNodesAWSType struct {
	// Palo Alto Networks AZ Nodes
	//
	// x-displayName: "Palo Alto Networks AZ Nodes"
	// x-required
	Nodes []*PaloAltoServiceNodesAWSType `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (m *PaloAltoAzNodesAWSType) Reset()      { *m = PaloAltoAzNodesAWSType{} }
func (*PaloAltoAzNodesAWSType) ProtoMessage() {}
func (*PaloAltoAzNodesAWSType) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04d33a158d31df9, []int{14}
}
func (m *PaloAltoAzNodesAWSType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PaloAltoAzNodesAWSType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PaloAltoAzNodesAWSType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaloAltoAzNodesAWSType.Merge(m, src)
}
func (m *PaloAltoAzNodesAWSType) XXX_Size() int {
	return m.Size()
}
func (m *PaloAltoAzNodesAWSType) XXX_DiscardUnknown() {
	xxx_messageInfo_PaloAltoAzNodesAWSType.DiscardUnknown(m)
}

var xxx_messageInfo_PaloAltoAzNodesAWSType proto.InternalMessageInfo

func (m *PaloAltoAzNodesAWSType) GetNodes() []*PaloAltoServiceNodesAWSType {
	if m != nil {
		return m.Nodes
	}
	return nil
}

// Virtual PaloAlto Firewall
//
// x-displayName: "Virtual PaloAlto Firewall"
// Virtual PaloAlto Firewall specification
type PaloAltoFWAWSReplaceType struct {
	// AWS Tags
	//
	// x-displayName: "AWS Tags"
	// x-example: "dev: staging"
	// AWS Tags is a label consisting of a user-defined key and value.
	// It helps to manage, identify, organize, search for, and filter resources in AWS console.
	Tags map[string]string `protobuf:"bytes,11,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *PaloAltoFWAWSReplaceType) Reset()      { *m = PaloAltoFWAWSReplaceType{} }
func (*PaloAltoFWAWSReplaceType) ProtoMessage() {}
func (*PaloAltoFWAWSReplaceType) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04d33a158d31df9, []int{15}
}
func (m *PaloAltoFWAWSReplaceType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PaloAltoFWAWSReplaceType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PaloAltoFWAWSReplaceType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaloAltoFWAWSReplaceType.Merge(m, src)
}
func (m *PaloAltoFWAWSReplaceType) XXX_Size() int {
	return m.Size()
}
func (m *PaloAltoFWAWSReplaceType) XXX_DiscardUnknown() {
	xxx_messageInfo_PaloAltoFWAWSReplaceType.DiscardUnknown(m)
}

var xxx_messageInfo_PaloAltoFWAWSReplaceType proto.InternalMessageInfo

func (m *PaloAltoFWAWSReplaceType) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

// SSHManagement Port Configuration
//
// x-displayName: "Management Node SSH Port"
// TCP Port configuration per node
type SSHManagementNodePorts struct {
	// Node Name
	//
	// x-displayName: "Node Name"
	// x-example: "node1"
	// x-required
	// Node name will be used to match a particular node with the desired TCP port
	NodeName string `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// SSH port per node
	//
	// x-displayName: "SSH Port"
	// x-required
	// x-example: "2222"
	// Enter TCP port per node
	SshPort uint32 `protobuf:"varint,2,opt,name=ssh_port,json=sshPort,proto3" json:"ssh_port,omitempty"`
}

func (m *SSHManagementNodePorts) Reset()      { *m = SSHManagementNodePorts{} }
func (*SSHManagementNodePorts) ProtoMessage() {}
func (*SSHManagementNodePorts) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04d33a158d31df9, []int{16}
}
func (m *SSHManagementNodePorts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SSHManagementNodePorts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SSHManagementNodePorts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SSHManagementNodePorts.Merge(m, src)
}
func (m *SSHManagementNodePorts) XXX_Size() int {
	return m.Size()
}
func (m *SSHManagementNodePorts) XXX_DiscardUnknown() {
	xxx_messageInfo_SSHManagementNodePorts.DiscardUnknown(m)
}

var xxx_messageInfo_SSHManagementNodePorts proto.InternalMessageInfo

func (m *SSHManagementNodePorts) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *SSHManagementNodePorts) GetSshPort() uint32 {
	if m != nil {
		return m.SshPort
	}
	return 0
}

// SSH based management
//
// x-displayName: "SSH based management"
// SSH based configuration
type SSHManagementType struct {
	// Enable Access on Site Local Networks
	//
	// x-displayName: "Enable Access on Site Local Networks"
	// Select site local network for management access
	//
	// Types that are valid to be assigned to AdvertiseChoice:
	//	*SSHManagementType_AdvertiseOnPublicDefaultVip
	//	*SSHManagementType_AdvertiseOnPublic
	//	*SSHManagementType_AdvertiseOnSloInternetVip
	//	*SSHManagementType_AdvertiseOnSli
	//	*SSHManagementType_AdvertiseOnSlo
	//	*SSHManagementType_AdvertiseOnSloSli
	AdvertiseChoice isSSHManagementType_AdvertiseChoice `protobuf_oneof:"advertise_choice"`
	// List of SSH port and node name per node
	//
	// x-displayName: "Management Node SSH Port"
	// x-required
	// Enter TCP port and node name per node
	NodeSshPorts []*SSHManagementNodePorts `protobuf:"bytes,13,rep,name=node_ssh_ports,json=nodeSshPorts,proto3" json:"node_ssh_ports,omitempty"`
	// Domain Suffix
	//
	// x-displayName: "Domain Suffix"
	// x-example: "foo.com"
	// x-required
	// Domain suffix will be used along with node name to form the hostname for ssh node management
	DomainSuffix string `protobuf:"bytes,14,opt,name=domain_suffix,json=domainSuffix,proto3" json:"domain_suffix,omitempty"`
}

func (m *SSHManagementType) Reset()      { *m = SSHManagementType{} }
func (*SSHManagementType) ProtoMessage() {}
func (*SSHManagementType) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04d33a158d31df9, []int{17}
}
func (m *SSHManagementType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SSHManagementType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SSHManagementType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SSHManagementType.Merge(m, src)
}
func (m *SSHManagementType) XXX_Size() int {
	return m.Size()
}
func (m *SSHManagementType) XXX_DiscardUnknown() {
	xxx_messageInfo_SSHManagementType.DiscardUnknown(m)
}

var xxx_messageInfo_SSHManagementType proto.InternalMessageInfo

type isSSHManagementType_AdvertiseChoice interface {
	isSSHManagementType_AdvertiseChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type SSHManagementType_AdvertiseOnPublicDefaultVip struct {
	AdvertiseOnPublicDefaultVip *schema.Empty `protobuf:"bytes,3,opt,name=advertise_on_public_default_vip,json=advertiseOnPublicDefaultVip,proto3,oneof" json:"advertise_on_public_default_vip,omitempty"`
}
type SSHManagementType_AdvertiseOnPublic struct {
	AdvertiseOnPublic *views.AdvertisePublic `protobuf:"bytes,4,opt,name=advertise_on_public,json=advertiseOnPublic,proto3,oneof" json:"advertise_on_public,omitempty"`
}
type SSHManagementType_AdvertiseOnSloInternetVip struct {
	AdvertiseOnSloInternetVip *schema.Empty `protobuf:"bytes,9,opt,name=advertise_on_slo_internet_vip,json=advertiseOnSloInternetVip,proto3,oneof" json:"advertise_on_slo_internet_vip,omitempty"`
}
type SSHManagementType_AdvertiseOnSli struct {
	AdvertiseOnSli *schema.Empty `protobuf:"bytes,10,opt,name=advertise_on_sli,json=advertiseOnSli,proto3,oneof" json:"advertise_on_sli,omitempty"`
}
type SSHManagementType_AdvertiseOnSlo struct {
	AdvertiseOnSlo *schema.Empty `protobuf:"bytes,11,opt,name=advertise_on_slo,json=advertiseOnSlo,proto3,oneof" json:"advertise_on_slo,omitempty"`
}
type SSHManagementType_AdvertiseOnSloSli struct {
	AdvertiseOnSloSli *schema.Empty `protobuf:"bytes,12,opt,name=advertise_on_slo_sli,json=advertiseOnSloSli,proto3,oneof" json:"advertise_on_slo_sli,omitempty"`
}

func (*SSHManagementType_AdvertiseOnPublicDefaultVip) isSSHManagementType_AdvertiseChoice() {}
func (*SSHManagementType_AdvertiseOnPublic) isSSHManagementType_AdvertiseChoice()           {}
func (*SSHManagementType_AdvertiseOnSloInternetVip) isSSHManagementType_AdvertiseChoice()   {}
func (*SSHManagementType_AdvertiseOnSli) isSSHManagementType_AdvertiseChoice()              {}
func (*SSHManagementType_AdvertiseOnSlo) isSSHManagementType_AdvertiseChoice()              {}
func (*SSHManagementType_AdvertiseOnSloSli) isSSHManagementType_AdvertiseChoice()           {}

func (m *SSHManagementType) GetAdvertiseChoice() isSSHManagementType_AdvertiseChoice {
	if m != nil {
		return m.AdvertiseChoice
	}
	return nil
}

// Deprecated: Do not use.
func (m *SSHManagementType) GetAdvertiseOnPublicDefaultVip() *schema.Empty {
	if x, ok := m.GetAdvertiseChoice().(*SSHManagementType_AdvertiseOnPublicDefaultVip); ok {
		return x.AdvertiseOnPublicDefaultVip
	}
	return nil
}

func (m *SSHManagementType) GetAdvertiseOnPublic() *views.AdvertisePublic {
	if x, ok := m.GetAdvertiseChoice().(*SSHManagementType_AdvertiseOnPublic); ok {
		return x.AdvertiseOnPublic
	}
	return nil
}

func (m *SSHManagementType) GetAdvertiseOnSloInternetVip() *schema.Empty {
	if x, ok := m.GetAdvertiseChoice().(*SSHManagementType_AdvertiseOnSloInternetVip); ok {
		return x.AdvertiseOnSloInternetVip
	}
	return nil
}

func (m *SSHManagementType) GetAdvertiseOnSli() *schema.Empty {
	if x, ok := m.GetAdvertiseChoice().(*SSHManagementType_AdvertiseOnSli); ok {
		return x.AdvertiseOnSli
	}
	return nil
}

func (m *SSHManagementType) GetAdvertiseOnSlo() *schema.Empty {
	if x, ok := m.GetAdvertiseChoice().(*SSHManagementType_AdvertiseOnSlo); ok {
		return x.AdvertiseOnSlo
	}
	return nil
}

func (m *SSHManagementType) GetAdvertiseOnSloSli() *schema.Empty {
	if x, ok := m.GetAdvertiseChoice().(*SSHManagementType_AdvertiseOnSloSli); ok {
		return x.AdvertiseOnSloSli
	}
	return nil
}

func (m *SSHManagementType) GetNodeSshPorts() []*SSHManagementNodePorts {
	if m != nil {
		return m.NodeSshPorts
	}
	return nil
}

func (m *SSHManagementType) GetDomainSuffix() string {
	if m != nil {
		return m.DomainSuffix
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SSHManagementType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SSHManagementType_AdvertiseOnPublicDefaultVip)(nil),
		(*SSHManagementType_AdvertiseOnPublic)(nil),
		(*SSHManagementType_AdvertiseOnSloInternetVip)(nil),
		(*SSHManagementType_AdvertiseOnSli)(nil),
		(*SSHManagementType_AdvertiseOnSlo)(nil),
		(*SSHManagementType_AdvertiseOnSloSli)(nil),
	}
}

// HTTPS based management
//
// x-displayName: "HTTPS based management"
// HTTPS based configuration
type ServiceHttpsManagementType struct {
	// Domain Suffix
	//
	// x-displayName: "Domain Suffix"
	// x-example: "foo.com"
	// x-required
	// Domain suffix will be used along with node name to form URL to access node management
	DomainSuffix string `protobuf:"bytes,1,opt,name=domain_suffix,json=domainSuffix,proto3" json:"domain_suffix,omitempty"`
	// Port Choice
	//
	// x-displayName: "HTTPS Port Choice"
	// x-required
	// Select user provided port or HTTPS default port
	//
	// Types that are valid to be assigned to PortChoice:
	//	*ServiceHttpsManagementType_DefaultHttpsPort
	//	*ServiceHttpsManagementType_HttpsPort
	PortChoice isServiceHttpsManagementType_PortChoice `protobuf_oneof:"port_choice"`
	// Enable Access on Internet
	//
	// x-displayName: "Enable Access on Internet"
	// Management access is enabled on internet
	//
	// Types that are valid to be assigned to InternetChoice:
	//	*ServiceHttpsManagementType_DoNotAdvertise
	//	*ServiceHttpsManagementType_AdvertiseOnPublicDefaultVip
	//	*ServiceHttpsManagementType_AdvertiseOnPublic
	InternetChoice isServiceHttpsManagementType_InternetChoice `protobuf_oneof:"internet_choice"`
	// Access on Site Local Networks
	//
	// x-displayName: "Access on Site Local Networks"
	// x-required
	// Select site local network for management access
	//
	// Types that are valid to be assigned to AdvertiseChoice:
	//	*ServiceHttpsManagementType_DoNotAdvertiseOnInternet
	//	*ServiceHttpsManagementType_AdvertiseOnInternetDefaultVip
	//	*ServiceHttpsManagementType_AdvertiseOnInternet
	//	*ServiceHttpsManagementType_AdvertiseOnSloInternetVip
	//	*ServiceHttpsManagementType_AdvertiseOnSliVip
	//	*ServiceHttpsManagementType_AdvertiseOnSloVip
	//	*ServiceHttpsManagementType_AdvertiseOnSloSli
	//	*ServiceHttpsManagementType_DisableLocal
	AdvertiseChoice isServiceHttpsManagementType_AdvertiseChoice `protobuf_oneof:"advertise_choice"`
}

func (m *ServiceHttpsManagementType) Reset()      { *m = ServiceHttpsManagementType{} }
func (*ServiceHttpsManagementType) ProtoMessage() {}
func (*ServiceHttpsManagementType) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04d33a158d31df9, []int{18}
}
func (m *ServiceHttpsManagementType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceHttpsManagementType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ServiceHttpsManagementType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceHttpsManagementType.Merge(m, src)
}
func (m *ServiceHttpsManagementType) XXX_Size() int {
	return m.Size()
}
func (m *ServiceHttpsManagementType) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceHttpsManagementType.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceHttpsManagementType proto.InternalMessageInfo

type isServiceHttpsManagementType_PortChoice interface {
	isServiceHttpsManagementType_PortChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isServiceHttpsManagementType_InternetChoice interface {
	isServiceHttpsManagementType_InternetChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isServiceHttpsManagementType_AdvertiseChoice interface {
	isServiceHttpsManagementType_AdvertiseChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ServiceHttpsManagementType_DefaultHttpsPort struct {
	DefaultHttpsPort *schema.Empty `protobuf:"bytes,3,opt,name=default_https_port,json=defaultHttpsPort,proto3,oneof" json:"default_https_port,omitempty"`
}
type ServiceHttpsManagementType_HttpsPort struct {
	HttpsPort uint32 `protobuf:"varint,4,opt,name=https_port,json=httpsPort,proto3,oneof" json:"https_port,omitempty"`
}
type ServiceHttpsManagementType_DoNotAdvertise struct {
	DoNotAdvertise *schema.Empty `protobuf:"bytes,6,opt,name=do_not_advertise,json=doNotAdvertise,proto3,oneof" json:"do_not_advertise,omitempty"`
}
type ServiceHttpsManagementType_AdvertiseOnPublicDefaultVip struct {
	AdvertiseOnPublicDefaultVip *schema.Empty `protobuf:"bytes,7,opt,name=advertise_on_public_default_vip,json=advertiseOnPublicDefaultVip,proto3,oneof" json:"advertise_on_public_default_vip,omitempty"`
}
type ServiceHttpsManagementType_AdvertiseOnPublic struct {
	AdvertiseOnPublic *views.AdvertisePublic `protobuf:"bytes,8,opt,name=advertise_on_public,json=advertiseOnPublic,proto3,oneof" json:"advertise_on_public,omitempty"`
}
type ServiceHttpsManagementType_DoNotAdvertiseOnInternet struct {
	DoNotAdvertiseOnInternet *schema.Empty `protobuf:"bytes,15,opt,name=do_not_advertise_on_internet,json=doNotAdvertiseOnInternet,proto3,oneof" json:"do_not_advertise_on_internet,omitempty"`
}
type ServiceHttpsManagementType_AdvertiseOnInternetDefaultVip struct {
	AdvertiseOnInternetDefaultVip *schema.Empty `protobuf:"bytes,16,opt,name=advertise_on_internet_default_vip,json=advertiseOnInternetDefaultVip,proto3,oneof" json:"advertise_on_internet_default_vip,omitempty"`
}
type ServiceHttpsManagementType_AdvertiseOnInternet struct {
	AdvertiseOnInternet *views.AdvertisePublic `protobuf:"bytes,17,opt,name=advertise_on_internet,json=advertiseOnInternet,proto3,oneof" json:"advertise_on_internet,omitempty"`
}
type ServiceHttpsManagementType_AdvertiseOnSloInternetVip struct {
	AdvertiseOnSloInternetVip *views.DownstreamTlsParamsType `protobuf:"bytes,14,opt,name=advertise_on_slo_internet_vip,json=advertiseOnSloInternetVip,proto3,oneof" json:"advertise_on_slo_internet_vip,omitempty"`
}
type ServiceHttpsManagementType_AdvertiseOnSliVip struct {
	AdvertiseOnSliVip *views.DownstreamTlsParamsType `protobuf:"bytes,10,opt,name=advertise_on_sli_vip,json=advertiseOnSliVip,proto3,oneof" json:"advertise_on_sli_vip,omitempty"`
}
type ServiceHttpsManagementType_AdvertiseOnSloVip struct {
	AdvertiseOnSloVip *views.DownstreamTlsParamsType `protobuf:"bytes,11,opt,name=advertise_on_slo_vip,json=advertiseOnSloVip,proto3,oneof" json:"advertise_on_slo_vip,omitempty"`
}
type ServiceHttpsManagementType_AdvertiseOnSloSli struct {
	AdvertiseOnSloSli *views.DownstreamTlsParamsType `protobuf:"bytes,12,opt,name=advertise_on_slo_sli,json=advertiseOnSloSli,proto3,oneof" json:"advertise_on_slo_sli,omitempty"`
}
type ServiceHttpsManagementType_DisableLocal struct {
	DisableLocal *schema.Empty `protobuf:"bytes,13,opt,name=disable_local,json=disableLocal,proto3,oneof" json:"disable_local,omitempty"`
}

func (*ServiceHttpsManagementType_DefaultHttpsPort) isServiceHttpsManagementType_PortChoice()   {}
func (*ServiceHttpsManagementType_HttpsPort) isServiceHttpsManagementType_PortChoice()          {}
func (*ServiceHttpsManagementType_DoNotAdvertise) isServiceHttpsManagementType_InternetChoice() {}
func (*ServiceHttpsManagementType_AdvertiseOnPublicDefaultVip) isServiceHttpsManagementType_InternetChoice() {
}
func (*ServiceHttpsManagementType_AdvertiseOnPublic) isServiceHttpsManagementType_InternetChoice() {}
func (*ServiceHttpsManagementType_DoNotAdvertiseOnInternet) isServiceHttpsManagementType_AdvertiseChoice() {
}
func (*ServiceHttpsManagementType_AdvertiseOnInternetDefaultVip) isServiceHttpsManagementType_AdvertiseChoice() {
}
func (*ServiceHttpsManagementType_AdvertiseOnInternet) isServiceHttpsManagementType_AdvertiseChoice() {
}
func (*ServiceHttpsManagementType_AdvertiseOnSloInternetVip) isServiceHttpsManagementType_AdvertiseChoice() {
}
func (*ServiceHttpsManagementType_AdvertiseOnSliVip) isServiceHttpsManagementType_AdvertiseChoice() {}
func (*ServiceHttpsManagementType_AdvertiseOnSloVip) isServiceHttpsManagementType_AdvertiseChoice() {}
func (*ServiceHttpsManagementType_AdvertiseOnSloSli) isServiceHttpsManagementType_AdvertiseChoice() {}
func (*ServiceHttpsManagementType_DisableLocal) isServiceHttpsManagementType_AdvertiseChoice()      {}

func (m *ServiceHttpsManagementType) GetPortChoice() isServiceHttpsManagementType_PortChoice {
	if m != nil {
		return m.PortChoice
	}
	return nil
}
func (m *ServiceHttpsManagementType) GetInternetChoice() isServiceHttpsManagementType_InternetChoice {
	if m != nil {
		return m.InternetChoice
	}
	return nil
}
func (m *ServiceHttpsManagementType) GetAdvertiseChoice() isServiceHttpsManagementType_AdvertiseChoice {
	if m != nil {
		return m.AdvertiseChoice
	}
	return nil
}

func (m *ServiceHttpsManagementType) GetDomainSuffix() string {
	if m != nil {
		return m.DomainSuffix
	}
	return ""
}

func (m *ServiceHttpsManagementType) GetDefaultHttpsPort() *schema.Empty {
	if x, ok := m.GetPortChoice().(*ServiceHttpsManagementType_DefaultHttpsPort); ok {
		return x.DefaultHttpsPort
	}
	return nil
}

func (m *ServiceHttpsManagementType) GetHttpsPort() uint32 {
	if x, ok := m.GetPortChoice().(*ServiceHttpsManagementType_HttpsPort); ok {
		return x.HttpsPort
	}
	return 0
}

// Deprecated: Do not use.
func (m *ServiceHttpsManagementType) GetDoNotAdvertise() *schema.Empty {
	if x, ok := m.GetInternetChoice().(*ServiceHttpsManagementType_DoNotAdvertise); ok {
		return x.DoNotAdvertise
	}
	return nil
}

// Deprecated: Do not use.
func (m *ServiceHttpsManagementType) GetAdvertiseOnPublicDefaultVip() *schema.Empty {
	if x, ok := m.GetInternetChoice().(*ServiceHttpsManagementType_AdvertiseOnPublicDefaultVip); ok {
		return x.AdvertiseOnPublicDefaultVip
	}
	return nil
}

// Deprecated: Do not use.
func (m *ServiceHttpsManagementType) GetAdvertiseOnPublic() *views.AdvertisePublic {
	if x, ok := m.GetInternetChoice().(*ServiceHttpsManagementType_AdvertiseOnPublic); ok {
		return x.AdvertiseOnPublic
	}
	return nil
}

func (m *ServiceHttpsManagementType) GetDoNotAdvertiseOnInternet() *schema.Empty {
	if x, ok := m.GetAdvertiseChoice().(*ServiceHttpsManagementType_DoNotAdvertiseOnInternet); ok {
		return x.DoNotAdvertiseOnInternet
	}
	return nil
}

func (m *ServiceHttpsManagementType) GetAdvertiseOnInternetDefaultVip() *schema.Empty {
	if x, ok := m.GetAdvertiseChoice().(*ServiceHttpsManagementType_AdvertiseOnInternetDefaultVip); ok {
		return x.AdvertiseOnInternetDefaultVip
	}
	return nil
}

func (m *ServiceHttpsManagementType) GetAdvertiseOnInternet() *views.AdvertisePublic {
	if x, ok := m.GetAdvertiseChoice().(*ServiceHttpsManagementType_AdvertiseOnInternet); ok {
		return x.AdvertiseOnInternet
	}
	return nil
}

func (m *ServiceHttpsManagementType) GetAdvertiseOnSloInternetVip() *views.DownstreamTlsParamsType {
	if x, ok := m.GetAdvertiseChoice().(*ServiceHttpsManagementType_AdvertiseOnSloInternetVip); ok {
		return x.AdvertiseOnSloInternetVip
	}
	return nil
}

func (m *ServiceHttpsManagementType) GetAdvertiseOnSliVip() *views.DownstreamTlsParamsType {
	if x, ok := m.GetAdvertiseChoice().(*ServiceHttpsManagementType_AdvertiseOnSliVip); ok {
		return x.AdvertiseOnSliVip
	}
	return nil
}

func (m *ServiceHttpsManagementType) GetAdvertiseOnSloVip() *views.DownstreamTlsParamsType {
	if x, ok := m.GetAdvertiseChoice().(*ServiceHttpsManagementType_AdvertiseOnSloVip); ok {
		return x.AdvertiseOnSloVip
	}
	return nil
}

func (m *ServiceHttpsManagementType) GetAdvertiseOnSloSli() *views.DownstreamTlsParamsType {
	if x, ok := m.GetAdvertiseChoice().(*ServiceHttpsManagementType_AdvertiseOnSloSli); ok {
		return x.AdvertiseOnSloSli
	}
	return nil
}

func (m *ServiceHttpsManagementType) GetDisableLocal() *schema.Empty {
	if x, ok := m.GetAdvertiseChoice().(*ServiceHttpsManagementType_DisableLocal); ok {
		return x.DisableLocal
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ServiceHttpsManagementType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ServiceHttpsManagementType_DefaultHttpsPort)(nil),
		(*ServiceHttpsManagementType_HttpsPort)(nil),
		(*ServiceHttpsManagementType_DoNotAdvertise)(nil),
		(*ServiceHttpsManagementType_AdvertiseOnPublicDefaultVip)(nil),
		(*ServiceHttpsManagementType_AdvertiseOnPublic)(nil),
		(*ServiceHttpsManagementType_DoNotAdvertiseOnInternet)(nil),
		(*ServiceHttpsManagementType_AdvertiseOnInternetDefaultVip)(nil),
		(*ServiceHttpsManagementType_AdvertiseOnInternet)(nil),
		(*ServiceHttpsManagementType_AdvertiseOnSloInternetVip)(nil),
		(*ServiceHttpsManagementType_AdvertiseOnSliVip)(nil),
		(*ServiceHttpsManagementType_AdvertiseOnSloVip)(nil),
		(*ServiceHttpsManagementType_AdvertiseOnSloSli)(nil),
		(*ServiceHttpsManagementType_DisableLocal)(nil),
	}
}

// Virtual BIG-IP on App Stack bare metal
//
// x-displayName: "Virtual BIG-IP on App Stack bare metal"
// Virtual BIG-IP specification for App Stack bare metal
type F5BigIpAppStackBareMetalType struct {
	// Admin Username
	//
	// x-displayName: "Admin Username"
	// x-example: "admin"
	// x-required
	// Admin Username for BIG-IP
	AdminUsername string `protobuf:"bytes,1,opt,name=admin_username,json=adminUsername,proto3" json:"admin_username,omitempty"`
	// Admin Password
	//
	// x-displayName: "Admin Password"
	// x-required
	// Secret admin password for BIG-IP
	AdminPassword *schema.SecretType `protobuf:"bytes,2,opt,name=admin_password,json=adminPassword,proto3" json:"admin_password,omitempty"`
	// Public SSH key
	//
	// x-displayName: "Public SSH key"
	// x-example: "ssh-rsa AAAAB..."
	// x-required
	// Public SSH key for accessing the BIG-IP nodes.
	SshKey string `protobuf:"bytes,3,opt,name=ssh_key,json=sshKey,proto3" json:"ssh_key,omitempty"`
	// App Stack Bare Metal Site
	//
	// x-displayName: "App Stack Bare Metal Site"
	// x-required
	// Reference to bare metal site on which BIG-IP should be deployed
	BareMetalSite *views.ObjectRefType `protobuf:"bytes,5,opt,name=bare_metal_site,json=bareMetalSite,proto3" json:"bare_metal_site,omitempty"`
	// BIG-IQ Instance configured as License Server for BIG-IP License Activation
	//
	// x-displayName: "License Server Details"
	// x-required
	// Details of BIG-IQ Instance used for activating licenses.
	BigiqInstance *BigIqInstanceType `protobuf:"bytes,7,opt,name=bigiq_instance,json=bigiqInstance,proto3" json:"bigiq_instance,omitempty"`
	// Service Nodes
	//
	// x-displayName: "Service Nodes"
	// x-required
	// Specify how and where the service nodes are spawned
	Nodes []*ServiceNodesBareMetalType `protobuf:"bytes,4,rep,name=nodes,proto3" json:"nodes,omitempty"`
	// public URL where BIG-IP image is hosted.
	//
	// x-displayName: "Image URL"
	// x-example: "https://imagepath.com/bigip_ve"
	// x-required
	// Public URL where BIG-IP VE image (qcow2) is hosted
	PublicDownloadUrl string `protobuf:"bytes,6,opt,name=public_download_url,json=publicDownloadUrl,proto3" json:"public_download_url,omitempty"`
}

func (m *F5BigIpAppStackBareMetalType) Reset()      { *m = F5BigIpAppStackBareMetalType{} }
func (*F5BigIpAppStackBareMetalType) ProtoMessage() {}
func (*F5BigIpAppStackBareMetalType) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04d33a158d31df9, []int{19}
}
func (m *F5BigIpAppStackBareMetalType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *F5BigIpAppStackBareMetalType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *F5BigIpAppStackBareMetalType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_F5BigIpAppStackBareMetalType.Merge(m, src)
}
func (m *F5BigIpAppStackBareMetalType) XXX_Size() int {
	return m.Size()
}
func (m *F5BigIpAppStackBareMetalType) XXX_DiscardUnknown() {
	xxx_messageInfo_F5BigIpAppStackBareMetalType.DiscardUnknown(m)
}

var xxx_messageInfo_F5BigIpAppStackBareMetalType proto.InternalMessageInfo

func (m *F5BigIpAppStackBareMetalType) GetAdminUsername() string {
	if m != nil {
		return m.AdminUsername
	}
	return ""
}

func (m *F5BigIpAppStackBareMetalType) GetAdminPassword() *schema.SecretType {
	if m != nil {
		return m.AdminPassword
	}
	return nil
}

func (m *F5BigIpAppStackBareMetalType) GetSshKey() string {
	if m != nil {
		return m.SshKey
	}
	return ""
}

func (m *F5BigIpAppStackBareMetalType) GetBareMetalSite() *views.ObjectRefType {
	if m != nil {
		return m.BareMetalSite
	}
	return nil
}

func (m *F5BigIpAppStackBareMetalType) GetBigiqInstance() *BigIqInstanceType {
	if m != nil {
		return m.BigiqInstance
	}
	return nil
}

func (m *F5BigIpAppStackBareMetalType) GetNodes() []*ServiceNodesBareMetalType {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *F5BigIpAppStackBareMetalType) GetPublicDownloadUrl() string {
	if m != nil {
		return m.PublicDownloadUrl
	}
	return ""
}

// BIG-IP interface details
//
// x-displayName: "Interface"
// x-required
// BIG-IP interface details
type InterfaceDetails struct {
	// L2 Interface on Site to be connected as interface on BIG-IP
	//
	// x-displayName: "L2 Interface"
	// x-required
	// L2 Interface on Site to be connected as interface on BIG-IP
	Interface *views.ObjectRefType `protobuf:"bytes,1,opt,name=interface,proto3" json:"interface,omitempty"`
	// BIG-IP Network Self IP
	//
	// x-displayName: "Self IP"
	// x-example: "10.2.3.0/24"
	// x-required
	// Self IP CIDR
	NetworkSelfIp string `protobuf:"bytes,2,opt,name=network_self_ip,json=networkSelfIp,proto3" json:"network_self_ip,omitempty"`
	// BIG-IP Network Default Gateway
	//
	// x-displayName: "Default Gateway"
	// x-example: "10.2.3.0"
	//
	//
	NetworkGateway string `protobuf:"bytes,3,opt,name=network_gateway,json=networkGateway,proto3" json:"network_gateway,omitempty"`
}

func (m *InterfaceDetails) Reset()      { *m = InterfaceDetails{} }
func (*InterfaceDetails) ProtoMessage() {}
func (*InterfaceDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04d33a158d31df9, []int{20}
}
func (m *InterfaceDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfaceDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *InterfaceDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfaceDetails.Merge(m, src)
}
func (m *InterfaceDetails) XXX_Size() int {
	return m.Size()
}
func (m *InterfaceDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfaceDetails.DiscardUnknown(m)
}

var xxx_messageInfo_InterfaceDetails proto.InternalMessageInfo

func (m *InterfaceDetails) GetInterface() *views.ObjectRefType {
	if m != nil {
		return m.Interface
	}
	return nil
}

func (m *InterfaceDetails) GetNetworkSelfIp() string {
	if m != nil {
		return m.NetworkSelfIp
	}
	return ""
}

func (m *InterfaceDetails) GetNetworkGateway() string {
	if m != nil {
		return m.NetworkGateway
	}
	return ""
}

// BIG-IQ Instance configured as License Server for BIG-IP License Activation
//
// x-displayName: "License Server Details"
// Specification for BIG-IQ Instance, where and what
type BigIqInstanceType struct {
	// TCP Load Balancer IP Address
	//
	// x-displayName: "License Server IP"
	// x-example: "192.168.0.77"
	// x-required
	// IP Address from the TCP Load Balancer which is configured to communicate with License Server
	LicenseServerIp string `protobuf:"bytes,7,opt,name=license_server_ip,json=licenseServerIp,proto3" json:"license_server_ip,omitempty"`
	// User Name
	//
	// x-displayName: "User Name"
	// x-example: "admin"
	// x-required
	// User Name used to access BIG-IQ to activate the license
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	// Password
	//
	// x-displayName: "Password"
	// x-example: "admin123"
	// x-required
	// Password of the user used to access BIG-IQ to activate the license
	Password *schema.SecretType `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	// License Pool Name
	//
	// x-displayName: "License Pool Name"
	// x-example: "apm_msp_license_pool1"
	// x-required
	// Name of Utility Pool on BIG-IQ
	LicensePoolName string `protobuf:"bytes,4,opt,name=license_pool_name,json=licensePoolName,proto3" json:"license_pool_name,omitempty"`
	// Offering Name
	//
	// x-displayName: "Offering Name"
	// x-example: "F5-BIG-MSP-A-BT-1G-EXTHSM-1"
	// x-required
	// License offering name aka SKU name
	SkuName string `protobuf:"bytes,5,opt,name=sku_name,json=skuName,proto3" json:"sku_name,omitempty"`
}

func (m *BigIqInstanceType) Reset()      { *m = BigIqInstanceType{} }
func (*BigIqInstanceType) ProtoMessage() {}
func (*BigIqInstanceType) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04d33a158d31df9, []int{21}
}
func (m *BigIqInstanceType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BigIqInstanceType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BigIqInstanceType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BigIqInstanceType.Merge(m, src)
}
func (m *BigIqInstanceType) XXX_Size() int {
	return m.Size()
}
func (m *BigIqInstanceType) XXX_DiscardUnknown() {
	xxx_messageInfo_BigIqInstanceType.DiscardUnknown(m)
}

var xxx_messageInfo_BigIqInstanceType proto.InternalMessageInfo

func (m *BigIqInstanceType) GetLicenseServerIp() string {
	if m != nil {
		return m.LicenseServerIp
	}
	return ""
}

func (m *BigIqInstanceType) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *BigIqInstanceType) GetPassword() *schema.SecretType {
	if m != nil {
		return m.Password
	}
	return nil
}

func (m *BigIqInstanceType) GetLicensePoolName() string {
	if m != nil {
		return m.LicensePoolName
	}
	return ""
}

func (m *BigIqInstanceType) GetSkuName() string {
	if m != nil {
		return m.SkuName
	}
	return ""
}

// Service Nodes in App Stack Bare Metal
//
// x-displayName: "Service Nodes"
// Specification for service nodes, how and where
type ServiceNodesBareMetalType struct {
	// Node Name
	//
	// x-displayName: "Node Name"
	// x-example: "node1"
	// x-required
	// Node Name will be used to assign as hostname to the service
	NodeName string `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// BIG-IP Internal interface details
	//
	// x-displayName: "Internal Interface"
	//
	//
	InternalInterface *InterfaceDetails `protobuf:"bytes,3,opt,name=internal_interface,json=internalInterface,proto3" json:"internal_interface,omitempty"`
	// BIG-IP External interface details
	//
	// x-displayName: "External Interface"
	//
	//
	ExternalInterface *InterfaceDetails `protobuf:"bytes,4,opt,name=external_interface,json=externalInterface,proto3" json:"external_interface,omitempty"`
	// Number of Virtual CPUs to assign to the Node
	//
	// x-displayName: "Number of Virtual CPUs"
	// x-required
	BmVirtualCpuCount BMNodeVirtualCpuCount `protobuf:"varint,5,opt,name=bm_virtual_cpu_count,json=bmVirtualCpuCount,proto3,enum=ves.io.schema.nfv_service.BMNodeVirtualCpuCount" json:"bm_virtual_cpu_count,omitempty"`
	// Amount of memory to assign to the Node
	//
	// x-displayName: "Memory Size"
	// x-required
	BmNodeMemorySize BMNodeMemorySize `protobuf:"varint,6,opt,name=bm_node_memory_size,json=bmNodeMemorySize,proto3,enum=ves.io.schema.nfv_service.BMNodeMemorySize" json:"bm_node_memory_size,omitempty"`
}

func (m *ServiceNodesBareMetalType) Reset()      { *m = ServiceNodesBareMetalType{} }
func (*ServiceNodesBareMetalType) ProtoMessage() {}
func (*ServiceNodesBareMetalType) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04d33a158d31df9, []int{22}
}
func (m *ServiceNodesBareMetalType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceNodesBareMetalType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ServiceNodesBareMetalType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceNodesBareMetalType.Merge(m, src)
}
func (m *ServiceNodesBareMetalType) XXX_Size() int {
	return m.Size()
}
func (m *ServiceNodesBareMetalType) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceNodesBareMetalType.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceNodesBareMetalType proto.InternalMessageInfo

func (m *ServiceNodesBareMetalType) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *ServiceNodesBareMetalType) GetInternalInterface() *InterfaceDetails {
	if m != nil {
		return m.InternalInterface
	}
	return nil
}

func (m *ServiceNodesBareMetalType) GetExternalInterface() *InterfaceDetails {
	if m != nil {
		return m.ExternalInterface
	}
	return nil
}

func (m *ServiceNodesBareMetalType) GetBmVirtualCpuCount() BMNodeVirtualCpuCount {
	if m != nil {
		return m.BmVirtualCpuCount
	}
	return BM_4_VCPU
}

func (m *ServiceNodesBareMetalType) GetBmNodeMemorySize() BMNodeMemorySize {
	if m != nil {
		return m.BmNodeMemorySize
	}
	return BM_8_GB_MEMORY
}

// NFV Service specification
//
// x-displayName: "Specification"
// Desired state for NFV Service
type GlobalSpecType struct {
	// External Service Provider
	//
	// x-displayName: "External Service Provider"
	// x-required
	// External Service Provider Configuration which is specific per deployment environment
	//
	// Types that are valid to be assigned to ServiceProviderChoice:
	//	*GlobalSpecType_F5BigIpAwsService
	//	*GlobalSpecType_PaloAltoFwService
	//	*GlobalSpecType_F5BigIpBareMetalType
	ServiceProviderChoice isGlobalSpecType_ServiceProviderChoice `protobuf_oneof:"service_provider_choice"`
	// HTTPS based Management of Nodes
	//
	// x-displayName: "HTTPS Based Management of Nodes"
	// x-required
	// HTTPS based Management of nodes configuration
	//
	// Types that are valid to be assigned to HttpManagementChoice:
	//	*GlobalSpecType_DisableHttpsManagement
	//	*GlobalSpecType_HttpsManagement
	HttpManagementChoice isGlobalSpecType_HttpManagementChoice `protobuf_oneof:"http_management_choice"`
	// SSH based management of nodes
	//
	// x-displayName: "SSH based management of nodes"
	// x-required
	// SSH based management of nodes
	//
	// Types that are valid to be assigned to SshManagementChoice:
	//	*GlobalSpecType_DisableSshAccess
	//	*GlobalSpecType_EnabledSshAccess
	SshManagementChoice isGlobalSpecType_SshManagementChoice `protobuf_oneof:"ssh_management_choice"`
	// service choice
	//
	// x-displayName: "Select Service Type"
	// x-required
	// Select NFV service type
	//
	// Types that are valid to be assigned to ServiceTypeChoice:
	//	*GlobalSpecType_EndpointService
	//	*GlobalSpecType_ForwardingService
	//	*GlobalSpecType_TransparentService
	ServiceTypeChoice isGlobalSpecType_ServiceTypeChoice `protobuf_oneof:"service_type_choice"`
	// Node Information
	//
	// x-displayName: "Node Information"
	// Node level information like, ssh command ex strings are populated here
	NodeInfo []*NodeInfo `protobuf:"bytes,16,rep,name=node_info,json=nodeInfo,proto3" json:"node_info,omitempty"`
	// Internal Fleet
	//
	// x-displayName: "Internal Fleet"
	// Fleet for corresponding cloud site
	Fleet []*schema.ObjectRefType `protobuf:"bytes,1000,rep,name=fleet,proto3" json:"fleet,omitempty"`
	// Internal Cloud Credentials
	//
	// x-displayName: "Internal Cloud Credentials"
	// Cloud Credentials for corresponding cloud site
	CloudCredentials []*schema.ObjectRefType `protobuf:"bytes,1001,rep,name=cloud_credentials,json=cloudCredentials,proto3" json:"cloud_credentials,omitempty"`
	// Reference to terraform parameters
	//
	// x-displayName: "Terraform Parameters"
	// Reference to terraform parameters object
	TfParams []*schema.ObjectRefType `protobuf:"bytes,1002,rep,name=tf_params,json=tfParams,proto3" json:"tf_params,omitempty"`
	// Reference to policy set
	//
	// x-displayName: "Reference to policy set"
	// policy set that is internally converted from traffic selector choice
	PolicySet []*schema.ObjectRefType `protobuf:"bytes,1003,rep,name=policy_set,json=policySet,proto3" json:"policy_set,omitempty"`
	// Inside VIP
	//
	// x-displayName: "Inside VIP"
	// x-example: "10.1.2.6/32"
	// VIP address resolved for the inside VIP
	InsideVip string `protobuf:"bytes,1004,opt,name=inside_vip,json=insideVip,proto3" json:"inside_vip,omitempty"`
	// Reference to origin pool for https management
	//
	// x-displayName: "Reference to origin pool for https management"
	// policy set that is internally converted from traffic selector choice
	OriginPool []*schema.ObjectRefType `protobuf:"bytes,1005,rep,name=origin_pool,json=originPool,proto3" json:"origin_pool,omitempty"`
	// Reference to endpoint references per node
	//
	// x-displayName: "Reference to endpoint references per node"
	// Internally used for resolve endpoint ip for management http lb.
	ManagementEndpointRefs []*EndpointRefType `protobuf:"bytes,1006,rep,name=management_endpoint_refs,json=managementEndpointRefs,proto3" json:"management_endpoint_refs,omitempty"`
	// External NLB Info
	//
	// x-displayName: "Properties for External NLB"
	// Internally used for creating external nlb.
	ExternalNlbInfo *ExternalNLBInfo `protobuf:"bytes,1008,opt,name=external_nlb_info,json=externalNlbInfo,proto3" json:"external_nlb_info,omitempty"`
	// view_internal
	//
	// x-displayName: "View Internal"
	// Reference to view internal object
	ViewInternal *views.ObjectRefType `protobuf:"bytes,2000,opt,name=view_internal,json=viewInternal,proto3" json:"view_internal,omitempty"`
	// Suggested Commands for External Service
	//
	// x-displayName: "Suggested Commands for External Service"
	// List of commands which users can execute on the local external service. This is valid only for PAN VmSeries Firewall
	Commands []*SuggestedCommands `protobuf:"bytes,1009,rep,name=commands,proto3" json:"commands,omitempty"`
	// Site Reference
	//
	// x-displayName: "Site Reference"
	// x-required
	// A site direct reference, for internal use
	SiteRefs []*schema.ObjectRefType `protobuf:"bytes,1010,rep,name=site_refs,json=siteRefs,proto3" json:"site_refs,omitempty"`
	// Reference to k8s manifest views
	//
	// x-displayName: "Kubernetes Manifest Parameters"
	// Reference to k8s manifest parameters views
	K8SManifestParams []*schema.ObjectRefType `protobuf:"bytes,1012,rep,name=k8s_manifest_params,json=k8sManifestParams,proto3" json:"k8s_manifest_params,omitempty"`
	// Field to store the Service Type of the NFV service.
	//
	// x-displayName: "Service Type"
	// x-example: "BIG-IP APM"
	// Field indicating the service type which created this NFV object, for internal use. By default it is None, this value need to be set when NFV object is created
	ServiceType ServiceType `protobuf:"varint,1013,opt,name=service_type,json=serviceType,proto3,enum=ves.io.schema.nfv_service.ServiceType" json:"service_type,omitempty"`
	// finalizer_timestamp
	//
	// x-displayName: "Finalizer Timestamp"
	// Finalizer Timestamp is set to current_time when User deletes the NFV object from the console.
	// UI keeps polling finalizer_timestamp. When (current_time - finalizer_timestamp) > 30 minutes, user is allowed to Retry/Force-Delete the NFV service.
	FinalizerTimestamp *types.Timestamp `protobuf:"bytes,1014,opt,name=finalizer_timestamp,json=finalizerTimestamp,proto3" json:"finalizer_timestamp,omitempty"`
	// force_delete
	//
	// x-displayName: "Force Delete"
	// This flag is set when User deletes NFV object from the console and the underlying AWS TGW site is in FAILED state.
	// UI enables FORCE DELETE action on the console if force_delete flag is set to TRUE
	ForceDelete bool `protobuf:"varint,1015,opt,name=force_delete,json=forceDelete,proto3" json:"force_delete,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04d33a158d31df9, []int{23}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

type isGlobalSpecType_ServiceProviderChoice interface {
	isGlobalSpecType_ServiceProviderChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_HttpManagementChoice interface {
	isGlobalSpecType_HttpManagementChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_SshManagementChoice interface {
	isGlobalSpecType_SshManagementChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_ServiceTypeChoice interface {
	isGlobalSpecType_ServiceTypeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_F5BigIpAwsService struct {
	F5BigIpAwsService *F5BigIpAWSType `protobuf:"bytes,10,opt,name=f5_big_ip_aws_service,json=f5BigIpAwsService,proto3,oneof" json:"f5_big_ip_aws_service,omitempty"`
}
type GlobalSpecType_PaloAltoFwService struct {
	PaloAltoFwService *PaloAltoFWAWSType `protobuf:"bytes,3,opt,name=palo_alto_fw_service,json=paloAltoFwService,proto3,oneof" json:"palo_alto_fw_service,omitempty"`
}
type GlobalSpecType_F5BigIpBareMetalType struct {
	F5BigIpBareMetalType *F5BigIpAppStackBareMetalType `protobuf:"bytes,15,opt,name=f5_big_ip_bare_metal_type,json=f5BigIpBareMetalType,proto3,oneof" json:"f5_big_ip_bare_metal_type,omitempty"`
}
type GlobalSpecType_DisableHttpsManagement struct {
	DisableHttpsManagement *schema.Empty `protobuf:"bytes,5,opt,name=disable_https_management,json=disableHttpsManagement,proto3,oneof" json:"disable_https_management,omitempty"`
}
type GlobalSpecType_HttpsManagement struct {
	HttpsManagement *ServiceHttpsManagementType `protobuf:"bytes,6,opt,name=https_management,json=httpsManagement,proto3,oneof" json:"https_management,omitempty"`
}
type GlobalSpecType_DisableSshAccess struct {
	DisableSshAccess *schema.Empty `protobuf:"bytes,13,opt,name=disable_ssh_access,json=disableSshAccess,proto3,oneof" json:"disable_ssh_access,omitempty"`
}
type GlobalSpecType_EnabledSshAccess struct {
	EnabledSshAccess *SSHManagementType `protobuf:"bytes,14,opt,name=enabled_ssh_access,json=enabledSshAccess,proto3,oneof" json:"enabled_ssh_access,omitempty"`
}
type GlobalSpecType_EndpointService struct {
	EndpointService *EndpointServiceType `protobuf:"bytes,8,opt,name=endpoint_service,json=endpointService,proto3,oneof" json:"endpoint_service,omitempty"`
}
type GlobalSpecType_ForwardingService struct {
	ForwardingService *ForwardingServiceType `protobuf:"bytes,9,opt,name=forwarding_service,json=forwardingService,proto3,oneof" json:"forwarding_service,omitempty"`
}
type GlobalSpecType_TransparentService struct {
	TransparentService *schema.Empty `protobuf:"bytes,11,opt,name=transparent_service,json=transparentService,proto3,oneof" json:"transparent_service,omitempty"`
}

func (*GlobalSpecType_F5BigIpAwsService) isGlobalSpecType_ServiceProviderChoice()     {}
func (*GlobalSpecType_PaloAltoFwService) isGlobalSpecType_ServiceProviderChoice()     {}
func (*GlobalSpecType_F5BigIpBareMetalType) isGlobalSpecType_ServiceProviderChoice()  {}
func (*GlobalSpecType_DisableHttpsManagement) isGlobalSpecType_HttpManagementChoice() {}
func (*GlobalSpecType_HttpsManagement) isGlobalSpecType_HttpManagementChoice()        {}
func (*GlobalSpecType_DisableSshAccess) isGlobalSpecType_SshManagementChoice()        {}
func (*GlobalSpecType_EnabledSshAccess) isGlobalSpecType_SshManagementChoice()        {}
func (*GlobalSpecType_EndpointService) isGlobalSpecType_ServiceTypeChoice()           {}
func (*GlobalSpecType_ForwardingService) isGlobalSpecType_ServiceTypeChoice()         {}
func (*GlobalSpecType_TransparentService) isGlobalSpecType_ServiceTypeChoice()        {}

func (m *GlobalSpecType) GetServiceProviderChoice() isGlobalSpecType_ServiceProviderChoice {
	if m != nil {
		return m.ServiceProviderChoice
	}
	return nil
}
func (m *GlobalSpecType) GetHttpManagementChoice() isGlobalSpecType_HttpManagementChoice {
	if m != nil {
		return m.HttpManagementChoice
	}
	return nil
}
func (m *GlobalSpecType) GetSshManagementChoice() isGlobalSpecType_SshManagementChoice {
	if m != nil {
		return m.SshManagementChoice
	}
	return nil
}
func (m *GlobalSpecType) GetServiceTypeChoice() isGlobalSpecType_ServiceTypeChoice {
	if m != nil {
		return m.ServiceTypeChoice
	}
	return nil
}

func (m *GlobalSpecType) GetF5BigIpAwsService() *F5BigIpAWSType {
	if x, ok := m.GetServiceProviderChoice().(*GlobalSpecType_F5BigIpAwsService); ok {
		return x.F5BigIpAwsService
	}
	return nil
}

func (m *GlobalSpecType) GetPaloAltoFwService() *PaloAltoFWAWSType {
	if x, ok := m.GetServiceProviderChoice().(*GlobalSpecType_PaloAltoFwService); ok {
		return x.PaloAltoFwService
	}
	return nil
}

func (m *GlobalSpecType) GetF5BigIpBareMetalType() *F5BigIpAppStackBareMetalType {
	if x, ok := m.GetServiceProviderChoice().(*GlobalSpecType_F5BigIpBareMetalType); ok {
		return x.F5BigIpBareMetalType
	}
	return nil
}

func (m *GlobalSpecType) GetDisableHttpsManagement() *schema.Empty {
	if x, ok := m.GetHttpManagementChoice().(*GlobalSpecType_DisableHttpsManagement); ok {
		return x.DisableHttpsManagement
	}
	return nil
}

func (m *GlobalSpecType) GetHttpsManagement() *ServiceHttpsManagementType {
	if x, ok := m.GetHttpManagementChoice().(*GlobalSpecType_HttpsManagement); ok {
		return x.HttpsManagement
	}
	return nil
}

func (m *GlobalSpecType) GetDisableSshAccess() *schema.Empty {
	if x, ok := m.GetSshManagementChoice().(*GlobalSpecType_DisableSshAccess); ok {
		return x.DisableSshAccess
	}
	return nil
}

func (m *GlobalSpecType) GetEnabledSshAccess() *SSHManagementType {
	if x, ok := m.GetSshManagementChoice().(*GlobalSpecType_EnabledSshAccess); ok {
		return x.EnabledSshAccess
	}
	return nil
}

func (m *GlobalSpecType) GetEndpointService() *EndpointServiceType {
	if x, ok := m.GetServiceTypeChoice().(*GlobalSpecType_EndpointService); ok {
		return x.EndpointService
	}
	return nil
}

func (m *GlobalSpecType) GetForwardingService() *ForwardingServiceType {
	if x, ok := m.GetServiceTypeChoice().(*GlobalSpecType_ForwardingService); ok {
		return x.ForwardingService
	}
	return nil
}

func (m *GlobalSpecType) GetTransparentService() *schema.Empty {
	if x, ok := m.GetServiceTypeChoice().(*GlobalSpecType_TransparentService); ok {
		return x.TransparentService
	}
	return nil
}

func (m *GlobalSpecType) GetNodeInfo() []*NodeInfo {
	if m != nil {
		return m.NodeInfo
	}
	return nil
}

func (m *GlobalSpecType) GetFleet() []*schema.ObjectRefType {
	if m != nil {
		return m.Fleet
	}
	return nil
}

func (m *GlobalSpecType) GetCloudCredentials() []*schema.ObjectRefType {
	if m != nil {
		return m.CloudCredentials
	}
	return nil
}

func (m *GlobalSpecType) GetTfParams() []*schema.ObjectRefType {
	if m != nil {
		return m.TfParams
	}
	return nil
}

func (m *GlobalSpecType) GetPolicySet() []*schema.ObjectRefType {
	if m != nil {
		return m.PolicySet
	}
	return nil
}

func (m *GlobalSpecType) GetInsideVip() string {
	if m != nil {
		return m.InsideVip
	}
	return ""
}

func (m *GlobalSpecType) GetOriginPool() []*schema.ObjectRefType {
	if m != nil {
		return m.OriginPool
	}
	return nil
}

func (m *GlobalSpecType) GetManagementEndpointRefs() []*EndpointRefType {
	if m != nil {
		return m.ManagementEndpointRefs
	}
	return nil
}

func (m *GlobalSpecType) GetExternalNlbInfo() *ExternalNLBInfo {
	if m != nil {
		return m.ExternalNlbInfo
	}
	return nil
}

func (m *GlobalSpecType) GetViewInternal() *views.ObjectRefType {
	if m != nil {
		return m.ViewInternal
	}
	return nil
}

func (m *GlobalSpecType) GetCommands() []*SuggestedCommands {
	if m != nil {
		return m.Commands
	}
	return nil
}

func (m *GlobalSpecType) GetSiteRefs() []*schema.ObjectRefType {
	if m != nil {
		return m.SiteRefs
	}
	return nil
}

func (m *GlobalSpecType) GetK8SManifestParams() []*schema.ObjectRefType {
	if m != nil {
		return m.K8SManifestParams
	}
	return nil
}

func (m *GlobalSpecType) GetServiceType() ServiceType {
	if m != nil {
		return m.ServiceType
	}
	return NONE
}

func (m *GlobalSpecType) GetFinalizerTimestamp() *types.Timestamp {
	if m != nil {
		return m.FinalizerTimestamp
	}
	return nil
}

func (m *GlobalSpecType) GetForceDelete() bool {
	if m != nil {
		return m.ForceDelete
	}
	return false
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GlobalSpecType_F5BigIpAwsService)(nil),
		(*GlobalSpecType_PaloAltoFwService)(nil),
		(*GlobalSpecType_F5BigIpBareMetalType)(nil),
		(*GlobalSpecType_DisableHttpsManagement)(nil),
		(*GlobalSpecType_HttpsManagement)(nil),
		(*GlobalSpecType_DisableSshAccess)(nil),
		(*GlobalSpecType_EnabledSshAccess)(nil),
		(*GlobalSpecType_EndpointService)(nil),
		(*GlobalSpecType_ForwardingService)(nil),
		(*GlobalSpecType_TransparentService)(nil),
	}
}

// Suggested Commands for External Service
//
// x-displayName: "Suggested Commands for External Service"
// List of commands which users can execute on the local external service. This is valid only for PAN VmSeries Firewall
type SuggestedCommands struct {
	// Example command
	//
	// x-displayName: "Example command"
	// Example command. Which user can run it locally on the external service
	Command string `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	// Warning
	//
	// x-displayName: "Warning (if any)"
	// Example warning: It is imperative to ensure that all interfaces and sub-interfaces are properly configured and operational.
	Warning string `protobuf:"bytes,3,opt,name=warning,proto3" json:"warning,omitempty"`
	// Description of the command
	//
	// x-displayName: "Description of the command"
	// Description of the command, which explains in details on how it can be used based on the usecase.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *SuggestedCommands) Reset()      { *m = SuggestedCommands{} }
func (*SuggestedCommands) ProtoMessage() {}
func (*SuggestedCommands) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04d33a158d31df9, []int{24}
}
func (m *SuggestedCommands) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SuggestedCommands) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SuggestedCommands) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SuggestedCommands.Merge(m, src)
}
func (m *SuggestedCommands) XXX_Size() int {
	return m.Size()
}
func (m *SuggestedCommands) XXX_DiscardUnknown() {
	xxx_messageInfo_SuggestedCommands.DiscardUnknown(m)
}

var xxx_messageInfo_SuggestedCommands proto.InternalMessageInfo

func (m *SuggestedCommands) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *SuggestedCommands) GetWarning() string {
	if m != nil {
		return m.Warning
	}
	return ""
}

func (m *SuggestedCommands) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

// EndpointRefType
//
// x-displayName: "Endpoint Ref type"
// A reference from a node to a endpoint.
type EndpointRefType struct {
	// Node Name
	//
	// x-displayName: "Node Name"
	// x-example: "node1"
	// Node Name will be used to assign as hostname to the service
	NodeName string `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// Reference to endpoint for https management
	//
	// x-displayName: "Reference to endpoint for https management"
	// policy set that is internally converted from traffic selector choice
	Endpoint []*schema.ObjectRefType `protobuf:"bytes,1005,rep,name=endpoint,proto3" json:"endpoint,omitempty"`
}

func (m *EndpointRefType) Reset()      { *m = EndpointRefType{} }
func (*EndpointRefType) ProtoMessage() {}
func (*EndpointRefType) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04d33a158d31df9, []int{25}
}
func (m *EndpointRefType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndpointRefType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EndpointRefType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndpointRefType.Merge(m, src)
}
func (m *EndpointRefType) XXX_Size() int {
	return m.Size()
}
func (m *EndpointRefType) XXX_DiscardUnknown() {
	xxx_messageInfo_EndpointRefType.DiscardUnknown(m)
}

var xxx_messageInfo_EndpointRefType proto.InternalMessageInfo

func (m *EndpointRefType) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *EndpointRefType) GetEndpoint() []*schema.ObjectRefType {
	if m != nil {
		return m.Endpoint
	}
	return nil
}

// ExternalNLBInfo
//
// x-displayName: "External NLB Info"
// Properties needed to create external NLB
type ExternalNLBInfo struct {
	// VPC ID
	//
	// x-displayName: "VPC ID"
	// VPC ID
	VpcId string `protobuf:"bytes,1,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
	// Region
	//
	// x-displayName: "Region"
	// Region
	Region string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	// AWS Subnet Info
	//
	// x-displayName: "AWS Subnet Info"
	// AWS Subnet Info
	AwsSubnetInfo []*views.AWSSubnetIdsType `protobuf:"bytes,3,rep,name=aws_subnet_info,json=awsSubnetInfo,proto3" json:"aws_subnet_info,omitempty"`
}

func (m *ExternalNLBInfo) Reset()      { *m = ExternalNLBInfo{} }
func (*ExternalNLBInfo) ProtoMessage() {}
func (*ExternalNLBInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04d33a158d31df9, []int{26}
}
func (m *ExternalNLBInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExternalNLBInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ExternalNLBInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExternalNLBInfo.Merge(m, src)
}
func (m *ExternalNLBInfo) XXX_Size() int {
	return m.Size()
}
func (m *ExternalNLBInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ExternalNLBInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ExternalNLBInfo proto.InternalMessageInfo

func (m *ExternalNLBInfo) GetVpcId() string {
	if m != nil {
		return m.VpcId
	}
	return ""
}

func (m *ExternalNLBInfo) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *ExternalNLBInfo) GetAwsSubnetInfo() []*views.AWSSubnetIdsType {
	if m != nil {
		return m.AwsSubnetInfo
	}
	return nil
}

// ReplaceEndpoint Service
//
// x-displayName: "Replace Endpoint Service"
// Endpoint Service is a type of NFV service where the packets are destined to NFV and service modifies the destination with
// a new destination address
type EndpointServiceReplaceType struct {
	// Outside VIP
	//
	// x-displayName: "Outside VIP"
	// x-required
	// Advertise on site local network
	//
	// Types that are valid to be assigned to ExternalVipChoice:
	//	*EndpointServiceReplaceType_DisableAdvertiseOnSloIp
	//	*EndpointServiceReplaceType_AdvertiseOnSloIp
	//	*EndpointServiceReplaceType_AdvertiseOnSloIpExternal
	ExternalVipChoice isEndpointServiceReplaceType_ExternalVipChoice `protobuf_oneof:"external_vip_choice"`
	//  TCP Port Choice
	//
	// x-displayName: "TCP Port Choice"
	// x-required
	// Select TCP ports of this endpoint service
	//
	// Types that are valid to be assigned to TcpPortChoice:
	//	*EndpointServiceReplaceType_DefaultTcpPorts
	//	*EndpointServiceReplaceType_HttpPort
	//	*EndpointServiceReplaceType_HttpsPort
	//	*EndpointServiceReplaceType_CustomTcpPorts
	//	*EndpointServiceReplaceType_NoTcpPorts
	TcpPortChoice isEndpointServiceReplaceType_TcpPortChoice `protobuf_oneof:"tcp_port_choice"`
	//  UDP Port Choice
	//
	// x-displayName: "UDP Listen Port Choice"
	// x-required
	// Select UDP ports of this endpoint_service
	//
	// Types that are valid to be assigned to UdpPortChoice:
	//	*EndpointServiceReplaceType_NoUdpPorts
	//	*EndpointServiceReplaceType_CustomUdpPorts
	UdpPortChoice isEndpointServiceReplaceType_UdpPortChoice `protobuf_oneof:"udp_port_choice"`
}

func (m *EndpointServiceReplaceType) Reset()      { *m = EndpointServiceReplaceType{} }
func (*EndpointServiceReplaceType) ProtoMessage() {}
func (*EndpointServiceReplaceType) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04d33a158d31df9, []int{27}
}
func (m *EndpointServiceReplaceType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndpointServiceReplaceType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EndpointServiceReplaceType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndpointServiceReplaceType.Merge(m, src)
}
func (m *EndpointServiceReplaceType) XXX_Size() int {
	return m.Size()
}
func (m *EndpointServiceReplaceType) XXX_DiscardUnknown() {
	xxx_messageInfo_EndpointServiceReplaceType.DiscardUnknown(m)
}

var xxx_messageInfo_EndpointServiceReplaceType proto.InternalMessageInfo

type isEndpointServiceReplaceType_ExternalVipChoice interface {
	isEndpointServiceReplaceType_ExternalVipChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isEndpointServiceReplaceType_TcpPortChoice interface {
	isEndpointServiceReplaceType_TcpPortChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isEndpointServiceReplaceType_UdpPortChoice interface {
	isEndpointServiceReplaceType_UdpPortChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type EndpointServiceReplaceType_DisableAdvertiseOnSloIp struct {
	DisableAdvertiseOnSloIp *schema.Empty `protobuf:"bytes,19,opt,name=disable_advertise_on_slo_ip,json=disableAdvertiseOnSloIp,proto3,oneof" json:"disable_advertise_on_slo_ip,omitempty"`
}
type EndpointServiceReplaceType_AdvertiseOnSloIp struct {
	AdvertiseOnSloIp *schema.Empty `protobuf:"bytes,20,opt,name=advertise_on_slo_ip,json=advertiseOnSloIp,proto3,oneof" json:"advertise_on_slo_ip,omitempty"`
}
type EndpointServiceReplaceType_AdvertiseOnSloIpExternal struct {
	AdvertiseOnSloIpExternal *schema.Empty `protobuf:"bytes,21,opt,name=advertise_on_slo_ip_external,json=advertiseOnSloIpExternal,proto3,oneof" json:"advertise_on_slo_ip_external,omitempty"`
}
type EndpointServiceReplaceType_DefaultTcpPorts struct {
	DefaultTcpPorts *schema.Empty `protobuf:"bytes,10,opt,name=default_tcp_ports,json=defaultTcpPorts,proto3,oneof" json:"default_tcp_ports,omitempty"`
}
type EndpointServiceReplaceType_HttpPort struct {
	HttpPort *schema.Empty `protobuf:"bytes,11,opt,name=http_port,json=httpPort,proto3,oneof" json:"http_port,omitempty"`
}
type EndpointServiceReplaceType_HttpsPort struct {
	HttpsPort *schema.Empty `protobuf:"bytes,12,opt,name=https_port,json=httpsPort,proto3,oneof" json:"https_port,omitempty"`
}
type EndpointServiceReplaceType_CustomTcpPorts struct {
	CustomTcpPorts *schema.PortRangesType `protobuf:"bytes,13,opt,name=custom_tcp_ports,json=customTcpPorts,proto3,oneof" json:"custom_tcp_ports,omitempty"`
}
type EndpointServiceReplaceType_NoTcpPorts struct {
	NoTcpPorts *schema.Empty `protobuf:"bytes,14,opt,name=no_tcp_ports,json=noTcpPorts,proto3,oneof" json:"no_tcp_ports,omitempty"`
}
type EndpointServiceReplaceType_NoUdpPorts struct {
	NoUdpPorts *schema.Empty `protobuf:"bytes,16,opt,name=no_udp_ports,json=noUdpPorts,proto3,oneof" json:"no_udp_ports,omitempty"`
}
type EndpointServiceReplaceType_CustomUdpPorts struct {
	CustomUdpPorts *schema.PortRangesType `protobuf:"bytes,17,opt,name=custom_udp_ports,json=customUdpPorts,proto3,oneof" json:"custom_udp_ports,omitempty"`
}

func (*EndpointServiceReplaceType_DisableAdvertiseOnSloIp) isEndpointServiceReplaceType_ExternalVipChoice() {
}
func (*EndpointServiceReplaceType_AdvertiseOnSloIp) isEndpointServiceReplaceType_ExternalVipChoice() {
}
func (*EndpointServiceReplaceType_AdvertiseOnSloIpExternal) isEndpointServiceReplaceType_ExternalVipChoice() {
}
func (*EndpointServiceReplaceType_DefaultTcpPorts) isEndpointServiceReplaceType_TcpPortChoice() {}
func (*EndpointServiceReplaceType_HttpPort) isEndpointServiceReplaceType_TcpPortChoice()        {}
func (*EndpointServiceReplaceType_HttpsPort) isEndpointServiceReplaceType_TcpPortChoice()       {}
func (*EndpointServiceReplaceType_CustomTcpPorts) isEndpointServiceReplaceType_TcpPortChoice()  {}
func (*EndpointServiceReplaceType_NoTcpPorts) isEndpointServiceReplaceType_TcpPortChoice()      {}
func (*EndpointServiceReplaceType_NoUdpPorts) isEndpointServiceReplaceType_UdpPortChoice()      {}
func (*EndpointServiceReplaceType_CustomUdpPorts) isEndpointServiceReplaceType_UdpPortChoice()  {}

func (m *EndpointServiceReplaceType) GetExternalVipChoice() isEndpointServiceReplaceType_ExternalVipChoice {
	if m != nil {
		return m.ExternalVipChoice
	}
	return nil
}
func (m *EndpointServiceReplaceType) GetTcpPortChoice() isEndpointServiceReplaceType_TcpPortChoice {
	if m != nil {
		return m.TcpPortChoice
	}
	return nil
}
func (m *EndpointServiceReplaceType) GetUdpPortChoice() isEndpointServiceReplaceType_UdpPortChoice {
	if m != nil {
		return m.UdpPortChoice
	}
	return nil
}

func (m *EndpointServiceReplaceType) GetDisableAdvertiseOnSloIp() *schema.Empty {
	if x, ok := m.GetExternalVipChoice().(*EndpointServiceReplaceType_DisableAdvertiseOnSloIp); ok {
		return x.DisableAdvertiseOnSloIp
	}
	return nil
}

func (m *EndpointServiceReplaceType) GetAdvertiseOnSloIp() *schema.Empty {
	if x, ok := m.GetExternalVipChoice().(*EndpointServiceReplaceType_AdvertiseOnSloIp); ok {
		return x.AdvertiseOnSloIp
	}
	return nil
}

func (m *EndpointServiceReplaceType) GetAdvertiseOnSloIpExternal() *schema.Empty {
	if x, ok := m.GetExternalVipChoice().(*EndpointServiceReplaceType_AdvertiseOnSloIpExternal); ok {
		return x.AdvertiseOnSloIpExternal
	}
	return nil
}

func (m *EndpointServiceReplaceType) GetDefaultTcpPorts() *schema.Empty {
	if x, ok := m.GetTcpPortChoice().(*EndpointServiceReplaceType_DefaultTcpPorts); ok {
		return x.DefaultTcpPorts
	}
	return nil
}

func (m *EndpointServiceReplaceType) GetHttpPort() *schema.Empty {
	if x, ok := m.GetTcpPortChoice().(*EndpointServiceReplaceType_HttpPort); ok {
		return x.HttpPort
	}
	return nil
}

func (m *EndpointServiceReplaceType) GetHttpsPort() *schema.Empty {
	if x, ok := m.GetTcpPortChoice().(*EndpointServiceReplaceType_HttpsPort); ok {
		return x.HttpsPort
	}
	return nil
}

func (m *EndpointServiceReplaceType) GetCustomTcpPorts() *schema.PortRangesType {
	if x, ok := m.GetTcpPortChoice().(*EndpointServiceReplaceType_CustomTcpPorts); ok {
		return x.CustomTcpPorts
	}
	return nil
}

func (m *EndpointServiceReplaceType) GetNoTcpPorts() *schema.Empty {
	if x, ok := m.GetTcpPortChoice().(*EndpointServiceReplaceType_NoTcpPorts); ok {
		return x.NoTcpPorts
	}
	return nil
}

func (m *EndpointServiceReplaceType) GetNoUdpPorts() *schema.Empty {
	if x, ok := m.GetUdpPortChoice().(*EndpointServiceReplaceType_NoUdpPorts); ok {
		return x.NoUdpPorts
	}
	return nil
}

func (m *EndpointServiceReplaceType) GetCustomUdpPorts() *schema.PortRangesType {
	if x, ok := m.GetUdpPortChoice().(*EndpointServiceReplaceType_CustomUdpPorts); ok {
		return x.CustomUdpPorts
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*EndpointServiceReplaceType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*EndpointServiceReplaceType_DisableAdvertiseOnSloIp)(nil),
		(*EndpointServiceReplaceType_AdvertiseOnSloIp)(nil),
		(*EndpointServiceReplaceType_AdvertiseOnSloIpExternal)(nil),
		(*EndpointServiceReplaceType_DefaultTcpPorts)(nil),
		(*EndpointServiceReplaceType_HttpPort)(nil),
		(*EndpointServiceReplaceType_HttpsPort)(nil),
		(*EndpointServiceReplaceType_CustomTcpPorts)(nil),
		(*EndpointServiceReplaceType_NoTcpPorts)(nil),
		(*EndpointServiceReplaceType_NoUdpPorts)(nil),
		(*EndpointServiceReplaceType_CustomUdpPorts)(nil),
	}
}

// Per Node Information
//
// x-displayName: "Per Node Information"
// Per Node Information, populated after NFV instances are deployed
type NodeInfo struct {
	// SSH Command
	//
	// x-displayName: "SSH Command Help String"
	// Example ssh command string for users to ssh into individual node
	SshCommand string `protobuf:"bytes,1,opt,name=ssh_command,json=sshCommand,proto3" json:"ssh_command,omitempty"`
}

func (m *NodeInfo) Reset()      { *m = NodeInfo{} }
func (*NodeInfo) ProtoMessage() {}
func (*NodeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04d33a158d31df9, []int{28}
}
func (m *NodeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeInfo.Merge(m, src)
}
func (m *NodeInfo) XXX_Size() int {
	return m.Size()
}
func (m *NodeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NodeInfo proto.InternalMessageInfo

func (m *NodeInfo) GetSshCommand() string {
	if m != nil {
		return m.SshCommand
	}
	return ""
}

// Create NFV Service
//
// x-displayName: "Create NFV Service"
// Creates a new NFV service with configured parameters
type CreateSpecType struct {
	// Types that are valid to be assigned to ServiceProviderChoice:
	//	*CreateSpecType_F5BigIpAwsService
	//	*CreateSpecType_PaloAltoFwService
	ServiceProviderChoice isCreateSpecType_ServiceProviderChoice `protobuf_oneof:"service_provider_choice"`
	// Types that are valid to be assigned to HttpManagementChoice:
	//	*CreateSpecType_DisableHttpsManagement
	//	*CreateSpecType_HttpsManagement
	HttpManagementChoice isCreateSpecType_HttpManagementChoice `protobuf_oneof:"http_management_choice"`
	// Types that are valid to be assigned to SshManagementChoice:
	//	*CreateSpecType_DisableSshAccess
	//	*CreateSpecType_EnabledSshAccess
	SshManagementChoice isCreateSpecType_SshManagementChoice `protobuf_oneof:"ssh_management_choice"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04d33a158d31df9, []int{29}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

type isCreateSpecType_ServiceProviderChoice interface {
	isCreateSpecType_ServiceProviderChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_HttpManagementChoice interface {
	isCreateSpecType_HttpManagementChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_SshManagementChoice interface {
	isCreateSpecType_SshManagementChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSpecType_F5BigIpAwsService struct {
	F5BigIpAwsService *F5BigIpAWSType `protobuf:"bytes,10,opt,name=f5_big_ip_aws_service,json=f5BigIpAwsService,proto3,oneof" json:"f5_big_ip_aws_service,omitempty"`
}
type CreateSpecType_PaloAltoFwService struct {
	PaloAltoFwService *PaloAltoFWAWSType `protobuf:"bytes,3,opt,name=palo_alto_fw_service,json=paloAltoFwService,proto3,oneof" json:"palo_alto_fw_service,omitempty"`
}
type CreateSpecType_DisableHttpsManagement struct {
	DisableHttpsManagement *schema.Empty `protobuf:"bytes,5,opt,name=disable_https_management,json=disableHttpsManagement,proto3,oneof" json:"disable_https_management,omitempty"`
}
type CreateSpecType_HttpsManagement struct {
	HttpsManagement *ServiceHttpsManagementType `protobuf:"bytes,6,opt,name=https_management,json=httpsManagement,proto3,oneof" json:"https_management,omitempty"`
}
type CreateSpecType_DisableSshAccess struct {
	DisableSshAccess *schema.Empty `protobuf:"bytes,13,opt,name=disable_ssh_access,json=disableSshAccess,proto3,oneof" json:"disable_ssh_access,omitempty"`
}
type CreateSpecType_EnabledSshAccess struct {
	EnabledSshAccess *SSHManagementType `protobuf:"bytes,14,opt,name=enabled_ssh_access,json=enabledSshAccess,proto3,oneof" json:"enabled_ssh_access,omitempty"`
}

func (*CreateSpecType_F5BigIpAwsService) isCreateSpecType_ServiceProviderChoice()     {}
func (*CreateSpecType_PaloAltoFwService) isCreateSpecType_ServiceProviderChoice()     {}
func (*CreateSpecType_DisableHttpsManagement) isCreateSpecType_HttpManagementChoice() {}
func (*CreateSpecType_HttpsManagement) isCreateSpecType_HttpManagementChoice()        {}
func (*CreateSpecType_DisableSshAccess) isCreateSpecType_SshManagementChoice()        {}
func (*CreateSpecType_EnabledSshAccess) isCreateSpecType_SshManagementChoice()        {}

func (m *CreateSpecType) GetServiceProviderChoice() isCreateSpecType_ServiceProviderChoice {
	if m != nil {
		return m.ServiceProviderChoice
	}
	return nil
}
func (m *CreateSpecType) GetHttpManagementChoice() isCreateSpecType_HttpManagementChoice {
	if m != nil {
		return m.HttpManagementChoice
	}
	return nil
}
func (m *CreateSpecType) GetSshManagementChoice() isCreateSpecType_SshManagementChoice {
	if m != nil {
		return m.SshManagementChoice
	}
	return nil
}

func (m *CreateSpecType) GetF5BigIpAwsService() *F5BigIpAWSType {
	if x, ok := m.GetServiceProviderChoice().(*CreateSpecType_F5BigIpAwsService); ok {
		return x.F5BigIpAwsService
	}
	return nil
}

func (m *CreateSpecType) GetPaloAltoFwService() *PaloAltoFWAWSType {
	if x, ok := m.GetServiceProviderChoice().(*CreateSpecType_PaloAltoFwService); ok {
		return x.PaloAltoFwService
	}
	return nil
}

func (m *CreateSpecType) GetDisableHttpsManagement() *schema.Empty {
	if x, ok := m.GetHttpManagementChoice().(*CreateSpecType_DisableHttpsManagement); ok {
		return x.DisableHttpsManagement
	}
	return nil
}

func (m *CreateSpecType) GetHttpsManagement() *ServiceHttpsManagementType {
	if x, ok := m.GetHttpManagementChoice().(*CreateSpecType_HttpsManagement); ok {
		return x.HttpsManagement
	}
	return nil
}

func (m *CreateSpecType) GetDisableSshAccess() *schema.Empty {
	if x, ok := m.GetSshManagementChoice().(*CreateSpecType_DisableSshAccess); ok {
		return x.DisableSshAccess
	}
	return nil
}

func (m *CreateSpecType) GetEnabledSshAccess() *SSHManagementType {
	if x, ok := m.GetSshManagementChoice().(*CreateSpecType_EnabledSshAccess); ok {
		return x.EnabledSshAccess
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CreateSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CreateSpecType_F5BigIpAwsService)(nil),
		(*CreateSpecType_PaloAltoFwService)(nil),
		(*CreateSpecType_DisableHttpsManagement)(nil),
		(*CreateSpecType_HttpsManagement)(nil),
		(*CreateSpecType_DisableSshAccess)(nil),
		(*CreateSpecType_EnabledSshAccess)(nil),
	}
}

// Replace NFV Service
//
// x-displayName: "Replace NFV Service"
// Replaces configured NFV Service with new set of parameters
type ReplaceSpecType struct {
	// Types that are valid to be assigned to ServiceProviderChoice:
	//	*ReplaceSpecType_F5BigIpAwsService
	//	*ReplaceSpecType_PaloAltoFwService
	ServiceProviderChoice isReplaceSpecType_ServiceProviderChoice `protobuf_oneof:"service_provider_choice"`
	// Types that are valid to be assigned to HttpManagementChoice:
	//	*ReplaceSpecType_DisableHttpsManagement
	//	*ReplaceSpecType_HttpsManagement
	HttpManagementChoice isReplaceSpecType_HttpManagementChoice `protobuf_oneof:"http_management_choice"`
	// Types that are valid to be assigned to SshManagementChoice:
	//	*ReplaceSpecType_DisableSshAccess
	//	*ReplaceSpecType_EnabledSshAccess
	SshManagementChoice isReplaceSpecType_SshManagementChoice `protobuf_oneof:"ssh_management_choice"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04d33a158d31df9, []int{30}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

type isReplaceSpecType_ServiceProviderChoice interface {
	isReplaceSpecType_ServiceProviderChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_HttpManagementChoice interface {
	isReplaceSpecType_HttpManagementChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_SshManagementChoice interface {
	isReplaceSpecType_SshManagementChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplaceSpecType_F5BigIpAwsService struct {
	F5BigIpAwsService *F5BigIpAWSReplaceType `protobuf:"bytes,10,opt,name=f5_big_ip_aws_service,json=f5BigIpAwsService,proto3,oneof" json:"f5_big_ip_aws_service,omitempty"`
}
type ReplaceSpecType_PaloAltoFwService struct {
	PaloAltoFwService *PaloAltoFWAWSReplaceType `protobuf:"bytes,3,opt,name=palo_alto_fw_service,json=paloAltoFwService,proto3,oneof" json:"palo_alto_fw_service,omitempty"`
}
type ReplaceSpecType_DisableHttpsManagement struct {
	DisableHttpsManagement *schema.Empty `protobuf:"bytes,5,opt,name=disable_https_management,json=disableHttpsManagement,proto3,oneof" json:"disable_https_management,omitempty"`
}
type ReplaceSpecType_HttpsManagement struct {
	HttpsManagement *ServiceHttpsManagementType `protobuf:"bytes,6,opt,name=https_management,json=httpsManagement,proto3,oneof" json:"https_management,omitempty"`
}
type ReplaceSpecType_DisableSshAccess struct {
	DisableSshAccess *schema.Empty `protobuf:"bytes,13,opt,name=disable_ssh_access,json=disableSshAccess,proto3,oneof" json:"disable_ssh_access,omitempty"`
}
type ReplaceSpecType_EnabledSshAccess struct {
	EnabledSshAccess *SSHManagementType `protobuf:"bytes,14,opt,name=enabled_ssh_access,json=enabledSshAccess,proto3,oneof" json:"enabled_ssh_access,omitempty"`
}

func (*ReplaceSpecType_F5BigIpAwsService) isReplaceSpecType_ServiceProviderChoice()     {}
func (*ReplaceSpecType_PaloAltoFwService) isReplaceSpecType_ServiceProviderChoice()     {}
func (*ReplaceSpecType_DisableHttpsManagement) isReplaceSpecType_HttpManagementChoice() {}
func (*ReplaceSpecType_HttpsManagement) isReplaceSpecType_HttpManagementChoice()        {}
func (*ReplaceSpecType_DisableSshAccess) isReplaceSpecType_SshManagementChoice()        {}
func (*ReplaceSpecType_EnabledSshAccess) isReplaceSpecType_SshManagementChoice()        {}

func (m *ReplaceSpecType) GetServiceProviderChoice() isReplaceSpecType_ServiceProviderChoice {
	if m != nil {
		return m.ServiceProviderChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetHttpManagementChoice() isReplaceSpecType_HttpManagementChoice {
	if m != nil {
		return m.HttpManagementChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetSshManagementChoice() isReplaceSpecType_SshManagementChoice {
	if m != nil {
		return m.SshManagementChoice
	}
	return nil
}

func (m *ReplaceSpecType) GetF5BigIpAwsService() *F5BigIpAWSReplaceType {
	if x, ok := m.GetServiceProviderChoice().(*ReplaceSpecType_F5BigIpAwsService); ok {
		return x.F5BigIpAwsService
	}
	return nil
}

func (m *ReplaceSpecType) GetPaloAltoFwService() *PaloAltoFWAWSReplaceType {
	if x, ok := m.GetServiceProviderChoice().(*ReplaceSpecType_PaloAltoFwService); ok {
		return x.PaloAltoFwService
	}
	return nil
}

func (m *ReplaceSpecType) GetDisableHttpsManagement() *schema.Empty {
	if x, ok := m.GetHttpManagementChoice().(*ReplaceSpecType_DisableHttpsManagement); ok {
		return x.DisableHttpsManagement
	}
	return nil
}

func (m *ReplaceSpecType) GetHttpsManagement() *ServiceHttpsManagementType {
	if x, ok := m.GetHttpManagementChoice().(*ReplaceSpecType_HttpsManagement); ok {
		return x.HttpsManagement
	}
	return nil
}

func (m *ReplaceSpecType) GetDisableSshAccess() *schema.Empty {
	if x, ok := m.GetSshManagementChoice().(*ReplaceSpecType_DisableSshAccess); ok {
		return x.DisableSshAccess
	}
	return nil
}

func (m *ReplaceSpecType) GetEnabledSshAccess() *SSHManagementType {
	if x, ok := m.GetSshManagementChoice().(*ReplaceSpecType_EnabledSshAccess); ok {
		return x.EnabledSshAccess
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ReplaceSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ReplaceSpecType_F5BigIpAwsService)(nil),
		(*ReplaceSpecType_PaloAltoFwService)(nil),
		(*ReplaceSpecType_DisableHttpsManagement)(nil),
		(*ReplaceSpecType_HttpsManagement)(nil),
		(*ReplaceSpecType_DisableSshAccess)(nil),
		(*ReplaceSpecType_EnabledSshAccess)(nil),
	}
}

// Get NFV Service
//
// x-displayName: "Get NFV Service"
// Gets NFV Service parameters
type GetSpecType struct {
	// Types that are valid to be assigned to ServiceProviderChoice:
	//	*GetSpecType_F5BigIpAwsService
	//	*GetSpecType_PaloAltoFwService
	ServiceProviderChoice isGetSpecType_ServiceProviderChoice `protobuf_oneof:"service_provider_choice"`
	// Types that are valid to be assigned to HttpManagementChoice:
	//	*GetSpecType_DisableHttpsManagement
	//	*GetSpecType_HttpsManagement
	HttpManagementChoice isGetSpecType_HttpManagementChoice `protobuf_oneof:"http_management_choice"`
	// Types that are valid to be assigned to SshManagementChoice:
	//	*GetSpecType_DisableSshAccess
	//	*GetSpecType_EnabledSshAccess
	SshManagementChoice isGetSpecType_SshManagementChoice `protobuf_oneof:"ssh_management_choice"`
	// Types that are valid to be assigned to ServiceTypeChoice:
	//	*GetSpecType_EndpointService
	//	*GetSpecType_ForwardingService
	//	*GetSpecType_TransparentService
	ServiceTypeChoice  isGetSpecType_ServiceTypeChoice `protobuf_oneof:"service_type_choice"`
	Commands           []*SuggestedCommands            `protobuf:"bytes,1009,rep,name=commands,proto3" json:"commands,omitempty"`
	FinalizerTimestamp *types.Timestamp                `protobuf:"bytes,1014,opt,name=finalizer_timestamp,json=finalizerTimestamp,proto3" json:"finalizer_timestamp,omitempty"`
	ForceDelete        bool                            `protobuf:"varint,1015,opt,name=force_delete,json=forceDelete,proto3" json:"force_delete,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04d33a158d31df9, []int{31}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

type isGetSpecType_ServiceProviderChoice interface {
	isGetSpecType_ServiceProviderChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_HttpManagementChoice interface {
	isGetSpecType_HttpManagementChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_SshManagementChoice interface {
	isGetSpecType_SshManagementChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_ServiceTypeChoice interface {
	isGetSpecType_ServiceTypeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_F5BigIpAwsService struct {
	F5BigIpAwsService *F5BigIpAWSType `protobuf:"bytes,10,opt,name=f5_big_ip_aws_service,json=f5BigIpAwsService,proto3,oneof" json:"f5_big_ip_aws_service,omitempty"`
}
type GetSpecType_PaloAltoFwService struct {
	PaloAltoFwService *PaloAltoFWAWSType `protobuf:"bytes,3,opt,name=palo_alto_fw_service,json=paloAltoFwService,proto3,oneof" json:"palo_alto_fw_service,omitempty"`
}
type GetSpecType_DisableHttpsManagement struct {
	DisableHttpsManagement *schema.Empty `protobuf:"bytes,5,opt,name=disable_https_management,json=disableHttpsManagement,proto3,oneof" json:"disable_https_management,omitempty"`
}
type GetSpecType_HttpsManagement struct {
	HttpsManagement *ServiceHttpsManagementType `protobuf:"bytes,6,opt,name=https_management,json=httpsManagement,proto3,oneof" json:"https_management,omitempty"`
}
type GetSpecType_DisableSshAccess struct {
	DisableSshAccess *schema.Empty `protobuf:"bytes,13,opt,name=disable_ssh_access,json=disableSshAccess,proto3,oneof" json:"disable_ssh_access,omitempty"`
}
type GetSpecType_EnabledSshAccess struct {
	EnabledSshAccess *SSHManagementType `protobuf:"bytes,14,opt,name=enabled_ssh_access,json=enabledSshAccess,proto3,oneof" json:"enabled_ssh_access,omitempty"`
}
type GetSpecType_EndpointService struct {
	EndpointService *EndpointServiceType `protobuf:"bytes,8,opt,name=endpoint_service,json=endpointService,proto3,oneof" json:"endpoint_service,omitempty"`
}
type GetSpecType_ForwardingService struct {
	ForwardingService *ForwardingServiceType `protobuf:"bytes,9,opt,name=forwarding_service,json=forwardingService,proto3,oneof" json:"forwarding_service,omitempty"`
}
type GetSpecType_TransparentService struct {
	TransparentService *schema.Empty `protobuf:"bytes,11,opt,name=transparent_service,json=transparentService,proto3,oneof" json:"transparent_service,omitempty"`
}

func (*GetSpecType_F5BigIpAwsService) isGetSpecType_ServiceProviderChoice()     {}
func (*GetSpecType_PaloAltoFwService) isGetSpecType_ServiceProviderChoice()     {}
func (*GetSpecType_DisableHttpsManagement) isGetSpecType_HttpManagementChoice() {}
func (*GetSpecType_HttpsManagement) isGetSpecType_HttpManagementChoice()        {}
func (*GetSpecType_DisableSshAccess) isGetSpecType_SshManagementChoice()        {}
func (*GetSpecType_EnabledSshAccess) isGetSpecType_SshManagementChoice()        {}
func (*GetSpecType_EndpointService) isGetSpecType_ServiceTypeChoice()           {}
func (*GetSpecType_ForwardingService) isGetSpecType_ServiceTypeChoice()         {}
func (*GetSpecType_TransparentService) isGetSpecType_ServiceTypeChoice()        {}

func (m *GetSpecType) GetServiceProviderChoice() isGetSpecType_ServiceProviderChoice {
	if m != nil {
		return m.ServiceProviderChoice
	}
	return nil
}
func (m *GetSpecType) GetHttpManagementChoice() isGetSpecType_HttpManagementChoice {
	if m != nil {
		return m.HttpManagementChoice
	}
	return nil
}
func (m *GetSpecType) GetSshManagementChoice() isGetSpecType_SshManagementChoice {
	if m != nil {
		return m.SshManagementChoice
	}
	return nil
}
func (m *GetSpecType) GetServiceTypeChoice() isGetSpecType_ServiceTypeChoice {
	if m != nil {
		return m.ServiceTypeChoice
	}
	return nil
}

func (m *GetSpecType) GetF5BigIpAwsService() *F5BigIpAWSType {
	if x, ok := m.GetServiceProviderChoice().(*GetSpecType_F5BigIpAwsService); ok {
		return x.F5BigIpAwsService
	}
	return nil
}

func (m *GetSpecType) GetPaloAltoFwService() *PaloAltoFWAWSType {
	if x, ok := m.GetServiceProviderChoice().(*GetSpecType_PaloAltoFwService); ok {
		return x.PaloAltoFwService
	}
	return nil
}

func (m *GetSpecType) GetDisableHttpsManagement() *schema.Empty {
	if x, ok := m.GetHttpManagementChoice().(*GetSpecType_DisableHttpsManagement); ok {
		return x.DisableHttpsManagement
	}
	return nil
}

func (m *GetSpecType) GetHttpsManagement() *ServiceHttpsManagementType {
	if x, ok := m.GetHttpManagementChoice().(*GetSpecType_HttpsManagement); ok {
		return x.HttpsManagement
	}
	return nil
}

func (m *GetSpecType) GetDisableSshAccess() *schema.Empty {
	if x, ok := m.GetSshManagementChoice().(*GetSpecType_DisableSshAccess); ok {
		return x.DisableSshAccess
	}
	return nil
}

func (m *GetSpecType) GetEnabledSshAccess() *SSHManagementType {
	if x, ok := m.GetSshManagementChoice().(*GetSpecType_EnabledSshAccess); ok {
		return x.EnabledSshAccess
	}
	return nil
}

func (m *GetSpecType) GetEndpointService() *EndpointServiceType {
	if x, ok := m.GetServiceTypeChoice().(*GetSpecType_EndpointService); ok {
		return x.EndpointService
	}
	return nil
}

func (m *GetSpecType) GetForwardingService() *ForwardingServiceType {
	if x, ok := m.GetServiceTypeChoice().(*GetSpecType_ForwardingService); ok {
		return x.ForwardingService
	}
	return nil
}

func (m *GetSpecType) GetTransparentService() *schema.Empty {
	if x, ok := m.GetServiceTypeChoice().(*GetSpecType_TransparentService); ok {
		return x.TransparentService
	}
	return nil
}

func (m *GetSpecType) GetCommands() []*SuggestedCommands {
	if m != nil {
		return m.Commands
	}
	return nil
}

func (m *GetSpecType) GetFinalizerTimestamp() *types.Timestamp {
	if m != nil {
		return m.FinalizerTimestamp
	}
	return nil
}

func (m *GetSpecType) GetForceDelete() bool {
	if m != nil {
		return m.ForceDelete
	}
	return false
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetSpecType_F5BigIpAwsService)(nil),
		(*GetSpecType_PaloAltoFwService)(nil),
		(*GetSpecType_DisableHttpsManagement)(nil),
		(*GetSpecType_HttpsManagement)(nil),
		(*GetSpecType_DisableSshAccess)(nil),
		(*GetSpecType_EnabledSshAccess)(nil),
		(*GetSpecType_EndpointService)(nil),
		(*GetSpecType_ForwardingService)(nil),
		(*GetSpecType_TransparentService)(nil),
	}
}

func init() {
	proto.RegisterEnum("ves.io.schema.nfv_service.PaloAltoFWAWSInstanceType", PaloAltoFWAWSInstanceType_name, PaloAltoFWAWSInstanceType_value)
	golang_proto.RegisterEnum("ves.io.schema.nfv_service.PaloAltoFWAWSInstanceType", PaloAltoFWAWSInstanceType_name, PaloAltoFWAWSInstanceType_value)
	proto.RegisterEnum("ves.io.schema.nfv_service.BMNodeVirtualCpuCount", BMNodeVirtualCpuCount_name, BMNodeVirtualCpuCount_value)
	golang_proto.RegisterEnum("ves.io.schema.nfv_service.BMNodeVirtualCpuCount", BMNodeVirtualCpuCount_name, BMNodeVirtualCpuCount_value)
	proto.RegisterEnum("ves.io.schema.nfv_service.BMNodeMemorySize", BMNodeMemorySize_name, BMNodeMemorySize_value)
	golang_proto.RegisterEnum("ves.io.schema.nfv_service.BMNodeMemorySize", BMNodeMemorySize_name, BMNodeMemorySize_value)
	proto.RegisterEnum("ves.io.schema.nfv_service.ServiceType", ServiceType_name, ServiceType_value)
	golang_proto.RegisterEnum("ves.io.schema.nfv_service.ServiceType", ServiceType_name, ServiceType_value)
	proto.RegisterType((*ForwardingServiceType)(nil), "ves.io.schema.nfv_service.ForwardingServiceType")
	golang_proto.RegisterType((*ForwardingServiceType)(nil), "ves.io.schema.nfv_service.ForwardingServiceType")
	proto.RegisterType((*EndpointServiceType)(nil), "ves.io.schema.nfv_service.EndpointServiceType")
	golang_proto.RegisterType((*EndpointServiceType)(nil), "ves.io.schema.nfv_service.EndpointServiceType")
	proto.RegisterType((*ServiceNodesAWSType)(nil), "ves.io.schema.nfv_service.ServiceNodesAWSType")
	golang_proto.RegisterType((*ServiceNodesAWSType)(nil), "ves.io.schema.nfv_service.ServiceNodesAWSType")
	proto.RegisterType((*F5BigIpAWSTGWSiteType)(nil), "ves.io.schema.nfv_service.F5BigIpAWSTGWSiteType")
	golang_proto.RegisterType((*F5BigIpAWSTGWSiteType)(nil), "ves.io.schema.nfv_service.F5BigIpAWSTGWSiteType")
	proto.RegisterType((*F5BigIpAWSVPCSiteType)(nil), "ves.io.schema.nfv_service.F5BigIpAWSVPCSiteType")
	golang_proto.RegisterType((*F5BigIpAWSVPCSiteType)(nil), "ves.io.schema.nfv_service.F5BigIpAWSVPCSiteType")
	proto.RegisterType((*F5BigIpAWSBYOLImageType)(nil), "ves.io.schema.nfv_service.F5BigIpAWSBYOLImageType")
	golang_proto.RegisterType((*F5BigIpAWSBYOLImageType)(nil), "ves.io.schema.nfv_service.F5BigIpAWSBYOLImageType")
	proto.RegisterType((*F5BigIpAWSMarketPlaceImageType)(nil), "ves.io.schema.nfv_service.F5BigIpAWSMarketPlaceImageType")
	golang_proto.RegisterType((*F5BigIpAWSMarketPlaceImageType)(nil), "ves.io.schema.nfv_service.F5BigIpAWSMarketPlaceImageType")
	proto.RegisterType((*F5BigIpAWSType)(nil), "ves.io.schema.nfv_service.F5BigIpAWSType")
	golang_proto.RegisterType((*F5BigIpAWSType)(nil), "ves.io.schema.nfv_service.F5BigIpAWSType")
	proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.nfv_service.F5BigIpAWSType.TagsEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.nfv_service.F5BigIpAWSType.TagsEntry")
	proto.RegisterType((*F5BigIpAWSReplaceType)(nil), "ves.io.schema.nfv_service.F5BigIpAWSReplaceType")
	golang_proto.RegisterType((*F5BigIpAWSReplaceType)(nil), "ves.io.schema.nfv_service.F5BigIpAWSReplaceType")
	proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.nfv_service.F5BigIpAWSReplaceType.TagsEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.nfv_service.F5BigIpAWSReplaceType.TagsEntry")
	proto.RegisterType((*PanoramaServerType)(nil), "ves.io.schema.nfv_service.PanoramaServerType")
	golang_proto.RegisterType((*PanoramaServerType)(nil), "ves.io.schema.nfv_service.PanoramaServerType")
	proto.RegisterType((*SSHKeyType)(nil), "ves.io.schema.nfv_service.SSHKeyType")
	golang_proto.RegisterType((*SSHKeyType)(nil), "ves.io.schema.nfv_service.SSHKeyType")
	proto.RegisterType((*PANAWSAutoSetupType)(nil), "ves.io.schema.nfv_service.PANAWSAutoSetupType")
	golang_proto.RegisterType((*PANAWSAutoSetupType)(nil), "ves.io.schema.nfv_service.PANAWSAutoSetupType")
	proto.RegisterType((*PaloAltoServiceNodesAWSType)(nil), "ves.io.schema.nfv_service.PaloAltoServiceNodesAWSType")
	golang_proto.RegisterType((*PaloAltoServiceNodesAWSType)(nil), "ves.io.schema.nfv_service.PaloAltoServiceNodesAWSType")
	proto.RegisterType((*PaloAltoFWAWSType)(nil), "ves.io.schema.nfv_service.PaloAltoFWAWSType")
	golang_proto.RegisterType((*PaloAltoFWAWSType)(nil), "ves.io.schema.nfv_service.PaloAltoFWAWSType")
	proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.nfv_service.PaloAltoFWAWSType.TagsEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.nfv_service.PaloAltoFWAWSType.TagsEntry")
	proto.RegisterType((*PaloAltoAzNodesAWSType)(nil), "ves.io.schema.nfv_service.PaloAltoAzNodesAWSType")
	golang_proto.RegisterType((*PaloAltoAzNodesAWSType)(nil), "ves.io.schema.nfv_service.PaloAltoAzNodesAWSType")
	proto.RegisterType((*PaloAltoFWAWSReplaceType)(nil), "ves.io.schema.nfv_service.PaloAltoFWAWSReplaceType")
	golang_proto.RegisterType((*PaloAltoFWAWSReplaceType)(nil), "ves.io.schema.nfv_service.PaloAltoFWAWSReplaceType")
	proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.nfv_service.PaloAltoFWAWSReplaceType.TagsEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.nfv_service.PaloAltoFWAWSReplaceType.TagsEntry")
	proto.RegisterType((*SSHManagementNodePorts)(nil), "ves.io.schema.nfv_service.SSHManagementNodePorts")
	golang_proto.RegisterType((*SSHManagementNodePorts)(nil), "ves.io.schema.nfv_service.SSHManagementNodePorts")
	proto.RegisterType((*SSHManagementType)(nil), "ves.io.schema.nfv_service.SSHManagementType")
	golang_proto.RegisterType((*SSHManagementType)(nil), "ves.io.schema.nfv_service.SSHManagementType")
	proto.RegisterType((*ServiceHttpsManagementType)(nil), "ves.io.schema.nfv_service.ServiceHttpsManagementType")
	golang_proto.RegisterType((*ServiceHttpsManagementType)(nil), "ves.io.schema.nfv_service.ServiceHttpsManagementType")
	proto.RegisterType((*F5BigIpAppStackBareMetalType)(nil), "ves.io.schema.nfv_service.F5BigIpAppStackBareMetalType")
	golang_proto.RegisterType((*F5BigIpAppStackBareMetalType)(nil), "ves.io.schema.nfv_service.F5BigIpAppStackBareMetalType")
	proto.RegisterType((*InterfaceDetails)(nil), "ves.io.schema.nfv_service.InterfaceDetails")
	golang_proto.RegisterType((*InterfaceDetails)(nil), "ves.io.schema.nfv_service.InterfaceDetails")
	proto.RegisterType((*BigIqInstanceType)(nil), "ves.io.schema.nfv_service.BigIqInstanceType")
	golang_proto.RegisterType((*BigIqInstanceType)(nil), "ves.io.schema.nfv_service.BigIqInstanceType")
	proto.RegisterType((*ServiceNodesBareMetalType)(nil), "ves.io.schema.nfv_service.ServiceNodesBareMetalType")
	golang_proto.RegisterType((*ServiceNodesBareMetalType)(nil), "ves.io.schema.nfv_service.ServiceNodesBareMetalType")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.nfv_service.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.nfv_service.GlobalSpecType")
	proto.RegisterType((*SuggestedCommands)(nil), "ves.io.schema.nfv_service.SuggestedCommands")
	golang_proto.RegisterType((*SuggestedCommands)(nil), "ves.io.schema.nfv_service.SuggestedCommands")
	proto.RegisterType((*EndpointRefType)(nil), "ves.io.schema.nfv_service.EndpointRefType")
	golang_proto.RegisterType((*EndpointRefType)(nil), "ves.io.schema.nfv_service.EndpointRefType")
	proto.RegisterType((*ExternalNLBInfo)(nil), "ves.io.schema.nfv_service.ExternalNLBInfo")
	golang_proto.RegisterType((*ExternalNLBInfo)(nil), "ves.io.schema.nfv_service.ExternalNLBInfo")
	proto.RegisterType((*EndpointServiceReplaceType)(nil), "ves.io.schema.nfv_service.EndpointServiceReplaceType")
	golang_proto.RegisterType((*EndpointServiceReplaceType)(nil), "ves.io.schema.nfv_service.EndpointServiceReplaceType")
	proto.RegisterType((*NodeInfo)(nil), "ves.io.schema.nfv_service.NodeInfo")
	golang_proto.RegisterType((*NodeInfo)(nil), "ves.io.schema.nfv_service.NodeInfo")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.nfv_service.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.nfv_service.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.nfv_service.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.nfv_service.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.nfv_service.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.nfv_service.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/nfv_service/types.proto", fileDescriptor_a04d33a158d31df9)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/nfv_service/types.proto", fileDescriptor_a04d33a158d31df9)
}

var fileDescriptor_a04d33a158d31df9 = []byte{
	// 5951 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x7c, 0x5d, 0x6c, 0x1b, 0xd7,
	0x99, 0xa8, 0x0e, 0x49, 0x89, 0xe4, 0x27, 0x51, 0x1c, 0x0e, 0x65, 0x9b, 0x96, 0x6d, 0x85, 0x65,
	0x93, 0xd4, 0x96, 0x69, 0x59, 0xa4, 0x25, 0xc7, 0x56, 0x7a, 0x8d, 0x88, 0xf2, 0x8f, 0xa4, 0x58,
	0xb2, 0x30, 0xf4, 0x4f, 0x93, 0x36, 0x9d, 0x0c, 0xc9, 0x43, 0x6a, 0xae, 0x87, 0x33, 0xd3, 0x99,
	0xa1, 0x14, 0x39, 0xd5, 0x6d, 0x6e, 0xee, 0x2d, 0xb0, 0x28, 0xb6, 0x40, 0xb1, 0x2f, 0x2d, 0x82,
	0xed, 0xfb, 0xc2, 0x0f, 0x8b, 0x7d, 0xd8, 0x7d, 0x29, 0x03, 0xac, 0x1b, 0x60, 0x81, 0xc2, 0xc5,
	0x02, 0x7e, 0x29, 0x10, 0x04, 0xfb, 0xd0, 0x2a, 0x2f, 0xed, 0x6e, 0xb7, 0xc8, 0x16, 0xdb, 0x1f,
	0xe4, 0xa5, 0x8b, 0x73, 0xe6, 0xcc, 0x70, 0x48, 0x8e, 0xa8, 0xb1, 0xa3, 0xc5, 0xb6, 0x40, 0x91,
	0x87, 0x50, 0x73, 0xbe, 0xbf, 0x73, 0xce, 0x77, 0xbe, 0xdf, 0x73, 0x0c, 0x2f, 0x6c, 0x61, 0x73,
	0x46, 0xd6, 0xce, 0x9b, 0xd5, 0x4d, 0xdc, 0x94, 0xce, 0xab, 0xf5, 0x2d, 0xd1, 0xc4, 0xc6, 0x96,
	0x5c, 0xc5, 0xe7, 0xad, 0x1d, 0x1d, 0x9b, 0x33, 0xba, 0xa1, 0x59, 0x1a, 0x7f, 0xdc, 0x06, 0x9b,
	0xb1, 0xc1, 0x66, 0x3c, 0x60, 0x93, 0xe7, 0x1a, 0xb2, 0xb5, 0xd9, 0xaa, 0xcc, 0x54, 0xb5, 0xe6,
	0xf9, 0x86, 0xd6, 0xd0, 0xce, 0x53, 0x8c, 0x4a, 0xab, 0x4e, 0xff, 0xa2, 0x7f, 0xd0, 0x5f, 0x36,
	0xa5, 0xc9, 0xe7, 0x1a, 0x9a, 0xd6, 0x50, 0x70, 0x07, 0xca, 0x92, 0x9b, 0xd8, 0xb4, 0xa4, 0xa6,
	0xce, 0x00, 0x8e, 0xf5, 0x48, 0x84, 0x2d, 0x36, 0x90, 0xef, 0x1b, 0xd8, 0xd6, 0x8c, 0xfb, 0xa2,
	0xae, 0x29, 0x72, 0x75, 0x47, 0x34, 0xb1, 0xe5, 0x95, 0x78, 0xf2, 0x44, 0x37, 0xb4, 0xa6, 0x5b,
	0xb2, 0xa6, 0x3a, 0x83, 0xc7, 0xbb, 0x07, 0xbd, 0x78, 0x27, 0xbb, 0x87, 0xb6, 0x24, 0x45, 0xae,
	0x49, 0x16, 0x66, 0xa3, 0xd9, 0x9e, 0x51, 0x19, 0x6f, 0x8b, 0xdd, 0xa4, 0x9f, 0xef, 0x87, 0x30,
	0xcf, 0x9b, 0xb2, 0x85, 0x45, 0x2f, 0x97, 0xe7, 0xfc, 0xa0, 0x3c, 0x00, 0xb9, 0x63, 0x70, 0xe4,
	0xba, 0x66, 0x6c, 0x4b, 0x46, 0x4d, 0x56, 0x1b, 0x65, 0x7b, 0xa9, 0x6f, 0xef, 0xe8, 0x38, 0xf7,
	0xf7, 0x31, 0x48, 0x5f, 0x53, 0x6b, 0xba, 0x26, 0xab, 0x96, 0xe7, 0x3b, 0xff, 0x32, 0x24, 0xa4,
	0x96, 0xa5, 0x35, 0x25, 0x4b, 0xae, 0x8a, 0x5b, 0xb2, 0x9e, 0x09, 0x67, 0xd1, 0xe9, 0xd1, 0xe2,
	0xc4, 0x4c, 0xf7, 0xce, 0x5d, 0x6b, 0xea, 0xd6, 0xce, 0xf2, 0x90, 0x30, 0xe6, 0x02, 0xdf, 0x95,
	0x75, 0xbe, 0x04, 0xe3, 0x55, 0x4d, 0xad, 0xcb, 0x8d, 0x96, 0x81, 0x6b, 0x14, 0x3b, 0x92, 0x45,
	0xa7, 0xe3, 0xa5, 0xe3, 0x3f, 0xf8, 0xc5, 0xa3, 0x70, 0xc4, 0x08, 0xe9, 0x88, 0xfc, 0x18, 0x35,
	0xe2, 0xaf, 0x47, 0x67, 0x67, 0xe8, 0x7f, 0xcb, 0x43, 0x42, 0xa2, 0x83, 0x42, 0x68, 0xdc, 0x86,
	0x13, 0x35, 0xd9, 0x94, 0x2a, 0x0a, 0x16, 0xa5, 0xda, 0x16, 0x36, 0x2c, 0xd9, 0xc4, 0xa2, 0xa6,
	0x8a, 0xa6, 0xa2, 0x89, 0xb2, 0x9e, 0x19, 0x19, 0x20, 0x0e, 0x12, 0x8e, 0x31, 0xd4, 0x45, 0x07,
	0xf3, 0x96, 0x5a, 0x56, 0xb4, 0x15, 0x9d, 0xbf, 0x06, 0x69, 0x3f, 0x6a, 0xd1, 0x81, 0xd4, 0x38,
	0xa9, 0x97, 0xcc, 0x5d, 0x38, 0xe9, 0x43, 0x46, 0xc4, 0x6f, 0x59, 0xd8, 0x50, 0x25, 0x25, 0x13,
	0x1b, 0x48, 0x2f, 0xd3, 0x4b, 0xef, 0x1a, 0xc3, 0xe3, 0x97, 0x21, 0x55, 0xc3, 0x75, 0xa9, 0xa5,
	0x58, 0xa2, 0x55, 0xd5, 0x45, 0x5d, 0x33, 0x2c, 0x33, 0x03, 0xfb, 0x13, 0x2b, 0x45, 0x1e, 0xb5,
	0x11, 0x5a, 0x0e, 0x09, 0x49, 0x86, 0x76, 0xbb, 0xaa, 0x6f, 0x10, 0x24, 0xfe, 0x32, 0xc4, 0x37,
	0x2d, 0xcb, 0x26, 0x91, 0x19, 0x0d, 0x40, 0x21, 0x46, 0xc0, 0x09, 0x2e, 0xff, 0x32, 0x00, 0xf9,
	0x6d, 0xda, 0xb8, 0x63, 0x01, 0x70, 0x29, 0x2b, 0x93, 0x22, 0xdf, 0x02, 0xae, 0xda, 0x32, 0x2d,
	0xad, 0xe9, 0x99, 0x40, 0x82, 0x92, 0x38, 0xd5, 0x43, 0x82, 0x80, 0x0b, 0x92, 0xda, 0xc0, 0x26,
	0x51, 0x38, 0x97, 0xd6, 0xb8, 0x8d, 0xee, 0x4e, 0xe4, 0x0a, 0x8c, 0xa9, 0x9a, 0x87, 0xd8, 0x78,
	0x00, 0x79, 0x40, 0xd5, 0x7a, 0xf0, 0x5b, 0x35, 0x07, 0x9f, 0x3b, 0x10, 0x3f, 0x4c, 0xf0, 0xef,
	0xd4, 0x18, 0x7e, 0x67, 0x42, 0x1d, 0x1a, 0xa9, 0xe0, 0x13, 0x0a, 0x3b, 0x13, 0x72, 0x08, 0x96,
	0x9e, 0x87, 0x94, 0xac, 0x9a, 0x72, 0x0d, 0x93, 0x83, 0x21, 0x56, 0x37, 0x35, 0xb9, 0x8a, 0xf9,
	0xe4, 0xa3, 0x36, 0x0a, 0x3f, 0x69, 0x23, 0xb4, 0xd7, 0x46, 0xe1, 0x0b, 0xf9, 0xb9, 0xd2, 0x69,
	0x48, 0x3b, 0xda, 0xe4, 0x85, 0x4b, 0x3d, 0x6a, 0xa3, 0x91, 0x27, 0x6d, 0x34, 0xbc, 0xd7, 0x46,
	0xc3, 0x17, 0xf3, 0x2f, 0xe5, 0x2f, 0x95, 0x0a, 0x90, 0x74, 0x56, 0xc7, 0x81, 0x9a, 0x7a, 0xd4,
	0x46, 0xf0, 0xa3, 0x36, 0x42, 0x4f, 0xda, 0x28, 0xbe, 0xd7, 0x46, 0xe3, 0x85, 0xd9, 0x7c, 0xa1,
	0x90, 0x2f, 0x14, 0xf3, 0x85, 0x0b, 0xf9, 0x02, 0x21, 0x9e, 0x74, 0x26, 0xe3, 0xa0, 0x1c, 0x79,
	0xd4, 0x46, 0x1c, 0x43, 0x49, 0x12, 0xe2, 0x85, 0x8b, 0xf9, 0xc2, 0x4b, 0xab, 0x91, 0x18, 0xe2,
	0x42, 0xab, 0x91, 0xd8, 0x30, 0x37, 0xb2, 0x1a, 0x89, 0xc5, 0x39, 0x58, 0x8d, 0xc4, 0x92, 0x1c,
	0x97, 0x6b, 0x8f, 0x40, 0x9a, 0x99, 0x8b, 0x75, 0xad, 0x86, 0xcd, 0xc5, 0x7b, 0x65, 0x6a, 0x36,
	0xce, 0x42, 0x5c, 0xd5, 0x6a, 0x58, 0x54, 0xa5, 0x26, 0xce, 0x20, 0x7a, 0xe8, 0xc7, 0xc9, 0x59,
	0x8f, 0x1b, 0x51, 0x0e, 0x65, 0xde, 0x09, 0x6d, 0x22, 0x21, 0x46, 0x00, 0xd6, 0xa5, 0x26, 0xe6,
	0x37, 0x61, 0x54, 0xda, 0x36, 0x45, 0xe9, 0x81, 0x0d, 0x1e, 0xa2, 0xe0, 0xcb, 0xbf, 0x6f, 0xa3,
	0xa1, 0x1f, 0xbc, 0x8f, 0xc6, 0x62, 0x68, 0x16, 0x2d, 0x8c, 0xd8, 0x46, 0x81, 0x90, 0x38, 0x6f,
	0x9c, 0x2b, 0x9e, 0xfd, 0xea, 0xe9, 0x2f, 0x4b, 0xe7, 0x1e, 0xbc, 0xf1, 0x76, 0x71, 0xf7, 0xcc,
	0x39, 0xfa, 0x73, 0xf6, 0xdc, 0xe5, 0x37, 0xde, 0x9e, 0xcb, 0x17, 0x67, 0xbb, 0x3e, 0x14, 0x77,
	0xcf, 0x3c, 0x2f, 0xc4, 0xa5, 0x6d, 0x73, 0xf1, 0x01, 0xe5, 0xb4, 0x08, 0x5c, 0xc7, 0x9a, 0xe9,
	0x06, 0xae, 0xcb, 0x6f, 0x51, 0x93, 0xb4, 0xbf, 0x41, 0x4b, 0xba, 0xf0, 0x1b, 0x14, 0x9c, 0x2f,
	0x40, 0xc2, 0x6a, 0xa9, 0x2a, 0x56, 0x1c, 0xfc, 0x61, 0x2a, 0x2e, 0x10, 0xd1, 0x86, 0x8d, 0xf0,
	0xef, 0x11, 0x22, 0x66, 0xd0, 0x06, 0x61, 0x28, 0xcb, 0x30, 0x61, 0x60, 0xe2, 0xd7, 0x70, 0x4d,
	0x6c, 0x36, 0x9a, 0x96, 0x68, 0xb6, 0x2a, 0x2a, 0xb6, 0x0e, 0xb0, 0x36, 0xbc, 0x83, 0xb3, 0xd6,
	0x68, 0x5a, 0x65, 0x8a, 0xc1, 0xaf, 0xc1, 0xa8, 0x97, 0x80, 0x6d, 0x5e, 0x9e, 0xef, 0x21, 0x40,
	0xad, 0xfe, 0xcc, 0x92, 0xa2, 0xb5, 0x6a, 0x36, 0x9a, 0xad, 0x86, 0x7f, 0xf7, 0x3e, 0x42, 0xcb,
	0x48, 0x80, 0xa6, 0x4b, 0x6e, 0xe1, 0xfb, 0xa1, 0xc7, 0x6d, 0xf4, 0xbd, 0x10, 0x1c, 0x81, 0x08,
	0x59, 0x9e, 0xc9, 0x84, 0x67, 0xd7, 0xb2, 0x08, 0x32, 0x10, 0x5d, 0x7c, 0x3d, 0xcb, 0x46, 0xbc,
	0x5b, 0x04, 0xab, 0x30, 0xb1, 0xb2, 0x91, 0xb5, 0xa7, 0x97, 0xad, 0x6b, 0x46, 0xf6, 0x36, 0x9d,
	0xef, 0x74, 0x11, 0x66, 0xe1, 0x54, 0xff, 0x1a, 0x17, 0xe3, 0x8b, 0xce, 0x17, 0x48, 0xf6, 0xac,
	0x1f, 0x7c, 0x0f, 0xc1, 0xb1, 0xd2, 0xca, 0x8d, 0x73, 0x2b, 0x1b, 0x59, 0x32, 0xd3, 0xac, 0x2d,
	0x5b, 0x96, 0x08, 0x3d, 0xbd, 0x0b, 0x6f, 0xc3, 0x0b, 0xfe, 0xab, 0x57, 0x4c, 0x10, 0x9a, 0x0d,
	0xac, 0x62, 0x43, 0xb2, 0x70, 0x0d, 0x5e, 0x84, 0x8c, 0x67, 0x74, 0xc6, 0xfe, 0x9f, 0xa8, 0x4b,
	0x86, 0xd4, 0x2c, 0xc2, 0x92, 0xeb, 0x52, 0x60, 0x1a, 0xa6, 0xbc, 0x70, 0xf8, 0x2d, 0xd9, 0xb4,
	0x64, 0xb5, 0xc1, 0xfe, 0x16, 0xe5, 0x5a, 0x31, 0x76, 0x8d, 0x7d, 0x2b, 0x9d, 0x85, 0x89, 0x2e,
	0x59, 0x9d, 0x43, 0x92, 0x7e, 0xd4, 0x46, 0x11, 0x76, 0x48, 0xc2, 0xe4, 0xa4, 0xce, 0xe5, 0xe7,
	0x4b, 0x2f, 0x00, 0xef, 0x21, 0xec, 0x3d, 0xd0, 0xd1, 0x27, 0x6d, 0x34, 0x42, 0xc0, 0x5e, 0xca,
	0x5f, 0x5a, 0x8d, 0xc4, 0xc2, 0x5c, 0x64, 0x35, 0x12, 0x1b, 0xe1, 0xa2, 0x39, 0x03, 0x8e, 0x5c,
	0x9f, 0x2f, 0xc9, 0x8d, 0x15, 0x9d, 0x9c, 0x9b, 0x1b, 0xf7, 0xca, 0xb2, 0x65, 0x7b, 0xdd, 0xd7,
	0x60, 0x8c, 0x2c, 0xb7, 0xd5, 0xd8, 0x16, 0x89, 0x8f, 0x67, 0x4e, 0x37, 0xe7, 0xbb, 0xd1, 0xb7,
	0x2a, 0xff, 0x1b, 0x57, 0x2d, 0x01, 0xd7, 0xe9, 0x36, 0xa7, 0x1f, 0xee, 0x76, 0xa1, 0xbe, 0xf3,
	0x3e, 0x42, 0x02, 0x48, 0xdb, 0xe6, 0xed, 0xc6, 0x36, 0x21, 0xdf, 0xcd, 0xf3, 0xee, 0xc6, 0x52,
	0x2f, 0xcf, 0x2d, 0xbd, 0xfa, 0xac, 0x3c, 0x1d, 0x54, 0x97, 0xe7, 0x5d, 0xbd, 0x4a, 0x79, 0xfe,
	0x3f, 0x04, 0xc7, 0x3a, 0x4c, 0x4b, 0xaf, 0xdd, 0xba, 0xb9, 0xd2, 0x94, 0x1a, 0x36, 0xdb, 0x73,
	0x30, 0x2c, 0x93, 0x3f, 0x98, 0x95, 0x38, 0x46, 0xce, 0x11, 0x6f, 0x70, 0xc2, 0x08, 0xfd, 0x5a,
	0x60, 0xff, 0x2f, 0x0a, 0x36, 0x14, 0x7f, 0x19, 0xa2, 0x8a, 0x5c, 0xc5, 0xaa, 0x69, 0xdb, 0x89,
	0xd1, 0xe2, 0xf1, 0x1e, 0x01, 0xcb, 0xb8, 0x6a, 0x38, 0x2a, 0x4f, 0x0c, 0xa9, 0xe0, 0xc0, 0xe7,
	0x7e, 0x18, 0x86, 0xa9, 0x8e, 0x14, 0x6b, 0x92, 0x71, 0x1f, 0x5b, 0x1b, 0x8a, 0x54, 0xc5, 0x1d,
	0x61, 0x5e, 0x81, 0xe4, 0xe2, 0xbd, 0xc5, 0xeb, 0x1b, 0xd2, 0xce, 0x8d, 0xe2, 0xec, 0xec, 0x5a,
	0x45, 0x37, 0x19, 0x97, 0x7d, 0xcd, 0x43, 0x0f, 0x38, 0xff, 0x45, 0x48, 0x38, 0x9f, 0x2e, 0xdc,
	0x20, 0xf8, 0x83, 0xe3, 0xa5, 0x6e, 0x60, 0x7e, 0x07, 0xd2, 0x25, 0x6c, 0x5a, 0x1b, 0x4a, 0xcb,
	0xf4, 0xca, 0x30, 0xc0, 0x44, 0x95, 0xce, 0x3f, 0x7c, 0x1f, 0x9d, 0x9d, 0x0e, 0x57, 0x0d, 0x6b,
	0x3a, 0x6a, 0x5a, 0x52, 0x43, 0x56, 0x1b, 0xd3, 0x11, 0xdd, 0xd0, 0x6a, 0xd3, 0x63, 0xa6, 0x56,
	0xb7, 0x2a, 0x92, 0x7a, 0x5f, 0x6c, 0xe2, 0xea, 0x74, 0xb4, 0x8e, 0x6b, 0x86, 0xd4, 0xd4, 0x97,
	0x87, 0x04, 0x3f, 0x1e, 0xfc, 0x37, 0x60, 0xa2, 0x82, 0x4d, 0x4b, 0xd4, 0x95, 0x96, 0x29, 0xea,
	0xd2, 0x4e, 0x43, 0x2c, 0x34, 0x08, 0xef, 0xe1, 0x01, 0xbc, 0x2f, 0x3e, 0x7c, 0x1f, 0x15, 0xa7,
	0x87, 0x6b, 0xb8, 0xa9, 0x15, 0x9e, 0x4e, 0x84, 0x54, 0xa5, 0x23, 0x42, 0x83, 0x32, 0x2a, 0x9d,
	0x02, 0x90, 0x9a, 0xb2, 0xf7, 0xdc, 0x84, 0x1c, 0x47, 0x58, 0xcc, 0x5f, 0xb0, 0x3d, 0x50, 0xee,
	0xff, 0xc6, 0x61, 0xdc, 0x73, 0x64, 0xc8, 0x9e, 0xc9, 0xc0, 0x37, 0xe9, 0x5e, 0x8a, 0x3a, 0xd9,
	0x4c, 0xd1, 0xd6, 0x26, 0x3b, 0xd4, 0xb9, 0x3c, 0xb3, 0x6f, 0x82, 0x31, 0x33, 0x58, 0x15, 0x96,
	0x87, 0x04, 0xae, 0xd9, 0xf3, 0x9d, 0xd7, 0x01, 0x2a, 0x3b, 0x9a, 0xc2, 0x58, 0xd8, 0x3b, 0x5b,
	0x0c, 0xc4, 0xa2, 0x4b, 0xe7, 0x4b, 0x27, 0x7e, 0xde, 0x46, 0x68, 0x1f, 0x45, 0x5f, 0x1e, 0x12,
	0xe2, 0x84, 0x89, 0xcd, 0xf1, 0x3a, 0x8c, 0x4b, 0xb5, 0xa6, 0xac, 0x8a, 0xba, 0x64, 0x9a, 0xdb,
	0x9a, 0x51, 0x63, 0xba, 0x70, 0xa0, 0xd6, 0x27, 0x28, 0xda, 0x06, 0xc3, 0xe2, 0xe7, 0x1d, 0x3a,
	0x2d, 0x93, 0xc4, 0x12, 0x4d, 0x4c, 0xa3, 0xc9, 0x78, 0x69, 0x9c, 0x7a, 0x59, 0xdb, 0x75, 0x65,
	0xde, 0x09, 0x31, 0xb4, 0x3b, 0x0c, 0x88, 0x3f, 0x03, 0x51, 0xd3, 0xdc, 0x14, 0xef, 0xe3, 0x1d,
	0xe6, 0xe6, 0xb8, 0xdf, 0xb7, 0x51, 0x98, 0xc0, 0x47, 0x8d, 0x61, 0xe2, 0xc8, 0x5f, 0x11, 0x46,
	0x4c, 0x73, 0xf3, 0x55, 0xbc, 0xc3, 0x4b, 0x90, 0xf6, 0xda, 0x1d, 0xdb, 0xf2, 0x9a, 0xcc, 0xc7,
	0xcd, 0x06, 0x5a, 0x24, 0x8f, 0x05, 0xa4, 0xd1, 0xb6, 0x6b, 0xb4, 0x36, 0x28, 0x2d, 0xbe, 0x61,
	0xb3, 0x70, 0xcc, 0x8c, 0xc3, 0x22, 0xf6, 0x14, 0x2c, 0x3c, 0x06, 0xaf, 0x14, 0x21, 0xbb, 0xc0,
	0x18, 0x31, 0x4b, 0xc5, 0x18, 0xbd, 0x0e, 0xc3, 0xc4, 0x0f, 0x9a, 0x99, 0x78, 0x36, 0x7c, 0x7a,
	0xb4, 0x38, 0x33, 0x80, 0xb4, 0x4f, 0xf0, 0x53, 0x9a, 0xa0, 0x0b, 0xfa, 0x57, 0x28, 0xc4, 0x85,
	0x9c, 0x5f, 0x31, 0x24, 0xd8, 0x24, 0xf9, 0xb7, 0x21, 0x62, 0x49, 0x0d, 0x33, 0x33, 0x46, 0x49,
	0x5f, 0x08, 0xb6, 0x30, 0x3b, 0x3a, 0x9e, 0xb9, 0x2d, 0x35, 0xcc, 0x6b, 0xaa, 0x65, 0xec, 0x94,
	0x8a, 0x34, 0x92, 0x7a, 0x0f, 0x8d, 0xe4, 0x22, 0x46, 0x28, 0xf3, 0x0d, 0xca, 0xe3, 0x3d, 0x14,
	0xe2, 0x4e, 0x93, 0x5f, 0xf0, 0x1e, 0x8a, 0x4e, 0x93, 0xdd, 0xfc, 0x03, 0xda, 0xfb, 0xe9, 0x3f,
	0x85, 0x47, 0xbe, 0xf5, 0x3e, 0x0a, 0xc5, 0x86, 0x04, 0xca, 0x94, 0x17, 0x81, 0xc3, 0x2c, 0xc9,
	0x73, 0xd8, 0xb0, 0xa8, 0x7c, 0xd0, 0x1c, 0x7d, 0xf2, 0x42, 0x3b, 0x9c, 0x10, 0x92, 0xb8, 0x7b,
	0x68, 0xf2, 0x25, 0x88, 0xbb, 0x72, 0xf2, 0x1c, 0x84, 0x89, 0xe6, 0x50, 0xc3, 0x2e, 0x90, 0x9f,
	0xfc, 0x04, 0x0c, 0x6f, 0x49, 0x4a, 0x8b, 0xc5, 0x78, 0x82, 0xfd, 0xc7, 0x42, 0xe8, 0x12, 0x5a,
	0xd8, 0xf8, 0xa0, 0x8d, 0x6e, 0xc2, 0xe7, 0x81, 0xbf, 0x2b, 0x1b, 0x56, 0x4b, 0x52, 0xb2, 0x2c,
	0x24, 0x58, 0xbc, 0x57, 0xe6, 0x13, 0x85, 0x7c, 0x61, 0x36, 0x3f, 0x97, 0x9f, 0xcf, 0x5f, 0xcc,
	0x17, 0x8a, 0x90, 0x80, 0x18, 0x09, 0x4b, 0xe8, 0x6a, 0xa2, 0xcb, 0x70, 0x14, 0x38, 0x47, 0xc0,
	0x2c, 0x13, 0x83, 0x0f, 0x15, 0x2e, 0x94, 0xb2, 0x30, 0x46, 0x4f, 0x94, 0x63, 0x51, 0xb8, 0x47,
	0x6d, 0x34, 0xca, 0x2c, 0x4a, 0xa4, 0x50, 0xc8, 0x5f, 0x28, 0x7d, 0x1e, 0x38, 0x37, 0x83, 0x1e,
	0xe0, 0xaf, 0xed, 0xc8, 0x37, 0xc4, 0x85, 0x99, 0xd7, 0xfe, 0x51, 0xd8, 0xeb, 0x42, 0x05, 0x4c,
	0xcd, 0x0e, 0x35, 0x45, 0xef, 0xa2, 0xae, 0xcd, 0x5d, 0x08, 0xb4, 0xb9, 0x1e, 0x02, 0x87, 0xb2,
	0xc7, 0xf5, 0x7d, 0xf7, 0x78, 0x3e, 0xf8, 0x1e, 0x7b, 0x84, 0x3a, 0xf4, 0xad, 0xbe, 0xf1, 0xf8,
	0x4a, 0x8f, 0x0d, 0xff, 0xa0, 0x8d, 0x8a, 0x90, 0xf1, 0xdd, 0xfb, 0x50, 0xa1, 0xb8, 0xdf, 0x0e,
	0xf7, 0x6c, 0xcd, 0x28, 0x37, 0xe6, 0x06, 0x57, 0x11, 0x6e, 0x78, 0x35, 0x12, 0x03, 0x6e, 0xd4,
	0x4d, 0x59, 0x46, 0xb8, 0xe8, 0x6a, 0x24, 0x16, 0xe5, 0x62, 0xab, 0x91, 0x58, 0x8c, 0x8b, 0xdb,
	0x49, 0x4c, 0xee, 0x9b, 0x21, 0xe0, 0x37, 0x24, 0x55, 0x33, 0xa4, 0xa6, 0x44, 0x28, 0x63, 0x83,
	0xee, 0xe3, 0x0b, 0x30, 0x42, 0x03, 0x4e, 0x83, 0x05, 0x25, 0x09, 0xc7, 0x4a, 0xd2, 0x9a, 0x85,
	0xc0, 0x06, 0xf9, 0x9b, 0x90, 0x92, 0x5a, 0xd6, 0xa6, 0x66, 0xc8, 0x0f, 0x24, 0x4b, 0xd6, 0x54,
	0x6a, 0x27, 0x03, 0x46, 0x25, 0x5c, 0x17, 0x26, 0x31, 0xa0, 0x57, 0x20, 0x6d, 0xe1, 0xa6, 0xae,
	0x48, 0x16, 0x16, 0x4d, 0x4b, 0xaa, 0xde, 0xb7, 0xb3, 0xa1, 0xb0, 0x6b, 0xa7, 0x91, 0x6b, 0xa7,
	0x91, 0x90, 0x72, 0x40, 0xcb, 0x04, 0x92, 0xe6, 0x36, 0x0b, 0x90, 0xaa, 0x61, 0xb2, 0x36, 0x62,
	0xc3, 0xd0, 0x5a, 0xba, 0x8d, 0x1d, 0xf1, 0xc5, 0x4e, 0xda, 0x80, 0x37, 0x08, 0x1c, 0xc1, 0xcd,
	0x7d, 0x03, 0xa0, 0x5c, 0x5e, 0x7e, 0x15, 0xef, 0xd0, 0xe9, 0x9f, 0x07, 0xd0, 0x5b, 0x15, 0x45,
	0xae, 0x8a, 0xee, 0x9e, 0xfa, 0x18, 0xfe, 0xb8, 0x0d, 0x43, 0x44, 0x7f, 0x05, 0x46, 0x75, 0x43,
	0xde, 0x22, 0x92, 0x3f, 0xc5, 0x12, 0x00, 0xc3, 0x79, 0x15, 0xef, 0xe4, 0x7e, 0x19, 0x82, 0xf4,
	0xc6, 0xe2, 0xfa, 0xe2, 0xbd, 0x32, 0x89, 0xea, 0xcb, 0xd8, 0x6a, 0xe9, 0x54, 0x94, 0x3b, 0x90,
	0x6c, 0x4a, 0x6a, 0x4b, 0x52, 0x44, 0xe6, 0x87, 0x9c, 0x80, 0xec, 0x85, 0x41, 0x36, 0xd9, 0x9d,
	0x0a, 0xcb, 0x7a, 0x86, 0x84, 0x84, 0x4d, 0xa5, 0x4c, 0x7d, 0x95, 0xc9, 0xdf, 0x81, 0xa3, 0x92,
	0x37, 0x7b, 0xe8, 0x50, 0x1f, 0x10, 0xae, 0x95, 0xa2, 0x1f, 0xee, 0x22, 0xea, 0x33, 0x86, 0x84,
	0x89, 0x2e, 0x74, 0x87, 0x6c, 0xbf, 0x97, 0x8d, 0x04, 0xf1, 0xb2, 0xfd, 0x4e, 0x7e, 0xf8, 0x59,
	0x9c, 0x7c, 0x29, 0x07, 0x49, 0x67, 0x1e, 0x07, 0x84, 0x51, 0xff, 0x1c, 0x81, 0x13, 0x1b, 0x92,
	0xa2, 0x2d, 0x2a, 0x64, 0xb1, 0xff, 0x64, 0xd2, 0xf7, 0xfd, 0x12, 0xe9, 0xc1, 0x29, 0x7c, 0x80,
	0x44, 0x7a, 0xf8, 0xa9, 0x13, 0xe9, 0xa1, 0xae, 0x44, 0xfa, 0x09, 0x7a, 0xdc, 0x46, 0x3f, 0x46,
	0x4f, 0x9f, 0x48, 0x7f, 0x17, 0xc1, 0xd1, 0x35, 0x49, 0x95, 0x1a, 0xb8, 0x89, 0xd5, 0x3f, 0xaa,
	0xdc, 0x77, 0xff, 0x74, 0x36, 0xe2, 0xc9, 0x7a, 0x6d, 0x8b, 0x9b, 0xfb, 0x49, 0x1c, 0x52, 0x8e,
	0x3e, 0x5d, 0xbf, 0xe7, 0x68, 0xd1, 0x26, 0x24, 0x64, 0xd5, 0xb4, 0x24, 0xb5, 0x6a, 0xfb, 0x58,
	0xaa, 0x49, 0xe3, 0xc5, 0xb9, 0x01, 0x47, 0xb7, 0x8b, 0xc8, 0x0a, 0x43, 0xa6, 0xcb, 0x9e, 0xf8,
	0xa8, 0x8d, 0xe2, 0xcd, 0xb9, 0x99, 0xb7, 0x14, 0xc9, 0x68, 0x60, 0x61, 0x4c, 0xf6, 0x0c, 0xf2,
	0x57, 0x20, 0xa9, 0x4b, 0xaa, 0x48, 0xf2, 0x87, 0x4a, 0x4b, 0xad, 0x29, 0xb8, 0x70, 0x50, 0xde,
	0xa5, 0x4b, 0xea, 0x62, 0x53, 0x2e, 0xd9, 0xc0, 0xfd, 0xf8, 0xc5, 0x03, 0x74, 0xaa, 0x0b, 0xbf,
	0xc8, 0x2f, 0x02, 0xe7, 0x14, 0xa9, 0x75, 0x49, 0x95, 0x0c, 0xad, 0x29, 0x65, 0x92, 0x03, 0xab,
	0x3b, 0x49, 0x06, 0xbf, 0xc1, 0xc0, 0xf9, 0xaf, 0x52, 0x11, 0xa8, 0x27, 0x12, 0x99, 0xf3, 0xb1,
	0xb5, 0xf2, 0xdc, 0xc0, 0xe5, 0xea, 0xf5, 0x5d, 0xb6, 0x65, 0x58, 0x46, 0xc2, 0xb8, 0xde, 0x35,
	0xc6, 0xbf, 0x06, 0x40, 0x6c, 0x96, 0x68, 0x12, 0xdb, 0xca, 0x2a, 0x97, 0x83, 0x82, 0x3e, 0x1f,
	0x6b, 0x5c, 0x8a, 0x11, 0xda, 0x54, 0xfd, 0x43, 0x42, 0x5c, 0x72, 0x86, 0xf8, 0xb3, 0x9d, 0x2c,
	0x21, 0xe6, 0xef, 0x2c, 0x96, 0x43, 0x6e, 0x9e, 0xd0, 0x5b, 0xda, 0x88, 0x1f, 0x5a, 0x69, 0x83,
	0xff, 0x0a, 0x24, 0x98, 0xf4, 0xa2, 0x1d, 0xbe, 0xdb, 0x15, 0xf3, 0x42, 0x00, 0x7d, 0x5b, 0x7c,
	0xd0, 0x15, 0xc1, 0x47, 0x3e, 0x21, 0xe6, 0x75, 0xcc, 0xf4, 0x98, 0x46, 0xfe, 0xff, 0xb0, 0xd8,
	0x6e, 0x94, 0xc6, 0x76, 0x17, 0x83, 0x2a, 0xf1, 0xa1, 0xc5, 0x75, 0x2f, 0x41, 0x74, 0x0b, 0x1b,
	0xa6, 0xac, 0xa9, 0x99, 0x34, 0x5d, 0xe5, 0x53, 0x1f, 0xb5, 0xd1, 0x48, 0xa1, 0x30, 0x33, 0x3b,
	0x33, 0xeb, 0xf8, 0x17, 0x30, 0x62, 0x02, 0xfb, 0x24, 0x38, 0xd0, 0xcf, 0x1e, 0xa8, 0x91, 0xb8,
	0x4c, 0x82, 0x39, 0x78, 0x81, 0x4c, 0x28, 0x4b, 0x66, 0x94, 0x5d, 0xb7, 0xbb, 0x63, 0x66, 0xf6,
	0xee, 0xda, 0xb9, 0x32, 0x36, 0x64, 0x6c, 0x66, 0xaf, 0xcb, 0x06, 0xde, 0x96, 0x14, 0x85, 0x1f,
	0x2d, 0xe4, 0x8b, 0xf9, 0xc2, 0xc5, 0xfc, 0xe5, 0x7c, 0xa1, 0x00, 0xe3, 0x9e, 0x20, 0x3d, 0x54,
	0x98, 0x85, 0xe3, 0x90, 0x76, 0x94, 0x35, 0xbb, 0xa4, 0xa9, 0x2a, 0xae, 0x92, 0xb8, 0x87, 0x0f,
	0x15, 0xe6, 0x7c, 0x12, 0xff, 0xf0, 0x93, 0x36, 0x0a, 0x39, 0x15, 0xf0, 0x2f, 0x40, 0xda, 0x39,
	0x53, 0x62, 0xb5, 0x83, 0x49, 0xc2, 0xf9, 0xe4, 0x93, 0x36, 0x1a, 0xa7, 0xe1, 0xfc, 0x7c, 0x7e,
	0xbe, 0xf4, 0x39, 0xb2, 0xfd, 0x56, 0x4b, 0x77, 0x3a, 0x67, 0x14, 0x24, 0xf5, 0xa4, 0x8d, 0x38,
	0x0a, 0x62, 0x07, 0xf3, 0x76, 0xac, 0x38, 0xce, 0x25, 0x7b, 0x62, 0x42, 0x8e, 0x4b, 0xad, 0x46,
	0x62, 0x63, 0x5c, 0x62, 0x35, 0x12, 0x4b, 0x70, 0xe3, 0xab, 0x91, 0x18, 0xcf, 0xa5, 0x73, 0x5f,
	0x87, 0xa3, 0xfe, 0x1a, 0xc2, 0x57, 0x9c, 0x14, 0x11, 0x05, 0x56, 0x87, 0xa7, 0x4d, 0x15, 0x73,
	0x3f, 0x0c, 0x41, 0xa6, 0x4b, 0x97, 0xbc, 0xb9, 0xc6, 0x37, 0x51, 0x97, 0x3e, 0xfe, 0xaf, 0xa0,
	0xfa, 0x78, 0xc8, 0xe9, 0xc6, 0xb3, 0x6b, 0xd7, 0xe9, 0xc7, 0x57, 0xfa, 0x7d, 0xc6, 0x07, 0x6d,
	0xc4, 0x51, 0xdd, 0xb9, 0x57, 0xce, 0x12, 0xb2, 0x7c, 0xa8, 0x50, 0xe8, 0x89, 0xf3, 0xbd, 0x11,
	0xfe, 0x80, 0xd8, 0xde, 0x8e, 0xff, 0x73, 0xff, 0x88, 0xe0, 0x68, 0xb9, 0xbc, 0xdc, 0xf1, 0xb1,
	0x64, 0xf9, 0xed, 0x8e, 0xce, 0xcb, 0xfd, 0x41, 0xce, 0x14, 0x8d, 0x58, 0x42, 0xdd, 0x11, 0x8b,
	0x6f, 0xd0, 0x33, 0x0b, 0x31, 0x62, 0xf3, 0x68, 0x6b, 0x8c, 0x4c, 0x2d, 0x51, 0x3a, 0x42, 0x17,
	0x6d, 0x3a, 0x7c, 0xfa, 0x9d, 0x18, 0xf9, 0x35, 0x32, 0x1d, 0xc9, 0xfc, 0xe1, 0x0f, 0x61, 0x81,
	0x98, 0x46, 0xc2, 0x6f, 0xe1, 0xe2, 0x63, 0x3b, 0xcb, 0x89, 0x13, 0x09, 0xec, 0x60, 0x60, 0xd4,
	0x23, 0x01, 0x1c, 0x85, 0x58, 0xb9, 0xbc, 0x9c, 0x25, 0xb0, 0x93, 0xd0, 0xa1, 0x9e, 0xfb, 0x87,
	0x11, 0x48, 0x75, 0xcd, 0x80, 0x6e, 0x7f, 0x0d, 0x9e, 0xeb, 0xea, 0x3c, 0xb2, 0x80, 0xdd, 0xe9,
	0x1a, 0x1e, 0xd0, 0xa9, 0x2d, 0x8d, 0x90, 0x38, 0x36, 0x43, 0xc2, 0x98, 0x13, 0x9e, 0x26, 0xe4,
	0x06, 0x25, 0x72, 0xd5, 0xa6, 0x71, 0x57, 0xd6, 0xf9, 0xbf, 0x44, 0x3d, 0x7d, 0x52, 0x9b, 0x0d,
	0x73, 0x8e, 0xfe, 0xf1, 0x92, 0xdb, 0x6b, 0xb5, 0xa9, 0x95, 0xe6, 0xf6, 0x76, 0xcf, 0x6d, 0xcb,
	0x8a, 0x92, 0x55, 0x35, 0x2b, 0x5b, 0xc1, 0x59, 0xb3, 0xa5, 0x93, 0x79, 0xe1, 0x1a, 0x6d, 0x1c,
	0x98, 0xe6, 0x66, 0xb6, 0xd9, 0x09, 0x80, 0x48, 0x98, 0xc0, 0x42, 0xec, 0x54, 0x9f, 0x60, 0xfc,
	0x97, 0xe0, 0x54, 0x7f, 0xbb, 0x55, 0xb5, 0xb0, 0x41, 0x22, 0x14, 0x32, 0xe5, 0xf8, 0x40, 0xa7,
	0x7d, 0xbc, 0xa7, 0xdf, 0xca, 0x30, 0xc9, 0x44, 0x5f, 0x01, 0xae, 0x87, 0xb2, 0x3c, 0xa8, 0xdf,
	0xba, 0x3c, 0x24, 0x8c, 0x77, 0x11, 0x93, 0x7d, 0x28, 0x68, 0x83, 0xfa, 0xad, 0x7d, 0x14, 0x34,
	0xfe, 0x06, 0x4c, 0xf4, 0xcd, 0x8e, 0xc8, 0x31, 0x36, 0x90, 0x4a, 0xaa, 0x9b, 0x0a, 0x11, 0xa5,
	0x0a, 0xe3, 0x54, 0xad, 0x1c, 0x15, 0x32, 0x33, 0x09, 0x6a, 0x23, 0x0a, 0x83, 0x73, 0x26, 0x9f,
	0x33, 0xc2, 0xda, 0x5a, 0xd4, 0x3e, 0x09, 0x63, 0x84, 0x68, 0xd9, 0xd6, 0x66, 0x93, 0x9f, 0x81,
	0x44, 0x4d, 0x6b, 0x4a, 0xb2, 0x2a, 0x9a, 0xad, 0x7a, 0x5d, 0x7e, 0x8b, 0x36, 0x64, 0xe3, 0xa5,
	0x38, 0x4b, 0x93, 0x37, 0x91, 0x30, 0x66, 0x8f, 0x97, 0xe9, 0xf0, 0xc2, 0x73, 0x1f, 0xb4, 0xd1,
	0x09, 0x38, 0x0e, 0xe3, 0x44, 0xc9, 0x3b, 0xac, 0xf8, 0x68, 0x61, 0x8e, 0xb8, 0x8d, 0x0b, 0xa5,
	0x69, 0xef, 0x02, 0x32, 0x67, 0x70, 0x94, 0xd5, 0x6c, 0x88, 0x33, 0x80, 0x42, 0x81, 0xb8, 0x96,
	0xd9, 0x7c, 0xa1, 0xd8, 0x63, 0x11, 0x7c, 0xad, 0x40, 0xee, 0x3b, 0xa3, 0x30, 0xc9, 0x4c, 0xee,
	0xb2, 0x65, 0xe9, 0x66, 0xcf, 0x01, 0xea, 0x93, 0x1f, 0x0d, 0x94, 0x9f, 0x5f, 0x05, 0xde, 0x39,
	0x5c, 0x9e, 0xae, 0x78, 0xf8, 0xc0, 0x2e, 0xf2, 0x90, 0xc0, 0x31, 0xbc, 0x65, 0xb7, 0x39, 0x5e,
	0xec, 0xea, 0xac, 0x47, 0xa8, 0xf9, 0x48, 0x3d, 0x62, 0x39, 0x7a, 0x6c, 0x7a, 0x84, 0x18, 0x8e,
	0xd3, 0x04, 0xd5, 0xd3, 0x50, 0x7f, 0x15, 0xb8, 0x9a, 0x26, 0xaa, 0x9a, 0xd5, 0xb9, 0x06, 0x31,
	0xe8, 0xf2, 0x43, 0x29, 0xce, 0x92, 0xd5, 0x0c, 0x0d, 0x06, 0x6b, 0xda, 0xba, 0x66, 0xb9, 0x27,
	0x93, 0x6f, 0x1c, 0x6c, 0x3d, 0xa2, 0x41, 0x69, 0x0f, 0x34, 0x20, 0x92, 0xbf, 0xfd, 0x88, 0x3d,
	0x85, 0xfd, 0xe8, 0x62, 0xe6, 0x63, 0x14, 0x44, 0x38, 0xd9, 0xbb, 0x30, 0x84, 0x93, 0x63, 0x17,
	0x06, 0xc5, 0xe1, 0x9d, 0x8c, 0x3e, 0x24, 0x64, 0xba, 0x97, 0xe8, 0x96, 0xea, 0x98, 0x07, 0xfe,
	0x4d, 0xf8, 0x9c, 0x2f, 0xe5, 0xae, 0xe5, 0x1a, 0x70, 0x9d, 0x60, 0x39, 0x24, 0x9c, 0x92, 0xfa,
	0xe9, 0x7a, 0x56, 0xe9, 0x4d, 0x38, 0xe2, 0x2f, 0x7b, 0xea, 0x29, 0xd6, 0xc9, 0xb9, 0xf4, 0x90,
	0xf6, 0xe1, 0xc5, 0x6f, 0x1d, 0x64, 0x39, 0xed, 0xeb, 0x14, 0x79, 0x5f, 0x4e, 0x57, 0xb5, 0x6d,
	0xd5, 0xb4, 0x0c, 0x2c, 0x35, 0x6f, 0x2b, 0xa6, 0x5d, 0x22, 0xf7, 0xa4, 0x1a, 0xa1, 0x41, 0x76,
	0x15, 0xf7, 0xd9, 0x34, 0x99, 0xb2, 0x83, 0xcf, 0xc0, 0xae, 0xdb, 0xe2, 0xc9, 0xfe, 0x6c, 0x34,
	0xca, 0x66, 0xf4, 0xd0, 0xd8, 0x68, 0xfb, 0xb1, 0xe9, 0x58, 0xe8, 0x43, 0x61, 0x43, 0xec, 0xf7,
	0x55, 0x48, 0x38, 0xd9, 0xa4, 0xa2, 0x55, 0x25, 0x85, 0x95, 0x6f, 0x0f, 0x54, 0xe1, 0x31, 0x86,
	0x75, 0x93, 0x20, 0x95, 0x72, 0x30, 0xea, 0xbd, 0xd8, 0x91, 0x26, 0x71, 0x35, 0xeb, 0x59, 0x87,
	0x3a, 0xb7, 0x4b, 0x92, 0xae, 0x16, 0x78, 0x2e, 0x80, 0x74, 0xdf, 0x2c, 0x21, 0xb9, 0x50, 0xa9,
	0xe0, 0x63, 0x9d, 0x4f, 0x3d, 0x6a, 0xa3, 0x04, 0xbb, 0x5a, 0x92, 0xa2, 0xf7, 0x44, 0xf2, 0x85,
	0xb9, 0xbc, 0x73, 0xc7, 0xa4, 0xc7, 0x3c, 0xc7, 0x39, 0xc8, 0xed, 0x45, 0xe0, 0xa4, 0x53, 0xf9,
	0xd5, 0x75, 0x5a, 0xba, 0x2c, 0x49, 0x06, 0x5e, 0xc3, 0x96, 0xa4, 0x50, 0xa3, 0xdc, 0x5f, 0x40,
	0x43, 0xcf, 0x56, 0x40, 0x0b, 0x3d, 0x53, 0x97, 0xcc, 0xd3, 0xee, 0x0a, 0x1f, 0xd8, 0xee, 0x4a,
	0x56, 0x24, 0x03, 0x8b, 0x4d, 0x22, 0xbb, 0x9d, 0xc9, 0x0e, 0x07, 0xce, 0x64, 0x8f, 0x3c, 0xdc,
	0x1d, 0xdf, 0xd2, 0x14, 0xcb, 0x2e, 0xf3, 0xba, 0xb9, 0x6c, 0xa2, 0xe2, 0x2c, 0x06, 0x4d, 0x67,
	0x5f, 0x83, 0xf1, 0x8a, 0xdc, 0x90, 0xbf, 0x26, 0x3a, 0xa5, 0x0e, 0x66, 0x93, 0xf3, 0x03, 0xdc,
	0x38, 0x59, 0xdb, 0xaf, 0x75, 0xd5, 0x4d, 0xd8, 0x44, 0x29, 0x25, 0x67, 0x80, 0x7f, 0xd3, 0xc9,
	0x5e, 0x22, 0x34, 0x30, 0x98, 0x0b, 0xd8, 0xe0, 0xea, 0xda, 0x2c, 0x4f, 0xee, 0x82, 0xfa, 0xdb,
	0x5c, 0x0b, 0x90, 0x76, 0x9c, 0x8a, 0xb6, 0xad, 0x2a, 0x9a, 0x54, 0x13, 0x5b, 0x86, 0x42, 0x3d,
	0x56, 0xe7, 0xb2, 0xcc, 0x5f, 0x20, 0x24, 0xa4, 0x6c, 0xb0, 0xab, 0x0c, 0xea, 0x8e, 0xa1, 0x2c,
	0x7c, 0xf1, 0x83, 0x36, 0xba, 0x04, 0x17, 0xe1, 0x8c, 0xd3, 0x0f, 0xb8, 0x3e, 0xef, 0xb4, 0x04,
	0x34, 0x35, 0xbb, 0xa8, 0xeb, 0x59, 0xaa, 0x3a, 0x59, 0x22, 0x4e, 0x96, 0xca, 0xc3, 0xc7, 0x49,
	0xee, 0x79, 0x21, 0x7f, 0x31, 0x3f, 0x9f, 0xfb, 0x31, 0x02, 0x8e, 0x9a, 0xa0, 0xba, 0x54, 0xc5,
	0x57, 0xb1, 0x25, 0xc9, 0x8a, 0xc9, 0xdf, 0x82, 0xb8, 0xec, 0x7c, 0xa3, 0x3a, 0x15, 0x6c, 0xa3,
	0x12, 0x0f, 0x77, 0x47, 0xec, 0x02, 0x18, 0xdd, 0xa0, 0x0e, 0x0d, 0xbe, 0x08, 0x49, 0xe7, 0xa6,
	0xa8, 0x89, 0x95, 0xba, 0x28, 0xeb, 0xac, 0xf0, 0xe9, 0xb9, 0x08, 0x24, 0x24, 0x18, 0x48, 0x19,
	0x2b, 0xf5, 0x15, 0xdd, 0x8b, 0xd3, 0x90, 0x2c, 0xbc, 0x2d, 0x39, 0x6a, 0xe6, 0x04, 0x1d, 0x6f,
	0x21, 0x61, 0x9c, 0x41, 0xdc, 0xb0, 0x01, 0x72, 0xbf, 0x0a, 0x43, 0xaa, 0x6f, 0x53, 0xf9, 0x6b,
	0x90, 0x62, 0xb7, 0x1a, 0x58, 0xad, 0xc8, 0xb9, 0xbc, 0x38, 0xe8, 0x6e, 0xa5, 0x90, 0x64, 0x38,
	0x76, 0x45, 0x68, 0x45, 0xe7, 0xe7, 0x21, 0xe6, 0x1e, 0x34, 0x5b, 0xfa, 0xe3, 0x1f, 0xb5, 0xd1,
	0x30, 0x3d, 0x14, 0xce, 0x89, 0x63, 0x9a, 0x1f, 0x12, 0x5c, 0x50, 0xfe, 0x65, 0x88, 0xb9, 0x07,
	0x2d, 0x1c, 0xec, 0xa0, 0xb9, 0x08, 0xfc, 0xa5, 0x8e, 0xe8, 0xba, 0xa6, 0x29, 0xde, 0x36, 0xc5,
	0x58, 0x17, 0x3f, 0x47, 0xda, 0x0d, 0x4d, 0x53, 0x68, 0xca, 0xf5, 0x05, 0x88, 0x99, 0xf7, 0x5b,
	0x36, 0xc2, 0xb0, 0x0f, 0x42, 0xd4, 0xbc, 0xdf, 0x22, 0x80, 0x0b, 0x7f, 0x8b, 0x7e, 0x7d, 0x25,
	0xfe, 0x12, 0x55, 0x88, 0xb9, 0xfc, 0xfc, 0xe3, 0x36, 0xfa, 0x3e, 0x82, 0xd3, 0x90, 0xba, 0x69,
	0xd3, 0xcb, 0xda, 0xd3, 0xcf, 0xae, 0x6c, 0x4c, 0xa6, 0x7d, 0x96, 0x11, 0x8e, 0x41, 0x9c, 0x18,
	0x16, 0x3b, 0x43, 0x83, 0xce, 0x0a, 0x91, 0x04, 0xcd, 0xb1, 0x14, 0xe4, 0xbb, 0x33, 0x23, 0x2f,
	0x69, 0x22, 0xab, 0x8d, 0x98, 0xf6, 0x99, 0x26, 0x4d, 0xf1, 0x5e, 0xbd, 0xe3, 0x52, 0x76, 0x66,
	0xe3, 0x86, 0xb3, 0x23, 0x5c, 0x34, 0xf7, 0x93, 0x61, 0x38, 0xbe, 0xef, 0x99, 0x7b, 0xba, 0xc2,
	0xfc, 0xeb, 0xc0, 0xdb, 0xd6, 0x5d, 0x52, 0xc4, 0x8e, 0xf6, 0xdb, 0x3b, 0x76, 0x76, 0xc0, 0x91,
	0xef, 0x3d, 0x3d, 0x42, 0xca, 0x21, 0xe3, 0x8e, 0x10, 0xda, 0xee, 0xbd, 0xc4, 0x0e, 0xed, 0xc8,
	0x33, 0xd0, 0x76, 0xc8, 0x74, 0x68, 0xeb, 0x30, 0x51, 0x69, 0x8a, 0x5b, 0xf6, 0xe1, 0x17, 0xab,
	0x7a, 0x4b, 0xac, 0x6a, 0x2d, 0xd5, 0xae, 0xd2, 0x8f, 0x0f, 0x6c, 0xf4, 0x97, 0xd6, 0xc8, 0x9a,
	0x31, 0xb3, 0xb1, 0xa4, 0xb7, 0x96, 0x08, 0x9e, 0x5d, 0x3a, 0x2e, 0xad, 0x89, 0x73, 0xe2, 0xdd,
	0xa5, 0x8d, 0x3b, 0x42, 0xaa, 0xd2, 0xec, 0x81, 0xe0, 0x35, 0x48, 0x57, 0x9a, 0xb4, 0x68, 0x28,
	0x36, 0x71, 0x53, 0x33, 0x76, 0x44, 0x53, 0x7e, 0x60, 0xc7, 0xd7, 0xe3, 0x03, 0xa7, 0x63, 0x33,
	0x5c, 0xa3, 0x38, 0x65, 0xf9, 0x01, 0x2e, 0xa5, 0x3f, 0x6a, 0xa3, 0x64, 0x69, 0x4d, 0x2c, 0x5c,
	0x14, 0x6f, 0x94, 0xc4, 0xb5, 0x6b, 0x6b, 0xb7, 0x84, 0xd7, 0x04, 0xae, 0xd2, 0xec, 0x06, 0x5b,
	0xf8, 0x05, 0xfa, 0xf5, 0x95, 0xe1, 0x02, 0x51, 0xd0, 0xc7, 0x6d, 0xf4, 0x2f, 0x08, 0xd2, 0xac,
	0x71, 0xd0, 0x55, 0x11, 0x28, 0x32, 0x43, 0xa6, 0x4a, 0x8a, 0x53, 0x78, 0x9b, 0x9c, 0x82, 0x93,
	0xfd, 0x7b, 0x3a, 0xe3, 0xfe, 0x22, 0x38, 0xce, 0x2d, 0x62, 0x2f, 0x4e, 0xff, 0x5e, 0x75, 0xe1,
	0x1c, 0x5d, 0x6f, 0x35, 0x2b, 0xd8, 0xc8, 0x6a, 0xf5, 0xac, 0x63, 0x73, 0x97, 0x36, 0xee, 0x98,
	0x93, 0x19, 0xff, 0x9d, 0xc8, 0x22, 0x38, 0x03, 0xe3, 0x64, 0x22, 0x04, 0xc3, 0x5e, 0xb1, 0xc9,
	0x63, 0xbe, 0x6b, 0x98, 0x45, 0x76, 0x1c, 0x90, 0xfb, 0xd6, 0x04, 0x8c, 0xdf, 0x50, 0xb4, 0x8a,
	0xa4, 0x94, 0x75, 0x5c, 0xa5, 0xca, 0x5c, 0x85, 0x23, 0xf5, 0x79, 0xb1, 0x22, 0x37, 0x44, 0x59,
	0x17, 0xa5, 0x6d, 0xd3, 0x6d, 0x57, 0xdb, 0xd1, 0xe1, 0x99, 0xc0, 0x77, 0x23, 0x58, 0x30, 0x35,
	0x24, 0xa4, 0xea, 0xec, 0xfb, 0xb6, 0xe9, 0x34, 0x8a, 0x31, 0x4c, 0xe8, 0x92, 0xa2, 0x89, 0x92,
	0x62, 0x69, 0x62, 0x7d, 0xdb, 0xe5, 0x11, 0x3e, 0xd0, 0x97, 0xf6, 0x15, 0xa7, 0x3a, 0x6c, 0x74,
	0x67, 0x68, 0xdb, 0x61, 0xf3, 0x75, 0x38, 0xde, 0x99, 0x8b, 0x27, 0x32, 0xa0, 0x7d, 0x0f, 0x3b,
	0x05, 0x79, 0x29, 0xc0, 0x7c, 0xfc, 0xa2, 0x22, 0xbb, 0xec, 0xee, 0x34, 0x1e, 0xd9, 0x0c, 0xbb,
	0xcd, 0xc2, 0x06, 0x64, 0x9c, 0x88, 0xd1, 0x4e, 0x2c, 0x3b, 0x25, 0x95, 0x41, 0x17, 0xb8, 0x96,
	0x91, 0x70, 0x94, 0xe1, 0xf5, 0xa4, 0xc8, 0xfc, 0x26, 0x70, 0x7d, 0x94, 0x46, 0x0e, 0xbc, 0x45,
	0xb0, 0x7f, 0xbe, 0xed, 0xde, 0x3f, 0x4d, 0x6e, 0xf6, 0x70, 0xba, 0x0a, 0xbc, 0x23, 0x3b, 0x09,
	0xbe, 0xa4, 0x6a, 0x15, 0x9b, 0xe6, 0xa0, 0x90, 0x77, 0x39, 0x24, 0x38, 0xdd, 0x96, 0xb2, 0xb9,
	0xb9, 0x48, 0xe1, 0xf9, 0x0a, 0xf0, 0x58, 0x25, 0x9f, 0x6a, 0x5e, 0x2a, 0xe3, 0x07, 0x6e, 0x72,
	0x5f, 0x65, 0x8d, 0x09, 0x1a, 0x12, 0x38, 0x46, 0xaf, 0xc3, 0xe3, 0x4d, 0x9f, 0x9b, 0x15, 0xb1,
	0x67, 0xba, 0x3d, 0x13, 0xfe, 0x70, 0x17, 0x2d, 0x87, 0xfb, 0xee, 0x54, 0xf0, 0x75, 0xe0, 0xeb,
	0xee, 0xf3, 0x0c, 0x97, 0x47, 0xfc, 0xe0, 0x0b, 0x4e, 0x7e, 0x6f, 0x3a, 0x1c, 0x2e, 0xa9, 0x7a,
	0xef, 0x28, 0x7f, 0x13, 0xd2, 0x96, 0x21, 0xa9, 0xa6, 0x2e, 0x19, 0xd8, 0x33, 0x99, 0x41, 0xef,
	0x03, 0x18, 0x31, 0xde, 0x83, 0xe7, 0x50, 0x7b, 0x85, 0x19, 0x2d, 0x59, 0xad, 0x6b, 0x19, 0x8e,
	0x46, 0x94, 0x9f, 0x1f, 0x20, 0x2c, 0x31, 0x85, 0x2b, 0x6a, 0x5d, 0xb3, 0x3d, 0x15, 0xf9, 0xc5,
	0x5f, 0x85, 0xe1, 0xba, 0x82, 0xb1, 0x95, 0xf9, 0x79, 0x94, 0xa2, 0x9f, 0xec, 0x41, 0xef, 0x8e,
	0xca, 0x92, 0x0f, 0x77, 0x6d, 0x70, 0x96, 0xfa, 0x08, 0xf6, 0x5f, 0x7c, 0x03, 0x52, 0x55, 0x45,
	0x6b, 0xd5, 0xc4, 0xaa, 0x81, 0x6b, 0x58, 0xb5, 0x64, 0x49, 0x31, 0x33, 0xbf, 0x08, 0x42, 0xf1,
	0xc4, 0xc3, 0xdd, 0x7e, 0x54, 0x87, 0x3a, 0x47, 0x47, 0x96, 0x3a, 0x03, 0xfc, 0xeb, 0x10, 0xb7,
	0xea, 0xce, 0xf5, 0xb3, 0x7f, 0x0d, 0xc2, 0x60, 0xea, 0xe1, 0xee, 0x84, 0x85, 0x0d, 0x43, 0xaa,
	0x6b, 0x46, 0xd3, 0xc6, 0xc4, 0x16, 0x36, 0x5c, 0x1e, 0x31, 0xab, 0xce, 0xee, 0x9e, 0xd5, 0x00,
	0x3a, 0x4f, 0x8f, 0x32, 0xff, 0x16, 0x84, 0xf8, 0x8b, 0x0f, 0x77, 0xf9, 0xfe, 0x67, 0x4b, 0x8c,
	0x74, 0x27, 0x48, 0x17, 0xe2, 0xf6, 0x60, 0x19, 0x5b, 0xfc, 0x19, 0x80, 0xce, 0xe3, 0x83, 0xcc,
	0x2f, 0xa3, 0x5d, 0x61, 0xa8, 0x4e, 0x23, 0x5d, 0x32, 0x4a, 0x92, 0x5e, 0x11, 0x46, 0x35, 0x43,
	0x6e, 0x90, 0xec, 0x4a, 0xd3, 0x94, 0xcc, 0xbf, 0x07, 0x91, 0xe8, 0xb9, 0x87, 0xbb, 0x5e, 0xa4,
	0x7e, 0x51, 0xc0, 0x1e, 0x25, 0xf1, 0x12, 0x7f, 0x1f, 0x32, 0x1d, 0x23, 0x23, 0xba, 0x27, 0xcc,
	0xc0, 0x75, 0x33, 0xf3, 0x2b, 0x9b, 0xdb, 0x74, 0x80, 0xf3, 0xe5, 0xf0, 0xa6, 0xd7, 0xfa, 0x84,
	0xa3, 0x1d, 0x92, 0x1e, 0x00, 0x93, 0x7f, 0x03, 0xdc, 0x80, 0x43, 0x54, 0x95, 0x8a, 0xad, 0xb3,
	0x9f, 0xd8, 0x89, 0xd5, 0x40, 0x2e, 0x0c, 0x69, 0xfd, 0x66, 0x89, 0x68, 0x2c, 0xe3, 0x92, 0x74,
	0x68, 0xad, 0x2b, 0x15, 0xaa, 0xc8, 0x5f, 0x85, 0x04, 0x7d, 0xbc, 0xe5, 0xf8, 0xe8, 0xcc, 0x93,
	0x64, 0xe0, 0x64, 0x63, 0xe2, 0xe1, 0x6e, 0x37, 0x32, 0x65, 0x31, 0x46, 0x3e, 0x39, 0x61, 0x00,
	0x7f, 0x0b, 0x62, 0x55, 0xad, 0xd9, 0x94, 0xd4, 0x9a, 0x99, 0xf9, 0x0f, 0x7b, 0x6d, 0x06, 0x5a,
	0xb7, 0x56, 0xa3, 0x81, 0x4d, 0x0b, 0xd7, 0x96, 0x18, 0x12, 0x93, 0xdb, 0x25, 0xc2, 0xdf, 0x86,
	0x38, 0xbd, 0x03, 0x47, 0x57, 0xfb, 0xd7, 0x41, 0xf6, 0x36, 0xf3, 0x70, 0x37, 0x42, 0x50, 0xfa,
	0x37, 0x35, 0x46, 0x3e, 0xd3, 0x55, 0x56, 0x20, 0x7d, 0xff, 0x12, 0xf5, 0x1d, 0x72, 0x9d, 0x5e,
	0x2a, 0xb6, 0x8f, 0xca, 0x7f, 0x06, 0xa1, 0x7f, 0xea, 0xe1, 0xae, 0x1f, 0xb2, 0x73, 0x52, 0x52,
	0xf7, 0x2f, 0x11, 0xef, 0x41, 0x87, 0xd8, 0x91, 0x29, 0x83, 0xd3, 0xa9, 0xb5, 0xdd, 0xed, 0x6f,
	0xa2, 0x34, 0x6e, 0x7b, 0xf1, 0x60, 0x47, 0x45, 0x19, 0x3a, 0x15, 0x14, 0x61, 0xd4, 0xf4, 0x3c,
	0x7c, 0xbb, 0x03, 0xe9, 0xba, 0xac, 0x4a, 0x8a, 0xfc, 0x00, 0x1b, 0xa2, 0xfb, 0x98, 0x30, 0xf3,
	0x5b, 0x5b, 0x55, 0x26, 0x67, 0xec, 0xf7, 0x86, 0x33, 0xce, 0x7b, 0xc3, 0x99, 0xdb, 0x0e, 0x48,
	0x87, 0x1e, 0xef, 0x12, 0x70, 0x07, 0xf9, 0xb3, 0x30, 0x56, 0xd7, 0x8c, 0x2a, 0x16, 0x6b, 0x58,
	0xc1, 0x16, 0xce, 0xfc, 0x8e, 0xd0, 0x8b, 0x79, 0x64, 0xa0, 0xa3, 0x57, 0xe9, 0x60, 0xe9, 0x2c,
	0x1c, 0x73, 0x26, 0xa6, 0x1b, 0xda, 0x96, 0x5c, 0xc3, 0x86, 0xf7, 0x36, 0x23, 0xb8, 0xb7, 0x19,
	0x67, 0xf3, 0x17, 0x4a, 0x67, 0xe0, 0x28, 0x7d, 0xe9, 0xe5, 0x39, 0x4b, 0x9e, 0x96, 0xea, 0xf0,
	0x93, 0x36, 0x8a, 0xec, 0xb5, 0x51, 0x78, 0x3e, 0x7f, 0xb1, 0x54, 0x84, 0x23, 0xc4, 0x49, 0xf6,
	0x43, 0x1e, 0x67, 0x15, 0x9d, 0x31, 0xfa, 0xf2, 0xe7, 0x42, 0xbe, 0x30, 0xf7, 0xad, 0x4f, 0x51,
	0xc4, 0xc2, 0xa6, 0x55, 0x3a, 0x07, 0x69, 0xef, 0x22, 0x7b, 0x2b, 0xf4, 0x24, 0x3e, 0x89, 0xee,
	0xb5, 0xd1, 0xc8, 0x25, 0xda, 0xfb, 0xfd, 0xa4, 0x8d, 0x50, 0x4f, 0x85, 0xde, 0xee, 0xd6, 0xd9,
	0xdd, 0xd5, 0x28, 0x17, 0xcb, 0x7d, 0x1b, 0x41, 0xaa, 0x4f, 0x37, 0xf9, 0xe7, 0x21, 0xca, 0xf4,
	0x92, 0xa5, 0x36, 0xe0, 0x96, 0x7c, 0x62, 0x82, 0x33, 0x44, 0xa0, 0xb6, 0x25, 0x43, 0x95, 0xd5,
	0x06, 0xcb, 0x9e, 0xbb, 0xa0, 0xd8, 0x10, 0x9f, 0x87, 0xd1, 0x1a, 0x36, 0xab, 0x86, 0x4c, 0x7b,
	0xc1, 0x3d, 0xb9, 0x79, 0xe6, 0x9d, 0x57, 0x04, 0xef, 0x70, 0xee, 0x3d, 0x04, 0xc9, 0x1e, 0x3b,
	0xc2, 0xbf, 0xd8, 0x9f, 0x6a, 0x79, 0x9a, 0x03, 0x9d, 0x2c, 0xeb, 0x1e, 0xc4, 0x1c, 0x9b, 0x15,
	0xcc, 0x38, 0x9e, 0x7c, 0xb8, 0xeb, 0x62, 0xf8, 0x1c, 0x22, 0x67, 0x68, 0x61, 0xe4, 0x71, 0x9b,
	0x7c, 0xc9, 0x7d, 0x97, 0x08, 0xd7, 0x6d, 0x7e, 0xf8, 0x23, 0x30, 0xb2, 0xa5, 0x57, 0x45, 0x99,
	0xad, 0x94, 0x30, 0xbc, 0xa5, 0x57, 0x57, 0x6a, 0xfc, 0x51, 0x18, 0x31, 0x70, 0xc3, 0x9d, 0xb0,
	0xc0, 0xfe, 0xe2, 0xd7, 0x20, 0x49, 0xe3, 0x6b, 0x76, 0xcf, 0x87, 0xd8, 0xbc, 0x30, 0x95, 0xf4,
	0x05, 0xff, 0xd2, 0xf2, 0xbd, 0xb2, 0x7d, 0x13, 0x69, 0xa5, 0x46, 0x8b, 0x95, 0x42, 0x42, 0xda,
	0x36, 0xd9, 0x17, 0xb5, 0xae, 0xb9, 0x92, 0xfd, 0xff, 0x18, 0x4c, 0xee, 0x7f, 0x71, 0xf4, 0xa0,
	0xa7, 0x9b, 0xe9, 0x81, 0x7d, 0xad, 0xa7, 0x7d, 0xba, 0x39, 0x31, 0x90, 0xda, 0xd3, 0x3f, 0xdd,
	0x3c, 0x32, 0x90, 0xde, 0xa1, 0x3f, 0xdd, 0x44, 0x9f, 0xf9, 0xe9, 0x26, 0xfa, 0x0c, 0x4f, 0x37,
	0xd1, 0x21, 0x3e, 0xdd, 0x44, 0x87, 0xf0, 0x74, 0x13, 0x7d, 0xc6, 0xa7, 0x9b, 0xa1, 0xc3, 0x7c,
	0xba, 0x19, 0xea, 0x7d, 0xba, 0xb9, 0x70, 0xf4, 0xf1, 0x15, 0xbf, 0xc7, 0xd2, 0xa5, 0x92, 0xff,
	0x63, 0xcd, 0xb3, 0x8f, 0xda, 0x28, 0xfd, 0xa4, 0x8d, 0xf8, 0xbd, 0x36, 0x8a, 0x15, 0x2e, 0xe7,
	0x8b, 0xb3, 0xf9, 0x62, 0xe1, 0xdd, 0x4f, 0x91, 0x1f, 0x70, 0xe9, 0x6a, 0xff, 0x33, 0xce, 0xc2,
	0xe0, 0x67, 0x9c, 0xef, 0x7e, 0x8a, 0x7a, 0x51, 0x4a, 0x2f, 0xf7, 0xbf, 0xec, 0x3c, 0xed, 0xfb,
	0xb2, 0x93, 0x20, 0xf7, 0x40, 0xf6, 0x3c, 0xf6, 0xdc, 0xef, 0x76, 0x05, 0xcf, 0xa5, 0xd9, 0x23,
	0xd0, 0xb3, 0x10, 0x73, 0x62, 0x7a, 0xfe, 0x39, 0x18, 0x25, 0xae, 0xa5, 0xcb, 0x8e, 0x0b, 0x60,
	0x9a, 0x9b, 0xcc, 0xca, 0xe7, 0x7e, 0x37, 0x0c, 0xe3, 0x4b, 0x06, 0x96, 0x2c, 0xec, 0xd6, 0x01,
	0xde, 0x38, 0xac, 0x3a, 0x80, 0x7f, 0x05, 0x40, 0x3c, 0xbc, 0x0a, 0x80, 0x7f, 0xee, 0x7f, 0xf8,
	0xd9, 0x77, 0xe5, 0x90, 0xb3, 0xef, 0xff, 0xbe, 0xbc, 0xfb, 0x2b, 0x87, 0x95, 0x77, 0xfb, 0x65,
	0xdc, 0x0b, 0xa9, 0xc7, 0x57, 0x7a, 0x8a, 0x46, 0xa5, 0x8b, 0xfb, 0xc7, 0x44, 0x27, 0xde, 0xfd,
	0x14, 0xed, 0x37, 0x58, 0x9a, 0xdb, 0x37, 0x3c, 0x9a, 0x7c, 0xf7, 0x53, 0xb4, 0xcf, 0xd8, 0x80,
	0x48, 0xe9, 0xdd, 0x4f, 0x91, 0xff, 0x90, 0xef, 0x61, 0x19, 0xe5, 0xc6, 0x72, 0x7f, 0x3d, 0x02,
	0x49, 0xe6, 0x1e, 0x5d, 0xd5, 0xaf, 0x0d, 0x56, 0xfd, 0xd9, 0xa7, 0x7d, 0x41, 0xe2, 0x7f, 0x02,
	0xea, 0x03, 0x4f, 0xc0, 0x85, 0x67, 0xb8, 0x3a, 0xf6, 0xe7, 0x83, 0xf0, 0x3f, 0x7e, 0x10, 0xae,
	0xef, 0x7f, 0x10, 0xce, 0xf6, 0x26, 0x07, 0x7f, 0x2c, 0x07, 0xc3, 0xce, 0x06, 0xfc, 0x8f, 0xc7,
	0x47, 0x71, 0x18, 0xbd, 0x81, 0xad, 0x3f, 0x7b, 0x85, 0x3f, 0x1f, 0x86, 0xc1, 0x87, 0x81, 0xff,
	0xf2, 0x61, 0xd5, 0x61, 0xfd, 0x4a, 0xb0, 0xd2, 0x61, 0x96, 0x60, 0xfd, 0xab, 0xaf, 0x37, 0x9e,
	0xba, 0xfa, 0xba, 0x4f, 0xe1, 0x75, 0xe5, 0x33, 0x56, 0x83, 0x3c, 0x75, 0xa0, 0x9b, 0xcf, 0x5a,
	0xee, 0xf0, 0xad, 0x72, 0xe4, 0x7c, 0xab, 0x1c, 0x5d, 0xc5, 0x8d, 0x3f, 0x49, 0xdf, 0x5e, 0x9a,
	0xf1, 0xaf, 0x82, 0x1c, 0x23, 0xd1, 0xbc, 0xcf, 0xc0, 0xea, 0x48, 0xec, 0x37, 0x51, 0xee, 0xb7,
	0xd1, 0xe9, 0xf7, 0x46, 0xe1, 0xf8, 0xbe, 0x6f, 0x5b, 0xf8, 0x3c, 0x9c, 0xde, 0x58, 0xbc, 0x79,
	0x4b, 0x5c, 0xbc, 0x79, 0xfb, 0x96, 0x78, 0xfd, 0x9e, 0xb8, 0x78, 0xaf, 0x2c, 0xae, 0xac, 0x97,
	0x6f, 0x2f, 0xae, 0x2f, 0x5d, 0x13, 0x6f, 0xbf, 0xb6, 0x71, 0x4d, 0x5c, 0x9b, 0x13, 0xbf, 0x74,
	0x73, 0x51, 0xb8, 0x71, 0x8d, 0x1b, 0xe2, 0xcf, 0xc1, 0x99, 0x83, 0xa1, 0x8b, 0x0c, 0x1c, 0x05,
	0x03, 0x9f, 0x63, 0xe0, 0x21, 0xfe, 0x2c, 0x7c, 0xe1, 0x20, 0xf0, 0x79, 0xd1, 0x06, 0x0e, 0x07,
	0x11, 0x7c, 0xde, 0x11, 0x3c, 0x12, 0x44, 0x92, 0x79, 0x57, 0xf0, 0xe1, 0x60, 0xe0, 0x8e, 0xe0,
	0x23, 0xfc, 0x0c, 0x4c, 0x1f, 0x0c, 0x5e, 0x70, 0xc8, 0x47, 0x03, 0xc9, 0xbe, 0xce, 0x66, 0x1a,
	0x0b, 0x24, 0xcc, 0xba, 0x33, 0xd5, 0x78, 0x20, 0x61, 0xd6, 0xdd, 0xb9, 0x42, 0x40, 0x78, 0x67,
	0xb2, 0xa3, 0x01, 0x76, 0x69, 0x69, 0x8e, 0xc9, 0x3e, 0x16, 0x60, 0xa6, 0x4b, 0xae, 0x7a, 0x25,
	0x02, 0xcc, 0x74, 0xa9, 0xa3, 0x5e, 0xe3, 0xc1, 0xc0, 0x1d, 0xc1, 0x93, 0xc1, 0xc0, 0x2f, 0x31,
	0x70, 0x2e, 0xc8, 0x3c, 0x1d, 0x6d, 0x4c, 0x05, 0x99, 0xa7, 0xab, 0x8d, 0x7c, 0x10, 0x49, 0x3a,
	0xda, 0x98, 0x0e, 0x06, 0xee, 0xcc, 0x73, 0x22, 0x18, 0xf8, 0x65, 0x06, 0x7e, 0x24, 0xc0, 0xfe,
	0x2f, 0xcd, 0x8b, 0x05, 0x67, 0x5d, 0x8e, 0x06, 0x9a, 0xaa, 0xa3, 0xbc, 0xc7, 0x02, 0x09, 0xe3,
	0x2a, 0x6f, 0x26, 0x90, 0x30, 0x1d, 0xe5, 0x3d, 0x1e, 0x10, 0xde, 0x59, 0x9b, 0xc9, 0x80, 0xf0,
	0xce, 0xe2, 0x9c, 0xe0, 0xcf, 0xc3, 0xd9, 0x00, 0xf0, 0xee, 0xea, 0x9c, 0x0c, 0x30, 0x5f, 0xa1,
	0xb3, 0xb5, 0xa7, 0xa6, 0xe7, 0xe1, 0x88, 0xef, 0xc5, 0x11, 0x3e, 0x01, 0x9d, 0x6b, 0x23, 0xdc,
	0x10, 0xfb, 0xf3, 0x92, 0xfd, 0x27, 0x9a, 0xde, 0x00, 0xae, 0xf7, 0xfa, 0x07, 0xcf, 0xc3, 0x38,
	0x05, 0x71, 0xef, 0x7e, 0x70, 0x43, 0x7c, 0x1a, 0x7a, 0x2f, 0x84, 0x70, 0x88, 0x7d, 0xbc, 0x50,
	0xf4, 0x7c, 0x0c, 0x4d, 0xe7, 0x61, 0xd4, 0xfb, 0x6f, 0xef, 0xc5, 0x20, 0xb2, 0x7e, 0x6b, 0xfd,
	0x1a, 0xe3, 0xbc, 0x72, 0x63, 0x65, 0x43, 0x5c, 0xdc, 0x58, 0xe3, 0xd0, 0x64, 0xe4, 0x51, 0x1b,
	0x0d, 0x95, 0xbe, 0x8d, 0x9e, 0xfc, 0x6c, 0x6a, 0xe8, 0xc3, 0x9f, 0x4d, 0x0d, 0x7d, 0xf2, 0xb3,
	0x29, 0xf4, 0xce, 0xde, 0x14, 0xfa, 0x9b, 0xbd, 0x29, 0xf4, 0xa3, 0xbd, 0x29, 0xf4, 0x64, 0x6f,
	0x0a, 0x7d, 0xb8, 0x37, 0x85, 0x7e, 0xba, 0x37, 0x85, 0x7e, 0xbe, 0x37, 0x35, 0xf4, 0xc9, 0xde,
	0x14, 0xfa, 0xce, 0xc7, 0x53, 0x43, 0x8f, 0x3e, 0x9e, 0x42, 0x4f, 0x3e, 0x9e, 0x1a, 0xfa, 0xf0,
	0xe3, 0xa9, 0xa1, 0xd7, 0x6f, 0x35, 0x34, 0xfd, 0x7e, 0x63, 0x66, 0x4b, 0x53, 0x68, 0x63, 0x72,
	0xa6, 0x65, 0x9e, 0x77, 0x3b, 0x94, 0xe7, 0x1c, 0x0f, 0x7b, 0xce, 0x19, 0x3e, 0xaf, 0x57, 0x1a,
	0xda, 0x79, 0xfc, 0x96, 0xc5, 0xfe, 0x69, 0xc1, 0xfe, 0x7f, 0xd8, 0xb1, 0x32, 0x42, 0x83, 0x83,
	0x0b, 0xff, 0x15, 0x00, 0x00, 0xff, 0xff, 0x75, 0xc1, 0xe7, 0xd8, 0xfc, 0x51, 0x00, 0x00,
}

func (x PaloAltoFWAWSInstanceType) String() string {
	s, ok := PaloAltoFWAWSInstanceType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x BMNodeVirtualCpuCount) String() string {
	s, ok := BMNodeVirtualCpuCount_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x BMNodeMemorySize) String() string {
	s, ok := BMNodeMemorySize_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ServiceType) String() string {
	s, ok := ServiceType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *ForwardingServiceType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForwardingServiceType)
	if !ok {
		that2, ok := that.(ForwardingServiceType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *EndpointServiceType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndpointServiceType)
	if !ok {
		that2, ok := that.(EndpointServiceType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.InsideVipChoice == nil {
		if this.InsideVipChoice != nil {
			return false
		}
	} else if this.InsideVipChoice == nil {
		return false
	} else if !this.InsideVipChoice.Equal(that1.InsideVipChoice) {
		return false
	}
	if that1.ExternalVipChoice == nil {
		if this.ExternalVipChoice != nil {
			return false
		}
	} else if this.ExternalVipChoice == nil {
		return false
	} else if !this.ExternalVipChoice.Equal(that1.ExternalVipChoice) {
		return false
	}
	if that1.TcpPortChoice == nil {
		if this.TcpPortChoice != nil {
			return false
		}
	} else if this.TcpPortChoice == nil {
		return false
	} else if !this.TcpPortChoice.Equal(that1.TcpPortChoice) {
		return false
	}
	if that1.UdpPortChoice == nil {
		if this.UdpPortChoice != nil {
			return false
		}
	} else if this.UdpPortChoice == nil {
		return false
	} else if !this.UdpPortChoice.Equal(that1.UdpPortChoice) {
		return false
	}
	return true
}
func (this *EndpointServiceType_AutomaticVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndpointServiceType_AutomaticVip)
	if !ok {
		that2, ok := that.(EndpointServiceType_AutomaticVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AutomaticVip.Equal(that1.AutomaticVip) {
		return false
	}
	return true
}
func (this *EndpointServiceType_ConfiguredVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndpointServiceType_ConfiguredVip)
	if !ok {
		that2, ok := that.(EndpointServiceType_ConfiguredVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ConfiguredVip != that1.ConfiguredVip {
		return false
	}
	return true
}
func (this *EndpointServiceType_DisableAdvertiseOnSloIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndpointServiceType_DisableAdvertiseOnSloIp)
	if !ok {
		that2, ok := that.(EndpointServiceType_DisableAdvertiseOnSloIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableAdvertiseOnSloIp.Equal(that1.DisableAdvertiseOnSloIp) {
		return false
	}
	return true
}
func (this *EndpointServiceType_AdvertiseOnSloIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndpointServiceType_AdvertiseOnSloIp)
	if !ok {
		that2, ok := that.(EndpointServiceType_AdvertiseOnSloIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnSloIp.Equal(that1.AdvertiseOnSloIp) {
		return false
	}
	return true
}
func (this *EndpointServiceType_AdvertiseOnSloIpExternal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndpointServiceType_AdvertiseOnSloIpExternal)
	if !ok {
		that2, ok := that.(EndpointServiceType_AdvertiseOnSloIpExternal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnSloIpExternal.Equal(that1.AdvertiseOnSloIpExternal) {
		return false
	}
	return true
}
func (this *EndpointServiceType_DefaultTcpPorts) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndpointServiceType_DefaultTcpPorts)
	if !ok {
		that2, ok := that.(EndpointServiceType_DefaultTcpPorts)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultTcpPorts.Equal(that1.DefaultTcpPorts) {
		return false
	}
	return true
}
func (this *EndpointServiceType_HttpPort) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndpointServiceType_HttpPort)
	if !ok {
		that2, ok := that.(EndpointServiceType_HttpPort)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpPort.Equal(that1.HttpPort) {
		return false
	}
	return true
}
func (this *EndpointServiceType_HttpsPort) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndpointServiceType_HttpsPort)
	if !ok {
		that2, ok := that.(EndpointServiceType_HttpsPort)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpsPort.Equal(that1.HttpsPort) {
		return false
	}
	return true
}
func (this *EndpointServiceType_CustomTcpPorts) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndpointServiceType_CustomTcpPorts)
	if !ok {
		that2, ok := that.(EndpointServiceType_CustomTcpPorts)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomTcpPorts.Equal(that1.CustomTcpPorts) {
		return false
	}
	return true
}
func (this *EndpointServiceType_NoTcpPorts) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndpointServiceType_NoTcpPorts)
	if !ok {
		that2, ok := that.(EndpointServiceType_NoTcpPorts)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoTcpPorts.Equal(that1.NoTcpPorts) {
		return false
	}
	return true
}
func (this *EndpointServiceType_NoUdpPorts) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndpointServiceType_NoUdpPorts)
	if !ok {
		that2, ok := that.(EndpointServiceType_NoUdpPorts)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoUdpPorts.Equal(that1.NoUdpPorts) {
		return false
	}
	return true
}
func (this *EndpointServiceType_CustomUdpPorts) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndpointServiceType_CustomUdpPorts)
	if !ok {
		that2, ok := that.(EndpointServiceType_CustomUdpPorts)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomUdpPorts.Equal(that1.CustomUdpPorts) {
		return false
	}
	return true
}
func (this *ServiceNodesAWSType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceNodesAWSType)
	if !ok {
		that2, ok := that.(ServiceNodesAWSType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NodeName != that1.NodeName {
		return false
	}
	if this.AwsAzName != that1.AwsAzName {
		return false
	}
	if that1.TunnelPrefixChoice == nil {
		if this.TunnelPrefixChoice != nil {
			return false
		}
	} else if this.TunnelPrefixChoice == nil {
		return false
	} else if !this.TunnelPrefixChoice.Equal(that1.TunnelPrefixChoice) {
		return false
	}
	if that1.MgmtSubnetChoice == nil {
		if this.MgmtSubnetChoice != nil {
			return false
		}
	} else if this.MgmtSubnetChoice == nil {
		return false
	} else if !this.MgmtSubnetChoice.Equal(that1.MgmtSubnetChoice) {
		return false
	}
	return true
}
func (this *ServiceNodesAWSType_AutomaticPrefix) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceNodesAWSType_AutomaticPrefix)
	if !ok {
		that2, ok := that.(ServiceNodesAWSType_AutomaticPrefix)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AutomaticPrefix.Equal(that1.AutomaticPrefix) {
		return false
	}
	return true
}
func (this *ServiceNodesAWSType_TunnelPrefix) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceNodesAWSType_TunnelPrefix)
	if !ok {
		that2, ok := that.(ServiceNodesAWSType_TunnelPrefix)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TunnelPrefix != that1.TunnelPrefix {
		return false
	}
	return true
}
func (this *ServiceNodesAWSType_ReservedMgmtSubnet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceNodesAWSType_ReservedMgmtSubnet)
	if !ok {
		that2, ok := that.(ServiceNodesAWSType_ReservedMgmtSubnet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ReservedMgmtSubnet.Equal(that1.ReservedMgmtSubnet) {
		return false
	}
	return true
}
func (this *ServiceNodesAWSType_MgmtSubnet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceNodesAWSType_MgmtSubnet)
	if !ok {
		that2, ok := that.(ServiceNodesAWSType_MgmtSubnet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MgmtSubnet.Equal(that1.MgmtSubnet) {
		return false
	}
	return true
}
func (this *F5BigIpAWSTGWSiteType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*F5BigIpAWSTGWSiteType)
	if !ok {
		that2, ok := that.(F5BigIpAWSTGWSiteType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AwsTgwSite.Equal(that1.AwsTgwSite) {
		return false
	}
	return true
}
func (this *F5BigIpAWSVPCSiteType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*F5BigIpAWSVPCSiteType)
	if !ok {
		that2, ok := that.(F5BigIpAWSVPCSiteType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AwsVpcSite.Equal(that1.AwsVpcSite) {
		return false
	}
	return true
}
func (this *F5BigIpAWSBYOLImageType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*F5BigIpAWSBYOLImageType)
	if !ok {
		that2, ok := that.(F5BigIpAWSBYOLImageType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Image != that1.Image {
		return false
	}
	if !this.License.Equal(that1.License) {
		return false
	}
	return true
}
func (this *F5BigIpAWSMarketPlaceImageType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*F5BigIpAWSMarketPlaceImageType)
	if !ok {
		that2, ok := that.(F5BigIpAWSMarketPlaceImageType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.AmiChoice == nil {
		if this.AmiChoice != nil {
			return false
		}
	} else if this.AmiChoice == nil {
		return false
	} else if !this.AmiChoice.Equal(that1.AmiChoice) {
		return false
	}
	return true
}
func (this *F5BigIpAWSMarketPlaceImageType_AWAFPayG200Mbps) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*F5BigIpAWSMarketPlaceImageType_AWAFPayG200Mbps)
	if !ok {
		that2, ok := that.(F5BigIpAWSMarketPlaceImageType_AWAFPayG200Mbps)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AWAFPayG200Mbps.Equal(that1.AWAFPayG200Mbps) {
		return false
	}
	return true
}
func (this *F5BigIpAWSMarketPlaceImageType_AWAFPayG3Gbps) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*F5BigIpAWSMarketPlaceImageType_AWAFPayG3Gbps)
	if !ok {
		that2, ok := that.(F5BigIpAWSMarketPlaceImageType_AWAFPayG3Gbps)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AWAFPayG3Gbps.Equal(that1.AWAFPayG3Gbps) {
		return false
	}
	return true
}
func (this *F5BigIpAWSMarketPlaceImageType_BestPlusPayG200Mbps) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*F5BigIpAWSMarketPlaceImageType_BestPlusPayG200Mbps)
	if !ok {
		that2, ok := that.(F5BigIpAWSMarketPlaceImageType_BestPlusPayG200Mbps)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BestPlusPayG200Mbps.Equal(that1.BestPlusPayG200Mbps) {
		return false
	}
	return true
}
func (this *F5BigIpAWSMarketPlaceImageType_BestPlusPayg_1Gbps) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*F5BigIpAWSMarketPlaceImageType_BestPlusPayg_1Gbps)
	if !ok {
		that2, ok := that.(F5BigIpAWSMarketPlaceImageType_BestPlusPayg_1Gbps)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BestPlusPayg_1Gbps.Equal(that1.BestPlusPayg_1Gbps) {
		return false
	}
	return true
}
func (this *F5BigIpAWSType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*F5BigIpAWSType)
	if !ok {
		that2, ok := that.(F5BigIpAWSType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ImageChoice == nil {
		if this.ImageChoice != nil {
			return false
		}
	} else if this.ImageChoice == nil {
		return false
	} else if !this.ImageChoice.Equal(that1.ImageChoice) {
		return false
	}
	if !this.AdminPassword.Equal(that1.AdminPassword) {
		return false
	}
	if this.AdminUsername != that1.AdminUsername {
		return false
	}
	if this.SshKey != that1.SshKey {
		return false
	}
	if that1.SiteTypeChoice == nil {
		if this.SiteTypeChoice != nil {
			return false
		}
	} else if this.SiteTypeChoice == nil {
		return false
	} else if !this.SiteTypeChoice.Equal(that1.SiteTypeChoice) {
		return false
	}
	if len(this.Nodes) != len(that1.Nodes) {
		return false
	}
	for i := range this.Nodes {
		if !this.Nodes[i].Equal(that1.Nodes[i]) {
			return false
		}
	}
	if len(this.Tags) != len(that1.Tags) {
		return false
	}
	for i := range this.Tags {
		if this.Tags[i] != that1.Tags[i] {
			return false
		}
	}
	if !this.EndpointService.Equal(that1.EndpointService) {
		return false
	}
	return true
}
func (this *F5BigIpAWSType_MarketPlaceImage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*F5BigIpAWSType_MarketPlaceImage)
	if !ok {
		that2, ok := that.(F5BigIpAWSType_MarketPlaceImage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MarketPlaceImage.Equal(that1.MarketPlaceImage) {
		return false
	}
	return true
}
func (this *F5BigIpAWSType_ByolImage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*F5BigIpAWSType_ByolImage)
	if !ok {
		that2, ok := that.(F5BigIpAWSType_ByolImage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ByolImage.Equal(that1.ByolImage) {
		return false
	}
	return true
}
func (this *F5BigIpAWSType_AwsTgwSiteParams) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*F5BigIpAWSType_AwsTgwSiteParams)
	if !ok {
		that2, ok := that.(F5BigIpAWSType_AwsTgwSiteParams)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AwsTgwSiteParams.Equal(that1.AwsTgwSiteParams) {
		return false
	}
	return true
}
func (this *F5BigIpAWSType_AwsVpcSiteParams) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*F5BigIpAWSType_AwsVpcSiteParams)
	if !ok {
		that2, ok := that.(F5BigIpAWSType_AwsVpcSiteParams)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AwsVpcSiteParams.Equal(that1.AwsVpcSiteParams) {
		return false
	}
	return true
}
func (this *F5BigIpAWSReplaceType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*F5BigIpAWSReplaceType)
	if !ok {
		that2, ok := that.(F5BigIpAWSReplaceType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Tags) != len(that1.Tags) {
		return false
	}
	for i := range this.Tags {
		if this.Tags[i] != that1.Tags[i] {
			return false
		}
	}
	if !this.EndpointService.Equal(that1.EndpointService) {
		return false
	}
	return true
}
func (this *PanoramaServerType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PanoramaServerType)
	if !ok {
		that2, ok := that.(PanoramaServerType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Server != that1.Server {
		return false
	}
	if !this.AuthorizationKey.Equal(that1.AuthorizationKey) {
		return false
	}
	if this.TemplateStackName != that1.TemplateStackName {
		return false
	}
	if this.DeviceGroupName != that1.DeviceGroupName {
		return false
	}
	return true
}
func (this *SSHKeyType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SSHKeyType)
	if !ok {
		that2, ok := that.(SSHKeyType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PublicKey != that1.PublicKey {
		return false
	}
	if !this.PrivateKey.Equal(that1.PrivateKey) {
		return false
	}
	return true
}
func (this *PANAWSAutoSetupType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PANAWSAutoSetupType)
	if !ok {
		that2, ok := that.(PANAWSAutoSetupType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.SshKeysChoice == nil {
		if this.SshKeysChoice != nil {
			return false
		}
	} else if this.SshKeysChoice == nil {
		return false
	} else if !this.SshKeysChoice.Equal(that1.SshKeysChoice) {
		return false
	}
	if this.AdminUsername != that1.AdminUsername {
		return false
	}
	if !this.AdminPassword.Equal(that1.AdminPassword) {
		return false
	}
	return true
}
func (this *PANAWSAutoSetupType_ManualSshKeys) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PANAWSAutoSetupType_ManualSshKeys)
	if !ok {
		that2, ok := that.(PANAWSAutoSetupType_ManualSshKeys)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ManualSshKeys.Equal(that1.ManualSshKeys) {
		return false
	}
	return true
}
func (this *PANAWSAutoSetupType_AutogeneratedSshKeys) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PANAWSAutoSetupType_AutogeneratedSshKeys)
	if !ok {
		that2, ok := that.(PANAWSAutoSetupType_AutogeneratedSshKeys)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AutogeneratedSshKeys.Equal(that1.AutogeneratedSshKeys) {
		return false
	}
	return true
}
func (this *PaloAltoServiceNodesAWSType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PaloAltoServiceNodesAWSType)
	if !ok {
		that2, ok := that.(PaloAltoServiceNodesAWSType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NodeName != that1.NodeName {
		return false
	}
	if this.AwsAzName != that1.AwsAzName {
		return false
	}
	if that1.MgmtSubnetChoice == nil {
		if this.MgmtSubnetChoice != nil {
			return false
		}
	} else if this.MgmtSubnetChoice == nil {
		return false
	} else if !this.MgmtSubnetChoice.Equal(that1.MgmtSubnetChoice) {
		return false
	}
	return true
}
func (this *PaloAltoServiceNodesAWSType_ReservedMgmtSubnet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PaloAltoServiceNodesAWSType_ReservedMgmtSubnet)
	if !ok {
		that2, ok := that.(PaloAltoServiceNodesAWSType_ReservedMgmtSubnet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ReservedMgmtSubnet.Equal(that1.ReservedMgmtSubnet) {
		return false
	}
	return true
}
func (this *PaloAltoServiceNodesAWSType_MgmtSubnet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PaloAltoServiceNodesAWSType_MgmtSubnet)
	if !ok {
		that2, ok := that.(PaloAltoServiceNodesAWSType_MgmtSubnet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MgmtSubnet.Equal(that1.MgmtSubnet) {
		return false
	}
	return true
}
func (this *PaloAltoFWAWSType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PaloAltoFWAWSType)
	if !ok {
		that2, ok := that.(PaloAltoFWAWSType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.InstanceType != that1.InstanceType {
		return false
	}
	if that1.AmiChoice == nil {
		if this.AmiChoice != nil {
			return false
		}
	} else if this.AmiChoice == nil {
		return false
	} else if !this.AmiChoice.Equal(that1.AmiChoice) {
		return false
	}
	if that1.PanaromaConnection == nil {
		if this.PanaromaConnection != nil {
			return false
		}
	} else if this.PanaromaConnection == nil {
		return false
	} else if !this.PanaromaConnection.Equal(that1.PanaromaConnection) {
		return false
	}
	if that1.SetupOptions == nil {
		if this.SetupOptions != nil {
			return false
		}
	} else if this.SetupOptions == nil {
		return false
	} else if !this.SetupOptions.Equal(that1.SetupOptions) {
		return false
	}
	if !this.AwsTgwSite.Equal(that1.AwsTgwSite) {
		return false
	}
	if !this.ServiceNodes.Equal(that1.ServiceNodes) {
		return false
	}
	if len(this.Tags) != len(that1.Tags) {
		return false
	}
	for i := range this.Tags {
		if this.Tags[i] != that1.Tags[i] {
			return false
		}
	}
	if this.Version != that1.Version {
		return false
	}
	return true
}
func (this *PaloAltoFWAWSType_PanAmiBundle1) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PaloAltoFWAWSType_PanAmiBundle1)
	if !ok {
		that2, ok := that.(PaloAltoFWAWSType_PanAmiBundle1)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PanAmiBundle1.Equal(that1.PanAmiBundle1) {
		return false
	}
	return true
}
func (this *PaloAltoFWAWSType_PanAmiBundle2) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PaloAltoFWAWSType_PanAmiBundle2)
	if !ok {
		that2, ok := that.(PaloAltoFWAWSType_PanAmiBundle2)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PanAmiBundle2.Equal(that1.PanAmiBundle2) {
		return false
	}
	return true
}
func (this *PaloAltoFWAWSType_DisablePanaroma) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PaloAltoFWAWSType_DisablePanaroma)
	if !ok {
		that2, ok := that.(PaloAltoFWAWSType_DisablePanaroma)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisablePanaroma.Equal(that1.DisablePanaroma) {
		return false
	}
	return true
}
func (this *PaloAltoFWAWSType_PanoramaServer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PaloAltoFWAWSType_PanoramaServer)
	if !ok {
		that2, ok := that.(PaloAltoFWAWSType_PanoramaServer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PanoramaServer.Equal(that1.PanoramaServer) {
		return false
	}
	return true
}
func (this *PaloAltoFWAWSType_AutoSetup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PaloAltoFWAWSType_AutoSetup)
	if !ok {
		that2, ok := that.(PaloAltoFWAWSType_AutoSetup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AutoSetup.Equal(that1.AutoSetup) {
		return false
	}
	return true
}
func (this *PaloAltoFWAWSType_SshKey) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PaloAltoFWAWSType_SshKey)
	if !ok {
		that2, ok := that.(PaloAltoFWAWSType_SshKey)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SshKey != that1.SshKey {
		return false
	}
	return true
}
func (this *PaloAltoAzNodesAWSType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PaloAltoAzNodesAWSType)
	if !ok {
		that2, ok := that.(PaloAltoAzNodesAWSType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Nodes) != len(that1.Nodes) {
		return false
	}
	for i := range this.Nodes {
		if !this.Nodes[i].Equal(that1.Nodes[i]) {
			return false
		}
	}
	return true
}
func (this *PaloAltoFWAWSReplaceType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PaloAltoFWAWSReplaceType)
	if !ok {
		that2, ok := that.(PaloAltoFWAWSReplaceType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Tags) != len(that1.Tags) {
		return false
	}
	for i := range this.Tags {
		if this.Tags[i] != that1.Tags[i] {
			return false
		}
	}
	return true
}
func (this *SSHManagementNodePorts) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SSHManagementNodePorts)
	if !ok {
		that2, ok := that.(SSHManagementNodePorts)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NodeName != that1.NodeName {
		return false
	}
	if this.SshPort != that1.SshPort {
		return false
	}
	return true
}
func (this *SSHManagementType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SSHManagementType)
	if !ok {
		that2, ok := that.(SSHManagementType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.AdvertiseChoice == nil {
		if this.AdvertiseChoice != nil {
			return false
		}
	} else if this.AdvertiseChoice == nil {
		return false
	} else if !this.AdvertiseChoice.Equal(that1.AdvertiseChoice) {
		return false
	}
	if len(this.NodeSshPorts) != len(that1.NodeSshPorts) {
		return false
	}
	for i := range this.NodeSshPorts {
		if !this.NodeSshPorts[i].Equal(that1.NodeSshPorts[i]) {
			return false
		}
	}
	if this.DomainSuffix != that1.DomainSuffix {
		return false
	}
	return true
}
func (this *SSHManagementType_AdvertiseOnPublicDefaultVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SSHManagementType_AdvertiseOnPublicDefaultVip)
	if !ok {
		that2, ok := that.(SSHManagementType_AdvertiseOnPublicDefaultVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnPublicDefaultVip.Equal(that1.AdvertiseOnPublicDefaultVip) {
		return false
	}
	return true
}
func (this *SSHManagementType_AdvertiseOnPublic) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SSHManagementType_AdvertiseOnPublic)
	if !ok {
		that2, ok := that.(SSHManagementType_AdvertiseOnPublic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnPublic.Equal(that1.AdvertiseOnPublic) {
		return false
	}
	return true
}
func (this *SSHManagementType_AdvertiseOnSloInternetVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SSHManagementType_AdvertiseOnSloInternetVip)
	if !ok {
		that2, ok := that.(SSHManagementType_AdvertiseOnSloInternetVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnSloInternetVip.Equal(that1.AdvertiseOnSloInternetVip) {
		return false
	}
	return true
}
func (this *SSHManagementType_AdvertiseOnSli) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SSHManagementType_AdvertiseOnSli)
	if !ok {
		that2, ok := that.(SSHManagementType_AdvertiseOnSli)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnSli.Equal(that1.AdvertiseOnSli) {
		return false
	}
	return true
}
func (this *SSHManagementType_AdvertiseOnSlo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SSHManagementType_AdvertiseOnSlo)
	if !ok {
		that2, ok := that.(SSHManagementType_AdvertiseOnSlo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnSlo.Equal(that1.AdvertiseOnSlo) {
		return false
	}
	return true
}
func (this *SSHManagementType_AdvertiseOnSloSli) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SSHManagementType_AdvertiseOnSloSli)
	if !ok {
		that2, ok := that.(SSHManagementType_AdvertiseOnSloSli)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnSloSli.Equal(that1.AdvertiseOnSloSli) {
		return false
	}
	return true
}
func (this *ServiceHttpsManagementType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceHttpsManagementType)
	if !ok {
		that2, ok := that.(ServiceHttpsManagementType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DomainSuffix != that1.DomainSuffix {
		return false
	}
	if that1.PortChoice == nil {
		if this.PortChoice != nil {
			return false
		}
	} else if this.PortChoice == nil {
		return false
	} else if !this.PortChoice.Equal(that1.PortChoice) {
		return false
	}
	if that1.InternetChoice == nil {
		if this.InternetChoice != nil {
			return false
		}
	} else if this.InternetChoice == nil {
		return false
	} else if !this.InternetChoice.Equal(that1.InternetChoice) {
		return false
	}
	if that1.AdvertiseChoice == nil {
		if this.AdvertiseChoice != nil {
			return false
		}
	} else if this.AdvertiseChoice == nil {
		return false
	} else if !this.AdvertiseChoice.Equal(that1.AdvertiseChoice) {
		return false
	}
	return true
}
func (this *ServiceHttpsManagementType_DefaultHttpsPort) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceHttpsManagementType_DefaultHttpsPort)
	if !ok {
		that2, ok := that.(ServiceHttpsManagementType_DefaultHttpsPort)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultHttpsPort.Equal(that1.DefaultHttpsPort) {
		return false
	}
	return true
}
func (this *ServiceHttpsManagementType_HttpsPort) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceHttpsManagementType_HttpsPort)
	if !ok {
		that2, ok := that.(ServiceHttpsManagementType_HttpsPort)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HttpsPort != that1.HttpsPort {
		return false
	}
	return true
}
func (this *ServiceHttpsManagementType_DoNotAdvertise) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceHttpsManagementType_DoNotAdvertise)
	if !ok {
		that2, ok := that.(ServiceHttpsManagementType_DoNotAdvertise)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DoNotAdvertise.Equal(that1.DoNotAdvertise) {
		return false
	}
	return true
}
func (this *ServiceHttpsManagementType_AdvertiseOnPublicDefaultVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceHttpsManagementType_AdvertiseOnPublicDefaultVip)
	if !ok {
		that2, ok := that.(ServiceHttpsManagementType_AdvertiseOnPublicDefaultVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnPublicDefaultVip.Equal(that1.AdvertiseOnPublicDefaultVip) {
		return false
	}
	return true
}
func (this *ServiceHttpsManagementType_AdvertiseOnPublic) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceHttpsManagementType_AdvertiseOnPublic)
	if !ok {
		that2, ok := that.(ServiceHttpsManagementType_AdvertiseOnPublic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnPublic.Equal(that1.AdvertiseOnPublic) {
		return false
	}
	return true
}
func (this *ServiceHttpsManagementType_DoNotAdvertiseOnInternet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceHttpsManagementType_DoNotAdvertiseOnInternet)
	if !ok {
		that2, ok := that.(ServiceHttpsManagementType_DoNotAdvertiseOnInternet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DoNotAdvertiseOnInternet.Equal(that1.DoNotAdvertiseOnInternet) {
		return false
	}
	return true
}
func (this *ServiceHttpsManagementType_AdvertiseOnInternetDefaultVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceHttpsManagementType_AdvertiseOnInternetDefaultVip)
	if !ok {
		that2, ok := that.(ServiceHttpsManagementType_AdvertiseOnInternetDefaultVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnInternetDefaultVip.Equal(that1.AdvertiseOnInternetDefaultVip) {
		return false
	}
	return true
}
func (this *ServiceHttpsManagementType_AdvertiseOnInternet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceHttpsManagementType_AdvertiseOnInternet)
	if !ok {
		that2, ok := that.(ServiceHttpsManagementType_AdvertiseOnInternet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnInternet.Equal(that1.AdvertiseOnInternet) {
		return false
	}
	return true
}
func (this *ServiceHttpsManagementType_AdvertiseOnSloInternetVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceHttpsManagementType_AdvertiseOnSloInternetVip)
	if !ok {
		that2, ok := that.(ServiceHttpsManagementType_AdvertiseOnSloInternetVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnSloInternetVip.Equal(that1.AdvertiseOnSloInternetVip) {
		return false
	}
	return true
}
func (this *ServiceHttpsManagementType_AdvertiseOnSliVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceHttpsManagementType_AdvertiseOnSliVip)
	if !ok {
		that2, ok := that.(ServiceHttpsManagementType_AdvertiseOnSliVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnSliVip.Equal(that1.AdvertiseOnSliVip) {
		return false
	}
	return true
}
func (this *ServiceHttpsManagementType_AdvertiseOnSloVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceHttpsManagementType_AdvertiseOnSloVip)
	if !ok {
		that2, ok := that.(ServiceHttpsManagementType_AdvertiseOnSloVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnSloVip.Equal(that1.AdvertiseOnSloVip) {
		return false
	}
	return true
}
func (this *ServiceHttpsManagementType_AdvertiseOnSloSli) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceHttpsManagementType_AdvertiseOnSloSli)
	if !ok {
		that2, ok := that.(ServiceHttpsManagementType_AdvertiseOnSloSli)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnSloSli.Equal(that1.AdvertiseOnSloSli) {
		return false
	}
	return true
}
func (this *ServiceHttpsManagementType_DisableLocal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceHttpsManagementType_DisableLocal)
	if !ok {
		that2, ok := that.(ServiceHttpsManagementType_DisableLocal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableLocal.Equal(that1.DisableLocal) {
		return false
	}
	return true
}
func (this *F5BigIpAppStackBareMetalType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*F5BigIpAppStackBareMetalType)
	if !ok {
		that2, ok := that.(F5BigIpAppStackBareMetalType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AdminUsername != that1.AdminUsername {
		return false
	}
	if !this.AdminPassword.Equal(that1.AdminPassword) {
		return false
	}
	if this.SshKey != that1.SshKey {
		return false
	}
	if !this.BareMetalSite.Equal(that1.BareMetalSite) {
		return false
	}
	if !this.BigiqInstance.Equal(that1.BigiqInstance) {
		return false
	}
	if len(this.Nodes) != len(that1.Nodes) {
		return false
	}
	for i := range this.Nodes {
		if !this.Nodes[i].Equal(that1.Nodes[i]) {
			return false
		}
	}
	if this.PublicDownloadUrl != that1.PublicDownloadUrl {
		return false
	}
	return true
}
func (this *InterfaceDetails) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InterfaceDetails)
	if !ok {
		that2, ok := that.(InterfaceDetails)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Interface.Equal(that1.Interface) {
		return false
	}
	if this.NetworkSelfIp != that1.NetworkSelfIp {
		return false
	}
	if this.NetworkGateway != that1.NetworkGateway {
		return false
	}
	return true
}
func (this *BigIqInstanceType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BigIqInstanceType)
	if !ok {
		that2, ok := that.(BigIqInstanceType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LicenseServerIp != that1.LicenseServerIp {
		return false
	}
	if this.Username != that1.Username {
		return false
	}
	if !this.Password.Equal(that1.Password) {
		return false
	}
	if this.LicensePoolName != that1.LicensePoolName {
		return false
	}
	if this.SkuName != that1.SkuName {
		return false
	}
	return true
}
func (this *ServiceNodesBareMetalType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceNodesBareMetalType)
	if !ok {
		that2, ok := that.(ServiceNodesBareMetalType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NodeName != that1.NodeName {
		return false
	}
	if !this.InternalInterface.Equal(that1.InternalInterface) {
		return false
	}
	if !this.ExternalInterface.Equal(that1.ExternalInterface) {
		return false
	}
	if this.BmVirtualCpuCount != that1.BmVirtualCpuCount {
		return false
	}
	if this.BmNodeMemorySize != that1.BmNodeMemorySize {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ServiceProviderChoice == nil {
		if this.ServiceProviderChoice != nil {
			return false
		}
	} else if this.ServiceProviderChoice == nil {
		return false
	} else if !this.ServiceProviderChoice.Equal(that1.ServiceProviderChoice) {
		return false
	}
	if that1.HttpManagementChoice == nil {
		if this.HttpManagementChoice != nil {
			return false
		}
	} else if this.HttpManagementChoice == nil {
		return false
	} else if !this.HttpManagementChoice.Equal(that1.HttpManagementChoice) {
		return false
	}
	if that1.SshManagementChoice == nil {
		if this.SshManagementChoice != nil {
			return false
		}
	} else if this.SshManagementChoice == nil {
		return false
	} else if !this.SshManagementChoice.Equal(that1.SshManagementChoice) {
		return false
	}
	if that1.ServiceTypeChoice == nil {
		if this.ServiceTypeChoice != nil {
			return false
		}
	} else if this.ServiceTypeChoice == nil {
		return false
	} else if !this.ServiceTypeChoice.Equal(that1.ServiceTypeChoice) {
		return false
	}
	if len(this.NodeInfo) != len(that1.NodeInfo) {
		return false
	}
	for i := range this.NodeInfo {
		if !this.NodeInfo[i].Equal(that1.NodeInfo[i]) {
			return false
		}
	}
	if len(this.Fleet) != len(that1.Fleet) {
		return false
	}
	for i := range this.Fleet {
		if !this.Fleet[i].Equal(that1.Fleet[i]) {
			return false
		}
	}
	if len(this.CloudCredentials) != len(that1.CloudCredentials) {
		return false
	}
	for i := range this.CloudCredentials {
		if !this.CloudCredentials[i].Equal(that1.CloudCredentials[i]) {
			return false
		}
	}
	if len(this.TfParams) != len(that1.TfParams) {
		return false
	}
	for i := range this.TfParams {
		if !this.TfParams[i].Equal(that1.TfParams[i]) {
			return false
		}
	}
	if len(this.PolicySet) != len(that1.PolicySet) {
		return false
	}
	for i := range this.PolicySet {
		if !this.PolicySet[i].Equal(that1.PolicySet[i]) {
			return false
		}
	}
	if this.InsideVip != that1.InsideVip {
		return false
	}
	if len(this.OriginPool) != len(that1.OriginPool) {
		return false
	}
	for i := range this.OriginPool {
		if !this.OriginPool[i].Equal(that1.OriginPool[i]) {
			return false
		}
	}
	if len(this.ManagementEndpointRefs) != len(that1.ManagementEndpointRefs) {
		return false
	}
	for i := range this.ManagementEndpointRefs {
		if !this.ManagementEndpointRefs[i].Equal(that1.ManagementEndpointRefs[i]) {
			return false
		}
	}
	if !this.ExternalNlbInfo.Equal(that1.ExternalNlbInfo) {
		return false
	}
	if !this.ViewInternal.Equal(that1.ViewInternal) {
		return false
	}
	if len(this.Commands) != len(that1.Commands) {
		return false
	}
	for i := range this.Commands {
		if !this.Commands[i].Equal(that1.Commands[i]) {
			return false
		}
	}
	if len(this.SiteRefs) != len(that1.SiteRefs) {
		return false
	}
	for i := range this.SiteRefs {
		if !this.SiteRefs[i].Equal(that1.SiteRefs[i]) {
			return false
		}
	}
	if len(this.K8SManifestParams) != len(that1.K8SManifestParams) {
		return false
	}
	for i := range this.K8SManifestParams {
		if !this.K8SManifestParams[i].Equal(that1.K8SManifestParams[i]) {
			return false
		}
	}
	if this.ServiceType != that1.ServiceType {
		return false
	}
	if !this.FinalizerTimestamp.Equal(that1.FinalizerTimestamp) {
		return false
	}
	if this.ForceDelete != that1.ForceDelete {
		return false
	}
	return true
}
func (this *GlobalSpecType_F5BigIpAwsService) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_F5BigIpAwsService)
	if !ok {
		that2, ok := that.(GlobalSpecType_F5BigIpAwsService)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.F5BigIpAwsService.Equal(that1.F5BigIpAwsService) {
		return false
	}
	return true
}
func (this *GlobalSpecType_PaloAltoFwService) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_PaloAltoFwService)
	if !ok {
		that2, ok := that.(GlobalSpecType_PaloAltoFwService)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PaloAltoFwService.Equal(that1.PaloAltoFwService) {
		return false
	}
	return true
}
func (this *GlobalSpecType_F5BigIpBareMetalType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_F5BigIpBareMetalType)
	if !ok {
		that2, ok := that.(GlobalSpecType_F5BigIpBareMetalType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.F5BigIpBareMetalType.Equal(that1.F5BigIpBareMetalType) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DisableHttpsManagement) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DisableHttpsManagement)
	if !ok {
		that2, ok := that.(GlobalSpecType_DisableHttpsManagement)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableHttpsManagement.Equal(that1.DisableHttpsManagement) {
		return false
	}
	return true
}
func (this *GlobalSpecType_HttpsManagement) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_HttpsManagement)
	if !ok {
		that2, ok := that.(GlobalSpecType_HttpsManagement)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpsManagement.Equal(that1.HttpsManagement) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DisableSshAccess) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DisableSshAccess)
	if !ok {
		that2, ok := that.(GlobalSpecType_DisableSshAccess)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableSshAccess.Equal(that1.DisableSshAccess) {
		return false
	}
	return true
}
func (this *GlobalSpecType_EnabledSshAccess) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_EnabledSshAccess)
	if !ok {
		that2, ok := that.(GlobalSpecType_EnabledSshAccess)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnabledSshAccess.Equal(that1.EnabledSshAccess) {
		return false
	}
	return true
}
func (this *GlobalSpecType_EndpointService) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_EndpointService)
	if !ok {
		that2, ok := that.(GlobalSpecType_EndpointService)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EndpointService.Equal(that1.EndpointService) {
		return false
	}
	return true
}
func (this *GlobalSpecType_ForwardingService) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_ForwardingService)
	if !ok {
		that2, ok := that.(GlobalSpecType_ForwardingService)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ForwardingService.Equal(that1.ForwardingService) {
		return false
	}
	return true
}
func (this *GlobalSpecType_TransparentService) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_TransparentService)
	if !ok {
		that2, ok := that.(GlobalSpecType_TransparentService)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TransparentService.Equal(that1.TransparentService) {
		return false
	}
	return true
}
func (this *SuggestedCommands) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SuggestedCommands)
	if !ok {
		that2, ok := that.(SuggestedCommands)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Command != that1.Command {
		return false
	}
	if this.Warning != that1.Warning {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	return true
}
func (this *EndpointRefType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndpointRefType)
	if !ok {
		that2, ok := that.(EndpointRefType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NodeName != that1.NodeName {
		return false
	}
	if len(this.Endpoint) != len(that1.Endpoint) {
		return false
	}
	for i := range this.Endpoint {
		if !this.Endpoint[i].Equal(that1.Endpoint[i]) {
			return false
		}
	}
	return true
}
func (this *ExternalNLBInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExternalNLBInfo)
	if !ok {
		that2, ok := that.(ExternalNLBInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VpcId != that1.VpcId {
		return false
	}
	if this.Region != that1.Region {
		return false
	}
	if len(this.AwsSubnetInfo) != len(that1.AwsSubnetInfo) {
		return false
	}
	for i := range this.AwsSubnetInfo {
		if !this.AwsSubnetInfo[i].Equal(that1.AwsSubnetInfo[i]) {
			return false
		}
	}
	return true
}
func (this *EndpointServiceReplaceType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndpointServiceReplaceType)
	if !ok {
		that2, ok := that.(EndpointServiceReplaceType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ExternalVipChoice == nil {
		if this.ExternalVipChoice != nil {
			return false
		}
	} else if this.ExternalVipChoice == nil {
		return false
	} else if !this.ExternalVipChoice.Equal(that1.ExternalVipChoice) {
		return false
	}
	if that1.TcpPortChoice == nil {
		if this.TcpPortChoice != nil {
			return false
		}
	} else if this.TcpPortChoice == nil {
		return false
	} else if !this.TcpPortChoice.Equal(that1.TcpPortChoice) {
		return false
	}
	if that1.UdpPortChoice == nil {
		if this.UdpPortChoice != nil {
			return false
		}
	} else if this.UdpPortChoice == nil {
		return false
	} else if !this.UdpPortChoice.Equal(that1.UdpPortChoice) {
		return false
	}
	return true
}
func (this *EndpointServiceReplaceType_DisableAdvertiseOnSloIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndpointServiceReplaceType_DisableAdvertiseOnSloIp)
	if !ok {
		that2, ok := that.(EndpointServiceReplaceType_DisableAdvertiseOnSloIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableAdvertiseOnSloIp.Equal(that1.DisableAdvertiseOnSloIp) {
		return false
	}
	return true
}
func (this *EndpointServiceReplaceType_AdvertiseOnSloIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndpointServiceReplaceType_AdvertiseOnSloIp)
	if !ok {
		that2, ok := that.(EndpointServiceReplaceType_AdvertiseOnSloIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnSloIp.Equal(that1.AdvertiseOnSloIp) {
		return false
	}
	return true
}
func (this *EndpointServiceReplaceType_AdvertiseOnSloIpExternal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndpointServiceReplaceType_AdvertiseOnSloIpExternal)
	if !ok {
		that2, ok := that.(EndpointServiceReplaceType_AdvertiseOnSloIpExternal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnSloIpExternal.Equal(that1.AdvertiseOnSloIpExternal) {
		return false
	}
	return true
}
func (this *EndpointServiceReplaceType_DefaultTcpPorts) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndpointServiceReplaceType_DefaultTcpPorts)
	if !ok {
		that2, ok := that.(EndpointServiceReplaceType_DefaultTcpPorts)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultTcpPorts.Equal(that1.DefaultTcpPorts) {
		return false
	}
	return true
}
func (this *EndpointServiceReplaceType_HttpPort) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndpointServiceReplaceType_HttpPort)
	if !ok {
		that2, ok := that.(EndpointServiceReplaceType_HttpPort)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpPort.Equal(that1.HttpPort) {
		return false
	}
	return true
}
func (this *EndpointServiceReplaceType_HttpsPort) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndpointServiceReplaceType_HttpsPort)
	if !ok {
		that2, ok := that.(EndpointServiceReplaceType_HttpsPort)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpsPort.Equal(that1.HttpsPort) {
		return false
	}
	return true
}
func (this *EndpointServiceReplaceType_CustomTcpPorts) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndpointServiceReplaceType_CustomTcpPorts)
	if !ok {
		that2, ok := that.(EndpointServiceReplaceType_CustomTcpPorts)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomTcpPorts.Equal(that1.CustomTcpPorts) {
		return false
	}
	return true
}
func (this *EndpointServiceReplaceType_NoTcpPorts) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndpointServiceReplaceType_NoTcpPorts)
	if !ok {
		that2, ok := that.(EndpointServiceReplaceType_NoTcpPorts)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoTcpPorts.Equal(that1.NoTcpPorts) {
		return false
	}
	return true
}
func (this *EndpointServiceReplaceType_NoUdpPorts) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndpointServiceReplaceType_NoUdpPorts)
	if !ok {
		that2, ok := that.(EndpointServiceReplaceType_NoUdpPorts)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoUdpPorts.Equal(that1.NoUdpPorts) {
		return false
	}
	return true
}
func (this *EndpointServiceReplaceType_CustomUdpPorts) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndpointServiceReplaceType_CustomUdpPorts)
	if !ok {
		that2, ok := that.(EndpointServiceReplaceType_CustomUdpPorts)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomUdpPorts.Equal(that1.CustomUdpPorts) {
		return false
	}
	return true
}
func (this *NodeInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeInfo)
	if !ok {
		that2, ok := that.(NodeInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SshCommand != that1.SshCommand {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ServiceProviderChoice == nil {
		if this.ServiceProviderChoice != nil {
			return false
		}
	} else if this.ServiceProviderChoice == nil {
		return false
	} else if !this.ServiceProviderChoice.Equal(that1.ServiceProviderChoice) {
		return false
	}
	if that1.HttpManagementChoice == nil {
		if this.HttpManagementChoice != nil {
			return false
		}
	} else if this.HttpManagementChoice == nil {
		return false
	} else if !this.HttpManagementChoice.Equal(that1.HttpManagementChoice) {
		return false
	}
	if that1.SshManagementChoice == nil {
		if this.SshManagementChoice != nil {
			return false
		}
	} else if this.SshManagementChoice == nil {
		return false
	} else if !this.SshManagementChoice.Equal(that1.SshManagementChoice) {
		return false
	}
	return true
}
func (this *CreateSpecType_F5BigIpAwsService) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_F5BigIpAwsService)
	if !ok {
		that2, ok := that.(CreateSpecType_F5BigIpAwsService)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.F5BigIpAwsService.Equal(that1.F5BigIpAwsService) {
		return false
	}
	return true
}
func (this *CreateSpecType_PaloAltoFwService) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_PaloAltoFwService)
	if !ok {
		that2, ok := that.(CreateSpecType_PaloAltoFwService)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PaloAltoFwService.Equal(that1.PaloAltoFwService) {
		return false
	}
	return true
}
func (this *CreateSpecType_DisableHttpsManagement) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DisableHttpsManagement)
	if !ok {
		that2, ok := that.(CreateSpecType_DisableHttpsManagement)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableHttpsManagement.Equal(that1.DisableHttpsManagement) {
		return false
	}
	return true
}
func (this *CreateSpecType_HttpsManagement) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_HttpsManagement)
	if !ok {
		that2, ok := that.(CreateSpecType_HttpsManagement)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpsManagement.Equal(that1.HttpsManagement) {
		return false
	}
	return true
}
func (this *CreateSpecType_DisableSshAccess) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DisableSshAccess)
	if !ok {
		that2, ok := that.(CreateSpecType_DisableSshAccess)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableSshAccess.Equal(that1.DisableSshAccess) {
		return false
	}
	return true
}
func (this *CreateSpecType_EnabledSshAccess) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_EnabledSshAccess)
	if !ok {
		that2, ok := that.(CreateSpecType_EnabledSshAccess)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnabledSshAccess.Equal(that1.EnabledSshAccess) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ServiceProviderChoice == nil {
		if this.ServiceProviderChoice != nil {
			return false
		}
	} else if this.ServiceProviderChoice == nil {
		return false
	} else if !this.ServiceProviderChoice.Equal(that1.ServiceProviderChoice) {
		return false
	}
	if that1.HttpManagementChoice == nil {
		if this.HttpManagementChoice != nil {
			return false
		}
	} else if this.HttpManagementChoice == nil {
		return false
	} else if !this.HttpManagementChoice.Equal(that1.HttpManagementChoice) {
		return false
	}
	if that1.SshManagementChoice == nil {
		if this.SshManagementChoice != nil {
			return false
		}
	} else if this.SshManagementChoice == nil {
		return false
	} else if !this.SshManagementChoice.Equal(that1.SshManagementChoice) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_F5BigIpAwsService) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_F5BigIpAwsService)
	if !ok {
		that2, ok := that.(ReplaceSpecType_F5BigIpAwsService)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.F5BigIpAwsService.Equal(that1.F5BigIpAwsService) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_PaloAltoFwService) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_PaloAltoFwService)
	if !ok {
		that2, ok := that.(ReplaceSpecType_PaloAltoFwService)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PaloAltoFwService.Equal(that1.PaloAltoFwService) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DisableHttpsManagement) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DisableHttpsManagement)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DisableHttpsManagement)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableHttpsManagement.Equal(that1.DisableHttpsManagement) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_HttpsManagement) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_HttpsManagement)
	if !ok {
		that2, ok := that.(ReplaceSpecType_HttpsManagement)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpsManagement.Equal(that1.HttpsManagement) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DisableSshAccess) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DisableSshAccess)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DisableSshAccess)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableSshAccess.Equal(that1.DisableSshAccess) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_EnabledSshAccess) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_EnabledSshAccess)
	if !ok {
		that2, ok := that.(ReplaceSpecType_EnabledSshAccess)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnabledSshAccess.Equal(that1.EnabledSshAccess) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ServiceProviderChoice == nil {
		if this.ServiceProviderChoice != nil {
			return false
		}
	} else if this.ServiceProviderChoice == nil {
		return false
	} else if !this.ServiceProviderChoice.Equal(that1.ServiceProviderChoice) {
		return false
	}
	if that1.HttpManagementChoice == nil {
		if this.HttpManagementChoice != nil {
			return false
		}
	} else if this.HttpManagementChoice == nil {
		return false
	} else if !this.HttpManagementChoice.Equal(that1.HttpManagementChoice) {
		return false
	}
	if that1.SshManagementChoice == nil {
		if this.SshManagementChoice != nil {
			return false
		}
	} else if this.SshManagementChoice == nil {
		return false
	} else if !this.SshManagementChoice.Equal(that1.SshManagementChoice) {
		return false
	}
	if that1.ServiceTypeChoice == nil {
		if this.ServiceTypeChoice != nil {
			return false
		}
	} else if this.ServiceTypeChoice == nil {
		return false
	} else if !this.ServiceTypeChoice.Equal(that1.ServiceTypeChoice) {
		return false
	}
	if len(this.Commands) != len(that1.Commands) {
		return false
	}
	for i := range this.Commands {
		if !this.Commands[i].Equal(that1.Commands[i]) {
			return false
		}
	}
	if !this.FinalizerTimestamp.Equal(that1.FinalizerTimestamp) {
		return false
	}
	if this.ForceDelete != that1.ForceDelete {
		return false
	}
	return true
}
func (this *GetSpecType_F5BigIpAwsService) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_F5BigIpAwsService)
	if !ok {
		that2, ok := that.(GetSpecType_F5BigIpAwsService)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.F5BigIpAwsService.Equal(that1.F5BigIpAwsService) {
		return false
	}
	return true
}
func (this *GetSpecType_PaloAltoFwService) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_PaloAltoFwService)
	if !ok {
		that2, ok := that.(GetSpecType_PaloAltoFwService)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PaloAltoFwService.Equal(that1.PaloAltoFwService) {
		return false
	}
	return true
}
func (this *GetSpecType_DisableHttpsManagement) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DisableHttpsManagement)
	if !ok {
		that2, ok := that.(GetSpecType_DisableHttpsManagement)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableHttpsManagement.Equal(that1.DisableHttpsManagement) {
		return false
	}
	return true
}
func (this *GetSpecType_HttpsManagement) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_HttpsManagement)
	if !ok {
		that2, ok := that.(GetSpecType_HttpsManagement)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpsManagement.Equal(that1.HttpsManagement) {
		return false
	}
	return true
}
func (this *GetSpecType_DisableSshAccess) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DisableSshAccess)
	if !ok {
		that2, ok := that.(GetSpecType_DisableSshAccess)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableSshAccess.Equal(that1.DisableSshAccess) {
		return false
	}
	return true
}
func (this *GetSpecType_EnabledSshAccess) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_EnabledSshAccess)
	if !ok {
		that2, ok := that.(GetSpecType_EnabledSshAccess)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnabledSshAccess.Equal(that1.EnabledSshAccess) {
		return false
	}
	return true
}
func (this *GetSpecType_EndpointService) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_EndpointService)
	if !ok {
		that2, ok := that.(GetSpecType_EndpointService)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EndpointService.Equal(that1.EndpointService) {
		return false
	}
	return true
}
func (this *GetSpecType_ForwardingService) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_ForwardingService)
	if !ok {
		that2, ok := that.(GetSpecType_ForwardingService)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ForwardingService.Equal(that1.ForwardingService) {
		return false
	}
	return true
}
func (this *GetSpecType_TransparentService) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_TransparentService)
	if !ok {
		that2, ok := that.(GetSpecType_TransparentService)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TransparentService.Equal(that1.TransparentService) {
		return false
	}
	return true
}
func (this *ForwardingServiceType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&nfv_service.ForwardingServiceType{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EndpointServiceType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&nfv_service.EndpointServiceType{")
	if this.InsideVipChoice != nil {
		s = append(s, "InsideVipChoice: "+fmt.Sprintf("%#v", this.InsideVipChoice)+",\n")
	}
	if this.ExternalVipChoice != nil {
		s = append(s, "ExternalVipChoice: "+fmt.Sprintf("%#v", this.ExternalVipChoice)+",\n")
	}
	if this.TcpPortChoice != nil {
		s = append(s, "TcpPortChoice: "+fmt.Sprintf("%#v", this.TcpPortChoice)+",\n")
	}
	if this.UdpPortChoice != nil {
		s = append(s, "UdpPortChoice: "+fmt.Sprintf("%#v", this.UdpPortChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EndpointServiceType_AutomaticVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.EndpointServiceType_AutomaticVip{` +
		`AutomaticVip:` + fmt.Sprintf("%#v", this.AutomaticVip) + `}`}, ", ")
	return s
}
func (this *EndpointServiceType_ConfiguredVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.EndpointServiceType_ConfiguredVip{` +
		`ConfiguredVip:` + fmt.Sprintf("%#v", this.ConfiguredVip) + `}`}, ", ")
	return s
}
func (this *EndpointServiceType_DisableAdvertiseOnSloIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.EndpointServiceType_DisableAdvertiseOnSloIp{` +
		`DisableAdvertiseOnSloIp:` + fmt.Sprintf("%#v", this.DisableAdvertiseOnSloIp) + `}`}, ", ")
	return s
}
func (this *EndpointServiceType_AdvertiseOnSloIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.EndpointServiceType_AdvertiseOnSloIp{` +
		`AdvertiseOnSloIp:` + fmt.Sprintf("%#v", this.AdvertiseOnSloIp) + `}`}, ", ")
	return s
}
func (this *EndpointServiceType_AdvertiseOnSloIpExternal) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.EndpointServiceType_AdvertiseOnSloIpExternal{` +
		`AdvertiseOnSloIpExternal:` + fmt.Sprintf("%#v", this.AdvertiseOnSloIpExternal) + `}`}, ", ")
	return s
}
func (this *EndpointServiceType_DefaultTcpPorts) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.EndpointServiceType_DefaultTcpPorts{` +
		`DefaultTcpPorts:` + fmt.Sprintf("%#v", this.DefaultTcpPorts) + `}`}, ", ")
	return s
}
func (this *EndpointServiceType_HttpPort) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.EndpointServiceType_HttpPort{` +
		`HttpPort:` + fmt.Sprintf("%#v", this.HttpPort) + `}`}, ", ")
	return s
}
func (this *EndpointServiceType_HttpsPort) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.EndpointServiceType_HttpsPort{` +
		`HttpsPort:` + fmt.Sprintf("%#v", this.HttpsPort) + `}`}, ", ")
	return s
}
func (this *EndpointServiceType_CustomTcpPorts) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.EndpointServiceType_CustomTcpPorts{` +
		`CustomTcpPorts:` + fmt.Sprintf("%#v", this.CustomTcpPorts) + `}`}, ", ")
	return s
}
func (this *EndpointServiceType_NoTcpPorts) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.EndpointServiceType_NoTcpPorts{` +
		`NoTcpPorts:` + fmt.Sprintf("%#v", this.NoTcpPorts) + `}`}, ", ")
	return s
}
func (this *EndpointServiceType_NoUdpPorts) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.EndpointServiceType_NoUdpPorts{` +
		`NoUdpPorts:` + fmt.Sprintf("%#v", this.NoUdpPorts) + `}`}, ", ")
	return s
}
func (this *EndpointServiceType_CustomUdpPorts) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.EndpointServiceType_CustomUdpPorts{` +
		`CustomUdpPorts:` + fmt.Sprintf("%#v", this.CustomUdpPorts) + `}`}, ", ")
	return s
}
func (this *ServiceNodesAWSType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&nfv_service.ServiceNodesAWSType{")
	s = append(s, "NodeName: "+fmt.Sprintf("%#v", this.NodeName)+",\n")
	s = append(s, "AwsAzName: "+fmt.Sprintf("%#v", this.AwsAzName)+",\n")
	if this.TunnelPrefixChoice != nil {
		s = append(s, "TunnelPrefixChoice: "+fmt.Sprintf("%#v", this.TunnelPrefixChoice)+",\n")
	}
	if this.MgmtSubnetChoice != nil {
		s = append(s, "MgmtSubnetChoice: "+fmt.Sprintf("%#v", this.MgmtSubnetChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServiceNodesAWSType_AutomaticPrefix) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.ServiceNodesAWSType_AutomaticPrefix{` +
		`AutomaticPrefix:` + fmt.Sprintf("%#v", this.AutomaticPrefix) + `}`}, ", ")
	return s
}
func (this *ServiceNodesAWSType_TunnelPrefix) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.ServiceNodesAWSType_TunnelPrefix{` +
		`TunnelPrefix:` + fmt.Sprintf("%#v", this.TunnelPrefix) + `}`}, ", ")
	return s
}
func (this *ServiceNodesAWSType_ReservedMgmtSubnet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.ServiceNodesAWSType_ReservedMgmtSubnet{` +
		`ReservedMgmtSubnet:` + fmt.Sprintf("%#v", this.ReservedMgmtSubnet) + `}`}, ", ")
	return s
}
func (this *ServiceNodesAWSType_MgmtSubnet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.ServiceNodesAWSType_MgmtSubnet{` +
		`MgmtSubnet:` + fmt.Sprintf("%#v", this.MgmtSubnet) + `}`}, ", ")
	return s
}
func (this *F5BigIpAWSTGWSiteType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&nfv_service.F5BigIpAWSTGWSiteType{")
	if this.AwsTgwSite != nil {
		s = append(s, "AwsTgwSite: "+fmt.Sprintf("%#v", this.AwsTgwSite)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *F5BigIpAWSVPCSiteType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&nfv_service.F5BigIpAWSVPCSiteType{")
	if this.AwsVpcSite != nil {
		s = append(s, "AwsVpcSite: "+fmt.Sprintf("%#v", this.AwsVpcSite)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *F5BigIpAWSBYOLImageType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&nfv_service.F5BigIpAWSBYOLImageType{")
	s = append(s, "Image: "+fmt.Sprintf("%#v", this.Image)+",\n")
	if this.License != nil {
		s = append(s, "License: "+fmt.Sprintf("%#v", this.License)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *F5BigIpAWSMarketPlaceImageType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&nfv_service.F5BigIpAWSMarketPlaceImageType{")
	if this.AmiChoice != nil {
		s = append(s, "AmiChoice: "+fmt.Sprintf("%#v", this.AmiChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *F5BigIpAWSMarketPlaceImageType_AWAFPayG200Mbps) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.F5BigIpAWSMarketPlaceImageType_AWAFPayG200Mbps{` +
		`AWAFPayG200Mbps:` + fmt.Sprintf("%#v", this.AWAFPayG200Mbps) + `}`}, ", ")
	return s
}
func (this *F5BigIpAWSMarketPlaceImageType_AWAFPayG3Gbps) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.F5BigIpAWSMarketPlaceImageType_AWAFPayG3Gbps{` +
		`AWAFPayG3Gbps:` + fmt.Sprintf("%#v", this.AWAFPayG3Gbps) + `}`}, ", ")
	return s
}
func (this *F5BigIpAWSMarketPlaceImageType_BestPlusPayG200Mbps) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.F5BigIpAWSMarketPlaceImageType_BestPlusPayG200Mbps{` +
		`BestPlusPayG200Mbps:` + fmt.Sprintf("%#v", this.BestPlusPayG200Mbps) + `}`}, ", ")
	return s
}
func (this *F5BigIpAWSMarketPlaceImageType_BestPlusPayg_1Gbps) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.F5BigIpAWSMarketPlaceImageType_BestPlusPayg_1Gbps{` +
		`BestPlusPayg_1Gbps:` + fmt.Sprintf("%#v", this.BestPlusPayg_1Gbps) + `}`}, ", ")
	return s
}
func (this *F5BigIpAWSType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&nfv_service.F5BigIpAWSType{")
	if this.ImageChoice != nil {
		s = append(s, "ImageChoice: "+fmt.Sprintf("%#v", this.ImageChoice)+",\n")
	}
	if this.AdminPassword != nil {
		s = append(s, "AdminPassword: "+fmt.Sprintf("%#v", this.AdminPassword)+",\n")
	}
	s = append(s, "AdminUsername: "+fmt.Sprintf("%#v", this.AdminUsername)+",\n")
	s = append(s, "SshKey: "+fmt.Sprintf("%#v", this.SshKey)+",\n")
	if this.SiteTypeChoice != nil {
		s = append(s, "SiteTypeChoice: "+fmt.Sprintf("%#v", this.SiteTypeChoice)+",\n")
	}
	if this.Nodes != nil {
		s = append(s, "Nodes: "+fmt.Sprintf("%#v", this.Nodes)+",\n")
	}
	keysForTags := make([]string, 0, len(this.Tags))
	for k, _ := range this.Tags {
		keysForTags = append(keysForTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
	mapStringForTags := "map[string]string{"
	for _, k := range keysForTags {
		mapStringForTags += fmt.Sprintf("%#v: %#v,", k, this.Tags[k])
	}
	mapStringForTags += "}"
	if this.Tags != nil {
		s = append(s, "Tags: "+mapStringForTags+",\n")
	}
	if this.EndpointService != nil {
		s = append(s, "EndpointService: "+fmt.Sprintf("%#v", this.EndpointService)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *F5BigIpAWSType_MarketPlaceImage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.F5BigIpAWSType_MarketPlaceImage{` +
		`MarketPlaceImage:` + fmt.Sprintf("%#v", this.MarketPlaceImage) + `}`}, ", ")
	return s
}
func (this *F5BigIpAWSType_ByolImage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.F5BigIpAWSType_ByolImage{` +
		`ByolImage:` + fmt.Sprintf("%#v", this.ByolImage) + `}`}, ", ")
	return s
}
func (this *F5BigIpAWSType_AwsTgwSiteParams) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.F5BigIpAWSType_AwsTgwSiteParams{` +
		`AwsTgwSiteParams:` + fmt.Sprintf("%#v", this.AwsTgwSiteParams) + `}`}, ", ")
	return s
}
func (this *F5BigIpAWSType_AwsVpcSiteParams) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.F5BigIpAWSType_AwsVpcSiteParams{` +
		`AwsVpcSiteParams:` + fmt.Sprintf("%#v", this.AwsVpcSiteParams) + `}`}, ", ")
	return s
}
func (this *F5BigIpAWSReplaceType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&nfv_service.F5BigIpAWSReplaceType{")
	keysForTags := make([]string, 0, len(this.Tags))
	for k, _ := range this.Tags {
		keysForTags = append(keysForTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
	mapStringForTags := "map[string]string{"
	for _, k := range keysForTags {
		mapStringForTags += fmt.Sprintf("%#v: %#v,", k, this.Tags[k])
	}
	mapStringForTags += "}"
	if this.Tags != nil {
		s = append(s, "Tags: "+mapStringForTags+",\n")
	}
	if this.EndpointService != nil {
		s = append(s, "EndpointService: "+fmt.Sprintf("%#v", this.EndpointService)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PanoramaServerType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&nfv_service.PanoramaServerType{")
	s = append(s, "Server: "+fmt.Sprintf("%#v", this.Server)+",\n")
	if this.AuthorizationKey != nil {
		s = append(s, "AuthorizationKey: "+fmt.Sprintf("%#v", this.AuthorizationKey)+",\n")
	}
	s = append(s, "TemplateStackName: "+fmt.Sprintf("%#v", this.TemplateStackName)+",\n")
	s = append(s, "DeviceGroupName: "+fmt.Sprintf("%#v", this.DeviceGroupName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SSHKeyType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&nfv_service.SSHKeyType{")
	s = append(s, "PublicKey: "+fmt.Sprintf("%#v", this.PublicKey)+",\n")
	if this.PrivateKey != nil {
		s = append(s, "PrivateKey: "+fmt.Sprintf("%#v", this.PrivateKey)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PANAWSAutoSetupType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&nfv_service.PANAWSAutoSetupType{")
	if this.SshKeysChoice != nil {
		s = append(s, "SshKeysChoice: "+fmt.Sprintf("%#v", this.SshKeysChoice)+",\n")
	}
	s = append(s, "AdminUsername: "+fmt.Sprintf("%#v", this.AdminUsername)+",\n")
	if this.AdminPassword != nil {
		s = append(s, "AdminPassword: "+fmt.Sprintf("%#v", this.AdminPassword)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PANAWSAutoSetupType_ManualSshKeys) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.PANAWSAutoSetupType_ManualSshKeys{` +
		`ManualSshKeys:` + fmt.Sprintf("%#v", this.ManualSshKeys) + `}`}, ", ")
	return s
}
func (this *PANAWSAutoSetupType_AutogeneratedSshKeys) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.PANAWSAutoSetupType_AutogeneratedSshKeys{` +
		`AutogeneratedSshKeys:` + fmt.Sprintf("%#v", this.AutogeneratedSshKeys) + `}`}, ", ")
	return s
}
func (this *PaloAltoServiceNodesAWSType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&nfv_service.PaloAltoServiceNodesAWSType{")
	s = append(s, "NodeName: "+fmt.Sprintf("%#v", this.NodeName)+",\n")
	s = append(s, "AwsAzName: "+fmt.Sprintf("%#v", this.AwsAzName)+",\n")
	if this.MgmtSubnetChoice != nil {
		s = append(s, "MgmtSubnetChoice: "+fmt.Sprintf("%#v", this.MgmtSubnetChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PaloAltoServiceNodesAWSType_ReservedMgmtSubnet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.PaloAltoServiceNodesAWSType_ReservedMgmtSubnet{` +
		`ReservedMgmtSubnet:` + fmt.Sprintf("%#v", this.ReservedMgmtSubnet) + `}`}, ", ")
	return s
}
func (this *PaloAltoServiceNodesAWSType_MgmtSubnet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.PaloAltoServiceNodesAWSType_MgmtSubnet{` +
		`MgmtSubnet:` + fmt.Sprintf("%#v", this.MgmtSubnet) + `}`}, ", ")
	return s
}
func (this *PaloAltoFWAWSType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&nfv_service.PaloAltoFWAWSType{")
	s = append(s, "InstanceType: "+fmt.Sprintf("%#v", this.InstanceType)+",\n")
	if this.AmiChoice != nil {
		s = append(s, "AmiChoice: "+fmt.Sprintf("%#v", this.AmiChoice)+",\n")
	}
	if this.PanaromaConnection != nil {
		s = append(s, "PanaromaConnection: "+fmt.Sprintf("%#v", this.PanaromaConnection)+",\n")
	}
	if this.SetupOptions != nil {
		s = append(s, "SetupOptions: "+fmt.Sprintf("%#v", this.SetupOptions)+",\n")
	}
	if this.AwsTgwSite != nil {
		s = append(s, "AwsTgwSite: "+fmt.Sprintf("%#v", this.AwsTgwSite)+",\n")
	}
	if this.ServiceNodes != nil {
		s = append(s, "ServiceNodes: "+fmt.Sprintf("%#v", this.ServiceNodes)+",\n")
	}
	keysForTags := make([]string, 0, len(this.Tags))
	for k, _ := range this.Tags {
		keysForTags = append(keysForTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
	mapStringForTags := "map[string]string{"
	for _, k := range keysForTags {
		mapStringForTags += fmt.Sprintf("%#v: %#v,", k, this.Tags[k])
	}
	mapStringForTags += "}"
	if this.Tags != nil {
		s = append(s, "Tags: "+mapStringForTags+",\n")
	}
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PaloAltoFWAWSType_PanAmiBundle1) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.PaloAltoFWAWSType_PanAmiBundle1{` +
		`PanAmiBundle1:` + fmt.Sprintf("%#v", this.PanAmiBundle1) + `}`}, ", ")
	return s
}
func (this *PaloAltoFWAWSType_PanAmiBundle2) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.PaloAltoFWAWSType_PanAmiBundle2{` +
		`PanAmiBundle2:` + fmt.Sprintf("%#v", this.PanAmiBundle2) + `}`}, ", ")
	return s
}
func (this *PaloAltoFWAWSType_DisablePanaroma) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.PaloAltoFWAWSType_DisablePanaroma{` +
		`DisablePanaroma:` + fmt.Sprintf("%#v", this.DisablePanaroma) + `}`}, ", ")
	return s
}
func (this *PaloAltoFWAWSType_PanoramaServer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.PaloAltoFWAWSType_PanoramaServer{` +
		`PanoramaServer:` + fmt.Sprintf("%#v", this.PanoramaServer) + `}`}, ", ")
	return s
}
func (this *PaloAltoFWAWSType_AutoSetup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.PaloAltoFWAWSType_AutoSetup{` +
		`AutoSetup:` + fmt.Sprintf("%#v", this.AutoSetup) + `}`}, ", ")
	return s
}
func (this *PaloAltoFWAWSType_SshKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.PaloAltoFWAWSType_SshKey{` +
		`SshKey:` + fmt.Sprintf("%#v", this.SshKey) + `}`}, ", ")
	return s
}
func (this *PaloAltoAzNodesAWSType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&nfv_service.PaloAltoAzNodesAWSType{")
	if this.Nodes != nil {
		s = append(s, "Nodes: "+fmt.Sprintf("%#v", this.Nodes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PaloAltoFWAWSReplaceType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&nfv_service.PaloAltoFWAWSReplaceType{")
	keysForTags := make([]string, 0, len(this.Tags))
	for k, _ := range this.Tags {
		keysForTags = append(keysForTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
	mapStringForTags := "map[string]string{"
	for _, k := range keysForTags {
		mapStringForTags += fmt.Sprintf("%#v: %#v,", k, this.Tags[k])
	}
	mapStringForTags += "}"
	if this.Tags != nil {
		s = append(s, "Tags: "+mapStringForTags+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SSHManagementNodePorts) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&nfv_service.SSHManagementNodePorts{")
	s = append(s, "NodeName: "+fmt.Sprintf("%#v", this.NodeName)+",\n")
	s = append(s, "SshPort: "+fmt.Sprintf("%#v", this.SshPort)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SSHManagementType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&nfv_service.SSHManagementType{")
	if this.AdvertiseChoice != nil {
		s = append(s, "AdvertiseChoice: "+fmt.Sprintf("%#v", this.AdvertiseChoice)+",\n")
	}
	if this.NodeSshPorts != nil {
		s = append(s, "NodeSshPorts: "+fmt.Sprintf("%#v", this.NodeSshPorts)+",\n")
	}
	s = append(s, "DomainSuffix: "+fmt.Sprintf("%#v", this.DomainSuffix)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SSHManagementType_AdvertiseOnPublicDefaultVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.SSHManagementType_AdvertiseOnPublicDefaultVip{` +
		`AdvertiseOnPublicDefaultVip:` + fmt.Sprintf("%#v", this.AdvertiseOnPublicDefaultVip) + `}`}, ", ")
	return s
}
func (this *SSHManagementType_AdvertiseOnPublic) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.SSHManagementType_AdvertiseOnPublic{` +
		`AdvertiseOnPublic:` + fmt.Sprintf("%#v", this.AdvertiseOnPublic) + `}`}, ", ")
	return s
}
func (this *SSHManagementType_AdvertiseOnSloInternetVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.SSHManagementType_AdvertiseOnSloInternetVip{` +
		`AdvertiseOnSloInternetVip:` + fmt.Sprintf("%#v", this.AdvertiseOnSloInternetVip) + `}`}, ", ")
	return s
}
func (this *SSHManagementType_AdvertiseOnSli) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.SSHManagementType_AdvertiseOnSli{` +
		`AdvertiseOnSli:` + fmt.Sprintf("%#v", this.AdvertiseOnSli) + `}`}, ", ")
	return s
}
func (this *SSHManagementType_AdvertiseOnSlo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.SSHManagementType_AdvertiseOnSlo{` +
		`AdvertiseOnSlo:` + fmt.Sprintf("%#v", this.AdvertiseOnSlo) + `}`}, ", ")
	return s
}
func (this *SSHManagementType_AdvertiseOnSloSli) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.SSHManagementType_AdvertiseOnSloSli{` +
		`AdvertiseOnSloSli:` + fmt.Sprintf("%#v", this.AdvertiseOnSloSli) + `}`}, ", ")
	return s
}
func (this *ServiceHttpsManagementType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 18)
	s = append(s, "&nfv_service.ServiceHttpsManagementType{")
	s = append(s, "DomainSuffix: "+fmt.Sprintf("%#v", this.DomainSuffix)+",\n")
	if this.PortChoice != nil {
		s = append(s, "PortChoice: "+fmt.Sprintf("%#v", this.PortChoice)+",\n")
	}
	if this.InternetChoice != nil {
		s = append(s, "InternetChoice: "+fmt.Sprintf("%#v", this.InternetChoice)+",\n")
	}
	if this.AdvertiseChoice != nil {
		s = append(s, "AdvertiseChoice: "+fmt.Sprintf("%#v", this.AdvertiseChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServiceHttpsManagementType_DefaultHttpsPort) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.ServiceHttpsManagementType_DefaultHttpsPort{` +
		`DefaultHttpsPort:` + fmt.Sprintf("%#v", this.DefaultHttpsPort) + `}`}, ", ")
	return s
}
func (this *ServiceHttpsManagementType_HttpsPort) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.ServiceHttpsManagementType_HttpsPort{` +
		`HttpsPort:` + fmt.Sprintf("%#v", this.HttpsPort) + `}`}, ", ")
	return s
}
func (this *ServiceHttpsManagementType_DoNotAdvertise) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.ServiceHttpsManagementType_DoNotAdvertise{` +
		`DoNotAdvertise:` + fmt.Sprintf("%#v", this.DoNotAdvertise) + `}`}, ", ")
	return s
}
func (this *ServiceHttpsManagementType_AdvertiseOnPublicDefaultVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.ServiceHttpsManagementType_AdvertiseOnPublicDefaultVip{` +
		`AdvertiseOnPublicDefaultVip:` + fmt.Sprintf("%#v", this.AdvertiseOnPublicDefaultVip) + `}`}, ", ")
	return s
}
func (this *ServiceHttpsManagementType_AdvertiseOnPublic) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.ServiceHttpsManagementType_AdvertiseOnPublic{` +
		`AdvertiseOnPublic:` + fmt.Sprintf("%#v", this.AdvertiseOnPublic) + `}`}, ", ")
	return s
}
func (this *ServiceHttpsManagementType_DoNotAdvertiseOnInternet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.ServiceHttpsManagementType_DoNotAdvertiseOnInternet{` +
		`DoNotAdvertiseOnInternet:` + fmt.Sprintf("%#v", this.DoNotAdvertiseOnInternet) + `}`}, ", ")
	return s
}
func (this *ServiceHttpsManagementType_AdvertiseOnInternetDefaultVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.ServiceHttpsManagementType_AdvertiseOnInternetDefaultVip{` +
		`AdvertiseOnInternetDefaultVip:` + fmt.Sprintf("%#v", this.AdvertiseOnInternetDefaultVip) + `}`}, ", ")
	return s
}
func (this *ServiceHttpsManagementType_AdvertiseOnInternet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.ServiceHttpsManagementType_AdvertiseOnInternet{` +
		`AdvertiseOnInternet:` + fmt.Sprintf("%#v", this.AdvertiseOnInternet) + `}`}, ", ")
	return s
}
func (this *ServiceHttpsManagementType_AdvertiseOnSloInternetVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.ServiceHttpsManagementType_AdvertiseOnSloInternetVip{` +
		`AdvertiseOnSloInternetVip:` + fmt.Sprintf("%#v", this.AdvertiseOnSloInternetVip) + `}`}, ", ")
	return s
}
func (this *ServiceHttpsManagementType_AdvertiseOnSliVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.ServiceHttpsManagementType_AdvertiseOnSliVip{` +
		`AdvertiseOnSliVip:` + fmt.Sprintf("%#v", this.AdvertiseOnSliVip) + `}`}, ", ")
	return s
}
func (this *ServiceHttpsManagementType_AdvertiseOnSloVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.ServiceHttpsManagementType_AdvertiseOnSloVip{` +
		`AdvertiseOnSloVip:` + fmt.Sprintf("%#v", this.AdvertiseOnSloVip) + `}`}, ", ")
	return s
}
func (this *ServiceHttpsManagementType_AdvertiseOnSloSli) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.ServiceHttpsManagementType_AdvertiseOnSloSli{` +
		`AdvertiseOnSloSli:` + fmt.Sprintf("%#v", this.AdvertiseOnSloSli) + `}`}, ", ")
	return s
}
func (this *ServiceHttpsManagementType_DisableLocal) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.ServiceHttpsManagementType_DisableLocal{` +
		`DisableLocal:` + fmt.Sprintf("%#v", this.DisableLocal) + `}`}, ", ")
	return s
}
func (this *F5BigIpAppStackBareMetalType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&nfv_service.F5BigIpAppStackBareMetalType{")
	s = append(s, "AdminUsername: "+fmt.Sprintf("%#v", this.AdminUsername)+",\n")
	if this.AdminPassword != nil {
		s = append(s, "AdminPassword: "+fmt.Sprintf("%#v", this.AdminPassword)+",\n")
	}
	s = append(s, "SshKey: "+fmt.Sprintf("%#v", this.SshKey)+",\n")
	if this.BareMetalSite != nil {
		s = append(s, "BareMetalSite: "+fmt.Sprintf("%#v", this.BareMetalSite)+",\n")
	}
	if this.BigiqInstance != nil {
		s = append(s, "BigiqInstance: "+fmt.Sprintf("%#v", this.BigiqInstance)+",\n")
	}
	if this.Nodes != nil {
		s = append(s, "Nodes: "+fmt.Sprintf("%#v", this.Nodes)+",\n")
	}
	s = append(s, "PublicDownloadUrl: "+fmt.Sprintf("%#v", this.PublicDownloadUrl)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InterfaceDetails) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&nfv_service.InterfaceDetails{")
	if this.Interface != nil {
		s = append(s, "Interface: "+fmt.Sprintf("%#v", this.Interface)+",\n")
	}
	s = append(s, "NetworkSelfIp: "+fmt.Sprintf("%#v", this.NetworkSelfIp)+",\n")
	s = append(s, "NetworkGateway: "+fmt.Sprintf("%#v", this.NetworkGateway)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BigIqInstanceType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&nfv_service.BigIqInstanceType{")
	s = append(s, "LicenseServerIp: "+fmt.Sprintf("%#v", this.LicenseServerIp)+",\n")
	s = append(s, "Username: "+fmt.Sprintf("%#v", this.Username)+",\n")
	if this.Password != nil {
		s = append(s, "Password: "+fmt.Sprintf("%#v", this.Password)+",\n")
	}
	s = append(s, "LicensePoolName: "+fmt.Sprintf("%#v", this.LicensePoolName)+",\n")
	s = append(s, "SkuName: "+fmt.Sprintf("%#v", this.SkuName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServiceNodesBareMetalType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&nfv_service.ServiceNodesBareMetalType{")
	s = append(s, "NodeName: "+fmt.Sprintf("%#v", this.NodeName)+",\n")
	if this.InternalInterface != nil {
		s = append(s, "InternalInterface: "+fmt.Sprintf("%#v", this.InternalInterface)+",\n")
	}
	if this.ExternalInterface != nil {
		s = append(s, "ExternalInterface: "+fmt.Sprintf("%#v", this.ExternalInterface)+",\n")
	}
	s = append(s, "BmVirtualCpuCount: "+fmt.Sprintf("%#v", this.BmVirtualCpuCount)+",\n")
	s = append(s, "BmNodeMemorySize: "+fmt.Sprintf("%#v", this.BmNodeMemorySize)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 30)
	s = append(s, "&nfv_service.GlobalSpecType{")
	if this.ServiceProviderChoice != nil {
		s = append(s, "ServiceProviderChoice: "+fmt.Sprintf("%#v", this.ServiceProviderChoice)+",\n")
	}
	if this.HttpManagementChoice != nil {
		s = append(s, "HttpManagementChoice: "+fmt.Sprintf("%#v", this.HttpManagementChoice)+",\n")
	}
	if this.SshManagementChoice != nil {
		s = append(s, "SshManagementChoice: "+fmt.Sprintf("%#v", this.SshManagementChoice)+",\n")
	}
	if this.ServiceTypeChoice != nil {
		s = append(s, "ServiceTypeChoice: "+fmt.Sprintf("%#v", this.ServiceTypeChoice)+",\n")
	}
	if this.NodeInfo != nil {
		s = append(s, "NodeInfo: "+fmt.Sprintf("%#v", this.NodeInfo)+",\n")
	}
	if this.Fleet != nil {
		s = append(s, "Fleet: "+fmt.Sprintf("%#v", this.Fleet)+",\n")
	}
	if this.CloudCredentials != nil {
		s = append(s, "CloudCredentials: "+fmt.Sprintf("%#v", this.CloudCredentials)+",\n")
	}
	if this.TfParams != nil {
		s = append(s, "TfParams: "+fmt.Sprintf("%#v", this.TfParams)+",\n")
	}
	if this.PolicySet != nil {
		s = append(s, "PolicySet: "+fmt.Sprintf("%#v", this.PolicySet)+",\n")
	}
	s = append(s, "InsideVip: "+fmt.Sprintf("%#v", this.InsideVip)+",\n")
	if this.OriginPool != nil {
		s = append(s, "OriginPool: "+fmt.Sprintf("%#v", this.OriginPool)+",\n")
	}
	if this.ManagementEndpointRefs != nil {
		s = append(s, "ManagementEndpointRefs: "+fmt.Sprintf("%#v", this.ManagementEndpointRefs)+",\n")
	}
	if this.ExternalNlbInfo != nil {
		s = append(s, "ExternalNlbInfo: "+fmt.Sprintf("%#v", this.ExternalNlbInfo)+",\n")
	}
	if this.ViewInternal != nil {
		s = append(s, "ViewInternal: "+fmt.Sprintf("%#v", this.ViewInternal)+",\n")
	}
	if this.Commands != nil {
		s = append(s, "Commands: "+fmt.Sprintf("%#v", this.Commands)+",\n")
	}
	if this.SiteRefs != nil {
		s = append(s, "SiteRefs: "+fmt.Sprintf("%#v", this.SiteRefs)+",\n")
	}
	if this.K8SManifestParams != nil {
		s = append(s, "K8SManifestParams: "+fmt.Sprintf("%#v", this.K8SManifestParams)+",\n")
	}
	s = append(s, "ServiceType: "+fmt.Sprintf("%#v", this.ServiceType)+",\n")
	if this.FinalizerTimestamp != nil {
		s = append(s, "FinalizerTimestamp: "+fmt.Sprintf("%#v", this.FinalizerTimestamp)+",\n")
	}
	s = append(s, "ForceDelete: "+fmt.Sprintf("%#v", this.ForceDelete)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_F5BigIpAwsService) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.GlobalSpecType_F5BigIpAwsService{` +
		`F5BigIpAwsService:` + fmt.Sprintf("%#v", this.F5BigIpAwsService) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_PaloAltoFwService) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.GlobalSpecType_PaloAltoFwService{` +
		`PaloAltoFwService:` + fmt.Sprintf("%#v", this.PaloAltoFwService) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_F5BigIpBareMetalType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.GlobalSpecType_F5BigIpBareMetalType{` +
		`F5BigIpBareMetalType:` + fmt.Sprintf("%#v", this.F5BigIpBareMetalType) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DisableHttpsManagement) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.GlobalSpecType_DisableHttpsManagement{` +
		`DisableHttpsManagement:` + fmt.Sprintf("%#v", this.DisableHttpsManagement) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_HttpsManagement) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.GlobalSpecType_HttpsManagement{` +
		`HttpsManagement:` + fmt.Sprintf("%#v", this.HttpsManagement) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DisableSshAccess) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.GlobalSpecType_DisableSshAccess{` +
		`DisableSshAccess:` + fmt.Sprintf("%#v", this.DisableSshAccess) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_EnabledSshAccess) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.GlobalSpecType_EnabledSshAccess{` +
		`EnabledSshAccess:` + fmt.Sprintf("%#v", this.EnabledSshAccess) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_EndpointService) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.GlobalSpecType_EndpointService{` +
		`EndpointService:` + fmt.Sprintf("%#v", this.EndpointService) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_ForwardingService) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.GlobalSpecType_ForwardingService{` +
		`ForwardingService:` + fmt.Sprintf("%#v", this.ForwardingService) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_TransparentService) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.GlobalSpecType_TransparentService{` +
		`TransparentService:` + fmt.Sprintf("%#v", this.TransparentService) + `}`}, ", ")
	return s
}
func (this *SuggestedCommands) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&nfv_service.SuggestedCommands{")
	s = append(s, "Command: "+fmt.Sprintf("%#v", this.Command)+",\n")
	s = append(s, "Warning: "+fmt.Sprintf("%#v", this.Warning)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EndpointRefType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&nfv_service.EndpointRefType{")
	s = append(s, "NodeName: "+fmt.Sprintf("%#v", this.NodeName)+",\n")
	if this.Endpoint != nil {
		s = append(s, "Endpoint: "+fmt.Sprintf("%#v", this.Endpoint)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExternalNLBInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&nfv_service.ExternalNLBInfo{")
	s = append(s, "VpcId: "+fmt.Sprintf("%#v", this.VpcId)+",\n")
	s = append(s, "Region: "+fmt.Sprintf("%#v", this.Region)+",\n")
	if this.AwsSubnetInfo != nil {
		s = append(s, "AwsSubnetInfo: "+fmt.Sprintf("%#v", this.AwsSubnetInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EndpointServiceReplaceType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&nfv_service.EndpointServiceReplaceType{")
	if this.ExternalVipChoice != nil {
		s = append(s, "ExternalVipChoice: "+fmt.Sprintf("%#v", this.ExternalVipChoice)+",\n")
	}
	if this.TcpPortChoice != nil {
		s = append(s, "TcpPortChoice: "+fmt.Sprintf("%#v", this.TcpPortChoice)+",\n")
	}
	if this.UdpPortChoice != nil {
		s = append(s, "UdpPortChoice: "+fmt.Sprintf("%#v", this.UdpPortChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EndpointServiceReplaceType_DisableAdvertiseOnSloIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.EndpointServiceReplaceType_DisableAdvertiseOnSloIp{` +
		`DisableAdvertiseOnSloIp:` + fmt.Sprintf("%#v", this.DisableAdvertiseOnSloIp) + `}`}, ", ")
	return s
}
func (this *EndpointServiceReplaceType_AdvertiseOnSloIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.EndpointServiceReplaceType_AdvertiseOnSloIp{` +
		`AdvertiseOnSloIp:` + fmt.Sprintf("%#v", this.AdvertiseOnSloIp) + `}`}, ", ")
	return s
}
func (this *EndpointServiceReplaceType_AdvertiseOnSloIpExternal) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.EndpointServiceReplaceType_AdvertiseOnSloIpExternal{` +
		`AdvertiseOnSloIpExternal:` + fmt.Sprintf("%#v", this.AdvertiseOnSloIpExternal) + `}`}, ", ")
	return s
}
func (this *EndpointServiceReplaceType_DefaultTcpPorts) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.EndpointServiceReplaceType_DefaultTcpPorts{` +
		`DefaultTcpPorts:` + fmt.Sprintf("%#v", this.DefaultTcpPorts) + `}`}, ", ")
	return s
}
func (this *EndpointServiceReplaceType_HttpPort) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.EndpointServiceReplaceType_HttpPort{` +
		`HttpPort:` + fmt.Sprintf("%#v", this.HttpPort) + `}`}, ", ")
	return s
}
func (this *EndpointServiceReplaceType_HttpsPort) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.EndpointServiceReplaceType_HttpsPort{` +
		`HttpsPort:` + fmt.Sprintf("%#v", this.HttpsPort) + `}`}, ", ")
	return s
}
func (this *EndpointServiceReplaceType_CustomTcpPorts) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.EndpointServiceReplaceType_CustomTcpPorts{` +
		`CustomTcpPorts:` + fmt.Sprintf("%#v", this.CustomTcpPorts) + `}`}, ", ")
	return s
}
func (this *EndpointServiceReplaceType_NoTcpPorts) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.EndpointServiceReplaceType_NoTcpPorts{` +
		`NoTcpPorts:` + fmt.Sprintf("%#v", this.NoTcpPorts) + `}`}, ", ")
	return s
}
func (this *EndpointServiceReplaceType_NoUdpPorts) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.EndpointServiceReplaceType_NoUdpPorts{` +
		`NoUdpPorts:` + fmt.Sprintf("%#v", this.NoUdpPorts) + `}`}, ", ")
	return s
}
func (this *EndpointServiceReplaceType_CustomUdpPorts) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.EndpointServiceReplaceType_CustomUdpPorts{` +
		`CustomUdpPorts:` + fmt.Sprintf("%#v", this.CustomUdpPorts) + `}`}, ", ")
	return s
}
func (this *NodeInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&nfv_service.NodeInfo{")
	s = append(s, "SshCommand: "+fmt.Sprintf("%#v", this.SshCommand)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&nfv_service.CreateSpecType{")
	if this.ServiceProviderChoice != nil {
		s = append(s, "ServiceProviderChoice: "+fmt.Sprintf("%#v", this.ServiceProviderChoice)+",\n")
	}
	if this.HttpManagementChoice != nil {
		s = append(s, "HttpManagementChoice: "+fmt.Sprintf("%#v", this.HttpManagementChoice)+",\n")
	}
	if this.SshManagementChoice != nil {
		s = append(s, "SshManagementChoice: "+fmt.Sprintf("%#v", this.SshManagementChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType_F5BigIpAwsService) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.CreateSpecType_F5BigIpAwsService{` +
		`F5BigIpAwsService:` + fmt.Sprintf("%#v", this.F5BigIpAwsService) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_PaloAltoFwService) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.CreateSpecType_PaloAltoFwService{` +
		`PaloAltoFwService:` + fmt.Sprintf("%#v", this.PaloAltoFwService) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DisableHttpsManagement) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.CreateSpecType_DisableHttpsManagement{` +
		`DisableHttpsManagement:` + fmt.Sprintf("%#v", this.DisableHttpsManagement) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_HttpsManagement) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.CreateSpecType_HttpsManagement{` +
		`HttpsManagement:` + fmt.Sprintf("%#v", this.HttpsManagement) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DisableSshAccess) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.CreateSpecType_DisableSshAccess{` +
		`DisableSshAccess:` + fmt.Sprintf("%#v", this.DisableSshAccess) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_EnabledSshAccess) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.CreateSpecType_EnabledSshAccess{` +
		`EnabledSshAccess:` + fmt.Sprintf("%#v", this.EnabledSshAccess) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&nfv_service.ReplaceSpecType{")
	if this.ServiceProviderChoice != nil {
		s = append(s, "ServiceProviderChoice: "+fmt.Sprintf("%#v", this.ServiceProviderChoice)+",\n")
	}
	if this.HttpManagementChoice != nil {
		s = append(s, "HttpManagementChoice: "+fmt.Sprintf("%#v", this.HttpManagementChoice)+",\n")
	}
	if this.SshManagementChoice != nil {
		s = append(s, "SshManagementChoice: "+fmt.Sprintf("%#v", this.SshManagementChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType_F5BigIpAwsService) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.ReplaceSpecType_F5BigIpAwsService{` +
		`F5BigIpAwsService:` + fmt.Sprintf("%#v", this.F5BigIpAwsService) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_PaloAltoFwService) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.ReplaceSpecType_PaloAltoFwService{` +
		`PaloAltoFwService:` + fmt.Sprintf("%#v", this.PaloAltoFwService) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DisableHttpsManagement) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.ReplaceSpecType_DisableHttpsManagement{` +
		`DisableHttpsManagement:` + fmt.Sprintf("%#v", this.DisableHttpsManagement) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_HttpsManagement) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.ReplaceSpecType_HttpsManagement{` +
		`HttpsManagement:` + fmt.Sprintf("%#v", this.HttpsManagement) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DisableSshAccess) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.ReplaceSpecType_DisableSshAccess{` +
		`DisableSshAccess:` + fmt.Sprintf("%#v", this.DisableSshAccess) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_EnabledSshAccess) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.ReplaceSpecType_EnabledSshAccess{` +
		`EnabledSshAccess:` + fmt.Sprintf("%#v", this.EnabledSshAccess) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&nfv_service.GetSpecType{")
	if this.ServiceProviderChoice != nil {
		s = append(s, "ServiceProviderChoice: "+fmt.Sprintf("%#v", this.ServiceProviderChoice)+",\n")
	}
	if this.HttpManagementChoice != nil {
		s = append(s, "HttpManagementChoice: "+fmt.Sprintf("%#v", this.HttpManagementChoice)+",\n")
	}
	if this.SshManagementChoice != nil {
		s = append(s, "SshManagementChoice: "+fmt.Sprintf("%#v", this.SshManagementChoice)+",\n")
	}
	if this.ServiceTypeChoice != nil {
		s = append(s, "ServiceTypeChoice: "+fmt.Sprintf("%#v", this.ServiceTypeChoice)+",\n")
	}
	if this.Commands != nil {
		s = append(s, "Commands: "+fmt.Sprintf("%#v", this.Commands)+",\n")
	}
	if this.FinalizerTimestamp != nil {
		s = append(s, "FinalizerTimestamp: "+fmt.Sprintf("%#v", this.FinalizerTimestamp)+",\n")
	}
	s = append(s, "ForceDelete: "+fmt.Sprintf("%#v", this.ForceDelete)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_F5BigIpAwsService) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.GetSpecType_F5BigIpAwsService{` +
		`F5BigIpAwsService:` + fmt.Sprintf("%#v", this.F5BigIpAwsService) + `}`}, ", ")
	return s
}
func (this *GetSpecType_PaloAltoFwService) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.GetSpecType_PaloAltoFwService{` +
		`PaloAltoFwService:` + fmt.Sprintf("%#v", this.PaloAltoFwService) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DisableHttpsManagement) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.GetSpecType_DisableHttpsManagement{` +
		`DisableHttpsManagement:` + fmt.Sprintf("%#v", this.DisableHttpsManagement) + `}`}, ", ")
	return s
}
func (this *GetSpecType_HttpsManagement) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.GetSpecType_HttpsManagement{` +
		`HttpsManagement:` + fmt.Sprintf("%#v", this.HttpsManagement) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DisableSshAccess) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.GetSpecType_DisableSshAccess{` +
		`DisableSshAccess:` + fmt.Sprintf("%#v", this.DisableSshAccess) + `}`}, ", ")
	return s
}
func (this *GetSpecType_EnabledSshAccess) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.GetSpecType_EnabledSshAccess{` +
		`EnabledSshAccess:` + fmt.Sprintf("%#v", this.EnabledSshAccess) + `}`}, ", ")
	return s
}
func (this *GetSpecType_EndpointService) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.GetSpecType_EndpointService{` +
		`EndpointService:` + fmt.Sprintf("%#v", this.EndpointService) + `}`}, ", ")
	return s
}
func (this *GetSpecType_ForwardingService) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.GetSpecType_ForwardingService{` +
		`ForwardingService:` + fmt.Sprintf("%#v", this.ForwardingService) + `}`}, ", ")
	return s
}
func (this *GetSpecType_TransparentService) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nfv_service.GetSpecType_TransparentService{` +
		`TransparentService:` + fmt.Sprintf("%#v", this.TransparentService) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ForwardingServiceType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForwardingServiceType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForwardingServiceType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *EndpointServiceType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndpointServiceType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndpointServiceType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UdpPortChoice != nil {
		{
			size := m.UdpPortChoice.Size()
			i -= size
			if _, err := m.UdpPortChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.TcpPortChoice != nil {
		{
			size := m.TcpPortChoice.Size()
			i -= size
			if _, err := m.TcpPortChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ExternalVipChoice != nil {
		{
			size := m.ExternalVipChoice.Size()
			i -= size
			if _, err := m.ExternalVipChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.InsideVipChoice != nil {
		{
			size := m.InsideVipChoice.Size()
			i -= size
			if _, err := m.InsideVipChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *EndpointServiceType_AutomaticVip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndpointServiceType_AutomaticVip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AutomaticVip != nil {
		{
			size, err := m.AutomaticVip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *EndpointServiceType_ConfiguredVip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndpointServiceType_ConfiguredVip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.ConfiguredVip)
	copy(dAtA[i:], m.ConfiguredVip)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.ConfiguredVip)))
	i--
	dAtA[i] = 0x22
	return len(dAtA) - i, nil
}
func (m *EndpointServiceType_DisableAdvertiseOnSloIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndpointServiceType_DisableAdvertiseOnSloIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableAdvertiseOnSloIp != nil {
		{
			size, err := m.DisableAdvertiseOnSloIp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *EndpointServiceType_AdvertiseOnSloIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndpointServiceType_AdvertiseOnSloIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseOnSloIp != nil {
		{
			size, err := m.AdvertiseOnSloIp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *EndpointServiceType_AdvertiseOnSloIpExternal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndpointServiceType_AdvertiseOnSloIpExternal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseOnSloIpExternal != nil {
		{
			size, err := m.AdvertiseOnSloIpExternal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *EndpointServiceType_DefaultTcpPorts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndpointServiceType_DefaultTcpPorts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultTcpPorts != nil {
		{
			size, err := m.DefaultTcpPorts.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *EndpointServiceType_HttpPort) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndpointServiceType_HttpPort) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpPort != nil {
		{
			size, err := m.HttpPort.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *EndpointServiceType_HttpsPort) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndpointServiceType_HttpsPort) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpsPort != nil {
		{
			size, err := m.HttpsPort.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *EndpointServiceType_CustomTcpPorts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndpointServiceType_CustomTcpPorts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CustomTcpPorts != nil {
		{
			size, err := m.CustomTcpPorts.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *EndpointServiceType_NoTcpPorts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndpointServiceType_NoTcpPorts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoTcpPorts != nil {
		{
			size, err := m.NoTcpPorts.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *EndpointServiceType_NoUdpPorts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndpointServiceType_NoUdpPorts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoUdpPorts != nil {
		{
			size, err := m.NoUdpPorts.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *EndpointServiceType_CustomUdpPorts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndpointServiceType_CustomUdpPorts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CustomUdpPorts != nil {
		{
			size, err := m.CustomUdpPorts.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *ServiceNodesAWSType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceNodesAWSType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceNodesAWSType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MgmtSubnetChoice != nil {
		{
			size := m.MgmtSubnetChoice.Size()
			i -= size
			if _, err := m.MgmtSubnetChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.TunnelPrefixChoice != nil {
		{
			size := m.TunnelPrefixChoice.Size()
			i -= size
			if _, err := m.TunnelPrefixChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.AwsAzName) > 0 {
		i -= len(m.AwsAzName)
		copy(dAtA[i:], m.AwsAzName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AwsAzName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NodeName) > 0 {
		i -= len(m.NodeName)
		copy(dAtA[i:], m.NodeName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.NodeName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ServiceNodesAWSType_AutomaticPrefix) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceNodesAWSType_AutomaticPrefix) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AutomaticPrefix != nil {
		{
			size, err := m.AutomaticPrefix.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ServiceNodesAWSType_TunnelPrefix) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceNodesAWSType_TunnelPrefix) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.TunnelPrefix)
	copy(dAtA[i:], m.TunnelPrefix)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.TunnelPrefix)))
	i--
	dAtA[i] = 0x2a
	return len(dAtA) - i, nil
}
func (m *ServiceNodesAWSType_ReservedMgmtSubnet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceNodesAWSType_ReservedMgmtSubnet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReservedMgmtSubnet != nil {
		{
			size, err := m.ReservedMgmtSubnet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *ServiceNodesAWSType_MgmtSubnet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceNodesAWSType_MgmtSubnet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MgmtSubnet != nil {
		{
			size, err := m.MgmtSubnet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *F5BigIpAWSTGWSiteType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *F5BigIpAWSTGWSiteType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *F5BigIpAWSTGWSiteType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AwsTgwSite != nil {
		{
			size, err := m.AwsTgwSite.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}

func (m *F5BigIpAWSVPCSiteType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *F5BigIpAWSVPCSiteType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *F5BigIpAWSVPCSiteType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AwsVpcSite != nil {
		{
			size, err := m.AwsVpcSite.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}

func (m *F5BigIpAWSBYOLImageType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *F5BigIpAWSBYOLImageType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *F5BigIpAWSBYOLImageType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.License != nil {
		{
			size, err := m.License.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Image) > 0 {
		i -= len(m.Image)
		copy(dAtA[i:], m.Image)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Image)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *F5BigIpAWSMarketPlaceImageType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *F5BigIpAWSMarketPlaceImageType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *F5BigIpAWSMarketPlaceImageType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AmiChoice != nil {
		{
			size := m.AmiChoice.Size()
			i -= size
			if _, err := m.AmiChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *F5BigIpAWSMarketPlaceImageType_AWAFPayG200Mbps) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *F5BigIpAWSMarketPlaceImageType_AWAFPayG200Mbps) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AWAFPayG200Mbps != nil {
		{
			size, err := m.AWAFPayG200Mbps.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *F5BigIpAWSMarketPlaceImageType_AWAFPayG3Gbps) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *F5BigIpAWSMarketPlaceImageType_AWAFPayG3Gbps) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AWAFPayG3Gbps != nil {
		{
			size, err := m.AWAFPayG3Gbps.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *F5BigIpAWSMarketPlaceImageType_BestPlusPayG200Mbps) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *F5BigIpAWSMarketPlaceImageType_BestPlusPayG200Mbps) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BestPlusPayG200Mbps != nil {
		{
			size, err := m.BestPlusPayG200Mbps.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *F5BigIpAWSMarketPlaceImageType_BestPlusPayg_1Gbps) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *F5BigIpAWSMarketPlaceImageType_BestPlusPayg_1Gbps) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BestPlusPayg_1Gbps != nil {
		{
			size, err := m.BestPlusPayg_1Gbps.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *F5BigIpAWSType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *F5BigIpAWSType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *F5BigIpAWSType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndpointService != nil {
		{
			size, err := m.EndpointService.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Tags) > 0 {
		keysForTags := make([]string, 0, len(m.Tags))
		for k := range m.Tags {
			keysForTags = append(keysForTags, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
		for iNdEx := len(keysForTags) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Tags[string(keysForTags[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTypes(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForTags[iNdEx])
			copy(dAtA[i:], keysForTags[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(keysForTags[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x62
		}
	}
	if m.ImageChoice != nil {
		{
			size := m.ImageChoice.Size()
			i -= size
			if _, err := m.ImageChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.AdminUsername) > 0 {
		i -= len(m.AdminUsername)
		copy(dAtA[i:], m.AdminUsername)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AdminUsername)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Nodes) > 0 {
		for iNdEx := len(m.Nodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Nodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.SiteTypeChoice != nil {
		{
			size := m.SiteTypeChoice.Size()
			i -= size
			if _, err := m.SiteTypeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.SshKey) > 0 {
		i -= len(m.SshKey)
		copy(dAtA[i:], m.SshKey)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SshKey)))
		i--
		dAtA[i] = 0x2a
	}
	if m.AdminPassword != nil {
		{
			size, err := m.AdminPassword.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}

func (m *F5BigIpAWSType_ByolImage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *F5BigIpAWSType_ByolImage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ByolImage != nil {
		{
			size, err := m.ByolImage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *F5BigIpAWSType_AwsTgwSiteParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *F5BigIpAWSType_AwsTgwSiteParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AwsTgwSiteParams != nil {
		{
			size, err := m.AwsTgwSiteParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *F5BigIpAWSType_AwsVpcSiteParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *F5BigIpAWSType_AwsVpcSiteParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AwsVpcSiteParams != nil {
		{
			size, err := m.AwsVpcSiteParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *F5BigIpAWSType_MarketPlaceImage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *F5BigIpAWSType_MarketPlaceImage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MarketPlaceImage != nil {
		{
			size, err := m.MarketPlaceImage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *F5BigIpAWSReplaceType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *F5BigIpAWSReplaceType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *F5BigIpAWSReplaceType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndpointService != nil {
		{
			size, err := m.EndpointService.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Tags) > 0 {
		keysForTags := make([]string, 0, len(m.Tags))
		for k := range m.Tags {
			keysForTags = append(keysForTags, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
		for iNdEx := len(keysForTags) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Tags[string(keysForTags[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTypes(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForTags[iNdEx])
			copy(dAtA[i:], keysForTags[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(keysForTags[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x62
		}
	}
	return len(dAtA) - i, nil
}

func (m *PanoramaServerType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PanoramaServerType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PanoramaServerType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DeviceGroupName) > 0 {
		i -= len(m.DeviceGroupName)
		copy(dAtA[i:], m.DeviceGroupName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.DeviceGroupName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TemplateStackName) > 0 {
		i -= len(m.TemplateStackName)
		copy(dAtA[i:], m.TemplateStackName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TemplateStackName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AuthorizationKey != nil {
		{
			size, err := m.AuthorizationKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Server) > 0 {
		i -= len(m.Server)
		copy(dAtA[i:], m.Server)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Server)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SSHKeyType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SSHKeyType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SSHKeyType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PrivateKey != nil {
		{
			size, err := m.PrivateKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PANAWSAutoSetupType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PANAWSAutoSetupType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PANAWSAutoSetupType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AdminPassword != nil {
		{
			size, err := m.AdminPassword.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.AdminUsername) > 0 {
		i -= len(m.AdminUsername)
		copy(dAtA[i:], m.AdminUsername)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AdminUsername)))
		i--
		dAtA[i] = 0x22
	}
	if m.SshKeysChoice != nil {
		{
			size := m.SshKeysChoice.Size()
			i -= size
			if _, err := m.SshKeysChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *PANAWSAutoSetupType_ManualSshKeys) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PANAWSAutoSetupType_ManualSshKeys) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ManualSshKeys != nil {
		{
			size, err := m.ManualSshKeys.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *PANAWSAutoSetupType_AutogeneratedSshKeys) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PANAWSAutoSetupType_AutogeneratedSshKeys) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AutogeneratedSshKeys != nil {
		{
			size, err := m.AutogeneratedSshKeys.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *PaloAltoServiceNodesAWSType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaloAltoServiceNodesAWSType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PaloAltoServiceNodesAWSType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MgmtSubnetChoice != nil {
		{
			size := m.MgmtSubnetChoice.Size()
			i -= size
			if _, err := m.MgmtSubnetChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.AwsAzName) > 0 {
		i -= len(m.AwsAzName)
		copy(dAtA[i:], m.AwsAzName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AwsAzName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NodeName) > 0 {
		i -= len(m.NodeName)
		copy(dAtA[i:], m.NodeName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.NodeName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PaloAltoServiceNodesAWSType_ReservedMgmtSubnet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PaloAltoServiceNodesAWSType_ReservedMgmtSubnet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReservedMgmtSubnet != nil {
		{
			size, err := m.ReservedMgmtSubnet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *PaloAltoServiceNodesAWSType_MgmtSubnet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PaloAltoServiceNodesAWSType_MgmtSubnet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MgmtSubnet != nil {
		{
			size, err := m.MgmtSubnet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *PaloAltoFWAWSType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaloAltoFWAWSType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PaloAltoFWAWSType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.SetupOptions != nil {
		{
			size := m.SetupOptions.Size()
			i -= size
			if _, err := m.SetupOptions.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.PanaromaConnection != nil {
		{
			size := m.PanaromaConnection.Size()
			i -= size
			if _, err := m.PanaromaConnection.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Tags) > 0 {
		keysForTags := make([]string, 0, len(m.Tags))
		for k := range m.Tags {
			keysForTags = append(keysForTags, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
		for iNdEx := len(keysForTags) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Tags[string(keysForTags[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTypes(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForTags[iNdEx])
			copy(dAtA[i:], keysForTags[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(keysForTags[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.ServiceNodes != nil {
		{
			size, err := m.ServiceNodes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.AwsTgwSite != nil {
		{
			size, err := m.AwsTgwSite.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.AmiChoice != nil {
		{
			size := m.AmiChoice.Size()
			i -= size
			if _, err := m.AmiChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.InstanceType != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.InstanceType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PaloAltoFWAWSType_PanAmiBundle1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PaloAltoFWAWSType_PanAmiBundle1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PanAmiBundle1 != nil {
		{
			size, err := m.PanAmiBundle1.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *PaloAltoFWAWSType_PanAmiBundle2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PaloAltoFWAWSType_PanAmiBundle2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PanAmiBundle2 != nil {
		{
			size, err := m.PanAmiBundle2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *PaloAltoFWAWSType_PanoramaServer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PaloAltoFWAWSType_PanoramaServer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PanoramaServer != nil {
		{
			size, err := m.PanoramaServer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *PaloAltoFWAWSType_SshKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PaloAltoFWAWSType_SshKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.SshKey)
	copy(dAtA[i:], m.SshKey)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.SshKey)))
	i--
	dAtA[i] = 0x42
	return len(dAtA) - i, nil
}
func (m *PaloAltoFWAWSType_DisablePanaroma) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PaloAltoFWAWSType_DisablePanaroma) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisablePanaroma != nil {
		{
			size, err := m.DisablePanaroma.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *PaloAltoFWAWSType_AutoSetup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PaloAltoFWAWSType_AutoSetup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AutoSetup != nil {
		{
			size, err := m.AutoSetup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *PaloAltoAzNodesAWSType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaloAltoAzNodesAWSType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PaloAltoAzNodesAWSType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for iNdEx := len(m.Nodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Nodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PaloAltoFWAWSReplaceType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaloAltoFWAWSReplaceType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PaloAltoFWAWSReplaceType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tags) > 0 {
		keysForTags := make([]string, 0, len(m.Tags))
		for k := range m.Tags {
			keysForTags = append(keysForTags, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
		for iNdEx := len(keysForTags) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Tags[string(keysForTags[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTypes(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForTags[iNdEx])
			copy(dAtA[i:], keysForTags[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(keysForTags[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x5a
		}
	}
	return len(dAtA) - i, nil
}

func (m *SSHManagementNodePorts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SSHManagementNodePorts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SSHManagementNodePorts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SshPort != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.SshPort))
		i--
		dAtA[i] = 0x10
	}
	if len(m.NodeName) > 0 {
		i -= len(m.NodeName)
		copy(dAtA[i:], m.NodeName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.NodeName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SSHManagementType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SSHManagementType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SSHManagementType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DomainSuffix) > 0 {
		i -= len(m.DomainSuffix)
		copy(dAtA[i:], m.DomainSuffix)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.DomainSuffix)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.NodeSshPorts) > 0 {
		for iNdEx := len(m.NodeSshPorts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NodeSshPorts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	if m.AdvertiseChoice != nil {
		{
			size := m.AdvertiseChoice.Size()
			i -= size
			if _, err := m.AdvertiseChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *SSHManagementType_AdvertiseOnPublicDefaultVip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SSHManagementType_AdvertiseOnPublicDefaultVip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseOnPublicDefaultVip != nil {
		{
			size, err := m.AdvertiseOnPublicDefaultVip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *SSHManagementType_AdvertiseOnPublic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SSHManagementType_AdvertiseOnPublic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseOnPublic != nil {
		{
			size, err := m.AdvertiseOnPublic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *SSHManagementType_AdvertiseOnSloInternetVip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SSHManagementType_AdvertiseOnSloInternetVip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseOnSloInternetVip != nil {
		{
			size, err := m.AdvertiseOnSloInternetVip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *SSHManagementType_AdvertiseOnSli) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SSHManagementType_AdvertiseOnSli) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseOnSli != nil {
		{
			size, err := m.AdvertiseOnSli.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *SSHManagementType_AdvertiseOnSlo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SSHManagementType_AdvertiseOnSlo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseOnSlo != nil {
		{
			size, err := m.AdvertiseOnSlo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *SSHManagementType_AdvertiseOnSloSli) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SSHManagementType_AdvertiseOnSloSli) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseOnSloSli != nil {
		{
			size, err := m.AdvertiseOnSloSli.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *ServiceHttpsManagementType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceHttpsManagementType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceHttpsManagementType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AdvertiseChoice != nil {
		{
			size := m.AdvertiseChoice.Size()
			i -= size
			if _, err := m.AdvertiseChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.InternetChoice != nil {
		{
			size := m.InternetChoice.Size()
			i -= size
			if _, err := m.InternetChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.PortChoice != nil {
		{
			size := m.PortChoice.Size()
			i -= size
			if _, err := m.PortChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.DomainSuffix) > 0 {
		i -= len(m.DomainSuffix)
		copy(dAtA[i:], m.DomainSuffix)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.DomainSuffix)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ServiceHttpsManagementType_DefaultHttpsPort) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceHttpsManagementType_DefaultHttpsPort) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultHttpsPort != nil {
		{
			size, err := m.DefaultHttpsPort.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ServiceHttpsManagementType_HttpsPort) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceHttpsManagementType_HttpsPort) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.HttpsPort))
	i--
	dAtA[i] = 0x20
	return len(dAtA) - i, nil
}
func (m *ServiceHttpsManagementType_DoNotAdvertise) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceHttpsManagementType_DoNotAdvertise) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DoNotAdvertise != nil {
		{
			size, err := m.DoNotAdvertise.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *ServiceHttpsManagementType_AdvertiseOnPublicDefaultVip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceHttpsManagementType_AdvertiseOnPublicDefaultVip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseOnPublicDefaultVip != nil {
		{
			size, err := m.AdvertiseOnPublicDefaultVip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *ServiceHttpsManagementType_AdvertiseOnPublic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceHttpsManagementType_AdvertiseOnPublic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseOnPublic != nil {
		{
			size, err := m.AdvertiseOnPublic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *ServiceHttpsManagementType_AdvertiseOnSliVip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceHttpsManagementType_AdvertiseOnSliVip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseOnSliVip != nil {
		{
			size, err := m.AdvertiseOnSliVip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *ServiceHttpsManagementType_AdvertiseOnSloVip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceHttpsManagementType_AdvertiseOnSloVip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseOnSloVip != nil {
		{
			size, err := m.AdvertiseOnSloVip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *ServiceHttpsManagementType_AdvertiseOnSloSli) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceHttpsManagementType_AdvertiseOnSloSli) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseOnSloSli != nil {
		{
			size, err := m.AdvertiseOnSloSli.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *ServiceHttpsManagementType_DisableLocal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceHttpsManagementType_DisableLocal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableLocal != nil {
		{
			size, err := m.DisableLocal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *ServiceHttpsManagementType_AdvertiseOnSloInternetVip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceHttpsManagementType_AdvertiseOnSloInternetVip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseOnSloInternetVip != nil {
		{
			size, err := m.AdvertiseOnSloInternetVip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *ServiceHttpsManagementType_DoNotAdvertiseOnInternet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceHttpsManagementType_DoNotAdvertiseOnInternet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DoNotAdvertiseOnInternet != nil {
		{
			size, err := m.DoNotAdvertiseOnInternet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *ServiceHttpsManagementType_AdvertiseOnInternetDefaultVip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceHttpsManagementType_AdvertiseOnInternetDefaultVip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseOnInternetDefaultVip != nil {
		{
			size, err := m.AdvertiseOnInternetDefaultVip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *ServiceHttpsManagementType_AdvertiseOnInternet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceHttpsManagementType_AdvertiseOnInternet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseOnInternet != nil {
		{
			size, err := m.AdvertiseOnInternet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *F5BigIpAppStackBareMetalType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *F5BigIpAppStackBareMetalType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *F5BigIpAppStackBareMetalType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BigiqInstance != nil {
		{
			size, err := m.BigiqInstance.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.PublicDownloadUrl) > 0 {
		i -= len(m.PublicDownloadUrl)
		copy(dAtA[i:], m.PublicDownloadUrl)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.PublicDownloadUrl)))
		i--
		dAtA[i] = 0x32
	}
	if m.BareMetalSite != nil {
		{
			size, err := m.BareMetalSite.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Nodes) > 0 {
		for iNdEx := len(m.Nodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Nodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.SshKey) > 0 {
		i -= len(m.SshKey)
		copy(dAtA[i:], m.SshKey)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SshKey)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AdminPassword != nil {
		{
			size, err := m.AdminPassword.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.AdminUsername) > 0 {
		i -= len(m.AdminUsername)
		copy(dAtA[i:], m.AdminUsername)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AdminUsername)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InterfaceDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfaceDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfaceDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NetworkGateway) > 0 {
		i -= len(m.NetworkGateway)
		copy(dAtA[i:], m.NetworkGateway)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.NetworkGateway)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NetworkSelfIp) > 0 {
		i -= len(m.NetworkSelfIp)
		copy(dAtA[i:], m.NetworkSelfIp)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.NetworkSelfIp)))
		i--
		dAtA[i] = 0x12
	}
	if m.Interface != nil {
		{
			size, err := m.Interface.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BigIqInstanceType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BigIqInstanceType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BigIqInstanceType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LicenseServerIp) > 0 {
		i -= len(m.LicenseServerIp)
		copy(dAtA[i:], m.LicenseServerIp)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.LicenseServerIp)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.SkuName) > 0 {
		i -= len(m.SkuName)
		copy(dAtA[i:], m.SkuName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SkuName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.LicensePoolName) > 0 {
		i -= len(m.LicensePoolName)
		copy(dAtA[i:], m.LicensePoolName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.LicensePoolName)))
		i--
		dAtA[i] = 0x22
	}
	if m.Password != nil {
		{
			size, err := m.Password.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *ServiceNodesBareMetalType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceNodesBareMetalType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceNodesBareMetalType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BmNodeMemorySize != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.BmNodeMemorySize))
		i--
		dAtA[i] = 0x30
	}
	if m.BmVirtualCpuCount != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.BmVirtualCpuCount))
		i--
		dAtA[i] = 0x28
	}
	if m.ExternalInterface != nil {
		{
			size, err := m.ExternalInterface.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.InternalInterface != nil {
		{
			size, err := m.InternalInterface.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NodeName) > 0 {
		i -= len(m.NodeName)
		copy(dAtA[i:], m.NodeName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.NodeName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ViewInternal != nil {
		{
			size, err := m.ViewInternal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7d
		i--
		dAtA[i] = 0x82
	}
	if m.ForceDelete {
		i--
		if m.ForceDelete {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x3f
		i--
		dAtA[i] = 0xb8
	}
	if m.FinalizerTimestamp != nil {
		{
			size, err := m.FinalizerTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3f
		i--
		dAtA[i] = 0xb2
	}
	if m.ServiceType != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ServiceType))
		i--
		dAtA[i] = 0x3f
		i--
		dAtA[i] = 0xa8
	}
	if len(m.K8SManifestParams) > 0 {
		for iNdEx := len(m.K8SManifestParams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.K8SManifestParams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3f
			i--
			dAtA[i] = 0xa2
		}
	}
	if len(m.SiteRefs) > 0 {
		for iNdEx := len(m.SiteRefs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SiteRefs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3f
			i--
			dAtA[i] = 0x92
		}
	}
	if len(m.Commands) > 0 {
		for iNdEx := len(m.Commands) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Commands[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3f
			i--
			dAtA[i] = 0x8a
		}
	}
	if m.ExternalNlbInfo != nil {
		{
			size, err := m.ExternalNlbInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3f
		i--
		dAtA[i] = 0x82
	}
	if len(m.ManagementEndpointRefs) > 0 {
		for iNdEx := len(m.ManagementEndpointRefs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ManagementEndpointRefs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3e
			i--
			dAtA[i] = 0xf2
		}
	}
	if len(m.OriginPool) > 0 {
		for iNdEx := len(m.OriginPool) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OriginPool[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3e
			i--
			dAtA[i] = 0xea
		}
	}
	if len(m.InsideVip) > 0 {
		i -= len(m.InsideVip)
		copy(dAtA[i:], m.InsideVip)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.InsideVip)))
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xe2
	}
	if len(m.PolicySet) > 0 {
		for iNdEx := len(m.PolicySet) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PolicySet[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3e
			i--
			dAtA[i] = 0xda
		}
	}
	if len(m.TfParams) > 0 {
		for iNdEx := len(m.TfParams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TfParams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3e
			i--
			dAtA[i] = 0xd2
		}
	}
	if len(m.CloudCredentials) > 0 {
		for iNdEx := len(m.CloudCredentials) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CloudCredentials[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3e
			i--
			dAtA[i] = 0xca
		}
	}
	if len(m.Fleet) > 0 {
		for iNdEx := len(m.Fleet) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fleet[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3e
			i--
			dAtA[i] = 0xc2
		}
	}
	if len(m.NodeInfo) > 0 {
		for iNdEx := len(m.NodeInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NodeInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	if m.ServiceProviderChoice != nil {
		{
			size := m.ServiceProviderChoice.Size()
			i -= size
			if _, err := m.ServiceProviderChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SshManagementChoice != nil {
		{
			size := m.SshManagementChoice.Size()
			i -= size
			if _, err := m.SshManagementChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ServiceTypeChoice != nil {
		{
			size := m.ServiceTypeChoice.Size()
			i -= size
			if _, err := m.ServiceTypeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.HttpManagementChoice != nil {
		{
			size := m.HttpManagementChoice.Size()
			i -= size
			if _, err := m.HttpManagementChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType_PaloAltoFwService) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_PaloAltoFwService) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PaloAltoFwService != nil {
		{
			size, err := m.PaloAltoFwService.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DisableHttpsManagement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DisableHttpsManagement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableHttpsManagement != nil {
		{
			size, err := m.DisableHttpsManagement.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_HttpsManagement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_HttpsManagement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpsManagement != nil {
		{
			size, err := m.HttpsManagement.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_EndpointService) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_EndpointService) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EndpointService != nil {
		{
			size, err := m.EndpointService.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_ForwardingService) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_ForwardingService) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ForwardingService != nil {
		{
			size, err := m.ForwardingService.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_F5BigIpAwsService) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_F5BigIpAwsService) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.F5BigIpAwsService != nil {
		{
			size, err := m.F5BigIpAwsService.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_TransparentService) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_TransparentService) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TransparentService != nil {
		{
			size, err := m.TransparentService.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DisableSshAccess) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DisableSshAccess) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableSshAccess != nil {
		{
			size, err := m.DisableSshAccess.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_EnabledSshAccess) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_EnabledSshAccess) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnabledSshAccess != nil {
		{
			size, err := m.EnabledSshAccess.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_F5BigIpBareMetalType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_F5BigIpBareMetalType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.F5BigIpBareMetalType != nil {
		{
			size, err := m.F5BigIpBareMetalType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *SuggestedCommands) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SuggestedCommands) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SuggestedCommands) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Warning) > 0 {
		i -= len(m.Warning)
		copy(dAtA[i:], m.Warning)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Warning)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Command) > 0 {
		i -= len(m.Command)
		copy(dAtA[i:], m.Command)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Command)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EndpointRefType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndpointRefType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndpointRefType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Endpoint) > 0 {
		for iNdEx := len(m.Endpoint) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Endpoint[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3e
			i--
			dAtA[i] = 0xea
		}
	}
	if len(m.NodeName) > 0 {
		i -= len(m.NodeName)
		copy(dAtA[i:], m.NodeName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.NodeName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExternalNLBInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExternalNLBInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExternalNLBInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AwsSubnetInfo) > 0 {
		for iNdEx := len(m.AwsSubnetInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AwsSubnetInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Region) > 0 {
		i -= len(m.Region)
		copy(dAtA[i:], m.Region)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Region)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.VpcId) > 0 {
		i -= len(m.VpcId)
		copy(dAtA[i:], m.VpcId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.VpcId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EndpointServiceReplaceType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndpointServiceReplaceType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndpointServiceReplaceType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExternalVipChoice != nil {
		{
			size := m.ExternalVipChoice.Size()
			i -= size
			if _, err := m.ExternalVipChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.UdpPortChoice != nil {
		{
			size := m.UdpPortChoice.Size()
			i -= size
			if _, err := m.UdpPortChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.TcpPortChoice != nil {
		{
			size := m.TcpPortChoice.Size()
			i -= size
			if _, err := m.TcpPortChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *EndpointServiceReplaceType_DefaultTcpPorts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndpointServiceReplaceType_DefaultTcpPorts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultTcpPorts != nil {
		{
			size, err := m.DefaultTcpPorts.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *EndpointServiceReplaceType_HttpPort) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndpointServiceReplaceType_HttpPort) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpPort != nil {
		{
			size, err := m.HttpPort.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *EndpointServiceReplaceType_HttpsPort) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndpointServiceReplaceType_HttpsPort) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpsPort != nil {
		{
			size, err := m.HttpsPort.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *EndpointServiceReplaceType_CustomTcpPorts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndpointServiceReplaceType_CustomTcpPorts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CustomTcpPorts != nil {
		{
			size, err := m.CustomTcpPorts.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *EndpointServiceReplaceType_NoTcpPorts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndpointServiceReplaceType_NoTcpPorts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoTcpPorts != nil {
		{
			size, err := m.NoTcpPorts.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *EndpointServiceReplaceType_NoUdpPorts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndpointServiceReplaceType_NoUdpPorts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoUdpPorts != nil {
		{
			size, err := m.NoUdpPorts.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *EndpointServiceReplaceType_CustomUdpPorts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndpointServiceReplaceType_CustomUdpPorts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CustomUdpPorts != nil {
		{
			size, err := m.CustomUdpPorts.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *EndpointServiceReplaceType_DisableAdvertiseOnSloIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndpointServiceReplaceType_DisableAdvertiseOnSloIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableAdvertiseOnSloIp != nil {
		{
			size, err := m.DisableAdvertiseOnSloIp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *EndpointServiceReplaceType_AdvertiseOnSloIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndpointServiceReplaceType_AdvertiseOnSloIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseOnSloIp != nil {
		{
			size, err := m.AdvertiseOnSloIp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *EndpointServiceReplaceType_AdvertiseOnSloIpExternal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndpointServiceReplaceType_AdvertiseOnSloIpExternal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseOnSloIpExternal != nil {
		{
			size, err := m.AdvertiseOnSloIpExternal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *NodeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SshCommand) > 0 {
		i -= len(m.SshCommand)
		copy(dAtA[i:], m.SshCommand)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SshCommand)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SshManagementChoice != nil {
		{
			size := m.SshManagementChoice.Size()
			i -= size
			if _, err := m.SshManagementChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ServiceProviderChoice != nil {
		{
			size := m.ServiceProviderChoice.Size()
			i -= size
			if _, err := m.ServiceProviderChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.HttpManagementChoice != nil {
		{
			size := m.HttpManagementChoice.Size()
			i -= size
			if _, err := m.HttpManagementChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType_PaloAltoFwService) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_PaloAltoFwService) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PaloAltoFwService != nil {
		{
			size, err := m.PaloAltoFwService.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DisableHttpsManagement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DisableHttpsManagement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableHttpsManagement != nil {
		{
			size, err := m.DisableHttpsManagement.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_HttpsManagement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_HttpsManagement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpsManagement != nil {
		{
			size, err := m.HttpsManagement.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_F5BigIpAwsService) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_F5BigIpAwsService) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.F5BigIpAwsService != nil {
		{
			size, err := m.F5BigIpAwsService.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DisableSshAccess) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DisableSshAccess) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableSshAccess != nil {
		{
			size, err := m.DisableSshAccess.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_EnabledSshAccess) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_EnabledSshAccess) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnabledSshAccess != nil {
		{
			size, err := m.EnabledSshAccess.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SshManagementChoice != nil {
		{
			size := m.SshManagementChoice.Size()
			i -= size
			if _, err := m.SshManagementChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ServiceProviderChoice != nil {
		{
			size := m.ServiceProviderChoice.Size()
			i -= size
			if _, err := m.ServiceProviderChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.HttpManagementChoice != nil {
		{
			size := m.HttpManagementChoice.Size()
			i -= size
			if _, err := m.HttpManagementChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType_PaloAltoFwService) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_PaloAltoFwService) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PaloAltoFwService != nil {
		{
			size, err := m.PaloAltoFwService.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DisableHttpsManagement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DisableHttpsManagement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableHttpsManagement != nil {
		{
			size, err := m.DisableHttpsManagement.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_HttpsManagement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_HttpsManagement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpsManagement != nil {
		{
			size, err := m.HttpsManagement.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_F5BigIpAwsService) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_F5BigIpAwsService) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.F5BigIpAwsService != nil {
		{
			size, err := m.F5BigIpAwsService.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DisableSshAccess) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DisableSshAccess) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableSshAccess != nil {
		{
			size, err := m.DisableSshAccess.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_EnabledSshAccess) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_EnabledSshAccess) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnabledSshAccess != nil {
		{
			size, err := m.EnabledSshAccess.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ForceDelete {
		i--
		if m.ForceDelete {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x3f
		i--
		dAtA[i] = 0xb8
	}
	if m.FinalizerTimestamp != nil {
		{
			size, err := m.FinalizerTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3f
		i--
		dAtA[i] = 0xb2
	}
	if len(m.Commands) > 0 {
		for iNdEx := len(m.Commands) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Commands[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3f
			i--
			dAtA[i] = 0x8a
		}
	}
	if m.SshManagementChoice != nil {
		{
			size := m.SshManagementChoice.Size()
			i -= size
			if _, err := m.SshManagementChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ServiceTypeChoice != nil {
		{
			size := m.ServiceTypeChoice.Size()
			i -= size
			if _, err := m.ServiceTypeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ServiceProviderChoice != nil {
		{
			size := m.ServiceProviderChoice.Size()
			i -= size
			if _, err := m.ServiceProviderChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.HttpManagementChoice != nil {
		{
			size := m.HttpManagementChoice.Size()
			i -= size
			if _, err := m.HttpManagementChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType_PaloAltoFwService) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_PaloAltoFwService) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PaloAltoFwService != nil {
		{
			size, err := m.PaloAltoFwService.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DisableHttpsManagement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DisableHttpsManagement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableHttpsManagement != nil {
		{
			size, err := m.DisableHttpsManagement.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_HttpsManagement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_HttpsManagement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpsManagement != nil {
		{
			size, err := m.HttpsManagement.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_EndpointService) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_EndpointService) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EndpointService != nil {
		{
			size, err := m.EndpointService.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_ForwardingService) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_ForwardingService) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ForwardingService != nil {
		{
			size, err := m.ForwardingService.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_F5BigIpAwsService) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_F5BigIpAwsService) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.F5BigIpAwsService != nil {
		{
			size, err := m.F5BigIpAwsService.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_TransparentService) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_TransparentService) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TransparentService != nil {
		{
			size, err := m.TransparentService.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DisableSshAccess) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DisableSshAccess) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableSshAccess != nil {
		{
			size, err := m.DisableSshAccess.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_EnabledSshAccess) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_EnabledSshAccess) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnabledSshAccess != nil {
		{
			size, err := m.EnabledSshAccess.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ForwardingServiceType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *EndpointServiceType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InsideVipChoice != nil {
		n += m.InsideVipChoice.Size()
	}
	if m.ExternalVipChoice != nil {
		n += m.ExternalVipChoice.Size()
	}
	if m.TcpPortChoice != nil {
		n += m.TcpPortChoice.Size()
	}
	if m.UdpPortChoice != nil {
		n += m.UdpPortChoice.Size()
	}
	return n
}

func (m *EndpointServiceType_AutomaticVip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AutomaticVip != nil {
		l = m.AutomaticVip.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EndpointServiceType_ConfiguredVip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConfiguredVip)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *EndpointServiceType_DisableAdvertiseOnSloIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableAdvertiseOnSloIp != nil {
		l = m.DisableAdvertiseOnSloIp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EndpointServiceType_AdvertiseOnSloIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseOnSloIp != nil {
		l = m.AdvertiseOnSloIp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EndpointServiceType_AdvertiseOnSloIpExternal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseOnSloIpExternal != nil {
		l = m.AdvertiseOnSloIpExternal.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EndpointServiceType_DefaultTcpPorts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultTcpPorts != nil {
		l = m.DefaultTcpPorts.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EndpointServiceType_HttpPort) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpPort != nil {
		l = m.HttpPort.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EndpointServiceType_HttpsPort) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpsPort != nil {
		l = m.HttpsPort.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EndpointServiceType_CustomTcpPorts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CustomTcpPorts != nil {
		l = m.CustomTcpPorts.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EndpointServiceType_NoTcpPorts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoTcpPorts != nil {
		l = m.NoTcpPorts.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EndpointServiceType_NoUdpPorts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoUdpPorts != nil {
		l = m.NoUdpPorts.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EndpointServiceType_CustomUdpPorts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CustomUdpPorts != nil {
		l = m.CustomUdpPorts.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ServiceNodesAWSType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.AwsAzName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.TunnelPrefixChoice != nil {
		n += m.TunnelPrefixChoice.Size()
	}
	if m.MgmtSubnetChoice != nil {
		n += m.MgmtSubnetChoice.Size()
	}
	return n
}

func (m *ServiceNodesAWSType_AutomaticPrefix) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AutomaticPrefix != nil {
		l = m.AutomaticPrefix.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ServiceNodesAWSType_TunnelPrefix) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TunnelPrefix)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *ServiceNodesAWSType_ReservedMgmtSubnet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReservedMgmtSubnet != nil {
		l = m.ReservedMgmtSubnet.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ServiceNodesAWSType_MgmtSubnet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MgmtSubnet != nil {
		l = m.MgmtSubnet.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *F5BigIpAWSTGWSiteType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AwsTgwSite != nil {
		l = m.AwsTgwSite.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *F5BigIpAWSVPCSiteType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AwsVpcSite != nil {
		l = m.AwsVpcSite.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *F5BigIpAWSBYOLImageType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.License != nil {
		l = m.License.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *F5BigIpAWSMarketPlaceImageType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AmiChoice != nil {
		n += m.AmiChoice.Size()
	}
	return n
}

func (m *F5BigIpAWSMarketPlaceImageType_AWAFPayG200Mbps) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AWAFPayG200Mbps != nil {
		l = m.AWAFPayG200Mbps.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *F5BigIpAWSMarketPlaceImageType_AWAFPayG3Gbps) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AWAFPayG3Gbps != nil {
		l = m.AWAFPayG3Gbps.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *F5BigIpAWSMarketPlaceImageType_BestPlusPayG200Mbps) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BestPlusPayG200Mbps != nil {
		l = m.BestPlusPayG200Mbps.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *F5BigIpAWSMarketPlaceImageType_BestPlusPayg_1Gbps) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BestPlusPayg_1Gbps != nil {
		l = m.BestPlusPayg_1Gbps.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *F5BigIpAWSType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ImageChoice != nil {
		n += m.ImageChoice.Size()
	}
	if m.AdminPassword != nil {
		l = m.AdminPassword.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.SshKey)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.SiteTypeChoice != nil {
		n += m.SiteTypeChoice.Size()
	}
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.AdminUsername)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Tags) > 0 {
		for k, v := range m.Tags {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	if m.EndpointService != nil {
		l = m.EndpointService.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *F5BigIpAWSType_ByolImage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ByolImage != nil {
		l = m.ByolImage.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *F5BigIpAWSType_AwsTgwSiteParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AwsTgwSiteParams != nil {
		l = m.AwsTgwSiteParams.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *F5BigIpAWSType_AwsVpcSiteParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AwsVpcSiteParams != nil {
		l = m.AwsVpcSiteParams.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *F5BigIpAWSType_MarketPlaceImage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MarketPlaceImage != nil {
		l = m.MarketPlaceImage.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *F5BigIpAWSReplaceType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tags) > 0 {
		for k, v := range m.Tags {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	if m.EndpointService != nil {
		l = m.EndpointService.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *PanoramaServerType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Server)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.AuthorizationKey != nil {
		l = m.AuthorizationKey.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.TemplateStackName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.DeviceGroupName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *SSHKeyType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.PrivateKey != nil {
		l = m.PrivateKey.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *PANAWSAutoSetupType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SshKeysChoice != nil {
		n += m.SshKeysChoice.Size()
	}
	l = len(m.AdminUsername)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.AdminPassword != nil {
		l = m.AdminPassword.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *PANAWSAutoSetupType_ManualSshKeys) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ManualSshKeys != nil {
		l = m.ManualSshKeys.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PANAWSAutoSetupType_AutogeneratedSshKeys) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AutogeneratedSshKeys != nil {
		l = m.AutogeneratedSshKeys.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PaloAltoServiceNodesAWSType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.AwsAzName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.MgmtSubnetChoice != nil {
		n += m.MgmtSubnetChoice.Size()
	}
	return n
}

func (m *PaloAltoServiceNodesAWSType_ReservedMgmtSubnet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReservedMgmtSubnet != nil {
		l = m.ReservedMgmtSubnet.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PaloAltoServiceNodesAWSType_MgmtSubnet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MgmtSubnet != nil {
		l = m.MgmtSubnet.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PaloAltoFWAWSType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InstanceType != 0 {
		n += 1 + sovTypes(uint64(m.InstanceType))
	}
	if m.AmiChoice != nil {
		n += m.AmiChoice.Size()
	}
	if m.PanaromaConnection != nil {
		n += m.PanaromaConnection.Size()
	}
	if m.SetupOptions != nil {
		n += m.SetupOptions.Size()
	}
	if m.AwsTgwSite != nil {
		l = m.AwsTgwSite.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ServiceNodes != nil {
		l = m.ServiceNodes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Tags) > 0 {
		for k, v := range m.Tags {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	l = len(m.Version)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *PaloAltoFWAWSType_PanAmiBundle1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PanAmiBundle1 != nil {
		l = m.PanAmiBundle1.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PaloAltoFWAWSType_PanAmiBundle2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PanAmiBundle2 != nil {
		l = m.PanAmiBundle2.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PaloAltoFWAWSType_PanoramaServer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PanoramaServer != nil {
		l = m.PanoramaServer.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PaloAltoFWAWSType_SshKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SshKey)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *PaloAltoFWAWSType_DisablePanaroma) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisablePanaroma != nil {
		l = m.DisablePanaroma.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PaloAltoFWAWSType_AutoSetup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AutoSetup != nil {
		l = m.AutoSetup.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PaloAltoAzNodesAWSType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *PaloAltoFWAWSReplaceType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tags) > 0 {
		for k, v := range m.Tags {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *SSHManagementNodePorts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.SshPort != 0 {
		n += 1 + sovTypes(uint64(m.SshPort))
	}
	return n
}

func (m *SSHManagementType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseChoice != nil {
		n += m.AdvertiseChoice.Size()
	}
	if len(m.NodeSshPorts) > 0 {
		for _, e := range m.NodeSshPorts {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.DomainSuffix)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *SSHManagementType_AdvertiseOnPublicDefaultVip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseOnPublicDefaultVip != nil {
		l = m.AdvertiseOnPublicDefaultVip.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SSHManagementType_AdvertiseOnPublic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseOnPublic != nil {
		l = m.AdvertiseOnPublic.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SSHManagementType_AdvertiseOnSloInternetVip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseOnSloInternetVip != nil {
		l = m.AdvertiseOnSloInternetVip.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SSHManagementType_AdvertiseOnSli) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseOnSli != nil {
		l = m.AdvertiseOnSli.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SSHManagementType_AdvertiseOnSlo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseOnSlo != nil {
		l = m.AdvertiseOnSlo.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SSHManagementType_AdvertiseOnSloSli) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseOnSloSli != nil {
		l = m.AdvertiseOnSloSli.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ServiceHttpsManagementType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DomainSuffix)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.PortChoice != nil {
		n += m.PortChoice.Size()
	}
	if m.InternetChoice != nil {
		n += m.InternetChoice.Size()
	}
	if m.AdvertiseChoice != nil {
		n += m.AdvertiseChoice.Size()
	}
	return n
}

func (m *ServiceHttpsManagementType_DefaultHttpsPort) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultHttpsPort != nil {
		l = m.DefaultHttpsPort.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ServiceHttpsManagementType_HttpsPort) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.HttpsPort))
	return n
}
func (m *ServiceHttpsManagementType_DoNotAdvertise) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DoNotAdvertise != nil {
		l = m.DoNotAdvertise.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ServiceHttpsManagementType_AdvertiseOnPublicDefaultVip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseOnPublicDefaultVip != nil {
		l = m.AdvertiseOnPublicDefaultVip.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ServiceHttpsManagementType_AdvertiseOnPublic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseOnPublic != nil {
		l = m.AdvertiseOnPublic.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ServiceHttpsManagementType_AdvertiseOnSliVip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseOnSliVip != nil {
		l = m.AdvertiseOnSliVip.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ServiceHttpsManagementType_AdvertiseOnSloVip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseOnSloVip != nil {
		l = m.AdvertiseOnSloVip.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ServiceHttpsManagementType_AdvertiseOnSloSli) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseOnSloSli != nil {
		l = m.AdvertiseOnSloSli.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ServiceHttpsManagementType_DisableLocal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableLocal != nil {
		l = m.DisableLocal.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ServiceHttpsManagementType_AdvertiseOnSloInternetVip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseOnSloInternetVip != nil {
		l = m.AdvertiseOnSloInternetVip.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ServiceHttpsManagementType_DoNotAdvertiseOnInternet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DoNotAdvertiseOnInternet != nil {
		l = m.DoNotAdvertiseOnInternet.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ServiceHttpsManagementType_AdvertiseOnInternetDefaultVip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseOnInternetDefaultVip != nil {
		l = m.AdvertiseOnInternetDefaultVip.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ServiceHttpsManagementType_AdvertiseOnInternet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseOnInternet != nil {
		l = m.AdvertiseOnInternet.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *F5BigIpAppStackBareMetalType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AdminUsername)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.AdminPassword != nil {
		l = m.AdminPassword.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.SshKey)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.BareMetalSite != nil {
		l = m.BareMetalSite.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.PublicDownloadUrl)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.BigiqInstance != nil {
		l = m.BigiqInstance.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *InterfaceDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Interface != nil {
		l = m.Interface.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.NetworkSelfIp)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.NetworkGateway)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *BigIqInstanceType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Password != nil {
		l = m.Password.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.LicensePoolName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.SkuName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.LicenseServerIp)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ServiceNodesBareMetalType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.InternalInterface != nil {
		l = m.InternalInterface.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ExternalInterface != nil {
		l = m.ExternalInterface.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.BmVirtualCpuCount != 0 {
		n += 1 + sovTypes(uint64(m.BmVirtualCpuCount))
	}
	if m.BmNodeMemorySize != 0 {
		n += 1 + sovTypes(uint64(m.BmNodeMemorySize))
	}
	return n
}

func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServiceProviderChoice != nil {
		n += m.ServiceProviderChoice.Size()
	}
	if m.HttpManagementChoice != nil {
		n += m.HttpManagementChoice.Size()
	}
	if m.ServiceTypeChoice != nil {
		n += m.ServiceTypeChoice.Size()
	}
	if m.SshManagementChoice != nil {
		n += m.SshManagementChoice.Size()
	}
	if len(m.NodeInfo) > 0 {
		for _, e := range m.NodeInfo {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Fleet) > 0 {
		for _, e := range m.Fleet {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.CloudCredentials) > 0 {
		for _, e := range m.CloudCredentials {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.TfParams) > 0 {
		for _, e := range m.TfParams {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.PolicySet) > 0 {
		for _, e := range m.PolicySet {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.InsideVip)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.OriginPool) > 0 {
		for _, e := range m.OriginPool {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ManagementEndpointRefs) > 0 {
		for _, e := range m.ManagementEndpointRefs {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.ExternalNlbInfo != nil {
		l = m.ExternalNlbInfo.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.Commands) > 0 {
		for _, e := range m.Commands {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.SiteRefs) > 0 {
		for _, e := range m.SiteRefs {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.K8SManifestParams) > 0 {
		for _, e := range m.K8SManifestParams {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.ServiceType != 0 {
		n += 2 + sovTypes(uint64(m.ServiceType))
	}
	if m.FinalizerTimestamp != nil {
		l = m.FinalizerTimestamp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.ForceDelete {
		n += 3
	}
	if m.ViewInternal != nil {
		l = m.ViewInternal.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GlobalSpecType_PaloAltoFwService) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PaloAltoFwService != nil {
		l = m.PaloAltoFwService.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DisableHttpsManagement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableHttpsManagement != nil {
		l = m.DisableHttpsManagement.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_HttpsManagement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpsManagement != nil {
		l = m.HttpsManagement.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_EndpointService) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EndpointService != nil {
		l = m.EndpointService.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_ForwardingService) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ForwardingService != nil {
		l = m.ForwardingService.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_F5BigIpAwsService) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.F5BigIpAwsService != nil {
		l = m.F5BigIpAwsService.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_TransparentService) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TransparentService != nil {
		l = m.TransparentService.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DisableSshAccess) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableSshAccess != nil {
		l = m.DisableSshAccess.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_EnabledSshAccess) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnabledSshAccess != nil {
		l = m.EnabledSshAccess.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_F5BigIpBareMetalType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.F5BigIpBareMetalType != nil {
		l = m.F5BigIpBareMetalType.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SuggestedCommands) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Command)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Warning)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *EndpointRefType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Endpoint) > 0 {
		for _, e := range m.Endpoint {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *ExternalNLBInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VpcId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Region)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.AwsSubnetInfo) > 0 {
		for _, e := range m.AwsSubnetInfo {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *EndpointServiceReplaceType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TcpPortChoice != nil {
		n += m.TcpPortChoice.Size()
	}
	if m.UdpPortChoice != nil {
		n += m.UdpPortChoice.Size()
	}
	if m.ExternalVipChoice != nil {
		n += m.ExternalVipChoice.Size()
	}
	return n
}

func (m *EndpointServiceReplaceType_DefaultTcpPorts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultTcpPorts != nil {
		l = m.DefaultTcpPorts.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EndpointServiceReplaceType_HttpPort) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpPort != nil {
		l = m.HttpPort.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EndpointServiceReplaceType_HttpsPort) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpsPort != nil {
		l = m.HttpsPort.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EndpointServiceReplaceType_CustomTcpPorts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CustomTcpPorts != nil {
		l = m.CustomTcpPorts.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EndpointServiceReplaceType_NoTcpPorts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoTcpPorts != nil {
		l = m.NoTcpPorts.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EndpointServiceReplaceType_NoUdpPorts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoUdpPorts != nil {
		l = m.NoUdpPorts.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EndpointServiceReplaceType_CustomUdpPorts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CustomUdpPorts != nil {
		l = m.CustomUdpPorts.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EndpointServiceReplaceType_DisableAdvertiseOnSloIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableAdvertiseOnSloIp != nil {
		l = m.DisableAdvertiseOnSloIp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EndpointServiceReplaceType_AdvertiseOnSloIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseOnSloIp != nil {
		l = m.AdvertiseOnSloIp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EndpointServiceReplaceType_AdvertiseOnSloIpExternal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseOnSloIpExternal != nil {
		l = m.AdvertiseOnSloIpExternal.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *NodeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SshCommand)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServiceProviderChoice != nil {
		n += m.ServiceProviderChoice.Size()
	}
	if m.HttpManagementChoice != nil {
		n += m.HttpManagementChoice.Size()
	}
	if m.SshManagementChoice != nil {
		n += m.SshManagementChoice.Size()
	}
	return n
}

func (m *CreateSpecType_PaloAltoFwService) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PaloAltoFwService != nil {
		l = m.PaloAltoFwService.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DisableHttpsManagement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableHttpsManagement != nil {
		l = m.DisableHttpsManagement.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_HttpsManagement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpsManagement != nil {
		l = m.HttpsManagement.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_F5BigIpAwsService) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.F5BigIpAwsService != nil {
		l = m.F5BigIpAwsService.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DisableSshAccess) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableSshAccess != nil {
		l = m.DisableSshAccess.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_EnabledSshAccess) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnabledSshAccess != nil {
		l = m.EnabledSshAccess.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServiceProviderChoice != nil {
		n += m.ServiceProviderChoice.Size()
	}
	if m.HttpManagementChoice != nil {
		n += m.HttpManagementChoice.Size()
	}
	if m.SshManagementChoice != nil {
		n += m.SshManagementChoice.Size()
	}
	return n
}

func (m *ReplaceSpecType_PaloAltoFwService) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PaloAltoFwService != nil {
		l = m.PaloAltoFwService.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DisableHttpsManagement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableHttpsManagement != nil {
		l = m.DisableHttpsManagement.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_HttpsManagement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpsManagement != nil {
		l = m.HttpsManagement.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_F5BigIpAwsService) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.F5BigIpAwsService != nil {
		l = m.F5BigIpAwsService.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DisableSshAccess) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableSshAccess != nil {
		l = m.DisableSshAccess.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_EnabledSshAccess) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnabledSshAccess != nil {
		l = m.EnabledSshAccess.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServiceProviderChoice != nil {
		n += m.ServiceProviderChoice.Size()
	}
	if m.HttpManagementChoice != nil {
		n += m.HttpManagementChoice.Size()
	}
	if m.ServiceTypeChoice != nil {
		n += m.ServiceTypeChoice.Size()
	}
	if m.SshManagementChoice != nil {
		n += m.SshManagementChoice.Size()
	}
	if len(m.Commands) > 0 {
		for _, e := range m.Commands {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.FinalizerTimestamp != nil {
		l = m.FinalizerTimestamp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.ForceDelete {
		n += 3
	}
	return n
}

func (m *GetSpecType_PaloAltoFwService) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PaloAltoFwService != nil {
		l = m.PaloAltoFwService.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DisableHttpsManagement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableHttpsManagement != nil {
		l = m.DisableHttpsManagement.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_HttpsManagement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpsManagement != nil {
		l = m.HttpsManagement.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_EndpointService) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EndpointService != nil {
		l = m.EndpointService.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_ForwardingService) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ForwardingService != nil {
		l = m.ForwardingService.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_F5BigIpAwsService) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.F5BigIpAwsService != nil {
		l = m.F5BigIpAwsService.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_TransparentService) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TransparentService != nil {
		l = m.TransparentService.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DisableSshAccess) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableSshAccess != nil {
		l = m.DisableSshAccess.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_EnabledSshAccess) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnabledSshAccess != nil {
		l = m.EnabledSshAccess.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ForwardingServiceType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForwardingServiceType{`,
		`}`,
	}, "")
	return s
}
func (this *EndpointServiceType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndpointServiceType{`,
		`InsideVipChoice:` + fmt.Sprintf("%v", this.InsideVipChoice) + `,`,
		`ExternalVipChoice:` + fmt.Sprintf("%v", this.ExternalVipChoice) + `,`,
		`TcpPortChoice:` + fmt.Sprintf("%v", this.TcpPortChoice) + `,`,
		`UdpPortChoice:` + fmt.Sprintf("%v", this.UdpPortChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndpointServiceType_AutomaticVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndpointServiceType_AutomaticVip{`,
		`AutomaticVip:` + strings.Replace(fmt.Sprintf("%v", this.AutomaticVip), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndpointServiceType_ConfiguredVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndpointServiceType_ConfiguredVip{`,
		`ConfiguredVip:` + fmt.Sprintf("%v", this.ConfiguredVip) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndpointServiceType_DisableAdvertiseOnSloIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndpointServiceType_DisableAdvertiseOnSloIp{`,
		`DisableAdvertiseOnSloIp:` + strings.Replace(fmt.Sprintf("%v", this.DisableAdvertiseOnSloIp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndpointServiceType_AdvertiseOnSloIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndpointServiceType_AdvertiseOnSloIp{`,
		`AdvertiseOnSloIp:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnSloIp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndpointServiceType_AdvertiseOnSloIpExternal) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndpointServiceType_AdvertiseOnSloIpExternal{`,
		`AdvertiseOnSloIpExternal:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnSloIpExternal), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndpointServiceType_DefaultTcpPorts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndpointServiceType_DefaultTcpPorts{`,
		`DefaultTcpPorts:` + strings.Replace(fmt.Sprintf("%v", this.DefaultTcpPorts), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndpointServiceType_HttpPort) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndpointServiceType_HttpPort{`,
		`HttpPort:` + strings.Replace(fmt.Sprintf("%v", this.HttpPort), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndpointServiceType_HttpsPort) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndpointServiceType_HttpsPort{`,
		`HttpsPort:` + strings.Replace(fmt.Sprintf("%v", this.HttpsPort), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndpointServiceType_CustomTcpPorts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndpointServiceType_CustomTcpPorts{`,
		`CustomTcpPorts:` + strings.Replace(fmt.Sprintf("%v", this.CustomTcpPorts), "PortRangesType", "schema.PortRangesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndpointServiceType_NoTcpPorts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndpointServiceType_NoTcpPorts{`,
		`NoTcpPorts:` + strings.Replace(fmt.Sprintf("%v", this.NoTcpPorts), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndpointServiceType_NoUdpPorts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndpointServiceType_NoUdpPorts{`,
		`NoUdpPorts:` + strings.Replace(fmt.Sprintf("%v", this.NoUdpPorts), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndpointServiceType_CustomUdpPorts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndpointServiceType_CustomUdpPorts{`,
		`CustomUdpPorts:` + strings.Replace(fmt.Sprintf("%v", this.CustomUdpPorts), "PortRangesType", "schema.PortRangesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceNodesAWSType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceNodesAWSType{`,
		`NodeName:` + fmt.Sprintf("%v", this.NodeName) + `,`,
		`AwsAzName:` + fmt.Sprintf("%v", this.AwsAzName) + `,`,
		`TunnelPrefixChoice:` + fmt.Sprintf("%v", this.TunnelPrefixChoice) + `,`,
		`MgmtSubnetChoice:` + fmt.Sprintf("%v", this.MgmtSubnetChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceNodesAWSType_AutomaticPrefix) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceNodesAWSType_AutomaticPrefix{`,
		`AutomaticPrefix:` + strings.Replace(fmt.Sprintf("%v", this.AutomaticPrefix), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceNodesAWSType_TunnelPrefix) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceNodesAWSType_TunnelPrefix{`,
		`TunnelPrefix:` + fmt.Sprintf("%v", this.TunnelPrefix) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceNodesAWSType_ReservedMgmtSubnet) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceNodesAWSType_ReservedMgmtSubnet{`,
		`ReservedMgmtSubnet:` + strings.Replace(fmt.Sprintf("%v", this.ReservedMgmtSubnet), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceNodesAWSType_MgmtSubnet) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceNodesAWSType_MgmtSubnet{`,
		`MgmtSubnet:` + strings.Replace(fmt.Sprintf("%v", this.MgmtSubnet), "CloudSubnetType", "views.CloudSubnetType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *F5BigIpAWSTGWSiteType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&F5BigIpAWSTGWSiteType{`,
		`AwsTgwSite:` + strings.Replace(fmt.Sprintf("%v", this.AwsTgwSite), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *F5BigIpAWSVPCSiteType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&F5BigIpAWSVPCSiteType{`,
		`AwsVpcSite:` + strings.Replace(fmt.Sprintf("%v", this.AwsVpcSite), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *F5BigIpAWSBYOLImageType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&F5BigIpAWSBYOLImageType{`,
		`Image:` + fmt.Sprintf("%v", this.Image) + `,`,
		`License:` + strings.Replace(fmt.Sprintf("%v", this.License), "SecretType", "schema.SecretType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *F5BigIpAWSMarketPlaceImageType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&F5BigIpAWSMarketPlaceImageType{`,
		`AmiChoice:` + fmt.Sprintf("%v", this.AmiChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *F5BigIpAWSMarketPlaceImageType_AWAFPayG200Mbps) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&F5BigIpAWSMarketPlaceImageType_AWAFPayG200Mbps{`,
		`AWAFPayG200Mbps:` + strings.Replace(fmt.Sprintf("%v", this.AWAFPayG200Mbps), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *F5BigIpAWSMarketPlaceImageType_AWAFPayG3Gbps) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&F5BigIpAWSMarketPlaceImageType_AWAFPayG3Gbps{`,
		`AWAFPayG3Gbps:` + strings.Replace(fmt.Sprintf("%v", this.AWAFPayG3Gbps), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *F5BigIpAWSMarketPlaceImageType_BestPlusPayG200Mbps) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&F5BigIpAWSMarketPlaceImageType_BestPlusPayG200Mbps{`,
		`BestPlusPayG200Mbps:` + strings.Replace(fmt.Sprintf("%v", this.BestPlusPayG200Mbps), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *F5BigIpAWSMarketPlaceImageType_BestPlusPayg_1Gbps) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&F5BigIpAWSMarketPlaceImageType_BestPlusPayg_1Gbps{`,
		`BestPlusPayg_1Gbps:` + strings.Replace(fmt.Sprintf("%v", this.BestPlusPayg_1Gbps), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *F5BigIpAWSType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForNodes := "[]*ServiceNodesAWSType{"
	for _, f := range this.Nodes {
		repeatedStringForNodes += strings.Replace(f.String(), "ServiceNodesAWSType", "ServiceNodesAWSType", 1) + ","
	}
	repeatedStringForNodes += "}"
	keysForTags := make([]string, 0, len(this.Tags))
	for k, _ := range this.Tags {
		keysForTags = append(keysForTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
	mapStringForTags := "map[string]string{"
	for _, k := range keysForTags {
		mapStringForTags += fmt.Sprintf("%v: %v,", k, this.Tags[k])
	}
	mapStringForTags += "}"
	s := strings.Join([]string{`&F5BigIpAWSType{`,
		`ImageChoice:` + fmt.Sprintf("%v", this.ImageChoice) + `,`,
		`AdminPassword:` + strings.Replace(fmt.Sprintf("%v", this.AdminPassword), "SecretType", "schema.SecretType", 1) + `,`,
		`SshKey:` + fmt.Sprintf("%v", this.SshKey) + `,`,
		`SiteTypeChoice:` + fmt.Sprintf("%v", this.SiteTypeChoice) + `,`,
		`Nodes:` + repeatedStringForNodes + `,`,
		`AdminUsername:` + fmt.Sprintf("%v", this.AdminUsername) + `,`,
		`Tags:` + mapStringForTags + `,`,
		`EndpointService:` + strings.Replace(this.EndpointService.String(), "EndpointServiceType", "EndpointServiceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *F5BigIpAWSType_ByolImage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&F5BigIpAWSType_ByolImage{`,
		`ByolImage:` + strings.Replace(fmt.Sprintf("%v", this.ByolImage), "F5BigIpAWSBYOLImageType", "F5BigIpAWSBYOLImageType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *F5BigIpAWSType_AwsTgwSiteParams) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&F5BigIpAWSType_AwsTgwSiteParams{`,
		`AwsTgwSiteParams:` + strings.Replace(fmt.Sprintf("%v", this.AwsTgwSiteParams), "F5BigIpAWSTGWSiteType", "F5BigIpAWSTGWSiteType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *F5BigIpAWSType_AwsVpcSiteParams) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&F5BigIpAWSType_AwsVpcSiteParams{`,
		`AwsVpcSiteParams:` + strings.Replace(fmt.Sprintf("%v", this.AwsVpcSiteParams), "F5BigIpAWSVPCSiteType", "F5BigIpAWSVPCSiteType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *F5BigIpAWSType_MarketPlaceImage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&F5BigIpAWSType_MarketPlaceImage{`,
		`MarketPlaceImage:` + strings.Replace(fmt.Sprintf("%v", this.MarketPlaceImage), "F5BigIpAWSMarketPlaceImageType", "F5BigIpAWSMarketPlaceImageType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *F5BigIpAWSReplaceType) String() string {
	if this == nil {
		return "nil"
	}
	keysForTags := make([]string, 0, len(this.Tags))
	for k, _ := range this.Tags {
		keysForTags = append(keysForTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
	mapStringForTags := "map[string]string{"
	for _, k := range keysForTags {
		mapStringForTags += fmt.Sprintf("%v: %v,", k, this.Tags[k])
	}
	mapStringForTags += "}"
	s := strings.Join([]string{`&F5BigIpAWSReplaceType{`,
		`Tags:` + mapStringForTags + `,`,
		`EndpointService:` + strings.Replace(this.EndpointService.String(), "EndpointServiceReplaceType", "EndpointServiceReplaceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PanoramaServerType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PanoramaServerType{`,
		`Server:` + fmt.Sprintf("%v", this.Server) + `,`,
		`AuthorizationKey:` + strings.Replace(fmt.Sprintf("%v", this.AuthorizationKey), "SecretType", "schema.SecretType", 1) + `,`,
		`TemplateStackName:` + fmt.Sprintf("%v", this.TemplateStackName) + `,`,
		`DeviceGroupName:` + fmt.Sprintf("%v", this.DeviceGroupName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SSHKeyType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SSHKeyType{`,
		`PublicKey:` + fmt.Sprintf("%v", this.PublicKey) + `,`,
		`PrivateKey:` + strings.Replace(fmt.Sprintf("%v", this.PrivateKey), "SecretType", "schema.SecretType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PANAWSAutoSetupType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PANAWSAutoSetupType{`,
		`SshKeysChoice:` + fmt.Sprintf("%v", this.SshKeysChoice) + `,`,
		`AdminUsername:` + fmt.Sprintf("%v", this.AdminUsername) + `,`,
		`AdminPassword:` + strings.Replace(fmt.Sprintf("%v", this.AdminPassword), "SecretType", "schema.SecretType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PANAWSAutoSetupType_ManualSshKeys) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PANAWSAutoSetupType_ManualSshKeys{`,
		`ManualSshKeys:` + strings.Replace(fmt.Sprintf("%v", this.ManualSshKeys), "SSHKeyType", "SSHKeyType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PANAWSAutoSetupType_AutogeneratedSshKeys) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PANAWSAutoSetupType_AutogeneratedSshKeys{`,
		`AutogeneratedSshKeys:` + strings.Replace(fmt.Sprintf("%v", this.AutogeneratedSshKeys), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PaloAltoServiceNodesAWSType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PaloAltoServiceNodesAWSType{`,
		`NodeName:` + fmt.Sprintf("%v", this.NodeName) + `,`,
		`AwsAzName:` + fmt.Sprintf("%v", this.AwsAzName) + `,`,
		`MgmtSubnetChoice:` + fmt.Sprintf("%v", this.MgmtSubnetChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PaloAltoServiceNodesAWSType_ReservedMgmtSubnet) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PaloAltoServiceNodesAWSType_ReservedMgmtSubnet{`,
		`ReservedMgmtSubnet:` + strings.Replace(fmt.Sprintf("%v", this.ReservedMgmtSubnet), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PaloAltoServiceNodesAWSType_MgmtSubnet) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PaloAltoServiceNodesAWSType_MgmtSubnet{`,
		`MgmtSubnet:` + strings.Replace(fmt.Sprintf("%v", this.MgmtSubnet), "CloudSubnetType", "views.CloudSubnetType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PaloAltoFWAWSType) String() string {
	if this == nil {
		return "nil"
	}
	keysForTags := make([]string, 0, len(this.Tags))
	for k, _ := range this.Tags {
		keysForTags = append(keysForTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
	mapStringForTags := "map[string]string{"
	for _, k := range keysForTags {
		mapStringForTags += fmt.Sprintf("%v: %v,", k, this.Tags[k])
	}
	mapStringForTags += "}"
	s := strings.Join([]string{`&PaloAltoFWAWSType{`,
		`InstanceType:` + fmt.Sprintf("%v", this.InstanceType) + `,`,
		`AmiChoice:` + fmt.Sprintf("%v", this.AmiChoice) + `,`,
		`PanaromaConnection:` + fmt.Sprintf("%v", this.PanaromaConnection) + `,`,
		`SetupOptions:` + fmt.Sprintf("%v", this.SetupOptions) + `,`,
		`AwsTgwSite:` + strings.Replace(fmt.Sprintf("%v", this.AwsTgwSite), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`ServiceNodes:` + strings.Replace(this.ServiceNodes.String(), "PaloAltoAzNodesAWSType", "PaloAltoAzNodesAWSType", 1) + `,`,
		`Tags:` + mapStringForTags + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PaloAltoFWAWSType_PanAmiBundle1) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PaloAltoFWAWSType_PanAmiBundle1{`,
		`PanAmiBundle1:` + strings.Replace(fmt.Sprintf("%v", this.PanAmiBundle1), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PaloAltoFWAWSType_PanAmiBundle2) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PaloAltoFWAWSType_PanAmiBundle2{`,
		`PanAmiBundle2:` + strings.Replace(fmt.Sprintf("%v", this.PanAmiBundle2), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PaloAltoFWAWSType_PanoramaServer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PaloAltoFWAWSType_PanoramaServer{`,
		`PanoramaServer:` + strings.Replace(fmt.Sprintf("%v", this.PanoramaServer), "PanoramaServerType", "PanoramaServerType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PaloAltoFWAWSType_SshKey) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PaloAltoFWAWSType_SshKey{`,
		`SshKey:` + fmt.Sprintf("%v", this.SshKey) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PaloAltoFWAWSType_DisablePanaroma) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PaloAltoFWAWSType_DisablePanaroma{`,
		`DisablePanaroma:` + strings.Replace(fmt.Sprintf("%v", this.DisablePanaroma), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PaloAltoFWAWSType_AutoSetup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PaloAltoFWAWSType_AutoSetup{`,
		`AutoSetup:` + strings.Replace(fmt.Sprintf("%v", this.AutoSetup), "PANAWSAutoSetupType", "PANAWSAutoSetupType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PaloAltoAzNodesAWSType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForNodes := "[]*PaloAltoServiceNodesAWSType{"
	for _, f := range this.Nodes {
		repeatedStringForNodes += strings.Replace(f.String(), "PaloAltoServiceNodesAWSType", "PaloAltoServiceNodesAWSType", 1) + ","
	}
	repeatedStringForNodes += "}"
	s := strings.Join([]string{`&PaloAltoAzNodesAWSType{`,
		`Nodes:` + repeatedStringForNodes + `,`,
		`}`,
	}, "")
	return s
}
func (this *PaloAltoFWAWSReplaceType) String() string {
	if this == nil {
		return "nil"
	}
	keysForTags := make([]string, 0, len(this.Tags))
	for k, _ := range this.Tags {
		keysForTags = append(keysForTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
	mapStringForTags := "map[string]string{"
	for _, k := range keysForTags {
		mapStringForTags += fmt.Sprintf("%v: %v,", k, this.Tags[k])
	}
	mapStringForTags += "}"
	s := strings.Join([]string{`&PaloAltoFWAWSReplaceType{`,
		`Tags:` + mapStringForTags + `,`,
		`}`,
	}, "")
	return s
}
func (this *SSHManagementNodePorts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SSHManagementNodePorts{`,
		`NodeName:` + fmt.Sprintf("%v", this.NodeName) + `,`,
		`SshPort:` + fmt.Sprintf("%v", this.SshPort) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SSHManagementType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForNodeSshPorts := "[]*SSHManagementNodePorts{"
	for _, f := range this.NodeSshPorts {
		repeatedStringForNodeSshPorts += strings.Replace(f.String(), "SSHManagementNodePorts", "SSHManagementNodePorts", 1) + ","
	}
	repeatedStringForNodeSshPorts += "}"
	s := strings.Join([]string{`&SSHManagementType{`,
		`AdvertiseChoice:` + fmt.Sprintf("%v", this.AdvertiseChoice) + `,`,
		`NodeSshPorts:` + repeatedStringForNodeSshPorts + `,`,
		`DomainSuffix:` + fmt.Sprintf("%v", this.DomainSuffix) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SSHManagementType_AdvertiseOnPublicDefaultVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SSHManagementType_AdvertiseOnPublicDefaultVip{`,
		`AdvertiseOnPublicDefaultVip:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnPublicDefaultVip), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SSHManagementType_AdvertiseOnPublic) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SSHManagementType_AdvertiseOnPublic{`,
		`AdvertiseOnPublic:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnPublic), "AdvertisePublic", "views.AdvertisePublic", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SSHManagementType_AdvertiseOnSloInternetVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SSHManagementType_AdvertiseOnSloInternetVip{`,
		`AdvertiseOnSloInternetVip:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnSloInternetVip), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SSHManagementType_AdvertiseOnSli) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SSHManagementType_AdvertiseOnSli{`,
		`AdvertiseOnSli:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnSli), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SSHManagementType_AdvertiseOnSlo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SSHManagementType_AdvertiseOnSlo{`,
		`AdvertiseOnSlo:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnSlo), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SSHManagementType_AdvertiseOnSloSli) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SSHManagementType_AdvertiseOnSloSli{`,
		`AdvertiseOnSloSli:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnSloSli), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceHttpsManagementType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceHttpsManagementType{`,
		`DomainSuffix:` + fmt.Sprintf("%v", this.DomainSuffix) + `,`,
		`PortChoice:` + fmt.Sprintf("%v", this.PortChoice) + `,`,
		`InternetChoice:` + fmt.Sprintf("%v", this.InternetChoice) + `,`,
		`AdvertiseChoice:` + fmt.Sprintf("%v", this.AdvertiseChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceHttpsManagementType_DefaultHttpsPort) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceHttpsManagementType_DefaultHttpsPort{`,
		`DefaultHttpsPort:` + strings.Replace(fmt.Sprintf("%v", this.DefaultHttpsPort), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceHttpsManagementType_HttpsPort) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceHttpsManagementType_HttpsPort{`,
		`HttpsPort:` + fmt.Sprintf("%v", this.HttpsPort) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceHttpsManagementType_DoNotAdvertise) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceHttpsManagementType_DoNotAdvertise{`,
		`DoNotAdvertise:` + strings.Replace(fmt.Sprintf("%v", this.DoNotAdvertise), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceHttpsManagementType_AdvertiseOnPublicDefaultVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceHttpsManagementType_AdvertiseOnPublicDefaultVip{`,
		`AdvertiseOnPublicDefaultVip:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnPublicDefaultVip), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceHttpsManagementType_AdvertiseOnPublic) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceHttpsManagementType_AdvertiseOnPublic{`,
		`AdvertiseOnPublic:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnPublic), "AdvertisePublic", "views.AdvertisePublic", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceHttpsManagementType_AdvertiseOnSliVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceHttpsManagementType_AdvertiseOnSliVip{`,
		`AdvertiseOnSliVip:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnSliVip), "DownstreamTlsParamsType", "views.DownstreamTlsParamsType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceHttpsManagementType_AdvertiseOnSloVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceHttpsManagementType_AdvertiseOnSloVip{`,
		`AdvertiseOnSloVip:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnSloVip), "DownstreamTlsParamsType", "views.DownstreamTlsParamsType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceHttpsManagementType_AdvertiseOnSloSli) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceHttpsManagementType_AdvertiseOnSloSli{`,
		`AdvertiseOnSloSli:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnSloSli), "DownstreamTlsParamsType", "views.DownstreamTlsParamsType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceHttpsManagementType_DisableLocal) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceHttpsManagementType_DisableLocal{`,
		`DisableLocal:` + strings.Replace(fmt.Sprintf("%v", this.DisableLocal), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceHttpsManagementType_AdvertiseOnSloInternetVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceHttpsManagementType_AdvertiseOnSloInternetVip{`,
		`AdvertiseOnSloInternetVip:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnSloInternetVip), "DownstreamTlsParamsType", "views.DownstreamTlsParamsType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceHttpsManagementType_DoNotAdvertiseOnInternet) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceHttpsManagementType_DoNotAdvertiseOnInternet{`,
		`DoNotAdvertiseOnInternet:` + strings.Replace(fmt.Sprintf("%v", this.DoNotAdvertiseOnInternet), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceHttpsManagementType_AdvertiseOnInternetDefaultVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceHttpsManagementType_AdvertiseOnInternetDefaultVip{`,
		`AdvertiseOnInternetDefaultVip:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnInternetDefaultVip), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceHttpsManagementType_AdvertiseOnInternet) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceHttpsManagementType_AdvertiseOnInternet{`,
		`AdvertiseOnInternet:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnInternet), "AdvertisePublic", "views.AdvertisePublic", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *F5BigIpAppStackBareMetalType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForNodes := "[]*ServiceNodesBareMetalType{"
	for _, f := range this.Nodes {
		repeatedStringForNodes += strings.Replace(f.String(), "ServiceNodesBareMetalType", "ServiceNodesBareMetalType", 1) + ","
	}
	repeatedStringForNodes += "}"
	s := strings.Join([]string{`&F5BigIpAppStackBareMetalType{`,
		`AdminUsername:` + fmt.Sprintf("%v", this.AdminUsername) + `,`,
		`AdminPassword:` + strings.Replace(fmt.Sprintf("%v", this.AdminPassword), "SecretType", "schema.SecretType", 1) + `,`,
		`SshKey:` + fmt.Sprintf("%v", this.SshKey) + `,`,
		`Nodes:` + repeatedStringForNodes + `,`,
		`BareMetalSite:` + strings.Replace(fmt.Sprintf("%v", this.BareMetalSite), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`PublicDownloadUrl:` + fmt.Sprintf("%v", this.PublicDownloadUrl) + `,`,
		`BigiqInstance:` + strings.Replace(this.BigiqInstance.String(), "BigIqInstanceType", "BigIqInstanceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InterfaceDetails) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InterfaceDetails{`,
		`Interface:` + strings.Replace(fmt.Sprintf("%v", this.Interface), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`NetworkSelfIp:` + fmt.Sprintf("%v", this.NetworkSelfIp) + `,`,
		`NetworkGateway:` + fmt.Sprintf("%v", this.NetworkGateway) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BigIqInstanceType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BigIqInstanceType{`,
		`Username:` + fmt.Sprintf("%v", this.Username) + `,`,
		`Password:` + strings.Replace(fmt.Sprintf("%v", this.Password), "SecretType", "schema.SecretType", 1) + `,`,
		`LicensePoolName:` + fmt.Sprintf("%v", this.LicensePoolName) + `,`,
		`SkuName:` + fmt.Sprintf("%v", this.SkuName) + `,`,
		`LicenseServerIp:` + fmt.Sprintf("%v", this.LicenseServerIp) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceNodesBareMetalType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceNodesBareMetalType{`,
		`NodeName:` + fmt.Sprintf("%v", this.NodeName) + `,`,
		`InternalInterface:` + strings.Replace(this.InternalInterface.String(), "InterfaceDetails", "InterfaceDetails", 1) + `,`,
		`ExternalInterface:` + strings.Replace(this.ExternalInterface.String(), "InterfaceDetails", "InterfaceDetails", 1) + `,`,
		`BmVirtualCpuCount:` + fmt.Sprintf("%v", this.BmVirtualCpuCount) + `,`,
		`BmNodeMemorySize:` + fmt.Sprintf("%v", this.BmNodeMemorySize) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForNodeInfo := "[]*NodeInfo{"
	for _, f := range this.NodeInfo {
		repeatedStringForNodeInfo += strings.Replace(f.String(), "NodeInfo", "NodeInfo", 1) + ","
	}
	repeatedStringForNodeInfo += "}"
	repeatedStringForFleet := "[]*ObjectRefType{"
	for _, f := range this.Fleet {
		repeatedStringForFleet += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForFleet += "}"
	repeatedStringForCloudCredentials := "[]*ObjectRefType{"
	for _, f := range this.CloudCredentials {
		repeatedStringForCloudCredentials += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForCloudCredentials += "}"
	repeatedStringForTfParams := "[]*ObjectRefType{"
	for _, f := range this.TfParams {
		repeatedStringForTfParams += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForTfParams += "}"
	repeatedStringForPolicySet := "[]*ObjectRefType{"
	for _, f := range this.PolicySet {
		repeatedStringForPolicySet += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForPolicySet += "}"
	repeatedStringForOriginPool := "[]*ObjectRefType{"
	for _, f := range this.OriginPool {
		repeatedStringForOriginPool += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForOriginPool += "}"
	repeatedStringForManagementEndpointRefs := "[]*EndpointRefType{"
	for _, f := range this.ManagementEndpointRefs {
		repeatedStringForManagementEndpointRefs += strings.Replace(f.String(), "EndpointRefType", "EndpointRefType", 1) + ","
	}
	repeatedStringForManagementEndpointRefs += "}"
	repeatedStringForCommands := "[]*SuggestedCommands{"
	for _, f := range this.Commands {
		repeatedStringForCommands += strings.Replace(f.String(), "SuggestedCommands", "SuggestedCommands", 1) + ","
	}
	repeatedStringForCommands += "}"
	repeatedStringForSiteRefs := "[]*ObjectRefType{"
	for _, f := range this.SiteRefs {
		repeatedStringForSiteRefs += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForSiteRefs += "}"
	repeatedStringForK8SManifestParams := "[]*ObjectRefType{"
	for _, f := range this.K8SManifestParams {
		repeatedStringForK8SManifestParams += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForK8SManifestParams += "}"
	s := strings.Join([]string{`&GlobalSpecType{`,
		`ServiceProviderChoice:` + fmt.Sprintf("%v", this.ServiceProviderChoice) + `,`,
		`HttpManagementChoice:` + fmt.Sprintf("%v", this.HttpManagementChoice) + `,`,
		`ServiceTypeChoice:` + fmt.Sprintf("%v", this.ServiceTypeChoice) + `,`,
		`SshManagementChoice:` + fmt.Sprintf("%v", this.SshManagementChoice) + `,`,
		`NodeInfo:` + repeatedStringForNodeInfo + `,`,
		`Fleet:` + repeatedStringForFleet + `,`,
		`CloudCredentials:` + repeatedStringForCloudCredentials + `,`,
		`TfParams:` + repeatedStringForTfParams + `,`,
		`PolicySet:` + repeatedStringForPolicySet + `,`,
		`InsideVip:` + fmt.Sprintf("%v", this.InsideVip) + `,`,
		`OriginPool:` + repeatedStringForOriginPool + `,`,
		`ManagementEndpointRefs:` + repeatedStringForManagementEndpointRefs + `,`,
		`ExternalNlbInfo:` + strings.Replace(this.ExternalNlbInfo.String(), "ExternalNLBInfo", "ExternalNLBInfo", 1) + `,`,
		`Commands:` + repeatedStringForCommands + `,`,
		`SiteRefs:` + repeatedStringForSiteRefs + `,`,
		`K8SManifestParams:` + repeatedStringForK8SManifestParams + `,`,
		`ServiceType:` + fmt.Sprintf("%v", this.ServiceType) + `,`,
		`FinalizerTimestamp:` + strings.Replace(fmt.Sprintf("%v", this.FinalizerTimestamp), "Timestamp", "types.Timestamp", 1) + `,`,
		`ForceDelete:` + fmt.Sprintf("%v", this.ForceDelete) + `,`,
		`ViewInternal:` + strings.Replace(fmt.Sprintf("%v", this.ViewInternal), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_PaloAltoFwService) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_PaloAltoFwService{`,
		`PaloAltoFwService:` + strings.Replace(fmt.Sprintf("%v", this.PaloAltoFwService), "PaloAltoFWAWSType", "PaloAltoFWAWSType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DisableHttpsManagement) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DisableHttpsManagement{`,
		`DisableHttpsManagement:` + strings.Replace(fmt.Sprintf("%v", this.DisableHttpsManagement), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_HttpsManagement) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_HttpsManagement{`,
		`HttpsManagement:` + strings.Replace(fmt.Sprintf("%v", this.HttpsManagement), "ServiceHttpsManagementType", "ServiceHttpsManagementType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_EndpointService) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_EndpointService{`,
		`EndpointService:` + strings.Replace(fmt.Sprintf("%v", this.EndpointService), "EndpointServiceType", "EndpointServiceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_ForwardingService) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_ForwardingService{`,
		`ForwardingService:` + strings.Replace(fmt.Sprintf("%v", this.ForwardingService), "ForwardingServiceType", "ForwardingServiceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_F5BigIpAwsService) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_F5BigIpAwsService{`,
		`F5BigIpAwsService:` + strings.Replace(fmt.Sprintf("%v", this.F5BigIpAwsService), "F5BigIpAWSType", "F5BigIpAWSType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_TransparentService) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_TransparentService{`,
		`TransparentService:` + strings.Replace(fmt.Sprintf("%v", this.TransparentService), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DisableSshAccess) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DisableSshAccess{`,
		`DisableSshAccess:` + strings.Replace(fmt.Sprintf("%v", this.DisableSshAccess), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_EnabledSshAccess) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_EnabledSshAccess{`,
		`EnabledSshAccess:` + strings.Replace(fmt.Sprintf("%v", this.EnabledSshAccess), "SSHManagementType", "SSHManagementType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_F5BigIpBareMetalType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_F5BigIpBareMetalType{`,
		`F5BigIpBareMetalType:` + strings.Replace(fmt.Sprintf("%v", this.F5BigIpBareMetalType), "F5BigIpAppStackBareMetalType", "F5BigIpAppStackBareMetalType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SuggestedCommands) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SuggestedCommands{`,
		`Command:` + fmt.Sprintf("%v", this.Command) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Warning:` + fmt.Sprintf("%v", this.Warning) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndpointRefType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForEndpoint := "[]*ObjectRefType{"
	for _, f := range this.Endpoint {
		repeatedStringForEndpoint += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForEndpoint += "}"
	s := strings.Join([]string{`&EndpointRefType{`,
		`NodeName:` + fmt.Sprintf("%v", this.NodeName) + `,`,
		`Endpoint:` + repeatedStringForEndpoint + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExternalNLBInfo) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAwsSubnetInfo := "[]*AWSSubnetIdsType{"
	for _, f := range this.AwsSubnetInfo {
		repeatedStringForAwsSubnetInfo += strings.Replace(fmt.Sprintf("%v", f), "AWSSubnetIdsType", "views.AWSSubnetIdsType", 1) + ","
	}
	repeatedStringForAwsSubnetInfo += "}"
	s := strings.Join([]string{`&ExternalNLBInfo{`,
		`VpcId:` + fmt.Sprintf("%v", this.VpcId) + `,`,
		`Region:` + fmt.Sprintf("%v", this.Region) + `,`,
		`AwsSubnetInfo:` + repeatedStringForAwsSubnetInfo + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndpointServiceReplaceType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndpointServiceReplaceType{`,
		`TcpPortChoice:` + fmt.Sprintf("%v", this.TcpPortChoice) + `,`,
		`UdpPortChoice:` + fmt.Sprintf("%v", this.UdpPortChoice) + `,`,
		`ExternalVipChoice:` + fmt.Sprintf("%v", this.ExternalVipChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndpointServiceReplaceType_DefaultTcpPorts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndpointServiceReplaceType_DefaultTcpPorts{`,
		`DefaultTcpPorts:` + strings.Replace(fmt.Sprintf("%v", this.DefaultTcpPorts), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndpointServiceReplaceType_HttpPort) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndpointServiceReplaceType_HttpPort{`,
		`HttpPort:` + strings.Replace(fmt.Sprintf("%v", this.HttpPort), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndpointServiceReplaceType_HttpsPort) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndpointServiceReplaceType_HttpsPort{`,
		`HttpsPort:` + strings.Replace(fmt.Sprintf("%v", this.HttpsPort), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndpointServiceReplaceType_CustomTcpPorts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndpointServiceReplaceType_CustomTcpPorts{`,
		`CustomTcpPorts:` + strings.Replace(fmt.Sprintf("%v", this.CustomTcpPorts), "PortRangesType", "schema.PortRangesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndpointServiceReplaceType_NoTcpPorts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndpointServiceReplaceType_NoTcpPorts{`,
		`NoTcpPorts:` + strings.Replace(fmt.Sprintf("%v", this.NoTcpPorts), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndpointServiceReplaceType_NoUdpPorts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndpointServiceReplaceType_NoUdpPorts{`,
		`NoUdpPorts:` + strings.Replace(fmt.Sprintf("%v", this.NoUdpPorts), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndpointServiceReplaceType_CustomUdpPorts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndpointServiceReplaceType_CustomUdpPorts{`,
		`CustomUdpPorts:` + strings.Replace(fmt.Sprintf("%v", this.CustomUdpPorts), "PortRangesType", "schema.PortRangesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndpointServiceReplaceType_DisableAdvertiseOnSloIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndpointServiceReplaceType_DisableAdvertiseOnSloIp{`,
		`DisableAdvertiseOnSloIp:` + strings.Replace(fmt.Sprintf("%v", this.DisableAdvertiseOnSloIp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndpointServiceReplaceType_AdvertiseOnSloIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndpointServiceReplaceType_AdvertiseOnSloIp{`,
		`AdvertiseOnSloIp:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnSloIp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndpointServiceReplaceType_AdvertiseOnSloIpExternal) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndpointServiceReplaceType_AdvertiseOnSloIpExternal{`,
		`AdvertiseOnSloIpExternal:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnSloIpExternal), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeInfo{`,
		`SshCommand:` + fmt.Sprintf("%v", this.SshCommand) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`ServiceProviderChoice:` + fmt.Sprintf("%v", this.ServiceProviderChoice) + `,`,
		`HttpManagementChoice:` + fmt.Sprintf("%v", this.HttpManagementChoice) + `,`,
		`SshManagementChoice:` + fmt.Sprintf("%v", this.SshManagementChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_PaloAltoFwService) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_PaloAltoFwService{`,
		`PaloAltoFwService:` + strings.Replace(fmt.Sprintf("%v", this.PaloAltoFwService), "PaloAltoFWAWSType", "PaloAltoFWAWSType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DisableHttpsManagement) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DisableHttpsManagement{`,
		`DisableHttpsManagement:` + strings.Replace(fmt.Sprintf("%v", this.DisableHttpsManagement), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_HttpsManagement) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_HttpsManagement{`,
		`HttpsManagement:` + strings.Replace(fmt.Sprintf("%v", this.HttpsManagement), "ServiceHttpsManagementType", "ServiceHttpsManagementType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_F5BigIpAwsService) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_F5BigIpAwsService{`,
		`F5BigIpAwsService:` + strings.Replace(fmt.Sprintf("%v", this.F5BigIpAwsService), "F5BigIpAWSType", "F5BigIpAWSType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DisableSshAccess) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DisableSshAccess{`,
		`DisableSshAccess:` + strings.Replace(fmt.Sprintf("%v", this.DisableSshAccess), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_EnabledSshAccess) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_EnabledSshAccess{`,
		`EnabledSshAccess:` + strings.Replace(fmt.Sprintf("%v", this.EnabledSshAccess), "SSHManagementType", "SSHManagementType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`ServiceProviderChoice:` + fmt.Sprintf("%v", this.ServiceProviderChoice) + `,`,
		`HttpManagementChoice:` + fmt.Sprintf("%v", this.HttpManagementChoice) + `,`,
		`SshManagementChoice:` + fmt.Sprintf("%v", this.SshManagementChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_PaloAltoFwService) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_PaloAltoFwService{`,
		`PaloAltoFwService:` + strings.Replace(fmt.Sprintf("%v", this.PaloAltoFwService), "PaloAltoFWAWSReplaceType", "PaloAltoFWAWSReplaceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DisableHttpsManagement) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DisableHttpsManagement{`,
		`DisableHttpsManagement:` + strings.Replace(fmt.Sprintf("%v", this.DisableHttpsManagement), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_HttpsManagement) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_HttpsManagement{`,
		`HttpsManagement:` + strings.Replace(fmt.Sprintf("%v", this.HttpsManagement), "ServiceHttpsManagementType", "ServiceHttpsManagementType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_F5BigIpAwsService) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_F5BigIpAwsService{`,
		`F5BigIpAwsService:` + strings.Replace(fmt.Sprintf("%v", this.F5BigIpAwsService), "F5BigIpAWSReplaceType", "F5BigIpAWSReplaceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DisableSshAccess) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DisableSshAccess{`,
		`DisableSshAccess:` + strings.Replace(fmt.Sprintf("%v", this.DisableSshAccess), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_EnabledSshAccess) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_EnabledSshAccess{`,
		`EnabledSshAccess:` + strings.Replace(fmt.Sprintf("%v", this.EnabledSshAccess), "SSHManagementType", "SSHManagementType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForCommands := "[]*SuggestedCommands{"
	for _, f := range this.Commands {
		repeatedStringForCommands += strings.Replace(f.String(), "SuggestedCommands", "SuggestedCommands", 1) + ","
	}
	repeatedStringForCommands += "}"
	s := strings.Join([]string{`&GetSpecType{`,
		`ServiceProviderChoice:` + fmt.Sprintf("%v", this.ServiceProviderChoice) + `,`,
		`HttpManagementChoice:` + fmt.Sprintf("%v", this.HttpManagementChoice) + `,`,
		`ServiceTypeChoice:` + fmt.Sprintf("%v", this.ServiceTypeChoice) + `,`,
		`SshManagementChoice:` + fmt.Sprintf("%v", this.SshManagementChoice) + `,`,
		`Commands:` + repeatedStringForCommands + `,`,
		`FinalizerTimestamp:` + strings.Replace(fmt.Sprintf("%v", this.FinalizerTimestamp), "Timestamp", "types.Timestamp", 1) + `,`,
		`ForceDelete:` + fmt.Sprintf("%v", this.ForceDelete) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_PaloAltoFwService) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_PaloAltoFwService{`,
		`PaloAltoFwService:` + strings.Replace(fmt.Sprintf("%v", this.PaloAltoFwService), "PaloAltoFWAWSType", "PaloAltoFWAWSType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DisableHttpsManagement) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DisableHttpsManagement{`,
		`DisableHttpsManagement:` + strings.Replace(fmt.Sprintf("%v", this.DisableHttpsManagement), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_HttpsManagement) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_HttpsManagement{`,
		`HttpsManagement:` + strings.Replace(fmt.Sprintf("%v", this.HttpsManagement), "ServiceHttpsManagementType", "ServiceHttpsManagementType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_EndpointService) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_EndpointService{`,
		`EndpointService:` + strings.Replace(fmt.Sprintf("%v", this.EndpointService), "EndpointServiceType", "EndpointServiceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_ForwardingService) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_ForwardingService{`,
		`ForwardingService:` + strings.Replace(fmt.Sprintf("%v", this.ForwardingService), "ForwardingServiceType", "ForwardingServiceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_F5BigIpAwsService) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_F5BigIpAwsService{`,
		`F5BigIpAwsService:` + strings.Replace(fmt.Sprintf("%v", this.F5BigIpAwsService), "F5BigIpAWSType", "F5BigIpAWSType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_TransparentService) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_TransparentService{`,
		`TransparentService:` + strings.Replace(fmt.Sprintf("%v", this.TransparentService), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DisableSshAccess) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DisableSshAccess{`,
		`DisableSshAccess:` + strings.Replace(fmt.Sprintf("%v", this.DisableSshAccess), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_EnabledSshAccess) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_EnabledSshAccess{`,
		`EnabledSshAccess:` + strings.Replace(fmt.Sprintf("%v", this.EnabledSshAccess), "SSHManagementType", "SSHManagementType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ForwardingServiceType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForwardingServiceType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForwardingServiceType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndpointServiceType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndpointServiceType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndpointServiceType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutomaticVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InsideVipChoice = &EndpointServiceType_AutomaticVip{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfiguredVip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InsideVipChoice = &EndpointServiceType_ConfiguredVip{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableAdvertiseOnSloIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ExternalVipChoice = &EndpointServiceType_DisableAdvertiseOnSloIp{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnSloIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ExternalVipChoice = &EndpointServiceType_AdvertiseOnSloIp{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnSloIpExternal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ExternalVipChoice = &EndpointServiceType_AdvertiseOnSloIpExternal{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultTcpPorts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TcpPortChoice = &EndpointServiceType_DefaultTcpPorts{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpPort", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TcpPortChoice = &EndpointServiceType_HttpPort{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpsPort", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TcpPortChoice = &EndpointServiceType_HttpsPort{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomTcpPorts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.PortRangesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TcpPortChoice = &EndpointServiceType_CustomTcpPorts{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoTcpPorts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TcpPortChoice = &EndpointServiceType_NoTcpPorts{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoUdpPorts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UdpPortChoice = &EndpointServiceType_NoUdpPorts{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomUdpPorts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.PortRangesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UdpPortChoice = &EndpointServiceType_CustomUdpPorts{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceNodesAWSType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceNodesAWSType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceNodesAWSType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwsAzName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AwsAzName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutomaticPrefix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TunnelPrefixChoice = &ServiceNodesAWSType_AutomaticPrefix{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TunnelPrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TunnelPrefixChoice = &ServiceNodesAWSType_TunnelPrefix{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReservedMgmtSubnet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MgmtSubnetChoice = &ServiceNodesAWSType_ReservedMgmtSubnet{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MgmtSubnet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.CloudSubnetType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MgmtSubnetChoice = &ServiceNodesAWSType_MgmtSubnet{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *F5BigIpAWSTGWSiteType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: F5BigIpAWSTGWSiteType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: F5BigIpAWSTGWSiteType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwsTgwSite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AwsTgwSite == nil {
				m.AwsTgwSite = &views.ObjectRefType{}
			}
			if err := m.AwsTgwSite.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *F5BigIpAWSVPCSiteType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: F5BigIpAWSVPCSiteType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: F5BigIpAWSVPCSiteType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwsVpcSite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AwsVpcSite == nil {
				m.AwsVpcSite = &views.ObjectRefType{}
			}
			if err := m.AwsVpcSite.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *F5BigIpAWSBYOLImageType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: F5BigIpAWSBYOLImageType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: F5BigIpAWSBYOLImageType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field License", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.License == nil {
				m.License = &schema.SecretType{}
			}
			if err := m.License.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *F5BigIpAWSMarketPlaceImageType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: F5BigIpAWSMarketPlaceImageType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: F5BigIpAWSMarketPlaceImageType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AWAFPayG200Mbps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AmiChoice = &F5BigIpAWSMarketPlaceImageType_AWAFPayG200Mbps{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AWAFPayG3Gbps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AmiChoice = &F5BigIpAWSMarketPlaceImageType_AWAFPayG3Gbps{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BestPlusPayG200Mbps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AmiChoice = &F5BigIpAWSMarketPlaceImageType_BestPlusPayG200Mbps{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BestPlusPayg_1Gbps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AmiChoice = &F5BigIpAWSMarketPlaceImageType_BestPlusPayg_1Gbps{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *F5BigIpAWSType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: F5BigIpAWSType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: F5BigIpAWSType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ByolImage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &F5BigIpAWSBYOLImageType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ImageChoice = &F5BigIpAWSType_ByolImage{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminPassword", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdminPassword == nil {
				m.AdminPassword = &schema.SecretType{}
			}
			if err := m.AdminPassword.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SshKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SshKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwsTgwSiteParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &F5BigIpAWSTGWSiteType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteTypeChoice = &F5BigIpAWSType_AwsTgwSiteParams{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwsVpcSiteParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &F5BigIpAWSVPCSiteType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteTypeChoice = &F5BigIpAWSType_AwsVpcSiteParams{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &ServiceNodesAWSType{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminUsername", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminUsername = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketPlaceImage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &F5BigIpAWSMarketPlaceImageType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ImageChoice = &F5BigIpAWSType_MarketPlaceImage{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tags == nil {
				m.Tags = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Tags[mapkey] = mapvalue
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndpointService", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndpointService == nil {
				m.EndpointService = &EndpointServiceType{}
			}
			if err := m.EndpointService.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *F5BigIpAWSReplaceType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: F5BigIpAWSReplaceType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: F5BigIpAWSReplaceType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tags == nil {
				m.Tags = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Tags[mapkey] = mapvalue
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndpointService", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndpointService == nil {
				m.EndpointService = &EndpointServiceReplaceType{}
			}
			if err := m.EndpointService.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PanoramaServerType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PanoramaServerType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PanoramaServerType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Server", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Server = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorizationKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuthorizationKey == nil {
				m.AuthorizationKey = &schema.SecretType{}
			}
			if err := m.AuthorizationKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TemplateStackName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TemplateStackName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceGroupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceGroupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SSHKeyType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SSHKeyType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SSHKeyType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PrivateKey == nil {
				m.PrivateKey = &schema.SecretType{}
			}
			if err := m.PrivateKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PANAWSAutoSetupType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PANAWSAutoSetupType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PANAWSAutoSetupType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManualSshKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SSHKeyType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SshKeysChoice = &PANAWSAutoSetupType_ManualSshKeys{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutogeneratedSshKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SshKeysChoice = &PANAWSAutoSetupType_AutogeneratedSshKeys{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminUsername", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminUsername = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminPassword", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdminPassword == nil {
				m.AdminPassword = &schema.SecretType{}
			}
			if err := m.AdminPassword.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PaloAltoServiceNodesAWSType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaloAltoServiceNodesAWSType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaloAltoServiceNodesAWSType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwsAzName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AwsAzName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReservedMgmtSubnet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MgmtSubnetChoice = &PaloAltoServiceNodesAWSType_ReservedMgmtSubnet{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MgmtSubnet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.CloudSubnetType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MgmtSubnetChoice = &PaloAltoServiceNodesAWSType_MgmtSubnet{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PaloAltoFWAWSType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaloAltoFWAWSType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaloAltoFWAWSType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceType", wireType)
			}
			m.InstanceType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstanceType |= PaloAltoFWAWSInstanceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PanAmiBundle1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AmiChoice = &PaloAltoFWAWSType_PanAmiBundle1{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PanAmiBundle2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AmiChoice = &PaloAltoFWAWSType_PanAmiBundle2{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PanoramaServer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PanoramaServerType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PanaromaConnection = &PaloAltoFWAWSType_PanoramaServer{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SshKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SetupOptions = &PaloAltoFWAWSType_SshKey{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwsTgwSite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AwsTgwSite == nil {
				m.AwsTgwSite = &views.ObjectRefType{}
			}
			if err := m.AwsTgwSite.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceNodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ServiceNodes == nil {
				m.ServiceNodes = &PaloAltoAzNodesAWSType{}
			}
			if err := m.ServiceNodes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tags == nil {
				m.Tags = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Tags[mapkey] = mapvalue
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisablePanaroma", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PanaromaConnection = &PaloAltoFWAWSType_DisablePanaroma{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoSetup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PANAWSAutoSetupType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SetupOptions = &PaloAltoFWAWSType_AutoSetup{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PaloAltoAzNodesAWSType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaloAltoAzNodesAWSType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaloAltoAzNodesAWSType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &PaloAltoServiceNodesAWSType{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PaloAltoFWAWSReplaceType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaloAltoFWAWSReplaceType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaloAltoFWAWSReplaceType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tags == nil {
				m.Tags = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Tags[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SSHManagementNodePorts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SSHManagementNodePorts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SSHManagementNodePorts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SshPort", wireType)
			}
			m.SshPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SshPort |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SSHManagementType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SSHManagementType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SSHManagementType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnPublicDefaultVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &SSHManagementType_AdvertiseOnPublicDefaultVip{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnPublic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.AdvertisePublic{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &SSHManagementType_AdvertiseOnPublic{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnSloInternetVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &SSHManagementType_AdvertiseOnSloInternetVip{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnSli", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &SSHManagementType_AdvertiseOnSli{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnSlo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &SSHManagementType_AdvertiseOnSlo{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnSloSli", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &SSHManagementType_AdvertiseOnSloSli{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeSshPorts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeSshPorts = append(m.NodeSshPorts, &SSHManagementNodePorts{})
			if err := m.NodeSshPorts[len(m.NodeSshPorts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainSuffix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomainSuffix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceHttpsManagementType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceHttpsManagementType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceHttpsManagementType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainSuffix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomainSuffix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultHttpsPort", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PortChoice = &ServiceHttpsManagementType_DefaultHttpsPort{v}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpsPort", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PortChoice = &ServiceHttpsManagementType_HttpsPort{v}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoNotAdvertise", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InternetChoice = &ServiceHttpsManagementType_DoNotAdvertise{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnPublicDefaultVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InternetChoice = &ServiceHttpsManagementType_AdvertiseOnPublicDefaultVip{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnPublic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.AdvertisePublic{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InternetChoice = &ServiceHttpsManagementType_AdvertiseOnPublic{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnSliVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.DownstreamTlsParamsType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &ServiceHttpsManagementType_AdvertiseOnSliVip{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnSloVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.DownstreamTlsParamsType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &ServiceHttpsManagementType_AdvertiseOnSloVip{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnSloSli", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.DownstreamTlsParamsType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &ServiceHttpsManagementType_AdvertiseOnSloSli{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableLocal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &ServiceHttpsManagementType_DisableLocal{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnSloInternetVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.DownstreamTlsParamsType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &ServiceHttpsManagementType_AdvertiseOnSloInternetVip{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoNotAdvertiseOnInternet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &ServiceHttpsManagementType_DoNotAdvertiseOnInternet{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnInternetDefaultVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &ServiceHttpsManagementType_AdvertiseOnInternetDefaultVip{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnInternet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.AdvertisePublic{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &ServiceHttpsManagementType_AdvertiseOnInternet{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *F5BigIpAppStackBareMetalType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: F5BigIpAppStackBareMetalType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: F5BigIpAppStackBareMetalType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminUsername", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminUsername = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminPassword", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdminPassword == nil {
				m.AdminPassword = &schema.SecretType{}
			}
			if err := m.AdminPassword.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SshKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SshKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &ServiceNodesBareMetalType{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BareMetalSite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BareMetalSite == nil {
				m.BareMetalSite = &views.ObjectRefType{}
			}
			if err := m.BareMetalSite.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicDownloadUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicDownloadUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BigiqInstance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BigiqInstance == nil {
				m.BigiqInstance = &BigIqInstanceType{}
			}
			if err := m.BigiqInstance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfaceDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterfaceDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterfaceDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interface", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Interface == nil {
				m.Interface = &views.ObjectRefType{}
			}
			if err := m.Interface.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkSelfIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkSelfIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkGateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkGateway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BigIqInstanceType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BigIqInstanceType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BigIqInstanceType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Password == nil {
				m.Password = &schema.SecretType{}
			}
			if err := m.Password.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LicensePoolName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LicensePoolName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkuName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SkuName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LicenseServerIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LicenseServerIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceNodesBareMetalType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceNodesBareMetalType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceNodesBareMetalType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalInterface", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InternalInterface == nil {
				m.InternalInterface = &InterfaceDetails{}
			}
			if err := m.InternalInterface.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalInterface", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExternalInterface == nil {
				m.ExternalInterface = &InterfaceDetails{}
			}
			if err := m.ExternalInterface.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BmVirtualCpuCount", wireType)
			}
			m.BmVirtualCpuCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BmVirtualCpuCount |= BMNodeVirtualCpuCount(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BmNodeMemorySize", wireType)
			}
			m.BmNodeMemorySize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BmNodeMemorySize |= BMNodeMemorySize(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaloAltoFwService", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PaloAltoFWAWSType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServiceProviderChoice = &GlobalSpecType_PaloAltoFwService{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableHttpsManagement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HttpManagementChoice = &GlobalSpecType_DisableHttpsManagement{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpsManagement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ServiceHttpsManagementType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HttpManagementChoice = &GlobalSpecType_HttpsManagement{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndpointService", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EndpointServiceType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServiceTypeChoice = &GlobalSpecType_EndpointService{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardingService", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ForwardingServiceType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServiceTypeChoice = &GlobalSpecType_ForwardingService{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field F5BigIpAwsService", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &F5BigIpAWSType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServiceProviderChoice = &GlobalSpecType_F5BigIpAwsService{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransparentService", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServiceTypeChoice = &GlobalSpecType_TransparentService{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableSshAccess", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SshManagementChoice = &GlobalSpecType_DisableSshAccess{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnabledSshAccess", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SSHManagementType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SshManagementChoice = &GlobalSpecType_EnabledSshAccess{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field F5BigIpBareMetalType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &F5BigIpAppStackBareMetalType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServiceProviderChoice = &GlobalSpecType_F5BigIpBareMetalType{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeInfo = append(m.NodeInfo, &NodeInfo{})
			if err := m.NodeInfo[len(m.NodeInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1000:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fleet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fleet = append(m.Fleet, &schema.ObjectRefType{})
			if err := m.Fleet[len(m.Fleet)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1001:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudCredentials", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CloudCredentials = append(m.CloudCredentials, &schema.ObjectRefType{})
			if err := m.CloudCredentials[len(m.CloudCredentials)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1002:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TfParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TfParams = append(m.TfParams, &schema.ObjectRefType{})
			if err := m.TfParams[len(m.TfParams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1003:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicySet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicySet = append(m.PolicySet, &schema.ObjectRefType{})
			if err := m.PolicySet[len(m.PolicySet)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1004:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsideVip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InsideVip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 1005:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginPool = append(m.OriginPool, &schema.ObjectRefType{})
			if err := m.OriginPool[len(m.OriginPool)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1006:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagementEndpointRefs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ManagementEndpointRefs = append(m.ManagementEndpointRefs, &EndpointRefType{})
			if err := m.ManagementEndpointRefs[len(m.ManagementEndpointRefs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1008:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalNlbInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExternalNlbInfo == nil {
				m.ExternalNlbInfo = &ExternalNLBInfo{}
			}
			if err := m.ExternalNlbInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1009:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commands", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commands = append(m.Commands, &SuggestedCommands{})
			if err := m.Commands[len(m.Commands)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1010:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteRefs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SiteRefs = append(m.SiteRefs, &schema.ObjectRefType{})
			if err := m.SiteRefs[len(m.SiteRefs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1012:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field K8SManifestParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.K8SManifestParams = append(m.K8SManifestParams, &schema.ObjectRefType{})
			if err := m.K8SManifestParams[len(m.K8SManifestParams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1013:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceType", wireType)
			}
			m.ServiceType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServiceType |= ServiceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 1014:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalizerTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FinalizerTimestamp == nil {
				m.FinalizerTimestamp = &types.Timestamp{}
			}
			if err := m.FinalizerTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1015:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForceDelete", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ForceDelete = bool(v != 0)
		case 2000:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewInternal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewInternal == nil {
				m.ViewInternal = &views.ObjectRefType{}
			}
			if err := m.ViewInternal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SuggestedCommands) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SuggestedCommands: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SuggestedCommands: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Command = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Warning", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Warning = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndpointRefType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndpointRefType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndpointRefType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 1005:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoint = append(m.Endpoint, &schema.ObjectRefType{})
			if err := m.Endpoint[len(m.Endpoint)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExternalNLBInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExternalNLBInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExternalNLBInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpcId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VpcId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwsSubnetInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AwsSubnetInfo = append(m.AwsSubnetInfo, &views.AWSSubnetIdsType{})
			if err := m.AwsSubnetInfo[len(m.AwsSubnetInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndpointServiceReplaceType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndpointServiceReplaceType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndpointServiceReplaceType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultTcpPorts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TcpPortChoice = &EndpointServiceReplaceType_DefaultTcpPorts{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpPort", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TcpPortChoice = &EndpointServiceReplaceType_HttpPort{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpsPort", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TcpPortChoice = &EndpointServiceReplaceType_HttpsPort{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomTcpPorts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.PortRangesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TcpPortChoice = &EndpointServiceReplaceType_CustomTcpPorts{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoTcpPorts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TcpPortChoice = &EndpointServiceReplaceType_NoTcpPorts{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoUdpPorts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UdpPortChoice = &EndpointServiceReplaceType_NoUdpPorts{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomUdpPorts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.PortRangesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UdpPortChoice = &EndpointServiceReplaceType_CustomUdpPorts{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableAdvertiseOnSloIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ExternalVipChoice = &EndpointServiceReplaceType_DisableAdvertiseOnSloIp{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnSloIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ExternalVipChoice = &EndpointServiceReplaceType_AdvertiseOnSloIp{v}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnSloIpExternal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ExternalVipChoice = &EndpointServiceReplaceType_AdvertiseOnSloIpExternal{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SshCommand", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SshCommand = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaloAltoFwService", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PaloAltoFWAWSType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServiceProviderChoice = &CreateSpecType_PaloAltoFwService{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableHttpsManagement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HttpManagementChoice = &CreateSpecType_DisableHttpsManagement{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpsManagement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ServiceHttpsManagementType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HttpManagementChoice = &CreateSpecType_HttpsManagement{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field F5BigIpAwsService", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &F5BigIpAWSType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServiceProviderChoice = &CreateSpecType_F5BigIpAwsService{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableSshAccess", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SshManagementChoice = &CreateSpecType_DisableSshAccess{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnabledSshAccess", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SSHManagementType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SshManagementChoice = &CreateSpecType_EnabledSshAccess{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaloAltoFwService", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PaloAltoFWAWSReplaceType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServiceProviderChoice = &ReplaceSpecType_PaloAltoFwService{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableHttpsManagement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HttpManagementChoice = &ReplaceSpecType_DisableHttpsManagement{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpsManagement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ServiceHttpsManagementType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HttpManagementChoice = &ReplaceSpecType_HttpsManagement{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field F5BigIpAwsService", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &F5BigIpAWSReplaceType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServiceProviderChoice = &ReplaceSpecType_F5BigIpAwsService{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableSshAccess", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SshManagementChoice = &ReplaceSpecType_DisableSshAccess{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnabledSshAccess", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SSHManagementType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SshManagementChoice = &ReplaceSpecType_EnabledSshAccess{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaloAltoFwService", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PaloAltoFWAWSType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServiceProviderChoice = &GetSpecType_PaloAltoFwService{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableHttpsManagement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HttpManagementChoice = &GetSpecType_DisableHttpsManagement{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpsManagement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ServiceHttpsManagementType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HttpManagementChoice = &GetSpecType_HttpsManagement{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndpointService", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EndpointServiceType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServiceTypeChoice = &GetSpecType_EndpointService{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardingService", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ForwardingServiceType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServiceTypeChoice = &GetSpecType_ForwardingService{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field F5BigIpAwsService", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &F5BigIpAWSType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServiceProviderChoice = &GetSpecType_F5BigIpAwsService{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransparentService", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServiceTypeChoice = &GetSpecType_TransparentService{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableSshAccess", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SshManagementChoice = &GetSpecType_DisableSshAccess{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnabledSshAccess", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SSHManagementType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SshManagementChoice = &GetSpecType_EnabledSshAccess{v}
			iNdEx = postIndex
		case 1009:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commands", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commands = append(m.Commands, &SuggestedCommands{})
			if err := m.Commands[len(m.Commands)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1014:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalizerTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FinalizerTimestamp == nil {
				m.FinalizerTimestamp = &types.Timestamp{}
			}
			if err := m.FinalizerTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1015:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForceDelete", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ForceDelete = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package fast_acl

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *CreateSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetProtocolPolicerDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetProtocolPolicerDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSiteChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetSiteChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *CreateSpecType) GetProtocolPolicerDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetProtocolPolicer()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("protocol_policer.Object")
	dri := db.DRefInfo{
		RefdType:   "protocol_policer.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "protocol_policer",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetProtocolPolicerDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *CreateSpecType) GetProtocolPolicerDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "protocol_policer.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: protocol_policer")
	}

	vref := m.GetProtocolPolicer()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "protocol_policer.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetSiteChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSiteChoice() == nil {
		return nil, nil
	}
	switch m.GetSiteChoice().(type) {
	case *CreateSpecType_SiteAcl:

		drInfos, err := m.GetSiteAcl().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSiteAcl().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "site_acl." + dri.DRField
		}
		return drInfos, err

	case *CreateSpecType_ReAcl:

		drInfos, err := m.GetReAcl().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetReAcl().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "re_acl." + dri.DRField
		}
		return drInfos, err

	case *CreateSpecType_LegacyAcl:

		drInfos, err := m.GetLegacyAcl().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetLegacyAcl().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "legacy_acl." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) SiteChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for site_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["protocol_policer"]; exists {

		vOpts := append(opts, db.WithValidateField("protocol_policer"))
		if err := fv(ctx, m.GetProtocolPolicer(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["site_choice"]; exists {
		val := m.GetSiteChoice()
		vOpts := append(opts,
			db.WithValidateField("site_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSiteChoice().(type) {
	case *CreateSpecType_SiteAcl:
		if fv, exists := v.FldValidators["site_choice.site_acl"]; exists {
			val := m.GetSiteChoice().(*CreateSpecType_SiteAcl).SiteAcl
			vOpts := append(opts,
				db.WithValidateField("site_choice"),
				db.WithValidateField("site_acl"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_ReAcl:
		if fv, exists := v.FldValidators["site_choice.re_acl"]; exists {
			val := m.GetSiteChoice().(*CreateSpecType_ReAcl).ReAcl
			vOpts := append(opts,
				db.WithValidateField("site_choice"),
				db.WithValidateField("re_acl"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_LegacyAcl:
		if fv, exists := v.FldValidators["site_choice.legacy_acl"]; exists {
			val := m.GetSiteChoice().(*CreateSpecType_LegacyAcl).LegacyAcl
			vOpts := append(opts,
				db.WithValidateField("site_choice"),
				db.WithValidateField("legacy_acl"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhSiteChoice := v.SiteChoiceValidationRuleHandler
	rulesSiteChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSiteChoice(rulesSiteChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.site_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["site_choice"] = vFn

	v.FldValidators["site_choice.site_acl"] = SiteACLTypeValidator().Validate
	v.FldValidators["site_choice.re_acl"] = ReACLTypeValidator().Validate
	v.FldValidators["site_choice.legacy_acl"] = LegacyACLTypeValidator().Validate

	v.FldValidators["protocol_policer"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *DestinationIPAddressType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DestinationIPAddressType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DestinationIPAddressType) DeepCopy() *DestinationIPAddressType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DestinationIPAddressType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DestinationIPAddressType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DestinationIPAddressType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DestinationIPAddressTypeValidator().Validate(ctx, m, opts...)
}

type ValidateDestinationIPAddressType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDestinationIPAddressType) ProtocolValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for protocol")
	}

	return validatorFn, nil
}

func (v *ValidateDestinationIPAddressType) PortsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for ports")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.PortValueType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.PortValueTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for ports")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.PortValueType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.PortValueType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated ports")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items ports")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateDestinationIPAddressType) AddressValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for address")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.IpAddressType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.IpAddressTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for address")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.IpAddressType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.IpAddressType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated address")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items address")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateDestinationIPAddressType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DestinationIPAddressType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DestinationIPAddressType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["address"]; exists {
		vOpts := append(opts, db.WithValidateField("address"))
		if err := fv(ctx, m.GetAddress(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["ports"]; exists {
		vOpts := append(opts, db.WithValidateField("ports"))
		if err := fv(ctx, m.GetPorts(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["protocol"]; exists {

		vOpts := append(opts, db.WithValidateField("protocol"))
		if err := fv(ctx, m.GetProtocol(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDestinationIPAddressTypeValidator = func() *ValidateDestinationIPAddressType {
	v := &ValidateDestinationIPAddressType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhProtocol := v.ProtocolValidationRuleHandler
	rulesProtocol := map[string]string{
		"ves.io.schema.rules.string.in": "[\"\",\"ALL\",\"TCP\",\"UDP\",\"ICMP\"]",
	}
	vFn, err = vrhProtocol(rulesProtocol)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DestinationIPAddressType.protocol: %s", err)
		panic(errMsg)
	}
	v.FldValidators["protocol"] = vFn

	vrhPorts := v.PortsValidationRuleHandler
	rulesPorts := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "128",
	}
	vFn, err = vrhPorts(rulesPorts)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DestinationIPAddressType.ports: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ports"] = vFn

	vrhAddress := v.AddressValidationRuleHandler
	rulesAddress := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "128",
	}
	vFn, err = vrhAddress(rulesAddress)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DestinationIPAddressType.address: %s", err)
		panic(errMsg)
	}
	v.FldValidators["address"] = vFn

	return v
}()

func DestinationIPAddressTypeValidator() db.Validator {
	return DefaultDestinationIPAddressTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *DestinationType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DestinationType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DestinationType) DeepCopy() *DestinationType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DestinationType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DestinationType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DestinationType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DestinationTypeValidator().Validate(ctx, m, opts...)
}

type ValidateDestinationType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDestinationType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DestinationType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DestinationType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	switch m.GetDestinationTypeChoice().(type) {
	case *DestinationType_InterfaceServices:
		if fv, exists := v.FldValidators["destination_type_choice.interface_services"]; exists {
			val := m.GetDestinationTypeChoice().(*DestinationType_InterfaceServices).InterfaceServices
			vOpts := append(opts,
				db.WithValidateField("destination_type_choice"),
				db.WithValidateField("interface_services"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *DestinationType_VipServices:
		if fv, exists := v.FldValidators["destination_type_choice.vip_services"]; exists {
			val := m.GetDestinationTypeChoice().(*DestinationType_VipServices).VipServices
			vOpts := append(opts,
				db.WithValidateField("destination_type_choice"),
				db.WithValidateField("vip_services"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *DestinationType_AllServices:
		if fv, exists := v.FldValidators["destination_type_choice.all_services"]; exists {
			val := m.GetDestinationTypeChoice().(*DestinationType_AllServices).AllServices
			vOpts := append(opts,
				db.WithValidateField("destination_type_choice"),
				db.WithValidateField("all_services"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *DestinationType_DestinationIpAddress:
		if fv, exists := v.FldValidators["destination_type_choice.destination_ip_address"]; exists {
			val := m.GetDestinationTypeChoice().(*DestinationType_DestinationIpAddress).DestinationIpAddress
			vOpts := append(opts,
				db.WithValidateField("destination_type_choice"),
				db.WithValidateField("destination_ip_address"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *DestinationType_SelectedVipAddress:
		if fv, exists := v.FldValidators["destination_type_choice.selected_vip_address"]; exists {
			val := m.GetDestinationTypeChoice().(*DestinationType_SelectedVipAddress).SelectedVipAddress
			vOpts := append(opts,
				db.WithValidateField("destination_type_choice"),
				db.WithValidateField("selected_vip_address"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *DestinationType_SharedVipServices:
		if fv, exists := v.FldValidators["destination_type_choice.shared_vip_services"]; exists {
			val := m.GetDestinationTypeChoice().(*DestinationType_SharedVipServices).SharedVipServices
			vOpts := append(opts,
				db.WithValidateField("destination_type_choice"),
				db.WithValidateField("shared_vip_services"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *DestinationType_Vhost:
		if fv, exists := v.FldValidators["destination_type_choice.vhost"]; exists {
			val := m.GetDestinationTypeChoice().(*DestinationType_Vhost).Vhost
			vOpts := append(opts,
				db.WithValidateField("destination_type_choice"),
				db.WithValidateField("vhost"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDestinationTypeValidator = func() *ValidateDestinationType {
	v := &ValidateDestinationType{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["destination_type_choice.destination_ip_address"] = DestinationIPAddressTypeValidator().Validate
	v.FldValidators["destination_type_choice.selected_vip_address"] = SelectedVIPAddressTypeValidator().Validate

	return v
}()

func DestinationTypeValidator() db.Validator {
	return DefaultDestinationTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *FastACLRuleType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *FastACLRuleType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *FastACLRuleType) DeepCopy() *FastACLRuleType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &FastACLRuleType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *FastACLRuleType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *FastACLRuleType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return FastACLRuleTypeValidator().Validate(ctx, m, opts...)
}

func (m *FastACLRuleType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetActionDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetActionDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSourceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetSourceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *FastACLRuleType) GetActionDRefInfo() ([]db.DRefInfo, error) {
	if m.GetAction() == nil {
		return nil, nil
	}

	drInfos, err := m.GetAction().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetAction().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "action." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *FastACLRuleType) GetSourceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSource() == nil {
		return nil, nil
	}
	switch m.GetSource().(type) {
	case *FastACLRuleType_Prefix:

		return nil, nil

	case *FastACLRuleType_IpPrefixSet:

		drInfos, err := m.GetIpPrefixSet().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetIpPrefixSet().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "ip_prefix_set." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateFastACLRuleType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateFastACLRuleType) SourceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for source")
	}
	return validatorFn, nil
}

func (v *ValidateFastACLRuleType) ActionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for action")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateFastACLRuleType) PortValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for port")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.PortValueType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.PortValueTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for port")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.PortValueType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.PortValueType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated port")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items port")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateFastACLRuleType) MetadataValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for metadata")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.MessageMetaTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateFastACLRuleType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*FastACLRuleType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *FastACLRuleType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["action"]; exists {

		vOpts := append(opts, db.WithValidateField("action"))
		if err := fv(ctx, m.GetAction(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["metadata"]; exists {

		vOpts := append(opts, db.WithValidateField("metadata"))
		if err := fv(ctx, m.GetMetadata(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["port"]; exists {
		vOpts := append(opts, db.WithValidateField("port"))
		if err := fv(ctx, m.GetPort(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["source"]; exists {
		val := m.GetSource()
		vOpts := append(opts,
			db.WithValidateField("source"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSource().(type) {
	case *FastACLRuleType_Prefix:
		if fv, exists := v.FldValidators["source.prefix"]; exists {
			val := m.GetSource().(*FastACLRuleType_Prefix).Prefix
			vOpts := append(opts,
				db.WithValidateField("source"),
				db.WithValidateField("prefix"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *FastACLRuleType_IpPrefixSet:
		if fv, exists := v.FldValidators["source.ip_prefix_set"]; exists {
			val := m.GetSource().(*FastACLRuleType_IpPrefixSet).IpPrefixSet
			vOpts := append(opts,
				db.WithValidateField("source"),
				db.WithValidateField("ip_prefix_set"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultFastACLRuleTypeValidator = func() *ValidateFastACLRuleType {
	v := &ValidateFastACLRuleType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhSource := v.SourceValidationRuleHandler
	rulesSource := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSource(rulesSource)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for FastACLRuleType.source: %s", err)
		panic(errMsg)
	}
	v.FldValidators["source"] = vFn

	vrhAction := v.ActionValidationRuleHandler
	rulesAction := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhAction(rulesAction)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for FastACLRuleType.action: %s", err)
		panic(errMsg)
	}
	v.FldValidators["action"] = vFn

	vrhPort := v.PortValidationRuleHandler
	rulesPort := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "128",
	}
	vFn, err = vrhPort(rulesPort)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for FastACLRuleType.port: %s", err)
		panic(errMsg)
	}
	v.FldValidators["port"] = vFn

	vrhMetadata := v.MetadataValidationRuleHandler
	rulesMetadata := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhMetadata(rulesMetadata)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for FastACLRuleType.metadata: %s", err)
		panic(errMsg)
	}
	v.FldValidators["metadata"] = vFn

	v.FldValidators["source.prefix"] = ves_io_schema.PrefixListTypeValidator().Validate
	v.FldValidators["source.ip_prefix_set"] = ves_io_schema.IpPrefixSetRefTypeValidator().Validate

	return v
}()

func FastACLRuleTypeValidator() db.Validator {
	return DefaultFastACLRuleTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GetSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetProtocolPolicerDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetProtocolPolicerDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSiteChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetSiteChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *GetSpecType) GetProtocolPolicerDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetProtocolPolicer()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("protocol_policer.Object")
	dri := db.DRefInfo{
		RefdType:   "protocol_policer.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "protocol_policer",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetProtocolPolicerDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GetSpecType) GetProtocolPolicerDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "protocol_policer.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: protocol_policer")
	}

	vref := m.GetProtocolPolicer()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "protocol_policer.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetSiteChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSiteChoice() == nil {
		return nil, nil
	}
	switch m.GetSiteChoice().(type) {
	case *GetSpecType_SiteAcl:

		drInfos, err := m.GetSiteAcl().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSiteAcl().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "site_acl." + dri.DRField
		}
		return drInfos, err

	case *GetSpecType_ReAcl:

		drInfos, err := m.GetReAcl().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetReAcl().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "re_acl." + dri.DRField
		}
		return drInfos, err

	case *GetSpecType_LegacyAcl:

		drInfos, err := m.GetLegacyAcl().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetLegacyAcl().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "legacy_acl." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) SiteChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for site_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["protocol_policer"]; exists {

		vOpts := append(opts, db.WithValidateField("protocol_policer"))
		if err := fv(ctx, m.GetProtocolPolicer(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["site_choice"]; exists {
		val := m.GetSiteChoice()
		vOpts := append(opts,
			db.WithValidateField("site_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSiteChoice().(type) {
	case *GetSpecType_SiteAcl:
		if fv, exists := v.FldValidators["site_choice.site_acl"]; exists {
			val := m.GetSiteChoice().(*GetSpecType_SiteAcl).SiteAcl
			vOpts := append(opts,
				db.WithValidateField("site_choice"),
				db.WithValidateField("site_acl"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_ReAcl:
		if fv, exists := v.FldValidators["site_choice.re_acl"]; exists {
			val := m.GetSiteChoice().(*GetSpecType_ReAcl).ReAcl
			vOpts := append(opts,
				db.WithValidateField("site_choice"),
				db.WithValidateField("re_acl"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_LegacyAcl:
		if fv, exists := v.FldValidators["site_choice.legacy_acl"]; exists {
			val := m.GetSiteChoice().(*GetSpecType_LegacyAcl).LegacyAcl
			vOpts := append(opts,
				db.WithValidateField("site_choice"),
				db.WithValidateField("legacy_acl"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhSiteChoice := v.SiteChoiceValidationRuleHandler
	rulesSiteChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSiteChoice(rulesSiteChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.site_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["site_choice"] = vFn

	v.FldValidators["site_choice.site_acl"] = SiteACLTypeValidator().Validate
	v.FldValidators["site_choice.re_acl"] = ReACLTypeValidator().Validate
	v.FldValidators["site_choice.legacy_acl"] = LegacyACLTypeValidator().Validate

	v.FldValidators["protocol_policer"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GlobalSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetConfigChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetConfigChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetDefaultProtocolPolicerDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetDefaultProtocolPolicerDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetProtocolPolicerDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetProtocolPolicerDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSourceRulesDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetSourceRulesDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetViewInternalDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetViewInternalDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetConfigChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetConfigChoice() == nil {
		return nil, nil
	}
	switch m.GetConfigChoice().(type) {
	case *GlobalSpecType_SiteAcl:

		drInfos, err := m.GetSiteAcl().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSiteAcl().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "site_acl." + dri.DRField
		}
		return drInfos, err

	case *GlobalSpecType_ReAcl:

		drInfos, err := m.GetReAcl().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetReAcl().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "re_acl." + dri.DRField
		}
		return drInfos, err

	case *GlobalSpecType_LegacyAcl:

		return nil, nil

	default:
		return nil, nil
	}

}

func (m *GlobalSpecType) GetDefaultProtocolPolicerDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetDefaultProtocolPolicer()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("GlobalSpecType.default_protocol_policer[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "protocol_policer.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "default_protocol_policer",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetDefaultProtocolPolicerDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetDefaultProtocolPolicerDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "protocol_policer.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: protocol_policer")
	}
	for _, ref := range m.GetDefaultProtocolPolicer() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

func (m *GlobalSpecType) GetProtocolPolicerDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetProtocolPolicer()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("protocol_policer.Object")
	dri := db.DRefInfo{
		RefdType:   "protocol_policer.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "protocol_policer",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetProtocolPolicerDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetProtocolPolicerDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "protocol_policer.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: protocol_policer")
	}

	vref := m.GetProtocolPolicer()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "protocol_policer.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

func (m *GlobalSpecType) GetSourceRulesDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetSourceRules()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("GlobalSpecType.source_rules[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "fast_acl_rule.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "source_rules",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetSourceRulesDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetSourceRulesDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "fast_acl_rule.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: fast_acl_rule")
	}
	for _, ref := range m.GetSourceRules() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

func (m *GlobalSpecType) GetViewInternalDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetViewInternal()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("view_internal.Object")
	dri := db.DRefInfo{
		RefdType:   "view_internal.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "view_internal",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetViewInternalDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetViewInternalDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "view_internal.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: view_internal")
	}

	vref := m.GetViewInternal()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "view_internal.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) ConfigChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for config_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) SourceRulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for source_rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for source_rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated source_rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items source_rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) DefaultProtocolPolicerValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for default_protocol_policer")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for default_protocol_policer")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated default_protocol_policer")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items default_protocol_policer")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) NetworkTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for network_type")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) DestinationTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for destination_type")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["config_choice"]; exists {
		val := m.GetConfigChoice()
		vOpts := append(opts,
			db.WithValidateField("config_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetConfigChoice().(type) {
	case *GlobalSpecType_SiteAcl:
		if fv, exists := v.FldValidators["config_choice.site_acl"]; exists {
			val := m.GetConfigChoice().(*GlobalSpecType_SiteAcl).SiteAcl
			vOpts := append(opts,
				db.WithValidateField("config_choice"),
				db.WithValidateField("site_acl"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_ReAcl:
		if fv, exists := v.FldValidators["config_choice.re_acl"]; exists {
			val := m.GetConfigChoice().(*GlobalSpecType_ReAcl).ReAcl
			vOpts := append(opts,
				db.WithValidateField("config_choice"),
				db.WithValidateField("re_acl"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_LegacyAcl:
		if fv, exists := v.FldValidators["config_choice.legacy_acl"]; exists {
			val := m.GetConfigChoice().(*GlobalSpecType_LegacyAcl).LegacyAcl
			vOpts := append(opts,
				db.WithValidateField("config_choice"),
				db.WithValidateField("legacy_acl"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["default_protocol_policer"]; exists {
		vOpts := append(opts, db.WithValidateField("default_protocol_policer"))
		if err := fv(ctx, m.GetDefaultProtocolPolicer(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["destination_type"]; exists {

		vOpts := append(opts, db.WithValidateField("destination_type"))
		if err := fv(ctx, m.GetDestinationType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["network_type"]; exists {

		vOpts := append(opts, db.WithValidateField("network_type"))
		if err := fv(ctx, m.GetNetworkType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["protocol_policer"]; exists {

		vOpts := append(opts, db.WithValidateField("protocol_policer"))
		if err := fv(ctx, m.GetProtocolPolicer(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["source_rules"]; exists {
		vOpts := append(opts, db.WithValidateField("source_rules"))
		if err := fv(ctx, m.GetSourceRules(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["view_internal"]; exists {

		vOpts := append(opts, db.WithValidateField("view_internal"))
		if err := fv(ctx, m.GetViewInternal(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhConfigChoice := v.ConfigChoiceValidationRuleHandler
	rulesConfigChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhConfigChoice(rulesConfigChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.config_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["config_choice"] = vFn

	vrhSourceRules := v.SourceRulesValidationRuleHandler
	rulesSourceRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "128",
	}
	vFn, err = vrhSourceRules(rulesSourceRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.source_rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["source_rules"] = vFn

	vrhDefaultProtocolPolicer := v.DefaultProtocolPolicerValidationRuleHandler
	rulesDefaultProtocolPolicer := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1",
	}
	vFn, err = vrhDefaultProtocolPolicer(rulesDefaultProtocolPolicer)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.default_protocol_policer: %s", err)
		panic(errMsg)
	}
	v.FldValidators["default_protocol_policer"] = vFn

	vrhNetworkType := v.NetworkTypeValidationRuleHandler
	rulesNetworkType := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhNetworkType(rulesNetworkType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.network_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["network_type"] = vFn

	vrhDestinationType := v.DestinationTypeValidationRuleHandler
	rulesDestinationType := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhDestinationType(rulesDestinationType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.destination_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["destination_type"] = vFn

	v.FldValidators["config_choice.site_acl"] = SiteACLTypeValidator().Validate
	v.FldValidators["config_choice.re_acl"] = ReACLTypeValidator().Validate

	v.FldValidators["protocol_policer"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["view_internal"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *LegacyACLType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *LegacyACLType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *LegacyACLType) DeepCopy() *LegacyACLType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &LegacyACLType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *LegacyACLType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *LegacyACLType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return LegacyACLTypeValidator().Validate(ctx, m, opts...)
}

func (m *LegacyACLType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetSourceRulesDRefInfo()

}

func (m *LegacyACLType) GetSourceRulesDRefInfo() ([]db.DRefInfo, error) {
	vrefs := m.GetSourceRules()
	if len(vrefs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(vrefs))
	for i, vref := range vrefs {
		if vref == nil {
			return nil, fmt.Errorf("LegacyACLType.source_rules[%d] has a nil value", i)
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("fast_acl_rule.Object")
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "fast_acl_rule.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "source_rules",
			Ref:        vdRef,
		})
	}
	return drInfos, nil

}

// GetSourceRulesDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *LegacyACLType) GetSourceRulesDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "fast_acl_rule.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: fast_acl_rule")
	}
	for i, vref := range m.GetSourceRules() {
		if vref == nil {
			return nil, fmt.Errorf("LegacyACLType.source_rules[%d] has a nil value", i)
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "fast_acl_rule.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateLegacyACLType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateLegacyACLType) NetworkTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for network_type")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateLegacyACLType) DestinationTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for destination_type")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateLegacyACLType) SourceRulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for source_rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for source_rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated source_rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items source_rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateLegacyACLType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*LegacyACLType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *LegacyACLType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["destination_type"]; exists {

		vOpts := append(opts, db.WithValidateField("destination_type"))
		if err := fv(ctx, m.GetDestinationType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["network_type"]; exists {

		vOpts := append(opts, db.WithValidateField("network_type"))
		if err := fv(ctx, m.GetNetworkType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["source_rules"]; exists {
		vOpts := append(opts, db.WithValidateField("source_rules"))
		if err := fv(ctx, m.GetSourceRules(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultLegacyACLTypeValidator = func() *ValidateLegacyACLType {
	v := &ValidateLegacyACLType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhNetworkType := v.NetworkTypeValidationRuleHandler
	rulesNetworkType := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhNetworkType(rulesNetworkType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for LegacyACLType.network_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["network_type"] = vFn

	vrhDestinationType := v.DestinationTypeValidationRuleHandler
	rulesDestinationType := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhDestinationType(rulesDestinationType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for LegacyACLType.destination_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["destination_type"] = vFn

	vrhSourceRules := v.SourceRulesValidationRuleHandler
	rulesSourceRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "128",
	}
	vFn, err = vrhSourceRules(rulesSourceRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for LegacyACLType.source_rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["source_rules"] = vFn

	return v
}()

func LegacyACLTypeValidator() db.Validator {
	return DefaultLegacyACLTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ReACLType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReACLType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ReACLType) DeepCopy() *ReACLType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReACLType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReACLType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReACLType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReACLTypeValidator().Validate(ctx, m, opts...)
}

func (m *ReACLType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetFastAclRulesDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetFastAclRulesDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetVipChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetVipChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *ReACLType) GetFastAclRulesDRefInfo() ([]db.DRefInfo, error) {
	if m.GetFastAclRules() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetFastAclRules() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetFastAclRules() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("fast_acl_rules[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *ReACLType) GetVipChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetVipChoice() == nil {
		return nil, nil
	}
	switch m.GetVipChoice().(type) {
	case *ReACLType_AllPublicVips:

		return nil, nil

	case *ReACLType_DefaultTenantVip:

		return nil, nil

	case *ReACLType_SelectedTenantVip:

		drInfos, err := m.GetSelectedTenantVip().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSelectedTenantVip().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "selected_tenant_vip." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateReACLType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReACLType) VipChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for vip_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReACLType) FastAclRulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for fast_acl_rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*FastACLRuleType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := FastACLRuleTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for fast_acl_rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*FastACLRuleType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*FastACLRuleType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated fast_acl_rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items fast_acl_rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReACLType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReACLType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReACLType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["fast_acl_rules"]; exists {
		vOpts := append(opts, db.WithValidateField("fast_acl_rules"))
		if err := fv(ctx, m.GetFastAclRules(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["vip_choice"]; exists {
		val := m.GetVipChoice()
		vOpts := append(opts,
			db.WithValidateField("vip_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetVipChoice().(type) {
	case *ReACLType_AllPublicVips:
		if fv, exists := v.FldValidators["vip_choice.all_public_vips"]; exists {
			val := m.GetVipChoice().(*ReACLType_AllPublicVips).AllPublicVips
			vOpts := append(opts,
				db.WithValidateField("vip_choice"),
				db.WithValidateField("all_public_vips"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReACLType_DefaultTenantVip:
		if fv, exists := v.FldValidators["vip_choice.default_tenant_vip"]; exists {
			val := m.GetVipChoice().(*ReACLType_DefaultTenantVip).DefaultTenantVip
			vOpts := append(opts,
				db.WithValidateField("vip_choice"),
				db.WithValidateField("default_tenant_vip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReACLType_SelectedTenantVip:
		if fv, exists := v.FldValidators["vip_choice.selected_tenant_vip"]; exists {
			val := m.GetVipChoice().(*ReACLType_SelectedTenantVip).SelectedTenantVip
			vOpts := append(opts,
				db.WithValidateField("vip_choice"),
				db.WithValidateField("selected_tenant_vip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReACLTypeValidator = func() *ValidateReACLType {
	v := &ValidateReACLType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhVipChoice := v.VipChoiceValidationRuleHandler
	rulesVipChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhVipChoice(rulesVipChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReACLType.vip_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["vip_choice"] = vFn

	vrhFastAclRules := v.FastAclRulesValidationRuleHandler
	rulesFastAclRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "128",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhFastAclRules(rulesFastAclRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReACLType.fast_acl_rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["fast_acl_rules"] = vFn

	v.FldValidators["vip_choice.selected_tenant_vip"] = SelectedTenantVIPsTypeValidator().Validate

	return v
}()

func ReACLTypeValidator() db.Validator {
	return DefaultReACLTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *ReplaceSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetProtocolPolicerDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetProtocolPolicerDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSiteChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetSiteChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *ReplaceSpecType) GetProtocolPolicerDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetProtocolPolicer()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("protocol_policer.Object")
	dri := db.DRefInfo{
		RefdType:   "protocol_policer.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "protocol_policer",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetProtocolPolicerDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *ReplaceSpecType) GetProtocolPolicerDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "protocol_policer.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: protocol_policer")
	}

	vref := m.GetProtocolPolicer()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "protocol_policer.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetSiteChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSiteChoice() == nil {
		return nil, nil
	}
	switch m.GetSiteChoice().(type) {
	case *ReplaceSpecType_SiteAcl:

		drInfos, err := m.GetSiteAcl().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSiteAcl().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "site_acl." + dri.DRField
		}
		return drInfos, err

	case *ReplaceSpecType_ReAcl:

		drInfos, err := m.GetReAcl().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetReAcl().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "re_acl." + dri.DRField
		}
		return drInfos, err

	case *ReplaceSpecType_LegacyAcl:

		drInfos, err := m.GetLegacyAcl().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetLegacyAcl().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "legacy_acl." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) SiteChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for site_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["protocol_policer"]; exists {

		vOpts := append(opts, db.WithValidateField("protocol_policer"))
		if err := fv(ctx, m.GetProtocolPolicer(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["site_choice"]; exists {
		val := m.GetSiteChoice()
		vOpts := append(opts,
			db.WithValidateField("site_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSiteChoice().(type) {
	case *ReplaceSpecType_SiteAcl:
		if fv, exists := v.FldValidators["site_choice.site_acl"]; exists {
			val := m.GetSiteChoice().(*ReplaceSpecType_SiteAcl).SiteAcl
			vOpts := append(opts,
				db.WithValidateField("site_choice"),
				db.WithValidateField("site_acl"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_ReAcl:
		if fv, exists := v.FldValidators["site_choice.re_acl"]; exists {
			val := m.GetSiteChoice().(*ReplaceSpecType_ReAcl).ReAcl
			vOpts := append(opts,
				db.WithValidateField("site_choice"),
				db.WithValidateField("re_acl"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_LegacyAcl:
		if fv, exists := v.FldValidators["site_choice.legacy_acl"]; exists {
			val := m.GetSiteChoice().(*ReplaceSpecType_LegacyAcl).LegacyAcl
			vOpts := append(opts,
				db.WithValidateField("site_choice"),
				db.WithValidateField("legacy_acl"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhSiteChoice := v.SiteChoiceValidationRuleHandler
	rulesSiteChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSiteChoice(rulesSiteChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.site_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["site_choice"] = vFn

	v.FldValidators["site_choice.site_acl"] = SiteACLTypeValidator().Validate
	v.FldValidators["site_choice.re_acl"] = ReACLTypeValidator().Validate
	v.FldValidators["site_choice.legacy_acl"] = LegacyACLTypeValidator().Validate

	v.FldValidators["protocol_policer"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *SelectedTenantVIPsType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SelectedTenantVIPsType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SelectedTenantVIPsType) DeepCopy() *SelectedTenantVIPsType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SelectedTenantVIPsType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SelectedTenantVIPsType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SelectedTenantVIPsType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SelectedTenantVIPsTypeValidator().Validate(ctx, m, opts...)
}

func (m *SelectedTenantVIPsType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetPublicIpRefsDRefInfo()

}

func (m *SelectedTenantVIPsType) GetPublicIpRefsDRefInfo() ([]db.DRefInfo, error) {
	vrefs := m.GetPublicIpRefs()
	if len(vrefs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(vrefs))
	for i, vref := range vrefs {
		if vref == nil {
			return nil, fmt.Errorf("SelectedTenantVIPsType.public_ip_refs[%d] has a nil value", i)
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("public_ip.Object")
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "public_ip.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "public_ip_refs",
			Ref:        vdRef,
		})
	}
	return drInfos, nil

}

// GetPublicIpRefsDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *SelectedTenantVIPsType) GetPublicIpRefsDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "public_ip.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: public_ip")
	}
	for i, vref := range m.GetPublicIpRefs() {
		if vref == nil {
			return nil, fmt.Errorf("SelectedTenantVIPsType.public_ip_refs[%d] has a nil value", i)
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "public_ip.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateSelectedTenantVIPsType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSelectedTenantVIPsType) PublicIpRefsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for public_ip_refs")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for public_ip_refs")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated public_ip_refs")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items public_ip_refs")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateSelectedTenantVIPsType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SelectedTenantVIPsType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SelectedTenantVIPsType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["default_tenant_vip"]; exists {

		vOpts := append(opts, db.WithValidateField("default_tenant_vip"))
		if err := fv(ctx, m.GetDefaultTenantVip(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["public_ip_refs"]; exists {
		vOpts := append(opts, db.WithValidateField("public_ip_refs"))
		if err := fv(ctx, m.GetPublicIpRefs(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSelectedTenantVIPsTypeValidator = func() *ValidateSelectedTenantVIPsType {
	v := &ValidateSelectedTenantVIPsType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhPublicIpRefs := v.PublicIpRefsValidationRuleHandler
	rulesPublicIpRefs := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "128",
		"ves.io.schema.rules.repeated.min_items": "1",
	}
	vFn, err = vrhPublicIpRefs(rulesPublicIpRefs)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SelectedTenantVIPsType.public_ip_refs: %s", err)
		panic(errMsg)
	}
	v.FldValidators["public_ip_refs"] = vFn

	return v
}()

func SelectedTenantVIPsTypeValidator() db.Validator {
	return DefaultSelectedTenantVIPsTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *SelectedVIPAddressType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SelectedVIPAddressType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SelectedVIPAddressType) DeepCopy() *SelectedVIPAddressType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SelectedVIPAddressType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SelectedVIPAddressType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SelectedVIPAddressType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SelectedVIPAddressTypeValidator().Validate(ctx, m, opts...)
}

type ValidateSelectedVIPAddressType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSelectedVIPAddressType) AddressValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for address")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.IpAddressType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.IpAddressTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for address")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.IpAddressType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.IpAddressType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated address")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items address")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateSelectedVIPAddressType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SelectedVIPAddressType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SelectedVIPAddressType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["address"]; exists {
		vOpts := append(opts, db.WithValidateField("address"))
		if err := fv(ctx, m.GetAddress(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSelectedVIPAddressTypeValidator = func() *ValidateSelectedVIPAddressType {
	v := &ValidateSelectedVIPAddressType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAddress := v.AddressValidationRuleHandler
	rulesAddress := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "128",
	}
	vFn, err = vrhAddress(rulesAddress)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SelectedVIPAddressType.address: %s", err)
		panic(errMsg)
	}
	v.FldValidators["address"] = vFn

	return v
}()

func SelectedVIPAddressTypeValidator() db.Validator {
	return DefaultSelectedVIPAddressTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *SiteACLType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SiteACLType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SiteACLType) DeepCopy() *SiteACLType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SiteACLType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SiteACLType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SiteACLType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SiteACLTypeValidator().Validate(ctx, m, opts...)
}

func (m *SiteACLType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetFastAclRulesDRefInfo()

}

// GetDRefInfo for the field's type
func (m *SiteACLType) GetFastAclRulesDRefInfo() ([]db.DRefInfo, error) {
	if m.GetFastAclRules() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetFastAclRules() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetFastAclRules() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("fast_acl_rules[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

type ValidateSiteACLType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSiteACLType) NetworkChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for network_choice")
	}
	return validatorFn, nil
}

func (v *ValidateSiteACLType) VipChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for vip_choice")
	}
	return validatorFn, nil
}

func (v *ValidateSiteACLType) FastAclRulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for fast_acl_rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*FastACLRuleType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := FastACLRuleTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for fast_acl_rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*FastACLRuleType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*FastACLRuleType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated fast_acl_rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items fast_acl_rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateSiteACLType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SiteACLType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SiteACLType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["fast_acl_rules"]; exists {
		vOpts := append(opts, db.WithValidateField("fast_acl_rules"))
		if err := fv(ctx, m.GetFastAclRules(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["network_choice"]; exists {
		val := m.GetNetworkChoice()
		vOpts := append(opts,
			db.WithValidateField("network_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetNetworkChoice().(type) {
	case *SiteACLType_OutsideNetwork:
		if fv, exists := v.FldValidators["network_choice.outside_network"]; exists {
			val := m.GetNetworkChoice().(*SiteACLType_OutsideNetwork).OutsideNetwork
			vOpts := append(opts,
				db.WithValidateField("network_choice"),
				db.WithValidateField("outside_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *SiteACLType_InsideNetwork:
		if fv, exists := v.FldValidators["network_choice.inside_network"]; exists {
			val := m.GetNetworkChoice().(*SiteACLType_InsideNetwork).InsideNetwork
			vOpts := append(opts,
				db.WithValidateField("network_choice"),
				db.WithValidateField("inside_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["vip_choice"]; exists {
		val := m.GetVipChoice()
		vOpts := append(opts,
			db.WithValidateField("vip_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetVipChoice().(type) {
	case *SiteACLType_InterfaceServices:
		if fv, exists := v.FldValidators["vip_choice.interface_services"]; exists {
			val := m.GetVipChoice().(*SiteACLType_InterfaceServices).InterfaceServices
			vOpts := append(opts,
				db.WithValidateField("vip_choice"),
				db.WithValidateField("interface_services"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *SiteACLType_VipServices:
		if fv, exists := v.FldValidators["vip_choice.vip_services"]; exists {
			val := m.GetVipChoice().(*SiteACLType_VipServices).VipServices
			vOpts := append(opts,
				db.WithValidateField("vip_choice"),
				db.WithValidateField("vip_services"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *SiteACLType_AllServices:
		if fv, exists := v.FldValidators["vip_choice.all_services"]; exists {
			val := m.GetVipChoice().(*SiteACLType_AllServices).AllServices
			vOpts := append(opts,
				db.WithValidateField("vip_choice"),
				db.WithValidateField("all_services"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSiteACLTypeValidator = func() *ValidateSiteACLType {
	v := &ValidateSiteACLType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhNetworkChoice := v.NetworkChoiceValidationRuleHandler
	rulesNetworkChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhNetworkChoice(rulesNetworkChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SiteACLType.network_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["network_choice"] = vFn

	vrhVipChoice := v.VipChoiceValidationRuleHandler
	rulesVipChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhVipChoice(rulesVipChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SiteACLType.vip_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["vip_choice"] = vFn

	vrhFastAclRules := v.FastAclRulesValidationRuleHandler
	rulesFastAclRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "128",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhFastAclRules(rulesFastAclRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SiteACLType.fast_acl_rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["fast_acl_rules"] = vFn

	return v
}()

func SiteACLTypeValidator() db.Validator {
	return DefaultSiteACLTypeValidator
}

func (m *CreateSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.ProtocolPolicer = f.GetProtocolPolicer()

}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *CreateSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *CreateSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.ProtocolPolicer = m1.ProtocolPolicer

}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *CreateSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.ProtocolPolicer = f.GetProtocolPolicer()

}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.ProtocolPolicer = m1.ProtocolPolicer

}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.ProtocolPolicer = f.GetProtocolPolicer()

}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.ProtocolPolicer = m1.ProtocolPolicer

}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

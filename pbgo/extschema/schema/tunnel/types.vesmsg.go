// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package tunnel

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *CreateSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetParams().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CreateSpecType.params")
	}

	return nil
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *CreateSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetLocalIpDRefInfo()

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetLocalIpDRefInfo() ([]db.DRefInfo, error) {
	if m.GetLocalIp() == nil {
		return nil, nil
	}

	drInfos, err := m.GetLocalIp().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetLocalIp().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "local_ip." + dri.DRField
	}
	return drInfos, err

}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) TunnelTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(TunnelType)
		return int32(i)
	}
	// TunnelType_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, TunnelType_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for tunnel_type")
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) LocalIpValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for local_ip")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) RemoteIpValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for remote_ip")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["local_ip"]; exists {

		vOpts := append(opts, db.WithValidateField("local_ip"))
		if err := fv(ctx, m.GetLocalIp(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["params"]; exists {

		vOpts := append(opts, db.WithValidateField("params"))
		if err := fv(ctx, m.GetParams(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["remote_ip"]; exists {

		vOpts := append(opts, db.WithValidateField("remote_ip"))
		if err := fv(ctx, m.GetRemoteIp(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tunnel_type"]; exists {

		vOpts := append(opts, db.WithValidateField("tunnel_type"))
		if err := fv(ctx, m.GetTunnelType(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhTunnelType := v.TunnelTypeValidationRuleHandler
	rulesTunnelType := map[string]string{
		"ves.io.schema.rules.enum.in":          "[0,2]",
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhTunnelType(rulesTunnelType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.tunnel_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["tunnel_type"] = vFn

	vrhLocalIp := v.LocalIpValidationRuleHandler
	rulesLocalIp := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhLocalIp(rulesLocalIp)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.local_ip: %s", err)
		panic(errMsg)
	}
	v.FldValidators["local_ip"] = vFn

	vrhRemoteIp := v.RemoteIpValidationRuleHandler
	rulesRemoteIp := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhRemoteIp(rulesRemoteIp)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.remote_ip: %s", err)
		panic(errMsg)
	}
	v.FldValidators["remote_ip"] = vFn

	v.FldValidators["params"] = TunnelParamsValidator().Validate

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GetSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetParams().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GetSpecType.params")
	}

	return nil
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GetSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetLocalIpDRefInfo()

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetLocalIpDRefInfo() ([]db.DRefInfo, error) {
	if m.GetLocalIp() == nil {
		return nil, nil
	}

	drInfos, err := m.GetLocalIp().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetLocalIp().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "local_ip." + dri.DRField
	}
	return drInfos, err

}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) TunnelTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(TunnelType)
		return int32(i)
	}
	// TunnelType_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, TunnelType_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for tunnel_type")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) LocalIpValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for local_ip")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) RemoteIpValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for remote_ip")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["local_ip"]; exists {

		vOpts := append(opts, db.WithValidateField("local_ip"))
		if err := fv(ctx, m.GetLocalIp(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["params"]; exists {

		vOpts := append(opts, db.WithValidateField("params"))
		if err := fv(ctx, m.GetParams(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["remote_ip"]; exists {

		vOpts := append(opts, db.WithValidateField("remote_ip"))
		if err := fv(ctx, m.GetRemoteIp(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tunnel_type"]; exists {

		vOpts := append(opts, db.WithValidateField("tunnel_type"))
		if err := fv(ctx, m.GetTunnelType(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhTunnelType := v.TunnelTypeValidationRuleHandler
	rulesTunnelType := map[string]string{
		"ves.io.schema.rules.enum.in":          "[0,2]",
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhTunnelType(rulesTunnelType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.tunnel_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["tunnel_type"] = vFn

	vrhLocalIp := v.LocalIpValidationRuleHandler
	rulesLocalIp := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhLocalIp(rulesLocalIp)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.local_ip: %s", err)
		panic(errMsg)
	}
	v.FldValidators["local_ip"] = vFn

	vrhRemoteIp := v.RemoteIpValidationRuleHandler
	rulesRemoteIp := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhRemoteIp(rulesRemoteIp)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.remote_ip: %s", err)
		panic(errMsg)
	}
	v.FldValidators["remote_ip"] = vFn

	v.FldValidators["params"] = TunnelParamsValidator().Validate

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GlobalSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetParams().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GlobalSpecType.params")
	}

	return nil
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GlobalSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetLocalIpDRefInfo()

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetLocalIpDRefInfo() ([]db.DRefInfo, error) {
	if m.GetLocalIp() == nil {
		return nil, nil
	}

	drInfos, err := m.GetLocalIp().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetLocalIp().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "local_ip." + dri.DRField
	}
	return drInfos, err

}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) TunnelAttributeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for tunnel_attribute")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) TunnelTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(TunnelType)
		return int32(i)
	}
	// TunnelType_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, TunnelType_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for tunnel_type")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) LocalIpValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for local_ip")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) RemoteIpValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for remote_ip")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["deployment_vpn_tunnel_type"]; exists {

		vOpts := append(opts, db.WithValidateField("deployment_vpn_tunnel_type"))
		if err := fv(ctx, m.GetDeploymentVpnTunnelType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["local_ip"]; exists {

		vOpts := append(opts, db.WithValidateField("local_ip"))
		if err := fv(ctx, m.GetLocalIp(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["params"]; exists {

		vOpts := append(opts, db.WithValidateField("params"))
		if err := fv(ctx, m.GetParams(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["remote_ip"]; exists {

		vOpts := append(opts, db.WithValidateField("remote_ip"))
		if err := fv(ctx, m.GetRemoteIp(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tunnel_attribute"]; exists {
		val := m.GetTunnelAttribute()
		vOpts := append(opts,
			db.WithValidateField("tunnel_attribute"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetTunnelAttribute().(type) {
	case *GlobalSpecType_DefaultTunnelAttribute:
		if fv, exists := v.FldValidators["tunnel_attribute.default_tunnel_attribute"]; exists {
			val := m.GetTunnelAttribute().(*GlobalSpecType_DefaultTunnelAttribute).DefaultTunnelAttribute
			vOpts := append(opts,
				db.WithValidateField("tunnel_attribute"),
				db.WithValidateField("default_tunnel_attribute"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_TunnelToAwsTgw:
		if fv, exists := v.FldValidators["tunnel_attribute.tunnel_to_aws_tgw"]; exists {
			val := m.GetTunnelAttribute().(*GlobalSpecType_TunnelToAwsTgw).TunnelToAwsTgw
			vOpts := append(opts,
				db.WithValidateField("tunnel_attribute"),
				db.WithValidateField("tunnel_to_aws_tgw"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["tunnel_type"]; exists {

		vOpts := append(opts, db.WithValidateField("tunnel_type"))
		if err := fv(ctx, m.GetTunnelType(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhTunnelAttribute := v.TunnelAttributeValidationRuleHandler
	rulesTunnelAttribute := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhTunnelAttribute(rulesTunnelAttribute)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.tunnel_attribute: %s", err)
		panic(errMsg)
	}
	v.FldValidators["tunnel_attribute"] = vFn

	vrhTunnelType := v.TunnelTypeValidationRuleHandler
	rulesTunnelType := map[string]string{
		"ves.io.schema.rules.enum.in":          "[0,2]",
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhTunnelType(rulesTunnelType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.tunnel_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["tunnel_type"] = vFn

	vrhLocalIp := v.LocalIpValidationRuleHandler
	rulesLocalIp := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhLocalIp(rulesLocalIp)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.local_ip: %s", err)
		panic(errMsg)
	}
	v.FldValidators["local_ip"] = vFn

	vrhRemoteIp := v.RemoteIpValidationRuleHandler
	rulesRemoteIp := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhRemoteIp(rulesRemoteIp)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.remote_ip: %s", err)
		panic(errMsg)
	}
	v.FldValidators["remote_ip"] = vFn

	v.FldValidators["params"] = TunnelParamsValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *InterfaceType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *InterfaceType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *InterfaceType) DeepCopy() *InterfaceType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &InterfaceType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *InterfaceType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *InterfaceType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return InterfaceTypeValidator().Validate(ctx, m, opts...)
}

func (m *InterfaceType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetLocalIntfDRefInfo()

}

func (m *InterfaceType) GetLocalIntfDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetLocalIntf()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("InterfaceType.local_intf[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "network_interface.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "local_intf",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetLocalIntfDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *InterfaceType) GetLocalIntfDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "network_interface.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: network_interface")
	}
	for _, ref := range m.GetLocalIntf() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateInterfaceType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateInterfaceType) LocalIntfValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for local_intf")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for local_intf")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated local_intf")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items local_intf")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateInterfaceType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*InterfaceType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *InterfaceType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["local_intf"]; exists {
		vOpts := append(opts, db.WithValidateField("local_intf"))
		if err := fv(ctx, m.GetLocalIntf(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultInterfaceTypeValidator = func() *ValidateInterfaceType {
	v := &ValidateInterfaceType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhLocalIntf := v.LocalIntfValidationRuleHandler
	rulesLocalIntf := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1",
	}
	vFn, err = vrhLocalIntf(rulesLocalIntf)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for InterfaceType.local_intf: %s", err)
		panic(errMsg)
	}
	v.FldValidators["local_intf"] = vFn

	return v
}()

func InterfaceTypeValidator() db.Validator {
	return DefaultInterfaceTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *IpsecTunnelParams) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *IpsecTunnelParams) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *IpsecTunnelParams) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetIpsecPsk().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting IpsecTunnelParams.ipsec_psk")
	}

	return nil
}

func (m *IpsecTunnelParams) DeepCopy() *IpsecTunnelParams {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &IpsecTunnelParams{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *IpsecTunnelParams) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *IpsecTunnelParams) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return IpsecTunnelParamsValidator().Validate(ctx, m, opts...)
}

type ValidateIpsecTunnelParams struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateIpsecTunnelParams) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*IpsecTunnelParams)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *IpsecTunnelParams got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["ipsec_psk"]; exists {

		vOpts := append(opts, db.WithValidateField("ipsec_psk"))
		if err := fv(ctx, m.GetIpsecPsk(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultIpsecTunnelParamsValidator = func() *ValidateIpsecTunnelParams {
	v := &ValidateIpsecTunnelParams{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["ipsec_psk"] = ves_io_schema.SecretTypeValidator().Validate

	return v
}()

func IpsecTunnelParamsValidator() db.Validator {
	return DefaultIpsecTunnelParamsValidator
}

// augmented methods on protoc/std generated struct

func (m *LocalIpAddressSelector) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *LocalIpAddressSelector) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *LocalIpAddressSelector) DeepCopy() *LocalIpAddressSelector {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &LocalIpAddressSelector{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *LocalIpAddressSelector) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *LocalIpAddressSelector) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return LocalIpAddressSelectorValidator().Validate(ctx, m, opts...)
}

func (m *LocalIpAddressSelector) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetTypeDRefInfo()

}

// GetDRefInfo for the field's type
func (m *LocalIpAddressSelector) GetTypeDRefInfo() ([]db.DRefInfo, error) {
	if m.GetType() == nil {
		return nil, nil
	}
	switch m.GetType().(type) {
	case *LocalIpAddressSelector_Intf:

		drInfos, err := m.GetIntf().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetIntf().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "intf." + dri.DRField
		}
		return drInfos, err

	case *LocalIpAddressSelector_IpAddress:

		return nil, nil

	default:
		return nil, nil
	}

}

type ValidateLocalIpAddressSelector struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateLocalIpAddressSelector) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*LocalIpAddressSelector)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *LocalIpAddressSelector got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	switch m.GetType().(type) {
	case *LocalIpAddressSelector_Intf:
		if fv, exists := v.FldValidators["type.intf"]; exists {
			val := m.GetType().(*LocalIpAddressSelector_Intf).Intf
			vOpts := append(opts,
				db.WithValidateField("type"),
				db.WithValidateField("intf"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *LocalIpAddressSelector_IpAddress:
		if fv, exists := v.FldValidators["type.ip_address"]; exists {
			val := m.GetType().(*LocalIpAddressSelector_IpAddress).IpAddress
			vOpts := append(opts,
				db.WithValidateField("type"),
				db.WithValidateField("ip_address"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultLocalIpAddressSelectorValidator = func() *ValidateLocalIpAddressSelector {
	v := &ValidateLocalIpAddressSelector{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["type.intf"] = InterfaceTypeValidator().Validate
	v.FldValidators["type.ip_address"] = LocalIpAddressTypeValidator().Validate

	return v
}()

func LocalIpAddressSelectorValidator() db.Validator {
	return DefaultLocalIpAddressSelectorValidator
}

// augmented methods on protoc/std generated struct

func (m *LocalIpAddressType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *LocalIpAddressType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *LocalIpAddressType) DeepCopy() *LocalIpAddressType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &LocalIpAddressType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *LocalIpAddressType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *LocalIpAddressType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return LocalIpAddressTypeValidator().Validate(ctx, m, opts...)
}

type ValidateLocalIpAddressType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateLocalIpAddressType) TypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for type")
	}
	return validatorFn, nil
}

func (v *ValidateLocalIpAddressType) VirtualNetworkTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for virtual_network_type")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateLocalIpAddressType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*LocalIpAddressType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *LocalIpAddressType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["type"]; exists {
		val := m.GetType()
		vOpts := append(opts,
			db.WithValidateField("type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetType().(type) {
	case *LocalIpAddressType_IpAddress:
		if fv, exists := v.FldValidators["type.ip_address"]; exists {
			val := m.GetType().(*LocalIpAddressType_IpAddress).IpAddress
			vOpts := append(opts,
				db.WithValidateField("type"),
				db.WithValidateField("ip_address"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *LocalIpAddressType_Auto:
		if fv, exists := v.FldValidators["type.auto"]; exists {
			val := m.GetType().(*LocalIpAddressType_Auto).Auto
			vOpts := append(opts,
				db.WithValidateField("type"),
				db.WithValidateField("auto"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["virtual_network_type"]; exists {

		vOpts := append(opts, db.WithValidateField("virtual_network_type"))
		if err := fv(ctx, m.GetVirtualNetworkType(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultLocalIpAddressTypeValidator = func() *ValidateLocalIpAddressType {
	v := &ValidateLocalIpAddressType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhType := v.TypeValidationRuleHandler
	rulesType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhType(rulesType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for LocalIpAddressType.type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["type"] = vFn

	vrhVirtualNetworkType := v.VirtualNetworkTypeValidationRuleHandler
	rulesVirtualNetworkType := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhVirtualNetworkType(rulesVirtualNetworkType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for LocalIpAddressType.virtual_network_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["virtual_network_type"] = vFn

	v.FldValidators["type.ip_address"] = ves_io_schema.IpAddressTypeValidator().Validate

	return v
}()

func LocalIpAddressTypeValidator() db.Validator {
	return DefaultLocalIpAddressTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *RemoteEndpointType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *RemoteEndpointType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *RemoteEndpointType) DeepCopy() *RemoteEndpointType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &RemoteEndpointType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *RemoteEndpointType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *RemoteEndpointType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return RemoteEndpointTypeValidator().Validate(ctx, m, opts...)
}

type ValidateRemoteEndpointType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateRemoteEndpointType) EndpointsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemKeyRules := db.GetMapStringKeyRules(rules)
	itemKeyFn, err := db.NewStringValidationRuleHandler(itemKeyRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item key ValidationRuleHandler for endpoints")
	}
	itemsValidatorFn := func(ctx context.Context, kv map[string]*RemoteNodeAttributes, opts ...db.ValidateOpt) error {
		for key, value := range kv {
			if err := itemKeyFn(ctx, key, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element with key %v", key))
			}
			if err := RemoteNodeAttributesValidator().Validate(ctx, value, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("value for element with key %v", key))
			}
		}
		return nil
	}
	mapValFn, err := db.NewMapValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Map ValidationRuleHandler for endpoints")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.(map[string]*RemoteNodeAttributes)
		if !ok {
			return fmt.Errorf("Map validation expected map[ string ]*RemoteNodeAttributes, got %T", val)
		}
		if err := mapValFn(ctx, len(elems), opts...); err != nil {
			return errors.Wrap(err, "map endpoints")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items endpoints")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateRemoteEndpointType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*RemoteEndpointType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *RemoteEndpointType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["endpoints"]; exists {
		vOpts := append(opts, db.WithValidateField("endpoints"))
		if err := fv(ctx, m.GetEndpoints(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultRemoteEndpointTypeValidator = func() *ValidateRemoteEndpointType {
	v := &ValidateRemoteEndpointType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhEndpoints := v.EndpointsValidationRuleHandler
	rulesEndpoints := map[string]string{
		"ves.io.schema.rules.map.keys.string.max_len": "256",
		"ves.io.schema.rules.map.keys.string.min_len": "1",
		"ves.io.schema.rules.map.max_pairs":           "128",
	}
	vFn, err = vrhEndpoints(rulesEndpoints)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RemoteEndpointType.endpoints: %s", err)
		panic(errMsg)
	}
	v.FldValidators["endpoints"] = vFn

	return v
}()

func RemoteEndpointTypeValidator() db.Validator {
	return DefaultRemoteEndpointTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *RemoteIpAddressSelector) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *RemoteIpAddressSelector) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *RemoteIpAddressSelector) DeepCopy() *RemoteIpAddressSelector {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &RemoteIpAddressSelector{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *RemoteIpAddressSelector) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *RemoteIpAddressSelector) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return RemoteIpAddressSelectorValidator().Validate(ctx, m, opts...)
}

type ValidateRemoteIpAddressSelector struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateRemoteIpAddressSelector) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*RemoteIpAddressSelector)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *RemoteIpAddressSelector got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	switch m.GetType().(type) {
	case *RemoteIpAddressSelector_Ip:
		if fv, exists := v.FldValidators["type.ip"]; exists {
			val := m.GetType().(*RemoteIpAddressSelector_Ip).Ip
			vOpts := append(opts,
				db.WithValidateField("type"),
				db.WithValidateField("ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RemoteIpAddressSelector_Endpoints:
		if fv, exists := v.FldValidators["type.endpoints"]; exists {
			val := m.GetType().(*RemoteIpAddressSelector_Endpoints).Endpoints
			vOpts := append(opts,
				db.WithValidateField("type"),
				db.WithValidateField("endpoints"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultRemoteIpAddressSelectorValidator = func() *ValidateRemoteIpAddressSelector {
	v := &ValidateRemoteIpAddressSelector{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["type.ip"] = ves_io_schema.IpAddressTypeValidator().Validate
	v.FldValidators["type.endpoints"] = RemoteEndpointTypeValidator().Validate

	return v
}()

func RemoteIpAddressSelectorValidator() db.Validator {
	return DefaultRemoteIpAddressSelectorValidator
}

// augmented methods on protoc/std generated struct

func (m *RemoteNodeAttributes) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *RemoteNodeAttributes) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *RemoteNodeAttributes) DeepCopy() *RemoteNodeAttributes {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &RemoteNodeAttributes{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *RemoteNodeAttributes) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *RemoteNodeAttributes) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return RemoteNodeAttributesValidator().Validate(ctx, m, opts...)
}

type ValidateRemoteNodeAttributes struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateRemoteNodeAttributes) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*RemoteNodeAttributes)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *RemoteNodeAttributes got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["ip"]; exists {

		vOpts := append(opts, db.WithValidateField("ip"))
		if err := fv(ctx, m.GetIp(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultRemoteNodeAttributesValidator = func() *ValidateRemoteNodeAttributes {
	v := &ValidateRemoteNodeAttributes{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["ip"] = ves_io_schema.IpAddressTypeValidator().Validate

	return v
}()

func RemoteNodeAttributesValidator() db.Validator {
	return DefaultRemoteNodeAttributesValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *ReplaceSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetParams().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ReplaceSpecType.params")
	}

	return nil
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *ReplaceSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetLocalIpDRefInfo()

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetLocalIpDRefInfo() ([]db.DRefInfo, error) {
	if m.GetLocalIp() == nil {
		return nil, nil
	}

	drInfos, err := m.GetLocalIp().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetLocalIp().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "local_ip." + dri.DRField
	}
	return drInfos, err

}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) TunnelTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(TunnelType)
		return int32(i)
	}
	// TunnelType_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, TunnelType_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for tunnel_type")
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) LocalIpValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for local_ip")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) RemoteIpValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for remote_ip")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["local_ip"]; exists {

		vOpts := append(opts, db.WithValidateField("local_ip"))
		if err := fv(ctx, m.GetLocalIp(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["params"]; exists {

		vOpts := append(opts, db.WithValidateField("params"))
		if err := fv(ctx, m.GetParams(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["remote_ip"]; exists {

		vOpts := append(opts, db.WithValidateField("remote_ip"))
		if err := fv(ctx, m.GetRemoteIp(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tunnel_type"]; exists {

		vOpts := append(opts, db.WithValidateField("tunnel_type"))
		if err := fv(ctx, m.GetTunnelType(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhTunnelType := v.TunnelTypeValidationRuleHandler
	rulesTunnelType := map[string]string{
		"ves.io.schema.rules.enum.in":          "[0,2]",
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhTunnelType(rulesTunnelType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.tunnel_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["tunnel_type"] = vFn

	vrhLocalIp := v.LocalIpValidationRuleHandler
	rulesLocalIp := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhLocalIp(rulesLocalIp)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.local_ip: %s", err)
		panic(errMsg)
	}
	v.FldValidators["local_ip"] = vFn

	vrhRemoteIp := v.RemoteIpValidationRuleHandler
	rulesRemoteIp := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhRemoteIp(rulesRemoteIp)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.remote_ip: %s", err)
		panic(errMsg)
	}
	v.FldValidators["remote_ip"] = vFn

	v.FldValidators["params"] = TunnelParamsValidator().Validate

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *TunnelParams) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *TunnelParams) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *TunnelParams) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetIpsec().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting TunnelParams.ipsec")
	}

	return nil
}

func (m *TunnelParams) DeepCopy() *TunnelParams {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &TunnelParams{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *TunnelParams) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *TunnelParams) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return TunnelParamsValidator().Validate(ctx, m, opts...)
}

type ValidateTunnelParams struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateTunnelParams) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*TunnelParams)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *TunnelParams got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	switch m.GetType().(type) {
	case *TunnelParams_Ipsec:
		if fv, exists := v.FldValidators["type.ipsec"]; exists {
			val := m.GetType().(*TunnelParams_Ipsec).Ipsec
			vOpts := append(opts,
				db.WithValidateField("type"),
				db.WithValidateField("ipsec"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultTunnelParamsValidator = func() *ValidateTunnelParams {
	v := &ValidateTunnelParams{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["type.ipsec"] = IpsecTunnelParamsValidator().Validate

	return v
}()

func TunnelParamsValidator() db.Validator {
	return DefaultTunnelParamsValidator
}

func (m *CreateSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.LocalIp = f.GetLocalIp()
	m.Params = f.GetParams()
	m.RemoteIp = f.GetRemoteIp()
	m.TunnelType = f.GetTunnelType()
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *CreateSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *CreateSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.LocalIp = m1.LocalIp
	f.Params = m1.Params
	f.RemoteIp = m1.RemoteIp
	f.TunnelType = m1.TunnelType
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *CreateSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.LocalIp = f.GetLocalIp()
	m.Params = f.GetParams()
	m.RemoteIp = f.GetRemoteIp()
	m.TunnelType = f.GetTunnelType()
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.LocalIp = m1.LocalIp
	f.Params = m1.Params
	f.RemoteIp = m1.RemoteIp
	f.TunnelType = m1.TunnelType
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.LocalIp = f.GetLocalIp()
	m.Params = f.GetParams()
	m.RemoteIp = f.GetRemoteIp()
	m.TunnelType = f.GetTunnelType()
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.LocalIp = m1.LocalIp
	f.Params = m1.Params
	f.RemoteIp = m1.RemoteIp
	f.TunnelType = m1.TunnelType
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

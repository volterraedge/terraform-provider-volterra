// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package apm

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_nfv_service "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/nfv_service"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *APMBigIpAWSReplaceType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *APMBigIpAWSReplaceType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *APMBigIpAWSReplaceType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	return nil
}

func (m *APMBigIpAWSReplaceType) DeepCopy() *APMBigIpAWSReplaceType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &APMBigIpAWSReplaceType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *APMBigIpAWSReplaceType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *APMBigIpAWSReplaceType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return APMBigIpAWSReplaceTypeValidator().Validate(ctx, m, opts...)
}

type ValidateAPMBigIpAWSReplaceType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAPMBigIpAWSReplaceType) TagsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemKeyRules := db.GetMapStringKeyRules(rules)
	itemKeyFn, err := db.NewStringValidationRuleHandler(itemKeyRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item key ValidationRuleHandler for tags")
	}
	itemValRules := db.GetMapStringValueRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemValRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item value ValidationRuleHandler for tags")
	}
	itemsValidatorFn := func(ctx context.Context, kv map[string]string, opts ...db.ValidateOpt) error {
		for key, value := range kv {
			if err := itemKeyFn(ctx, key, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element with key %v", key))
			}
			if err := itemValFn(ctx, value, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("value for element with key %v", key))
			}
		}
		return nil
	}
	mapValFn, err := db.NewMapValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Map ValidationRuleHandler for tags")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.(map[string]string)
		if !ok {
			return fmt.Errorf("Map validation expected map[ string ]string, got %T", val)
		}
		if err := mapValFn(ctx, len(elems), opts...); err != nil {
			return errors.Wrap(err, "map tags")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items tags")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAPMBigIpAWSReplaceType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*APMBigIpAWSReplaceType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *APMBigIpAWSReplaceType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["endpoint_service"]; exists {

		vOpts := append(opts, db.WithValidateField("endpoint_service"))
		if err := fv(ctx, m.GetEndpointService(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tags"]; exists {
		vOpts := append(opts, db.WithValidateField("tags"))
		if err := fv(ctx, m.GetTags(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAPMBigIpAWSReplaceTypeValidator = func() *ValidateAPMBigIpAWSReplaceType {
	v := &ValidateAPMBigIpAWSReplaceType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhTags := v.TagsValidationRuleHandler
	rulesTags := map[string]string{
		"ves.io.schema.rules.map.keys.string.max_len":   "127",
		"ves.io.schema.rules.map.max_pairs":             "5",
		"ves.io.schema.rules.map.values.string.max_len": "255",
	}
	vFn, err = vrhTags(rulesTags)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for APMBigIpAWSReplaceType.tags: %s", err)
		panic(errMsg)
	}
	v.FldValidators["tags"] = vFn

	v.FldValidators["endpoint_service"] = EndpointServiceReplaceTypeValidator().Validate

	return v
}()

func APMBigIpAWSReplaceTypeValidator() db.Validator {
	return DefaultAPMBigIpAWSReplaceTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *APMBigIpAWSType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *APMBigIpAWSType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *APMBigIpAWSType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetAdminPassword().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting APMBigIpAWSType.admin_password")
	}

	return nil
}

func (m *APMBigIpAWSType) DeepCopy() *APMBigIpAWSType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &APMBigIpAWSType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *APMBigIpAWSType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *APMBigIpAWSType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return APMBigIpAWSTypeValidator().Validate(ctx, m, opts...)
}

func (m *APMBigIpAWSType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetAwsTgwSiteDRefInfo()

}

// GetDRefInfo for the field's type
func (m *APMBigIpAWSType) GetAwsTgwSiteDRefInfo() ([]db.DRefInfo, error) {
	if m.GetAwsTgwSite() == nil {
		return nil, nil
	}

	drInfos, err := m.GetAwsTgwSite().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetAwsTgwSite().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "aws_tgw_site." + dri.DRField
	}
	return drInfos, err

}

type ValidateAPMBigIpAWSType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAPMBigIpAWSType) AwsTgwSiteValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for aws_tgw_site")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema_nfv_service.F5BigIpAWSTGWSiteTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAPMBigIpAWSType) AdminPasswordValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for admin_password")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.SecretTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAPMBigIpAWSType) AdminUsernameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for admin_username")
	}

	return validatorFn, nil
}

func (v *ValidateAPMBigIpAWSType) SshKeyValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ssh_key")
	}

	return validatorFn, nil
}

func (v *ValidateAPMBigIpAWSType) NodesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for nodes")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_nfv_service.ServiceNodesAWSType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_nfv_service.ServiceNodesAWSTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for nodes")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_nfv_service.ServiceNodesAWSType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_nfv_service.ServiceNodesAWSType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated nodes")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items nodes")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAPMBigIpAWSType) TagsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemKeyRules := db.GetMapStringKeyRules(rules)
	itemKeyFn, err := db.NewStringValidationRuleHandler(itemKeyRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item key ValidationRuleHandler for tags")
	}
	itemValRules := db.GetMapStringValueRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemValRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item value ValidationRuleHandler for tags")
	}
	itemsValidatorFn := func(ctx context.Context, kv map[string]string, opts ...db.ValidateOpt) error {
		for key, value := range kv {
			if err := itemKeyFn(ctx, key, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element with key %v", key))
			}
			if err := itemValFn(ctx, value, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("value for element with key %v", key))
			}
		}
		return nil
	}
	mapValFn, err := db.NewMapValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Map ValidationRuleHandler for tags")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.(map[string]string)
		if !ok {
			return fmt.Errorf("Map validation expected map[ string ]string, got %T", val)
		}
		if err := mapValFn(ctx, len(elems), opts...); err != nil {
			return errors.Wrap(err, "map tags")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items tags")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAPMBigIpAWSType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*APMBigIpAWSType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *APMBigIpAWSType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["admin_password"]; exists {

		vOpts := append(opts, db.WithValidateField("admin_password"))
		if err := fv(ctx, m.GetAdminPassword(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["admin_username"]; exists {

		vOpts := append(opts, db.WithValidateField("admin_username"))
		if err := fv(ctx, m.GetAdminUsername(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["aws_tgw_site"]; exists {

		vOpts := append(opts, db.WithValidateField("aws_tgw_site"))
		if err := fv(ctx, m.GetAwsTgwSite(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["endpoint_service"]; exists {

		vOpts := append(opts, db.WithValidateField("endpoint_service"))
		if err := fv(ctx, m.GetEndpointService(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["nodes"]; exists {
		vOpts := append(opts, db.WithValidateField("nodes"))
		if err := fv(ctx, m.GetNodes(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["ssh_key"]; exists {

		vOpts := append(opts, db.WithValidateField("ssh_key"))
		if err := fv(ctx, m.GetSshKey(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tags"]; exists {
		vOpts := append(opts, db.WithValidateField("tags"))
		if err := fv(ctx, m.GetTags(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAPMBigIpAWSTypeValidator = func() *ValidateAPMBigIpAWSType {
	v := &ValidateAPMBigIpAWSType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAwsTgwSite := v.AwsTgwSiteValidationRuleHandler
	rulesAwsTgwSite := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhAwsTgwSite(rulesAwsTgwSite)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for APMBigIpAWSType.aws_tgw_site: %s", err)
		panic(errMsg)
	}
	v.FldValidators["aws_tgw_site"] = vFn

	vrhAdminPassword := v.AdminPasswordValidationRuleHandler
	rulesAdminPassword := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhAdminPassword(rulesAdminPassword)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for APMBigIpAWSType.admin_password: %s", err)
		panic(errMsg)
	}
	v.FldValidators["admin_password"] = vFn

	vrhAdminUsername := v.AdminUsernameValidationRuleHandler
	rulesAdminUsername := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "256",
	}
	vFn, err = vrhAdminUsername(rulesAdminUsername)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for APMBigIpAWSType.admin_username: %s", err)
		panic(errMsg)
	}
	v.FldValidators["admin_username"] = vFn

	vrhSshKey := v.SshKeyValidationRuleHandler
	rulesSshKey := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "8192",
		"ves.io.schema.rules.string.min_len":   "1",
	}
	vFn, err = vrhSshKey(rulesSshKey)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for APMBigIpAWSType.ssh_key: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ssh_key"] = vFn

	vrhNodes := v.NodesValidationRuleHandler
	rulesNodes := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "2",
		"ves.io.schema.rules.repeated.min_items": "1",
	}
	vFn, err = vrhNodes(rulesNodes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for APMBigIpAWSType.nodes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["nodes"] = vFn

	vrhTags := v.TagsValidationRuleHandler
	rulesTags := map[string]string{
		"ves.io.schema.rules.map.keys.string.max_len":   "127",
		"ves.io.schema.rules.map.max_pairs":             "5",
		"ves.io.schema.rules.map.values.string.max_len": "255",
	}
	vFn, err = vrhTags(rulesTags)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for APMBigIpAWSType.tags: %s", err)
		panic(errMsg)
	}
	v.FldValidators["tags"] = vFn

	v.FldValidators["endpoint_service"] = EndpointServiceTypeValidator().Validate

	return v
}()

func APMBigIpAWSTypeValidator() db.Validator {
	return DefaultAPMBigIpAWSTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *AWSMarketPlaceImageTypeAPMaaS) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AWSMarketPlaceImageTypeAPMaaS) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AWSMarketPlaceImageTypeAPMaaS) DeepCopy() *AWSMarketPlaceImageTypeAPMaaS {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AWSMarketPlaceImageTypeAPMaaS{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AWSMarketPlaceImageTypeAPMaaS) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AWSMarketPlaceImageTypeAPMaaS) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AWSMarketPlaceImageTypeAPMaaSValidator().Validate(ctx, m, opts...)
}

type ValidateAWSMarketPlaceImageTypeAPMaaS struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAWSMarketPlaceImageTypeAPMaaS) AmiChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ami_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAWSMarketPlaceImageTypeAPMaaS) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AWSMarketPlaceImageTypeAPMaaS)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AWSMarketPlaceImageTypeAPMaaS got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["ami_choice"]; exists {
		val := m.GetAmiChoice()
		vOpts := append(opts,
			db.WithValidateField("ami_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetAmiChoice().(type) {
	case *AWSMarketPlaceImageTypeAPMaaS_BestPlusPayG200Mbps:
		if fv, exists := v.FldValidators["ami_choice.BestPlusPayG200Mbps"]; exists {
			val := m.GetAmiChoice().(*AWSMarketPlaceImageTypeAPMaaS_BestPlusPayG200Mbps).BestPlusPayG200Mbps
			vOpts := append(opts,
				db.WithValidateField("ami_choice"),
				db.WithValidateField("BestPlusPayG200Mbps"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AWSMarketPlaceImageTypeAPMaaS_BestPlusPayg_1Gbps:
		if fv, exists := v.FldValidators["ami_choice.best_plus_payg_1gbps"]; exists {
			val := m.GetAmiChoice().(*AWSMarketPlaceImageTypeAPMaaS_BestPlusPayg_1Gbps).BestPlusPayg_1Gbps
			vOpts := append(opts,
				db.WithValidateField("ami_choice"),
				db.WithValidateField("best_plus_payg_1gbps"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAWSMarketPlaceImageTypeAPMaaSValidator = func() *ValidateAWSMarketPlaceImageTypeAPMaaS {
	v := &ValidateAWSMarketPlaceImageTypeAPMaaS{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAmiChoice := v.AmiChoiceValidationRuleHandler
	rulesAmiChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhAmiChoice(rulesAmiChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSMarketPlaceImageTypeAPMaaS.ami_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ami_choice"] = vFn

	return v
}()

func AWSMarketPlaceImageTypeAPMaaSValidator() db.Validator {
	return DefaultAWSMarketPlaceImageTypeAPMaaSValidator
}

// augmented methods on protoc/std generated struct

func (m *AWSSiteTypeChoice) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AWSSiteTypeChoice) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *AWSSiteTypeChoice) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetApmAwsSite().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting AWSSiteTypeChoice.apm_aws_site")
	}

	return nil
}

func (m *AWSSiteTypeChoice) DeepCopy() *AWSSiteTypeChoice {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AWSSiteTypeChoice{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AWSSiteTypeChoice) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AWSSiteTypeChoice) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AWSSiteTypeChoiceValidator().Validate(ctx, m, opts...)
}

func (m *AWSSiteTypeChoice) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetApmAwsSiteDRefInfo()

}

// GetDRefInfo for the field's type
func (m *AWSSiteTypeChoice) GetApmAwsSiteDRefInfo() ([]db.DRefInfo, error) {
	if m.GetApmAwsSite() == nil {
		return nil, nil
	}

	drInfos, err := m.GetApmAwsSite().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetApmAwsSite().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "apm_aws_site." + dri.DRField
	}
	return drInfos, err

}

type ValidateAWSSiteTypeChoice struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAWSSiteTypeChoice) LicenseTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for license_type")
	}
	return validatorFn, nil
}

func (v *ValidateAWSSiteTypeChoice) ApmAwsSiteValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for apm_aws_site")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := APMBigIpAWSTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAWSSiteTypeChoice) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AWSSiteTypeChoice)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AWSSiteTypeChoice got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["apm_aws_site"]; exists {

		vOpts := append(opts, db.WithValidateField("apm_aws_site"))
		if err := fv(ctx, m.GetApmAwsSite(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["license_type"]; exists {
		val := m.GetLicenseType()
		vOpts := append(opts,
			db.WithValidateField("license_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetLicenseType().(type) {
	case *AWSSiteTypeChoice_MarketPlaceImage:
		if fv, exists := v.FldValidators["license_type.market_place_image"]; exists {
			val := m.GetLicenseType().(*AWSSiteTypeChoice_MarketPlaceImage).MarketPlaceImage
			vOpts := append(opts,
				db.WithValidateField("license_type"),
				db.WithValidateField("market_place_image"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAWSSiteTypeChoiceValidator = func() *ValidateAWSSiteTypeChoice {
	v := &ValidateAWSSiteTypeChoice{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhLicenseType := v.LicenseTypeValidationRuleHandler
	rulesLicenseType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhLicenseType(rulesLicenseType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSSiteTypeChoice.license_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["license_type"] = vFn

	vrhApmAwsSite := v.ApmAwsSiteValidationRuleHandler
	rulesApmAwsSite := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhApmAwsSite(rulesApmAwsSite)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSSiteTypeChoice.apm_aws_site: %s", err)
		panic(errMsg)
	}
	v.FldValidators["apm_aws_site"] = vFn

	v.FldValidators["license_type.market_place_image"] = AWSMarketPlaceImageTypeAPMaaSValidator().Validate

	return v
}()

func AWSSiteTypeChoiceValidator() db.Validator {
	return DefaultAWSSiteTypeChoiceValidator
}

// augmented methods on protoc/std generated struct

func (m *AWSSiteTypeChoiceReplaceType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AWSSiteTypeChoiceReplaceType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *AWSSiteTypeChoiceReplaceType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetApmAwsSite().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting AWSSiteTypeChoiceReplaceType.apm_aws_site")
	}

	return nil
}

func (m *AWSSiteTypeChoiceReplaceType) DeepCopy() *AWSSiteTypeChoiceReplaceType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AWSSiteTypeChoiceReplaceType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AWSSiteTypeChoiceReplaceType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AWSSiteTypeChoiceReplaceType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AWSSiteTypeChoiceReplaceTypeValidator().Validate(ctx, m, opts...)
}

type ValidateAWSSiteTypeChoiceReplaceType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAWSSiteTypeChoiceReplaceType) ApmAwsSiteValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for apm_aws_site")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := APMBigIpAWSReplaceTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAWSSiteTypeChoiceReplaceType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AWSSiteTypeChoiceReplaceType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AWSSiteTypeChoiceReplaceType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["apm_aws_site"]; exists {

		vOpts := append(opts, db.WithValidateField("apm_aws_site"))
		if err := fv(ctx, m.GetApmAwsSite(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAWSSiteTypeChoiceReplaceTypeValidator = func() *ValidateAWSSiteTypeChoiceReplaceType {
	v := &ValidateAWSSiteTypeChoiceReplaceType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhApmAwsSite := v.ApmAwsSiteValidationRuleHandler
	rulesApmAwsSite := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhApmAwsSite(rulesApmAwsSite)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSSiteTypeChoiceReplaceType.apm_aws_site: %s", err)
		panic(errMsg)
	}
	v.FldValidators["apm_aws_site"] = vFn

	return v
}()

func AWSSiteTypeChoiceReplaceTypeValidator() db.Validator {
	return DefaultAWSSiteTypeChoiceReplaceTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *CreateSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetAwsSiteTypeChoice().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CreateSpecType.aws_site_type_choice")
	}

	if err := m.GetBaremetalSiteTypeChoice().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CreateSpecType.baremetal_site_type_choice")
	}

	if err := m.GetHttpsManagement().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CreateSpecType.https_management")
	}

	return nil
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *CreateSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetHttpManagementChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetHttpManagementChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSiteTypeChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetSiteTypeChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetHttpManagementChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetHttpManagementChoice() == nil {
		return nil, nil
	}
	switch m.GetHttpManagementChoice().(type) {
	case *CreateSpecType_HttpsManagement:

		drInfos, err := m.GetHttpsManagement().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetHttpsManagement().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "https_management." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetSiteTypeChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSiteTypeChoice() == nil {
		return nil, nil
	}
	switch m.GetSiteTypeChoice().(type) {
	case *CreateSpecType_AwsSiteTypeChoice:

		drInfos, err := m.GetAwsSiteTypeChoice().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetAwsSiteTypeChoice().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "aws_site_type_choice." + dri.DRField
		}
		return drInfos, err

	case *CreateSpecType_BaremetalSiteTypeChoice:

		drInfos, err := m.GetBaremetalSiteTypeChoice().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetBaremetalSiteTypeChoice().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "baremetal_site_type_choice." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) HttpManagementChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for http_management_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) SiteTypeChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for site_type_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["http_management_choice"]; exists {
		val := m.GetHttpManagementChoice()
		vOpts := append(opts,
			db.WithValidateField("http_management_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetHttpManagementChoice().(type) {
	case *CreateSpecType_HttpsManagement:
		if fv, exists := v.FldValidators["http_management_choice.https_management"]; exists {
			val := m.GetHttpManagementChoice().(*CreateSpecType_HttpsManagement).HttpsManagement
			vOpts := append(opts,
				db.WithValidateField("http_management_choice"),
				db.WithValidateField("https_management"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["site_type_choice"]; exists {
		val := m.GetSiteTypeChoice()
		vOpts := append(opts,
			db.WithValidateField("site_type_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSiteTypeChoice().(type) {
	case *CreateSpecType_AwsSiteTypeChoice:
		if fv, exists := v.FldValidators["site_type_choice.aws_site_type_choice"]; exists {
			val := m.GetSiteTypeChoice().(*CreateSpecType_AwsSiteTypeChoice).AwsSiteTypeChoice
			vOpts := append(opts,
				db.WithValidateField("site_type_choice"),
				db.WithValidateField("aws_site_type_choice"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_BaremetalSiteTypeChoice:
		if fv, exists := v.FldValidators["site_type_choice.baremetal_site_type_choice"]; exists {
			val := m.GetSiteTypeChoice().(*CreateSpecType_BaremetalSiteTypeChoice).BaremetalSiteTypeChoice
			vOpts := append(opts,
				db.WithValidateField("site_type_choice"),
				db.WithValidateField("baremetal_site_type_choice"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhHttpManagementChoice := v.HttpManagementChoiceValidationRuleHandler
	rulesHttpManagementChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhHttpManagementChoice(rulesHttpManagementChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.http_management_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["http_management_choice"] = vFn

	vrhSiteTypeChoice := v.SiteTypeChoiceValidationRuleHandler
	rulesSiteTypeChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSiteTypeChoice(rulesSiteTypeChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.site_type_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["site_type_choice"] = vFn

	v.FldValidators["http_management_choice.https_management"] = ves_io_schema_nfv_service.ServiceHttpsManagementTypeValidator().Validate

	v.FldValidators["site_type_choice.aws_site_type_choice"] = AWSSiteTypeChoiceValidator().Validate
	v.FldValidators["site_type_choice.baremetal_site_type_choice"] = F5BigIpAppStackBareMetalTypeChoiceValidator().Validate

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *EndpointServiceReplaceType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *EndpointServiceReplaceType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *EndpointServiceReplaceType) DeepCopy() *EndpointServiceReplaceType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &EndpointServiceReplaceType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *EndpointServiceReplaceType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *EndpointServiceReplaceType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return EndpointServiceReplaceTypeValidator().Validate(ctx, m, opts...)
}

type ValidateEndpointServiceReplaceType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateEndpointServiceReplaceType) ExternalVipChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for external_vip_choice")
	}
	return validatorFn, nil
}

func (v *ValidateEndpointServiceReplaceType) TcpPortChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for tcp_port_choice")
	}
	return validatorFn, nil
}

func (v *ValidateEndpointServiceReplaceType) UdpPortChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for udp_port_choice")
	}
	return validatorFn, nil
}

func (v *ValidateEndpointServiceReplaceType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*EndpointServiceReplaceType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *EndpointServiceReplaceType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["external_vip_choice"]; exists {
		val := m.GetExternalVipChoice()
		vOpts := append(opts,
			db.WithValidateField("external_vip_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetExternalVipChoice().(type) {
	case *EndpointServiceReplaceType_DisableAdvertiseOnSloIp:
		if fv, exists := v.FldValidators["external_vip_choice.disable_advertise_on_slo_ip"]; exists {
			val := m.GetExternalVipChoice().(*EndpointServiceReplaceType_DisableAdvertiseOnSloIp).DisableAdvertiseOnSloIp
			vOpts := append(opts,
				db.WithValidateField("external_vip_choice"),
				db.WithValidateField("disable_advertise_on_slo_ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *EndpointServiceReplaceType_AdvertiseOnSloIp:
		if fv, exists := v.FldValidators["external_vip_choice.advertise_on_slo_ip"]; exists {
			val := m.GetExternalVipChoice().(*EndpointServiceReplaceType_AdvertiseOnSloIp).AdvertiseOnSloIp
			vOpts := append(opts,
				db.WithValidateField("external_vip_choice"),
				db.WithValidateField("advertise_on_slo_ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *EndpointServiceReplaceType_AdvertiseOnSloIpExternal:
		if fv, exists := v.FldValidators["external_vip_choice.advertise_on_slo_ip_external"]; exists {
			val := m.GetExternalVipChoice().(*EndpointServiceReplaceType_AdvertiseOnSloIpExternal).AdvertiseOnSloIpExternal
			vOpts := append(opts,
				db.WithValidateField("external_vip_choice"),
				db.WithValidateField("advertise_on_slo_ip_external"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["tcp_port_choice"]; exists {
		val := m.GetTcpPortChoice()
		vOpts := append(opts,
			db.WithValidateField("tcp_port_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetTcpPortChoice().(type) {
	case *EndpointServiceReplaceType_DefaultTcpPorts:
		if fv, exists := v.FldValidators["tcp_port_choice.default_tcp_ports"]; exists {
			val := m.GetTcpPortChoice().(*EndpointServiceReplaceType_DefaultTcpPorts).DefaultTcpPorts
			vOpts := append(opts,
				db.WithValidateField("tcp_port_choice"),
				db.WithValidateField("default_tcp_ports"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *EndpointServiceReplaceType_HttpPort:
		if fv, exists := v.FldValidators["tcp_port_choice.http_port"]; exists {
			val := m.GetTcpPortChoice().(*EndpointServiceReplaceType_HttpPort).HttpPort
			vOpts := append(opts,
				db.WithValidateField("tcp_port_choice"),
				db.WithValidateField("http_port"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *EndpointServiceReplaceType_HttpsPort:
		if fv, exists := v.FldValidators["tcp_port_choice.https_port"]; exists {
			val := m.GetTcpPortChoice().(*EndpointServiceReplaceType_HttpsPort).HttpsPort
			vOpts := append(opts,
				db.WithValidateField("tcp_port_choice"),
				db.WithValidateField("https_port"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *EndpointServiceReplaceType_CustomTcpPorts:
		if fv, exists := v.FldValidators["tcp_port_choice.custom_tcp_ports"]; exists {
			val := m.GetTcpPortChoice().(*EndpointServiceReplaceType_CustomTcpPorts).CustomTcpPorts
			vOpts := append(opts,
				db.WithValidateField("tcp_port_choice"),
				db.WithValidateField("custom_tcp_ports"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *EndpointServiceReplaceType_NoTcpPorts:
		if fv, exists := v.FldValidators["tcp_port_choice.no_tcp_ports"]; exists {
			val := m.GetTcpPortChoice().(*EndpointServiceReplaceType_NoTcpPorts).NoTcpPorts
			vOpts := append(opts,
				db.WithValidateField("tcp_port_choice"),
				db.WithValidateField("no_tcp_ports"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["udp_port_choice"]; exists {
		val := m.GetUdpPortChoice()
		vOpts := append(opts,
			db.WithValidateField("udp_port_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetUdpPortChoice().(type) {
	case *EndpointServiceReplaceType_NoUdpPorts:
		if fv, exists := v.FldValidators["udp_port_choice.no_udp_ports"]; exists {
			val := m.GetUdpPortChoice().(*EndpointServiceReplaceType_NoUdpPorts).NoUdpPorts
			vOpts := append(opts,
				db.WithValidateField("udp_port_choice"),
				db.WithValidateField("no_udp_ports"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *EndpointServiceReplaceType_CustomUdpPorts:
		if fv, exists := v.FldValidators["udp_port_choice.custom_udp_ports"]; exists {
			val := m.GetUdpPortChoice().(*EndpointServiceReplaceType_CustomUdpPorts).CustomUdpPorts
			vOpts := append(opts,
				db.WithValidateField("udp_port_choice"),
				db.WithValidateField("custom_udp_ports"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultEndpointServiceReplaceTypeValidator = func() *ValidateEndpointServiceReplaceType {
	v := &ValidateEndpointServiceReplaceType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhExternalVipChoice := v.ExternalVipChoiceValidationRuleHandler
	rulesExternalVipChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhExternalVipChoice(rulesExternalVipChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for EndpointServiceReplaceType.external_vip_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["external_vip_choice"] = vFn

	vrhTcpPortChoice := v.TcpPortChoiceValidationRuleHandler
	rulesTcpPortChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhTcpPortChoice(rulesTcpPortChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for EndpointServiceReplaceType.tcp_port_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["tcp_port_choice"] = vFn

	vrhUdpPortChoice := v.UdpPortChoiceValidationRuleHandler
	rulesUdpPortChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhUdpPortChoice(rulesUdpPortChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for EndpointServiceReplaceType.udp_port_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["udp_port_choice"] = vFn

	v.FldValidators["tcp_port_choice.custom_tcp_ports"] = ves_io_schema.PortRangesTypeValidator().Validate

	v.FldValidators["udp_port_choice.custom_udp_ports"] = ves_io_schema.PortRangesTypeValidator().Validate

	return v
}()

func EndpointServiceReplaceTypeValidator() db.Validator {
	return DefaultEndpointServiceReplaceTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *EndpointServiceType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *EndpointServiceType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *EndpointServiceType) DeepCopy() *EndpointServiceType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &EndpointServiceType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *EndpointServiceType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *EndpointServiceType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return EndpointServiceTypeValidator().Validate(ctx, m, opts...)
}

type ValidateEndpointServiceType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateEndpointServiceType) ExternalVipChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for external_vip_choice")
	}
	return validatorFn, nil
}

func (v *ValidateEndpointServiceType) InsideVipChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for inside_vip_choice")
	}
	return validatorFn, nil
}

func (v *ValidateEndpointServiceType) InsideVipChoiceConfiguredVipValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_ConfiguredVip, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for configured_vip")
	}
	return oValidatorFn_ConfiguredVip, nil
}

func (v *ValidateEndpointServiceType) TcpPortChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for tcp_port_choice")
	}
	return validatorFn, nil
}

func (v *ValidateEndpointServiceType) UdpPortChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for udp_port_choice")
	}
	return validatorFn, nil
}

func (v *ValidateEndpointServiceType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*EndpointServiceType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *EndpointServiceType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["external_vip_choice"]; exists {
		val := m.GetExternalVipChoice()
		vOpts := append(opts,
			db.WithValidateField("external_vip_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetExternalVipChoice().(type) {
	case *EndpointServiceType_DisableAdvertiseOnSloIp:
		if fv, exists := v.FldValidators["external_vip_choice.disable_advertise_on_slo_ip"]; exists {
			val := m.GetExternalVipChoice().(*EndpointServiceType_DisableAdvertiseOnSloIp).DisableAdvertiseOnSloIp
			vOpts := append(opts,
				db.WithValidateField("external_vip_choice"),
				db.WithValidateField("disable_advertise_on_slo_ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *EndpointServiceType_AdvertiseOnSloIp:
		if fv, exists := v.FldValidators["external_vip_choice.advertise_on_slo_ip"]; exists {
			val := m.GetExternalVipChoice().(*EndpointServiceType_AdvertiseOnSloIp).AdvertiseOnSloIp
			vOpts := append(opts,
				db.WithValidateField("external_vip_choice"),
				db.WithValidateField("advertise_on_slo_ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *EndpointServiceType_AdvertiseOnSloIpExternal:
		if fv, exists := v.FldValidators["external_vip_choice.advertise_on_slo_ip_external"]; exists {
			val := m.GetExternalVipChoice().(*EndpointServiceType_AdvertiseOnSloIpExternal).AdvertiseOnSloIpExternal
			vOpts := append(opts,
				db.WithValidateField("external_vip_choice"),
				db.WithValidateField("advertise_on_slo_ip_external"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["inside_vip_choice"]; exists {
		val := m.GetInsideVipChoice()
		vOpts := append(opts,
			db.WithValidateField("inside_vip_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetInsideVipChoice().(type) {
	case *EndpointServiceType_AutomaticVip:
		if fv, exists := v.FldValidators["inside_vip_choice.automatic_vip"]; exists {
			val := m.GetInsideVipChoice().(*EndpointServiceType_AutomaticVip).AutomaticVip
			vOpts := append(opts,
				db.WithValidateField("inside_vip_choice"),
				db.WithValidateField("automatic_vip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *EndpointServiceType_ConfiguredVip:
		if fv, exists := v.FldValidators["inside_vip_choice.configured_vip"]; exists {
			val := m.GetInsideVipChoice().(*EndpointServiceType_ConfiguredVip).ConfiguredVip
			vOpts := append(opts,
				db.WithValidateField("inside_vip_choice"),
				db.WithValidateField("configured_vip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["tcp_port_choice"]; exists {
		val := m.GetTcpPortChoice()
		vOpts := append(opts,
			db.WithValidateField("tcp_port_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetTcpPortChoice().(type) {
	case *EndpointServiceType_DefaultTcpPorts:
		if fv, exists := v.FldValidators["tcp_port_choice.default_tcp_ports"]; exists {
			val := m.GetTcpPortChoice().(*EndpointServiceType_DefaultTcpPorts).DefaultTcpPorts
			vOpts := append(opts,
				db.WithValidateField("tcp_port_choice"),
				db.WithValidateField("default_tcp_ports"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *EndpointServiceType_HttpPort:
		if fv, exists := v.FldValidators["tcp_port_choice.http_port"]; exists {
			val := m.GetTcpPortChoice().(*EndpointServiceType_HttpPort).HttpPort
			vOpts := append(opts,
				db.WithValidateField("tcp_port_choice"),
				db.WithValidateField("http_port"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *EndpointServiceType_HttpsPort:
		if fv, exists := v.FldValidators["tcp_port_choice.https_port"]; exists {
			val := m.GetTcpPortChoice().(*EndpointServiceType_HttpsPort).HttpsPort
			vOpts := append(opts,
				db.WithValidateField("tcp_port_choice"),
				db.WithValidateField("https_port"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *EndpointServiceType_CustomTcpPorts:
		if fv, exists := v.FldValidators["tcp_port_choice.custom_tcp_ports"]; exists {
			val := m.GetTcpPortChoice().(*EndpointServiceType_CustomTcpPorts).CustomTcpPorts
			vOpts := append(opts,
				db.WithValidateField("tcp_port_choice"),
				db.WithValidateField("custom_tcp_ports"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *EndpointServiceType_NoTcpPorts:
		if fv, exists := v.FldValidators["tcp_port_choice.no_tcp_ports"]; exists {
			val := m.GetTcpPortChoice().(*EndpointServiceType_NoTcpPorts).NoTcpPorts
			vOpts := append(opts,
				db.WithValidateField("tcp_port_choice"),
				db.WithValidateField("no_tcp_ports"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["udp_port_choice"]; exists {
		val := m.GetUdpPortChoice()
		vOpts := append(opts,
			db.WithValidateField("udp_port_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetUdpPortChoice().(type) {
	case *EndpointServiceType_NoUdpPorts:
		if fv, exists := v.FldValidators["udp_port_choice.no_udp_ports"]; exists {
			val := m.GetUdpPortChoice().(*EndpointServiceType_NoUdpPorts).NoUdpPorts
			vOpts := append(opts,
				db.WithValidateField("udp_port_choice"),
				db.WithValidateField("no_udp_ports"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *EndpointServiceType_CustomUdpPorts:
		if fv, exists := v.FldValidators["udp_port_choice.custom_udp_ports"]; exists {
			val := m.GetUdpPortChoice().(*EndpointServiceType_CustomUdpPorts).CustomUdpPorts
			vOpts := append(opts,
				db.WithValidateField("udp_port_choice"),
				db.WithValidateField("custom_udp_ports"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultEndpointServiceTypeValidator = func() *ValidateEndpointServiceType {
	v := &ValidateEndpointServiceType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhExternalVipChoice := v.ExternalVipChoiceValidationRuleHandler
	rulesExternalVipChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhExternalVipChoice(rulesExternalVipChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for EndpointServiceType.external_vip_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["external_vip_choice"] = vFn

	vrhInsideVipChoice := v.InsideVipChoiceValidationRuleHandler
	rulesInsideVipChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhInsideVipChoice(rulesInsideVipChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for EndpointServiceType.inside_vip_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["inside_vip_choice"] = vFn

	vrhInsideVipChoiceConfiguredVip := v.InsideVipChoiceConfiguredVipValidationRuleHandler
	rulesInsideVipChoiceConfiguredVip := map[string]string{
		"ves.io.schema.rules.string.ip":     "true",
		"ves.io.schema.rules.string.not_in": "0.0.0.0",
	}
	vFnMap["inside_vip_choice.configured_vip"], err = vrhInsideVipChoiceConfiguredVip(rulesInsideVipChoiceConfiguredVip)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field EndpointServiceType.inside_vip_choice_configured_vip: %s", err)
		panic(errMsg)
	}

	v.FldValidators["inside_vip_choice.configured_vip"] = vFnMap["inside_vip_choice.configured_vip"]

	vrhTcpPortChoice := v.TcpPortChoiceValidationRuleHandler
	rulesTcpPortChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhTcpPortChoice(rulesTcpPortChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for EndpointServiceType.tcp_port_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["tcp_port_choice"] = vFn

	vrhUdpPortChoice := v.UdpPortChoiceValidationRuleHandler
	rulesUdpPortChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhUdpPortChoice(rulesUdpPortChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for EndpointServiceType.udp_port_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["udp_port_choice"] = vFn

	v.FldValidators["tcp_port_choice.custom_tcp_ports"] = ves_io_schema.PortRangesTypeValidator().Validate

	v.FldValidators["udp_port_choice.custom_udp_ports"] = ves_io_schema.PortRangesTypeValidator().Validate

	return v
}()

func EndpointServiceTypeValidator() db.Validator {
	return DefaultEndpointServiceTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *F5BigIpAppStackBareMetalChoiceReplaceType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *F5BigIpAppStackBareMetalChoiceReplaceType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *F5BigIpAppStackBareMetalChoiceReplaceType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	return nil
}

func (m *F5BigIpAppStackBareMetalChoiceReplaceType) DeepCopy() *F5BigIpAppStackBareMetalChoiceReplaceType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &F5BigIpAppStackBareMetalChoiceReplaceType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *F5BigIpAppStackBareMetalChoiceReplaceType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *F5BigIpAppStackBareMetalChoiceReplaceType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return F5BigIpAppStackBareMetalChoiceReplaceTypeValidator().Validate(ctx, m, opts...)
}

type ValidateF5BigIpAppStackBareMetalChoiceReplaceType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateF5BigIpAppStackBareMetalChoiceReplaceType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*F5BigIpAppStackBareMetalChoiceReplaceType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *F5BigIpAppStackBareMetalChoiceReplaceType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultF5BigIpAppStackBareMetalChoiceReplaceTypeValidator = func() *ValidateF5BigIpAppStackBareMetalChoiceReplaceType {
	v := &ValidateF5BigIpAppStackBareMetalChoiceReplaceType{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func F5BigIpAppStackBareMetalChoiceReplaceTypeValidator() db.Validator {
	return DefaultF5BigIpAppStackBareMetalChoiceReplaceTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *F5BigIpAppStackBareMetalTypeChoice) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *F5BigIpAppStackBareMetalTypeChoice) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *F5BigIpAppStackBareMetalTypeChoice) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetF5BareMetalSite().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting F5BigIpAppStackBareMetalTypeChoice.f5_bare_metal_site")
	}

	return nil
}

func (m *F5BigIpAppStackBareMetalTypeChoice) DeepCopy() *F5BigIpAppStackBareMetalTypeChoice {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &F5BigIpAppStackBareMetalTypeChoice{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *F5BigIpAppStackBareMetalTypeChoice) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *F5BigIpAppStackBareMetalTypeChoice) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return F5BigIpAppStackBareMetalTypeChoiceValidator().Validate(ctx, m, opts...)
}

func (m *F5BigIpAppStackBareMetalTypeChoice) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetF5BareMetalSiteDRefInfo()

}

// GetDRefInfo for the field's type
func (m *F5BigIpAppStackBareMetalTypeChoice) GetF5BareMetalSiteDRefInfo() ([]db.DRefInfo, error) {
	if m.GetF5BareMetalSite() == nil {
		return nil, nil
	}

	drInfos, err := m.GetF5BareMetalSite().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetF5BareMetalSite().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "f5_bare_metal_site." + dri.DRField
	}
	return drInfos, err

}

type ValidateF5BigIpAppStackBareMetalTypeChoice struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateF5BigIpAppStackBareMetalTypeChoice) F5BareMetalSiteValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for f5_bare_metal_site")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema_nfv_service.F5BigIpAppStackBareMetalTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateF5BigIpAppStackBareMetalTypeChoice) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*F5BigIpAppStackBareMetalTypeChoice)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *F5BigIpAppStackBareMetalTypeChoice got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["f5_bare_metal_site"]; exists {

		vOpts := append(opts, db.WithValidateField("f5_bare_metal_site"))
		if err := fv(ctx, m.GetF5BareMetalSite(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultF5BigIpAppStackBareMetalTypeChoiceValidator = func() *ValidateF5BigIpAppStackBareMetalTypeChoice {
	v := &ValidateF5BigIpAppStackBareMetalTypeChoice{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhF5BareMetalSite := v.F5BareMetalSiteValidationRuleHandler
	rulesF5BareMetalSite := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhF5BareMetalSite(rulesF5BareMetalSite)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for F5BigIpAppStackBareMetalTypeChoice.f5_bare_metal_site: %s", err)
		panic(errMsg)
	}
	v.FldValidators["f5_bare_metal_site"] = vFn

	return v
}()

func F5BigIpAppStackBareMetalTypeChoiceValidator() db.Validator {
	return DefaultF5BigIpAppStackBareMetalTypeChoiceValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GetSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetAwsSiteTypeChoice().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GetSpecType.aws_site_type_choice")
	}

	if err := m.GetBaremetalSiteTypeChoice().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GetSpecType.baremetal_site_type_choice")
	}

	if err := m.GetHttpsManagement().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GetSpecType.https_management")
	}

	return nil
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GetSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetHttpManagementChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetHttpManagementChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSiteTypeChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetSiteTypeChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetHttpManagementChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetHttpManagementChoice() == nil {
		return nil, nil
	}
	switch m.GetHttpManagementChoice().(type) {
	case *GetSpecType_HttpsManagement:

		drInfos, err := m.GetHttpsManagement().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetHttpsManagement().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "https_management." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetSiteTypeChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSiteTypeChoice() == nil {
		return nil, nil
	}
	switch m.GetSiteTypeChoice().(type) {
	case *GetSpecType_AwsSiteTypeChoice:

		drInfos, err := m.GetAwsSiteTypeChoice().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetAwsSiteTypeChoice().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "aws_site_type_choice." + dri.DRField
		}
		return drInfos, err

	case *GetSpecType_BaremetalSiteTypeChoice:

		drInfos, err := m.GetBaremetalSiteTypeChoice().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetBaremetalSiteTypeChoice().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "baremetal_site_type_choice." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) HttpManagementChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for http_management_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) SiteTypeChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for site_type_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["http_management_choice"]; exists {
		val := m.GetHttpManagementChoice()
		vOpts := append(opts,
			db.WithValidateField("http_management_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetHttpManagementChoice().(type) {
	case *GetSpecType_HttpsManagement:
		if fv, exists := v.FldValidators["http_management_choice.https_management"]; exists {
			val := m.GetHttpManagementChoice().(*GetSpecType_HttpsManagement).HttpsManagement
			vOpts := append(opts,
				db.WithValidateField("http_management_choice"),
				db.WithValidateField("https_management"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["site_type_choice"]; exists {
		val := m.GetSiteTypeChoice()
		vOpts := append(opts,
			db.WithValidateField("site_type_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSiteTypeChoice().(type) {
	case *GetSpecType_AwsSiteTypeChoice:
		if fv, exists := v.FldValidators["site_type_choice.aws_site_type_choice"]; exists {
			val := m.GetSiteTypeChoice().(*GetSpecType_AwsSiteTypeChoice).AwsSiteTypeChoice
			vOpts := append(opts,
				db.WithValidateField("site_type_choice"),
				db.WithValidateField("aws_site_type_choice"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_BaremetalSiteTypeChoice:
		if fv, exists := v.FldValidators["site_type_choice.baremetal_site_type_choice"]; exists {
			val := m.GetSiteTypeChoice().(*GetSpecType_BaremetalSiteTypeChoice).BaremetalSiteTypeChoice
			vOpts := append(opts,
				db.WithValidateField("site_type_choice"),
				db.WithValidateField("baremetal_site_type_choice"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhHttpManagementChoice := v.HttpManagementChoiceValidationRuleHandler
	rulesHttpManagementChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhHttpManagementChoice(rulesHttpManagementChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.http_management_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["http_management_choice"] = vFn

	vrhSiteTypeChoice := v.SiteTypeChoiceValidationRuleHandler
	rulesSiteTypeChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSiteTypeChoice(rulesSiteTypeChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.site_type_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["site_type_choice"] = vFn

	v.FldValidators["http_management_choice.https_management"] = ves_io_schema_nfv_service.ServiceHttpsManagementTypeValidator().Validate

	v.FldValidators["site_type_choice.aws_site_type_choice"] = AWSSiteTypeChoiceValidator().Validate
	v.FldValidators["site_type_choice.baremetal_site_type_choice"] = F5BigIpAppStackBareMetalTypeChoiceValidator().Validate

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GlobalSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetAwsSiteTypeChoice().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GlobalSpecType.aws_site_type_choice")
	}

	if err := m.GetBaremetalSiteTypeChoice().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GlobalSpecType.baremetal_site_type_choice")
	}

	if err := m.GetHttpsManagement().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GlobalSpecType.https_management")
	}

	return nil
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GlobalSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetHttpManagementChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetHttpManagementChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetNfvServiceRefDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetNfvServiceRefDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSiteTypeChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetSiteTypeChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetViewInternalDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetViewInternalDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetHttpManagementChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetHttpManagementChoice() == nil {
		return nil, nil
	}
	switch m.GetHttpManagementChoice().(type) {
	case *GlobalSpecType_HttpsManagement:

		drInfos, err := m.GetHttpsManagement().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetHttpsManagement().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "https_management." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

func (m *GlobalSpecType) GetNfvServiceRefDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetNfvServiceRef()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("GlobalSpecType.nfv_service_ref[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "nfv_service.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "nfv_service_ref",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetNfvServiceRefDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetNfvServiceRefDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "nfv_service.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: nfv_service")
	}
	for _, ref := range m.GetNfvServiceRef() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetSiteTypeChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSiteTypeChoice() == nil {
		return nil, nil
	}
	switch m.GetSiteTypeChoice().(type) {
	case *GlobalSpecType_AwsSiteTypeChoice:

		drInfos, err := m.GetAwsSiteTypeChoice().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetAwsSiteTypeChoice().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "aws_site_type_choice." + dri.DRField
		}
		return drInfos, err

	case *GlobalSpecType_BaremetalSiteTypeChoice:

		drInfos, err := m.GetBaremetalSiteTypeChoice().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetBaremetalSiteTypeChoice().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "baremetal_site_type_choice." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

func (m *GlobalSpecType) GetViewInternalDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetViewInternal()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("view_internal.Object")
	dri := db.DRefInfo{
		RefdType:   "view_internal.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "view_internal",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetViewInternalDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetViewInternalDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "view_internal.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: view_internal")
	}

	vref := m.GetViewInternal()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "view_internal.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) HttpManagementChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for http_management_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) SiteTypeChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for site_type_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["http_management_choice"]; exists {
		val := m.GetHttpManagementChoice()
		vOpts := append(opts,
			db.WithValidateField("http_management_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetHttpManagementChoice().(type) {
	case *GlobalSpecType_HttpsManagement:
		if fv, exists := v.FldValidators["http_management_choice.https_management"]; exists {
			val := m.GetHttpManagementChoice().(*GlobalSpecType_HttpsManagement).HttpsManagement
			vOpts := append(opts,
				db.WithValidateField("http_management_choice"),
				db.WithValidateField("https_management"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["nfv_service_ref"]; exists {

		vOpts := append(opts, db.WithValidateField("nfv_service_ref"))
		for idx, item := range m.GetNfvServiceRef() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["site_type_choice"]; exists {
		val := m.GetSiteTypeChoice()
		vOpts := append(opts,
			db.WithValidateField("site_type_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSiteTypeChoice().(type) {
	case *GlobalSpecType_AwsSiteTypeChoice:
		if fv, exists := v.FldValidators["site_type_choice.aws_site_type_choice"]; exists {
			val := m.GetSiteTypeChoice().(*GlobalSpecType_AwsSiteTypeChoice).AwsSiteTypeChoice
			vOpts := append(opts,
				db.WithValidateField("site_type_choice"),
				db.WithValidateField("aws_site_type_choice"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_BaremetalSiteTypeChoice:
		if fv, exists := v.FldValidators["site_type_choice.baremetal_site_type_choice"]; exists {
			val := m.GetSiteTypeChoice().(*GlobalSpecType_BaremetalSiteTypeChoice).BaremetalSiteTypeChoice
			vOpts := append(opts,
				db.WithValidateField("site_type_choice"),
				db.WithValidateField("baremetal_site_type_choice"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["view_internal"]; exists {

		vOpts := append(opts, db.WithValidateField("view_internal"))
		if err := fv(ctx, m.GetViewInternal(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhHttpManagementChoice := v.HttpManagementChoiceValidationRuleHandler
	rulesHttpManagementChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhHttpManagementChoice(rulesHttpManagementChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.http_management_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["http_management_choice"] = vFn

	vrhSiteTypeChoice := v.SiteTypeChoiceValidationRuleHandler
	rulesSiteTypeChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSiteTypeChoice(rulesSiteTypeChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.site_type_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["site_type_choice"] = vFn

	v.FldValidators["http_management_choice.https_management"] = ves_io_schema_nfv_service.ServiceHttpsManagementTypeValidator().Validate

	v.FldValidators["site_type_choice.aws_site_type_choice"] = AWSSiteTypeChoiceValidator().Validate
	v.FldValidators["site_type_choice.baremetal_site_type_choice"] = F5BigIpAppStackBareMetalTypeChoiceValidator().Validate

	v.FldValidators["view_internal"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *ReplaceSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetAwsSiteTypeChoice().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ReplaceSpecType.aws_site_type_choice")
	}

	if err := m.GetBaremetalSiteTypeChoice().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ReplaceSpecType.baremetal_site_type_choice")
	}

	if err := m.GetHttpsManagement().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ReplaceSpecType.https_management")
	}

	return nil
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *ReplaceSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetHttpManagementChoiceDRefInfo()

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetHttpManagementChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetHttpManagementChoice() == nil {
		return nil, nil
	}
	switch m.GetHttpManagementChoice().(type) {
	case *ReplaceSpecType_HttpsManagement:

		drInfos, err := m.GetHttpsManagement().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetHttpsManagement().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "https_management." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) HttpManagementChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for http_management_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) SiteTypeChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for site_type_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["http_management_choice"]; exists {
		val := m.GetHttpManagementChoice()
		vOpts := append(opts,
			db.WithValidateField("http_management_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetHttpManagementChoice().(type) {
	case *ReplaceSpecType_HttpsManagement:
		if fv, exists := v.FldValidators["http_management_choice.https_management"]; exists {
			val := m.GetHttpManagementChoice().(*ReplaceSpecType_HttpsManagement).HttpsManagement
			vOpts := append(opts,
				db.WithValidateField("http_management_choice"),
				db.WithValidateField("https_management"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["site_type_choice"]; exists {
		val := m.GetSiteTypeChoice()
		vOpts := append(opts,
			db.WithValidateField("site_type_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSiteTypeChoice().(type) {
	case *ReplaceSpecType_AwsSiteTypeChoice:
		if fv, exists := v.FldValidators["site_type_choice.aws_site_type_choice"]; exists {
			val := m.GetSiteTypeChoice().(*ReplaceSpecType_AwsSiteTypeChoice).AwsSiteTypeChoice
			vOpts := append(opts,
				db.WithValidateField("site_type_choice"),
				db.WithValidateField("aws_site_type_choice"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_BaremetalSiteTypeChoice:
		if fv, exists := v.FldValidators["site_type_choice.baremetal_site_type_choice"]; exists {
			val := m.GetSiteTypeChoice().(*ReplaceSpecType_BaremetalSiteTypeChoice).BaremetalSiteTypeChoice
			vOpts := append(opts,
				db.WithValidateField("site_type_choice"),
				db.WithValidateField("baremetal_site_type_choice"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhHttpManagementChoice := v.HttpManagementChoiceValidationRuleHandler
	rulesHttpManagementChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhHttpManagementChoice(rulesHttpManagementChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.http_management_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["http_management_choice"] = vFn

	vrhSiteTypeChoice := v.SiteTypeChoiceValidationRuleHandler
	rulesSiteTypeChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSiteTypeChoice(rulesSiteTypeChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.site_type_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["site_type_choice"] = vFn

	v.FldValidators["http_management_choice.https_management"] = ves_io_schema_nfv_service.ServiceHttpsManagementTypeValidator().Validate

	v.FldValidators["site_type_choice.aws_site_type_choice"] = AWSSiteTypeChoiceReplaceTypeValidator().Validate

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

func (m *APMBigIpAWSReplaceType) fromAPMBigIpAWSType(f *APMBigIpAWSType, withDeepCopy bool) {
	if f == nil {
		return
	}

	if f.GetEndpointService() != nil {
		if m.EndpointService == nil {
			m.EndpointService = &EndpointServiceReplaceType{}
		}
		m.EndpointService.FromEndpointServiceTypeWithoutDeepCopy(f.GetEndpointService())
	} else {
		m.EndpointService = nil
	}

	m.Tags = f.GetTags()
}

func (m *APMBigIpAWSReplaceType) FromAPMBigIpAWSType(f *APMBigIpAWSType) {
	m.fromAPMBigIpAWSType(f, true)
}

func (m *APMBigIpAWSReplaceType) FromAPMBigIpAWSTypeWithoutDeepCopy(f *APMBigIpAWSType) {
	m.fromAPMBigIpAWSType(f, false)
}

func (m *APMBigIpAWSReplaceType) toAPMBigIpAWSType(f *APMBigIpAWSType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	if m1.EndpointService != nil {
		if f.EndpointService == nil {
			f.EndpointService = &EndpointServiceType{}
		}
	} else if f.EndpointService != nil {
		f.EndpointService = nil
	}

	if m1.EndpointService != nil {
		m1.EndpointService.ToEndpointServiceTypeWithoutDeepCopy(f.EndpointService)
	}

	f.Tags = m1.Tags
}

func (m *APMBigIpAWSReplaceType) ToAPMBigIpAWSType(f *APMBigIpAWSType) {
	m.toAPMBigIpAWSType(f, true)
}

func (m *APMBigIpAWSReplaceType) ToAPMBigIpAWSTypeWithoutDeepCopy(f *APMBigIpAWSType) {
	m.toAPMBigIpAWSType(f, false)
}

func (m *AWSSiteTypeChoiceReplaceType) fromAWSSiteTypeChoice(f *AWSSiteTypeChoice, withDeepCopy bool) {
	if f == nil {
		return
	}

	if f.GetApmAwsSite() != nil {
		if m.ApmAwsSite == nil {
			m.ApmAwsSite = &APMBigIpAWSReplaceType{}
		}
		m.ApmAwsSite.FromAPMBigIpAWSTypeWithoutDeepCopy(f.GetApmAwsSite())
	} else {
		m.ApmAwsSite = nil
	}

}

func (m *AWSSiteTypeChoiceReplaceType) FromAWSSiteTypeChoice(f *AWSSiteTypeChoice) {
	m.fromAWSSiteTypeChoice(f, true)
}

func (m *AWSSiteTypeChoiceReplaceType) FromAWSSiteTypeChoiceWithoutDeepCopy(f *AWSSiteTypeChoice) {
	m.fromAWSSiteTypeChoice(f, false)
}

func (m *AWSSiteTypeChoiceReplaceType) toAWSSiteTypeChoice(f *AWSSiteTypeChoice, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	if m1.ApmAwsSite != nil {
		if f.ApmAwsSite == nil {
			f.ApmAwsSite = &APMBigIpAWSType{}
		}
	} else if f.ApmAwsSite != nil {
		f.ApmAwsSite = nil
	}

	if m1.ApmAwsSite != nil {
		m1.ApmAwsSite.ToAPMBigIpAWSTypeWithoutDeepCopy(f.ApmAwsSite)
	}

}

func (m *AWSSiteTypeChoiceReplaceType) ToAWSSiteTypeChoice(f *AWSSiteTypeChoice) {
	m.toAWSSiteTypeChoice(f, true)
}

func (m *AWSSiteTypeChoiceReplaceType) ToAWSSiteTypeChoiceWithoutDeepCopy(f *AWSSiteTypeChoice) {
	m.toAWSSiteTypeChoice(f, false)
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetHttpManagementChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.HttpManagementChoice.(type) {
	case nil:
		o.HttpManagementChoice = nil

	case *CreateSpecType_HttpsManagement:
		o.HttpManagementChoice = &GlobalSpecType_HttpsManagement{HttpsManagement: of.HttpsManagement}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetHttpManagementChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.HttpManagementChoice.(type) {
	case nil:
		r.HttpManagementChoice = nil

	case *GlobalSpecType_HttpsManagement:
		r.HttpManagementChoice = &CreateSpecType_HttpsManagement{HttpsManagement: of.HttpsManagement}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetSiteTypeChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.SiteTypeChoice.(type) {
	case nil:
		o.SiteTypeChoice = nil

	case *CreateSpecType_AwsSiteTypeChoice:
		o.SiteTypeChoice = &GlobalSpecType_AwsSiteTypeChoice{AwsSiteTypeChoice: of.AwsSiteTypeChoice}

	case *CreateSpecType_BaremetalSiteTypeChoice:
		o.SiteTypeChoice = &GlobalSpecType_BaremetalSiteTypeChoice{BaremetalSiteTypeChoice: of.BaremetalSiteTypeChoice}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetSiteTypeChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.SiteTypeChoice.(type) {
	case nil:
		r.SiteTypeChoice = nil

	case *GlobalSpecType_AwsSiteTypeChoice:
		r.SiteTypeChoice = &CreateSpecType_AwsSiteTypeChoice{AwsSiteTypeChoice: of.AwsSiteTypeChoice}

	case *GlobalSpecType_BaremetalSiteTypeChoice:
		r.SiteTypeChoice = &CreateSpecType_BaremetalSiteTypeChoice{BaremetalSiteTypeChoice: of.BaremetalSiteTypeChoice}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *CreateSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetHttpManagementChoiceFromGlobalSpecType(f)
	m.GetSiteTypeChoiceFromGlobalSpecType(f)
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *CreateSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *CreateSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetHttpManagementChoiceToGlobalSpecType(f)
	m1.SetSiteTypeChoiceToGlobalSpecType(f)
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *CreateSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in EndpointServiceReplaceType from EndpointServiceType for oneof fields
func (r *EndpointServiceReplaceType) SetExternalVipChoiceToEndpointServiceType(o *EndpointServiceType) error {
	switch of := r.ExternalVipChoice.(type) {
	case nil:
		o.ExternalVipChoice = nil

	case *EndpointServiceReplaceType_AdvertiseOnSloIp:
		o.ExternalVipChoice = &EndpointServiceType_AdvertiseOnSloIp{AdvertiseOnSloIp: of.AdvertiseOnSloIp}

	case *EndpointServiceReplaceType_AdvertiseOnSloIpExternal:
		o.ExternalVipChoice = &EndpointServiceType_AdvertiseOnSloIpExternal{AdvertiseOnSloIpExternal: of.AdvertiseOnSloIpExternal}

	case *EndpointServiceReplaceType_DisableAdvertiseOnSloIp:
		o.ExternalVipChoice = &EndpointServiceType_DisableAdvertiseOnSloIp{DisableAdvertiseOnSloIp: of.DisableAdvertiseOnSloIp}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *EndpointServiceReplaceType) GetExternalVipChoiceFromEndpointServiceType(o *EndpointServiceType) error {
	switch of := o.ExternalVipChoice.(type) {
	case nil:
		r.ExternalVipChoice = nil

	case *EndpointServiceType_AdvertiseOnSloIp:
		r.ExternalVipChoice = &EndpointServiceReplaceType_AdvertiseOnSloIp{AdvertiseOnSloIp: of.AdvertiseOnSloIp}

	case *EndpointServiceType_AdvertiseOnSloIpExternal:
		r.ExternalVipChoice = &EndpointServiceReplaceType_AdvertiseOnSloIpExternal{AdvertiseOnSloIpExternal: of.AdvertiseOnSloIpExternal}

	case *EndpointServiceType_DisableAdvertiseOnSloIp:
		r.ExternalVipChoice = &EndpointServiceReplaceType_DisableAdvertiseOnSloIp{DisableAdvertiseOnSloIp: of.DisableAdvertiseOnSloIp}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in EndpointServiceReplaceType from EndpointServiceType for oneof fields
func (r *EndpointServiceReplaceType) SetTcpPortChoiceToEndpointServiceType(o *EndpointServiceType) error {
	switch of := r.TcpPortChoice.(type) {
	case nil:
		o.TcpPortChoice = nil

	case *EndpointServiceReplaceType_CustomTcpPorts:
		o.TcpPortChoice = &EndpointServiceType_CustomTcpPorts{CustomTcpPorts: of.CustomTcpPorts}

	case *EndpointServiceReplaceType_DefaultTcpPorts:
		o.TcpPortChoice = &EndpointServiceType_DefaultTcpPorts{DefaultTcpPorts: of.DefaultTcpPorts}

	case *EndpointServiceReplaceType_HttpPort:
		o.TcpPortChoice = &EndpointServiceType_HttpPort{HttpPort: of.HttpPort}

	case *EndpointServiceReplaceType_HttpsPort:
		o.TcpPortChoice = &EndpointServiceType_HttpsPort{HttpsPort: of.HttpsPort}

	case *EndpointServiceReplaceType_NoTcpPorts:
		o.TcpPortChoice = &EndpointServiceType_NoTcpPorts{NoTcpPorts: of.NoTcpPorts}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *EndpointServiceReplaceType) GetTcpPortChoiceFromEndpointServiceType(o *EndpointServiceType) error {
	switch of := o.TcpPortChoice.(type) {
	case nil:
		r.TcpPortChoice = nil

	case *EndpointServiceType_CustomTcpPorts:
		r.TcpPortChoice = &EndpointServiceReplaceType_CustomTcpPorts{CustomTcpPorts: of.CustomTcpPorts}

	case *EndpointServiceType_DefaultTcpPorts:
		r.TcpPortChoice = &EndpointServiceReplaceType_DefaultTcpPorts{DefaultTcpPorts: of.DefaultTcpPorts}

	case *EndpointServiceType_HttpPort:
		r.TcpPortChoice = &EndpointServiceReplaceType_HttpPort{HttpPort: of.HttpPort}

	case *EndpointServiceType_HttpsPort:
		r.TcpPortChoice = &EndpointServiceReplaceType_HttpsPort{HttpsPort: of.HttpsPort}

	case *EndpointServiceType_NoTcpPorts:
		r.TcpPortChoice = &EndpointServiceReplaceType_NoTcpPorts{NoTcpPorts: of.NoTcpPorts}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in EndpointServiceReplaceType from EndpointServiceType for oneof fields
func (r *EndpointServiceReplaceType) SetUdpPortChoiceToEndpointServiceType(o *EndpointServiceType) error {
	switch of := r.UdpPortChoice.(type) {
	case nil:
		o.UdpPortChoice = nil

	case *EndpointServiceReplaceType_CustomUdpPorts:
		o.UdpPortChoice = &EndpointServiceType_CustomUdpPorts{CustomUdpPorts: of.CustomUdpPorts}

	case *EndpointServiceReplaceType_NoUdpPorts:
		o.UdpPortChoice = &EndpointServiceType_NoUdpPorts{NoUdpPorts: of.NoUdpPorts}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *EndpointServiceReplaceType) GetUdpPortChoiceFromEndpointServiceType(o *EndpointServiceType) error {
	switch of := o.UdpPortChoice.(type) {
	case nil:
		r.UdpPortChoice = nil

	case *EndpointServiceType_CustomUdpPorts:
		r.UdpPortChoice = &EndpointServiceReplaceType_CustomUdpPorts{CustomUdpPorts: of.CustomUdpPorts}

	case *EndpointServiceType_NoUdpPorts:
		r.UdpPortChoice = &EndpointServiceReplaceType_NoUdpPorts{NoUdpPorts: of.NoUdpPorts}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *EndpointServiceReplaceType) fromEndpointServiceType(f *EndpointServiceType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetExternalVipChoiceFromEndpointServiceType(f)
	m.GetTcpPortChoiceFromEndpointServiceType(f)
	m.GetUdpPortChoiceFromEndpointServiceType(f)
}

func (m *EndpointServiceReplaceType) FromEndpointServiceType(f *EndpointServiceType) {
	m.fromEndpointServiceType(f, true)
}

func (m *EndpointServiceReplaceType) FromEndpointServiceTypeWithoutDeepCopy(f *EndpointServiceType) {
	m.fromEndpointServiceType(f, false)
}

func (m *EndpointServiceReplaceType) toEndpointServiceType(f *EndpointServiceType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetExternalVipChoiceToEndpointServiceType(f)
	m1.SetTcpPortChoiceToEndpointServiceType(f)
	m1.SetUdpPortChoiceToEndpointServiceType(f)
}

func (m *EndpointServiceReplaceType) ToEndpointServiceType(f *EndpointServiceType) {
	m.toEndpointServiceType(f, true)
}

func (m *EndpointServiceReplaceType) ToEndpointServiceTypeWithoutDeepCopy(f *EndpointServiceType) {
	m.toEndpointServiceType(f, false)
}

func (m *F5BigIpAppStackBareMetalChoiceReplaceType) fromF5BigIpAppStackBareMetalTypeChoice(f *F5BigIpAppStackBareMetalTypeChoice, withDeepCopy bool) {
	if f == nil {
		return
	}
}

func (m *F5BigIpAppStackBareMetalChoiceReplaceType) FromF5BigIpAppStackBareMetalTypeChoice(f *F5BigIpAppStackBareMetalTypeChoice) {
	m.fromF5BigIpAppStackBareMetalTypeChoice(f, true)
}

func (m *F5BigIpAppStackBareMetalChoiceReplaceType) FromF5BigIpAppStackBareMetalTypeChoiceWithoutDeepCopy(f *F5BigIpAppStackBareMetalTypeChoice) {
	m.fromF5BigIpAppStackBareMetalTypeChoice(f, false)
}

func (m *F5BigIpAppStackBareMetalChoiceReplaceType) toF5BigIpAppStackBareMetalTypeChoice(f *F5BigIpAppStackBareMetalTypeChoice, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

}

func (m *F5BigIpAppStackBareMetalChoiceReplaceType) ToF5BigIpAppStackBareMetalTypeChoice(f *F5BigIpAppStackBareMetalTypeChoice) {
	m.toF5BigIpAppStackBareMetalTypeChoice(f, true)
}

func (m *F5BigIpAppStackBareMetalChoiceReplaceType) ToF5BigIpAppStackBareMetalTypeChoiceWithoutDeepCopy(f *F5BigIpAppStackBareMetalTypeChoice) {
	m.toF5BigIpAppStackBareMetalTypeChoice(f, false)
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetHttpManagementChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.HttpManagementChoice.(type) {
	case nil:
		o.HttpManagementChoice = nil

	case *GetSpecType_HttpsManagement:
		o.HttpManagementChoice = &GlobalSpecType_HttpsManagement{HttpsManagement: of.HttpsManagement}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetHttpManagementChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.HttpManagementChoice.(type) {
	case nil:
		r.HttpManagementChoice = nil

	case *GlobalSpecType_HttpsManagement:
		r.HttpManagementChoice = &GetSpecType_HttpsManagement{HttpsManagement: of.HttpsManagement}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetSiteTypeChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.SiteTypeChoice.(type) {
	case nil:
		o.SiteTypeChoice = nil

	case *GetSpecType_AwsSiteTypeChoice:
		o.SiteTypeChoice = &GlobalSpecType_AwsSiteTypeChoice{AwsSiteTypeChoice: of.AwsSiteTypeChoice}

	case *GetSpecType_BaremetalSiteTypeChoice:
		o.SiteTypeChoice = &GlobalSpecType_BaremetalSiteTypeChoice{BaremetalSiteTypeChoice: of.BaremetalSiteTypeChoice}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetSiteTypeChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.SiteTypeChoice.(type) {
	case nil:
		r.SiteTypeChoice = nil

	case *GlobalSpecType_AwsSiteTypeChoice:
		r.SiteTypeChoice = &GetSpecType_AwsSiteTypeChoice{AwsSiteTypeChoice: of.AwsSiteTypeChoice}

	case *GlobalSpecType_BaremetalSiteTypeChoice:
		r.SiteTypeChoice = &GetSpecType_BaremetalSiteTypeChoice{BaremetalSiteTypeChoice: of.BaremetalSiteTypeChoice}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetHttpManagementChoiceFromGlobalSpecType(f)
	m.GetSiteTypeChoiceFromGlobalSpecType(f)
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetHttpManagementChoiceToGlobalSpecType(f)
	m1.SetSiteTypeChoiceToGlobalSpecType(f)
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetHttpManagementChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.HttpManagementChoice.(type) {
	case nil:
		o.HttpManagementChoice = nil

	case *ReplaceSpecType_HttpsManagement:
		o.HttpManagementChoice = &GlobalSpecType_HttpsManagement{HttpsManagement: of.HttpsManagement}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetHttpManagementChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.HttpManagementChoice.(type) {
	case nil:
		r.HttpManagementChoice = nil

	case *GlobalSpecType_HttpsManagement:
		r.HttpManagementChoice = &ReplaceSpecType_HttpsManagement{HttpsManagement: of.HttpsManagement}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetSiteTypeChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.SiteTypeChoice.(type) {
	case nil:
		o.SiteTypeChoice = nil

	case *ReplaceSpecType_AwsSiteTypeChoice:

		f1 := o.GetAwsSiteTypeChoice()
		if f1 == nil {
			f1 = &AWSSiteTypeChoice{}
		}
		of.AwsSiteTypeChoice.ToAWSSiteTypeChoiceWithoutDeepCopy(f1)
		o.SiteTypeChoice = &GlobalSpecType_AwsSiteTypeChoice{AwsSiteTypeChoice: f1}

	case *ReplaceSpecType_BaremetalSiteTypeChoice:

		f1 := o.GetBaremetalSiteTypeChoice()
		if f1 == nil {
			f1 = &F5BigIpAppStackBareMetalTypeChoice{}
		}
		of.BaremetalSiteTypeChoice.ToF5BigIpAppStackBareMetalTypeChoiceWithoutDeepCopy(f1)
		o.SiteTypeChoice = &GlobalSpecType_BaremetalSiteTypeChoice{BaremetalSiteTypeChoice: f1}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetSiteTypeChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.SiteTypeChoice.(type) {
	case nil:
		r.SiteTypeChoice = nil

	case *GlobalSpecType_AwsSiteTypeChoice:

		f1 := &AWSSiteTypeChoiceReplaceType{}
		f1.FromAWSSiteTypeChoiceWithoutDeepCopy(of.AwsSiteTypeChoice)
		r.SiteTypeChoice = &ReplaceSpecType_AwsSiteTypeChoice{AwsSiteTypeChoice: f1}

	case *GlobalSpecType_BaremetalSiteTypeChoice:

		f1 := &F5BigIpAppStackBareMetalChoiceReplaceType{}
		f1.FromF5BigIpAppStackBareMetalTypeChoiceWithoutDeepCopy(of.BaremetalSiteTypeChoice)
		r.SiteTypeChoice = &ReplaceSpecType_BaremetalSiteTypeChoice{BaremetalSiteTypeChoice: f1}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *ReplaceSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetHttpManagementChoiceFromGlobalSpecType(f)
	m.GetSiteTypeChoiceFromGlobalSpecType(f)
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetHttpManagementChoiceToGlobalSpecType(f)
	m1.SetSiteTypeChoiceToGlobalSpecType(f)
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

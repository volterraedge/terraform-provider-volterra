// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package virtual_network

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *ActivePBRPoliciesType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ActivePBRPoliciesType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ActivePBRPoliciesType) DeepCopy() *ActivePBRPoliciesType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ActivePBRPoliciesType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ActivePBRPoliciesType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ActivePBRPoliciesType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ActivePBRPoliciesTypeValidator().Validate(ctx, m, opts...)
}

func (m *ActivePBRPoliciesType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetForwardProxyPbrPoliciesDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetForwardProxyPbrPoliciesDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetNetworkPbrPoliciesDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetNetworkPbrPoliciesDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *ActivePBRPoliciesType) GetForwardProxyPbrPoliciesDRefInfo() ([]db.DRefInfo, error) {
	vrefs := m.GetForwardProxyPbrPolicies()
	if len(vrefs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(vrefs))
	for i, vref := range vrefs {
		if vref == nil {
			return nil, fmt.Errorf("ActivePBRPoliciesType.forward_proxy_pbr_policies[%d] has a nil value", i)
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("policy_based_routing.Object")
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "policy_based_routing.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "forward_proxy_pbr_policies",
			Ref:        vdRef,
		})
	}
	return drInfos, nil

}

// GetForwardProxyPbrPoliciesDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *ActivePBRPoliciesType) GetForwardProxyPbrPoliciesDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "policy_based_routing.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: policy_based_routing")
	}
	for i, vref := range m.GetForwardProxyPbrPolicies() {
		if vref == nil {
			return nil, fmt.Errorf("ActivePBRPoliciesType.forward_proxy_pbr_policies[%d] has a nil value", i)
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "policy_based_routing.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

func (m *ActivePBRPoliciesType) GetNetworkPbrPoliciesDRefInfo() ([]db.DRefInfo, error) {
	vrefs := m.GetNetworkPbrPolicies()
	if len(vrefs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(vrefs))
	for i, vref := range vrefs {
		if vref == nil {
			return nil, fmt.Errorf("ActivePBRPoliciesType.network_pbr_policies[%d] has a nil value", i)
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("policy_based_routing.Object")
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "policy_based_routing.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "network_pbr_policies",
			Ref:        vdRef,
		})
	}
	return drInfos, nil

}

// GetNetworkPbrPoliciesDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *ActivePBRPoliciesType) GetNetworkPbrPoliciesDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "policy_based_routing.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: policy_based_routing")
	}
	for i, vref := range m.GetNetworkPbrPolicies() {
		if vref == nil {
			return nil, fmt.Errorf("ActivePBRPoliciesType.network_pbr_policies[%d] has a nil value", i)
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "policy_based_routing.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateActivePBRPoliciesType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateActivePBRPoliciesType) ForwardProxyPbrPoliciesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for forward_proxy_pbr_policies")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for forward_proxy_pbr_policies")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated forward_proxy_pbr_policies")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items forward_proxy_pbr_policies")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateActivePBRPoliciesType) NetworkPbrPoliciesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for network_pbr_policies")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for network_pbr_policies")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated network_pbr_policies")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items network_pbr_policies")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateActivePBRPoliciesType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ActivePBRPoliciesType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ActivePBRPoliciesType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["forward_proxy_pbr_policies"]; exists {
		vOpts := append(opts, db.WithValidateField("forward_proxy_pbr_policies"))
		if err := fv(ctx, m.GetForwardProxyPbrPolicies(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["network_pbr_policies"]; exists {
		vOpts := append(opts, db.WithValidateField("network_pbr_policies"))
		if err := fv(ctx, m.GetNetworkPbrPolicies(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultActivePBRPoliciesTypeValidator = func() *ValidateActivePBRPoliciesType {
	v := &ValidateActivePBRPoliciesType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhForwardProxyPbrPolicies := v.ForwardProxyPbrPoliciesValidationRuleHandler
	rulesForwardProxyPbrPolicies := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "32",
	}
	vFn, err = vrhForwardProxyPbrPolicies(rulesForwardProxyPbrPolicies)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ActivePBRPoliciesType.forward_proxy_pbr_policies: %s", err)
		panic(errMsg)
	}
	v.FldValidators["forward_proxy_pbr_policies"] = vFn

	vrhNetworkPbrPolicies := v.NetworkPbrPoliciesValidationRuleHandler
	rulesNetworkPbrPolicies := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "32",
	}
	vFn, err = vrhNetworkPbrPolicies(rulesNetworkPbrPolicies)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ActivePBRPoliciesType.network_pbr_policies: %s", err)
		panic(errMsg)
	}
	v.FldValidators["network_pbr_policies"] = vFn

	return v
}()

func ActivePBRPoliciesTypeValidator() db.Validator {
	return DefaultActivePBRPoliciesTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *AnyCastVIPFleetType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AnyCastVIPFleetType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AnyCastVIPFleetType) DeepCopy() *AnyCastVIPFleetType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AnyCastVIPFleetType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AnyCastVIPFleetType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AnyCastVIPFleetType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AnyCastVIPFleetTypeValidator().Validate(ctx, m, opts...)
}

func (m *AnyCastVIPFleetType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetVipAllocatorDRefInfo()

}

func (m *AnyCastVIPFleetType) GetVipAllocatorDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetVipAllocator()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("address_allocator.Object")
	dri := db.DRefInfo{
		RefdType:   "address_allocator.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "vip_allocator",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetVipAllocatorDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *AnyCastVIPFleetType) GetVipAllocatorDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "address_allocator.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: address_allocator")
	}

	vref := m.GetVipAllocator()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "address_allocator.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

type ValidateAnyCastVIPFleetType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAnyCastVIPFleetType) VipAllocatorValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for vip_allocator")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAnyCastVIPFleetType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AnyCastVIPFleetType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AnyCastVIPFleetType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["vip_allocator"]; exists {

		vOpts := append(opts, db.WithValidateField("vip_allocator"))
		if err := fv(ctx, m.GetVipAllocator(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAnyCastVIPFleetTypeValidator = func() *ValidateAnyCastVIPFleetType {
	v := &ValidateAnyCastVIPFleetType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhVipAllocator := v.VipAllocatorValidationRuleHandler
	rulesVipAllocator := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhVipAllocator(rulesVipAllocator)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AnyCastVIPFleetType.vip_allocator: %s", err)
		panic(errMsg)
	}
	v.FldValidators["vip_allocator"] = vFn

	return v
}()

func AnyCastVIPFleetTypeValidator() db.Validator {
	return DefaultAnyCastVIPFleetTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *CreateSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetNetworkChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetNetworkChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetStaticRoutesDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetStaticRoutesDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetStaticV6RoutesDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetStaticV6RoutesDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetNetworkChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetNetworkChoice() == nil {
		return nil, nil
	}
	switch m.GetNetworkChoice().(type) {
	case *CreateSpecType_GlobalNetwork:

		return nil, nil

	case *CreateSpecType_SiteLocalNetwork:

		return nil, nil

	case *CreateSpecType_SiteLocalInsideNetwork:

		return nil, nil

	case *CreateSpecType_Srv6Network:
		drInfos, err := m.GetSrv6Network().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSrv6Network().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "srv6_network." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetStaticRoutesDRefInfo() ([]db.DRefInfo, error) {
	if m.GetStaticRoutes() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetStaticRoutes() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetStaticRoutes() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("static_routes[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetStaticV6RoutesDRefInfo() ([]db.DRefInfo, error) {
	if m.GetStaticV6Routes() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetStaticV6Routes() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetStaticV6Routes() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("static_v6_routes[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) NetworkChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for network_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) NetworkChoiceLegacyTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	conv_LegacyType := func(v interface{}) int32 {
		i := v.(ves_io_schema.VirtualNetworkType)
		return int32(i)
	}
	// ves_io_schema.VirtualNetworkType_name is generated in .pb.go
	oValidatorFn_LegacyType, err := db.NewEnumValidationRuleHandler(rules, ves_io_schema.VirtualNetworkType_name, conv_LegacyType)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for oneof sub-field legacy_type")
	}
	return oValidatorFn_LegacyType, nil
}

func (v *ValidateCreateSpecType) StaticRoutesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for static_routes")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*StaticRouteViewType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := StaticRouteViewTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for static_routes")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*StaticRouteViewType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*StaticRouteViewType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated static_routes")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items static_routes")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) StaticV6RoutesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for static_v6_routes")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*StaticV6RouteViewType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := StaticV6RouteViewTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for static_v6_routes")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*StaticV6RouteViewType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*StaticV6RouteViewType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated static_v6_routes")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items static_v6_routes")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["network_choice"]; exists {
		val := m.GetNetworkChoice()
		vOpts := append(opts,
			db.WithValidateField("network_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetNetworkChoice().(type) {
	case *CreateSpecType_GlobalNetwork:
		if fv, exists := v.FldValidators["network_choice.global_network"]; exists {
			val := m.GetNetworkChoice().(*CreateSpecType_GlobalNetwork).GlobalNetwork
			vOpts := append(opts,
				db.WithValidateField("network_choice"),
				db.WithValidateField("global_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_SiteLocalNetwork:
		if fv, exists := v.FldValidators["network_choice.site_local_network"]; exists {
			val := m.GetNetworkChoice().(*CreateSpecType_SiteLocalNetwork).SiteLocalNetwork
			vOpts := append(opts,
				db.WithValidateField("network_choice"),
				db.WithValidateField("site_local_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_SiteLocalInsideNetwork:
		if fv, exists := v.FldValidators["network_choice.site_local_inside_network"]; exists {
			val := m.GetNetworkChoice().(*CreateSpecType_SiteLocalInsideNetwork).SiteLocalInsideNetwork
			vOpts := append(opts,
				db.WithValidateField("network_choice"),
				db.WithValidateField("site_local_inside_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_LegacyType:
		if fv, exists := v.FldValidators["network_choice.legacy_type"]; exists {
			val := m.GetNetworkChoice().(*CreateSpecType_LegacyType).LegacyType
			vOpts := append(opts,
				db.WithValidateField("network_choice"),
				db.WithValidateField("legacy_type"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_Srv6Network:
		if fv, exists := v.FldValidators["network_choice.srv6_network"]; exists {
			val := m.GetNetworkChoice().(*CreateSpecType_Srv6Network).Srv6Network
			vOpts := append(opts,
				db.WithValidateField("network_choice"),
				db.WithValidateField("srv6_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["static_routes"]; exists {
		vOpts := append(opts, db.WithValidateField("static_routes"))
		if err := fv(ctx, m.GetStaticRoutes(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["static_v6_routes"]; exists {
		vOpts := append(opts, db.WithValidateField("static_v6_routes"))
		if err := fv(ctx, m.GetStaticV6Routes(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhNetworkChoice := v.NetworkChoiceValidationRuleHandler
	rulesNetworkChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhNetworkChoice(rulesNetworkChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.network_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["network_choice"] = vFn

	vrhNetworkChoiceLegacyType := v.NetworkChoiceLegacyTypeValidationRuleHandler
	rulesNetworkChoiceLegacyType := map[string]string{
		"ves.io.schema.rules.enum.in": "[0,1,2,3,4,7]",
	}
	vFnMap["network_choice.legacy_type"], err = vrhNetworkChoiceLegacyType(rulesNetworkChoiceLegacyType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field CreateSpecType.network_choice_legacy_type: %s", err)
		panic(errMsg)
	}

	v.FldValidators["network_choice.legacy_type"] = vFnMap["network_choice.legacy_type"]

	vrhStaticRoutes := v.StaticRoutesValidationRuleHandler
	rulesStaticRoutes := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "165",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhStaticRoutes(rulesStaticRoutes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.static_routes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["static_routes"] = vFn

	vrhStaticV6Routes := v.StaticV6RoutesValidationRuleHandler
	rulesStaticV6Routes := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "165",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhStaticV6Routes(rulesStaticV6Routes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.static_v6_routes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["static_v6_routes"] = vFn

	v.FldValidators["network_choice.srv6_network"] = PerSiteSrv6NetworkTypeValidator().Validate

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *DNSServersList) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DNSServersList) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DNSServersList) DeepCopy() *DNSServersList {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DNSServersList{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DNSServersList) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DNSServersList) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DNSServersListValidator().Validate(ctx, m, opts...)
}

type ValidateDNSServersList struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDNSServersList) DnsIpValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for dns_ip")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for dns_ip")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated dns_ip")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items dns_ip")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateDNSServersList) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DNSServersList)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DNSServersList got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["dns_ip"]; exists {
		vOpts := append(opts, db.WithValidateField("dns_ip"))
		if err := fv(ctx, m.GetDnsIp(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDNSServersListValidator = func() *ValidateDNSServersList {
	v := &ValidateDNSServersList{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDnsIp := v.DnsIpValidationRuleHandler
	rulesDnsIp := map[string]string{
		"ves.io.schema.rules.message.required":         "true",
		"ves.io.schema.rules.repeated.items.string.ip": "true",
		"ves.io.schema.rules.repeated.max_items":       "4",
		"ves.io.schema.rules.repeated.min_items":       "1",
	}
	vFn, err = vrhDnsIp(rulesDnsIp)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DNSServersList.dns_ip: %s", err)
		panic(errMsg)
	}
	v.FldValidators["dns_ip"] = vFn

	return v
}()

func DNSServersListValidator() db.Validator {
	return DefaultDNSServersListValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GetSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetNetworkChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetNetworkChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetStaticRoutesDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetStaticRoutesDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetStaticV6RoutesDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetStaticV6RoutesDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetNetworkChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetNetworkChoice() == nil {
		return nil, nil
	}
	switch m.GetNetworkChoice().(type) {
	case *GetSpecType_GlobalNetwork:

		return nil, nil

	case *GetSpecType_SiteLocalNetwork:

		return nil, nil

	case *GetSpecType_SiteLocalInsideNetwork:

		return nil, nil

	case *GetSpecType_PrivateNetwork:

		return nil, nil

	case *GetSpecType_Srv6Network:
		drInfos, err := m.GetSrv6Network().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSrv6Network().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "srv6_network." + dri.DRField
		}
		return drInfos, err

	case *GetSpecType_SegmentNetwork:

		return nil, nil

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetStaticRoutesDRefInfo() ([]db.DRefInfo, error) {
	if m.GetStaticRoutes() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetStaticRoutes() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetStaticRoutes() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("static_routes[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetStaticV6RoutesDRefInfo() ([]db.DRefInfo, error) {
	if m.GetStaticV6Routes() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetStaticV6Routes() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetStaticV6Routes() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("static_v6_routes[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) NetworkChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for network_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) NetworkChoiceLegacyTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	conv_LegacyType := func(v interface{}) int32 {
		i := v.(ves_io_schema.VirtualNetworkType)
		return int32(i)
	}
	// ves_io_schema.VirtualNetworkType_name is generated in .pb.go
	oValidatorFn_LegacyType, err := db.NewEnumValidationRuleHandler(rules, ves_io_schema.VirtualNetworkType_name, conv_LegacyType)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for oneof sub-field legacy_type")
	}
	return oValidatorFn_LegacyType, nil
}

func (v *ValidateGetSpecType) StaticRoutesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for static_routes")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*StaticRouteViewType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := StaticRouteViewTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for static_routes")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*StaticRouteViewType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*StaticRouteViewType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated static_routes")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items static_routes")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) StaticV6RoutesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for static_v6_routes")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*StaticV6RouteViewType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := StaticV6RouteViewTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for static_v6_routes")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*StaticV6RouteViewType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*StaticV6RouteViewType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated static_v6_routes")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items static_v6_routes")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["network_choice"]; exists {
		val := m.GetNetworkChoice()
		vOpts := append(opts,
			db.WithValidateField("network_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetNetworkChoice().(type) {
	case *GetSpecType_GlobalNetwork:
		if fv, exists := v.FldValidators["network_choice.global_network"]; exists {
			val := m.GetNetworkChoice().(*GetSpecType_GlobalNetwork).GlobalNetwork
			vOpts := append(opts,
				db.WithValidateField("network_choice"),
				db.WithValidateField("global_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_SiteLocalNetwork:
		if fv, exists := v.FldValidators["network_choice.site_local_network"]; exists {
			val := m.GetNetworkChoice().(*GetSpecType_SiteLocalNetwork).SiteLocalNetwork
			vOpts := append(opts,
				db.WithValidateField("network_choice"),
				db.WithValidateField("site_local_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_SiteLocalInsideNetwork:
		if fv, exists := v.FldValidators["network_choice.site_local_inside_network"]; exists {
			val := m.GetNetworkChoice().(*GetSpecType_SiteLocalInsideNetwork).SiteLocalInsideNetwork
			vOpts := append(opts,
				db.WithValidateField("network_choice"),
				db.WithValidateField("site_local_inside_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_LegacyType:
		if fv, exists := v.FldValidators["network_choice.legacy_type"]; exists {
			val := m.GetNetworkChoice().(*GetSpecType_LegacyType).LegacyType
			vOpts := append(opts,
				db.WithValidateField("network_choice"),
				db.WithValidateField("legacy_type"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_PrivateNetwork:
		if fv, exists := v.FldValidators["network_choice.private_network"]; exists {
			val := m.GetNetworkChoice().(*GetSpecType_PrivateNetwork).PrivateNetwork
			vOpts := append(opts,
				db.WithValidateField("network_choice"),
				db.WithValidateField("private_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_Srv6Network:
		if fv, exists := v.FldValidators["network_choice.srv6_network"]; exists {
			val := m.GetNetworkChoice().(*GetSpecType_Srv6Network).Srv6Network
			vOpts := append(opts,
				db.WithValidateField("network_choice"),
				db.WithValidateField("srv6_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_SegmentNetwork:
		if fv, exists := v.FldValidators["network_choice.segment_network"]; exists {
			val := m.GetNetworkChoice().(*GetSpecType_SegmentNetwork).SegmentNetwork
			vOpts := append(opts,
				db.WithValidateField("network_choice"),
				db.WithValidateField("segment_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["static_routes"]; exists {
		vOpts := append(opts, db.WithValidateField("static_routes"))
		if err := fv(ctx, m.GetStaticRoutes(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["static_v6_routes"]; exists {
		vOpts := append(opts, db.WithValidateField("static_v6_routes"))
		if err := fv(ctx, m.GetStaticV6Routes(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhNetworkChoice := v.NetworkChoiceValidationRuleHandler
	rulesNetworkChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhNetworkChoice(rulesNetworkChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.network_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["network_choice"] = vFn

	vrhNetworkChoiceLegacyType := v.NetworkChoiceLegacyTypeValidationRuleHandler
	rulesNetworkChoiceLegacyType := map[string]string{
		"ves.io.schema.rules.enum.in": "[0,1,2,3,4,7]",
	}
	vFnMap["network_choice.legacy_type"], err = vrhNetworkChoiceLegacyType(rulesNetworkChoiceLegacyType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field GetSpecType.network_choice_legacy_type: %s", err)
		panic(errMsg)
	}

	v.FldValidators["network_choice.legacy_type"] = vFnMap["network_choice.legacy_type"]

	vrhStaticRoutes := v.StaticRoutesValidationRuleHandler
	rulesStaticRoutes := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "165",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhStaticRoutes(rulesStaticRoutes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.static_routes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["static_routes"] = vFn

	vrhStaticV6Routes := v.StaticV6RoutesValidationRuleHandler
	rulesStaticV6Routes := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "165",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhStaticV6Routes(rulesStaticV6Routes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.static_v6_routes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["static_v6_routes"] = vFn

	v.FldValidators["network_choice.srv6_network"] = PerSiteSrv6NetworkTypeValidator().Validate

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GlobalSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetDefaultVipChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetDefaultVipChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetFleetRefsDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetFleetRefsDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetNetworkChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetNetworkChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSliceRefDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetSliceRefDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSnatPoolChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetSnatPoolChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetStaticRoutesDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetStaticRoutesDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetDefaultVipChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetDefaultVipChoice() == nil {
		return nil, nil
	}
	switch m.GetDefaultVipChoice().(type) {
	case *GlobalSpecType_TenantVip:

		return nil, nil

	case *GlobalSpecType_FleetVip:
		drInfos, err := m.GetFleetVip().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetFleetVip().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "fleet_vip." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

func (m *GlobalSpecType) GetFleetRefsDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetFleetRefs()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("GlobalSpecType.fleet_refs[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "fleet.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "fleet_refs",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetFleetRefsDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetFleetRefsDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "fleet.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: fleet")
	}
	for _, ref := range m.GetFleetRefs() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetNetworkChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetNetworkChoice() == nil {
		return nil, nil
	}
	switch m.GetNetworkChoice().(type) {
	case *GlobalSpecType_GlobalNetwork:

		return nil, nil

	case *GlobalSpecType_SiteLocalNetwork:

		return nil, nil

	case *GlobalSpecType_SiteLocalInsideNetwork:

		return nil, nil

	case *GlobalSpecType_InsideNetwork:

		return nil, nil

	case *GlobalSpecType_PrivateNetwork:

		return nil, nil

	case *GlobalSpecType_Srv6Network:
		drInfos, err := m.GetSrv6Network().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSrv6Network().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "srv6_network." + dri.DRField
		}
		return drInfos, err

	case *GlobalSpecType_SegmentNetwork:

		return nil, nil

	default:
		return nil, nil
	}

}

func (m *GlobalSpecType) GetSliceRefDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetSliceRef()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("GlobalSpecType.slice_ref[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "srv6_network_slice.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "slice_ref",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetSliceRefDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetSliceRefDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "srv6_network_slice.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: srv6_network_slice")
	}
	for _, ref := range m.GetSliceRef() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetSnatPoolChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSnatPoolChoice() == nil {
		return nil, nil
	}
	switch m.GetSnatPoolChoice().(type) {
	case *GlobalSpecType_InterfaceIp:

		return nil, nil

	case *GlobalSpecType_SiteSnatPool:

		return nil, nil

	case *GlobalSpecType_FleetSnatPool:
		drInfos, err := m.GetFleetSnatPool().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetFleetSnatPool().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "fleet_snat_pool." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetStaticRoutesDRefInfo() ([]db.DRefInfo, error) {
	if m.GetStaticRoutes() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetStaticRoutes() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetStaticRoutes() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("static_routes[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) NetworkChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for network_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) NetworkChoiceLegacyTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	conv_LegacyType := func(v interface{}) int32 {
		i := v.(ves_io_schema.VirtualNetworkType)
		return int32(i)
	}
	// ves_io_schema.VirtualNetworkType_name is generated in .pb.go
	oValidatorFn_LegacyType, err := db.NewEnumValidationRuleHandler(rules, ves_io_schema.VirtualNetworkType_name, conv_LegacyType)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for oneof sub-field legacy_type")
	}
	return oValidatorFn_LegacyType, nil
}

func (v *ValidateGlobalSpecType) SubnetsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for subnets")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.IpSubnetType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.IpSubnetTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for subnets")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.IpSubnetType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.IpSubnetType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated subnets")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items subnets")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) TypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema.VirtualNetworkType)
		return int32(i)
	}
	// ves_io_schema.VirtualNetworkType_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, ves_io_schema.VirtualNetworkType_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for type")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) StaticRoutesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for static_routes")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.StaticRouteType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.StaticRouteTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for static_routes")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.StaticRouteType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.StaticRouteType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated static_routes")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items static_routes")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) ImportRtargetStrsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for import_rtarget_strs")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for import_rtarget_strs")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated import_rtarget_strs")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items import_rtarget_strs")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) ExportRtargetStrsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for export_rtarget_strs")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for export_rtarget_strs")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated export_rtarget_strs")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items export_rtarget_strs")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) FleetRefsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for fleet_refs")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for fleet_refs")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated fleet_refs")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items fleet_refs")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) SliceRefValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for slice_ref")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for slice_ref")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated slice_ref")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items slice_ref")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	switch m.GetDefaultVipChoice().(type) {
	case *GlobalSpecType_TenantVip:
		if fv, exists := v.FldValidators["default_vip_choice.tenant_vip"]; exists {
			val := m.GetDefaultVipChoice().(*GlobalSpecType_TenantVip).TenantVip
			vOpts := append(opts,
				db.WithValidateField("default_vip_choice"),
				db.WithValidateField("tenant_vip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_FleetVip:
		if fv, exists := v.FldValidators["default_vip_choice.fleet_vip"]; exists {
			val := m.GetDefaultVipChoice().(*GlobalSpecType_FleetVip).FleetVip
			vOpts := append(opts,
				db.WithValidateField("default_vip_choice"),
				db.WithValidateField("fleet_vip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["export_rtarget_strs"]; exists {
		vOpts := append(opts, db.WithValidateField("export_rtarget_strs"))
		if err := fv(ctx, m.GetExportRtargetStrs(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["fleet_refs"]; exists {
		vOpts := append(opts, db.WithValidateField("fleet_refs"))
		if err := fv(ctx, m.GetFleetRefs(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["import_rtarget_strs"]; exists {
		vOpts := append(opts, db.WithValidateField("import_rtarget_strs"))
		if err := fv(ctx, m.GetImportRtargetStrs(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["network_choice"]; exists {
		val := m.GetNetworkChoice()
		vOpts := append(opts,
			db.WithValidateField("network_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetNetworkChoice().(type) {
	case *GlobalSpecType_GlobalNetwork:
		if fv, exists := v.FldValidators["network_choice.global_network"]; exists {
			val := m.GetNetworkChoice().(*GlobalSpecType_GlobalNetwork).GlobalNetwork
			vOpts := append(opts,
				db.WithValidateField("network_choice"),
				db.WithValidateField("global_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_SiteLocalNetwork:
		if fv, exists := v.FldValidators["network_choice.site_local_network"]; exists {
			val := m.GetNetworkChoice().(*GlobalSpecType_SiteLocalNetwork).SiteLocalNetwork
			vOpts := append(opts,
				db.WithValidateField("network_choice"),
				db.WithValidateField("site_local_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_SiteLocalInsideNetwork:
		if fv, exists := v.FldValidators["network_choice.site_local_inside_network"]; exists {
			val := m.GetNetworkChoice().(*GlobalSpecType_SiteLocalInsideNetwork).SiteLocalInsideNetwork
			vOpts := append(opts,
				db.WithValidateField("network_choice"),
				db.WithValidateField("site_local_inside_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_InsideNetwork:
		if fv, exists := v.FldValidators["network_choice.inside_network"]; exists {
			val := m.GetNetworkChoice().(*GlobalSpecType_InsideNetwork).InsideNetwork
			vOpts := append(opts,
				db.WithValidateField("network_choice"),
				db.WithValidateField("inside_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_LegacyType:
		if fv, exists := v.FldValidators["network_choice.legacy_type"]; exists {
			val := m.GetNetworkChoice().(*GlobalSpecType_LegacyType).LegacyType
			vOpts := append(opts,
				db.WithValidateField("network_choice"),
				db.WithValidateField("legacy_type"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_PrivateNetwork:
		if fv, exists := v.FldValidators["network_choice.private_network"]; exists {
			val := m.GetNetworkChoice().(*GlobalSpecType_PrivateNetwork).PrivateNetwork
			vOpts := append(opts,
				db.WithValidateField("network_choice"),
				db.WithValidateField("private_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_Srv6Network:
		if fv, exists := v.FldValidators["network_choice.srv6_network"]; exists {
			val := m.GetNetworkChoice().(*GlobalSpecType_Srv6Network).Srv6Network
			vOpts := append(opts,
				db.WithValidateField("network_choice"),
				db.WithValidateField("srv6_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_SegmentNetwork:
		if fv, exists := v.FldValidators["network_choice.segment_network"]; exists {
			val := m.GetNetworkChoice().(*GlobalSpecType_SegmentNetwork).SegmentNetwork
			vOpts := append(opts,
				db.WithValidateField("network_choice"),
				db.WithValidateField("segment_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["private_network_parameters"]; exists {

		vOpts := append(opts, db.WithValidateField("private_network_parameters"))
		if err := fv(ctx, m.GetPrivateNetworkParameters(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["slice_ref"]; exists {
		vOpts := append(opts, db.WithValidateField("slice_ref"))
		if err := fv(ctx, m.GetSliceRef(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetSnatPoolChoice().(type) {
	case *GlobalSpecType_InterfaceIp:
		if fv, exists := v.FldValidators["snat_pool_choice.interface_ip"]; exists {
			val := m.GetSnatPoolChoice().(*GlobalSpecType_InterfaceIp).InterfaceIp
			vOpts := append(opts,
				db.WithValidateField("snat_pool_choice"),
				db.WithValidateField("interface_ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_SiteSnatPool:
		if fv, exists := v.FldValidators["snat_pool_choice.site_snat_pool"]; exists {
			val := m.GetSnatPoolChoice().(*GlobalSpecType_SiteSnatPool).SiteSnatPool
			vOpts := append(opts,
				db.WithValidateField("snat_pool_choice"),
				db.WithValidateField("site_snat_pool"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_FleetSnatPool:
		if fv, exists := v.FldValidators["snat_pool_choice.fleet_snat_pool"]; exists {
			val := m.GetSnatPoolChoice().(*GlobalSpecType_FleetSnatPool).FleetSnatPool
			vOpts := append(opts,
				db.WithValidateField("snat_pool_choice"),
				db.WithValidateField("fleet_snat_pool"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["static_routes"]; exists {
		vOpts := append(opts, db.WithValidateField("static_routes"))
		if err := fv(ctx, m.GetStaticRoutes(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["subnets"]; exists {
		vOpts := append(opts, db.WithValidateField("subnets"))
		if err := fv(ctx, m.GetSubnets(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["type"]; exists {

		vOpts := append(opts, db.WithValidateField("type"))
		if err := fv(ctx, m.GetType(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhNetworkChoice := v.NetworkChoiceValidationRuleHandler
	rulesNetworkChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhNetworkChoice(rulesNetworkChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.network_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["network_choice"] = vFn

	vrhNetworkChoiceLegacyType := v.NetworkChoiceLegacyTypeValidationRuleHandler
	rulesNetworkChoiceLegacyType := map[string]string{
		"ves.io.schema.rules.enum.in": "[0,1,2,3,4,7]",
	}
	vFnMap["network_choice.legacy_type"], err = vrhNetworkChoiceLegacyType(rulesNetworkChoiceLegacyType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field GlobalSpecType.network_choice_legacy_type: %s", err)
		panic(errMsg)
	}

	v.FldValidators["network_choice.legacy_type"] = vFnMap["network_choice.legacy_type"]

	vrhSubnets := v.SubnetsValidationRuleHandler
	rulesSubnets := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "128",
	}
	vFn, err = vrhSubnets(rulesSubnets)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.subnets: %s", err)
		panic(errMsg)
	}
	v.FldValidators["subnets"] = vFn

	vrhType := v.TypeValidationRuleHandler
	rulesType := map[string]string{
		"ves.io.schema.rules.enum.in":          "[0,1,2,3,4,7,9,10,12]",
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhType(rulesType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["type"] = vFn

	vrhStaticRoutes := v.StaticRoutesValidationRuleHandler
	rulesStaticRoutes := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "165",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhStaticRoutes(rulesStaticRoutes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.static_routes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["static_routes"] = vFn

	vrhImportRtargetStrs := v.ImportRtargetStrsValidationRuleHandler
	rulesImportRtargetStrs := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "4",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhImportRtargetStrs(rulesImportRtargetStrs)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.import_rtarget_strs: %s", err)
		panic(errMsg)
	}
	v.FldValidators["import_rtarget_strs"] = vFn

	vrhExportRtargetStrs := v.ExportRtargetStrsValidationRuleHandler
	rulesExportRtargetStrs := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "4",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhExportRtargetStrs(rulesExportRtargetStrs)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.export_rtarget_strs: %s", err)
		panic(errMsg)
	}
	v.FldValidators["export_rtarget_strs"] = vFn

	vrhFleetRefs := v.FleetRefsValidationRuleHandler
	rulesFleetRefs := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "64",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhFleetRefs(rulesFleetRefs)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.fleet_refs: %s", err)
		panic(errMsg)
	}
	v.FldValidators["fleet_refs"] = vFn

	vrhSliceRef := v.SliceRefValidationRuleHandler
	rulesSliceRef := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1",
	}
	vFn, err = vrhSliceRef(rulesSliceRef)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.slice_ref: %s", err)
		panic(errMsg)
	}
	v.FldValidators["slice_ref"] = vFn

	v.FldValidators["default_vip_choice.tenant_vip"] = PerTenantVIPTypeValidator().Validate
	v.FldValidators["default_vip_choice.fleet_vip"] = AnyCastVIPFleetTypeValidator().Validate

	v.FldValidators["network_choice.srv6_network"] = PerSiteSrv6NetworkTypeValidator().Validate

	v.FldValidators["snat_pool_choice.site_snat_pool"] = SNATPoolSiteTypeValidator().Validate
	v.FldValidators["snat_pool_choice.fleet_snat_pool"] = SNATPoolFleetTypeValidator().Validate

	v.FldValidators["private_network_parameters"] = VoltADNPrivateNetworkTypeValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *NextHopInterfaceList) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *NextHopInterfaceList) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *NextHopInterfaceList) DeepCopy() *NextHopInterfaceList {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &NextHopInterfaceList{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *NextHopInterfaceList) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *NextHopInterfaceList) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return NextHopInterfaceListValidator().Validate(ctx, m, opts...)
}

func (m *NextHopInterfaceList) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetInterfacesDRefInfo()

}

func (m *NextHopInterfaceList) GetInterfacesDRefInfo() ([]db.DRefInfo, error) {
	vrefs := m.GetInterfaces()
	if len(vrefs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(vrefs))
	for i, vref := range vrefs {
		if vref == nil {
			return nil, fmt.Errorf("NextHopInterfaceList.interfaces[%d] has a nil value", i)
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("network_interface.Object")
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "network_interface.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "interfaces",
			Ref:        vdRef,
		})
	}
	return drInfos, nil

}

// GetInterfacesDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *NextHopInterfaceList) GetInterfacesDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "network_interface.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: network_interface")
	}
	for i, vref := range m.GetInterfaces() {
		if vref == nil {
			return nil, fmt.Errorf("NextHopInterfaceList.interfaces[%d] has a nil value", i)
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "network_interface.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateNextHopInterfaceList struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateNextHopInterfaceList) InterfacesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for interfaces")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for interfaces")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated interfaces")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items interfaces")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateNextHopInterfaceList) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*NextHopInterfaceList)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *NextHopInterfaceList got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["interfaces"]; exists {
		vOpts := append(opts, db.WithValidateField("interfaces"))
		if err := fv(ctx, m.GetInterfaces(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultNextHopInterfaceListValidator = func() *ValidateNextHopInterfaceList {
	v := &ValidateNextHopInterfaceList{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhInterfaces := v.InterfacesValidationRuleHandler
	rulesInterfaces := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "1",
		"ves.io.schema.rules.repeated.min_items": "1",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhInterfaces(rulesInterfaces)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for NextHopInterfaceList.interfaces: %s", err)
		panic(errMsg)
	}
	v.FldValidators["interfaces"] = vFn

	return v
}()

func NextHopInterfaceListValidator() db.Validator {
	return DefaultNextHopInterfaceListValidator
}

// augmented methods on protoc/std generated struct

func (m *PerSiteSrv6NetworkType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *PerSiteSrv6NetworkType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *PerSiteSrv6NetworkType) DeepCopy() *PerSiteSrv6NetworkType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &PerSiteSrv6NetworkType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *PerSiteSrv6NetworkType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *PerSiteSrv6NetworkType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return PerSiteSrv6NetworkTypeValidator().Validate(ctx, m, opts...)
}

func (m *PerSiteSrv6NetworkType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetDefaultVipChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetDefaultVipChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetFleetsDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetFleetsDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSliceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetSliceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSnatPoolChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetSnatPoolChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *PerSiteSrv6NetworkType) GetDefaultVipChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetDefaultVipChoice() == nil {
		return nil, nil
	}
	switch m.GetDefaultVipChoice().(type) {
	case *PerSiteSrv6NetworkType_InterfaceIpVip:

		return nil, nil

	case *PerSiteSrv6NetworkType_FleetVip:
		drInfos, err := m.GetFleetVip().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetFleetVip().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "fleet_vip." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

func (m *PerSiteSrv6NetworkType) GetFleetsDRefInfo() ([]db.DRefInfo, error) {
	vrefs := m.GetFleets()
	if len(vrefs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(vrefs))
	for i, vref := range vrefs {
		if vref == nil {
			return nil, fmt.Errorf("PerSiteSrv6NetworkType.fleets[%d] has a nil value", i)
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("fleet.Object")
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "fleet.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "fleets",
			Ref:        vdRef,
		})
	}
	return drInfos, nil

}

// GetFleetsDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *PerSiteSrv6NetworkType) GetFleetsDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "fleet.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: fleet")
	}
	for i, vref := range m.GetFleets() {
		if vref == nil {
			return nil, fmt.Errorf("PerSiteSrv6NetworkType.fleets[%d] has a nil value", i)
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "fleet.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

func (m *PerSiteSrv6NetworkType) GetSliceDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetSlice()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("srv6_network_slice.Object")
	dri := db.DRefInfo{
		RefdType:   "srv6_network_slice.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "slice",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetSliceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *PerSiteSrv6NetworkType) GetSliceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "srv6_network_slice.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: srv6_network_slice")
	}

	vref := m.GetSlice()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "srv6_network_slice.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *PerSiteSrv6NetworkType) GetSnatPoolChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSnatPoolChoice() == nil {
		return nil, nil
	}
	switch m.GetSnatPoolChoice().(type) {
	case *PerSiteSrv6NetworkType_InterfaceIpSnatPool:

		return nil, nil

	case *PerSiteSrv6NetworkType_SiteSnatPool:

		return nil, nil

	case *PerSiteSrv6NetworkType_FleetSnatPool:
		drInfos, err := m.GetFleetSnatPool().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetFleetSnatPool().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "fleet_snat_pool." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidatePerSiteSrv6NetworkType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidatePerSiteSrv6NetworkType) DefaultVipChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for default_vip_choice")
	}
	return validatorFn, nil
}

func (v *ValidatePerSiteSrv6NetworkType) DefaultVipChoiceAnycastVipValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_AnycastVip, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for anycast_vip")
	}
	return oValidatorFn_AnycastVip, nil
}

func (v *ValidatePerSiteSrv6NetworkType) NamespaceChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for namespace_choice")
	}
	return validatorFn, nil
}

func (v *ValidatePerSiteSrv6NetworkType) SnatPoolChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for snat_pool_choice")
	}
	return validatorFn, nil
}

func (v *ValidatePerSiteSrv6NetworkType) SliceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for slice")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidatePerSiteSrv6NetworkType) FleetsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for fleets")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for fleets")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated fleets")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items fleets")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidatePerSiteSrv6NetworkType) AccessNetworkRtargetsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for access_network_rtargets")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.RouteTarget, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.RouteTargetValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for access_network_rtargets")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.RouteTarget)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.RouteTarget, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated access_network_rtargets")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items access_network_rtargets")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidatePerSiteSrv6NetworkType) InternetRtargetsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for internet_rtargets")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.RouteTarget, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.RouteTargetValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for internet_rtargets")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.RouteTarget)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.RouteTarget, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated internet_rtargets")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items internet_rtargets")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidatePerSiteSrv6NetworkType) EnterpriseNetworkRtargetsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for enterprise_network_rtargets")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.RouteTarget, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.RouteTargetValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for enterprise_network_rtargets")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.RouteTarget)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.RouteTarget, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated enterprise_network_rtargets")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items enterprise_network_rtargets")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidatePerSiteSrv6NetworkType) ExportRtargetsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for export_rtargets")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.RouteTarget, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.RouteTargetValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for export_rtargets")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.RouteTarget)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.RouteTarget, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated export_rtargets")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items export_rtargets")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidatePerSiteSrv6NetworkType) RemoteSidStatsPlenValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for remote_sid_stats_plen")
	}

	return validatorFn, nil
}

func (v *ValidatePerSiteSrv6NetworkType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*PerSiteSrv6NetworkType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *PerSiteSrv6NetworkType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["access_network_rtargets"]; exists {
		vOpts := append(opts, db.WithValidateField("access_network_rtargets"))
		if err := fv(ctx, m.GetAccessNetworkRtargets(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["default_vip_choice"]; exists {
		val := m.GetDefaultVipChoice()
		vOpts := append(opts,
			db.WithValidateField("default_vip_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDefaultVipChoice().(type) {
	case *PerSiteSrv6NetworkType_InterfaceIpVip:
		if fv, exists := v.FldValidators["default_vip_choice.interface_ip_vip"]; exists {
			val := m.GetDefaultVipChoice().(*PerSiteSrv6NetworkType_InterfaceIpVip).InterfaceIpVip
			vOpts := append(opts,
				db.WithValidateField("default_vip_choice"),
				db.WithValidateField("interface_ip_vip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *PerSiteSrv6NetworkType_AnycastVip:
		if fv, exists := v.FldValidators["default_vip_choice.anycast_vip"]; exists {
			val := m.GetDefaultVipChoice().(*PerSiteSrv6NetworkType_AnycastVip).AnycastVip
			vOpts := append(opts,
				db.WithValidateField("default_vip_choice"),
				db.WithValidateField("anycast_vip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *PerSiteSrv6NetworkType_FleetVip:
		if fv, exists := v.FldValidators["default_vip_choice.fleet_vip"]; exists {
			val := m.GetDefaultVipChoice().(*PerSiteSrv6NetworkType_FleetVip).FleetVip
			vOpts := append(opts,
				db.WithValidateField("default_vip_choice"),
				db.WithValidateField("fleet_vip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["enterprise_network_rtargets"]; exists {
		vOpts := append(opts, db.WithValidateField("enterprise_network_rtargets"))
		if err := fv(ctx, m.GetEnterpriseNetworkRtargets(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["export_rtargets"]; exists {
		vOpts := append(opts, db.WithValidateField("export_rtargets"))
		if err := fv(ctx, m.GetExportRtargets(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["fleets"]; exists {
		vOpts := append(opts, db.WithValidateField("fleets"))
		if err := fv(ctx, m.GetFleets(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["internet_rtargets"]; exists {
		vOpts := append(opts, db.WithValidateField("internet_rtargets"))
		if err := fv(ctx, m.GetInternetRtargets(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["namespace_choice"]; exists {
		val := m.GetNamespaceChoice()
		vOpts := append(opts,
			db.WithValidateField("namespace_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetNamespaceChoice().(type) {
	case *PerSiteSrv6NetworkType_NoNamespaceNetwork:
		if fv, exists := v.FldValidators["namespace_choice.no_namespace_network"]; exists {
			val := m.GetNamespaceChoice().(*PerSiteSrv6NetworkType_NoNamespaceNetwork).NoNamespaceNetwork
			vOpts := append(opts,
				db.WithValidateField("namespace_choice"),
				db.WithValidateField("no_namespace_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *PerSiteSrv6NetworkType_Srv6NetworkNsParams:
		if fv, exists := v.FldValidators["namespace_choice.srv6_network_ns_params"]; exists {
			val := m.GetNamespaceChoice().(*PerSiteSrv6NetworkType_Srv6NetworkNsParams).Srv6NetworkNsParams
			vOpts := append(opts,
				db.WithValidateField("namespace_choice"),
				db.WithValidateField("srv6_network_ns_params"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["remote_sid_stats_plen"]; exists {

		vOpts := append(opts, db.WithValidateField("remote_sid_stats_plen"))
		if err := fv(ctx, m.GetRemoteSidStatsPlen(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["slice"]; exists {

		vOpts := append(opts, db.WithValidateField("slice"))
		if err := fv(ctx, m.GetSlice(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["snat_pool_choice"]; exists {
		val := m.GetSnatPoolChoice()
		vOpts := append(opts,
			db.WithValidateField("snat_pool_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSnatPoolChoice().(type) {
	case *PerSiteSrv6NetworkType_InterfaceIpSnatPool:
		if fv, exists := v.FldValidators["snat_pool_choice.interface_ip_snat_pool"]; exists {
			val := m.GetSnatPoolChoice().(*PerSiteSrv6NetworkType_InterfaceIpSnatPool).InterfaceIpSnatPool
			vOpts := append(opts,
				db.WithValidateField("snat_pool_choice"),
				db.WithValidateField("interface_ip_snat_pool"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *PerSiteSrv6NetworkType_SiteSnatPool:
		if fv, exists := v.FldValidators["snat_pool_choice.site_snat_pool"]; exists {
			val := m.GetSnatPoolChoice().(*PerSiteSrv6NetworkType_SiteSnatPool).SiteSnatPool
			vOpts := append(opts,
				db.WithValidateField("snat_pool_choice"),
				db.WithValidateField("site_snat_pool"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *PerSiteSrv6NetworkType_FleetSnatPool:
		if fv, exists := v.FldValidators["snat_pool_choice.fleet_snat_pool"]; exists {
			val := m.GetSnatPoolChoice().(*PerSiteSrv6NetworkType_FleetSnatPool).FleetSnatPool
			vOpts := append(opts,
				db.WithValidateField("snat_pool_choice"),
				db.WithValidateField("fleet_snat_pool"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultPerSiteSrv6NetworkTypeValidator = func() *ValidatePerSiteSrv6NetworkType {
	v := &ValidatePerSiteSrv6NetworkType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDefaultVipChoice := v.DefaultVipChoiceValidationRuleHandler
	rulesDefaultVipChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDefaultVipChoice(rulesDefaultVipChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for PerSiteSrv6NetworkType.default_vip_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["default_vip_choice"] = vFn

	vrhDefaultVipChoiceAnycastVip := v.DefaultVipChoiceAnycastVipValidationRuleHandler
	rulesDefaultVipChoiceAnycastVip := map[string]string{
		"ves.io.schema.rules.string.ip": "true",
	}
	vFnMap["default_vip_choice.anycast_vip"], err = vrhDefaultVipChoiceAnycastVip(rulesDefaultVipChoiceAnycastVip)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field PerSiteSrv6NetworkType.default_vip_choice_anycast_vip: %s", err)
		panic(errMsg)
	}

	v.FldValidators["default_vip_choice.anycast_vip"] = vFnMap["default_vip_choice.anycast_vip"]

	vrhNamespaceChoice := v.NamespaceChoiceValidationRuleHandler
	rulesNamespaceChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhNamespaceChoice(rulesNamespaceChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for PerSiteSrv6NetworkType.namespace_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["namespace_choice"] = vFn

	vrhSnatPoolChoice := v.SnatPoolChoiceValidationRuleHandler
	rulesSnatPoolChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSnatPoolChoice(rulesSnatPoolChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for PerSiteSrv6NetworkType.snat_pool_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["snat_pool_choice"] = vFn

	vrhSlice := v.SliceValidationRuleHandler
	rulesSlice := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhSlice(rulesSlice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for PerSiteSrv6NetworkType.slice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["slice"] = vFn

	vrhFleets := v.FleetsValidationRuleHandler
	rulesFleets := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "64",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhFleets(rulesFleets)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for PerSiteSrv6NetworkType.fleets: %s", err)
		panic(errMsg)
	}
	v.FldValidators["fleets"] = vFn

	vrhAccessNetworkRtargets := v.AccessNetworkRtargetsValidationRuleHandler
	rulesAccessNetworkRtargets := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "4",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhAccessNetworkRtargets(rulesAccessNetworkRtargets)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for PerSiteSrv6NetworkType.access_network_rtargets: %s", err)
		panic(errMsg)
	}
	v.FldValidators["access_network_rtargets"] = vFn

	vrhInternetRtargets := v.InternetRtargetsValidationRuleHandler
	rulesInternetRtargets := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "4",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhInternetRtargets(rulesInternetRtargets)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for PerSiteSrv6NetworkType.internet_rtargets: %s", err)
		panic(errMsg)
	}
	v.FldValidators["internet_rtargets"] = vFn

	vrhEnterpriseNetworkRtargets := v.EnterpriseNetworkRtargetsValidationRuleHandler
	rulesEnterpriseNetworkRtargets := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "4",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhEnterpriseNetworkRtargets(rulesEnterpriseNetworkRtargets)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for PerSiteSrv6NetworkType.enterprise_network_rtargets: %s", err)
		panic(errMsg)
	}
	v.FldValidators["enterprise_network_rtargets"] = vFn

	vrhExportRtargets := v.ExportRtargetsValidationRuleHandler
	rulesExportRtargets := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "4",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhExportRtargets(rulesExportRtargets)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for PerSiteSrv6NetworkType.export_rtargets: %s", err)
		panic(errMsg)
	}
	v.FldValidators["export_rtargets"] = vFn

	vrhRemoteSidStatsPlen := v.RemoteSidStatsPlenValidationRuleHandler
	rulesRemoteSidStatsPlen := map[string]string{
		"ves.io.schema.rules.uint32.lte": "96",
	}
	vFn, err = vrhRemoteSidStatsPlen(rulesRemoteSidStatsPlen)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for PerSiteSrv6NetworkType.remote_sid_stats_plen: %s", err)
		panic(errMsg)
	}
	v.FldValidators["remote_sid_stats_plen"] = vFn

	v.FldValidators["default_vip_choice.fleet_vip"] = AnyCastVIPFleetTypeValidator().Validate

	v.FldValidators["namespace_choice.srv6_network_ns_params"] = Srv6NetworkNsParametersTypeValidator().Validate

	v.FldValidators["snat_pool_choice.site_snat_pool"] = SNATPoolSiteTypeValidator().Validate
	v.FldValidators["snat_pool_choice.fleet_snat_pool"] = SNATPoolFleetTypeValidator().Validate

	return v
}()

func PerSiteSrv6NetworkTypeValidator() db.Validator {
	return DefaultPerSiteSrv6NetworkTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *PerTenantVIPType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *PerTenantVIPType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *PerTenantVIPType) DeepCopy() *PerTenantVIPType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &PerTenantVIPType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *PerTenantVIPType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *PerTenantVIPType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return PerTenantVIPTypeValidator().Validate(ctx, m, opts...)
}

type ValidatePerTenantVIPType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidatePerTenantVIPType) TenantVipMapValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemKeyRules := db.GetMapStringKeyRules(rules)
	itemKeyFn, err := db.NewStringValidationRuleHandler(itemKeyRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item key ValidationRuleHandler for tenant_vip_map")
	}
	itemValRules := db.GetMapStringValueRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemValRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item value ValidationRuleHandler for tenant_vip_map")
	}
	itemsValidatorFn := func(ctx context.Context, kv map[string]string, opts ...db.ValidateOpt) error {
		for key, value := range kv {
			if err := itemKeyFn(ctx, key, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element with key %v", key))
			}
			if err := itemValFn(ctx, value, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("value for element with key %v", key))
			}
		}
		return nil
	}
	mapValFn, err := db.NewMapValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Map ValidationRuleHandler for tenant_vip_map")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.(map[string]string)
		if !ok {
			return fmt.Errorf("Map validation expected map[ string ]string, got %T", val)
		}
		if err := mapValFn(ctx, len(elems), opts...); err != nil {
			return errors.Wrap(err, "map tenant_vip_map")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items tenant_vip_map")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidatePerTenantVIPType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*PerTenantVIPType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *PerTenantVIPType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["tenant_vip_map"]; exists {
		vOpts := append(opts, db.WithValidateField("tenant_vip_map"))
		if err := fv(ctx, m.GetTenantVipMap(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultPerTenantVIPTypeValidator = func() *ValidatePerTenantVIPType {
	v := &ValidatePerTenantVIPType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhTenantVipMap := v.TenantVipMapValidationRuleHandler
	rulesTenantVipMap := map[string]string{
		"ves.io.schema.rules.map.keys.string.max_len": "64",
		"ves.io.schema.rules.map.keys.string.min_len": "1",
		"ves.io.schema.rules.map.max_pairs":           "64",
		"ves.io.schema.rules.map.values.string.ip":    "true",
	}
	vFn, err = vrhTenantVipMap(rulesTenantVipMap)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for PerTenantVIPType.tenant_vip_map: %s", err)
		panic(errMsg)
	}
	v.FldValidators["tenant_vip_map"] = vFn

	return v
}()

func PerTenantVIPTypeValidator() db.Validator {
	return DefaultPerTenantVIPTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *ReplaceSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetNetworkChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetNetworkChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetStaticRoutesDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetStaticRoutesDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetStaticV6RoutesDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetStaticV6RoutesDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetNetworkChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetNetworkChoice() == nil {
		return nil, nil
	}
	switch m.GetNetworkChoice().(type) {
	case *ReplaceSpecType_GlobalNetwork:

		return nil, nil

	case *ReplaceSpecType_SiteLocalNetwork:

		return nil, nil

	case *ReplaceSpecType_SiteLocalInsideNetwork:

		return nil, nil

	case *ReplaceSpecType_PrivateNetwork:

		return nil, nil

	case *ReplaceSpecType_Srv6Network:
		drInfos, err := m.GetSrv6Network().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSrv6Network().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "srv6_network." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetStaticRoutesDRefInfo() ([]db.DRefInfo, error) {
	if m.GetStaticRoutes() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetStaticRoutes() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetStaticRoutes() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("static_routes[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetStaticV6RoutesDRefInfo() ([]db.DRefInfo, error) {
	if m.GetStaticV6Routes() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetStaticV6Routes() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetStaticV6Routes() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("static_v6_routes[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) NetworkChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for network_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) NetworkChoiceLegacyTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	conv_LegacyType := func(v interface{}) int32 {
		i := v.(ves_io_schema.VirtualNetworkType)
		return int32(i)
	}
	// ves_io_schema.VirtualNetworkType_name is generated in .pb.go
	oValidatorFn_LegacyType, err := db.NewEnumValidationRuleHandler(rules, ves_io_schema.VirtualNetworkType_name, conv_LegacyType)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for oneof sub-field legacy_type")
	}
	return oValidatorFn_LegacyType, nil
}

func (v *ValidateReplaceSpecType) StaticRoutesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for static_routes")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*StaticRouteViewType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := StaticRouteViewTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for static_routes")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*StaticRouteViewType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*StaticRouteViewType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated static_routes")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items static_routes")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) StaticV6RoutesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for static_v6_routes")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*StaticV6RouteViewType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := StaticV6RouteViewTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for static_v6_routes")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*StaticV6RouteViewType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*StaticV6RouteViewType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated static_v6_routes")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items static_v6_routes")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["network_choice"]; exists {
		val := m.GetNetworkChoice()
		vOpts := append(opts,
			db.WithValidateField("network_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetNetworkChoice().(type) {
	case *ReplaceSpecType_GlobalNetwork:
		if fv, exists := v.FldValidators["network_choice.global_network"]; exists {
			val := m.GetNetworkChoice().(*ReplaceSpecType_GlobalNetwork).GlobalNetwork
			vOpts := append(opts,
				db.WithValidateField("network_choice"),
				db.WithValidateField("global_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_SiteLocalNetwork:
		if fv, exists := v.FldValidators["network_choice.site_local_network"]; exists {
			val := m.GetNetworkChoice().(*ReplaceSpecType_SiteLocalNetwork).SiteLocalNetwork
			vOpts := append(opts,
				db.WithValidateField("network_choice"),
				db.WithValidateField("site_local_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_SiteLocalInsideNetwork:
		if fv, exists := v.FldValidators["network_choice.site_local_inside_network"]; exists {
			val := m.GetNetworkChoice().(*ReplaceSpecType_SiteLocalInsideNetwork).SiteLocalInsideNetwork
			vOpts := append(opts,
				db.WithValidateField("network_choice"),
				db.WithValidateField("site_local_inside_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_LegacyType:
		if fv, exists := v.FldValidators["network_choice.legacy_type"]; exists {
			val := m.GetNetworkChoice().(*ReplaceSpecType_LegacyType).LegacyType
			vOpts := append(opts,
				db.WithValidateField("network_choice"),
				db.WithValidateField("legacy_type"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_PrivateNetwork:
		if fv, exists := v.FldValidators["network_choice.private_network"]; exists {
			val := m.GetNetworkChoice().(*ReplaceSpecType_PrivateNetwork).PrivateNetwork
			vOpts := append(opts,
				db.WithValidateField("network_choice"),
				db.WithValidateField("private_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_Srv6Network:
		if fv, exists := v.FldValidators["network_choice.srv6_network"]; exists {
			val := m.GetNetworkChoice().(*ReplaceSpecType_Srv6Network).Srv6Network
			vOpts := append(opts,
				db.WithValidateField("network_choice"),
				db.WithValidateField("srv6_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["static_routes"]; exists {
		vOpts := append(opts, db.WithValidateField("static_routes"))
		if err := fv(ctx, m.GetStaticRoutes(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["static_v6_routes"]; exists {
		vOpts := append(opts, db.WithValidateField("static_v6_routes"))
		if err := fv(ctx, m.GetStaticV6Routes(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhNetworkChoice := v.NetworkChoiceValidationRuleHandler
	rulesNetworkChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhNetworkChoice(rulesNetworkChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.network_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["network_choice"] = vFn

	vrhNetworkChoiceLegacyType := v.NetworkChoiceLegacyTypeValidationRuleHandler
	rulesNetworkChoiceLegacyType := map[string]string{
		"ves.io.schema.rules.enum.in": "[0,1,2,3,4,7]",
	}
	vFnMap["network_choice.legacy_type"], err = vrhNetworkChoiceLegacyType(rulesNetworkChoiceLegacyType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field ReplaceSpecType.network_choice_legacy_type: %s", err)
		panic(errMsg)
	}

	v.FldValidators["network_choice.legacy_type"] = vFnMap["network_choice.legacy_type"]

	vrhStaticRoutes := v.StaticRoutesValidationRuleHandler
	rulesStaticRoutes := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "165",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhStaticRoutes(rulesStaticRoutes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.static_routes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["static_routes"] = vFn

	vrhStaticV6Routes := v.StaticV6RoutesValidationRuleHandler
	rulesStaticV6Routes := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "165",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhStaticV6Routes(rulesStaticV6Routes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.static_v6_routes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["static_v6_routes"] = vFn

	v.FldValidators["network_choice.srv6_network"] = PerSiteSrv6NetworkTypeValidator().Validate

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *SNATPoolFleetType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SNATPoolFleetType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SNATPoolFleetType) DeepCopy() *SNATPoolFleetType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SNATPoolFleetType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SNATPoolFleetType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SNATPoolFleetType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SNATPoolFleetTypeValidator().Validate(ctx, m, opts...)
}

func (m *SNATPoolFleetType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetSnatPoolAllocatorDRefInfo()

}

func (m *SNATPoolFleetType) GetSnatPoolAllocatorDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetSnatPoolAllocator()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("address_allocator.Object")
	dri := db.DRefInfo{
		RefdType:   "address_allocator.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "snat_pool_allocator",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetSnatPoolAllocatorDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *SNATPoolFleetType) GetSnatPoolAllocatorDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "address_allocator.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: address_allocator")
	}

	vref := m.GetSnatPoolAllocator()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "address_allocator.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

type ValidateSNATPoolFleetType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSNATPoolFleetType) SnatPoolAllocatorValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for snat_pool_allocator")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateSNATPoolFleetType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SNATPoolFleetType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SNATPoolFleetType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["snat_pool_allocator"]; exists {

		vOpts := append(opts, db.WithValidateField("snat_pool_allocator"))
		if err := fv(ctx, m.GetSnatPoolAllocator(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSNATPoolFleetTypeValidator = func() *ValidateSNATPoolFleetType {
	v := &ValidateSNATPoolFleetType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhSnatPoolAllocator := v.SnatPoolAllocatorValidationRuleHandler
	rulesSnatPoolAllocator := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhSnatPoolAllocator(rulesSnatPoolAllocator)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SNATPoolFleetType.snat_pool_allocator: %s", err)
		panic(errMsg)
	}
	v.FldValidators["snat_pool_allocator"] = vFn

	return v
}()

func SNATPoolFleetTypeValidator() db.Validator {
	return DefaultSNATPoolFleetTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *SNATPoolSiteType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SNATPoolSiteType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SNATPoolSiteType) DeepCopy() *SNATPoolSiteType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SNATPoolSiteType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SNATPoolSiteType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SNATPoolSiteType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SNATPoolSiteTypeValidator().Validate(ctx, m, opts...)
}

type ValidateSNATPoolSiteType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSNATPoolSiteType) NodeSnatPoolValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemKeyRules := db.GetMapStringKeyRules(rules)
	itemKeyFn, err := db.NewStringValidationRuleHandler(itemKeyRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item key ValidationRuleHandler for node_snat_pool")
	}
	itemsValidatorFn := func(ctx context.Context, kv map[string]*SNATPoolType, opts ...db.ValidateOpt) error {
		for key, value := range kv {
			if err := itemKeyFn(ctx, key, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element with key %v", key))
			}
			if err := SNATPoolTypeValidator().Validate(ctx, value, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("value for element with key %v", key))
			}
		}
		return nil
	}
	mapValFn, err := db.NewMapValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Map ValidationRuleHandler for node_snat_pool")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.(map[string]*SNATPoolType)
		if !ok {
			return fmt.Errorf("Map validation expected map[ string ]*SNATPoolType, got %T", val)
		}
		if err := mapValFn(ctx, len(elems), opts...); err != nil {
			return errors.Wrap(err, "map node_snat_pool")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items node_snat_pool")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateSNATPoolSiteType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SNATPoolSiteType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SNATPoolSiteType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["node_snat_pool"]; exists {
		vOpts := append(opts, db.WithValidateField("node_snat_pool"))
		if err := fv(ctx, m.GetNodeSnatPool(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSNATPoolSiteTypeValidator = func() *ValidateSNATPoolSiteType {
	v := &ValidateSNATPoolSiteType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhNodeSnatPool := v.NodeSnatPoolValidationRuleHandler
	rulesNodeSnatPool := map[string]string{
		"ves.io.schema.rules.map.keys.string.max_len": "64",
		"ves.io.schema.rules.map.keys.string.min_len": "1",
		"ves.io.schema.rules.map.max_pairs":           "128",
		"ves.io.schema.rules.message.required":        "true",
	}
	vFn, err = vrhNodeSnatPool(rulesNodeSnatPool)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SNATPoolSiteType.node_snat_pool: %s", err)
		panic(errMsg)
	}
	v.FldValidators["node_snat_pool"] = vFn

	return v
}()

func SNATPoolSiteTypeValidator() db.Validator {
	return DefaultSNATPoolSiteTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *SNATPoolType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SNATPoolType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SNATPoolType) DeepCopy() *SNATPoolType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SNATPoolType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SNATPoolType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SNATPoolType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SNATPoolTypeValidator().Validate(ctx, m, opts...)
}

type ValidateSNATPoolType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSNATPoolType) Ipv4PrefixesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for ipv4_prefixes")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for ipv4_prefixes")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated ipv4_prefixes")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items ipv4_prefixes")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateSNATPoolType) Ipv6PrefixesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for ipv6_prefixes")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for ipv6_prefixes")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated ipv6_prefixes")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items ipv6_prefixes")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateSNATPoolType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SNATPoolType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SNATPoolType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["ipv4_prefixes"]; exists {
		vOpts := append(opts, db.WithValidateField("ipv4_prefixes"))
		if err := fv(ctx, m.GetIpv4Prefixes(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["ipv6_prefixes"]; exists {
		vOpts := append(opts, db.WithValidateField("ipv6_prefixes"))
		if err := fv(ctx, m.GetIpv6Prefixes(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSNATPoolTypeValidator = func() *ValidateSNATPoolType {
	v := &ValidateSNATPoolType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhIpv4Prefixes := v.Ipv4PrefixesValidationRuleHandler
	rulesIpv4Prefixes := map[string]string{
		"ves.io.schema.rules.repeated.items.string.ipv4_prefix": "true",
		"ves.io.schema.rules.repeated.max_items":                "1",
	}
	vFn, err = vrhIpv4Prefixes(rulesIpv4Prefixes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SNATPoolType.ipv4_prefixes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ipv4_prefixes"] = vFn

	vrhIpv6Prefixes := v.Ipv6PrefixesValidationRuleHandler
	rulesIpv6Prefixes := map[string]string{
		"ves.io.schema.rules.repeated.items.string.ipv6_prefix": "true",
		"ves.io.schema.rules.repeated.max_items":                "1",
	}
	vFn, err = vrhIpv6Prefixes(rulesIpv6Prefixes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SNATPoolType.ipv6_prefixes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ipv6_prefixes"] = vFn

	return v
}()

func SNATPoolTypeValidator() db.Validator {
	return DefaultSNATPoolTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *SegmentNetworkType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SegmentNetworkType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SegmentNetworkType) DeepCopy() *SegmentNetworkType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SegmentNetworkType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SegmentNetworkType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SegmentNetworkType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SegmentNetworkTypeValidator().Validate(ctx, m, opts...)
}

type ValidateSegmentNetworkType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSegmentNetworkType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SegmentNetworkType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SegmentNetworkType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["internet_enabled"]; exists {

		vOpts := append(opts, db.WithValidateField("internet_enabled"))
		if err := fv(ctx, m.GetInternetEnabled(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSegmentNetworkTypeValidator = func() *ValidateSegmentNetworkType {
	v := &ValidateSegmentNetworkType{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func SegmentNetworkTypeValidator() db.Validator {
	return DefaultSegmentNetworkTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *Srv6NetworkNsParametersType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *Srv6NetworkNsParametersType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *Srv6NetworkNsParametersType) DeepCopy() *Srv6NetworkNsParametersType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &Srv6NetworkNsParametersType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *Srv6NetworkNsParametersType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *Srv6NetworkNsParametersType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return Srv6NetworkNsParametersTypeValidator().Validate(ctx, m, opts...)
}

type ValidateSrv6NetworkNsParametersType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSrv6NetworkNsParametersType) NamespaceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for namespace")
	}

	return validatorFn, nil
}

func (v *ValidateSrv6NetworkNsParametersType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*Srv6NetworkNsParametersType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *Srv6NetworkNsParametersType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSrv6NetworkNsParametersTypeValidator = func() *ValidateSrv6NetworkNsParametersType {
	v := &ValidateSrv6NetworkNsParametersType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhNamespace := v.NamespaceValidationRuleHandler
	rulesNamespace := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhNamespace(rulesNamespace)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for Srv6NetworkNsParametersType.namespace: %s", err)
		panic(errMsg)
	}
	v.FldValidators["namespace"] = vFn

	return v
}()

func Srv6NetworkNsParametersTypeValidator() db.Validator {
	return DefaultSrv6NetworkNsParametersTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *StaticRouteViewType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *StaticRouteViewType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *StaticRouteViewType) DeepCopy() *StaticRouteViewType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &StaticRouteViewType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *StaticRouteViewType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *StaticRouteViewType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return StaticRouteViewTypeValidator().Validate(ctx, m, opts...)
}

func (m *StaticRouteViewType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetNextHopChoiceDRefInfo()

}

func (m *StaticRouteViewType) GetNextHopChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetNextHopChoice().(type) {
	case *StaticRouteViewType_Interface:

		vref := m.GetInterface()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("network_interface.Object")
		dri := db.DRefInfo{
			RefdType:   "network_interface.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "interface",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	case *StaticRouteViewType_DefaultGateway:

		return nil, nil

	default:
		return nil, nil
	}
}

// GetNextHopChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *StaticRouteViewType) GetNextHopChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetNextHopChoice().(type) {
	case *StaticRouteViewType_Interface:
		refdType, err := d.TypeForEntryKind("", "", "network_interface.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: network_interface")
		}

		vref := m.GetInterface()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "network_interface.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	case *StaticRouteViewType_DefaultGateway:

	}

	return entries, nil
}

type ValidateStaticRouteViewType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateStaticRouteViewType) NextHopChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for next_hop_choice")
	}
	return validatorFn, nil
}

func (v *ValidateStaticRouteViewType) NextHopChoiceIpAddressValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_IpAddress, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ip_address")
	}
	return oValidatorFn_IpAddress, nil
}

func (v *ValidateStaticRouteViewType) IpPrefixesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for ip_prefixes")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for ip_prefixes")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated ip_prefixes")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items ip_prefixes")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateStaticRouteViewType) AttrsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepEnumItemRules(rules)
	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema.RouteAttrType)
		return int32(i)
	}
	// ves_io_schema.RouteAttrType_name is generated in .pb.go
	itemValFn, err := db.NewEnumValidationRuleHandler(itemRules, ves_io_schema.RouteAttrType_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for attrs")
	}
	itemsValidatorFn := func(ctx context.Context, elems []ves_io_schema.RouteAttrType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for attrs")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]ves_io_schema.RouteAttrType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []ves_io_schema.RouteAttrType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated attrs")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items attrs")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateStaticRouteViewType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*StaticRouteViewType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *StaticRouteViewType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["attrs"]; exists {
		vOpts := append(opts, db.WithValidateField("attrs"))
		if err := fv(ctx, m.GetAttrs(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["ip_prefixes"]; exists {
		vOpts := append(opts, db.WithValidateField("ip_prefixes"))
		if err := fv(ctx, m.GetIpPrefixes(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["next_hop_choice"]; exists {
		val := m.GetNextHopChoice()
		vOpts := append(opts,
			db.WithValidateField("next_hop_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetNextHopChoice().(type) {
	case *StaticRouteViewType_IpAddress:
		if fv, exists := v.FldValidators["next_hop_choice.ip_address"]; exists {
			val := m.GetNextHopChoice().(*StaticRouteViewType_IpAddress).IpAddress
			vOpts := append(opts,
				db.WithValidateField("next_hop_choice"),
				db.WithValidateField("ip_address"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *StaticRouteViewType_Interface:
		if fv, exists := v.FldValidators["next_hop_choice.interface"]; exists {
			val := m.GetNextHopChoice().(*StaticRouteViewType_Interface).Interface
			vOpts := append(opts,
				db.WithValidateField("next_hop_choice"),
				db.WithValidateField("interface"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *StaticRouteViewType_DefaultGateway:
		if fv, exists := v.FldValidators["next_hop_choice.default_gateway"]; exists {
			val := m.GetNextHopChoice().(*StaticRouteViewType_DefaultGateway).DefaultGateway
			vOpts := append(opts,
				db.WithValidateField("next_hop_choice"),
				db.WithValidateField("default_gateway"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultStaticRouteViewTypeValidator = func() *ValidateStaticRouteViewType {
	v := &ValidateStaticRouteViewType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhNextHopChoice := v.NextHopChoiceValidationRuleHandler
	rulesNextHopChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhNextHopChoice(rulesNextHopChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for StaticRouteViewType.next_hop_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["next_hop_choice"] = vFn

	vrhNextHopChoiceIpAddress := v.NextHopChoiceIpAddressValidationRuleHandler
	rulesNextHopChoiceIpAddress := map[string]string{
		"ves.io.schema.rules.string.ipv4": "true",
	}
	vFnMap["next_hop_choice.ip_address"], err = vrhNextHopChoiceIpAddress(rulesNextHopChoiceIpAddress)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field StaticRouteViewType.next_hop_choice_ip_address: %s", err)
		panic(errMsg)
	}

	v.FldValidators["next_hop_choice.ip_address"] = vFnMap["next_hop_choice.ip_address"]

	vrhIpPrefixes := v.IpPrefixesValidationRuleHandler
	rulesIpPrefixes := map[string]string{
		"ves.io.schema.rules.message.required":                  "true",
		"ves.io.schema.rules.repeated.items.string.ipv4_prefix": "true",
		"ves.io.schema.rules.repeated.max_items":                "256",
		"ves.io.schema.rules.repeated.min_items":                "1",
		"ves.io.schema.rules.repeated.unique":                   "true",
	}
	vFn, err = vrhIpPrefixes(rulesIpPrefixes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for StaticRouteViewType.ip_prefixes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ip_prefixes"] = vFn

	vrhAttrs := v.AttrsValidationRuleHandler
	rulesAttrs := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "4",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhAttrs(rulesAttrs)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for StaticRouteViewType.attrs: %s", err)
		panic(errMsg)
	}
	v.FldValidators["attrs"] = vFn

	v.FldValidators["next_hop_choice.interface"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func StaticRouteViewTypeValidator() db.Validator {
	return DefaultStaticRouteViewTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *StaticV6RouteViewType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *StaticV6RouteViewType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *StaticV6RouteViewType) DeepCopy() *StaticV6RouteViewType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &StaticV6RouteViewType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *StaticV6RouteViewType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *StaticV6RouteViewType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return StaticV6RouteViewTypeValidator().Validate(ctx, m, opts...)
}

func (m *StaticV6RouteViewType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetNextHopChoiceDRefInfo()

}

func (m *StaticV6RouteViewType) GetNextHopChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetNextHopChoice().(type) {
	case *StaticV6RouteViewType_Interface:

		vref := m.GetInterface()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("network_interface.Object")
		dri := db.DRefInfo{
			RefdType:   "network_interface.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "interface",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	case *StaticV6RouteViewType_DefaultGateway:

		return nil, nil

	default:
		return nil, nil
	}
}

// GetNextHopChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *StaticV6RouteViewType) GetNextHopChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetNextHopChoice().(type) {
	case *StaticV6RouteViewType_Interface:
		refdType, err := d.TypeForEntryKind("", "", "network_interface.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: network_interface")
		}

		vref := m.GetInterface()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "network_interface.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	case *StaticV6RouteViewType_DefaultGateway:

	}

	return entries, nil
}

type ValidateStaticV6RouteViewType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateStaticV6RouteViewType) NextHopChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for next_hop_choice")
	}
	return validatorFn, nil
}

func (v *ValidateStaticV6RouteViewType) NextHopChoiceIpAddressValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_IpAddress, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ip_address")
	}
	return oValidatorFn_IpAddress, nil
}

func (v *ValidateStaticV6RouteViewType) IpPrefixesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for ip_prefixes")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for ip_prefixes")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated ip_prefixes")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items ip_prefixes")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateStaticV6RouteViewType) AttrsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepEnumItemRules(rules)
	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema.RouteAttrType)
		return int32(i)
	}
	// ves_io_schema.RouteAttrType_name is generated in .pb.go
	itemValFn, err := db.NewEnumValidationRuleHandler(itemRules, ves_io_schema.RouteAttrType_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for attrs")
	}
	itemsValidatorFn := func(ctx context.Context, elems []ves_io_schema.RouteAttrType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for attrs")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]ves_io_schema.RouteAttrType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []ves_io_schema.RouteAttrType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated attrs")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items attrs")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateStaticV6RouteViewType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*StaticV6RouteViewType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *StaticV6RouteViewType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["attrs"]; exists {
		vOpts := append(opts, db.WithValidateField("attrs"))
		if err := fv(ctx, m.GetAttrs(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["ip_prefixes"]; exists {
		vOpts := append(opts, db.WithValidateField("ip_prefixes"))
		if err := fv(ctx, m.GetIpPrefixes(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["next_hop_choice"]; exists {
		val := m.GetNextHopChoice()
		vOpts := append(opts,
			db.WithValidateField("next_hop_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetNextHopChoice().(type) {
	case *StaticV6RouteViewType_IpAddress:
		if fv, exists := v.FldValidators["next_hop_choice.ip_address"]; exists {
			val := m.GetNextHopChoice().(*StaticV6RouteViewType_IpAddress).IpAddress
			vOpts := append(opts,
				db.WithValidateField("next_hop_choice"),
				db.WithValidateField("ip_address"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *StaticV6RouteViewType_Interface:
		if fv, exists := v.FldValidators["next_hop_choice.interface"]; exists {
			val := m.GetNextHopChoice().(*StaticV6RouteViewType_Interface).Interface
			vOpts := append(opts,
				db.WithValidateField("next_hop_choice"),
				db.WithValidateField("interface"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *StaticV6RouteViewType_DefaultGateway:
		if fv, exists := v.FldValidators["next_hop_choice.default_gateway"]; exists {
			val := m.GetNextHopChoice().(*StaticV6RouteViewType_DefaultGateway).DefaultGateway
			vOpts := append(opts,
				db.WithValidateField("next_hop_choice"),
				db.WithValidateField("default_gateway"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultStaticV6RouteViewTypeValidator = func() *ValidateStaticV6RouteViewType {
	v := &ValidateStaticV6RouteViewType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhNextHopChoice := v.NextHopChoiceValidationRuleHandler
	rulesNextHopChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhNextHopChoice(rulesNextHopChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for StaticV6RouteViewType.next_hop_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["next_hop_choice"] = vFn

	vrhNextHopChoiceIpAddress := v.NextHopChoiceIpAddressValidationRuleHandler
	rulesNextHopChoiceIpAddress := map[string]string{
		"ves.io.schema.rules.string.ipv6": "true",
	}
	vFnMap["next_hop_choice.ip_address"], err = vrhNextHopChoiceIpAddress(rulesNextHopChoiceIpAddress)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field StaticV6RouteViewType.next_hop_choice_ip_address: %s", err)
		panic(errMsg)
	}

	v.FldValidators["next_hop_choice.ip_address"] = vFnMap["next_hop_choice.ip_address"]

	vrhIpPrefixes := v.IpPrefixesValidationRuleHandler
	rulesIpPrefixes := map[string]string{
		"ves.io.schema.rules.message.required":                  "true",
		"ves.io.schema.rules.repeated.items.string.ipv6_prefix": "true",
		"ves.io.schema.rules.repeated.max_items":                "256",
		"ves.io.schema.rules.repeated.min_items":                "1",
		"ves.io.schema.rules.repeated.unique":                   "true",
	}
	vFn, err = vrhIpPrefixes(rulesIpPrefixes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for StaticV6RouteViewType.ip_prefixes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ip_prefixes"] = vFn

	vrhAttrs := v.AttrsValidationRuleHandler
	rulesAttrs := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "4",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhAttrs(rulesAttrs)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for StaticV6RouteViewType.attrs: %s", err)
		panic(errMsg)
	}
	v.FldValidators["attrs"] = vFn

	v.FldValidators["next_hop_choice.interface"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func StaticV6RouteViewTypeValidator() db.Validator {
	return DefaultStaticV6RouteViewTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *StaticV6RoutesListType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *StaticV6RoutesListType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *StaticV6RoutesListType) DeepCopy() *StaticV6RoutesListType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &StaticV6RoutesListType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *StaticV6RoutesListType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *StaticV6RoutesListType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return StaticV6RoutesListTypeValidator().Validate(ctx, m, opts...)
}

func (m *StaticV6RoutesListType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetStaticRoutesDRefInfo()

}

// GetDRefInfo for the field's type
func (m *StaticV6RoutesListType) GetStaticRoutesDRefInfo() ([]db.DRefInfo, error) {
	if m.GetStaticRoutes() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetStaticRoutes() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetStaticRoutes() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("static_routes[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

type ValidateStaticV6RoutesListType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateStaticV6RoutesListType) StaticRoutesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for static_routes")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*StaticV6RouteViewType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := StaticV6RouteViewTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for static_routes")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*StaticV6RouteViewType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*StaticV6RouteViewType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated static_routes")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items static_routes")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateStaticV6RoutesListType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*StaticV6RoutesListType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *StaticV6RoutesListType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["static_routes"]; exists {
		vOpts := append(opts, db.WithValidateField("static_routes"))
		if err := fv(ctx, m.GetStaticRoutes(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultStaticV6RoutesListTypeValidator = func() *ValidateStaticV6RoutesListType {
	v := &ValidateStaticV6RoutesListType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhStaticRoutes := v.StaticRoutesValidationRuleHandler
	rulesStaticRoutes := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "16",
		"ves.io.schema.rules.repeated.min_items": "1",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhStaticRoutes(rulesStaticRoutes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for StaticV6RoutesListType.static_routes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["static_routes"] = vFn

	return v
}()

func StaticV6RoutesListTypeValidator() db.Validator {
	return DefaultStaticV6RoutesListTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *VoltADNPrivateNetworkReInfoType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *VoltADNPrivateNetworkReInfoType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *VoltADNPrivateNetworkReInfoType) DeepCopy() *VoltADNPrivateNetworkReInfoType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &VoltADNPrivateNetworkReInfoType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *VoltADNPrivateNetworkReInfoType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *VoltADNPrivateNetworkReInfoType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return VoltADNPrivateNetworkReInfoTypeValidator().Validate(ctx, m, opts...)
}

type ValidateVoltADNPrivateNetworkReInfoType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateVoltADNPrivateNetworkReInfoType) VlanValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for vlan")
	}

	return validatorFn, nil
}

func (v *ValidateVoltADNPrivateNetworkReInfoType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*VoltADNPrivateNetworkReInfoType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *VoltADNPrivateNetworkReInfoType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["node_selector"]; exists {

		vOpts := append(opts, db.WithValidateField("node_selector"))
		if err := fv(ctx, m.GetNodeSelector(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["vlan"]; exists {

		vOpts := append(opts, db.WithValidateField("vlan"))
		if err := fv(ctx, m.GetVlan(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultVoltADNPrivateNetworkReInfoTypeValidator = func() *ValidateVoltADNPrivateNetworkReInfoType {
	v := &ValidateVoltADNPrivateNetworkReInfoType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhVlan := v.VlanValidationRuleHandler
	rulesVlan := map[string]string{
		"ves.io.schema.rules.uint32.gte": "1",
		"ves.io.schema.rules.uint32.lte": "4094",
	}
	vFn, err = vrhVlan(rulesVlan)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for VoltADNPrivateNetworkReInfoType.vlan: %s", err)
		panic(errMsg)
	}
	v.FldValidators["vlan"] = vFn

	v.FldValidators["node_selector"] = ves_io_schema.LabelSelectorTypeValidator().Validate

	return v
}()

func VoltADNPrivateNetworkReInfoTypeValidator() db.Validator {
	return DefaultVoltADNPrivateNetworkReInfoTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *VoltADNPrivateNetworkTenantInfoType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *VoltADNPrivateNetworkTenantInfoType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *VoltADNPrivateNetworkTenantInfoType) DeepCopy() *VoltADNPrivateNetworkTenantInfoType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &VoltADNPrivateNetworkTenantInfoType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *VoltADNPrivateNetworkTenantInfoType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *VoltADNPrivateNetworkTenantInfoType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return VoltADNPrivateNetworkTenantInfoTypeValidator().Validate(ctx, m, opts...)
}

type ValidateVoltADNPrivateNetworkTenantInfoType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateVoltADNPrivateNetworkTenantInfoType) DefaultPrivateVipValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for default_private_vip")
	}

	return validatorFn, nil
}

func (v *ValidateVoltADNPrivateNetworkTenantInfoType) FinalDefaultPrivateVipValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for final_default_private_vip")
	}

	return validatorFn, nil
}

func (v *ValidateVoltADNPrivateNetworkTenantInfoType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*VoltADNPrivateNetworkTenantInfoType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *VoltADNPrivateNetworkTenantInfoType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["default_private_vip"]; exists {

		vOpts := append(opts, db.WithValidateField("default_private_vip"))
		if err := fv(ctx, m.GetDefaultPrivateVip(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["final_default_private_vip"]; exists {

		vOpts := append(opts, db.WithValidateField("final_default_private_vip"))
		if err := fv(ctx, m.GetFinalDefaultPrivateVip(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultVoltADNPrivateNetworkTenantInfoTypeValidator = func() *ValidateVoltADNPrivateNetworkTenantInfoType {
	v := &ValidateVoltADNPrivateNetworkTenantInfoType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDefaultPrivateVip := v.DefaultPrivateVipValidationRuleHandler
	rulesDefaultPrivateVip := map[string]string{
		"ves.io.schema.rules.string.ip": "true",
	}
	vFn, err = vrhDefaultPrivateVip(rulesDefaultPrivateVip)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for VoltADNPrivateNetworkTenantInfoType.default_private_vip: %s", err)
		panic(errMsg)
	}
	v.FldValidators["default_private_vip"] = vFn

	vrhFinalDefaultPrivateVip := v.FinalDefaultPrivateVipValidationRuleHandler
	rulesFinalDefaultPrivateVip := map[string]string{
		"ves.io.schema.rules.string.ip": "true",
	}
	vFn, err = vrhFinalDefaultPrivateVip(rulesFinalDefaultPrivateVip)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for VoltADNPrivateNetworkTenantInfoType.final_default_private_vip: %s", err)
		panic(errMsg)
	}
	v.FldValidators["final_default_private_vip"] = vFn

	return v
}()

func VoltADNPrivateNetworkTenantInfoTypeValidator() db.Validator {
	return DefaultVoltADNPrivateNetworkTenantInfoTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *VoltADNPrivateNetworkType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *VoltADNPrivateNetworkType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *VoltADNPrivateNetworkType) DeepCopy() *VoltADNPrivateNetworkType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &VoltADNPrivateNetworkType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *VoltADNPrivateNetworkType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *VoltADNPrivateNetworkType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return VoltADNPrivateNetworkTypeValidator().Validate(ctx, m, opts...)
}

type ValidateVoltADNPrivateNetworkType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateVoltADNPrivateNetworkType) DedicatedVipChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for dedicated_vip_choice")
	}
	return validatorFn, nil
}

func (v *ValidateVoltADNPrivateNetworkType) DnsChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for dns_choice")
	}
	return validatorFn, nil
}

func (v *ValidateVoltADNPrivateNetworkType) PrivateAccessChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for private_access_choice")
	}
	return validatorFn, nil
}

func (v *ValidateVoltADNPrivateNetworkType) ReInfoMapValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemKeyRules := db.GetMapStringKeyRules(rules)
	itemKeyFn, err := db.NewStringValidationRuleHandler(itemKeyRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item key ValidationRuleHandler for re_info_map")
	}
	itemsValidatorFn := func(ctx context.Context, kv map[string]*VoltADNPrivateNetworkReInfoType, opts ...db.ValidateOpt) error {
		for key, value := range kv {
			if err := itemKeyFn(ctx, key, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element with key %v", key))
			}
			if err := VoltADNPrivateNetworkReInfoTypeValidator().Validate(ctx, value, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("value for element with key %v", key))
			}
		}
		return nil
	}
	mapValFn, err := db.NewMapValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Map ValidationRuleHandler for re_info_map")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.(map[string]*VoltADNPrivateNetworkReInfoType)
		if !ok {
			return fmt.Errorf("Map validation expected map[ string ]*VoltADNPrivateNetworkReInfoType, got %T", val)
		}
		if err := mapValFn(ctx, len(elems), opts...); err != nil {
			return errors.Wrap(err, "map re_info_map")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items re_info_map")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateVoltADNPrivateNetworkType) OwnerTenantIdValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for owner_tenant_id")
	}

	return validatorFn, nil
}

func (v *ValidateVoltADNPrivateNetworkType) TenantInfoMapValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemKeyRules := db.GetMapStringKeyRules(rules)
	itemKeyFn, err := db.NewStringValidationRuleHandler(itemKeyRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item key ValidationRuleHandler for tenant_info_map")
	}
	itemsValidatorFn := func(ctx context.Context, kv map[string]*VoltADNPrivateNetworkTenantInfoType, opts ...db.ValidateOpt) error {
		for key, value := range kv {
			if err := itemKeyFn(ctx, key, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element with key %v", key))
			}
			if err := VoltADNPrivateNetworkTenantInfoTypeValidator().Validate(ctx, value, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("value for element with key %v", key))
			}
		}
		return nil
	}
	mapValFn, err := db.NewMapValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Map ValidationRuleHandler for tenant_info_map")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.(map[string]*VoltADNPrivateNetworkTenantInfoType)
		if !ok {
			return fmt.Errorf("Map validation expected map[ string ]*VoltADNPrivateNetworkTenantInfoType, got %T", val)
		}
		if err := mapValFn(ctx, len(elems), opts...); err != nil {
			return errors.Wrap(err, "map tenant_info_map")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items tenant_info_map")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateVoltADNPrivateNetworkType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*VoltADNPrivateNetworkType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *VoltADNPrivateNetworkType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["common_node_selector"]; exists {

		vOpts := append(opts, db.WithValidateField("common_node_selector"))
		if err := fv(ctx, m.GetCommonNodeSelector(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["dedicated_vip_choice"]; exists {
		val := m.GetDedicatedVipChoice()
		vOpts := append(opts,
			db.WithValidateField("dedicated_vip_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDedicatedVipChoice().(type) {
	case *VoltADNPrivateNetworkType_NoAdvertiseDedicatedVips:
		if fv, exists := v.FldValidators["dedicated_vip_choice.no_advertise_dedicated_vips"]; exists {
			val := m.GetDedicatedVipChoice().(*VoltADNPrivateNetworkType_NoAdvertiseDedicatedVips).NoAdvertiseDedicatedVips
			vOpts := append(opts,
				db.WithValidateField("dedicated_vip_choice"),
				db.WithValidateField("no_advertise_dedicated_vips"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *VoltADNPrivateNetworkType_AdvertiseDedicatedVips:
		if fv, exists := v.FldValidators["dedicated_vip_choice.advertise_dedicated_vips"]; exists {
			val := m.GetDedicatedVipChoice().(*VoltADNPrivateNetworkType_AdvertiseDedicatedVips).AdvertiseDedicatedVips
			vOpts := append(opts,
				db.WithValidateField("dedicated_vip_choice"),
				db.WithValidateField("advertise_dedicated_vips"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["dns_choice"]; exists {
		val := m.GetDnsChoice()
		vOpts := append(opts,
			db.WithValidateField("dns_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDnsChoice().(type) {
	case *VoltADNPrivateNetworkType_NoPrivateDns:
		if fv, exists := v.FldValidators["dns_choice.no_private_dns"]; exists {
			val := m.GetDnsChoice().(*VoltADNPrivateNetworkType_NoPrivateDns).NoPrivateDns
			vOpts := append(opts,
				db.WithValidateField("dns_choice"),
				db.WithValidateField("no_private_dns"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *VoltADNPrivateNetworkType_PrivateDns:
		if fv, exists := v.FldValidators["dns_choice.private_dns"]; exists {
			val := m.GetDnsChoice().(*VoltADNPrivateNetworkType_PrivateDns).PrivateDns
			vOpts := append(opts,
				db.WithValidateField("dns_choice"),
				db.WithValidateField("private_dns"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["owner_tenant_id"]; exists {

		vOpts := append(opts, db.WithValidateField("owner_tenant_id"))
		if err := fv(ctx, m.GetOwnerTenantId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["private_access_choice"]; exists {
		val := m.GetPrivateAccessChoice()
		vOpts := append(opts,
			db.WithValidateField("private_access_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetPrivateAccessChoice().(type) {
	case *VoltADNPrivateNetworkType_NoPrivateAccess:
		if fv, exists := v.FldValidators["private_access_choice.no_private_access"]; exists {
			val := m.GetPrivateAccessChoice().(*VoltADNPrivateNetworkType_NoPrivateAccess).NoPrivateAccess
			vOpts := append(opts,
				db.WithValidateField("private_access_choice"),
				db.WithValidateField("no_private_access"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *VoltADNPrivateNetworkType_PrivateAccessEnabled:
		if fv, exists := v.FldValidators["private_access_choice.private_access_enabled"]; exists {
			val := m.GetPrivateAccessChoice().(*VoltADNPrivateNetworkType_PrivateAccessEnabled).PrivateAccessEnabled
			vOpts := append(opts,
				db.WithValidateField("private_access_choice"),
				db.WithValidateField("private_access_enabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["re_info_map"]; exists {
		vOpts := append(opts, db.WithValidateField("re_info_map"))
		if err := fv(ctx, m.GetReInfoMap(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tenant_info_map"]; exists {
		vOpts := append(opts, db.WithValidateField("tenant_info_map"))
		if err := fv(ctx, m.GetTenantInfoMap(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultVoltADNPrivateNetworkTypeValidator = func() *ValidateVoltADNPrivateNetworkType {
	v := &ValidateVoltADNPrivateNetworkType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDedicatedVipChoice := v.DedicatedVipChoiceValidationRuleHandler
	rulesDedicatedVipChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDedicatedVipChoice(rulesDedicatedVipChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for VoltADNPrivateNetworkType.dedicated_vip_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["dedicated_vip_choice"] = vFn

	vrhDnsChoice := v.DnsChoiceValidationRuleHandler
	rulesDnsChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDnsChoice(rulesDnsChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for VoltADNPrivateNetworkType.dns_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["dns_choice"] = vFn

	vrhPrivateAccessChoice := v.PrivateAccessChoiceValidationRuleHandler
	rulesPrivateAccessChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhPrivateAccessChoice(rulesPrivateAccessChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for VoltADNPrivateNetworkType.private_access_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["private_access_choice"] = vFn

	vrhReInfoMap := v.ReInfoMapValidationRuleHandler
	rulesReInfoMap := map[string]string{
		"ves.io.schema.rules.map.keys.string.max_len": "64",
		"ves.io.schema.rules.map.keys.string.min_len": "1",
		"ves.io.schema.rules.map.max_pairs":           "64",
	}
	vFn, err = vrhReInfoMap(rulesReInfoMap)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for VoltADNPrivateNetworkType.re_info_map: %s", err)
		panic(errMsg)
	}
	v.FldValidators["re_info_map"] = vFn

	vrhOwnerTenantId := v.OwnerTenantIdValidationRuleHandler
	rulesOwnerTenantId := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_bytes": "64",
		"ves.io.schema.rules.string.min_bytes": "1",
	}
	vFn, err = vrhOwnerTenantId(rulesOwnerTenantId)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for VoltADNPrivateNetworkType.owner_tenant_id: %s", err)
		panic(errMsg)
	}
	v.FldValidators["owner_tenant_id"] = vFn

	vrhTenantInfoMap := v.TenantInfoMapValidationRuleHandler
	rulesTenantInfoMap := map[string]string{
		"ves.io.schema.rules.map.keys.string.max_len": "64",
		"ves.io.schema.rules.map.keys.string.min_len": "1",
		"ves.io.schema.rules.map.max_pairs":           "64",
	}
	vFn, err = vrhTenantInfoMap(rulesTenantInfoMap)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for VoltADNPrivateNetworkType.tenant_info_map: %s", err)
		panic(errMsg)
	}
	v.FldValidators["tenant_info_map"] = vFn

	v.FldValidators["dns_choice.private_dns"] = DNSServersListValidator().Validate

	v.FldValidators["common_node_selector"] = ves_io_schema.LabelSelectorTypeValidator().Validate

	return v
}()

func VoltADNPrivateNetworkTypeValidator() db.Validator {
	return DefaultVoltADNPrivateNetworkTypeValidator
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetNetworkChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.NetworkChoice.(type) {
	case nil:
		o.NetworkChoice = nil

	case *CreateSpecType_GlobalNetwork:
		o.NetworkChoice = &GlobalSpecType_GlobalNetwork{GlobalNetwork: of.GlobalNetwork}

	case *CreateSpecType_LegacyType:
		o.NetworkChoice = &GlobalSpecType_LegacyType{LegacyType: of.LegacyType}

	case *CreateSpecType_SiteLocalInsideNetwork:
		o.NetworkChoice = &GlobalSpecType_SiteLocalInsideNetwork{SiteLocalInsideNetwork: of.SiteLocalInsideNetwork}

	case *CreateSpecType_SiteLocalNetwork:
		o.NetworkChoice = &GlobalSpecType_SiteLocalNetwork{SiteLocalNetwork: of.SiteLocalNetwork}

	case *CreateSpecType_Srv6Network:
		o.NetworkChoice = &GlobalSpecType_Srv6Network{Srv6Network: of.Srv6Network}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetNetworkChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.NetworkChoice.(type) {
	case nil:
		r.NetworkChoice = nil

	case *GlobalSpecType_GlobalNetwork:
		r.NetworkChoice = &CreateSpecType_GlobalNetwork{GlobalNetwork: of.GlobalNetwork}

	case *GlobalSpecType_LegacyType:
		r.NetworkChoice = &CreateSpecType_LegacyType{LegacyType: of.LegacyType}

	case *GlobalSpecType_SiteLocalInsideNetwork:
		r.NetworkChoice = &CreateSpecType_SiteLocalInsideNetwork{SiteLocalInsideNetwork: of.SiteLocalInsideNetwork}

	case *GlobalSpecType_SiteLocalNetwork:
		r.NetworkChoice = &CreateSpecType_SiteLocalNetwork{SiteLocalNetwork: of.SiteLocalNetwork}

	case *GlobalSpecType_Srv6Network:
		r.NetworkChoice = &CreateSpecType_Srv6Network{Srv6Network: of.Srv6Network}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *CreateSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetNetworkChoiceFromGlobalSpecType(f)

}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *CreateSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *CreateSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetNetworkChoiceToGlobalSpecType(f)

}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *CreateSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetNetworkChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.NetworkChoice.(type) {
	case nil:
		o.NetworkChoice = nil

	case *GetSpecType_GlobalNetwork:
		o.NetworkChoice = &GlobalSpecType_GlobalNetwork{GlobalNetwork: of.GlobalNetwork}

	case *GetSpecType_LegacyType:
		o.NetworkChoice = &GlobalSpecType_LegacyType{LegacyType: of.LegacyType}

	case *GetSpecType_PrivateNetwork:
		o.NetworkChoice = &GlobalSpecType_PrivateNetwork{PrivateNetwork: of.PrivateNetwork}

	case *GetSpecType_SegmentNetwork:
		o.NetworkChoice = &GlobalSpecType_SegmentNetwork{SegmentNetwork: of.SegmentNetwork}

	case *GetSpecType_SiteLocalInsideNetwork:
		o.NetworkChoice = &GlobalSpecType_SiteLocalInsideNetwork{SiteLocalInsideNetwork: of.SiteLocalInsideNetwork}

	case *GetSpecType_SiteLocalNetwork:
		o.NetworkChoice = &GlobalSpecType_SiteLocalNetwork{SiteLocalNetwork: of.SiteLocalNetwork}

	case *GetSpecType_Srv6Network:
		o.NetworkChoice = &GlobalSpecType_Srv6Network{Srv6Network: of.Srv6Network}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetNetworkChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.NetworkChoice.(type) {
	case nil:
		r.NetworkChoice = nil

	case *GlobalSpecType_GlobalNetwork:
		r.NetworkChoice = &GetSpecType_GlobalNetwork{GlobalNetwork: of.GlobalNetwork}

	case *GlobalSpecType_LegacyType:
		r.NetworkChoice = &GetSpecType_LegacyType{LegacyType: of.LegacyType}

	case *GlobalSpecType_PrivateNetwork:
		r.NetworkChoice = &GetSpecType_PrivateNetwork{PrivateNetwork: of.PrivateNetwork}

	case *GlobalSpecType_SegmentNetwork:
		r.NetworkChoice = &GetSpecType_SegmentNetwork{SegmentNetwork: of.SegmentNetwork}

	case *GlobalSpecType_SiteLocalInsideNetwork:
		r.NetworkChoice = &GetSpecType_SiteLocalInsideNetwork{SiteLocalInsideNetwork: of.SiteLocalInsideNetwork}

	case *GlobalSpecType_SiteLocalNetwork:
		r.NetworkChoice = &GetSpecType_SiteLocalNetwork{SiteLocalNetwork: of.SiteLocalNetwork}

	case *GlobalSpecType_Srv6Network:
		r.NetworkChoice = &GetSpecType_Srv6Network{Srv6Network: of.Srv6Network}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetNetworkChoiceFromGlobalSpecType(f)

}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetNetworkChoiceToGlobalSpecType(f)

}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetNetworkChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.NetworkChoice.(type) {
	case nil:
		o.NetworkChoice = nil

	case *ReplaceSpecType_GlobalNetwork:
		o.NetworkChoice = &GlobalSpecType_GlobalNetwork{GlobalNetwork: of.GlobalNetwork}

	case *ReplaceSpecType_LegacyType:
		o.NetworkChoice = &GlobalSpecType_LegacyType{LegacyType: of.LegacyType}

	case *ReplaceSpecType_PrivateNetwork:
		o.NetworkChoice = &GlobalSpecType_PrivateNetwork{PrivateNetwork: of.PrivateNetwork}

	case *ReplaceSpecType_SiteLocalInsideNetwork:
		o.NetworkChoice = &GlobalSpecType_SiteLocalInsideNetwork{SiteLocalInsideNetwork: of.SiteLocalInsideNetwork}

	case *ReplaceSpecType_SiteLocalNetwork:
		o.NetworkChoice = &GlobalSpecType_SiteLocalNetwork{SiteLocalNetwork: of.SiteLocalNetwork}

	case *ReplaceSpecType_Srv6Network:
		o.NetworkChoice = &GlobalSpecType_Srv6Network{Srv6Network: of.Srv6Network}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetNetworkChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.NetworkChoice.(type) {
	case nil:
		r.NetworkChoice = nil

	case *GlobalSpecType_GlobalNetwork:
		r.NetworkChoice = &ReplaceSpecType_GlobalNetwork{GlobalNetwork: of.GlobalNetwork}

	case *GlobalSpecType_LegacyType:
		r.NetworkChoice = &ReplaceSpecType_LegacyType{LegacyType: of.LegacyType}

	case *GlobalSpecType_PrivateNetwork:
		r.NetworkChoice = &ReplaceSpecType_PrivateNetwork{PrivateNetwork: of.PrivateNetwork}

	case *GlobalSpecType_SiteLocalInsideNetwork:
		r.NetworkChoice = &ReplaceSpecType_SiteLocalInsideNetwork{SiteLocalInsideNetwork: of.SiteLocalInsideNetwork}

	case *GlobalSpecType_SiteLocalNetwork:
		r.NetworkChoice = &ReplaceSpecType_SiteLocalNetwork{SiteLocalNetwork: of.SiteLocalNetwork}

	case *GlobalSpecType_Srv6Network:
		r.NetworkChoice = &ReplaceSpecType_Srv6Network{Srv6Network: of.Srv6Network}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *ReplaceSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetNetworkChoiceFromGlobalSpecType(f)

}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetNetworkChoiceToGlobalSpecType(f)

}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

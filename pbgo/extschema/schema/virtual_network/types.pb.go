// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/virtual_network/types.proto

package virtual_network

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// VoltADN Private Network RE Info
//
// x-displayName: "VoltADN Private Network RE Info"
// Per RE information VoltADN private network
type VoltADNPrivateNetworkReInfoType struct {
	// VLAN ID
	//
	// x-displayName: "VLAN ID"
	// x-example: "700"
	// VLAN id of for vlan interface for handoff from infrastructure
	Vlan uint32 `protobuf:"varint,1,opt,name=vlan,proto3" json:"vlan,omitempty"`
	// Label expression to select Node
	//
	// x-displayName: "Node Label Expression"
	// this expression is used if ver node should own this network or not.
	// If RE specific expression is nil, then common expression is used.
	NodeSelector *schema.LabelSelectorType `protobuf:"bytes,2,opt,name=node_selector,json=nodeSelector,proto3" json:"node_selector,omitempty"`
}

func (m *VoltADNPrivateNetworkReInfoType) Reset()      { *m = VoltADNPrivateNetworkReInfoType{} }
func (*VoltADNPrivateNetworkReInfoType) ProtoMessage() {}
func (*VoltADNPrivateNetworkReInfoType) Descriptor() ([]byte, []int) {
	return fileDescriptor_82cb5476c2fb45fd, []int{0}
}
func (m *VoltADNPrivateNetworkReInfoType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoltADNPrivateNetworkReInfoType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VoltADNPrivateNetworkReInfoType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoltADNPrivateNetworkReInfoType.Merge(m, src)
}
func (m *VoltADNPrivateNetworkReInfoType) XXX_Size() int {
	return m.Size()
}
func (m *VoltADNPrivateNetworkReInfoType) XXX_DiscardUnknown() {
	xxx_messageInfo_VoltADNPrivateNetworkReInfoType.DiscardUnknown(m)
}

var xxx_messageInfo_VoltADNPrivateNetworkReInfoType proto.InternalMessageInfo

func (m *VoltADNPrivateNetworkReInfoType) GetVlan() uint32 {
	if m != nil {
		return m.Vlan
	}
	return 0
}

func (m *VoltADNPrivateNetworkReInfoType) GetNodeSelector() *schema.LabelSelectorType {
	if m != nil {
		return m.NodeSelector
	}
	return nil
}

// VoltADN Private Network Tenant Info
//
// x-displayName: "VoltADN Private Network Tenant Info"
// Per Tenant information for VoltADN private network
type VoltADNPrivateNetworkTenantInfoType struct {
	// Default Tenant Private VIP
	//
	// x-displayName: "Default Tenant Private VIP"
	// x-example: "10.200.2.1"
	// Default tenant private VIP to be used when not specified in advertise policy
	DefaultPrivateVip string `protobuf:"bytes,1,opt,name=default_private_vip,json=defaultPrivateVip,proto3" json:"default_private_vip,omitempty"`
	// Final Default Tenant Private VIP
	//
	// x-displayName: "Final Default Tenant Private VIP"
	// x-example: "10.200.2.1"
	// Final Default tenant private VIP to be used when not specified in advertise policy
	// Vega will use this to create Listener
	FinalDefaultPrivateVip string `protobuf:"bytes,2,opt,name=final_default_private_vip,json=finalDefaultPrivateVip,proto3" json:"final_default_private_vip,omitempty"`
}

func (m *VoltADNPrivateNetworkTenantInfoType) Reset()      { *m = VoltADNPrivateNetworkTenantInfoType{} }
func (*VoltADNPrivateNetworkTenantInfoType) ProtoMessage() {}
func (*VoltADNPrivateNetworkTenantInfoType) Descriptor() ([]byte, []int) {
	return fileDescriptor_82cb5476c2fb45fd, []int{1}
}
func (m *VoltADNPrivateNetworkTenantInfoType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoltADNPrivateNetworkTenantInfoType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VoltADNPrivateNetworkTenantInfoType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoltADNPrivateNetworkTenantInfoType.Merge(m, src)
}
func (m *VoltADNPrivateNetworkTenantInfoType) XXX_Size() int {
	return m.Size()
}
func (m *VoltADNPrivateNetworkTenantInfoType) XXX_DiscardUnknown() {
	xxx_messageInfo_VoltADNPrivateNetworkTenantInfoType.DiscardUnknown(m)
}

var xxx_messageInfo_VoltADNPrivateNetworkTenantInfoType proto.InternalMessageInfo

func (m *VoltADNPrivateNetworkTenantInfoType) GetDefaultPrivateVip() string {
	if m != nil {
		return m.DefaultPrivateVip
	}
	return ""
}

func (m *VoltADNPrivateNetworkTenantInfoType) GetFinalDefaultPrivateVip() string {
	if m != nil {
		return m.FinalDefaultPrivateVip
	}
	return ""
}

// List of DNS server IP(s)
//
// x-displayName: "List of DNS Server IP(s)"
// List DNS server ip addresses
type DNSServersList struct {
	// List of DNS server IP(s)
	//
	// x-displayName: "List of DNS Server IP(s)"
	// x-required
	// List DNS server ip addresses
	DnsIp []string `protobuf:"bytes,6,rep,name=dns_ip,json=dnsIp,proto3" json:"dns_ip,omitempty"`
}

func (m *DNSServersList) Reset()      { *m = DNSServersList{} }
func (*DNSServersList) ProtoMessage() {}
func (*DNSServersList) Descriptor() ([]byte, []int) {
	return fileDescriptor_82cb5476c2fb45fd, []int{2}
}
func (m *DNSServersList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DNSServersList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DNSServersList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNSServersList.Merge(m, src)
}
func (m *DNSServersList) XXX_Size() int {
	return m.Size()
}
func (m *DNSServersList) XXX_DiscardUnknown() {
	xxx_messageInfo_DNSServersList.DiscardUnknown(m)
}

var xxx_messageInfo_DNSServersList proto.InternalMessageInfo

func (m *DNSServersList) GetDnsIp() []string {
	if m != nil {
		return m.DnsIp
	}
	return nil
}

// VoltADN Private Network
//
// x-displayName: "VoltADN Private Network"
// Specification VoltADN private network
type VoltADNPrivateNetworkType struct {
	// Select Private Access
	//
	// x-displayName: "Select Private Access"
	// x-required
	// Choose if CE sites will use this network for private access
	//
	// Types that are valid to be assigned to PrivateAccessChoice:
	//	*VoltADNPrivateNetworkType_NoPrivateAccess
	//	*VoltADNPrivateNetworkType_PrivateAccessEnabled
	PrivateAccessChoice isVoltADNPrivateNetworkType_PrivateAccessChoice `protobuf_oneof:"private_access_choice"`
	// Select DNS Server
	//
	// x-displayName: "Select DNS Server"
	// x-required
	// Choose DNS server for endpoint discovery in this network
	//
	// Types that are valid to be assigned to DnsChoice:
	//	*VoltADNPrivateNetworkType_NoPrivateDns
	//	*VoltADNPrivateNetworkType_PrivateDns
	DnsChoice isVoltADNPrivateNetworkType_DnsChoice `protobuf_oneof:"dns_choice"`
	// Common Label expression to select Node
	//
	// x-displayName: "Common Node Label Expression"
	// If RE specific expression is nil, then common expression is used.
	CommonNodeSelector *schema.LabelSelectorType `protobuf:"bytes,7,opt,name=common_node_selector,json=commonNodeSelector,proto3" json:"common_node_selector,omitempty"`
	// RE name  to RE info map
	//
	// x-displayName: "RE name to Re info mapping"
	// Map of re name to re info map, Key:RE name, Value: RE info
	ReInfoMap map[string]*VoltADNPrivateNetworkReInfoType `protobuf:"bytes,8,rep,name=re_info_map,json=reInfoMap,proto3" json:"re_info_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Owner Tenant
	//
	// x-displayName: "Owner Tenant"
	// x-required
	// Tenant ID of tenant that first requested creation of this network
	OwnerTenantId string `protobuf:"bytes,9,opt,name=owner_tenant_id,json=ownerTenantId,proto3" json:"owner_tenant_id,omitempty"`
	// Per Tenant Information
	//
	// x-displayName: "Per Tenant Information"
	// Per tenant information for the private network
	TenantInfoMap map[string]*VoltADNPrivateNetworkTenantInfoType `protobuf:"bytes,10,rep,name=tenant_info_map,json=tenantInfoMap,proto3" json:"tenant_info_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Advertise Dedicated VIP(s)
	//
	// x-displayName: "Advertise Dedicated VIP(s)"
	// x-required
	// Choose if dedicated public VIP(s) are also available via private network
	//
	// Types that are valid to be assigned to DedicatedVipChoice:
	//	*VoltADNPrivateNetworkType_NoAdvertiseDedicatedVips
	//	*VoltADNPrivateNetworkType_AdvertiseDedicatedVips
	DedicatedVipChoice isVoltADNPrivateNetworkType_DedicatedVipChoice `protobuf_oneof:"dedicated_vip_choice"`
}

func (m *VoltADNPrivateNetworkType) Reset()      { *m = VoltADNPrivateNetworkType{} }
func (*VoltADNPrivateNetworkType) ProtoMessage() {}
func (*VoltADNPrivateNetworkType) Descriptor() ([]byte, []int) {
	return fileDescriptor_82cb5476c2fb45fd, []int{3}
}
func (m *VoltADNPrivateNetworkType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoltADNPrivateNetworkType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VoltADNPrivateNetworkType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoltADNPrivateNetworkType.Merge(m, src)
}
func (m *VoltADNPrivateNetworkType) XXX_Size() int {
	return m.Size()
}
func (m *VoltADNPrivateNetworkType) XXX_DiscardUnknown() {
	xxx_messageInfo_VoltADNPrivateNetworkType.DiscardUnknown(m)
}

var xxx_messageInfo_VoltADNPrivateNetworkType proto.InternalMessageInfo

type isVoltADNPrivateNetworkType_PrivateAccessChoice interface {
	isVoltADNPrivateNetworkType_PrivateAccessChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isVoltADNPrivateNetworkType_DnsChoice interface {
	isVoltADNPrivateNetworkType_DnsChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isVoltADNPrivateNetworkType_DedicatedVipChoice interface {
	isVoltADNPrivateNetworkType_DedicatedVipChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type VoltADNPrivateNetworkType_NoPrivateAccess struct {
	NoPrivateAccess *schema.Empty `protobuf:"bytes,2,opt,name=no_private_access,json=noPrivateAccess,proto3,oneof" json:"no_private_access,omitempty"`
}
type VoltADNPrivateNetworkType_PrivateAccessEnabled struct {
	PrivateAccessEnabled *schema.Empty `protobuf:"bytes,3,opt,name=private_access_enabled,json=privateAccessEnabled,proto3,oneof" json:"private_access_enabled,omitempty"`
}
type VoltADNPrivateNetworkType_NoPrivateDns struct {
	NoPrivateDns *schema.Empty `protobuf:"bytes,5,opt,name=no_private_dns,json=noPrivateDns,proto3,oneof" json:"no_private_dns,omitempty"`
}
type VoltADNPrivateNetworkType_PrivateDns struct {
	PrivateDns *DNSServersList `protobuf:"bytes,6,opt,name=private_dns,json=privateDns,proto3,oneof" json:"private_dns,omitempty"`
}
type VoltADNPrivateNetworkType_NoAdvertiseDedicatedVips struct {
	NoAdvertiseDedicatedVips *schema.Empty `protobuf:"bytes,12,opt,name=no_advertise_dedicated_vips,json=noAdvertiseDedicatedVips,proto3,oneof" json:"no_advertise_dedicated_vips,omitempty"`
}
type VoltADNPrivateNetworkType_AdvertiseDedicatedVips struct {
	AdvertiseDedicatedVips *schema.Empty `protobuf:"bytes,13,opt,name=advertise_dedicated_vips,json=advertiseDedicatedVips,proto3,oneof" json:"advertise_dedicated_vips,omitempty"`
}

func (*VoltADNPrivateNetworkType_NoPrivateAccess) isVoltADNPrivateNetworkType_PrivateAccessChoice() {}
func (*VoltADNPrivateNetworkType_PrivateAccessEnabled) isVoltADNPrivateNetworkType_PrivateAccessChoice() {
}
func (*VoltADNPrivateNetworkType_NoPrivateDns) isVoltADNPrivateNetworkType_DnsChoice() {}
func (*VoltADNPrivateNetworkType_PrivateDns) isVoltADNPrivateNetworkType_DnsChoice()   {}
func (*VoltADNPrivateNetworkType_NoAdvertiseDedicatedVips) isVoltADNPrivateNetworkType_DedicatedVipChoice() {
}
func (*VoltADNPrivateNetworkType_AdvertiseDedicatedVips) isVoltADNPrivateNetworkType_DedicatedVipChoice() {
}

func (m *VoltADNPrivateNetworkType) GetPrivateAccessChoice() isVoltADNPrivateNetworkType_PrivateAccessChoice {
	if m != nil {
		return m.PrivateAccessChoice
	}
	return nil
}
func (m *VoltADNPrivateNetworkType) GetDnsChoice() isVoltADNPrivateNetworkType_DnsChoice {
	if m != nil {
		return m.DnsChoice
	}
	return nil
}
func (m *VoltADNPrivateNetworkType) GetDedicatedVipChoice() isVoltADNPrivateNetworkType_DedicatedVipChoice {
	if m != nil {
		return m.DedicatedVipChoice
	}
	return nil
}

func (m *VoltADNPrivateNetworkType) GetNoPrivateAccess() *schema.Empty {
	if x, ok := m.GetPrivateAccessChoice().(*VoltADNPrivateNetworkType_NoPrivateAccess); ok {
		return x.NoPrivateAccess
	}
	return nil
}

func (m *VoltADNPrivateNetworkType) GetPrivateAccessEnabled() *schema.Empty {
	if x, ok := m.GetPrivateAccessChoice().(*VoltADNPrivateNetworkType_PrivateAccessEnabled); ok {
		return x.PrivateAccessEnabled
	}
	return nil
}

func (m *VoltADNPrivateNetworkType) GetNoPrivateDns() *schema.Empty {
	if x, ok := m.GetDnsChoice().(*VoltADNPrivateNetworkType_NoPrivateDns); ok {
		return x.NoPrivateDns
	}
	return nil
}

func (m *VoltADNPrivateNetworkType) GetPrivateDns() *DNSServersList {
	if x, ok := m.GetDnsChoice().(*VoltADNPrivateNetworkType_PrivateDns); ok {
		return x.PrivateDns
	}
	return nil
}

func (m *VoltADNPrivateNetworkType) GetCommonNodeSelector() *schema.LabelSelectorType {
	if m != nil {
		return m.CommonNodeSelector
	}
	return nil
}

func (m *VoltADNPrivateNetworkType) GetReInfoMap() map[string]*VoltADNPrivateNetworkReInfoType {
	if m != nil {
		return m.ReInfoMap
	}
	return nil
}

func (m *VoltADNPrivateNetworkType) GetOwnerTenantId() string {
	if m != nil {
		return m.OwnerTenantId
	}
	return ""
}

func (m *VoltADNPrivateNetworkType) GetTenantInfoMap() map[string]*VoltADNPrivateNetworkTenantInfoType {
	if m != nil {
		return m.TenantInfoMap
	}
	return nil
}

func (m *VoltADNPrivateNetworkType) GetNoAdvertiseDedicatedVips() *schema.Empty {
	if x, ok := m.GetDedicatedVipChoice().(*VoltADNPrivateNetworkType_NoAdvertiseDedicatedVips); ok {
		return x.NoAdvertiseDedicatedVips
	}
	return nil
}

func (m *VoltADNPrivateNetworkType) GetAdvertiseDedicatedVips() *schema.Empty {
	if x, ok := m.GetDedicatedVipChoice().(*VoltADNPrivateNetworkType_AdvertiseDedicatedVips); ok {
		return x.AdvertiseDedicatedVips
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*VoltADNPrivateNetworkType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*VoltADNPrivateNetworkType_NoPrivateAccess)(nil),
		(*VoltADNPrivateNetworkType_PrivateAccessEnabled)(nil),
		(*VoltADNPrivateNetworkType_NoPrivateDns)(nil),
		(*VoltADNPrivateNetworkType_PrivateDns)(nil),
		(*VoltADNPrivateNetworkType_NoAdvertiseDedicatedVips)(nil),
		(*VoltADNPrivateNetworkType_AdvertiseDedicatedVips)(nil),
	}
}

// Anycast VIP for Fleet
//
// x-displayName: "Anycast VIP for Fleet"
// Configure anycast VIP address allocator
type AnyCastVIPFleetType struct {
	// Fleet VIP address allocator
	//
	// x-displayName: "Fleet VIP address allocator"
	// x-required
	// Anycast VIP address allocator reference
	VipAllocator *views.ObjectRefType `protobuf:"bytes,1,opt,name=vip_allocator,json=vipAllocator,proto3" json:"vip_allocator,omitempty"`
}

func (m *AnyCastVIPFleetType) Reset()      { *m = AnyCastVIPFleetType{} }
func (*AnyCastVIPFleetType) ProtoMessage() {}
func (*AnyCastVIPFleetType) Descriptor() ([]byte, []int) {
	return fileDescriptor_82cb5476c2fb45fd, []int{4}
}
func (m *AnyCastVIPFleetType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnyCastVIPFleetType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AnyCastVIPFleetType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnyCastVIPFleetType.Merge(m, src)
}
func (m *AnyCastVIPFleetType) XXX_Size() int {
	return m.Size()
}
func (m *AnyCastVIPFleetType) XXX_DiscardUnknown() {
	xxx_messageInfo_AnyCastVIPFleetType.DiscardUnknown(m)
}

var xxx_messageInfo_AnyCastVIPFleetType proto.InternalMessageInfo

func (m *AnyCastVIPFleetType) GetVipAllocator() *views.ObjectRefType {
	if m != nil {
		return m.VipAllocator
	}
	return nil
}

// SNAT Pool
//
// x-displayName: "SNAT Pool"
// SNAT pool ip prefix  parameters
type SNATPoolType struct {
	// List of IPv4 Prefixes
	//
	// x-displayName: "List of IPv4 Prefixes"
	// x-required
	// List of IPv4 prefixes used as SNAT pool
	Ipv4Prefixes []string `protobuf:"bytes,1,rep,name=ipv4_prefixes,json=ipv4Prefixes,proto3" json:"ipv4_prefixes,omitempty"`
}

func (m *SNATPoolType) Reset()      { *m = SNATPoolType{} }
func (*SNATPoolType) ProtoMessage() {}
func (*SNATPoolType) Descriptor() ([]byte, []int) {
	return fileDescriptor_82cb5476c2fb45fd, []int{5}
}
func (m *SNATPoolType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SNATPoolType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SNATPoolType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SNATPoolType.Merge(m, src)
}
func (m *SNATPoolType) XXX_Size() int {
	return m.Size()
}
func (m *SNATPoolType) XXX_DiscardUnknown() {
	xxx_messageInfo_SNATPoolType.DiscardUnknown(m)
}

var xxx_messageInfo_SNATPoolType proto.InternalMessageInfo

func (m *SNATPoolType) GetIpv4Prefixes() []string {
	if m != nil {
		return m.Ipv4Prefixes
	}
	return nil
}

// Per Node SNAT pool for a Site
//
// x-displayName: "Per Node SNAT pool for a Site"
// Per node snat pool for a site
type SNATPoolSiteType struct {
	// Per Node IPv4 Prefix
	//
	// x-displayName: "Per Node IPv4 Prefix"
	// x-required
	// Per node ip v4 prefix for snat pool
	NodeSnatPool map[string]*SNATPoolType `protobuf:"bytes,1,rep,name=node_snat_pool,json=nodeSnatPool,proto3" json:"node_snat_pool,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *SNATPoolSiteType) Reset()      { *m = SNATPoolSiteType{} }
func (*SNATPoolSiteType) ProtoMessage() {}
func (*SNATPoolSiteType) Descriptor() ([]byte, []int) {
	return fileDescriptor_82cb5476c2fb45fd, []int{6}
}
func (m *SNATPoolSiteType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SNATPoolSiteType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SNATPoolSiteType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SNATPoolSiteType.Merge(m, src)
}
func (m *SNATPoolSiteType) XXX_Size() int {
	return m.Size()
}
func (m *SNATPoolSiteType) XXX_DiscardUnknown() {
	xxx_messageInfo_SNATPoolSiteType.DiscardUnknown(m)
}

var xxx_messageInfo_SNATPoolSiteType proto.InternalMessageInfo

func (m *SNATPoolSiteType) GetNodeSnatPool() map[string]*SNATPoolType {
	if m != nil {
		return m.NodeSnatPool
	}
	return nil
}

// SNAT pool for Fleet
//
// x-displayName: "SNAT pool for Fleet"
// Configure SNAT pool address allocator
type SNATPoolFleetType struct {
	// Fleet SNAT pool address allocator
	//
	// x-displayName: "Fleet SNAT pool address allocator"
	// x-required
	// SNAT pool address allocator reference
	SnatPoolAllocator *views.ObjectRefType `protobuf:"bytes,1,opt,name=snat_pool_allocator,json=snatPoolAllocator,proto3" json:"snat_pool_allocator,omitempty"`
}

func (m *SNATPoolFleetType) Reset()      { *m = SNATPoolFleetType{} }
func (*SNATPoolFleetType) ProtoMessage() {}
func (*SNATPoolFleetType) Descriptor() ([]byte, []int) {
	return fileDescriptor_82cb5476c2fb45fd, []int{7}
}
func (m *SNATPoolFleetType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SNATPoolFleetType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SNATPoolFleetType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SNATPoolFleetType.Merge(m, src)
}
func (m *SNATPoolFleetType) XXX_Size() int {
	return m.Size()
}
func (m *SNATPoolFleetType) XXX_DiscardUnknown() {
	xxx_messageInfo_SNATPoolFleetType.DiscardUnknown(m)
}

var xxx_messageInfo_SNATPoolFleetType proto.InternalMessageInfo

func (m *SNATPoolFleetType) GetSnatPoolAllocator() *views.ObjectRefType {
	if m != nil {
		return m.SnatPoolAllocator
	}
	return nil
}

// Srv6 Network Namespace Parameters
//
// x-displayName: "Srv6 Network Namespace Parameters"
// Configure the how namespace network is connected to srv6 network
type Srv6NetworkNsParametersType struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "production"
	// x-required
	// Name of namespace that is connected to srv6 Network
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (m *Srv6NetworkNsParametersType) Reset()      { *m = Srv6NetworkNsParametersType{} }
func (*Srv6NetworkNsParametersType) ProtoMessage() {}
func (*Srv6NetworkNsParametersType) Descriptor() ([]byte, []int) {
	return fileDescriptor_82cb5476c2fb45fd, []int{8}
}
func (m *Srv6NetworkNsParametersType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Srv6NetworkNsParametersType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Srv6NetworkNsParametersType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Srv6NetworkNsParametersType.Merge(m, src)
}
func (m *Srv6NetworkNsParametersType) XXX_Size() int {
	return m.Size()
}
func (m *Srv6NetworkNsParametersType) XXX_DiscardUnknown() {
	xxx_messageInfo_Srv6NetworkNsParametersType.DiscardUnknown(m)
}

var xxx_messageInfo_Srv6NetworkNsParametersType proto.InternalMessageInfo

func (m *Srv6NetworkNsParametersType) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

// Per Site Srv6 Network
//
// x-displayName: "Per Site Srv6 Network"
// Per site network parameters
type PerSiteSrv6NetworkType struct {
	// Select Namespace Network to Connect
	//
	// x-displayName: "Select Namespace Network to Connect"
	// x-required
	// Choose if a given namespace network is connected to this network
	//
	// Types that are valid to be assigned to NamespaceChoice:
	//	*PerSiteSrv6NetworkType_NoNamespaceNetwork
	//	*PerSiteSrv6NetworkType_Srv6NetworkNsParams
	NamespaceChoice isPerSiteSrv6NetworkType_NamespaceChoice `protobuf_oneof:"namespace_choice"`
	// Default VIP Choice
	//
	// x-displayName: "Default VIP Choice"
	// x-required
	// Default VIP configuration for this network
	//
	// Types that are valid to be assigned to DefaultVipChoice:
	//	*PerSiteSrv6NetworkType_InterfaceIpVip
	//	*PerSiteSrv6NetworkType_AnycastVip
	//	*PerSiteSrv6NetworkType_FleetVip
	DefaultVipChoice isPerSiteSrv6NetworkType_DefaultVipChoice `protobuf_oneof:"default_vip_choice"`
	// SNAT Pool
	//
	// x-displayName: "SNAT Pool"
	// x-required
	// SNAT pool configuration for this network
	//
	// Types that are valid to be assigned to SnatPoolChoice:
	//	*PerSiteSrv6NetworkType_InterfaceIpSnatPool
	//	*PerSiteSrv6NetworkType_SiteSnatPool
	//	*PerSiteSrv6NetworkType_FleetSnatPool
	SnatPoolChoice isPerSiteSrv6NetworkType_SnatPoolChoice `protobuf_oneof:"snat_pool_choice"`
	// slice
	//
	// x-displayName: "SRv6 Network Slice"
	// x-required
	// The srv6_network_slice to which this network belongs.
	Slice *views.ObjectRefType `protobuf:"bytes,12,opt,name=slice,proto3" json:"slice,omitempty"`
	// fleets
	//
	// x-displayName: "Fleets"
	// The set of sites where this virtual network is to be instantiated.
	Fleets []*views.ObjectRefType `protobuf:"bytes,13,rep,name=fleets,proto3" json:"fleets,omitempty"`
	// access_network_rtargets
	//
	// x-displayName: "Access Network Route Targets"
	// Import Route Targets for connectivity to Access Networks.
	AccessNetworkRtargets []*schema.RouteTarget `protobuf:"bytes,14,rep,name=access_network_rtargets,json=accessNetworkRtargets,proto3" json:"access_network_rtargets,omitempty"`
	// internet_rtargets
	//
	// x-displayName: "Internet Route Targets"
	// Import Route Targets for connectivity to the Internet.
	InternetRtargets []*schema.RouteTarget `protobuf:"bytes,15,rep,name=internet_rtargets,json=internetRtargets,proto3" json:"internet_rtargets,omitempty"`
	// enterprise_network_rtargets
	//
	// x-displayName: "Enterprise Network Route Targets"
	// Import Route Targets for connectivity to Enterprise Networks.
	EnterpriseNetworkRtargets []*schema.RouteTarget `protobuf:"bytes,16,rep,name=enterprise_network_rtargets,json=enterpriseNetworkRtargets,proto3" json:"enterprise_network_rtargets,omitempty"`
	// export_rtargets
	//
	// x-displayName: "Export Route Targets"
	// Export Route Targets for advertised routes.
	ExportRtargets []*schema.RouteTarget `protobuf:"bytes,17,rep,name=export_rtargets,json=exportRtargets,proto3" json:"export_rtargets,omitempty"`
	// remote_sid_stats_plen
	//
	// x-displayName: "Prefix Length for Remote SID Counters"
	// x-example: "72"
	// Number of most significant bits of remote SIDs to use for maintaining per-SID counters.
	RemoteSidStatsPlen uint32 `protobuf:"varint,18,opt,name=remote_sid_stats_plen,json=remoteSidStatsPlen,proto3" json:"remote_sid_stats_plen,omitempty"`
}

func (m *PerSiteSrv6NetworkType) Reset()      { *m = PerSiteSrv6NetworkType{} }
func (*PerSiteSrv6NetworkType) ProtoMessage() {}
func (*PerSiteSrv6NetworkType) Descriptor() ([]byte, []int) {
	return fileDescriptor_82cb5476c2fb45fd, []int{9}
}
func (m *PerSiteSrv6NetworkType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PerSiteSrv6NetworkType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PerSiteSrv6NetworkType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PerSiteSrv6NetworkType.Merge(m, src)
}
func (m *PerSiteSrv6NetworkType) XXX_Size() int {
	return m.Size()
}
func (m *PerSiteSrv6NetworkType) XXX_DiscardUnknown() {
	xxx_messageInfo_PerSiteSrv6NetworkType.DiscardUnknown(m)
}

var xxx_messageInfo_PerSiteSrv6NetworkType proto.InternalMessageInfo

type isPerSiteSrv6NetworkType_NamespaceChoice interface {
	isPerSiteSrv6NetworkType_NamespaceChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isPerSiteSrv6NetworkType_DefaultVipChoice interface {
	isPerSiteSrv6NetworkType_DefaultVipChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isPerSiteSrv6NetworkType_SnatPoolChoice interface {
	isPerSiteSrv6NetworkType_SnatPoolChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type PerSiteSrv6NetworkType_NoNamespaceNetwork struct {
	NoNamespaceNetwork *schema.Empty `protobuf:"bytes,2,opt,name=no_namespace_network,json=noNamespaceNetwork,proto3,oneof" json:"no_namespace_network,omitempty"`
}
type PerSiteSrv6NetworkType_Srv6NetworkNsParams struct {
	Srv6NetworkNsParams *Srv6NetworkNsParametersType `protobuf:"bytes,3,opt,name=srv6_network_ns_params,json=srv6NetworkNsParams,proto3,oneof" json:"srv6_network_ns_params,omitempty"`
}
type PerSiteSrv6NetworkType_InterfaceIpVip struct {
	InterfaceIpVip *schema.Empty `protobuf:"bytes,5,opt,name=interface_ip_vip,json=interfaceIpVip,proto3,oneof" json:"interface_ip_vip,omitempty"`
}
type PerSiteSrv6NetworkType_AnycastVip struct {
	AnycastVip string `protobuf:"bytes,6,opt,name=anycast_vip,json=anycastVip,proto3,oneof" json:"anycast_vip,omitempty"`
}
type PerSiteSrv6NetworkType_FleetVip struct {
	FleetVip *AnyCastVIPFleetType `protobuf:"bytes,7,opt,name=fleet_vip,json=fleetVip,proto3,oneof" json:"fleet_vip,omitempty"`
}
type PerSiteSrv6NetworkType_InterfaceIpSnatPool struct {
	InterfaceIpSnatPool *schema.Empty `protobuf:"bytes,9,opt,name=interface_ip_snat_pool,json=interfaceIpSnatPool,proto3,oneof" json:"interface_ip_snat_pool,omitempty"`
}
type PerSiteSrv6NetworkType_SiteSnatPool struct {
	SiteSnatPool *SNATPoolSiteType `protobuf:"bytes,10,opt,name=site_snat_pool,json=siteSnatPool,proto3,oneof" json:"site_snat_pool,omitempty"`
}
type PerSiteSrv6NetworkType_FleetSnatPool struct {
	FleetSnatPool *SNATPoolFleetType `protobuf:"bytes,11,opt,name=fleet_snat_pool,json=fleetSnatPool,proto3,oneof" json:"fleet_snat_pool,omitempty"`
}

func (*PerSiteSrv6NetworkType_NoNamespaceNetwork) isPerSiteSrv6NetworkType_NamespaceChoice()  {}
func (*PerSiteSrv6NetworkType_Srv6NetworkNsParams) isPerSiteSrv6NetworkType_NamespaceChoice() {}
func (*PerSiteSrv6NetworkType_InterfaceIpVip) isPerSiteSrv6NetworkType_DefaultVipChoice()     {}
func (*PerSiteSrv6NetworkType_AnycastVip) isPerSiteSrv6NetworkType_DefaultVipChoice()         {}
func (*PerSiteSrv6NetworkType_FleetVip) isPerSiteSrv6NetworkType_DefaultVipChoice()           {}
func (*PerSiteSrv6NetworkType_InterfaceIpSnatPool) isPerSiteSrv6NetworkType_SnatPoolChoice()  {}
func (*PerSiteSrv6NetworkType_SiteSnatPool) isPerSiteSrv6NetworkType_SnatPoolChoice()         {}
func (*PerSiteSrv6NetworkType_FleetSnatPool) isPerSiteSrv6NetworkType_SnatPoolChoice()        {}

func (m *PerSiteSrv6NetworkType) GetNamespaceChoice() isPerSiteSrv6NetworkType_NamespaceChoice {
	if m != nil {
		return m.NamespaceChoice
	}
	return nil
}
func (m *PerSiteSrv6NetworkType) GetDefaultVipChoice() isPerSiteSrv6NetworkType_DefaultVipChoice {
	if m != nil {
		return m.DefaultVipChoice
	}
	return nil
}
func (m *PerSiteSrv6NetworkType) GetSnatPoolChoice() isPerSiteSrv6NetworkType_SnatPoolChoice {
	if m != nil {
		return m.SnatPoolChoice
	}
	return nil
}

func (m *PerSiteSrv6NetworkType) GetNoNamespaceNetwork() *schema.Empty {
	if x, ok := m.GetNamespaceChoice().(*PerSiteSrv6NetworkType_NoNamespaceNetwork); ok {
		return x.NoNamespaceNetwork
	}
	return nil
}

func (m *PerSiteSrv6NetworkType) GetSrv6NetworkNsParams() *Srv6NetworkNsParametersType {
	if x, ok := m.GetNamespaceChoice().(*PerSiteSrv6NetworkType_Srv6NetworkNsParams); ok {
		return x.Srv6NetworkNsParams
	}
	return nil
}

func (m *PerSiteSrv6NetworkType) GetInterfaceIpVip() *schema.Empty {
	if x, ok := m.GetDefaultVipChoice().(*PerSiteSrv6NetworkType_InterfaceIpVip); ok {
		return x.InterfaceIpVip
	}
	return nil
}

func (m *PerSiteSrv6NetworkType) GetAnycastVip() string {
	if x, ok := m.GetDefaultVipChoice().(*PerSiteSrv6NetworkType_AnycastVip); ok {
		return x.AnycastVip
	}
	return ""
}

func (m *PerSiteSrv6NetworkType) GetFleetVip() *AnyCastVIPFleetType {
	if x, ok := m.GetDefaultVipChoice().(*PerSiteSrv6NetworkType_FleetVip); ok {
		return x.FleetVip
	}
	return nil
}

func (m *PerSiteSrv6NetworkType) GetInterfaceIpSnatPool() *schema.Empty {
	if x, ok := m.GetSnatPoolChoice().(*PerSiteSrv6NetworkType_InterfaceIpSnatPool); ok {
		return x.InterfaceIpSnatPool
	}
	return nil
}

func (m *PerSiteSrv6NetworkType) GetSiteSnatPool() *SNATPoolSiteType {
	if x, ok := m.GetSnatPoolChoice().(*PerSiteSrv6NetworkType_SiteSnatPool); ok {
		return x.SiteSnatPool
	}
	return nil
}

func (m *PerSiteSrv6NetworkType) GetFleetSnatPool() *SNATPoolFleetType {
	if x, ok := m.GetSnatPoolChoice().(*PerSiteSrv6NetworkType_FleetSnatPool); ok {
		return x.FleetSnatPool
	}
	return nil
}

func (m *PerSiteSrv6NetworkType) GetSlice() *views.ObjectRefType {
	if m != nil {
		return m.Slice
	}
	return nil
}

func (m *PerSiteSrv6NetworkType) GetFleets() []*views.ObjectRefType {
	if m != nil {
		return m.Fleets
	}
	return nil
}

func (m *PerSiteSrv6NetworkType) GetAccessNetworkRtargets() []*schema.RouteTarget {
	if m != nil {
		return m.AccessNetworkRtargets
	}
	return nil
}

func (m *PerSiteSrv6NetworkType) GetInternetRtargets() []*schema.RouteTarget {
	if m != nil {
		return m.InternetRtargets
	}
	return nil
}

func (m *PerSiteSrv6NetworkType) GetEnterpriseNetworkRtargets() []*schema.RouteTarget {
	if m != nil {
		return m.EnterpriseNetworkRtargets
	}
	return nil
}

func (m *PerSiteSrv6NetworkType) GetExportRtargets() []*schema.RouteTarget {
	if m != nil {
		return m.ExportRtargets
	}
	return nil
}

func (m *PerSiteSrv6NetworkType) GetRemoteSidStatsPlen() uint32 {
	if m != nil {
		return m.RemoteSidStatsPlen
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PerSiteSrv6NetworkType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PerSiteSrv6NetworkType_NoNamespaceNetwork)(nil),
		(*PerSiteSrv6NetworkType_Srv6NetworkNsParams)(nil),
		(*PerSiteSrv6NetworkType_InterfaceIpVip)(nil),
		(*PerSiteSrv6NetworkType_AnycastVip)(nil),
		(*PerSiteSrv6NetworkType_FleetVip)(nil),
		(*PerSiteSrv6NetworkType_InterfaceIpSnatPool)(nil),
		(*PerSiteSrv6NetworkType_SiteSnatPool)(nil),
		(*PerSiteSrv6NetworkType_FleetSnatPool)(nil),
	}
}

// Next Hop Interface List
//
// x-displayName: "Next Hop Interface List"
// List of interfaces for next hop
type NextHopInterfaceList struct {
	// Interface List
	//
	// x-displayName: "Interface List"
	// x-required
	// List of interfaces for next hop
	Interfaces []*views.ObjectRefType `protobuf:"bytes,1,rep,name=interfaces,proto3" json:"interfaces,omitempty"`
}

func (m *NextHopInterfaceList) Reset()      { *m = NextHopInterfaceList{} }
func (*NextHopInterfaceList) ProtoMessage() {}
func (*NextHopInterfaceList) Descriptor() ([]byte, []int) {
	return fileDescriptor_82cb5476c2fb45fd, []int{10}
}
func (m *NextHopInterfaceList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NextHopInterfaceList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NextHopInterfaceList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NextHopInterfaceList.Merge(m, src)
}
func (m *NextHopInterfaceList) XXX_Size() int {
	return m.Size()
}
func (m *NextHopInterfaceList) XXX_DiscardUnknown() {
	xxx_messageInfo_NextHopInterfaceList.DiscardUnknown(m)
}

var xxx_messageInfo_NextHopInterfaceList proto.InternalMessageInfo

func (m *NextHopInterfaceList) GetInterfaces() []*views.ObjectRefType {
	if m != nil {
		return m.Interfaces
	}
	return nil
}

// Static Route
//
// x-displayName: "Static Route"
// Defines a static route, configuring a list of prefixes and a next-hop to be used for them
type StaticRouteViewType struct {
	// IP Prefixes
	//
	// x-displayName: "IP Prefixes"
	// x-required
	// List of route prefixes that have common next hop and attributes
	IpPrefixes []string `protobuf:"bytes,1,rep,name=ip_prefixes,json=ipPrefixes,proto3" json:"ip_prefixes,omitempty"`
	// Next Hop Choice
	//
	// x-displayName: "Select Type of Next Hop"
	// x-required
	// Select type of next hop default gateway, ip address or interface
	//
	// Types that are valid to be assigned to NextHopChoice:
	//	*StaticRouteViewType_IpAddress
	//	*StaticRouteViewType_Interface
	//	*StaticRouteViewType_DefaultGateway
	NextHopChoice isStaticRouteViewType_NextHopChoice `protobuf_oneof:"next_hop_choice"`
	// Attributes
	//
	// x-displayName: "Attributes"
	// List of attributes that control forwarding, dynamic routing and control plane(host) reachability
	Attrs []schema.RouteAttrType `protobuf:"varint,6,rep,packed,name=attrs,proto3,enum=ves.io.schema.RouteAttrType" json:"attrs,omitempty"`
}

func (m *StaticRouteViewType) Reset()      { *m = StaticRouteViewType{} }
func (*StaticRouteViewType) ProtoMessage() {}
func (*StaticRouteViewType) Descriptor() ([]byte, []int) {
	return fileDescriptor_82cb5476c2fb45fd, []int{11}
}
func (m *StaticRouteViewType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StaticRouteViewType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *StaticRouteViewType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StaticRouteViewType.Merge(m, src)
}
func (m *StaticRouteViewType) XXX_Size() int {
	return m.Size()
}
func (m *StaticRouteViewType) XXX_DiscardUnknown() {
	xxx_messageInfo_StaticRouteViewType.DiscardUnknown(m)
}

var xxx_messageInfo_StaticRouteViewType proto.InternalMessageInfo

type isStaticRouteViewType_NextHopChoice interface {
	isStaticRouteViewType_NextHopChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type StaticRouteViewType_IpAddress struct {
	IpAddress string `protobuf:"bytes,3,opt,name=ip_address,json=ipAddress,proto3,oneof" json:"ip_address,omitempty"`
}
type StaticRouteViewType_Interface struct {
	Interface *views.ObjectRefType `protobuf:"bytes,4,opt,name=interface,proto3,oneof" json:"interface,omitempty"`
}
type StaticRouteViewType_DefaultGateway struct {
	DefaultGateway *schema.Empty `protobuf:"bytes,5,opt,name=default_gateway,json=defaultGateway,proto3,oneof" json:"default_gateway,omitempty"`
}

func (*StaticRouteViewType_IpAddress) isStaticRouteViewType_NextHopChoice()      {}
func (*StaticRouteViewType_Interface) isStaticRouteViewType_NextHopChoice()      {}
func (*StaticRouteViewType_DefaultGateway) isStaticRouteViewType_NextHopChoice() {}

func (m *StaticRouteViewType) GetNextHopChoice() isStaticRouteViewType_NextHopChoice {
	if m != nil {
		return m.NextHopChoice
	}
	return nil
}

func (m *StaticRouteViewType) GetIpPrefixes() []string {
	if m != nil {
		return m.IpPrefixes
	}
	return nil
}

func (m *StaticRouteViewType) GetIpAddress() string {
	if x, ok := m.GetNextHopChoice().(*StaticRouteViewType_IpAddress); ok {
		return x.IpAddress
	}
	return ""
}

func (m *StaticRouteViewType) GetInterface() *views.ObjectRefType {
	if x, ok := m.GetNextHopChoice().(*StaticRouteViewType_Interface); ok {
		return x.Interface
	}
	return nil
}

func (m *StaticRouteViewType) GetDefaultGateway() *schema.Empty {
	if x, ok := m.GetNextHopChoice().(*StaticRouteViewType_DefaultGateway); ok {
		return x.DefaultGateway
	}
	return nil
}

func (m *StaticRouteViewType) GetAttrs() []schema.RouteAttrType {
	if m != nil {
		return m.Attrs
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*StaticRouteViewType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*StaticRouteViewType_IpAddress)(nil),
		(*StaticRouteViewType_Interface)(nil),
		(*StaticRouteViewType_DefaultGateway)(nil),
	}
}

// Active PBR policies
//
// x-displayName: "Active PBR Policies"
// Currently active PBR policies on the network connector
type ActivePBRPoliciesType struct {
	// Forward Proxy Policy Based Routing
	//
	// x-displayName: "Forward Proxy Policy Based Routing"
	// Ordered List of Forward Proxy(L7) policies to control how traffic is forwarded over outside interfaces.
	// These policies are applied before network PBR policies
	ForwardProxyPbrPolicies []*views.ObjectRefType `protobuf:"bytes,1,rep,name=forward_proxy_pbr_policies,json=forwardProxyPbrPolicies,proto3" json:"forward_proxy_pbr_policies,omitempty"`
	// Network Policy Based Routing
	//
	// x-displayName: "Network Policy Based Routing"
	// Ordered List of Network(L3/L4) policies to control how traffic is forwarded over outside interfaces.
	// These policies are applied after forward proxy PBR policies
	NetworkPbrPolicies []*views.ObjectRefType `protobuf:"bytes,2,rep,name=network_pbr_policies,json=networkPbrPolicies,proto3" json:"network_pbr_policies,omitempty"`
}

func (m *ActivePBRPoliciesType) Reset()      { *m = ActivePBRPoliciesType{} }
func (*ActivePBRPoliciesType) ProtoMessage() {}
func (*ActivePBRPoliciesType) Descriptor() ([]byte, []int) {
	return fileDescriptor_82cb5476c2fb45fd, []int{12}
}
func (m *ActivePBRPoliciesType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivePBRPoliciesType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ActivePBRPoliciesType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivePBRPoliciesType.Merge(m, src)
}
func (m *ActivePBRPoliciesType) XXX_Size() int {
	return m.Size()
}
func (m *ActivePBRPoliciesType) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivePBRPoliciesType.DiscardUnknown(m)
}

var xxx_messageInfo_ActivePBRPoliciesType proto.InternalMessageInfo

func (m *ActivePBRPoliciesType) GetForwardProxyPbrPolicies() []*views.ObjectRefType {
	if m != nil {
		return m.ForwardProxyPbrPolicies
	}
	return nil
}

func (m *ActivePBRPoliciesType) GetNetworkPbrPolicies() []*views.ObjectRefType {
	if m != nil {
		return m.NetworkPbrPolicies
	}
	return nil
}

// Per Tenant Anycast VIP
//
// x-displayName: "Per Tenant Anycast VIP"
// Per tenant anycast vip
type PerTenantVIPType struct {
	// Per Tenant VIP
	//
	// x-displayName: "Per Tenant VIP"
	// Per tenant anycast VIP for the Virtual network
	TenantVipMap map[string]string `protobuf:"bytes,1,rep,name=tenant_vip_map,json=tenantVipMap,proto3" json:"tenant_vip_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *PerTenantVIPType) Reset()      { *m = PerTenantVIPType{} }
func (*PerTenantVIPType) ProtoMessage() {}
func (*PerTenantVIPType) Descriptor() ([]byte, []int) {
	return fileDescriptor_82cb5476c2fb45fd, []int{13}
}
func (m *PerTenantVIPType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PerTenantVIPType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PerTenantVIPType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PerTenantVIPType.Merge(m, src)
}
func (m *PerTenantVIPType) XXX_Size() int {
	return m.Size()
}
func (m *PerTenantVIPType) XXX_DiscardUnknown() {
	xxx_messageInfo_PerTenantVIPType.DiscardUnknown(m)
}

var xxx_messageInfo_PerTenantVIPType proto.InternalMessageInfo

func (m *PerTenantVIPType) GetTenantVipMap() map[string]string {
	if m != nil {
		return m.TenantVipMap
	}
	return nil
}

// Global Specification
//
// x-displayName: "Global Specification"
// Virtual Network specification
type GlobalSpecType struct {
	// subnets
	//
	// x-displayName: "Subnets"
	// Subnets valid in the virtual network
	// Subnets are only used to give ip address to interfaces of pods or VMs in this virtual network
	Subnets []*schema.IpSubnetType `protobuf:"bytes,2,rep,name=subnets,proto3" json:"subnets,omitempty"`
	// type
	//
	// x-displayName: "Network Type"
	// x-required
	// Type of virtual network
	Type schema.VirtualNetworkType `protobuf:"varint,3,opt,name=type,proto3,enum=ves.io.schema.VirtualNetworkType" json:"type,omitempty"`
	// static_routes
	//
	// x-displayName: "Static Routes"
	// List of static routes on the virtual network
	StaticRoutes []*schema.StaticRouteType `protobuf:"bytes,5,rep,name=static_routes,json=staticRoutes,proto3" json:"static_routes,omitempty"`
	// Network Type Choice
	//
	// x-displayName: "Select Type of Network"
	// x-required
	// Select network type, Global, inside or outside
	//
	// Types that are valid to be assigned to NetworkChoice:
	//	*GlobalSpecType_GlobalNetwork
	//	*GlobalSpecType_SiteLocalNetwork
	//	*GlobalSpecType_SiteLocalInsideNetwork
	//	*GlobalSpecType_InsideNetwork
	//	*GlobalSpecType_LegacyType
	//	*GlobalSpecType_PrivateNetwork
	//	*GlobalSpecType_Srv6Network
	NetworkChoice isGlobalSpecType_NetworkChoice `protobuf_oneof:"network_choice"`
	// VoltADN Private Network Parameters
	//
	// x-displayName: "VoltADN Private Network Parameters"
	// Network parameters configured buy SRE,  after opening a support ticket
	PrivateNetworkParameters *VoltADNPrivateNetworkType `protobuf:"bytes,15,opt,name=private_network_parameters,json=privateNetworkParameters,proto3" json:"private_network_parameters,omitempty"`
	// Default VIP
	//
	// x-displayName: "Default VIP"
	// Calculated default VIP
	//
	// Types that are valid to be assigned to DefaultVipChoice:
	//	*GlobalSpecType_TenantVip
	//	*GlobalSpecType_FleetVip
	DefaultVipChoice isGlobalSpecType_DefaultVipChoice `protobuf_oneof:"default_vip_choice"`
	// SNAT Pool
	//
	// x-displayName: "SNAT Pool"
	// SNAT pool configuration for this network
	//
	// Types that are valid to be assigned to SnatPoolChoice:
	//	*GlobalSpecType_InterfaceIp
	//	*GlobalSpecType_SiteSnatPool
	//	*GlobalSpecType_FleetSnatPool
	SnatPoolChoice isGlobalSpecType_SnatPoolChoice `protobuf_oneof:"snat_pool_choice"`
	// import_rtarget_strs
	//
	// x-displayName: "Import Route Target Strings"
	// Import Route Targets in string format.
	ImportRtargetStrs []string `protobuf:"bytes,1000,rep,name=import_rtarget_strs,json=importRtargetStrs,proto3" json:"import_rtarget_strs,omitempty"`
	// export_rtarget_strs
	//
	// x-displayName: "Export Route Target Strings"
	// Export Route Targets in string format.
	ExportRtargetStrs []string `protobuf:"bytes,1001,rep,name=export_rtarget_strs,json=exportRtargetStrs,proto3" json:"export_rtarget_strs,omitempty"`
	// fleet_refs
	//
	// x-displayName: "Fleet Refs"
	// The set of sites where this virtual network is to be instantiated.
	FleetRefs []*schema.ObjectRefType `protobuf:"bytes,1002,rep,name=fleet_refs,json=fleetRefs,proto3" json:"fleet_refs,omitempty"`
	// slice_ref
	//
	// x-displayName: "SRv6 Network Slice"
	// Reference to srv6_network_slice for SRv6 VN.
	SliceRef []*schema.ObjectRefType `protobuf:"bytes,1003,rep,name=slice_ref,json=sliceRef,proto3" json:"slice_ref,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_82cb5476c2fb45fd, []int{14}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

type isGlobalSpecType_NetworkChoice interface {
	isGlobalSpecType_NetworkChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_DefaultVipChoice interface {
	isGlobalSpecType_DefaultVipChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_SnatPoolChoice interface {
	isGlobalSpecType_SnatPoolChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_GlobalNetwork struct {
	GlobalNetwork *schema.Empty `protobuf:"bytes,7,opt,name=global_network,json=globalNetwork,proto3,oneof" json:"global_network,omitempty"`
}
type GlobalSpecType_SiteLocalNetwork struct {
	SiteLocalNetwork *schema.Empty `protobuf:"bytes,8,opt,name=site_local_network,json=siteLocalNetwork,proto3,oneof" json:"site_local_network,omitempty"`
}
type GlobalSpecType_SiteLocalInsideNetwork struct {
	SiteLocalInsideNetwork *schema.Empty `protobuf:"bytes,9,opt,name=site_local_inside_network,json=siteLocalInsideNetwork,proto3,oneof" json:"site_local_inside_network,omitempty"`
}
type GlobalSpecType_InsideNetwork struct {
	InsideNetwork *schema.Empty `protobuf:"bytes,10,opt,name=inside_network,json=insideNetwork,proto3,oneof" json:"inside_network,omitempty"`
}
type GlobalSpecType_LegacyType struct {
	LegacyType schema.VirtualNetworkType `protobuf:"varint,11,opt,name=legacy_type,json=legacyType,proto3,enum=ves.io.schema.VirtualNetworkType,oneof" json:"legacy_type,omitempty"`
}
type GlobalSpecType_PrivateNetwork struct {
	PrivateNetwork *schema.Empty `protobuf:"bytes,13,opt,name=private_network,json=privateNetwork,proto3,oneof" json:"private_network,omitempty"`
}
type GlobalSpecType_Srv6Network struct {
	Srv6Network *PerSiteSrv6NetworkType `protobuf:"bytes,14,opt,name=srv6_network,json=srv6Network,proto3,oneof" json:"srv6_network,omitempty"`
}
type GlobalSpecType_TenantVip struct {
	TenantVip *PerTenantVIPType `protobuf:"bytes,17,opt,name=tenant_vip,json=tenantVip,proto3,oneof" json:"tenant_vip,omitempty"`
}
type GlobalSpecType_FleetVip struct {
	FleetVip *AnyCastVIPFleetType `protobuf:"bytes,18,opt,name=fleet_vip,json=fleetVip,proto3,oneof" json:"fleet_vip,omitempty"`
}
type GlobalSpecType_InterfaceIp struct {
	InterfaceIp *schema.Empty `protobuf:"bytes,20,opt,name=interface_ip,json=interfaceIp,proto3,oneof" json:"interface_ip,omitempty"`
}
type GlobalSpecType_SiteSnatPool struct {
	SiteSnatPool *SNATPoolSiteType `protobuf:"bytes,21,opt,name=site_snat_pool,json=siteSnatPool,proto3,oneof" json:"site_snat_pool,omitempty"`
}
type GlobalSpecType_FleetSnatPool struct {
	FleetSnatPool *SNATPoolFleetType `protobuf:"bytes,22,opt,name=fleet_snat_pool,json=fleetSnatPool,proto3,oneof" json:"fleet_snat_pool,omitempty"`
}

func (*GlobalSpecType_GlobalNetwork) isGlobalSpecType_NetworkChoice()          {}
func (*GlobalSpecType_SiteLocalNetwork) isGlobalSpecType_NetworkChoice()       {}
func (*GlobalSpecType_SiteLocalInsideNetwork) isGlobalSpecType_NetworkChoice() {}
func (*GlobalSpecType_InsideNetwork) isGlobalSpecType_NetworkChoice()          {}
func (*GlobalSpecType_LegacyType) isGlobalSpecType_NetworkChoice()             {}
func (*GlobalSpecType_PrivateNetwork) isGlobalSpecType_NetworkChoice()         {}
func (*GlobalSpecType_Srv6Network) isGlobalSpecType_NetworkChoice()            {}
func (*GlobalSpecType_TenantVip) isGlobalSpecType_DefaultVipChoice()           {}
func (*GlobalSpecType_FleetVip) isGlobalSpecType_DefaultVipChoice()            {}
func (*GlobalSpecType_InterfaceIp) isGlobalSpecType_SnatPoolChoice()           {}
func (*GlobalSpecType_SiteSnatPool) isGlobalSpecType_SnatPoolChoice()          {}
func (*GlobalSpecType_FleetSnatPool) isGlobalSpecType_SnatPoolChoice()         {}

func (m *GlobalSpecType) GetNetworkChoice() isGlobalSpecType_NetworkChoice {
	if m != nil {
		return m.NetworkChoice
	}
	return nil
}
func (m *GlobalSpecType) GetDefaultVipChoice() isGlobalSpecType_DefaultVipChoice {
	if m != nil {
		return m.DefaultVipChoice
	}
	return nil
}
func (m *GlobalSpecType) GetSnatPoolChoice() isGlobalSpecType_SnatPoolChoice {
	if m != nil {
		return m.SnatPoolChoice
	}
	return nil
}

func (m *GlobalSpecType) GetSubnets() []*schema.IpSubnetType {
	if m != nil {
		return m.Subnets
	}
	return nil
}

func (m *GlobalSpecType) GetType() schema.VirtualNetworkType {
	if m != nil {
		return m.Type
	}
	return schema.VIRTUAL_NETWORK_SITE_LOCAL
}

func (m *GlobalSpecType) GetStaticRoutes() []*schema.StaticRouteType {
	if m != nil {
		return m.StaticRoutes
	}
	return nil
}

func (m *GlobalSpecType) GetGlobalNetwork() *schema.Empty {
	if x, ok := m.GetNetworkChoice().(*GlobalSpecType_GlobalNetwork); ok {
		return x.GlobalNetwork
	}
	return nil
}

func (m *GlobalSpecType) GetSiteLocalNetwork() *schema.Empty {
	if x, ok := m.GetNetworkChoice().(*GlobalSpecType_SiteLocalNetwork); ok {
		return x.SiteLocalNetwork
	}
	return nil
}

func (m *GlobalSpecType) GetSiteLocalInsideNetwork() *schema.Empty {
	if x, ok := m.GetNetworkChoice().(*GlobalSpecType_SiteLocalInsideNetwork); ok {
		return x.SiteLocalInsideNetwork
	}
	return nil
}

func (m *GlobalSpecType) GetInsideNetwork() *schema.Empty {
	if x, ok := m.GetNetworkChoice().(*GlobalSpecType_InsideNetwork); ok {
		return x.InsideNetwork
	}
	return nil
}

func (m *GlobalSpecType) GetLegacyType() schema.VirtualNetworkType {
	if x, ok := m.GetNetworkChoice().(*GlobalSpecType_LegacyType); ok {
		return x.LegacyType
	}
	return schema.VIRTUAL_NETWORK_SITE_LOCAL
}

func (m *GlobalSpecType) GetPrivateNetwork() *schema.Empty {
	if x, ok := m.GetNetworkChoice().(*GlobalSpecType_PrivateNetwork); ok {
		return x.PrivateNetwork
	}
	return nil
}

func (m *GlobalSpecType) GetSrv6Network() *PerSiteSrv6NetworkType {
	if x, ok := m.GetNetworkChoice().(*GlobalSpecType_Srv6Network); ok {
		return x.Srv6Network
	}
	return nil
}

func (m *GlobalSpecType) GetPrivateNetworkParameters() *VoltADNPrivateNetworkType {
	if m != nil {
		return m.PrivateNetworkParameters
	}
	return nil
}

func (m *GlobalSpecType) GetTenantVip() *PerTenantVIPType {
	if x, ok := m.GetDefaultVipChoice().(*GlobalSpecType_TenantVip); ok {
		return x.TenantVip
	}
	return nil
}

func (m *GlobalSpecType) GetFleetVip() *AnyCastVIPFleetType {
	if x, ok := m.GetDefaultVipChoice().(*GlobalSpecType_FleetVip); ok {
		return x.FleetVip
	}
	return nil
}

func (m *GlobalSpecType) GetInterfaceIp() *schema.Empty {
	if x, ok := m.GetSnatPoolChoice().(*GlobalSpecType_InterfaceIp); ok {
		return x.InterfaceIp
	}
	return nil
}

func (m *GlobalSpecType) GetSiteSnatPool() *SNATPoolSiteType {
	if x, ok := m.GetSnatPoolChoice().(*GlobalSpecType_SiteSnatPool); ok {
		return x.SiteSnatPool
	}
	return nil
}

func (m *GlobalSpecType) GetFleetSnatPool() *SNATPoolFleetType {
	if x, ok := m.GetSnatPoolChoice().(*GlobalSpecType_FleetSnatPool); ok {
		return x.FleetSnatPool
	}
	return nil
}

func (m *GlobalSpecType) GetImportRtargetStrs() []string {
	if m != nil {
		return m.ImportRtargetStrs
	}
	return nil
}

func (m *GlobalSpecType) GetExportRtargetStrs() []string {
	if m != nil {
		return m.ExportRtargetStrs
	}
	return nil
}

func (m *GlobalSpecType) GetFleetRefs() []*schema.ObjectRefType {
	if m != nil {
		return m.FleetRefs
	}
	return nil
}

func (m *GlobalSpecType) GetSliceRef() []*schema.ObjectRefType {
	if m != nil {
		return m.SliceRef
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GlobalSpecType_GlobalNetwork)(nil),
		(*GlobalSpecType_SiteLocalNetwork)(nil),
		(*GlobalSpecType_SiteLocalInsideNetwork)(nil),
		(*GlobalSpecType_InsideNetwork)(nil),
		(*GlobalSpecType_LegacyType)(nil),
		(*GlobalSpecType_PrivateNetwork)(nil),
		(*GlobalSpecType_Srv6Network)(nil),
		(*GlobalSpecType_TenantVip)(nil),
		(*GlobalSpecType_FleetVip)(nil),
		(*GlobalSpecType_InterfaceIp)(nil),
		(*GlobalSpecType_SiteSnatPool)(nil),
		(*GlobalSpecType_FleetSnatPool)(nil),
	}
}

// Create virtual network
//
// x-displayName: "Create Virtual Network"
// Create virtual network in given namespace
type CreateSpecType struct {
	// Types that are valid to be assigned to NetworkChoice:
	//	*CreateSpecType_GlobalNetwork
	//	*CreateSpecType_SiteLocalNetwork
	//	*CreateSpecType_SiteLocalInsideNetwork
	//	*CreateSpecType_LegacyType
	//	*CreateSpecType_Srv6Network
	NetworkChoice isCreateSpecType_NetworkChoice `protobuf_oneof:"network_choice"`
	// static_routes
	//
	// x-displayName: "Static Routes"
	// List of static routes on the virtual network
	StaticRoutes []*StaticRouteViewType `protobuf:"bytes,12,rep,name=static_routes,json=staticRoutes,proto3" json:"static_routes,omitempty"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_82cb5476c2fb45fd, []int{15}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

type isCreateSpecType_NetworkChoice interface {
	isCreateSpecType_NetworkChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSpecType_GlobalNetwork struct {
	GlobalNetwork *schema.Empty `protobuf:"bytes,7,opt,name=global_network,json=globalNetwork,proto3,oneof" json:"global_network,omitempty"`
}
type CreateSpecType_SiteLocalNetwork struct {
	SiteLocalNetwork *schema.Empty `protobuf:"bytes,8,opt,name=site_local_network,json=siteLocalNetwork,proto3,oneof" json:"site_local_network,omitempty"`
}
type CreateSpecType_SiteLocalInsideNetwork struct {
	SiteLocalInsideNetwork *schema.Empty `protobuf:"bytes,9,opt,name=site_local_inside_network,json=siteLocalInsideNetwork,proto3,oneof" json:"site_local_inside_network,omitempty"`
}
type CreateSpecType_LegacyType struct {
	LegacyType schema.VirtualNetworkType `protobuf:"varint,11,opt,name=legacy_type,json=legacyType,proto3,enum=ves.io.schema.VirtualNetworkType,oneof" json:"legacy_type,omitempty"`
}
type CreateSpecType_Srv6Network struct {
	Srv6Network *PerSiteSrv6NetworkType `protobuf:"bytes,14,opt,name=srv6_network,json=srv6Network,proto3,oneof" json:"srv6_network,omitempty"`
}

func (*CreateSpecType_GlobalNetwork) isCreateSpecType_NetworkChoice()          {}
func (*CreateSpecType_SiteLocalNetwork) isCreateSpecType_NetworkChoice()       {}
func (*CreateSpecType_SiteLocalInsideNetwork) isCreateSpecType_NetworkChoice() {}
func (*CreateSpecType_LegacyType) isCreateSpecType_NetworkChoice()             {}
func (*CreateSpecType_Srv6Network) isCreateSpecType_NetworkChoice()            {}

func (m *CreateSpecType) GetNetworkChoice() isCreateSpecType_NetworkChoice {
	if m != nil {
		return m.NetworkChoice
	}
	return nil
}

func (m *CreateSpecType) GetGlobalNetwork() *schema.Empty {
	if x, ok := m.GetNetworkChoice().(*CreateSpecType_GlobalNetwork); ok {
		return x.GlobalNetwork
	}
	return nil
}

func (m *CreateSpecType) GetSiteLocalNetwork() *schema.Empty {
	if x, ok := m.GetNetworkChoice().(*CreateSpecType_SiteLocalNetwork); ok {
		return x.SiteLocalNetwork
	}
	return nil
}

func (m *CreateSpecType) GetSiteLocalInsideNetwork() *schema.Empty {
	if x, ok := m.GetNetworkChoice().(*CreateSpecType_SiteLocalInsideNetwork); ok {
		return x.SiteLocalInsideNetwork
	}
	return nil
}

func (m *CreateSpecType) GetLegacyType() schema.VirtualNetworkType {
	if x, ok := m.GetNetworkChoice().(*CreateSpecType_LegacyType); ok {
		return x.LegacyType
	}
	return schema.VIRTUAL_NETWORK_SITE_LOCAL
}

func (m *CreateSpecType) GetSrv6Network() *PerSiteSrv6NetworkType {
	if x, ok := m.GetNetworkChoice().(*CreateSpecType_Srv6Network); ok {
		return x.Srv6Network
	}
	return nil
}

func (m *CreateSpecType) GetStaticRoutes() []*StaticRouteViewType {
	if m != nil {
		return m.StaticRoutes
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CreateSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CreateSpecType_GlobalNetwork)(nil),
		(*CreateSpecType_SiteLocalNetwork)(nil),
		(*CreateSpecType_SiteLocalInsideNetwork)(nil),
		(*CreateSpecType_LegacyType)(nil),
		(*CreateSpecType_Srv6Network)(nil),
	}
}

// Replace virtual network
//
// x-displayName: "Replace Virtual Network"
// Replace given virtual network in given namespace
type ReplaceSpecType struct {
	// Types that are valid to be assigned to NetworkChoice:
	//	*ReplaceSpecType_GlobalNetwork
	//	*ReplaceSpecType_SiteLocalNetwork
	//	*ReplaceSpecType_SiteLocalInsideNetwork
	//	*ReplaceSpecType_LegacyType
	//	*ReplaceSpecType_PrivateNetwork
	//	*ReplaceSpecType_Srv6Network
	NetworkChoice isReplaceSpecType_NetworkChoice `protobuf_oneof:"network_choice"`
	// static_routes
	//
	// x-displayName: "Static Routes"
	// List of static routes on the virtual network
	StaticRoutes []*StaticRouteViewType `protobuf:"bytes,12,rep,name=static_routes,json=staticRoutes,proto3" json:"static_routes,omitempty"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_82cb5476c2fb45fd, []int{16}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

type isReplaceSpecType_NetworkChoice interface {
	isReplaceSpecType_NetworkChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplaceSpecType_GlobalNetwork struct {
	GlobalNetwork *schema.Empty `protobuf:"bytes,7,opt,name=global_network,json=globalNetwork,proto3,oneof" json:"global_network,omitempty"`
}
type ReplaceSpecType_SiteLocalNetwork struct {
	SiteLocalNetwork *schema.Empty `protobuf:"bytes,8,opt,name=site_local_network,json=siteLocalNetwork,proto3,oneof" json:"site_local_network,omitempty"`
}
type ReplaceSpecType_SiteLocalInsideNetwork struct {
	SiteLocalInsideNetwork *schema.Empty `protobuf:"bytes,9,opt,name=site_local_inside_network,json=siteLocalInsideNetwork,proto3,oneof" json:"site_local_inside_network,omitempty"`
}
type ReplaceSpecType_LegacyType struct {
	LegacyType schema.VirtualNetworkType `protobuf:"varint,11,opt,name=legacy_type,json=legacyType,proto3,enum=ves.io.schema.VirtualNetworkType,oneof" json:"legacy_type,omitempty"`
}
type ReplaceSpecType_PrivateNetwork struct {
	PrivateNetwork *schema.Empty `protobuf:"bytes,13,opt,name=private_network,json=privateNetwork,proto3,oneof" json:"private_network,omitempty"`
}
type ReplaceSpecType_Srv6Network struct {
	Srv6Network *PerSiteSrv6NetworkType `protobuf:"bytes,14,opt,name=srv6_network,json=srv6Network,proto3,oneof" json:"srv6_network,omitempty"`
}

func (*ReplaceSpecType_GlobalNetwork) isReplaceSpecType_NetworkChoice()          {}
func (*ReplaceSpecType_SiteLocalNetwork) isReplaceSpecType_NetworkChoice()       {}
func (*ReplaceSpecType_SiteLocalInsideNetwork) isReplaceSpecType_NetworkChoice() {}
func (*ReplaceSpecType_LegacyType) isReplaceSpecType_NetworkChoice()             {}
func (*ReplaceSpecType_PrivateNetwork) isReplaceSpecType_NetworkChoice()         {}
func (*ReplaceSpecType_Srv6Network) isReplaceSpecType_NetworkChoice()            {}

func (m *ReplaceSpecType) GetNetworkChoice() isReplaceSpecType_NetworkChoice {
	if m != nil {
		return m.NetworkChoice
	}
	return nil
}

func (m *ReplaceSpecType) GetGlobalNetwork() *schema.Empty {
	if x, ok := m.GetNetworkChoice().(*ReplaceSpecType_GlobalNetwork); ok {
		return x.GlobalNetwork
	}
	return nil
}

func (m *ReplaceSpecType) GetSiteLocalNetwork() *schema.Empty {
	if x, ok := m.GetNetworkChoice().(*ReplaceSpecType_SiteLocalNetwork); ok {
		return x.SiteLocalNetwork
	}
	return nil
}

func (m *ReplaceSpecType) GetSiteLocalInsideNetwork() *schema.Empty {
	if x, ok := m.GetNetworkChoice().(*ReplaceSpecType_SiteLocalInsideNetwork); ok {
		return x.SiteLocalInsideNetwork
	}
	return nil
}

func (m *ReplaceSpecType) GetLegacyType() schema.VirtualNetworkType {
	if x, ok := m.GetNetworkChoice().(*ReplaceSpecType_LegacyType); ok {
		return x.LegacyType
	}
	return schema.VIRTUAL_NETWORK_SITE_LOCAL
}

func (m *ReplaceSpecType) GetPrivateNetwork() *schema.Empty {
	if x, ok := m.GetNetworkChoice().(*ReplaceSpecType_PrivateNetwork); ok {
		return x.PrivateNetwork
	}
	return nil
}

func (m *ReplaceSpecType) GetSrv6Network() *PerSiteSrv6NetworkType {
	if x, ok := m.GetNetworkChoice().(*ReplaceSpecType_Srv6Network); ok {
		return x.Srv6Network
	}
	return nil
}

func (m *ReplaceSpecType) GetStaticRoutes() []*StaticRouteViewType {
	if m != nil {
		return m.StaticRoutes
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ReplaceSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ReplaceSpecType_GlobalNetwork)(nil),
		(*ReplaceSpecType_SiteLocalNetwork)(nil),
		(*ReplaceSpecType_SiteLocalInsideNetwork)(nil),
		(*ReplaceSpecType_LegacyType)(nil),
		(*ReplaceSpecType_PrivateNetwork)(nil),
		(*ReplaceSpecType_Srv6Network)(nil),
	}
}

// Get virtual network
//
// x-displayName: "Get Virtual Network"
// Gets virtual network in given namespace
type GetSpecType struct {
	// Types that are valid to be assigned to NetworkChoice:
	//	*GetSpecType_GlobalNetwork
	//	*GetSpecType_SiteLocalNetwork
	//	*GetSpecType_SiteLocalInsideNetwork
	//	*GetSpecType_LegacyType
	//	*GetSpecType_PrivateNetwork
	//	*GetSpecType_Srv6Network
	NetworkChoice isGetSpecType_NetworkChoice `protobuf_oneof:"network_choice"`
	// static_routes
	//
	// x-displayName: "Static Routes"
	// List of static routes on the virtual network
	StaticRoutes []*StaticRouteViewType `protobuf:"bytes,12,rep,name=static_routes,json=staticRoutes,proto3" json:"static_routes,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_82cb5476c2fb45fd, []int{17}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

type isGetSpecType_NetworkChoice interface {
	isGetSpecType_NetworkChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_GlobalNetwork struct {
	GlobalNetwork *schema.Empty `protobuf:"bytes,7,opt,name=global_network,json=globalNetwork,proto3,oneof" json:"global_network,omitempty"`
}
type GetSpecType_SiteLocalNetwork struct {
	SiteLocalNetwork *schema.Empty `protobuf:"bytes,8,opt,name=site_local_network,json=siteLocalNetwork,proto3,oneof" json:"site_local_network,omitempty"`
}
type GetSpecType_SiteLocalInsideNetwork struct {
	SiteLocalInsideNetwork *schema.Empty `protobuf:"bytes,9,opt,name=site_local_inside_network,json=siteLocalInsideNetwork,proto3,oneof" json:"site_local_inside_network,omitempty"`
}
type GetSpecType_LegacyType struct {
	LegacyType schema.VirtualNetworkType `protobuf:"varint,11,opt,name=legacy_type,json=legacyType,proto3,enum=ves.io.schema.VirtualNetworkType,oneof" json:"legacy_type,omitempty"`
}
type GetSpecType_PrivateNetwork struct {
	PrivateNetwork *schema.Empty `protobuf:"bytes,13,opt,name=private_network,json=privateNetwork,proto3,oneof" json:"private_network,omitempty"`
}
type GetSpecType_Srv6Network struct {
	Srv6Network *PerSiteSrv6NetworkType `protobuf:"bytes,14,opt,name=srv6_network,json=srv6Network,proto3,oneof" json:"srv6_network,omitempty"`
}

func (*GetSpecType_GlobalNetwork) isGetSpecType_NetworkChoice()          {}
func (*GetSpecType_SiteLocalNetwork) isGetSpecType_NetworkChoice()       {}
func (*GetSpecType_SiteLocalInsideNetwork) isGetSpecType_NetworkChoice() {}
func (*GetSpecType_LegacyType) isGetSpecType_NetworkChoice()             {}
func (*GetSpecType_PrivateNetwork) isGetSpecType_NetworkChoice()         {}
func (*GetSpecType_Srv6Network) isGetSpecType_NetworkChoice()            {}

func (m *GetSpecType) GetNetworkChoice() isGetSpecType_NetworkChoice {
	if m != nil {
		return m.NetworkChoice
	}
	return nil
}

func (m *GetSpecType) GetGlobalNetwork() *schema.Empty {
	if x, ok := m.GetNetworkChoice().(*GetSpecType_GlobalNetwork); ok {
		return x.GlobalNetwork
	}
	return nil
}

func (m *GetSpecType) GetSiteLocalNetwork() *schema.Empty {
	if x, ok := m.GetNetworkChoice().(*GetSpecType_SiteLocalNetwork); ok {
		return x.SiteLocalNetwork
	}
	return nil
}

func (m *GetSpecType) GetSiteLocalInsideNetwork() *schema.Empty {
	if x, ok := m.GetNetworkChoice().(*GetSpecType_SiteLocalInsideNetwork); ok {
		return x.SiteLocalInsideNetwork
	}
	return nil
}

func (m *GetSpecType) GetLegacyType() schema.VirtualNetworkType {
	if x, ok := m.GetNetworkChoice().(*GetSpecType_LegacyType); ok {
		return x.LegacyType
	}
	return schema.VIRTUAL_NETWORK_SITE_LOCAL
}

func (m *GetSpecType) GetPrivateNetwork() *schema.Empty {
	if x, ok := m.GetNetworkChoice().(*GetSpecType_PrivateNetwork); ok {
		return x.PrivateNetwork
	}
	return nil
}

func (m *GetSpecType) GetSrv6Network() *PerSiteSrv6NetworkType {
	if x, ok := m.GetNetworkChoice().(*GetSpecType_Srv6Network); ok {
		return x.Srv6Network
	}
	return nil
}

func (m *GetSpecType) GetStaticRoutes() []*StaticRouteViewType {
	if m != nil {
		return m.StaticRoutes
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetSpecType_GlobalNetwork)(nil),
		(*GetSpecType_SiteLocalNetwork)(nil),
		(*GetSpecType_SiteLocalInsideNetwork)(nil),
		(*GetSpecType_LegacyType)(nil),
		(*GetSpecType_PrivateNetwork)(nil),
		(*GetSpecType_Srv6Network)(nil),
	}
}

func init() {
	proto.RegisterType((*VoltADNPrivateNetworkReInfoType)(nil), "ves.io.schema.virtual_network.VoltADNPrivateNetworkReInfoType")
	golang_proto.RegisterType((*VoltADNPrivateNetworkReInfoType)(nil), "ves.io.schema.virtual_network.VoltADNPrivateNetworkReInfoType")
	proto.RegisterType((*VoltADNPrivateNetworkTenantInfoType)(nil), "ves.io.schema.virtual_network.VoltADNPrivateNetworkTenantInfoType")
	golang_proto.RegisterType((*VoltADNPrivateNetworkTenantInfoType)(nil), "ves.io.schema.virtual_network.VoltADNPrivateNetworkTenantInfoType")
	proto.RegisterType((*DNSServersList)(nil), "ves.io.schema.virtual_network.DNSServersList")
	golang_proto.RegisterType((*DNSServersList)(nil), "ves.io.schema.virtual_network.DNSServersList")
	proto.RegisterType((*VoltADNPrivateNetworkType)(nil), "ves.io.schema.virtual_network.VoltADNPrivateNetworkType")
	golang_proto.RegisterType((*VoltADNPrivateNetworkType)(nil), "ves.io.schema.virtual_network.VoltADNPrivateNetworkType")
	proto.RegisterMapType((map[string]*VoltADNPrivateNetworkReInfoType)(nil), "ves.io.schema.virtual_network.VoltADNPrivateNetworkType.ReInfoMapEntry")
	golang_proto.RegisterMapType((map[string]*VoltADNPrivateNetworkReInfoType)(nil), "ves.io.schema.virtual_network.VoltADNPrivateNetworkType.ReInfoMapEntry")
	proto.RegisterMapType((map[string]*VoltADNPrivateNetworkTenantInfoType)(nil), "ves.io.schema.virtual_network.VoltADNPrivateNetworkType.TenantInfoMapEntry")
	golang_proto.RegisterMapType((map[string]*VoltADNPrivateNetworkTenantInfoType)(nil), "ves.io.schema.virtual_network.VoltADNPrivateNetworkType.TenantInfoMapEntry")
	proto.RegisterType((*AnyCastVIPFleetType)(nil), "ves.io.schema.virtual_network.AnyCastVIPFleetType")
	golang_proto.RegisterType((*AnyCastVIPFleetType)(nil), "ves.io.schema.virtual_network.AnyCastVIPFleetType")
	proto.RegisterType((*SNATPoolType)(nil), "ves.io.schema.virtual_network.SNATPoolType")
	golang_proto.RegisterType((*SNATPoolType)(nil), "ves.io.schema.virtual_network.SNATPoolType")
	proto.RegisterType((*SNATPoolSiteType)(nil), "ves.io.schema.virtual_network.SNATPoolSiteType")
	golang_proto.RegisterType((*SNATPoolSiteType)(nil), "ves.io.schema.virtual_network.SNATPoolSiteType")
	proto.RegisterMapType((map[string]*SNATPoolType)(nil), "ves.io.schema.virtual_network.SNATPoolSiteType.NodeSnatPoolEntry")
	golang_proto.RegisterMapType((map[string]*SNATPoolType)(nil), "ves.io.schema.virtual_network.SNATPoolSiteType.NodeSnatPoolEntry")
	proto.RegisterType((*SNATPoolFleetType)(nil), "ves.io.schema.virtual_network.SNATPoolFleetType")
	golang_proto.RegisterType((*SNATPoolFleetType)(nil), "ves.io.schema.virtual_network.SNATPoolFleetType")
	proto.RegisterType((*Srv6NetworkNsParametersType)(nil), "ves.io.schema.virtual_network.Srv6NetworkNsParametersType")
	golang_proto.RegisterType((*Srv6NetworkNsParametersType)(nil), "ves.io.schema.virtual_network.Srv6NetworkNsParametersType")
	proto.RegisterType((*PerSiteSrv6NetworkType)(nil), "ves.io.schema.virtual_network.PerSiteSrv6NetworkType")
	golang_proto.RegisterType((*PerSiteSrv6NetworkType)(nil), "ves.io.schema.virtual_network.PerSiteSrv6NetworkType")
	proto.RegisterType((*NextHopInterfaceList)(nil), "ves.io.schema.virtual_network.NextHopInterfaceList")
	golang_proto.RegisterType((*NextHopInterfaceList)(nil), "ves.io.schema.virtual_network.NextHopInterfaceList")
	proto.RegisterType((*StaticRouteViewType)(nil), "ves.io.schema.virtual_network.StaticRouteViewType")
	golang_proto.RegisterType((*StaticRouteViewType)(nil), "ves.io.schema.virtual_network.StaticRouteViewType")
	proto.RegisterType((*ActivePBRPoliciesType)(nil), "ves.io.schema.virtual_network.ActivePBRPoliciesType")
	golang_proto.RegisterType((*ActivePBRPoliciesType)(nil), "ves.io.schema.virtual_network.ActivePBRPoliciesType")
	proto.RegisterType((*PerTenantVIPType)(nil), "ves.io.schema.virtual_network.PerTenantVIPType")
	golang_proto.RegisterType((*PerTenantVIPType)(nil), "ves.io.schema.virtual_network.PerTenantVIPType")
	proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.virtual_network.PerTenantVIPType.TenantVipMapEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.virtual_network.PerTenantVIPType.TenantVipMapEntry")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.virtual_network.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.virtual_network.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.virtual_network.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.virtual_network.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.virtual_network.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.virtual_network.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.virtual_network.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.virtual_network.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/virtual_network/types.proto", fileDescriptor_82cb5476c2fb45fd)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/virtual_network/types.proto", fileDescriptor_82cb5476c2fb45fd)
}

var fileDescriptor_82cb5476c2fb45fd = []byte{
	// 3167 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5a, 0x4b, 0x6c, 0x1b, 0xd7,
	0xd5, 0xd6, 0xe5, 0x9b, 0x87, 0xe2, 0x6b, 0x44, 0xc9, 0x34, 0xed, 0x30, 0x13, 0x3a, 0x7f, 0x22,
	0x27, 0x94, 0x64, 0x51, 0x7e, 0xff, 0x7f, 0x12, 0x8b, 0x91, 0x62, 0xc9, 0xf1, 0xaf, 0xb0, 0x23,
	0x57, 0x75, 0x0c, 0xa4, 0xd3, 0x11, 0x79, 0x29, 0x4d, 0x4c, 0xce, 0x4c, 0x67, 0x46, 0x94, 0x09,
	0x54, 0x68, 0x10, 0xb4, 0x1b, 0x2e, 0x8a, 0xd6, 0x40, 0x37, 0xee, 0xb2, 0x40, 0x50, 0x78, 0x51,
	0x14, 0x05, 0xba, 0x68, 0x87, 0x0b, 0x21, 0x40, 0x81, 0xa0, 0x8b, 0x42, 0x8b, 0x2e, 0x8c, 0xae,
	0x12, 0x7a, 0x93, 0xa8, 0x5d, 0x64, 0x99, 0x76, 0x51, 0x14, 0xf7, 0xce, 0x0c, 0x39, 0x1c, 0x51,
	0xb4, 0xac, 0x26, 0x40, 0x11, 0x64, 0x37, 0xc3, 0x39, 0xf7, 0x3b, 0xf7, 0x3c, 0xee, 0x39, 0xdf,
	0xb9, 0x12, 0x9c, 0x6d, 0x60, 0x6d, 0x5a, 0x94, 0x67, 0xb4, 0xf2, 0x26, 0xae, 0x0b, 0x33, 0x0d,
	0x51, 0xd5, 0xb7, 0x84, 0x1a, 0x2f, 0x61, 0x7d, 0x5b, 0x56, 0xef, 0xce, 0xe8, 0x4d, 0x05, 0x6b,
	0xd3, 0x8a, 0x2a, 0xeb, 0x32, 0xf3, 0x8c, 0x29, 0x3a, 0x6d, 0x8a, 0x4e, 0xbb, 0x44, 0x33, 0x53,
	0x1b, 0xa2, 0xbe, 0xb9, 0xb5, 0x3e, 0x5d, 0x96, 0xeb, 0x33, 0x1b, 0xf2, 0x86, 0x3c, 0x43, 0x57,
	0xad, 0x6f, 0x55, 0xe9, 0x1b, 0x7d, 0xa1, 0x4f, 0x26, 0x5a, 0xe6, 0x44, 0xbf, 0x62, 0x09, 0xeb,
	0xd6, 0x87, 0x53, 0xfd, 0x1f, 0x64, 0x45, 0x17, 0x65, 0xc9, 0xda, 0x43, 0xe6, 0x64, 0xff, 0x47,
	0xc7, 0xf6, 0x32, 0xa7, 0x5d, 0x96, 0x08, 0x35, 0xb1, 0x22, 0xe8, 0xd8, 0xfa, 0xca, 0xba, 0xed,
	0xc4, 0xdb, 0x7c, 0x3f, 0xf4, 0xb3, 0x07, 0x25, 0x34, 0xa7, 0x82, 0xdc, 0x2f, 0x10, 0x3c, 0xbb,
	0x26, 0xd7, 0xf4, 0xf9, 0x85, 0x95, 0x92, 0x2a, 0x36, 0x04, 0x1d, 0xaf, 0x98, 0xa6, 0x73, 0x78,
	0x59, 0xaa, 0xca, 0xb7, 0x9a, 0x0a, 0x66, 0x58, 0xf0, 0x35, 0x6a, 0x82, 0x94, 0x46, 0x2c, 0x9a,
	0x8c, 0x16, 0x47, 0xff, 0xf0, 0xd9, 0xae, 0x37, 0xf8, 0x92, 0x3f, 0xfd, 0xaf, 0x67, 0x27, 0x11,
	0x47, 0xbf, 0x30, 0x6b, 0x10, 0x95, 0xe4, 0x0a, 0xe6, 0x35, 0x5c, 0xc3, 0x65, 0x5d, 0x56, 0xd3,
	0x1e, 0x16, 0x4d, 0x46, 0x0a, 0xec, 0x74, 0xbf, 0x77, 0x6f, 0x0a, 0xeb, 0xb8, 0xb6, 0x6a, 0xc9,
	0x10, 0xe8, 0x62, 0xfc, 0xd1, 0x0e, 0xfa, 0xd4, 0x40, 0xe8, 0x41, 0x1b, 0xf9, 0xc0, 0x33, 0x82,
	0xb8, 0x51, 0x82, 0x63, 0x8b, 0xe4, 0x3e, 0x40, 0x70, 0x66, 0xe0, 0xee, 0x6e, 0x61, 0x49, 0x90,
	0xf4, 0xee, 0x0e, 0xaf, 0xc0, 0x58, 0x05, 0x57, 0x85, 0xad, 0x9a, 0xce, 0x2b, 0xa6, 0x1c, 0xdf,
	0x10, 0x15, 0xba, 0xe1, 0x70, 0x31, 0x4c, 0x36, 0xec, 0x53, 0x3d, 0x0a, 0xe2, 0x92, 0x96, 0x94,
	0x05, 0xb6, 0x26, 0x2a, 0xcc, 0x02, 0x9c, 0xac, 0x8a, 0x92, 0x50, 0xe3, 0x07, 0x01, 0x78, 0xdc,
	0x00, 0x13, 0x54, 0x76, 0xc1, 0x8d, 0x92, 0x7b, 0x13, 0x62, 0x0b, 0x2b, 0xab, 0xab, 0x58, 0x6d,
	0x60, 0x55, 0xbb, 0x29, 0x6a, 0x3a, 0x73, 0x05, 0x02, 0x15, 0x49, 0xe3, 0x45, 0x25, 0x1d, 0x60,
	0xbd, 0x93, 0xe1, 0x62, 0x8e, 0x80, 0x84, 0xef, 0xa3, 0x40, 0x8e, 0x22, 0x91, 0x37, 0xff, 0x7d,
	0xe4, 0x49, 0xf8, 0xec, 0xa7, 0x10, 0xe2, 0xfc, 0x15, 0x49, 0x5b, 0x56, 0x72, 0x3f, 0x8e, 0xc1,
	0xc9, 0xc1, 0x56, 0x13, 0x5b, 0x8b, 0x90, 0x94, 0xe4, 0xee, 0x2e, 0x85, 0x72, 0x19, 0x6b, 0x9a,
	0xe5, 0xef, 0x94, 0xcb, 0xdf, 0x8b, 0x75, 0x45, 0x6f, 0x2e, 0x8d, 0x70, 0x71, 0x49, 0xb6, 0x80,
	0xe6, 0xa9, 0x38, 0x73, 0x13, 0x26, 0xfa, 0x01, 0x78, 0x2c, 0x09, 0xeb, 0x35, 0x5c, 0x49, 0x7b,
	0x87, 0x02, 0xa5, 0x14, 0x27, 0xcc, 0xa2, 0xb9, 0x86, 0xf9, 0x3f, 0x88, 0x39, 0x76, 0x54, 0x91,
	0xb4, 0xb4, 0x7f, 0x08, 0x0a, 0x8d, 0xb1, 0xb5, 0x9d, 0x05, 0x49, 0x63, 0x4a, 0x10, 0x71, 0x2e,
	0x0d, 0xd0, 0xa5, 0x53, 0xd3, 0x43, 0xcf, 0xe5, 0x74, 0xbf, 0xb3, 0x97, 0x10, 0x07, 0x4a, 0x0f,
	0xb1, 0x0c, 0xa9, 0xb2, 0x5c, 0xaf, 0xcb, 0x12, 0xdf, 0x9f, 0x94, 0xc1, 0xe3, 0x26, 0x25, 0x63,
	0xc2, 0xad, 0x38, 0x52, 0x93, 0xf9, 0xc0, 0x0b, 0x11, 0x15, 0xf3, 0xa2, 0x54, 0x95, 0xf9, 0xba,
	0xa0, 0xa4, 0x43, 0xac, 0x77, 0x32, 0x52, 0xb8, 0xfe, 0x84, 0x7d, 0x1f, 0x1a, 0xd6, 0x69, 0xf3,
	0xbc, 0xfd, 0xbf, 0xa0, 0x2c, 0x4a, 0xba, 0xda, 0x2c, 0xb6, 0x3d, 0x24, 0x2f, 0x22, 0x0f, 0x50,
	0x28, 0x17, 0x50, 0x7d, 0x09, 0x94, 0xbe, 0x46, 0xf3, 0xe4, 0x01, 0xf2, 0x24, 0xae, 0x75, 0x3e,
	0xfe, 0xa3, 0x77, 0xa3, 0xd5, 0x46, 0x65, 0x46, 0xf8, 0xab, 0x81, 0xde, 0x81, 0x90, 0x50, 0xd7,
	0xae, 0x4c, 0x09, 0x75, 0x0d, 0x42, 0x95, 0xf2, 0x6c, 0x61, 0x4a, 0xd0, 0x36, 0x21, 0x28, 0x35,
	0x2f, 0x4f, 0x49, 0xcd, 0x32, 0x04, 0x15, 0xa1, 0x30, 0xa5, 0x08, 0x2a, 0x79, 0x38, 0x6f, 0x3e,
	0x68, 0x1b, 0x73, 0x53, 0x9a, 0x28, 0x41, 0x48, 0x6b, 0xcc, 0x9e, 0x9b, 0xd2, 0xde, 0x2d, 0x43,
	0x50, 0x97, 0x0a, 0x53, 0x35, 0x59, 0x82, 0xa0, 0xde, 0xbc, 0x3c, 0xa5, 0xdf, 0x6d, 0x42, 0x70,
	0x1b, 0x6b, 0x53, 0x1a, 0x16, 0x88, 0xae, 0x64, 0xab, 0x8d, 0xa2, 0x4c, 0x64, 0xdf, 0x40, 0x41,
	0x6e, 0x91, 0x95, 0x84, 0x3a, 0x26, 0xbf, 0x8e, 0xb6, 0xda, 0x28, 0xc4, 0x04, 0x3a, 0x06, 0xf2,
	0x70, 0x8b, 0xe4, 0x07, 0x68, 0xb5, 0x51, 0x80, 0xf1, 0x7d, 0x64, 0xa0, 0x11, 0xf2, 0x1a, 0x68,
	0xb5, 0x49, 0x52, 0x93, 0xc7, 0xb9, 0x56, 0x1b, 0xcd, 0x64, 0xa6, 0xf6, 0x0d, 0x74, 0xb6, 0x84,
	0x55, 0x96, 0x5b, 0x64, 0x2d, 0x3f, 0xb0, 0x56, 0xd4, 0x58, 0xcb, 0x3f, 0xac, 0x22, 0xa8, 0x42,
	0x1d, 0xeb, 0x58, 0xd5, 0xc8, 0xba, 0xb3, 0xad, 0x36, 0xfa, 0x9f, 0xcc, 0x99, 0x8e, 0x81, 0xec,
	0x1a, 0xc5, 0x5a, 0x9e, 0x63, 0x2d, 0xd7, 0x11, 0x2c, 0xe2, 0xb7, 0xae, 0xfe, 0x8c, 0x6f, 0xd7,
	0x40, 0x88, 0x0b, 0xab, 0xb6, 0x3b, 0x99, 0x39, 0x88, 0xcb, 0xdb, 0x12, 0x56, 0x79, 0x9d, 0xd6,
	0x0c, 0x5e, 0xac, 0xa4, 0xc3, 0xf4, 0x58, 0x47, 0x88, 0x47, 0x03, 0xaa, 0x8f, 0x45, 0x93, 0xd7,
	0xb8, 0x28, 0x95, 0xb1, 0xca, 0x4a, 0x85, 0xf9, 0xb3, 0x07, 0xe2, 0xb6, 0xbc, 0x1d, 0x61, 0xa0,
	0x11, 0x7e, 0xf3, 0xd8, 0x11, 0xee, 0xd5, 0xac, 0x6e, 0x94, 0x1f, 0xa1, 0xe1, 0x51, 0x7e, 0xa5,
	0xd5, 0x46, 0x57, 0x98, 0x4b, 0xfb, 0x06, 0x9a, 0x5b, 0x11, 0xea, 0x98, 0x95, 0xab, 0xac, 0xbe,
	0x89, 0x59, 0x73, 0x67, 0xec, 0xb6, 0xa8, 0x6f, 0xb2, 0xdb, 0x9b, 0x72, 0x9d, 0xd5, 0x37, 0x45,
	0xad, 0xeb, 0x43, 0x51, 0x63, 0xb5, 0x4d, 0x41, 0xc5, 0x15, 0x82, 0x30, 0xd6, 0x6a, 0xa3, 0x38,
	0x13, 0xed, 0x18, 0x28, 0x6c, 0xea, 0x67, 0x97, 0x2b, 0xc3, 0x83, 0x75, 0xba, 0xd5, 0x46, 0xe9,
	0xcc, 0xc4, 0xbe, 0x81, 0x18, 0x6b, 0x05, 0xf1, 0x80, 0x5a, 0x17, 0x48, 0x5f, 0x21, 0x02, 0xe3,
	0xad, 0x36, 0x4a, 0x66, 0xe2, 0x1d, 0x03, 0x45, 0x96, 0xfb, 0xbf, 0x38, 0x23, 0x10, 0xd5, 0x9d,
	0xe6, 0x32, 0xdf, 0x86, 0x53, 0x92, 0xcc, 0x0b, 0x95, 0x06, 0x56, 0x75, 0x51, 0xc3, 0x7c, 0x05,
	0x57, 0xc4, 0xb2, 0xa0, 0xe3, 0x0a, 0xa9, 0xb3, 0x5a, 0x7a, 0x74, 0x48, 0xc1, 0xf0, 0x70, 0x69,
	0x49, 0x9e, 0xb7, 0x57, 0x2e, 0xd8, 0x0b, 0xd7, 0x44, 0x85, 0x14, 0x8f, 0xf4, 0xa1, 0x98, 0xd1,
	0xa1, 0x98, 0x13, 0xc2, 0x40, 0xc4, 0xcc, 0x0f, 0x20, 0xd6, 0x7f, 0x14, 0x99, 0x04, 0x78, 0xef,
	0xe2, 0xa6, 0xd9, 0x4c, 0x38, 0xf2, 0xc8, 0xdc, 0x02, 0x7f, 0x43, 0xa8, 0x6d, 0x61, 0xab, 0xec,
	0xbe, 0x7a, 0x9c, 0x94, 0xe8, 0xf5, 0x57, 0xce, 0x04, 0xbb, 0xea, 0xb9, 0x8c, 0x32, 0x3f, 0x42,
	0xc0, 0x1c, 0xcc, 0x93, 0x01, 0x5b, 0xb8, 0xdd, 0xbf, 0x85, 0xe2, 0xb1, 0xb2, 0xb2, 0xaf, 0x89,
	0x3a, 0xb6, 0x51, 0x9c, 0x84, 0x71, 0x57, 0x7f, 0x28, 0x6f, 0xca, 0x62, 0x19, 0x33, 0xf1, 0x5d,
	0x03, 0x79, 0xf6, 0x0c, 0x84, 0x3a, 0x06, 0xf2, 0x16, 0xf2, 0x73, 0xc5, 0x67, 0x00, 0x48, 0x9b,
	0x73, 0x7c, 0xf6, 0xef, 0x19, 0xc8, 0x47, 0x3e, 0x5f, 0xc8, 0x5f, 0x2c, 0x9e, 0x85, 0x54, 0x5f,
	0x54, 0x6c, 0xc1, 0xe4, 0xae, 0x81, 0x46, 0xf7, 0x0c, 0x14, 0xe9, 0x18, 0xc8, 0x3f, 0x5b, 0xc8,
	0xcf, 0xce, 0xdd, 0xf0, 0x85, 0x50, 0xc2, 0x73, 0xc3, 0x17, 0xf2, 0x25, 0xfc, 0x37, 0x7c, 0xa1,
	0x48, 0x62, 0x34, 0xa7, 0xc3, 0xd8, 0xbc, 0xd4, 0x7c, 0x5d, 0xd0, 0xf4, 0xb5, 0xe5, 0xd2, 0x1b,
	0x35, 0x8c, 0x75, 0xda, 0x00, 0xdf, 0x81, 0x28, 0x41, 0x12, 0x6a, 0x35, 0xb9, 0x2c, 0x90, 0xba,
	0x8e, 0xa8, 0x0b, 0x72, 0x07, 0x5c, 0x80, 0xb7, 0xb5, 0xe9, 0xb7, 0xd6, 0xdf, 0xc5, 0x65, 0x9d,
	0xc3, 0x55, 0x5a, 0xd9, 0x53, 0x0f, 0x77, 0x92, 0x42, 0xa5, 0xa2, 0x12, 0x8b, 0xba, 0xeb, 0xb9,
	0xd1, 0x86, 0xa8, 0xcc, 0xdb, 0x6f, 0xb9, 0xdb, 0x30, 0xba, 0xba, 0x32, 0x7f, 0xab, 0x24, 0xcb,
	0x35, 0xaa, 0x6e, 0x09, 0xa2, 0xa2, 0xd2, 0x38, 0xcf, 0x2b, 0x2a, 0xae, 0x8a, 0xf7, 0xb0, 0x96,
	0x46, 0xb4, 0x9f, 0x9f, 0x21, 0x27, 0x15, 0xee, 0xa3, 0x60, 0xce, 0xaf, 0x7a, 0xbf, 0x40, 0xbd,
	0x86, 0x8e, 0x1c, 0x0d, 0x7d, 0x94, 0xac, 0x2c, 0x59, 0x0b, 0x73, 0xbf, 0xf3, 0x42, 0xc2, 0x86,
	0x5e, 0x15, 0x75, 0x4c, 0xe1, 0x7f, 0xeb, 0x21, 0xdd, 0x93, 0xb4, 0x29, 0x49, 0xd0, 0x79, 0x45,
	0x96, 0x6b, 0x54, 0x41, 0xa4, 0x30, 0xff, 0x84, 0x90, 0xba, 0x91, 0xa6, 0x69, 0x7b, 0x92, 0x04,
	0x9d, 0xfc, 0x68, 0x96, 0x97, 0x8f, 0x06, 0x96, 0x97, 0xc0, 0x03, 0xe4, 0x4d, 0xbc, 0x47, 0xcf,
	0x7a, 0xbe, 0xd5, 0x46, 0x93, 0xcc, 0x0b, 0xfb, 0x06, 0xca, 0x39, 0xeb, 0x0b, 0xd9, 0x0f, 0x5b,
	0x95, 0x55, 0xfa, 0x42, 0xf6, 0xc5, 0x92, 0x7d, 0xb9, 0xca, 0x09, 0x51, 0xc7, 0xae, 0x58, 0xcd,
	0xe0, 0xf0, 0x72, 0x92, 0x6d, 0xb5, 0x51, 0x26, 0x93, 0xde, 0x37, 0x50, 0x8a, 0xec, 0x98, 0x22,
	0xb9, 0xca, 0x3c, 0x05, 0xcd, 0x50, 0x50, 0x2a, 0x52, 0xb2, 0x94, 0x39, 0xcb, 0x89, 0xc9, 0x0b,
	0x2d, 0xeb, 0x32, 0x35, 0x48, 0x1e, 0xb0, 0x76, 0xc0, 0x21, 0x99, 0xef, 0x3f, 0x24, 0x2f, 0x1f,
	0xd1, 0xa3, 0xae, 0xd3, 0x90, 0xdb, 0x81, 0xa4, 0xfd, 0xa9, 0x97, 0x85, 0x9b, 0x30, 0xd6, 0x8d,
	0xd8, 0x97, 0x98, 0x8b, 0x49, 0xcd, 0xb2, 0xa9, 0x97, 0x90, 0xff, 0x0b, 0xa7, 0x56, 0xd5, 0xc6,
	0x45, 0xeb, 0xd0, 0xae, 0x68, 0xa5, 0xae, 0xf3, 0xe8, 0x46, 0x4e, 0x43, 0x98, 0xb4, 0x64, 0x4d,
	0x11, 0xca, 0xd8, 0x32, 0xbe, 0xf7, 0x43, 0x6e, 0x37, 0x02, 0x13, 0x25, 0xac, 0x92, 0x24, 0x71,
	0x80, 0x58, 0x89, 0x9d, 0x92, 0x64, 0xbe, 0x2b, 0x6a, 0xbb, 0xe1, 0x09, 0x5c, 0x92, 0x91, 0xe4,
	0x15, 0x7b, 0x89, 0x85, 0xc6, 0x7c, 0x1f, 0x26, 0x34, 0xb5, 0x71, 0xd1, 0x46, 0xe0, 0x25, 0x8d,
	0xa7, 0x11, 0xd6, 0x2c, 0x3a, 0x79, 0xf5, 0x49, 0x8e, 0x3f, 0xdc, 0xbc, 0xa5, 0x11, 0x6e, 0x4c,
	0x3b, 0xf0, 0x59, 0x63, 0xae, 0x41, 0x42, 0x94, 0x74, 0xac, 0x56, 0xc9, 0xce, 0x45, 0x85, 0xb2,
	0xf5, 0xe1, 0xac, 0x33, 0xd6, 0x95, 0x5f, 0x56, 0x08, 0xf1, 0xcf, 0x43, 0x44, 0x90, 0x9a, 0x65,
	0x41, 0xd3, 0xe9, 0xe2, 0x80, 0x8b, 0xea, 0x13, 0x4e, 0x69, 0x7d, 0x27, 0xd2, 0xdf, 0x85, 0x70,
	0x95, 0xc4, 0x9e, 0xca, 0x9a, 0x44, 0xb2, 0xf0, 0x04, 0xab, 0x06, 0xd4, 0xae, 0x62, 0xe4, 0xd1,
	0x0e, 0x22, 0xf9, 0x4c, 0xe8, 0xe5, 0x12, 0xe2, 0x42, 0x14, 0x93, 0xe0, 0xbf, 0x09, 0x13, 0x7d,
	0xf6, 0xf4, 0xaa, 0x41, 0x78, 0x68, 0x1b, 0x1b, 0x73, 0x58, 0x65, 0x1f, 0x07, 0xe6, 0x3b, 0x10,
	0xd3, 0x44, 0xdd, 0x59, 0x52, 0x80, 0x82, 0xcc, 0x3c, 0x65, 0x49, 0x59, 0xf2, 0x70, 0xa3, 0x04,
	0xa8, 0x0b, 0xbc, 0x01, 0x71, 0xd3, 0x0b, 0x3d, 0xe4, 0x08, 0x45, 0x3e, 0x77, 0x44, 0xe4, 0x43,
	0x3c, 0xe1, 0xe1, 0xa2, 0x14, 0xb7, 0xab, 0xe8, 0x2d, 0xf0, 0x6b, 0x35, 0xb1, 0x8c, 0x2d, 0x62,
	0x70, 0x94, 0xf3, 0x34, 0xfe, 0x70, 0x87, 0xe9, 0xcb, 0x42, 0x0a, 0xc0, 0x99, 0x38, 0xcc, 0x6d,
	0x08, 0x50, 0x0d, 0x84, 0x16, 0x78, 0x8f, 0x88, 0x78, 0xfa, 0xe1, 0x8e, 0x9f, 0x2e, 0xea, 0xd6,
	0xf6, 0x6b, 0xf6, 0x53, 0x1a, 0x71, 0x16, 0x1e, 0xb3, 0x09, 0x27, 0xac, 0x1e, 0x69, 0x2b, 0x56,
	0x75, 0x41, 0xdd, 0x20, 0xaa, 0x62, 0x54, 0x55, 0xc6, 0xa5, 0x8a, 0x93, 0xb7, 0x74, 0x7c, 0x8b,
	0x8a, 0x14, 0x53, 0x07, 0xe7, 0xc0, 0x34, 0xe2, 0xc6, 0x4d, 0x40, 0x9b, 0x29, 0x58, 0x70, 0xcc,
	0x3b, 0x90, 0xa4, 0xd1, 0x96, 0xb0, 0xde, 0xd3, 0x11, 0x3f, 0xa6, 0x8e, 0x84, 0x0d, 0xd5, 0x85,
	0x57, 0xe0, 0x14, 0x26, 0xbf, 0x29, 0x2a, 0x21, 0x53, 0x07, 0x8c, 0x49, 0x1c, 0x53, 0xd1, 0xc9,
	0x1e, 0xa8, 0xdb, 0xa0, 0xb7, 0x21, 0x8e, 0xef, 0x29, 0xb2, 0xea, 0x30, 0x27, 0x79, 0x4c, 0x2d,
	0x31, 0x13, 0xa8, 0x0b, 0x7d, 0x0d, 0xc6, 0x55, 0x5c, 0x97, 0xc9, 0x21, 0x10, 0x2b, 0xbc, 0xa6,
	0x0b, 0xba, 0xc6, 0x2b, 0x35, 0x2c, 0xa5, 0x19, 0x7a, 0x89, 0x11, 0x25, 0xa9, 0x47, 0xcf, 0xfa,
	0x4b, 0x9e, 0xf4, 0xf7, 0x38, 0xc6, 0x94, 0x5d, 0x15, 0x2b, 0xab, 0x44, 0xb2, 0x54, 0xc3, 0x52,
	0xf1, 0x0c, 0x24, 0x7a, 0xb5, 0xf1, 0x30, 0xfa, 0xf3, 0x22, 0x30, 0xf6, 0xbd, 0x81, 0x8b, 0xdd,
	0xd8, 0x34, 0xc8, 0x7f, 0x21, 0x7f, 0x31, 0x7f, 0xa9, 0xf8, 0x22, 0x24, 0x7a, 0xed, 0xc2, 0x12,
	0x1b, 0xdb, 0x35, 0x50, 0x78, 0xcf, 0x40, 0xa1, 0x8e, 0x81, 0x82, 0x57, 0xf2, 0xb3, 0xe7, 0xf2,
	0xb3, 0xb3, 0x2e, 0x1a, 0x14, 0x4a, 0x84, 0x73, 0x3f, 0x41, 0x90, 0x5a, 0xc1, 0xf7, 0xf4, 0x25,
	0x59, 0x59, 0xb6, 0x0f, 0x3b, 0xbd, 0x62, 0x68, 0x00, 0x74, 0x4f, 0xbf, 0x66, 0xb1, 0x86, 0xa3,
	0xe4, 0x75, 0xe1, 0xe1, 0x4e, 0xd2, 0x0e, 0x6f, 0x17, 0x60, 0x10, 0x7f, 0x71, 0xf8, 0xd7, 0xa1,
	0x29, 0xf7, 0x17, 0x2f, 0x8c, 0x11, 0x3f, 0x89, 0x65, 0x1a, 0x97, 0x35, 0x11, 0x6f, 0xd3, 0x86,
	0xb2, 0x0a, 0x11, 0x51, 0x71, 0xf3, 0xa4, 0xc2, 0x17, 0x06, 0x1a, 0x19, 0xc0, 0x95, 0x02, 0xf7,
	0x09, 0x0b, 0xf1, 0x1c, 0xa2, 0x4c, 0xb1, 0x49, 0x13, 0x33, 0x0d, 0x40, 0xc8, 0x9e, 0xd9, 0x28,
	0x69, 0x3f, 0x09, 0x17, 0xa3, 0x36, 0xa6, 0x4f, 0xf5, 0xdc, 0x43, 0x4b, 0x23, 0x5c, 0x58, 0x54,
	0xe6, 0x4d, 0x09, 0xe6, 0x36, 0x84, 0xbb, 0x5b, 0x4d, 0xfb, 0x9e, 0xaa, 0x1b, 0x1f, 0xf0, 0x09,
	0x45, 0xb6, 0x5f, 0x98, 0xd7, 0x20, 0x6e, 0xc7, 0x7a, 0x43, 0xd0, 0xf1, 0xb6, 0xd0, 0x1c, 0xda,
	0x71, 0x46, 0xb8, 0x98, 0x25, 0x7e, 0xdd, 0x94, 0x66, 0x96, 0xc0, 0x2f, 0xe8, 0xba, 0xaa, 0xd1,
	0x1b, 0xa1, 0x58, 0xe1, 0xf4, 0xa0, 0x24, 0x9f, 0xd7, 0x75, 0xf3, 0x12, 0x62, 0x70, 0x9a, 0x9b,
	0x00, 0x57, 0x5f, 0xfc, 0xd0, 0x40, 0x67, 0x20, 0x01, 0x91, 0xe5, 0x12, 0xdb, 0xf5, 0x14, 0x9a,
	0x85, 0x38, 0x84, 0x48, 0xa6, 0xb0, 0x4b, 0xb2, 0xc2, 0x78, 0x0b, 0xf9, 0x8b, 0xc5, 0xe7, 0x21,
	0x2e, 0xe1, 0x7b, 0x3a, 0xbf, 0x29, 0xf7, 0x25, 0xa7, 0x77, 0xcf, 0x40, 0x1e, 0x92, 0x9c, 0x73,
	0xf9, 0xf3, 0xf9, 0x0b, 0x37, 0x7c, 0x21, 0x4f, 0xc2, 0x9b, 0xfb, 0xb9, 0x07, 0xc6, 0xe7, 0xcb,
	0xba, 0xd8, 0xc0, 0xa5, 0x22, 0x57, 0x92, 0x6b, 0x62, 0x59, 0xc4, 0x26, 0xc5, 0x78, 0x1f, 0x41,
	0xa6, 0x2a, 0xab, 0xdb, 0x82, 0x5a, 0xe1, 0x15, 0x55, 0xbe, 0xd7, 0xe4, 0x95, 0x75, 0x95, 0x57,
	0x2c, 0x91, 0xa7, 0xc8, 0xbc, 0xe7, 0x1e, 0xee, 0xa4, 0xe8, 0xb2, 0x26, 0xbf, 0x2e, 0x68, 0xb8,
	0xc2, 0xab, 0xf2, 0x96, 0x2e, 0x4a, 0x1b, 0x5d, 0x5b, 0x59, 0xee, 0x84, 0xa5, 0xa8, 0x44, 0xf4,
	0x94, 0xd6, 0x55, 0x7b, 0x23, 0xcc, 0x36, 0xa4, 0xec, 0x00, 0xf5, 0x69, 0xf7, 0x7c, 0x99, 0xda,
	0x19, 0x4b, 0x85, 0x43, 0x71, 0xee, 0x1f, 0x1e, 0x48, 0x94, 0xec, 0xbb, 0x81, 0xb5, 0xe5, 0x12,
	0x75, 0xc9, 0x2f, 0x3d, 0x10, 0xb3, 0x2e, 0x08, 0xc8, 0xc1, 0xaf, 0x0b, 0xca, 0x11, 0x69, 0xbb,
	0x1b, 0xc9, 0xba, 0x16, 0x58, 0x13, 0x95, 0xee, 0xad, 0xc0, 0xef, 0x87, 0xdc, 0x0a, 0xd0, 0x5b,
	0xc4, 0x07, 0x28, 0xf0, 0x12, 0x25, 0x29, 0x84, 0x25, 0x4f, 0xb6, 0xda, 0xe8, 0x79, 0x26, 0xb7,
	0x6f, 0xa0, 0xec, 0x80, 0x3b, 0x02, 0x9b, 0xc5, 0xaf, 0x2d, 0x97, 0x8e, 0x77, 0x1d, 0x90, 0x6a,
	0xb5, 0x51, 0x22, 0x13, 0xdb, 0x37, 0x10, 0x58, 0x2b, 0x2c, 0x28, 0xeb, 0x43, 0xc7, 0x40, 0xb0,
	0xac, 0xb0, 0xd6, 0x01, 0xe5, 0x46, 0x75, 0x87, 0x39, 0x99, 0xd7, 0x20, 0x79, 0xc0, 0xbc, 0x01,
	0x3c, 0x3d, 0xe5, 0xe4, 0xe9, 0x61, 0x27, 0xf5, 0xfe, 0x38, 0x06, 0xb1, 0xeb, 0x35, 0x79, 0x5d,
	0xa8, 0xad, 0x2a, 0xb8, 0x4c, 0x3d, 0xbf, 0x08, 0x41, 0x6d, 0x6b, 0x5d, 0x22, 0xcd, 0xc2, 0x0c,
	0xfd, 0x29, 0x97, 0xc7, 0x97, 0x95, 0x55, 0xfa, 0x9d, 0xc6, 0x3c, 0xf6, 0x68, 0xc7, 0x51, 0x6e,
	0x10, 0x67, 0xaf, 0x65, 0x96, 0xc1, 0xa7, 0x37, 0x15, 0x4c, 0x2b, 0x4a, 0xac, 0xf0, 0x9c, 0x0b,
	0x63, 0xcd, 0x8c, 0x9a, 0x83, 0x2e, 0x17, 0x19, 0x02, 0x13, 0x25, 0x47, 0x21, 0x34, 0x82, 0x3c,
	0x5e, 0x5f, 0x30, 0x0c, 0x1c, 0x85, 0x60, 0xde, 0x86, 0xa8, 0x46, 0xcb, 0x21, 0x4d, 0x28, 0xac,
	0xa5, 0xfd, 0x74, 0x5f, 0x59, 0x17, 0xa6, 0xa3, 0x64, 0xba, 0x4e, 0x78, 0xc2, 0x71, 0xc2, 0x47,
	0xb5, 0x9e, 0x98, 0xc6, 0xbc, 0x02, 0xb1, 0x0d, 0x6a, 0x7e, 0x97, 0x9d, 0x07, 0x87, 0x96, 0x9c,
	0xa8, 0x29, 0x6d, 0x13, 0xf3, 0x05, 0x60, 0x28, 0x11, 0x24, 0xa3, 0x44, 0x0f, 0x22, 0x34, 0x14,
	0x22, 0x41, 0x56, 0xdc, 0x24, 0x0b, 0x6c, 0x94, 0x6f, 0xc1, 0x49, 0x07, 0x8a, 0x28, 0x69, 0x62,
	0xa5, 0x37, 0x2d, 0x84, 0x87, 0x82, 0x4d, 0x74, 0xc1, 0x96, 0xe9, 0x32, 0x1b, 0xf2, 0x0d, 0x88,
	0xb9, 0x70, 0xe0, 0x70, 0x9c, 0x62, 0xd0, 0xba, 0x90, 0x25, 0x06, 0x8a, 0x7d, 0x38, 0x77, 0x20,
	0x52, 0xc3, 0x1b, 0x42, 0xb9, 0xc9, 0xd3, 0x60, 0x46, 0x8e, 0x1a, 0xcc, 0x94, 0xdd, 0xff, 0x23,
	0xef, 0xa3, 0x50, 0x26, 0x60, 0x06, 0x74, 0x69, 0x84, 0x03, 0x13, 0xcd, 0x9a, 0x8f, 0xe2, 0xf6,
	0x25, 0x88, 0xbd, 0xc9, 0xe8, 0xd1, 0x36, 0x19, 0x53, 0xfa, 0xee, 0x59, 0x98, 0x32, 0x8c, 0x3a,
	0x99, 0x69, 0x3a, 0x46, 0x61, 0x2e, 0x3c, 0xb9, 0x52, 0x0c, 0x18, 0xdb, 0x9c, 0x7a, 0x22, 0x8e,
	0xc9, 0x88, 0xf9, 0x21, 0x64, 0x5c, 0xdb, 0xe5, 0x7b, 0x63, 0x76, 0x3a, 0x4e, 0x55, 0x5e, 0x3e,
	0xee, 0xe5, 0x65, 0x57, 0x2b, 0x97, 0xee, 0xb7, 0xad, 0x37, 0xad, 0x31, 0x6f, 0x03, 0xf4, 0x2a,
	0x62, 0x3a, 0x79, 0xa4, 0x89, 0xc3, 0x5d, 0x0d, 0x7b, 0xd6, 0x21, 0x2e, 0xdc, 0x2d, 0x25, 0xcc,
	0x1d, 0xe7, 0xf4, 0xc5, 0x1c, 0x7b, 0xfa, 0x72, 0x80, 0xf7, 0x26, 0xaf, 0x2b, 0x30, 0xea, 0x9c,
	0xbc, 0xd2, 0xa9, 0xa1, 0xf3, 0x56, 0xc4, 0x31, 0x6f, 0x0d, 0x98, 0xb3, 0xc6, 0xbf, 0xb2, 0x39,
	0x6b, 0xe2, 0x2b, 0x99, 0xb3, 0x6e, 0xc2, 0x98, 0x58, 0x77, 0x32, 0x70, 0x5e, 0x23, 0x04, 0xe5,
	0xd3, 0x20, 0xe5, 0x6e, 0xa7, 0x2c, 0x7f, 0x0d, 0xa4, 0x22, 0x49, 0x73, 0xa1, 0xc5, 0xb8, 0x57,
	0x75, 0x55, 0x23, 0x68, 0xfd, 0x7c, 0xde, 0x44, 0xfb, 0xec, 0x28, 0x68, 0x7d, 0xfc, 0x9d, 0xa2,
	0x09, 0x00, 0xa6, 0x13, 0x54, 0x5c, 0xd5, 0xd2, 0xfb, 0x41, 0x5a, 0x54, 0xdd, 0xa4, 0xa9, 0xbf,
	0xc3, 0x9f, 0xb1, 0x27, 0x36, 0xb7, 0x2a, 0xe7, 0xe0, 0x66, 0xa6, 0x12, 0x87, 0xab, 0x1a, 0xb3,
	0x0e, 0x61, 0x3a, 0x1e, 0x12, 0x15, 0xe9, 0xbf, 0x1d, 0x45, 0xc3, 0x0b, 0x03, 0xa7, 0x4c, 0xb7,
	0x3a, 0xc4, 0x85, 0xcc, 0xe9, 0x13, 0x57, 0x8b, 0x67, 0x21, 0x66, 0xcb, 0x5a, 0x0c, 0xec, 0xc4,
	0xae, 0x81, 0x82, 0x7b, 0x06, 0x0a, 0x74, 0x0c, 0x14, 0xb9, 0x94, 0xbf, 0x9c, 0xbf, 0x92, 0x9f,
	0x3d, 0x9f, 0x9f, 0x9d, 0x2d, 0xbe, 0x3c, 0x70, 0x9a, 0x18, 0xdf, 0x35, 0x50, 0x72, 0xcf, 0x40,
	0x09, 0x7a, 0x57, 0x7a, 0x29, 0x3f, 0x7b, 0xf9, 0x73, 0x03, 0xa1, 0xe2, 0xe4, 0x80, 0x89, 0x82,
	0x94, 0xb5, 0xd4, 0x9e, 0x81, 0xc6, 0x3a, 0x06, 0x0a, 0x15, 0xce, 0xe5, 0x0b, 0xb3, 0xf9, 0x42,
	0xc1, 0x35, 0x52, 0x04, 0x12, 0xc1, 0x1b, 0xbe, 0x50, 0x22, 0x91, 0xbc, 0xe1, 0x0b, 0x8d, 0x25,
	0x52, 0xb9, 0xbf, 0xfb, 0x20, 0xf6, 0xba, 0x8a, 0x05, 0x1d, 0x77, 0x5b, 0xec, 0xd7, 0xb5, 0xeb,
	0x2c, 0x1c, 0xaf, 0x5b, 0xb8, 0xfa, 0xc2, 0x9d, 0x2f, 0xb1, 0x9a, 0xbb, 0x8b, 0x78, 0xdd, 0x4d,
	0x25, 0x46, 0x69, 0x4e, 0x3e, 0xa9, 0xd8, 0x0d, 0x98, 0xc6, 0x8e, 0x42, 0x2f, 0xae, 0x2e, 0xfe,
	0xe9, 0x55, 0x17, 0xbd, 0xfa, 0xd0, 0x40, 0xe7, 0xe0, 0x24, 0xa4, 0x2c, 0x2f, 0x74, 0xff, 0xce,
	0x46, 0x2d, 0x47, 0x17, 0x61, 0x0c, 0xa2, 0xa6, 0x32, 0xd6, 0x62, 0x28, 0x9e, 0xd9, 0x42, 0xf1,
	0xf9, 0x03, 0x29, 0xce, 0xbc, 0xff, 0x4f, 0xe4, 0xfa, 0xcd, 0x4c, 0xbd, 0xdc, 0xaf, 0xfd, 0x10,
	0xe7, 0xb0, 0x52, 0x13, 0xca, 0xdf, 0xe4, 0xdb, 0xd1, 0xf2, 0xed, 0xb5, 0xa7, 0xe2, 0x21, 0x03,
	0xe8, 0xc7, 0x37, 0x09, 0xfb, 0x9f, 0x24, 0xec, 0x6f, 0xfc, 0x10, 0xb9, 0x8e, 0xf5, 0xaf, 0x7d,
	0xb2, 0xde, 0x38, 0x26, 0x95, 0xa6, 0x7f, 0x9f, 0xf9, 0x26, 0x65, 0xff, 0x8b, 0x52, 0xb6, 0xf8,
	0x33, 0xb4, 0xf7, 0x49, 0x76, 0xe4, 0xd1, 0x27, 0xd9, 0x91, 0xcf, 0x3f, 0xc9, 0xa2, 0xf7, 0x3a,
	0x59, 0xf4, 0xab, 0x4e, 0x16, 0x7d, 0xd4, 0xc9, 0xa2, 0xbd, 0x4e, 0x16, 0x3d, 0xea, 0x64, 0xd1,
	0xc7, 0x9d, 0x2c, 0xfa, 0xb4, 0x93, 0x1d, 0xf9, 0xbc, 0x93, 0x45, 0x3f, 0x7d, 0x9c, 0x1d, 0xd9,
	0x7d, 0x9c, 0x45, 0x7b, 0x8f, 0xb3, 0x23, 0x8f, 0x1e, 0x67, 0x47, 0xee, 0xac, 0x6e, 0xc8, 0xca,
	0xdd, 0x8d, 0xe9, 0x86, 0x5c, 0xd3, 0xb1, 0xaa, 0x0a, 0xd3, 0x5b, 0xda, 0x0c, 0x7d, 0xa8, 0xca,
	0x6a, 0x7d, 0x4a, 0x51, 0xe5, 0x86, 0x58, 0xc1, 0xea, 0x94, 0xfd, 0x79, 0x46, 0x59, 0xdf, 0x90,
	0x67, 0xf0, 0x3d, 0xdd, 0xfa, 0x1f, 0xb3, 0xc1, 0xff, 0x74, 0xb7, 0x1e, 0xa0, 0xff, 0x6f, 0x36,
	0xf7, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd9, 0x51, 0x04, 0x44, 0x9c, 0x27, 0x00, 0x00,
}

func (this *VoltADNPrivateNetworkReInfoType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VoltADNPrivateNetworkReInfoType)
	if !ok {
		that2, ok := that.(VoltADNPrivateNetworkReInfoType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Vlan != that1.Vlan {
		return false
	}
	if !this.NodeSelector.Equal(that1.NodeSelector) {
		return false
	}
	return true
}
func (this *VoltADNPrivateNetworkTenantInfoType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VoltADNPrivateNetworkTenantInfoType)
	if !ok {
		that2, ok := that.(VoltADNPrivateNetworkTenantInfoType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DefaultPrivateVip != that1.DefaultPrivateVip {
		return false
	}
	if this.FinalDefaultPrivateVip != that1.FinalDefaultPrivateVip {
		return false
	}
	return true
}
func (this *DNSServersList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DNSServersList)
	if !ok {
		that2, ok := that.(DNSServersList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.DnsIp) != len(that1.DnsIp) {
		return false
	}
	for i := range this.DnsIp {
		if this.DnsIp[i] != that1.DnsIp[i] {
			return false
		}
	}
	return true
}
func (this *VoltADNPrivateNetworkType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VoltADNPrivateNetworkType)
	if !ok {
		that2, ok := that.(VoltADNPrivateNetworkType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.PrivateAccessChoice == nil {
		if this.PrivateAccessChoice != nil {
			return false
		}
	} else if this.PrivateAccessChoice == nil {
		return false
	} else if !this.PrivateAccessChoice.Equal(that1.PrivateAccessChoice) {
		return false
	}
	if that1.DnsChoice == nil {
		if this.DnsChoice != nil {
			return false
		}
	} else if this.DnsChoice == nil {
		return false
	} else if !this.DnsChoice.Equal(that1.DnsChoice) {
		return false
	}
	if !this.CommonNodeSelector.Equal(that1.CommonNodeSelector) {
		return false
	}
	if len(this.ReInfoMap) != len(that1.ReInfoMap) {
		return false
	}
	for i := range this.ReInfoMap {
		if !this.ReInfoMap[i].Equal(that1.ReInfoMap[i]) {
			return false
		}
	}
	if this.OwnerTenantId != that1.OwnerTenantId {
		return false
	}
	if len(this.TenantInfoMap) != len(that1.TenantInfoMap) {
		return false
	}
	for i := range this.TenantInfoMap {
		if !this.TenantInfoMap[i].Equal(that1.TenantInfoMap[i]) {
			return false
		}
	}
	if that1.DedicatedVipChoice == nil {
		if this.DedicatedVipChoice != nil {
			return false
		}
	} else if this.DedicatedVipChoice == nil {
		return false
	} else if !this.DedicatedVipChoice.Equal(that1.DedicatedVipChoice) {
		return false
	}
	return true
}
func (this *VoltADNPrivateNetworkType_NoPrivateAccess) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VoltADNPrivateNetworkType_NoPrivateAccess)
	if !ok {
		that2, ok := that.(VoltADNPrivateNetworkType_NoPrivateAccess)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoPrivateAccess.Equal(that1.NoPrivateAccess) {
		return false
	}
	return true
}
func (this *VoltADNPrivateNetworkType_PrivateAccessEnabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VoltADNPrivateNetworkType_PrivateAccessEnabled)
	if !ok {
		that2, ok := that.(VoltADNPrivateNetworkType_PrivateAccessEnabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PrivateAccessEnabled.Equal(that1.PrivateAccessEnabled) {
		return false
	}
	return true
}
func (this *VoltADNPrivateNetworkType_NoPrivateDns) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VoltADNPrivateNetworkType_NoPrivateDns)
	if !ok {
		that2, ok := that.(VoltADNPrivateNetworkType_NoPrivateDns)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoPrivateDns.Equal(that1.NoPrivateDns) {
		return false
	}
	return true
}
func (this *VoltADNPrivateNetworkType_PrivateDns) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VoltADNPrivateNetworkType_PrivateDns)
	if !ok {
		that2, ok := that.(VoltADNPrivateNetworkType_PrivateDns)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PrivateDns.Equal(that1.PrivateDns) {
		return false
	}
	return true
}
func (this *VoltADNPrivateNetworkType_NoAdvertiseDedicatedVips) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VoltADNPrivateNetworkType_NoAdvertiseDedicatedVips)
	if !ok {
		that2, ok := that.(VoltADNPrivateNetworkType_NoAdvertiseDedicatedVips)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoAdvertiseDedicatedVips.Equal(that1.NoAdvertiseDedicatedVips) {
		return false
	}
	return true
}
func (this *VoltADNPrivateNetworkType_AdvertiseDedicatedVips) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VoltADNPrivateNetworkType_AdvertiseDedicatedVips)
	if !ok {
		that2, ok := that.(VoltADNPrivateNetworkType_AdvertiseDedicatedVips)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseDedicatedVips.Equal(that1.AdvertiseDedicatedVips) {
		return false
	}
	return true
}
func (this *AnyCastVIPFleetType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AnyCastVIPFleetType)
	if !ok {
		that2, ok := that.(AnyCastVIPFleetType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VipAllocator.Equal(that1.VipAllocator) {
		return false
	}
	return true
}
func (this *SNATPoolType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SNATPoolType)
	if !ok {
		that2, ok := that.(SNATPoolType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Ipv4Prefixes) != len(that1.Ipv4Prefixes) {
		return false
	}
	for i := range this.Ipv4Prefixes {
		if this.Ipv4Prefixes[i] != that1.Ipv4Prefixes[i] {
			return false
		}
	}
	return true
}
func (this *SNATPoolSiteType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SNATPoolSiteType)
	if !ok {
		that2, ok := that.(SNATPoolSiteType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.NodeSnatPool) != len(that1.NodeSnatPool) {
		return false
	}
	for i := range this.NodeSnatPool {
		if !this.NodeSnatPool[i].Equal(that1.NodeSnatPool[i]) {
			return false
		}
	}
	return true
}
func (this *SNATPoolFleetType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SNATPoolFleetType)
	if !ok {
		that2, ok := that.(SNATPoolFleetType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SnatPoolAllocator.Equal(that1.SnatPoolAllocator) {
		return false
	}
	return true
}
func (this *Srv6NetworkNsParametersType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Srv6NetworkNsParametersType)
	if !ok {
		that2, ok := that.(Srv6NetworkNsParametersType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	return true
}
func (this *PerSiteSrv6NetworkType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PerSiteSrv6NetworkType)
	if !ok {
		that2, ok := that.(PerSiteSrv6NetworkType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.NamespaceChoice == nil {
		if this.NamespaceChoice != nil {
			return false
		}
	} else if this.NamespaceChoice == nil {
		return false
	} else if !this.NamespaceChoice.Equal(that1.NamespaceChoice) {
		return false
	}
	if that1.DefaultVipChoice == nil {
		if this.DefaultVipChoice != nil {
			return false
		}
	} else if this.DefaultVipChoice == nil {
		return false
	} else if !this.DefaultVipChoice.Equal(that1.DefaultVipChoice) {
		return false
	}
	if that1.SnatPoolChoice == nil {
		if this.SnatPoolChoice != nil {
			return false
		}
	} else if this.SnatPoolChoice == nil {
		return false
	} else if !this.SnatPoolChoice.Equal(that1.SnatPoolChoice) {
		return false
	}
	if !this.Slice.Equal(that1.Slice) {
		return false
	}
	if len(this.Fleets) != len(that1.Fleets) {
		return false
	}
	for i := range this.Fleets {
		if !this.Fleets[i].Equal(that1.Fleets[i]) {
			return false
		}
	}
	if len(this.AccessNetworkRtargets) != len(that1.AccessNetworkRtargets) {
		return false
	}
	for i := range this.AccessNetworkRtargets {
		if !this.AccessNetworkRtargets[i].Equal(that1.AccessNetworkRtargets[i]) {
			return false
		}
	}
	if len(this.InternetRtargets) != len(that1.InternetRtargets) {
		return false
	}
	for i := range this.InternetRtargets {
		if !this.InternetRtargets[i].Equal(that1.InternetRtargets[i]) {
			return false
		}
	}
	if len(this.EnterpriseNetworkRtargets) != len(that1.EnterpriseNetworkRtargets) {
		return false
	}
	for i := range this.EnterpriseNetworkRtargets {
		if !this.EnterpriseNetworkRtargets[i].Equal(that1.EnterpriseNetworkRtargets[i]) {
			return false
		}
	}
	if len(this.ExportRtargets) != len(that1.ExportRtargets) {
		return false
	}
	for i := range this.ExportRtargets {
		if !this.ExportRtargets[i].Equal(that1.ExportRtargets[i]) {
			return false
		}
	}
	if this.RemoteSidStatsPlen != that1.RemoteSidStatsPlen {
		return false
	}
	return true
}
func (this *PerSiteSrv6NetworkType_NoNamespaceNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PerSiteSrv6NetworkType_NoNamespaceNetwork)
	if !ok {
		that2, ok := that.(PerSiteSrv6NetworkType_NoNamespaceNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoNamespaceNetwork.Equal(that1.NoNamespaceNetwork) {
		return false
	}
	return true
}
func (this *PerSiteSrv6NetworkType_Srv6NetworkNsParams) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PerSiteSrv6NetworkType_Srv6NetworkNsParams)
	if !ok {
		that2, ok := that.(PerSiteSrv6NetworkType_Srv6NetworkNsParams)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Srv6NetworkNsParams.Equal(that1.Srv6NetworkNsParams) {
		return false
	}
	return true
}
func (this *PerSiteSrv6NetworkType_InterfaceIpVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PerSiteSrv6NetworkType_InterfaceIpVip)
	if !ok {
		that2, ok := that.(PerSiteSrv6NetworkType_InterfaceIpVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.InterfaceIpVip.Equal(that1.InterfaceIpVip) {
		return false
	}
	return true
}
func (this *PerSiteSrv6NetworkType_AnycastVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PerSiteSrv6NetworkType_AnycastVip)
	if !ok {
		that2, ok := that.(PerSiteSrv6NetworkType_AnycastVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AnycastVip != that1.AnycastVip {
		return false
	}
	return true
}
func (this *PerSiteSrv6NetworkType_FleetVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PerSiteSrv6NetworkType_FleetVip)
	if !ok {
		that2, ok := that.(PerSiteSrv6NetworkType_FleetVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FleetVip.Equal(that1.FleetVip) {
		return false
	}
	return true
}
func (this *PerSiteSrv6NetworkType_InterfaceIpSnatPool) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PerSiteSrv6NetworkType_InterfaceIpSnatPool)
	if !ok {
		that2, ok := that.(PerSiteSrv6NetworkType_InterfaceIpSnatPool)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.InterfaceIpSnatPool.Equal(that1.InterfaceIpSnatPool) {
		return false
	}
	return true
}
func (this *PerSiteSrv6NetworkType_SiteSnatPool) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PerSiteSrv6NetworkType_SiteSnatPool)
	if !ok {
		that2, ok := that.(PerSiteSrv6NetworkType_SiteSnatPool)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SiteSnatPool.Equal(that1.SiteSnatPool) {
		return false
	}
	return true
}
func (this *PerSiteSrv6NetworkType_FleetSnatPool) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PerSiteSrv6NetworkType_FleetSnatPool)
	if !ok {
		that2, ok := that.(PerSiteSrv6NetworkType_FleetSnatPool)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FleetSnatPool.Equal(that1.FleetSnatPool) {
		return false
	}
	return true
}
func (this *NextHopInterfaceList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NextHopInterfaceList)
	if !ok {
		that2, ok := that.(NextHopInterfaceList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Interfaces) != len(that1.Interfaces) {
		return false
	}
	for i := range this.Interfaces {
		if !this.Interfaces[i].Equal(that1.Interfaces[i]) {
			return false
		}
	}
	return true
}
func (this *StaticRouteViewType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StaticRouteViewType)
	if !ok {
		that2, ok := that.(StaticRouteViewType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.IpPrefixes) != len(that1.IpPrefixes) {
		return false
	}
	for i := range this.IpPrefixes {
		if this.IpPrefixes[i] != that1.IpPrefixes[i] {
			return false
		}
	}
	if that1.NextHopChoice == nil {
		if this.NextHopChoice != nil {
			return false
		}
	} else if this.NextHopChoice == nil {
		return false
	} else if !this.NextHopChoice.Equal(that1.NextHopChoice) {
		return false
	}
	if len(this.Attrs) != len(that1.Attrs) {
		return false
	}
	for i := range this.Attrs {
		if this.Attrs[i] != that1.Attrs[i] {
			return false
		}
	}
	return true
}
func (this *StaticRouteViewType_IpAddress) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StaticRouteViewType_IpAddress)
	if !ok {
		that2, ok := that.(StaticRouteViewType_IpAddress)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IpAddress != that1.IpAddress {
		return false
	}
	return true
}
func (this *StaticRouteViewType_Interface) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StaticRouteViewType_Interface)
	if !ok {
		that2, ok := that.(StaticRouteViewType_Interface)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Interface.Equal(that1.Interface) {
		return false
	}
	return true
}
func (this *StaticRouteViewType_DefaultGateway) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StaticRouteViewType_DefaultGateway)
	if !ok {
		that2, ok := that.(StaticRouteViewType_DefaultGateway)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultGateway.Equal(that1.DefaultGateway) {
		return false
	}
	return true
}
func (this *ActivePBRPoliciesType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActivePBRPoliciesType)
	if !ok {
		that2, ok := that.(ActivePBRPoliciesType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ForwardProxyPbrPolicies) != len(that1.ForwardProxyPbrPolicies) {
		return false
	}
	for i := range this.ForwardProxyPbrPolicies {
		if !this.ForwardProxyPbrPolicies[i].Equal(that1.ForwardProxyPbrPolicies[i]) {
			return false
		}
	}
	if len(this.NetworkPbrPolicies) != len(that1.NetworkPbrPolicies) {
		return false
	}
	for i := range this.NetworkPbrPolicies {
		if !this.NetworkPbrPolicies[i].Equal(that1.NetworkPbrPolicies[i]) {
			return false
		}
	}
	return true
}
func (this *PerTenantVIPType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PerTenantVIPType)
	if !ok {
		that2, ok := that.(PerTenantVIPType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.TenantVipMap) != len(that1.TenantVipMap) {
		return false
	}
	for i := range this.TenantVipMap {
		if this.TenantVipMap[i] != that1.TenantVipMap[i] {
			return false
		}
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Subnets) != len(that1.Subnets) {
		return false
	}
	for i := range this.Subnets {
		if !this.Subnets[i].Equal(that1.Subnets[i]) {
			return false
		}
	}
	if this.Type != that1.Type {
		return false
	}
	if len(this.StaticRoutes) != len(that1.StaticRoutes) {
		return false
	}
	for i := range this.StaticRoutes {
		if !this.StaticRoutes[i].Equal(that1.StaticRoutes[i]) {
			return false
		}
	}
	if that1.NetworkChoice == nil {
		if this.NetworkChoice != nil {
			return false
		}
	} else if this.NetworkChoice == nil {
		return false
	} else if !this.NetworkChoice.Equal(that1.NetworkChoice) {
		return false
	}
	if !this.PrivateNetworkParameters.Equal(that1.PrivateNetworkParameters) {
		return false
	}
	if that1.DefaultVipChoice == nil {
		if this.DefaultVipChoice != nil {
			return false
		}
	} else if this.DefaultVipChoice == nil {
		return false
	} else if !this.DefaultVipChoice.Equal(that1.DefaultVipChoice) {
		return false
	}
	if that1.SnatPoolChoice == nil {
		if this.SnatPoolChoice != nil {
			return false
		}
	} else if this.SnatPoolChoice == nil {
		return false
	} else if !this.SnatPoolChoice.Equal(that1.SnatPoolChoice) {
		return false
	}
	if len(this.ImportRtargetStrs) != len(that1.ImportRtargetStrs) {
		return false
	}
	for i := range this.ImportRtargetStrs {
		if this.ImportRtargetStrs[i] != that1.ImportRtargetStrs[i] {
			return false
		}
	}
	if len(this.ExportRtargetStrs) != len(that1.ExportRtargetStrs) {
		return false
	}
	for i := range this.ExportRtargetStrs {
		if this.ExportRtargetStrs[i] != that1.ExportRtargetStrs[i] {
			return false
		}
	}
	if len(this.FleetRefs) != len(that1.FleetRefs) {
		return false
	}
	for i := range this.FleetRefs {
		if !this.FleetRefs[i].Equal(that1.FleetRefs[i]) {
			return false
		}
	}
	if len(this.SliceRef) != len(that1.SliceRef) {
		return false
	}
	for i := range this.SliceRef {
		if !this.SliceRef[i].Equal(that1.SliceRef[i]) {
			return false
		}
	}
	return true
}
func (this *GlobalSpecType_GlobalNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_GlobalNetwork)
	if !ok {
		that2, ok := that.(GlobalSpecType_GlobalNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GlobalNetwork.Equal(that1.GlobalNetwork) {
		return false
	}
	return true
}
func (this *GlobalSpecType_SiteLocalNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_SiteLocalNetwork)
	if !ok {
		that2, ok := that.(GlobalSpecType_SiteLocalNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SiteLocalNetwork.Equal(that1.SiteLocalNetwork) {
		return false
	}
	return true
}
func (this *GlobalSpecType_SiteLocalInsideNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_SiteLocalInsideNetwork)
	if !ok {
		that2, ok := that.(GlobalSpecType_SiteLocalInsideNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SiteLocalInsideNetwork.Equal(that1.SiteLocalInsideNetwork) {
		return false
	}
	return true
}
func (this *GlobalSpecType_InsideNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_InsideNetwork)
	if !ok {
		that2, ok := that.(GlobalSpecType_InsideNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.InsideNetwork.Equal(that1.InsideNetwork) {
		return false
	}
	return true
}
func (this *GlobalSpecType_LegacyType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_LegacyType)
	if !ok {
		that2, ok := that.(GlobalSpecType_LegacyType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LegacyType != that1.LegacyType {
		return false
	}
	return true
}
func (this *GlobalSpecType_PrivateNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_PrivateNetwork)
	if !ok {
		that2, ok := that.(GlobalSpecType_PrivateNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PrivateNetwork.Equal(that1.PrivateNetwork) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Srv6Network) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Srv6Network)
	if !ok {
		that2, ok := that.(GlobalSpecType_Srv6Network)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Srv6Network.Equal(that1.Srv6Network) {
		return false
	}
	return true
}
func (this *GlobalSpecType_TenantVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_TenantVip)
	if !ok {
		that2, ok := that.(GlobalSpecType_TenantVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TenantVip.Equal(that1.TenantVip) {
		return false
	}
	return true
}
func (this *GlobalSpecType_FleetVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_FleetVip)
	if !ok {
		that2, ok := that.(GlobalSpecType_FleetVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FleetVip.Equal(that1.FleetVip) {
		return false
	}
	return true
}
func (this *GlobalSpecType_InterfaceIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_InterfaceIp)
	if !ok {
		that2, ok := that.(GlobalSpecType_InterfaceIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.InterfaceIp.Equal(that1.InterfaceIp) {
		return false
	}
	return true
}
func (this *GlobalSpecType_SiteSnatPool) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_SiteSnatPool)
	if !ok {
		that2, ok := that.(GlobalSpecType_SiteSnatPool)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SiteSnatPool.Equal(that1.SiteSnatPool) {
		return false
	}
	return true
}
func (this *GlobalSpecType_FleetSnatPool) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_FleetSnatPool)
	if !ok {
		that2, ok := that.(GlobalSpecType_FleetSnatPool)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FleetSnatPool.Equal(that1.FleetSnatPool) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.NetworkChoice == nil {
		if this.NetworkChoice != nil {
			return false
		}
	} else if this.NetworkChoice == nil {
		return false
	} else if !this.NetworkChoice.Equal(that1.NetworkChoice) {
		return false
	}
	if len(this.StaticRoutes) != len(that1.StaticRoutes) {
		return false
	}
	for i := range this.StaticRoutes {
		if !this.StaticRoutes[i].Equal(that1.StaticRoutes[i]) {
			return false
		}
	}
	return true
}
func (this *CreateSpecType_GlobalNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_GlobalNetwork)
	if !ok {
		that2, ok := that.(CreateSpecType_GlobalNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GlobalNetwork.Equal(that1.GlobalNetwork) {
		return false
	}
	return true
}
func (this *CreateSpecType_SiteLocalNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_SiteLocalNetwork)
	if !ok {
		that2, ok := that.(CreateSpecType_SiteLocalNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SiteLocalNetwork.Equal(that1.SiteLocalNetwork) {
		return false
	}
	return true
}
func (this *CreateSpecType_SiteLocalInsideNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_SiteLocalInsideNetwork)
	if !ok {
		that2, ok := that.(CreateSpecType_SiteLocalInsideNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SiteLocalInsideNetwork.Equal(that1.SiteLocalInsideNetwork) {
		return false
	}
	return true
}
func (this *CreateSpecType_LegacyType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_LegacyType)
	if !ok {
		that2, ok := that.(CreateSpecType_LegacyType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LegacyType != that1.LegacyType {
		return false
	}
	return true
}
func (this *CreateSpecType_Srv6Network) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Srv6Network)
	if !ok {
		that2, ok := that.(CreateSpecType_Srv6Network)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Srv6Network.Equal(that1.Srv6Network) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.NetworkChoice == nil {
		if this.NetworkChoice != nil {
			return false
		}
	} else if this.NetworkChoice == nil {
		return false
	} else if !this.NetworkChoice.Equal(that1.NetworkChoice) {
		return false
	}
	if len(this.StaticRoutes) != len(that1.StaticRoutes) {
		return false
	}
	for i := range this.StaticRoutes {
		if !this.StaticRoutes[i].Equal(that1.StaticRoutes[i]) {
			return false
		}
	}
	return true
}
func (this *ReplaceSpecType_GlobalNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_GlobalNetwork)
	if !ok {
		that2, ok := that.(ReplaceSpecType_GlobalNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GlobalNetwork.Equal(that1.GlobalNetwork) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_SiteLocalNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_SiteLocalNetwork)
	if !ok {
		that2, ok := that.(ReplaceSpecType_SiteLocalNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SiteLocalNetwork.Equal(that1.SiteLocalNetwork) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_SiteLocalInsideNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_SiteLocalInsideNetwork)
	if !ok {
		that2, ok := that.(ReplaceSpecType_SiteLocalInsideNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SiteLocalInsideNetwork.Equal(that1.SiteLocalInsideNetwork) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_LegacyType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_LegacyType)
	if !ok {
		that2, ok := that.(ReplaceSpecType_LegacyType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LegacyType != that1.LegacyType {
		return false
	}
	return true
}
func (this *ReplaceSpecType_PrivateNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_PrivateNetwork)
	if !ok {
		that2, ok := that.(ReplaceSpecType_PrivateNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PrivateNetwork.Equal(that1.PrivateNetwork) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Srv6Network) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Srv6Network)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Srv6Network)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Srv6Network.Equal(that1.Srv6Network) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.NetworkChoice == nil {
		if this.NetworkChoice != nil {
			return false
		}
	} else if this.NetworkChoice == nil {
		return false
	} else if !this.NetworkChoice.Equal(that1.NetworkChoice) {
		return false
	}
	if len(this.StaticRoutes) != len(that1.StaticRoutes) {
		return false
	}
	for i := range this.StaticRoutes {
		if !this.StaticRoutes[i].Equal(that1.StaticRoutes[i]) {
			return false
		}
	}
	return true
}
func (this *GetSpecType_GlobalNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_GlobalNetwork)
	if !ok {
		that2, ok := that.(GetSpecType_GlobalNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GlobalNetwork.Equal(that1.GlobalNetwork) {
		return false
	}
	return true
}
func (this *GetSpecType_SiteLocalNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_SiteLocalNetwork)
	if !ok {
		that2, ok := that.(GetSpecType_SiteLocalNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SiteLocalNetwork.Equal(that1.SiteLocalNetwork) {
		return false
	}
	return true
}
func (this *GetSpecType_SiteLocalInsideNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_SiteLocalInsideNetwork)
	if !ok {
		that2, ok := that.(GetSpecType_SiteLocalInsideNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SiteLocalInsideNetwork.Equal(that1.SiteLocalInsideNetwork) {
		return false
	}
	return true
}
func (this *GetSpecType_LegacyType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_LegacyType)
	if !ok {
		that2, ok := that.(GetSpecType_LegacyType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LegacyType != that1.LegacyType {
		return false
	}
	return true
}
func (this *GetSpecType_PrivateNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_PrivateNetwork)
	if !ok {
		that2, ok := that.(GetSpecType_PrivateNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PrivateNetwork.Equal(that1.PrivateNetwork) {
		return false
	}
	return true
}
func (this *GetSpecType_Srv6Network) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Srv6Network)
	if !ok {
		that2, ok := that.(GetSpecType_Srv6Network)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Srv6Network.Equal(that1.Srv6Network) {
		return false
	}
	return true
}
func (this *VoltADNPrivateNetworkReInfoType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&virtual_network.VoltADNPrivateNetworkReInfoType{")
	s = append(s, "Vlan: "+fmt.Sprintf("%#v", this.Vlan)+",\n")
	if this.NodeSelector != nil {
		s = append(s, "NodeSelector: "+fmt.Sprintf("%#v", this.NodeSelector)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VoltADNPrivateNetworkTenantInfoType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&virtual_network.VoltADNPrivateNetworkTenantInfoType{")
	s = append(s, "DefaultPrivateVip: "+fmt.Sprintf("%#v", this.DefaultPrivateVip)+",\n")
	s = append(s, "FinalDefaultPrivateVip: "+fmt.Sprintf("%#v", this.FinalDefaultPrivateVip)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DNSServersList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&virtual_network.DNSServersList{")
	s = append(s, "DnsIp: "+fmt.Sprintf("%#v", this.DnsIp)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VoltADNPrivateNetworkType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&virtual_network.VoltADNPrivateNetworkType{")
	if this.PrivateAccessChoice != nil {
		s = append(s, "PrivateAccessChoice: "+fmt.Sprintf("%#v", this.PrivateAccessChoice)+",\n")
	}
	if this.DnsChoice != nil {
		s = append(s, "DnsChoice: "+fmt.Sprintf("%#v", this.DnsChoice)+",\n")
	}
	if this.CommonNodeSelector != nil {
		s = append(s, "CommonNodeSelector: "+fmt.Sprintf("%#v", this.CommonNodeSelector)+",\n")
	}
	keysForReInfoMap := make([]string, 0, len(this.ReInfoMap))
	for k, _ := range this.ReInfoMap {
		keysForReInfoMap = append(keysForReInfoMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForReInfoMap)
	mapStringForReInfoMap := "map[string]*VoltADNPrivateNetworkReInfoType{"
	for _, k := range keysForReInfoMap {
		mapStringForReInfoMap += fmt.Sprintf("%#v: %#v,", k, this.ReInfoMap[k])
	}
	mapStringForReInfoMap += "}"
	if this.ReInfoMap != nil {
		s = append(s, "ReInfoMap: "+mapStringForReInfoMap+",\n")
	}
	s = append(s, "OwnerTenantId: "+fmt.Sprintf("%#v", this.OwnerTenantId)+",\n")
	keysForTenantInfoMap := make([]string, 0, len(this.TenantInfoMap))
	for k, _ := range this.TenantInfoMap {
		keysForTenantInfoMap = append(keysForTenantInfoMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTenantInfoMap)
	mapStringForTenantInfoMap := "map[string]*VoltADNPrivateNetworkTenantInfoType{"
	for _, k := range keysForTenantInfoMap {
		mapStringForTenantInfoMap += fmt.Sprintf("%#v: %#v,", k, this.TenantInfoMap[k])
	}
	mapStringForTenantInfoMap += "}"
	if this.TenantInfoMap != nil {
		s = append(s, "TenantInfoMap: "+mapStringForTenantInfoMap+",\n")
	}
	if this.DedicatedVipChoice != nil {
		s = append(s, "DedicatedVipChoice: "+fmt.Sprintf("%#v", this.DedicatedVipChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VoltADNPrivateNetworkType_NoPrivateAccess) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.VoltADNPrivateNetworkType_NoPrivateAccess{` +
		`NoPrivateAccess:` + fmt.Sprintf("%#v", this.NoPrivateAccess) + `}`}, ", ")
	return s
}
func (this *VoltADNPrivateNetworkType_PrivateAccessEnabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.VoltADNPrivateNetworkType_PrivateAccessEnabled{` +
		`PrivateAccessEnabled:` + fmt.Sprintf("%#v", this.PrivateAccessEnabled) + `}`}, ", ")
	return s
}
func (this *VoltADNPrivateNetworkType_NoPrivateDns) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.VoltADNPrivateNetworkType_NoPrivateDns{` +
		`NoPrivateDns:` + fmt.Sprintf("%#v", this.NoPrivateDns) + `}`}, ", ")
	return s
}
func (this *VoltADNPrivateNetworkType_PrivateDns) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.VoltADNPrivateNetworkType_PrivateDns{` +
		`PrivateDns:` + fmt.Sprintf("%#v", this.PrivateDns) + `}`}, ", ")
	return s
}
func (this *VoltADNPrivateNetworkType_NoAdvertiseDedicatedVips) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.VoltADNPrivateNetworkType_NoAdvertiseDedicatedVips{` +
		`NoAdvertiseDedicatedVips:` + fmt.Sprintf("%#v", this.NoAdvertiseDedicatedVips) + `}`}, ", ")
	return s
}
func (this *VoltADNPrivateNetworkType_AdvertiseDedicatedVips) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.VoltADNPrivateNetworkType_AdvertiseDedicatedVips{` +
		`AdvertiseDedicatedVips:` + fmt.Sprintf("%#v", this.AdvertiseDedicatedVips) + `}`}, ", ")
	return s
}
func (this *AnyCastVIPFleetType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&virtual_network.AnyCastVIPFleetType{")
	if this.VipAllocator != nil {
		s = append(s, "VipAllocator: "+fmt.Sprintf("%#v", this.VipAllocator)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SNATPoolType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&virtual_network.SNATPoolType{")
	s = append(s, "Ipv4Prefixes: "+fmt.Sprintf("%#v", this.Ipv4Prefixes)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SNATPoolSiteType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&virtual_network.SNATPoolSiteType{")
	keysForNodeSnatPool := make([]string, 0, len(this.NodeSnatPool))
	for k, _ := range this.NodeSnatPool {
		keysForNodeSnatPool = append(keysForNodeSnatPool, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForNodeSnatPool)
	mapStringForNodeSnatPool := "map[string]*SNATPoolType{"
	for _, k := range keysForNodeSnatPool {
		mapStringForNodeSnatPool += fmt.Sprintf("%#v: %#v,", k, this.NodeSnatPool[k])
	}
	mapStringForNodeSnatPool += "}"
	if this.NodeSnatPool != nil {
		s = append(s, "NodeSnatPool: "+mapStringForNodeSnatPool+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SNATPoolFleetType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&virtual_network.SNATPoolFleetType{")
	if this.SnatPoolAllocator != nil {
		s = append(s, "SnatPoolAllocator: "+fmt.Sprintf("%#v", this.SnatPoolAllocator)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Srv6NetworkNsParametersType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&virtual_network.Srv6NetworkNsParametersType{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PerSiteSrv6NetworkType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 19)
	s = append(s, "&virtual_network.PerSiteSrv6NetworkType{")
	if this.NamespaceChoice != nil {
		s = append(s, "NamespaceChoice: "+fmt.Sprintf("%#v", this.NamespaceChoice)+",\n")
	}
	if this.DefaultVipChoice != nil {
		s = append(s, "DefaultVipChoice: "+fmt.Sprintf("%#v", this.DefaultVipChoice)+",\n")
	}
	if this.SnatPoolChoice != nil {
		s = append(s, "SnatPoolChoice: "+fmt.Sprintf("%#v", this.SnatPoolChoice)+",\n")
	}
	if this.Slice != nil {
		s = append(s, "Slice: "+fmt.Sprintf("%#v", this.Slice)+",\n")
	}
	if this.Fleets != nil {
		s = append(s, "Fleets: "+fmt.Sprintf("%#v", this.Fleets)+",\n")
	}
	if this.AccessNetworkRtargets != nil {
		s = append(s, "AccessNetworkRtargets: "+fmt.Sprintf("%#v", this.AccessNetworkRtargets)+",\n")
	}
	if this.InternetRtargets != nil {
		s = append(s, "InternetRtargets: "+fmt.Sprintf("%#v", this.InternetRtargets)+",\n")
	}
	if this.EnterpriseNetworkRtargets != nil {
		s = append(s, "EnterpriseNetworkRtargets: "+fmt.Sprintf("%#v", this.EnterpriseNetworkRtargets)+",\n")
	}
	if this.ExportRtargets != nil {
		s = append(s, "ExportRtargets: "+fmt.Sprintf("%#v", this.ExportRtargets)+",\n")
	}
	s = append(s, "RemoteSidStatsPlen: "+fmt.Sprintf("%#v", this.RemoteSidStatsPlen)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PerSiteSrv6NetworkType_NoNamespaceNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.PerSiteSrv6NetworkType_NoNamespaceNetwork{` +
		`NoNamespaceNetwork:` + fmt.Sprintf("%#v", this.NoNamespaceNetwork) + `}`}, ", ")
	return s
}
func (this *PerSiteSrv6NetworkType_Srv6NetworkNsParams) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.PerSiteSrv6NetworkType_Srv6NetworkNsParams{` +
		`Srv6NetworkNsParams:` + fmt.Sprintf("%#v", this.Srv6NetworkNsParams) + `}`}, ", ")
	return s
}
func (this *PerSiteSrv6NetworkType_InterfaceIpVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.PerSiteSrv6NetworkType_InterfaceIpVip{` +
		`InterfaceIpVip:` + fmt.Sprintf("%#v", this.InterfaceIpVip) + `}`}, ", ")
	return s
}
func (this *PerSiteSrv6NetworkType_AnycastVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.PerSiteSrv6NetworkType_AnycastVip{` +
		`AnycastVip:` + fmt.Sprintf("%#v", this.AnycastVip) + `}`}, ", ")
	return s
}
func (this *PerSiteSrv6NetworkType_FleetVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.PerSiteSrv6NetworkType_FleetVip{` +
		`FleetVip:` + fmt.Sprintf("%#v", this.FleetVip) + `}`}, ", ")
	return s
}
func (this *PerSiteSrv6NetworkType_InterfaceIpSnatPool) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.PerSiteSrv6NetworkType_InterfaceIpSnatPool{` +
		`InterfaceIpSnatPool:` + fmt.Sprintf("%#v", this.InterfaceIpSnatPool) + `}`}, ", ")
	return s
}
func (this *PerSiteSrv6NetworkType_SiteSnatPool) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.PerSiteSrv6NetworkType_SiteSnatPool{` +
		`SiteSnatPool:` + fmt.Sprintf("%#v", this.SiteSnatPool) + `}`}, ", ")
	return s
}
func (this *PerSiteSrv6NetworkType_FleetSnatPool) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.PerSiteSrv6NetworkType_FleetSnatPool{` +
		`FleetSnatPool:` + fmt.Sprintf("%#v", this.FleetSnatPool) + `}`}, ", ")
	return s
}
func (this *NextHopInterfaceList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&virtual_network.NextHopInterfaceList{")
	if this.Interfaces != nil {
		s = append(s, "Interfaces: "+fmt.Sprintf("%#v", this.Interfaces)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StaticRouteViewType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&virtual_network.StaticRouteViewType{")
	s = append(s, "IpPrefixes: "+fmt.Sprintf("%#v", this.IpPrefixes)+",\n")
	if this.NextHopChoice != nil {
		s = append(s, "NextHopChoice: "+fmt.Sprintf("%#v", this.NextHopChoice)+",\n")
	}
	s = append(s, "Attrs: "+fmt.Sprintf("%#v", this.Attrs)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StaticRouteViewType_IpAddress) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.StaticRouteViewType_IpAddress{` +
		`IpAddress:` + fmt.Sprintf("%#v", this.IpAddress) + `}`}, ", ")
	return s
}
func (this *StaticRouteViewType_Interface) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.StaticRouteViewType_Interface{` +
		`Interface:` + fmt.Sprintf("%#v", this.Interface) + `}`}, ", ")
	return s
}
func (this *StaticRouteViewType_DefaultGateway) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.StaticRouteViewType_DefaultGateway{` +
		`DefaultGateway:` + fmt.Sprintf("%#v", this.DefaultGateway) + `}`}, ", ")
	return s
}
func (this *ActivePBRPoliciesType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&virtual_network.ActivePBRPoliciesType{")
	if this.ForwardProxyPbrPolicies != nil {
		s = append(s, "ForwardProxyPbrPolicies: "+fmt.Sprintf("%#v", this.ForwardProxyPbrPolicies)+",\n")
	}
	if this.NetworkPbrPolicies != nil {
		s = append(s, "NetworkPbrPolicies: "+fmt.Sprintf("%#v", this.NetworkPbrPolicies)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PerTenantVIPType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&virtual_network.PerTenantVIPType{")
	keysForTenantVipMap := make([]string, 0, len(this.TenantVipMap))
	for k, _ := range this.TenantVipMap {
		keysForTenantVipMap = append(keysForTenantVipMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTenantVipMap)
	mapStringForTenantVipMap := "map[string]string{"
	for _, k := range keysForTenantVipMap {
		mapStringForTenantVipMap += fmt.Sprintf("%#v: %#v,", k, this.TenantVipMap[k])
	}
	mapStringForTenantVipMap += "}"
	if this.TenantVipMap != nil {
		s = append(s, "TenantVipMap: "+mapStringForTenantVipMap+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 24)
	s = append(s, "&virtual_network.GlobalSpecType{")
	if this.Subnets != nil {
		s = append(s, "Subnets: "+fmt.Sprintf("%#v", this.Subnets)+",\n")
	}
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	if this.StaticRoutes != nil {
		s = append(s, "StaticRoutes: "+fmt.Sprintf("%#v", this.StaticRoutes)+",\n")
	}
	if this.NetworkChoice != nil {
		s = append(s, "NetworkChoice: "+fmt.Sprintf("%#v", this.NetworkChoice)+",\n")
	}
	if this.PrivateNetworkParameters != nil {
		s = append(s, "PrivateNetworkParameters: "+fmt.Sprintf("%#v", this.PrivateNetworkParameters)+",\n")
	}
	if this.DefaultVipChoice != nil {
		s = append(s, "DefaultVipChoice: "+fmt.Sprintf("%#v", this.DefaultVipChoice)+",\n")
	}
	if this.SnatPoolChoice != nil {
		s = append(s, "SnatPoolChoice: "+fmt.Sprintf("%#v", this.SnatPoolChoice)+",\n")
	}
	s = append(s, "ImportRtargetStrs: "+fmt.Sprintf("%#v", this.ImportRtargetStrs)+",\n")
	s = append(s, "ExportRtargetStrs: "+fmt.Sprintf("%#v", this.ExportRtargetStrs)+",\n")
	if this.FleetRefs != nil {
		s = append(s, "FleetRefs: "+fmt.Sprintf("%#v", this.FleetRefs)+",\n")
	}
	if this.SliceRef != nil {
		s = append(s, "SliceRef: "+fmt.Sprintf("%#v", this.SliceRef)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_GlobalNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.GlobalSpecType_GlobalNetwork{` +
		`GlobalNetwork:` + fmt.Sprintf("%#v", this.GlobalNetwork) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_SiteLocalNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.GlobalSpecType_SiteLocalNetwork{` +
		`SiteLocalNetwork:` + fmt.Sprintf("%#v", this.SiteLocalNetwork) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_SiteLocalInsideNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.GlobalSpecType_SiteLocalInsideNetwork{` +
		`SiteLocalInsideNetwork:` + fmt.Sprintf("%#v", this.SiteLocalInsideNetwork) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_InsideNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.GlobalSpecType_InsideNetwork{` +
		`InsideNetwork:` + fmt.Sprintf("%#v", this.InsideNetwork) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_LegacyType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.GlobalSpecType_LegacyType{` +
		`LegacyType:` + fmt.Sprintf("%#v", this.LegacyType) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_PrivateNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.GlobalSpecType_PrivateNetwork{` +
		`PrivateNetwork:` + fmt.Sprintf("%#v", this.PrivateNetwork) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_Srv6Network) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.GlobalSpecType_Srv6Network{` +
		`Srv6Network:` + fmt.Sprintf("%#v", this.Srv6Network) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_TenantVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.GlobalSpecType_TenantVip{` +
		`TenantVip:` + fmt.Sprintf("%#v", this.TenantVip) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_FleetVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.GlobalSpecType_FleetVip{` +
		`FleetVip:` + fmt.Sprintf("%#v", this.FleetVip) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_InterfaceIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.GlobalSpecType_InterfaceIp{` +
		`InterfaceIp:` + fmt.Sprintf("%#v", this.InterfaceIp) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_SiteSnatPool) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.GlobalSpecType_SiteSnatPool{` +
		`SiteSnatPool:` + fmt.Sprintf("%#v", this.SiteSnatPool) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_FleetSnatPool) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.GlobalSpecType_FleetSnatPool{` +
		`FleetSnatPool:` + fmt.Sprintf("%#v", this.FleetSnatPool) + `}`}, ", ")
	return s
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&virtual_network.CreateSpecType{")
	if this.NetworkChoice != nil {
		s = append(s, "NetworkChoice: "+fmt.Sprintf("%#v", this.NetworkChoice)+",\n")
	}
	if this.StaticRoutes != nil {
		s = append(s, "StaticRoutes: "+fmt.Sprintf("%#v", this.StaticRoutes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType_GlobalNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.CreateSpecType_GlobalNetwork{` +
		`GlobalNetwork:` + fmt.Sprintf("%#v", this.GlobalNetwork) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_SiteLocalNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.CreateSpecType_SiteLocalNetwork{` +
		`SiteLocalNetwork:` + fmt.Sprintf("%#v", this.SiteLocalNetwork) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_SiteLocalInsideNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.CreateSpecType_SiteLocalInsideNetwork{` +
		`SiteLocalInsideNetwork:` + fmt.Sprintf("%#v", this.SiteLocalInsideNetwork) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_LegacyType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.CreateSpecType_LegacyType{` +
		`LegacyType:` + fmt.Sprintf("%#v", this.LegacyType) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_Srv6Network) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.CreateSpecType_Srv6Network{` +
		`Srv6Network:` + fmt.Sprintf("%#v", this.Srv6Network) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&virtual_network.ReplaceSpecType{")
	if this.NetworkChoice != nil {
		s = append(s, "NetworkChoice: "+fmt.Sprintf("%#v", this.NetworkChoice)+",\n")
	}
	if this.StaticRoutes != nil {
		s = append(s, "StaticRoutes: "+fmt.Sprintf("%#v", this.StaticRoutes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType_GlobalNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.ReplaceSpecType_GlobalNetwork{` +
		`GlobalNetwork:` + fmt.Sprintf("%#v", this.GlobalNetwork) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_SiteLocalNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.ReplaceSpecType_SiteLocalNetwork{` +
		`SiteLocalNetwork:` + fmt.Sprintf("%#v", this.SiteLocalNetwork) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_SiteLocalInsideNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.ReplaceSpecType_SiteLocalInsideNetwork{` +
		`SiteLocalInsideNetwork:` + fmt.Sprintf("%#v", this.SiteLocalInsideNetwork) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_LegacyType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.ReplaceSpecType_LegacyType{` +
		`LegacyType:` + fmt.Sprintf("%#v", this.LegacyType) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_PrivateNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.ReplaceSpecType_PrivateNetwork{` +
		`PrivateNetwork:` + fmt.Sprintf("%#v", this.PrivateNetwork) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_Srv6Network) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.ReplaceSpecType_Srv6Network{` +
		`Srv6Network:` + fmt.Sprintf("%#v", this.Srv6Network) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&virtual_network.GetSpecType{")
	if this.NetworkChoice != nil {
		s = append(s, "NetworkChoice: "+fmt.Sprintf("%#v", this.NetworkChoice)+",\n")
	}
	if this.StaticRoutes != nil {
		s = append(s, "StaticRoutes: "+fmt.Sprintf("%#v", this.StaticRoutes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_GlobalNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.GetSpecType_GlobalNetwork{` +
		`GlobalNetwork:` + fmt.Sprintf("%#v", this.GlobalNetwork) + `}`}, ", ")
	return s
}
func (this *GetSpecType_SiteLocalNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.GetSpecType_SiteLocalNetwork{` +
		`SiteLocalNetwork:` + fmt.Sprintf("%#v", this.SiteLocalNetwork) + `}`}, ", ")
	return s
}
func (this *GetSpecType_SiteLocalInsideNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.GetSpecType_SiteLocalInsideNetwork{` +
		`SiteLocalInsideNetwork:` + fmt.Sprintf("%#v", this.SiteLocalInsideNetwork) + `}`}, ", ")
	return s
}
func (this *GetSpecType_LegacyType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.GetSpecType_LegacyType{` +
		`LegacyType:` + fmt.Sprintf("%#v", this.LegacyType) + `}`}, ", ")
	return s
}
func (this *GetSpecType_PrivateNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.GetSpecType_PrivateNetwork{` +
		`PrivateNetwork:` + fmt.Sprintf("%#v", this.PrivateNetwork) + `}`}, ", ")
	return s
}
func (this *GetSpecType_Srv6Network) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_network.GetSpecType_Srv6Network{` +
		`Srv6Network:` + fmt.Sprintf("%#v", this.Srv6Network) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *VoltADNPrivateNetworkReInfoType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoltADNPrivateNetworkReInfoType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoltADNPrivateNetworkReInfoType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NodeSelector != nil {
		{
			size, err := m.NodeSelector.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Vlan != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Vlan))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VoltADNPrivateNetworkTenantInfoType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoltADNPrivateNetworkTenantInfoType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoltADNPrivateNetworkTenantInfoType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FinalDefaultPrivateVip) > 0 {
		i -= len(m.FinalDefaultPrivateVip)
		copy(dAtA[i:], m.FinalDefaultPrivateVip)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.FinalDefaultPrivateVip)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DefaultPrivateVip) > 0 {
		i -= len(m.DefaultPrivateVip)
		copy(dAtA[i:], m.DefaultPrivateVip)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.DefaultPrivateVip)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DNSServersList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DNSServersList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DNSServersList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DnsIp) > 0 {
		for iNdEx := len(m.DnsIp) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DnsIp[iNdEx])
			copy(dAtA[i:], m.DnsIp[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.DnsIp[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	return len(dAtA) - i, nil
}

func (m *VoltADNPrivateNetworkType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoltADNPrivateNetworkType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoltADNPrivateNetworkType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DedicatedVipChoice != nil {
		{
			size := m.DedicatedVipChoice.Size()
			i -= size
			if _, err := m.DedicatedVipChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.TenantInfoMap) > 0 {
		keysForTenantInfoMap := make([]string, 0, len(m.TenantInfoMap))
		for k := range m.TenantInfoMap {
			keysForTenantInfoMap = append(keysForTenantInfoMap, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForTenantInfoMap)
		for iNdEx := len(keysForTenantInfoMap) - 1; iNdEx >= 0; iNdEx-- {
			v := m.TenantInfoMap[string(keysForTenantInfoMap[iNdEx])]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintTypes(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(keysForTenantInfoMap[iNdEx])
			copy(dAtA[i:], keysForTenantInfoMap[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(keysForTenantInfoMap[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.OwnerTenantId) > 0 {
		i -= len(m.OwnerTenantId)
		copy(dAtA[i:], m.OwnerTenantId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.OwnerTenantId)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ReInfoMap) > 0 {
		keysForReInfoMap := make([]string, 0, len(m.ReInfoMap))
		for k := range m.ReInfoMap {
			keysForReInfoMap = append(keysForReInfoMap, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForReInfoMap)
		for iNdEx := len(keysForReInfoMap) - 1; iNdEx >= 0; iNdEx-- {
			v := m.ReInfoMap[string(keysForReInfoMap[iNdEx])]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintTypes(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(keysForReInfoMap[iNdEx])
			copy(dAtA[i:], keysForReInfoMap[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(keysForReInfoMap[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x42
		}
	}
	if m.CommonNodeSelector != nil {
		{
			size, err := m.CommonNodeSelector.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.DnsChoice != nil {
		{
			size := m.DnsChoice.Size()
			i -= size
			if _, err := m.DnsChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.PrivateAccessChoice != nil {
		{
			size := m.PrivateAccessChoice.Size()
			i -= size
			if _, err := m.PrivateAccessChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *VoltADNPrivateNetworkType_NoPrivateAccess) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoltADNPrivateNetworkType_NoPrivateAccess) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoPrivateAccess != nil {
		{
			size, err := m.NoPrivateAccess.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *VoltADNPrivateNetworkType_PrivateAccessEnabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoltADNPrivateNetworkType_PrivateAccessEnabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PrivateAccessEnabled != nil {
		{
			size, err := m.PrivateAccessEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *VoltADNPrivateNetworkType_NoPrivateDns) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoltADNPrivateNetworkType_NoPrivateDns) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoPrivateDns != nil {
		{
			size, err := m.NoPrivateDns.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *VoltADNPrivateNetworkType_PrivateDns) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoltADNPrivateNetworkType_PrivateDns) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PrivateDns != nil {
		{
			size, err := m.PrivateDns.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *VoltADNPrivateNetworkType_NoAdvertiseDedicatedVips) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoltADNPrivateNetworkType_NoAdvertiseDedicatedVips) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoAdvertiseDedicatedVips != nil {
		{
			size, err := m.NoAdvertiseDedicatedVips.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *VoltADNPrivateNetworkType_AdvertiseDedicatedVips) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoltADNPrivateNetworkType_AdvertiseDedicatedVips) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseDedicatedVips != nil {
		{
			size, err := m.AdvertiseDedicatedVips.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *AnyCastVIPFleetType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnyCastVIPFleetType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnyCastVIPFleetType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VipAllocator != nil {
		{
			size, err := m.VipAllocator.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SNATPoolType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SNATPoolType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SNATPoolType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ipv4Prefixes) > 0 {
		for iNdEx := len(m.Ipv4Prefixes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Ipv4Prefixes[iNdEx])
			copy(dAtA[i:], m.Ipv4Prefixes[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Ipv4Prefixes[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SNATPoolSiteType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SNATPoolSiteType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SNATPoolSiteType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NodeSnatPool) > 0 {
		keysForNodeSnatPool := make([]string, 0, len(m.NodeSnatPool))
		for k := range m.NodeSnatPool {
			keysForNodeSnatPool = append(keysForNodeSnatPool, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForNodeSnatPool)
		for iNdEx := len(keysForNodeSnatPool) - 1; iNdEx >= 0; iNdEx-- {
			v := m.NodeSnatPool[string(keysForNodeSnatPool[iNdEx])]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintTypes(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(keysForNodeSnatPool[iNdEx])
			copy(dAtA[i:], keysForNodeSnatPool[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(keysForNodeSnatPool[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SNATPoolFleetType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SNATPoolFleetType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SNATPoolFleetType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SnatPoolAllocator != nil {
		{
			size, err := m.SnatPoolAllocator.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Srv6NetworkNsParametersType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Srv6NetworkNsParametersType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Srv6NetworkNsParametersType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PerSiteSrv6NetworkType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PerSiteSrv6NetworkType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PerSiteSrv6NetworkType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RemoteSidStatsPlen != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.RemoteSidStatsPlen))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if len(m.ExportRtargets) > 0 {
		for iNdEx := len(m.ExportRtargets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExportRtargets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
	}
	if len(m.EnterpriseNetworkRtargets) > 0 {
		for iNdEx := len(m.EnterpriseNetworkRtargets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EnterpriseNetworkRtargets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	if len(m.InternetRtargets) > 0 {
		for iNdEx := len(m.InternetRtargets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InternetRtargets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x7a
		}
	}
	if len(m.AccessNetworkRtargets) > 0 {
		for iNdEx := len(m.AccessNetworkRtargets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AccessNetworkRtargets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x72
		}
	}
	if len(m.Fleets) > 0 {
		for iNdEx := len(m.Fleets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fleets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	if m.Slice != nil {
		{
			size, err := m.Slice.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.SnatPoolChoice != nil {
		{
			size := m.SnatPoolChoice.Size()
			i -= size
			if _, err := m.SnatPoolChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.DefaultVipChoice != nil {
		{
			size := m.DefaultVipChoice.Size()
			i -= size
			if _, err := m.DefaultVipChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.NamespaceChoice != nil {
		{
			size := m.NamespaceChoice.Size()
			i -= size
			if _, err := m.NamespaceChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *PerSiteSrv6NetworkType_NoNamespaceNetwork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PerSiteSrv6NetworkType_NoNamespaceNetwork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoNamespaceNetwork != nil {
		{
			size, err := m.NoNamespaceNetwork.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *PerSiteSrv6NetworkType_Srv6NetworkNsParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PerSiteSrv6NetworkType_Srv6NetworkNsParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Srv6NetworkNsParams != nil {
		{
			size, err := m.Srv6NetworkNsParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *PerSiteSrv6NetworkType_InterfaceIpVip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PerSiteSrv6NetworkType_InterfaceIpVip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.InterfaceIpVip != nil {
		{
			size, err := m.InterfaceIpVip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *PerSiteSrv6NetworkType_AnycastVip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PerSiteSrv6NetworkType_AnycastVip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.AnycastVip)
	copy(dAtA[i:], m.AnycastVip)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.AnycastVip)))
	i--
	dAtA[i] = 0x32
	return len(dAtA) - i, nil
}
func (m *PerSiteSrv6NetworkType_FleetVip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PerSiteSrv6NetworkType_FleetVip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FleetVip != nil {
		{
			size, err := m.FleetVip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *PerSiteSrv6NetworkType_InterfaceIpSnatPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PerSiteSrv6NetworkType_InterfaceIpSnatPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.InterfaceIpSnatPool != nil {
		{
			size, err := m.InterfaceIpSnatPool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *PerSiteSrv6NetworkType_SiteSnatPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PerSiteSrv6NetworkType_SiteSnatPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SiteSnatPool != nil {
		{
			size, err := m.SiteSnatPool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *PerSiteSrv6NetworkType_FleetSnatPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PerSiteSrv6NetworkType_FleetSnatPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FleetSnatPool != nil {
		{
			size, err := m.FleetSnatPool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *NextHopInterfaceList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NextHopInterfaceList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NextHopInterfaceList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Interfaces) > 0 {
		for iNdEx := len(m.Interfaces) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Interfaces[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *StaticRouteViewType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StaticRouteViewType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StaticRouteViewType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Attrs) > 0 {
		dAtA23 := make([]byte, len(m.Attrs)*10)
		var j22 int
		for _, num := range m.Attrs {
			for num >= 1<<7 {
				dAtA23[j22] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j22++
			}
			dAtA23[j22] = uint8(num)
			j22++
		}
		i -= j22
		copy(dAtA[i:], dAtA23[:j22])
		i = encodeVarintTypes(dAtA, i, uint64(j22))
		i--
		dAtA[i] = 0x32
	}
	if m.NextHopChoice != nil {
		{
			size := m.NextHopChoice.Size()
			i -= size
			if _, err := m.NextHopChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.IpPrefixes) > 0 {
		for iNdEx := len(m.IpPrefixes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.IpPrefixes[iNdEx])
			copy(dAtA[i:], m.IpPrefixes[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.IpPrefixes[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *StaticRouteViewType_IpAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StaticRouteViewType_IpAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.IpAddress)
	copy(dAtA[i:], m.IpAddress)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.IpAddress)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func (m *StaticRouteViewType_Interface) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StaticRouteViewType_Interface) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Interface != nil {
		{
			size, err := m.Interface.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *StaticRouteViewType_DefaultGateway) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StaticRouteViewType_DefaultGateway) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultGateway != nil {
		{
			size, err := m.DefaultGateway.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ActivePBRPoliciesType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivePBRPoliciesType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivePBRPoliciesType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NetworkPbrPolicies) > 0 {
		for iNdEx := len(m.NetworkPbrPolicies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NetworkPbrPolicies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ForwardProxyPbrPolicies) > 0 {
		for iNdEx := len(m.ForwardProxyPbrPolicies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ForwardProxyPbrPolicies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PerTenantVIPType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PerTenantVIPType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PerTenantVIPType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TenantVipMap) > 0 {
		keysForTenantVipMap := make([]string, 0, len(m.TenantVipMap))
		for k := range m.TenantVipMap {
			keysForTenantVipMap = append(keysForTenantVipMap, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForTenantVipMap)
		for iNdEx := len(keysForTenantVipMap) - 1; iNdEx >= 0; iNdEx-- {
			v := m.TenantVipMap[string(keysForTenantVipMap[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTypes(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForTenantVipMap[iNdEx])
			copy(dAtA[i:], keysForTenantVipMap[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(keysForTenantVipMap[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SliceRef) > 0 {
		for iNdEx := len(m.SliceRef) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SliceRef[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3e
			i--
			dAtA[i] = 0xda
		}
	}
	if len(m.FleetRefs) > 0 {
		for iNdEx := len(m.FleetRefs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FleetRefs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3e
			i--
			dAtA[i] = 0xd2
		}
	}
	if len(m.ExportRtargetStrs) > 0 {
		for iNdEx := len(m.ExportRtargetStrs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ExportRtargetStrs[iNdEx])
			copy(dAtA[i:], m.ExportRtargetStrs[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.ExportRtargetStrs[iNdEx])))
			i--
			dAtA[i] = 0x3e
			i--
			dAtA[i] = 0xca
		}
	}
	if len(m.ImportRtargetStrs) > 0 {
		for iNdEx := len(m.ImportRtargetStrs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ImportRtargetStrs[iNdEx])
			copy(dAtA[i:], m.ImportRtargetStrs[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.ImportRtargetStrs[iNdEx])))
			i--
			dAtA[i] = 0x3e
			i--
			dAtA[i] = 0xc2
		}
	}
	if m.SnatPoolChoice != nil {
		{
			size := m.SnatPoolChoice.Size()
			i -= size
			if _, err := m.SnatPoolChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.DefaultVipChoice != nil {
		{
			size := m.DefaultVipChoice.Size()
			i -= size
			if _, err := m.DefaultVipChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.PrivateNetworkParameters != nil {
		{
			size, err := m.PrivateNetworkParameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.NetworkChoice != nil {
		{
			size := m.NetworkChoice.Size()
			i -= size
			if _, err := m.NetworkChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.StaticRoutes) > 0 {
		for iNdEx := len(m.StaticRoutes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StaticRoutes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Type != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Subnets) > 0 {
		for iNdEx := len(m.Subnets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Subnets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType_GlobalNetwork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_GlobalNetwork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GlobalNetwork != nil {
		{
			size, err := m.GlobalNetwork.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_SiteLocalNetwork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_SiteLocalNetwork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SiteLocalNetwork != nil {
		{
			size, err := m.SiteLocalNetwork.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_SiteLocalInsideNetwork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_SiteLocalInsideNetwork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SiteLocalInsideNetwork != nil {
		{
			size, err := m.SiteLocalInsideNetwork.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_InsideNetwork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_InsideNetwork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.InsideNetwork != nil {
		{
			size, err := m.InsideNetwork.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_LegacyType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_LegacyType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.LegacyType))
	i--
	dAtA[i] = 0x58
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_PrivateNetwork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_PrivateNetwork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PrivateNetwork != nil {
		{
			size, err := m.PrivateNetwork.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_Srv6Network) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_Srv6Network) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Srv6Network != nil {
		{
			size, err := m.Srv6Network.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_TenantVip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_TenantVip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TenantVip != nil {
		{
			size, err := m.TenantVip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_FleetVip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_FleetVip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FleetVip != nil {
		{
			size, err := m.FleetVip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_InterfaceIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_InterfaceIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.InterfaceIp != nil {
		{
			size, err := m.InterfaceIp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_SiteSnatPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_SiteSnatPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SiteSnatPool != nil {
		{
			size, err := m.SiteSnatPool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_FleetSnatPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_FleetSnatPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FleetSnatPool != nil {
		{
			size, err := m.FleetSnatPool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NetworkChoice != nil {
		{
			size := m.NetworkChoice.Size()
			i -= size
			if _, err := m.NetworkChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.StaticRoutes) > 0 {
		for iNdEx := len(m.StaticRoutes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StaticRoutes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType_GlobalNetwork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_GlobalNetwork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GlobalNetwork != nil {
		{
			size, err := m.GlobalNetwork.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_SiteLocalNetwork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_SiteLocalNetwork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SiteLocalNetwork != nil {
		{
			size, err := m.SiteLocalNetwork.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_SiteLocalInsideNetwork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_SiteLocalInsideNetwork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SiteLocalInsideNetwork != nil {
		{
			size, err := m.SiteLocalInsideNetwork.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_LegacyType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_LegacyType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.LegacyType))
	i--
	dAtA[i] = 0x58
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_Srv6Network) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_Srv6Network) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Srv6Network != nil {
		{
			size, err := m.Srv6Network.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NetworkChoice != nil {
		{
			size := m.NetworkChoice.Size()
			i -= size
			if _, err := m.NetworkChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.StaticRoutes) > 0 {
		for iNdEx := len(m.StaticRoutes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StaticRoutes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType_GlobalNetwork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_GlobalNetwork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GlobalNetwork != nil {
		{
			size, err := m.GlobalNetwork.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_SiteLocalNetwork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_SiteLocalNetwork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SiteLocalNetwork != nil {
		{
			size, err := m.SiteLocalNetwork.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_SiteLocalInsideNetwork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_SiteLocalInsideNetwork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SiteLocalInsideNetwork != nil {
		{
			size, err := m.SiteLocalInsideNetwork.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_LegacyType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_LegacyType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.LegacyType))
	i--
	dAtA[i] = 0x58
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_PrivateNetwork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_PrivateNetwork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PrivateNetwork != nil {
		{
			size, err := m.PrivateNetwork.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_Srv6Network) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_Srv6Network) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Srv6Network != nil {
		{
			size, err := m.Srv6Network.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NetworkChoice != nil {
		{
			size := m.NetworkChoice.Size()
			i -= size
			if _, err := m.NetworkChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.StaticRoutes) > 0 {
		for iNdEx := len(m.StaticRoutes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StaticRoutes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType_GlobalNetwork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_GlobalNetwork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GlobalNetwork != nil {
		{
			size, err := m.GlobalNetwork.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_SiteLocalNetwork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_SiteLocalNetwork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SiteLocalNetwork != nil {
		{
			size, err := m.SiteLocalNetwork.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_SiteLocalInsideNetwork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_SiteLocalInsideNetwork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SiteLocalInsideNetwork != nil {
		{
			size, err := m.SiteLocalInsideNetwork.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_LegacyType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_LegacyType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.LegacyType))
	i--
	dAtA[i] = 0x58
	return len(dAtA) - i, nil
}
func (m *GetSpecType_PrivateNetwork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_PrivateNetwork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PrivateNetwork != nil {
		{
			size, err := m.PrivateNetwork.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_Srv6Network) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_Srv6Network) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Srv6Network != nil {
		{
			size, err := m.Srv6Network.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *VoltADNPrivateNetworkReInfoType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Vlan != 0 {
		n += 1 + sovTypes(uint64(m.Vlan))
	}
	if m.NodeSelector != nil {
		l = m.NodeSelector.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *VoltADNPrivateNetworkTenantInfoType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DefaultPrivateVip)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.FinalDefaultPrivateVip)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *DNSServersList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DnsIp) > 0 {
		for _, s := range m.DnsIp {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *VoltADNPrivateNetworkType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PrivateAccessChoice != nil {
		n += m.PrivateAccessChoice.Size()
	}
	if m.DnsChoice != nil {
		n += m.DnsChoice.Size()
	}
	if m.CommonNodeSelector != nil {
		l = m.CommonNodeSelector.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.ReInfoMap) > 0 {
		for k, v := range m.ReInfoMap {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTypes(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	l = len(m.OwnerTenantId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.TenantInfoMap) > 0 {
		for k, v := range m.TenantInfoMap {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTypes(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	if m.DedicatedVipChoice != nil {
		n += m.DedicatedVipChoice.Size()
	}
	return n
}

func (m *VoltADNPrivateNetworkType_NoPrivateAccess) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoPrivateAccess != nil {
		l = m.NoPrivateAccess.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VoltADNPrivateNetworkType_PrivateAccessEnabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PrivateAccessEnabled != nil {
		l = m.PrivateAccessEnabled.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VoltADNPrivateNetworkType_NoPrivateDns) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoPrivateDns != nil {
		l = m.NoPrivateDns.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VoltADNPrivateNetworkType_PrivateDns) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PrivateDns != nil {
		l = m.PrivateDns.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VoltADNPrivateNetworkType_NoAdvertiseDedicatedVips) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoAdvertiseDedicatedVips != nil {
		l = m.NoAdvertiseDedicatedVips.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VoltADNPrivateNetworkType_AdvertiseDedicatedVips) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseDedicatedVips != nil {
		l = m.AdvertiseDedicatedVips.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AnyCastVIPFleetType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VipAllocator != nil {
		l = m.VipAllocator.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *SNATPoolType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ipv4Prefixes) > 0 {
		for _, s := range m.Ipv4Prefixes {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *SNATPoolSiteType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NodeSnatPool) > 0 {
		for k, v := range m.NodeSnatPool {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTypes(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *SNATPoolFleetType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SnatPoolAllocator != nil {
		l = m.SnatPoolAllocator.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Srv6NetworkNsParametersType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *PerSiteSrv6NetworkType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NamespaceChoice != nil {
		n += m.NamespaceChoice.Size()
	}
	if m.DefaultVipChoice != nil {
		n += m.DefaultVipChoice.Size()
	}
	if m.SnatPoolChoice != nil {
		n += m.SnatPoolChoice.Size()
	}
	if m.Slice != nil {
		l = m.Slice.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Fleets) > 0 {
		for _, e := range m.Fleets {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.AccessNetworkRtargets) > 0 {
		for _, e := range m.AccessNetworkRtargets {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.InternetRtargets) > 0 {
		for _, e := range m.InternetRtargets {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.EnterpriseNetworkRtargets) > 0 {
		for _, e := range m.EnterpriseNetworkRtargets {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ExportRtargets) > 0 {
		for _, e := range m.ExportRtargets {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.RemoteSidStatsPlen != 0 {
		n += 2 + sovTypes(uint64(m.RemoteSidStatsPlen))
	}
	return n
}

func (m *PerSiteSrv6NetworkType_NoNamespaceNetwork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoNamespaceNetwork != nil {
		l = m.NoNamespaceNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PerSiteSrv6NetworkType_Srv6NetworkNsParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Srv6NetworkNsParams != nil {
		l = m.Srv6NetworkNsParams.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PerSiteSrv6NetworkType_InterfaceIpVip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InterfaceIpVip != nil {
		l = m.InterfaceIpVip.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PerSiteSrv6NetworkType_AnycastVip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AnycastVip)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *PerSiteSrv6NetworkType_FleetVip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FleetVip != nil {
		l = m.FleetVip.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PerSiteSrv6NetworkType_InterfaceIpSnatPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InterfaceIpSnatPool != nil {
		l = m.InterfaceIpSnatPool.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PerSiteSrv6NetworkType_SiteSnatPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SiteSnatPool != nil {
		l = m.SiteSnatPool.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PerSiteSrv6NetworkType_FleetSnatPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FleetSnatPool != nil {
		l = m.FleetSnatPool.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *NextHopInterfaceList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Interfaces) > 0 {
		for _, e := range m.Interfaces {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *StaticRouteViewType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.IpPrefixes) > 0 {
		for _, s := range m.IpPrefixes {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.NextHopChoice != nil {
		n += m.NextHopChoice.Size()
	}
	if len(m.Attrs) > 0 {
		l = 0
		for _, e := range m.Attrs {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	return n
}

func (m *StaticRouteViewType_IpAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IpAddress)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *StaticRouteViewType_Interface) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Interface != nil {
		l = m.Interface.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *StaticRouteViewType_DefaultGateway) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultGateway != nil {
		l = m.DefaultGateway.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ActivePBRPoliciesType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ForwardProxyPbrPolicies) > 0 {
		for _, e := range m.ForwardProxyPbrPolicies {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.NetworkPbrPolicies) > 0 {
		for _, e := range m.NetworkPbrPolicies {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *PerTenantVIPType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TenantVipMap) > 0 {
		for k, v := range m.TenantVipMap {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Subnets) > 0 {
		for _, e := range m.Subnets {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.Type != 0 {
		n += 1 + sovTypes(uint64(m.Type))
	}
	if len(m.StaticRoutes) > 0 {
		for _, e := range m.StaticRoutes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.NetworkChoice != nil {
		n += m.NetworkChoice.Size()
	}
	if m.PrivateNetworkParameters != nil {
		l = m.PrivateNetworkParameters.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.DefaultVipChoice != nil {
		n += m.DefaultVipChoice.Size()
	}
	if m.SnatPoolChoice != nil {
		n += m.SnatPoolChoice.Size()
	}
	if len(m.ImportRtargetStrs) > 0 {
		for _, s := range m.ImportRtargetStrs {
			l = len(s)
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ExportRtargetStrs) > 0 {
		for _, s := range m.ExportRtargetStrs {
			l = len(s)
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.FleetRefs) > 0 {
		for _, e := range m.FleetRefs {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.SliceRef) > 0 {
		for _, e := range m.SliceRef {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GlobalSpecType_GlobalNetwork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GlobalNetwork != nil {
		l = m.GlobalNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_SiteLocalNetwork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SiteLocalNetwork != nil {
		l = m.SiteLocalNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_SiteLocalInsideNetwork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SiteLocalInsideNetwork != nil {
		l = m.SiteLocalInsideNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_InsideNetwork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InsideNetwork != nil {
		l = m.InsideNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_LegacyType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.LegacyType))
	return n
}
func (m *GlobalSpecType_PrivateNetwork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PrivateNetwork != nil {
		l = m.PrivateNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_Srv6Network) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Srv6Network != nil {
		l = m.Srv6Network.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_TenantVip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TenantVip != nil {
		l = m.TenantVip.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_FleetVip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FleetVip != nil {
		l = m.FleetVip.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_InterfaceIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InterfaceIp != nil {
		l = m.InterfaceIp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_SiteSnatPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SiteSnatPool != nil {
		l = m.SiteSnatPool.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_FleetSnatPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FleetSnatPool != nil {
		l = m.FleetSnatPool.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetworkChoice != nil {
		n += m.NetworkChoice.Size()
	}
	if len(m.StaticRoutes) > 0 {
		for _, e := range m.StaticRoutes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *CreateSpecType_GlobalNetwork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GlobalNetwork != nil {
		l = m.GlobalNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_SiteLocalNetwork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SiteLocalNetwork != nil {
		l = m.SiteLocalNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_SiteLocalInsideNetwork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SiteLocalInsideNetwork != nil {
		l = m.SiteLocalInsideNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_LegacyType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.LegacyType))
	return n
}
func (m *CreateSpecType_Srv6Network) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Srv6Network != nil {
		l = m.Srv6Network.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetworkChoice != nil {
		n += m.NetworkChoice.Size()
	}
	if len(m.StaticRoutes) > 0 {
		for _, e := range m.StaticRoutes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *ReplaceSpecType_GlobalNetwork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GlobalNetwork != nil {
		l = m.GlobalNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_SiteLocalNetwork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SiteLocalNetwork != nil {
		l = m.SiteLocalNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_SiteLocalInsideNetwork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SiteLocalInsideNetwork != nil {
		l = m.SiteLocalInsideNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_LegacyType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.LegacyType))
	return n
}
func (m *ReplaceSpecType_PrivateNetwork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PrivateNetwork != nil {
		l = m.PrivateNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_Srv6Network) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Srv6Network != nil {
		l = m.Srv6Network.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetworkChoice != nil {
		n += m.NetworkChoice.Size()
	}
	if len(m.StaticRoutes) > 0 {
		for _, e := range m.StaticRoutes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GetSpecType_GlobalNetwork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GlobalNetwork != nil {
		l = m.GlobalNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_SiteLocalNetwork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SiteLocalNetwork != nil {
		l = m.SiteLocalNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_SiteLocalInsideNetwork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SiteLocalInsideNetwork != nil {
		l = m.SiteLocalInsideNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_LegacyType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.LegacyType))
	return n
}
func (m *GetSpecType_PrivateNetwork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PrivateNetwork != nil {
		l = m.PrivateNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_Srv6Network) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Srv6Network != nil {
		l = m.Srv6Network.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *VoltADNPrivateNetworkReInfoType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VoltADNPrivateNetworkReInfoType{`,
		`Vlan:` + fmt.Sprintf("%v", this.Vlan) + `,`,
		`NodeSelector:` + strings.Replace(fmt.Sprintf("%v", this.NodeSelector), "LabelSelectorType", "schema.LabelSelectorType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VoltADNPrivateNetworkTenantInfoType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VoltADNPrivateNetworkTenantInfoType{`,
		`DefaultPrivateVip:` + fmt.Sprintf("%v", this.DefaultPrivateVip) + `,`,
		`FinalDefaultPrivateVip:` + fmt.Sprintf("%v", this.FinalDefaultPrivateVip) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DNSServersList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DNSServersList{`,
		`DnsIp:` + fmt.Sprintf("%v", this.DnsIp) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VoltADNPrivateNetworkType) String() string {
	if this == nil {
		return "nil"
	}
	keysForReInfoMap := make([]string, 0, len(this.ReInfoMap))
	for k, _ := range this.ReInfoMap {
		keysForReInfoMap = append(keysForReInfoMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForReInfoMap)
	mapStringForReInfoMap := "map[string]*VoltADNPrivateNetworkReInfoType{"
	for _, k := range keysForReInfoMap {
		mapStringForReInfoMap += fmt.Sprintf("%v: %v,", k, this.ReInfoMap[k])
	}
	mapStringForReInfoMap += "}"
	keysForTenantInfoMap := make([]string, 0, len(this.TenantInfoMap))
	for k, _ := range this.TenantInfoMap {
		keysForTenantInfoMap = append(keysForTenantInfoMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTenantInfoMap)
	mapStringForTenantInfoMap := "map[string]*VoltADNPrivateNetworkTenantInfoType{"
	for _, k := range keysForTenantInfoMap {
		mapStringForTenantInfoMap += fmt.Sprintf("%v: %v,", k, this.TenantInfoMap[k])
	}
	mapStringForTenantInfoMap += "}"
	s := strings.Join([]string{`&VoltADNPrivateNetworkType{`,
		`PrivateAccessChoice:` + fmt.Sprintf("%v", this.PrivateAccessChoice) + `,`,
		`DnsChoice:` + fmt.Sprintf("%v", this.DnsChoice) + `,`,
		`CommonNodeSelector:` + strings.Replace(fmt.Sprintf("%v", this.CommonNodeSelector), "LabelSelectorType", "schema.LabelSelectorType", 1) + `,`,
		`ReInfoMap:` + mapStringForReInfoMap + `,`,
		`OwnerTenantId:` + fmt.Sprintf("%v", this.OwnerTenantId) + `,`,
		`TenantInfoMap:` + mapStringForTenantInfoMap + `,`,
		`DedicatedVipChoice:` + fmt.Sprintf("%v", this.DedicatedVipChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VoltADNPrivateNetworkType_NoPrivateAccess) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VoltADNPrivateNetworkType_NoPrivateAccess{`,
		`NoPrivateAccess:` + strings.Replace(fmt.Sprintf("%v", this.NoPrivateAccess), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VoltADNPrivateNetworkType_PrivateAccessEnabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VoltADNPrivateNetworkType_PrivateAccessEnabled{`,
		`PrivateAccessEnabled:` + strings.Replace(fmt.Sprintf("%v", this.PrivateAccessEnabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VoltADNPrivateNetworkType_NoPrivateDns) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VoltADNPrivateNetworkType_NoPrivateDns{`,
		`NoPrivateDns:` + strings.Replace(fmt.Sprintf("%v", this.NoPrivateDns), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VoltADNPrivateNetworkType_PrivateDns) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VoltADNPrivateNetworkType_PrivateDns{`,
		`PrivateDns:` + strings.Replace(fmt.Sprintf("%v", this.PrivateDns), "DNSServersList", "DNSServersList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VoltADNPrivateNetworkType_NoAdvertiseDedicatedVips) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VoltADNPrivateNetworkType_NoAdvertiseDedicatedVips{`,
		`NoAdvertiseDedicatedVips:` + strings.Replace(fmt.Sprintf("%v", this.NoAdvertiseDedicatedVips), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VoltADNPrivateNetworkType_AdvertiseDedicatedVips) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VoltADNPrivateNetworkType_AdvertiseDedicatedVips{`,
		`AdvertiseDedicatedVips:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseDedicatedVips), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AnyCastVIPFleetType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AnyCastVIPFleetType{`,
		`VipAllocator:` + strings.Replace(fmt.Sprintf("%v", this.VipAllocator), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SNATPoolType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SNATPoolType{`,
		`Ipv4Prefixes:` + fmt.Sprintf("%v", this.Ipv4Prefixes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SNATPoolSiteType) String() string {
	if this == nil {
		return "nil"
	}
	keysForNodeSnatPool := make([]string, 0, len(this.NodeSnatPool))
	for k, _ := range this.NodeSnatPool {
		keysForNodeSnatPool = append(keysForNodeSnatPool, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForNodeSnatPool)
	mapStringForNodeSnatPool := "map[string]*SNATPoolType{"
	for _, k := range keysForNodeSnatPool {
		mapStringForNodeSnatPool += fmt.Sprintf("%v: %v,", k, this.NodeSnatPool[k])
	}
	mapStringForNodeSnatPool += "}"
	s := strings.Join([]string{`&SNATPoolSiteType{`,
		`NodeSnatPool:` + mapStringForNodeSnatPool + `,`,
		`}`,
	}, "")
	return s
}
func (this *SNATPoolFleetType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SNATPoolFleetType{`,
		`SnatPoolAllocator:` + strings.Replace(fmt.Sprintf("%v", this.SnatPoolAllocator), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Srv6NetworkNsParametersType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Srv6NetworkNsParametersType{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PerSiteSrv6NetworkType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFleets := "[]*ObjectRefType{"
	for _, f := range this.Fleets {
		repeatedStringForFleets += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForFleets += "}"
	repeatedStringForAccessNetworkRtargets := "[]*RouteTarget{"
	for _, f := range this.AccessNetworkRtargets {
		repeatedStringForAccessNetworkRtargets += strings.Replace(fmt.Sprintf("%v", f), "RouteTarget", "schema.RouteTarget", 1) + ","
	}
	repeatedStringForAccessNetworkRtargets += "}"
	repeatedStringForInternetRtargets := "[]*RouteTarget{"
	for _, f := range this.InternetRtargets {
		repeatedStringForInternetRtargets += strings.Replace(fmt.Sprintf("%v", f), "RouteTarget", "schema.RouteTarget", 1) + ","
	}
	repeatedStringForInternetRtargets += "}"
	repeatedStringForEnterpriseNetworkRtargets := "[]*RouteTarget{"
	for _, f := range this.EnterpriseNetworkRtargets {
		repeatedStringForEnterpriseNetworkRtargets += strings.Replace(fmt.Sprintf("%v", f), "RouteTarget", "schema.RouteTarget", 1) + ","
	}
	repeatedStringForEnterpriseNetworkRtargets += "}"
	repeatedStringForExportRtargets := "[]*RouteTarget{"
	for _, f := range this.ExportRtargets {
		repeatedStringForExportRtargets += strings.Replace(fmt.Sprintf("%v", f), "RouteTarget", "schema.RouteTarget", 1) + ","
	}
	repeatedStringForExportRtargets += "}"
	s := strings.Join([]string{`&PerSiteSrv6NetworkType{`,
		`NamespaceChoice:` + fmt.Sprintf("%v", this.NamespaceChoice) + `,`,
		`DefaultVipChoice:` + fmt.Sprintf("%v", this.DefaultVipChoice) + `,`,
		`SnatPoolChoice:` + fmt.Sprintf("%v", this.SnatPoolChoice) + `,`,
		`Slice:` + strings.Replace(fmt.Sprintf("%v", this.Slice), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`Fleets:` + repeatedStringForFleets + `,`,
		`AccessNetworkRtargets:` + repeatedStringForAccessNetworkRtargets + `,`,
		`InternetRtargets:` + repeatedStringForInternetRtargets + `,`,
		`EnterpriseNetworkRtargets:` + repeatedStringForEnterpriseNetworkRtargets + `,`,
		`ExportRtargets:` + repeatedStringForExportRtargets + `,`,
		`RemoteSidStatsPlen:` + fmt.Sprintf("%v", this.RemoteSidStatsPlen) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PerSiteSrv6NetworkType_NoNamespaceNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PerSiteSrv6NetworkType_NoNamespaceNetwork{`,
		`NoNamespaceNetwork:` + strings.Replace(fmt.Sprintf("%v", this.NoNamespaceNetwork), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PerSiteSrv6NetworkType_Srv6NetworkNsParams) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PerSiteSrv6NetworkType_Srv6NetworkNsParams{`,
		`Srv6NetworkNsParams:` + strings.Replace(fmt.Sprintf("%v", this.Srv6NetworkNsParams), "Srv6NetworkNsParametersType", "Srv6NetworkNsParametersType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PerSiteSrv6NetworkType_InterfaceIpVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PerSiteSrv6NetworkType_InterfaceIpVip{`,
		`InterfaceIpVip:` + strings.Replace(fmt.Sprintf("%v", this.InterfaceIpVip), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PerSiteSrv6NetworkType_AnycastVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PerSiteSrv6NetworkType_AnycastVip{`,
		`AnycastVip:` + fmt.Sprintf("%v", this.AnycastVip) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PerSiteSrv6NetworkType_FleetVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PerSiteSrv6NetworkType_FleetVip{`,
		`FleetVip:` + strings.Replace(fmt.Sprintf("%v", this.FleetVip), "AnyCastVIPFleetType", "AnyCastVIPFleetType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PerSiteSrv6NetworkType_InterfaceIpSnatPool) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PerSiteSrv6NetworkType_InterfaceIpSnatPool{`,
		`InterfaceIpSnatPool:` + strings.Replace(fmt.Sprintf("%v", this.InterfaceIpSnatPool), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PerSiteSrv6NetworkType_SiteSnatPool) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PerSiteSrv6NetworkType_SiteSnatPool{`,
		`SiteSnatPool:` + strings.Replace(fmt.Sprintf("%v", this.SiteSnatPool), "SNATPoolSiteType", "SNATPoolSiteType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PerSiteSrv6NetworkType_FleetSnatPool) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PerSiteSrv6NetworkType_FleetSnatPool{`,
		`FleetSnatPool:` + strings.Replace(fmt.Sprintf("%v", this.FleetSnatPool), "SNATPoolFleetType", "SNATPoolFleetType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NextHopInterfaceList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForInterfaces := "[]*ObjectRefType{"
	for _, f := range this.Interfaces {
		repeatedStringForInterfaces += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForInterfaces += "}"
	s := strings.Join([]string{`&NextHopInterfaceList{`,
		`Interfaces:` + repeatedStringForInterfaces + `,`,
		`}`,
	}, "")
	return s
}
func (this *StaticRouteViewType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StaticRouteViewType{`,
		`IpPrefixes:` + fmt.Sprintf("%v", this.IpPrefixes) + `,`,
		`NextHopChoice:` + fmt.Sprintf("%v", this.NextHopChoice) + `,`,
		`Attrs:` + fmt.Sprintf("%v", this.Attrs) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StaticRouteViewType_IpAddress) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StaticRouteViewType_IpAddress{`,
		`IpAddress:` + fmt.Sprintf("%v", this.IpAddress) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StaticRouteViewType_Interface) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StaticRouteViewType_Interface{`,
		`Interface:` + strings.Replace(fmt.Sprintf("%v", this.Interface), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StaticRouteViewType_DefaultGateway) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StaticRouteViewType_DefaultGateway{`,
		`DefaultGateway:` + strings.Replace(fmt.Sprintf("%v", this.DefaultGateway), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ActivePBRPoliciesType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForForwardProxyPbrPolicies := "[]*ObjectRefType{"
	for _, f := range this.ForwardProxyPbrPolicies {
		repeatedStringForForwardProxyPbrPolicies += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForForwardProxyPbrPolicies += "}"
	repeatedStringForNetworkPbrPolicies := "[]*ObjectRefType{"
	for _, f := range this.NetworkPbrPolicies {
		repeatedStringForNetworkPbrPolicies += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForNetworkPbrPolicies += "}"
	s := strings.Join([]string{`&ActivePBRPoliciesType{`,
		`ForwardProxyPbrPolicies:` + repeatedStringForForwardProxyPbrPolicies + `,`,
		`NetworkPbrPolicies:` + repeatedStringForNetworkPbrPolicies + `,`,
		`}`,
	}, "")
	return s
}
func (this *PerTenantVIPType) String() string {
	if this == nil {
		return "nil"
	}
	keysForTenantVipMap := make([]string, 0, len(this.TenantVipMap))
	for k, _ := range this.TenantVipMap {
		keysForTenantVipMap = append(keysForTenantVipMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTenantVipMap)
	mapStringForTenantVipMap := "map[string]string{"
	for _, k := range keysForTenantVipMap {
		mapStringForTenantVipMap += fmt.Sprintf("%v: %v,", k, this.TenantVipMap[k])
	}
	mapStringForTenantVipMap += "}"
	s := strings.Join([]string{`&PerTenantVIPType{`,
		`TenantVipMap:` + mapStringForTenantVipMap + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSubnets := "[]*IpSubnetType{"
	for _, f := range this.Subnets {
		repeatedStringForSubnets += strings.Replace(fmt.Sprintf("%v", f), "IpSubnetType", "schema.IpSubnetType", 1) + ","
	}
	repeatedStringForSubnets += "}"
	repeatedStringForStaticRoutes := "[]*StaticRouteType{"
	for _, f := range this.StaticRoutes {
		repeatedStringForStaticRoutes += strings.Replace(fmt.Sprintf("%v", f), "StaticRouteType", "schema.StaticRouteType", 1) + ","
	}
	repeatedStringForStaticRoutes += "}"
	repeatedStringForFleetRefs := "[]*ObjectRefType{"
	for _, f := range this.FleetRefs {
		repeatedStringForFleetRefs += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForFleetRefs += "}"
	repeatedStringForSliceRef := "[]*ObjectRefType{"
	for _, f := range this.SliceRef {
		repeatedStringForSliceRef += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForSliceRef += "}"
	s := strings.Join([]string{`&GlobalSpecType{`,
		`Subnets:` + repeatedStringForSubnets + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`StaticRoutes:` + repeatedStringForStaticRoutes + `,`,
		`NetworkChoice:` + fmt.Sprintf("%v", this.NetworkChoice) + `,`,
		`PrivateNetworkParameters:` + strings.Replace(this.PrivateNetworkParameters.String(), "VoltADNPrivateNetworkType", "VoltADNPrivateNetworkType", 1) + `,`,
		`DefaultVipChoice:` + fmt.Sprintf("%v", this.DefaultVipChoice) + `,`,
		`SnatPoolChoice:` + fmt.Sprintf("%v", this.SnatPoolChoice) + `,`,
		`ImportRtargetStrs:` + fmt.Sprintf("%v", this.ImportRtargetStrs) + `,`,
		`ExportRtargetStrs:` + fmt.Sprintf("%v", this.ExportRtargetStrs) + `,`,
		`FleetRefs:` + repeatedStringForFleetRefs + `,`,
		`SliceRef:` + repeatedStringForSliceRef + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_GlobalNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_GlobalNetwork{`,
		`GlobalNetwork:` + strings.Replace(fmt.Sprintf("%v", this.GlobalNetwork), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_SiteLocalNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_SiteLocalNetwork{`,
		`SiteLocalNetwork:` + strings.Replace(fmt.Sprintf("%v", this.SiteLocalNetwork), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_SiteLocalInsideNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_SiteLocalInsideNetwork{`,
		`SiteLocalInsideNetwork:` + strings.Replace(fmt.Sprintf("%v", this.SiteLocalInsideNetwork), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_InsideNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_InsideNetwork{`,
		`InsideNetwork:` + strings.Replace(fmt.Sprintf("%v", this.InsideNetwork), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_LegacyType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_LegacyType{`,
		`LegacyType:` + fmt.Sprintf("%v", this.LegacyType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_PrivateNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_PrivateNetwork{`,
		`PrivateNetwork:` + strings.Replace(fmt.Sprintf("%v", this.PrivateNetwork), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Srv6Network) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Srv6Network{`,
		`Srv6Network:` + strings.Replace(fmt.Sprintf("%v", this.Srv6Network), "PerSiteSrv6NetworkType", "PerSiteSrv6NetworkType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_TenantVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_TenantVip{`,
		`TenantVip:` + strings.Replace(fmt.Sprintf("%v", this.TenantVip), "PerTenantVIPType", "PerTenantVIPType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_FleetVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_FleetVip{`,
		`FleetVip:` + strings.Replace(fmt.Sprintf("%v", this.FleetVip), "AnyCastVIPFleetType", "AnyCastVIPFleetType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_InterfaceIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_InterfaceIp{`,
		`InterfaceIp:` + strings.Replace(fmt.Sprintf("%v", this.InterfaceIp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_SiteSnatPool) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_SiteSnatPool{`,
		`SiteSnatPool:` + strings.Replace(fmt.Sprintf("%v", this.SiteSnatPool), "SNATPoolSiteType", "SNATPoolSiteType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_FleetSnatPool) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_FleetSnatPool{`,
		`FleetSnatPool:` + strings.Replace(fmt.Sprintf("%v", this.FleetSnatPool), "SNATPoolFleetType", "SNATPoolFleetType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForStaticRoutes := "[]*StaticRouteViewType{"
	for _, f := range this.StaticRoutes {
		repeatedStringForStaticRoutes += strings.Replace(f.String(), "StaticRouteViewType", "StaticRouteViewType", 1) + ","
	}
	repeatedStringForStaticRoutes += "}"
	s := strings.Join([]string{`&CreateSpecType{`,
		`NetworkChoice:` + fmt.Sprintf("%v", this.NetworkChoice) + `,`,
		`StaticRoutes:` + repeatedStringForStaticRoutes + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_GlobalNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_GlobalNetwork{`,
		`GlobalNetwork:` + strings.Replace(fmt.Sprintf("%v", this.GlobalNetwork), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_SiteLocalNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_SiteLocalNetwork{`,
		`SiteLocalNetwork:` + strings.Replace(fmt.Sprintf("%v", this.SiteLocalNetwork), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_SiteLocalInsideNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_SiteLocalInsideNetwork{`,
		`SiteLocalInsideNetwork:` + strings.Replace(fmt.Sprintf("%v", this.SiteLocalInsideNetwork), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_LegacyType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_LegacyType{`,
		`LegacyType:` + fmt.Sprintf("%v", this.LegacyType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Srv6Network) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Srv6Network{`,
		`Srv6Network:` + strings.Replace(fmt.Sprintf("%v", this.Srv6Network), "PerSiteSrv6NetworkType", "PerSiteSrv6NetworkType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForStaticRoutes := "[]*StaticRouteViewType{"
	for _, f := range this.StaticRoutes {
		repeatedStringForStaticRoutes += strings.Replace(f.String(), "StaticRouteViewType", "StaticRouteViewType", 1) + ","
	}
	repeatedStringForStaticRoutes += "}"
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`NetworkChoice:` + fmt.Sprintf("%v", this.NetworkChoice) + `,`,
		`StaticRoutes:` + repeatedStringForStaticRoutes + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_GlobalNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_GlobalNetwork{`,
		`GlobalNetwork:` + strings.Replace(fmt.Sprintf("%v", this.GlobalNetwork), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_SiteLocalNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_SiteLocalNetwork{`,
		`SiteLocalNetwork:` + strings.Replace(fmt.Sprintf("%v", this.SiteLocalNetwork), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_SiteLocalInsideNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_SiteLocalInsideNetwork{`,
		`SiteLocalInsideNetwork:` + strings.Replace(fmt.Sprintf("%v", this.SiteLocalInsideNetwork), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_LegacyType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_LegacyType{`,
		`LegacyType:` + fmt.Sprintf("%v", this.LegacyType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_PrivateNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_PrivateNetwork{`,
		`PrivateNetwork:` + strings.Replace(fmt.Sprintf("%v", this.PrivateNetwork), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Srv6Network) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Srv6Network{`,
		`Srv6Network:` + strings.Replace(fmt.Sprintf("%v", this.Srv6Network), "PerSiteSrv6NetworkType", "PerSiteSrv6NetworkType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForStaticRoutes := "[]*StaticRouteViewType{"
	for _, f := range this.StaticRoutes {
		repeatedStringForStaticRoutes += strings.Replace(f.String(), "StaticRouteViewType", "StaticRouteViewType", 1) + ","
	}
	repeatedStringForStaticRoutes += "}"
	s := strings.Join([]string{`&GetSpecType{`,
		`NetworkChoice:` + fmt.Sprintf("%v", this.NetworkChoice) + `,`,
		`StaticRoutes:` + repeatedStringForStaticRoutes + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_GlobalNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_GlobalNetwork{`,
		`GlobalNetwork:` + strings.Replace(fmt.Sprintf("%v", this.GlobalNetwork), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_SiteLocalNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_SiteLocalNetwork{`,
		`SiteLocalNetwork:` + strings.Replace(fmt.Sprintf("%v", this.SiteLocalNetwork), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_SiteLocalInsideNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_SiteLocalInsideNetwork{`,
		`SiteLocalInsideNetwork:` + strings.Replace(fmt.Sprintf("%v", this.SiteLocalInsideNetwork), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_LegacyType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_LegacyType{`,
		`LegacyType:` + fmt.Sprintf("%v", this.LegacyType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_PrivateNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_PrivateNetwork{`,
		`PrivateNetwork:` + strings.Replace(fmt.Sprintf("%v", this.PrivateNetwork), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Srv6Network) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Srv6Network{`,
		`Srv6Network:` + strings.Replace(fmt.Sprintf("%v", this.Srv6Network), "PerSiteSrv6NetworkType", "PerSiteSrv6NetworkType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *VoltADNPrivateNetworkReInfoType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoltADNPrivateNetworkReInfoType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoltADNPrivateNetworkReInfoType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vlan", wireType)
			}
			m.Vlan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vlan |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeSelector == nil {
				m.NodeSelector = &schema.LabelSelectorType{}
			}
			if err := m.NodeSelector.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoltADNPrivateNetworkTenantInfoType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoltADNPrivateNetworkTenantInfoType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoltADNPrivateNetworkTenantInfoType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultPrivateVip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultPrivateVip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalDefaultPrivateVip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FinalDefaultPrivateVip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DNSServersList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DNSServersList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DNSServersList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DnsIp = append(m.DnsIp, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoltADNPrivateNetworkType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoltADNPrivateNetworkType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoltADNPrivateNetworkType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoPrivateAccess", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PrivateAccessChoice = &VoltADNPrivateNetworkType_NoPrivateAccess{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateAccessEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PrivateAccessChoice = &VoltADNPrivateNetworkType_PrivateAccessEnabled{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoPrivateDns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DnsChoice = &VoltADNPrivateNetworkType_NoPrivateDns{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateDns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DNSServersList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DnsChoice = &VoltADNPrivateNetworkType_PrivateDns{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonNodeSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CommonNodeSelector == nil {
				m.CommonNodeSelector = &schema.LabelSelectorType{}
			}
			if err := m.CommonNodeSelector.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReInfoMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReInfoMap == nil {
				m.ReInfoMap = make(map[string]*VoltADNPrivateNetworkReInfoType)
			}
			var mapkey string
			var mapvalue *VoltADNPrivateNetworkReInfoType
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTypes
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthTypes
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &VoltADNPrivateNetworkReInfoType{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ReInfoMap[mapkey] = mapvalue
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerTenantId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerTenantId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantInfoMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TenantInfoMap == nil {
				m.TenantInfoMap = make(map[string]*VoltADNPrivateNetworkTenantInfoType)
			}
			var mapkey string
			var mapvalue *VoltADNPrivateNetworkTenantInfoType
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTypes
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthTypes
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &VoltADNPrivateNetworkTenantInfoType{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.TenantInfoMap[mapkey] = mapvalue
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoAdvertiseDedicatedVips", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DedicatedVipChoice = &VoltADNPrivateNetworkType_NoAdvertiseDedicatedVips{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseDedicatedVips", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DedicatedVipChoice = &VoltADNPrivateNetworkType_AdvertiseDedicatedVips{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnyCastVIPFleetType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnyCastVIPFleetType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnyCastVIPFleetType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipAllocator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VipAllocator == nil {
				m.VipAllocator = &views.ObjectRefType{}
			}
			if err := m.VipAllocator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SNATPoolType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SNATPoolType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SNATPoolType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv4Prefixes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ipv4Prefixes = append(m.Ipv4Prefixes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SNATPoolSiteType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SNATPoolSiteType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SNATPoolSiteType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeSnatPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeSnatPool == nil {
				m.NodeSnatPool = make(map[string]*SNATPoolType)
			}
			var mapkey string
			var mapvalue *SNATPoolType
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTypes
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthTypes
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &SNATPoolType{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.NodeSnatPool[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SNATPoolFleetType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SNATPoolFleetType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SNATPoolFleetType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnatPoolAllocator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SnatPoolAllocator == nil {
				m.SnatPoolAllocator = &views.ObjectRefType{}
			}
			if err := m.SnatPoolAllocator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Srv6NetworkNsParametersType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Srv6NetworkNsParametersType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Srv6NetworkNsParametersType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PerSiteSrv6NetworkType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PerSiteSrv6NetworkType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PerSiteSrv6NetworkType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoNamespaceNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NamespaceChoice = &PerSiteSrv6NetworkType_NoNamespaceNetwork{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Srv6NetworkNsParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Srv6NetworkNsParametersType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NamespaceChoice = &PerSiteSrv6NetworkType_Srv6NetworkNsParams{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterfaceIpVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DefaultVipChoice = &PerSiteSrv6NetworkType_InterfaceIpVip{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnycastVip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultVipChoice = &PerSiteSrv6NetworkType_AnycastVip{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FleetVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AnyCastVIPFleetType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DefaultVipChoice = &PerSiteSrv6NetworkType_FleetVip{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterfaceIpSnatPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SnatPoolChoice = &PerSiteSrv6NetworkType_InterfaceIpSnatPool{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteSnatPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SNATPoolSiteType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SnatPoolChoice = &PerSiteSrv6NetworkType_SiteSnatPool{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FleetSnatPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SNATPoolFleetType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SnatPoolChoice = &PerSiteSrv6NetworkType_FleetSnatPool{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Slice == nil {
				m.Slice = &views.ObjectRefType{}
			}
			if err := m.Slice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fleets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fleets = append(m.Fleets, &views.ObjectRefType{})
			if err := m.Fleets[len(m.Fleets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessNetworkRtargets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessNetworkRtargets = append(m.AccessNetworkRtargets, &schema.RouteTarget{})
			if err := m.AccessNetworkRtargets[len(m.AccessNetworkRtargets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternetRtargets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternetRtargets = append(m.InternetRtargets, &schema.RouteTarget{})
			if err := m.InternetRtargets[len(m.InternetRtargets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnterpriseNetworkRtargets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnterpriseNetworkRtargets = append(m.EnterpriseNetworkRtargets, &schema.RouteTarget{})
			if err := m.EnterpriseNetworkRtargets[len(m.EnterpriseNetworkRtargets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExportRtargets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExportRtargets = append(m.ExportRtargets, &schema.RouteTarget{})
			if err := m.ExportRtargets[len(m.ExportRtargets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteSidStatsPlen", wireType)
			}
			m.RemoteSidStatsPlen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemoteSidStatsPlen |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NextHopInterfaceList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NextHopInterfaceList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NextHopInterfaceList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interfaces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Interfaces = append(m.Interfaces, &views.ObjectRefType{})
			if err := m.Interfaces[len(m.Interfaces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StaticRouteViewType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StaticRouteViewType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StaticRouteViewType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpPrefixes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpPrefixes = append(m.IpPrefixes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextHopChoice = &StaticRouteViewType_IpAddress{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interface", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NextHopChoice = &StaticRouteViewType_Interface{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultGateway", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NextHopChoice = &StaticRouteViewType_DefaultGateway{v}
			iNdEx = postIndex
		case 6:
			if wireType == 0 {
				var v schema.RouteAttrType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= schema.RouteAttrType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Attrs = append(m.Attrs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Attrs) == 0 {
					m.Attrs = make([]schema.RouteAttrType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v schema.RouteAttrType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= schema.RouteAttrType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Attrs = append(m.Attrs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Attrs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivePBRPoliciesType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivePBRPoliciesType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivePBRPoliciesType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardProxyPbrPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForwardProxyPbrPolicies = append(m.ForwardProxyPbrPolicies, &views.ObjectRefType{})
			if err := m.ForwardProxyPbrPolicies[len(m.ForwardProxyPbrPolicies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkPbrPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkPbrPolicies = append(m.NetworkPbrPolicies, &views.ObjectRefType{})
			if err := m.NetworkPbrPolicies[len(m.NetworkPbrPolicies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PerTenantVIPType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PerTenantVIPType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PerTenantVIPType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantVipMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TenantVipMap == nil {
				m.TenantVipMap = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.TenantVipMap[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subnets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subnets = append(m.Subnets, &schema.IpSubnetType{})
			if err := m.Subnets[len(m.Subnets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= schema.VirtualNetworkType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StaticRoutes = append(m.StaticRoutes, &schema.StaticRouteType{})
			if err := m.StaticRoutes[len(m.StaticRoutes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkChoice = &GlobalSpecType_GlobalNetwork{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteLocalNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkChoice = &GlobalSpecType_SiteLocalNetwork{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteLocalInsideNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkChoice = &GlobalSpecType_SiteLocalInsideNetwork{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsideNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkChoice = &GlobalSpecType_InsideNetwork{v}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LegacyType", wireType)
			}
			var v schema.VirtualNetworkType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= schema.VirtualNetworkType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NetworkChoice = &GlobalSpecType_LegacyType{v}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkChoice = &GlobalSpecType_PrivateNetwork{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Srv6Network", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PerSiteSrv6NetworkType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkChoice = &GlobalSpecType_Srv6Network{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateNetworkParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PrivateNetworkParameters == nil {
				m.PrivateNetworkParameters = &VoltADNPrivateNetworkType{}
			}
			if err := m.PrivateNetworkParameters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PerTenantVIPType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DefaultVipChoice = &GlobalSpecType_TenantVip{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FleetVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AnyCastVIPFleetType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DefaultVipChoice = &GlobalSpecType_FleetVip{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterfaceIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SnatPoolChoice = &GlobalSpecType_InterfaceIp{v}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteSnatPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SNATPoolSiteType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SnatPoolChoice = &GlobalSpecType_SiteSnatPool{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FleetSnatPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SNATPoolFleetType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SnatPoolChoice = &GlobalSpecType_FleetSnatPool{v}
			iNdEx = postIndex
		case 1000:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImportRtargetStrs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImportRtargetStrs = append(m.ImportRtargetStrs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 1001:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExportRtargetStrs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExportRtargetStrs = append(m.ExportRtargetStrs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 1002:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FleetRefs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FleetRefs = append(m.FleetRefs, &schema.ObjectRefType{})
			if err := m.FleetRefs[len(m.FleetRefs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1003:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SliceRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SliceRef = append(m.SliceRef, &schema.ObjectRefType{})
			if err := m.SliceRef[len(m.SliceRef)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkChoice = &CreateSpecType_GlobalNetwork{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteLocalNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkChoice = &CreateSpecType_SiteLocalNetwork{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteLocalInsideNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkChoice = &CreateSpecType_SiteLocalInsideNetwork{v}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LegacyType", wireType)
			}
			var v schema.VirtualNetworkType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= schema.VirtualNetworkType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NetworkChoice = &CreateSpecType_LegacyType{v}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StaticRoutes = append(m.StaticRoutes, &StaticRouteViewType{})
			if err := m.StaticRoutes[len(m.StaticRoutes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Srv6Network", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PerSiteSrv6NetworkType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkChoice = &CreateSpecType_Srv6Network{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkChoice = &ReplaceSpecType_GlobalNetwork{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteLocalNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkChoice = &ReplaceSpecType_SiteLocalNetwork{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteLocalInsideNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkChoice = &ReplaceSpecType_SiteLocalInsideNetwork{v}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LegacyType", wireType)
			}
			var v schema.VirtualNetworkType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= schema.VirtualNetworkType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NetworkChoice = &ReplaceSpecType_LegacyType{v}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StaticRoutes = append(m.StaticRoutes, &StaticRouteViewType{})
			if err := m.StaticRoutes[len(m.StaticRoutes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkChoice = &ReplaceSpecType_PrivateNetwork{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Srv6Network", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PerSiteSrv6NetworkType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkChoice = &ReplaceSpecType_Srv6Network{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkChoice = &GetSpecType_GlobalNetwork{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteLocalNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkChoice = &GetSpecType_SiteLocalNetwork{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteLocalInsideNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkChoice = &GetSpecType_SiteLocalInsideNetwork{v}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LegacyType", wireType)
			}
			var v schema.VirtualNetworkType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= schema.VirtualNetworkType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NetworkChoice = &GetSpecType_LegacyType{v}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StaticRoutes = append(m.StaticRoutes, &StaticRouteViewType{})
			if err := m.StaticRoutes[len(m.StaticRoutes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkChoice = &GetSpecType_PrivateNetwork{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Srv6Network", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PerSiteSrv6NetworkType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkChoice = &GetSpecType_Srv6Network{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package user

import (
	"reflect"

	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/server"
	"gopkg.volterra.us/stdlib/store"
	"gopkg.volterra.us/stdlib/svcfw"
)

func initializeValidatorRegistry(vr map[string]db.Validator) {
	vr["ves.io.schema.user.SpecType"] = SpecTypeValidator()

	vr["ves.io.schema.user.Object"] = ObjectValidator()
	vr["ves.io.schema.user.StatusObject"] = StatusObjectValidator()

	vr["ves.io.schema.user.CreateUserRequest"] = CreateUserRequestValidator()
	vr["ves.io.schema.user.CreateUserResponse"] = CreateUserResponseValidator()
	vr["ves.io.schema.user.LastLoginUpdateRequest"] = LastLoginUpdateRequestValidator()
	vr["ves.io.schema.user.LastLoginUpdateResponse"] = LastLoginUpdateResponseValidator()
	vr["ves.io.schema.user.ListByNotifPrefRequest"] = ListByNotifPrefRequestValidator()
	vr["ves.io.schema.user.ListByNotifPrefResponse"] = ListByNotifPrefResponseValidator()
	vr["ves.io.schema.user.ListByNotifPrefResponseItem"] = ListByNotifPrefResponseItemValidator()
	vr["ves.io.schema.user.PrivateCascadeDeleteRequest"] = PrivateCascadeDeleteRequestValidator()

	vr["ves.io.schema.user.AcceptTOSRequest"] = AcceptTOSRequestValidator()
	vr["ves.io.schema.user.AcceptTOSResponse"] = AcceptTOSResponseValidator()
	vr["ves.io.schema.user.AssignRoleRequest"] = AssignRoleRequestValidator()
	vr["ves.io.schema.user.BillingFeatureIndicator"] = BillingFeatureIndicatorValidator()
	vr["ves.io.schema.user.CascadeDeleteItemType"] = CascadeDeleteItemTypeValidator()
	vr["ves.io.schema.user.CascadeDeleteRequest"] = CascadeDeleteRequestValidator()
	vr["ves.io.schema.user.CascadeDeleteResponse"] = CascadeDeleteResponseValidator()
	vr["ves.io.schema.user.Empty"] = EmptyValidator()
	vr["ves.io.schema.user.FeatureFlagType"] = FeatureFlagTypeValidator()
	vr["ves.io.schema.user.GetTOSRequest"] = GetTOSRequestValidator()
	vr["ves.io.schema.user.GetTOSResponse"] = GetTOSResponseValidator()
	vr["ves.io.schema.user.GetUserRoleRequest"] = GetUserRoleRequestValidator()
	vr["ves.io.schema.user.GetUserRoleResponse"] = GetUserRoleResponseValidator()
	vr["ves.io.schema.user.ListUserRoleRequest"] = ListUserRoleRequestValidator()
	vr["ves.io.schema.user.ListUserRoleResponse"] = ListUserRoleResponseValidator()
	vr["ves.io.schema.user.ListUserRoleResponseItem"] = ListUserRoleResponseItemValidator()
	vr["ves.io.schema.user.MSPManaged"] = MSPManagedValidator()
	vr["ves.io.schema.user.NamespacesRoleType"] = NamespacesRoleTypeValidator()
	vr["ves.io.schema.user.ResetPasswordByAdminRequest"] = ResetPasswordByAdminRequestValidator()
	vr["ves.io.schema.user.SendPasswordEmailRequest"] = SendPasswordEmailRequestValidator()
	vr["ves.io.schema.user.SendPasswordEmailResponse"] = SendPasswordEmailResponseValidator()
	vr["ves.io.schema.user.UserGroupRequest"] = UserGroupRequestValidator()
	vr["ves.io.schema.user.UserGroupResponse"] = UserGroupResponseValidator()
	vr["ves.io.schema.user.UserRoleRequest"] = UserRoleRequestValidator()

	vr["ves.io.schema.user.AddonServiceStatus"] = AddonServiceStatusValidator()
	vr["ves.io.schema.user.CreateSpecType"] = CreateSpecTypeValidator()
	vr["ves.io.schema.user.GetSpecType"] = GetSpecTypeValidator()
	vr["ves.io.schema.user.GlobalSpecType"] = GlobalSpecTypeValidator()
	vr["ves.io.schema.user.ReplaceSpecType"] = ReplaceSpecTypeValidator()
	vr["ves.io.schema.user.TileAccess"] = TileAccessValidator()

}

func initializeEntryRegistry(mdr *svcfw.MDRegistry) {
	mdr.EntryFactory["ves.io.schema.user.Object"] = NewEntryObject
	mdr.EntryStoreMap["ves.io.schema.user.Object"] = store.InMemory
	mdr.EntryRegistry["ves.io.schema.user.Object"] = reflect.TypeOf(&DBObject{})
	mdr.EntryIndexers["ves.io.schema.user.Object"] = GetObjectIndexers
	mdr.EntryFactory["ves.io.schema.user.StatusObject"] = NewEntryStatusObject
	mdr.EntryStoreMap["ves.io.schema.user.StatusObject"] = store.InMemory
	mdr.EntryRegistry["ves.io.schema.user.StatusObject"] = reflect.TypeOf(&DBStatusObject{})
	mdr.EntryIndexers["ves.io.schema.user.StatusObject"] = GetStatusObjectIndexers

}

func initializeRPCRegistry(mdr *svcfw.MDRegistry) {

}

func initializeAPIGwServiceSlugsRegistry(sm map[string]string) {
	sm["ves.io.schema.user.CustomAPI"] = "web"

}

func initializeP0PolicyRegistry(sm map[string]svcfw.P0PolicyInfo) {

}

func initializeCRUDServiceRegistry(mdr *svcfw.MDRegistry, isExternal bool) {
	var (
		csr       *svcfw.CRUDServiceRegistry
		customCSR *svcfw.CustomServiceRegistry
	)
	_, _ = csr, customCSR

	customCSR = mdr.PvtCustomServiceRegistry

	func() {
		// set swagger jsons for our and external schemas

		customCSR.SwaggerRegistry["ves.io.schema.user.Object"] = CustomPrivateAPISwaggerJSON

		customCSR.GrpcClientRegistry["ves.io.schema.user.CustomPrivateAPI"] = NewCustomPrivateAPIGrpcClient
		customCSR.RestClientRegistry["ves.io.schema.user.CustomPrivateAPI"] = NewCustomPrivateAPIRestClient
		if isExternal {
			return
		}
		mdr.SvcRegisterHandlers["ves.io.schema.user.CustomPrivateAPI"] = RegisterCustomPrivateAPIServer
		mdr.SvcGwRegisterHandlers["ves.io.schema.user.CustomPrivateAPI"] = RegisterGwCustomPrivateAPIHandler
		customCSR.ServerRegistry["ves.io.schema.user.CustomPrivateAPI"] = func(svc svcfw.Service) server.APIHandler {
			return NewCustomPrivateAPIServer(svc)
		}

	}()

	customCSR = mdr.PubCustomServiceRegistry

	func() {
		// set swagger jsons for our and external schemas

		customCSR.SwaggerRegistry["ves.io.schema.user.Object"] = CustomAPISwaggerJSON

		customCSR.GrpcClientRegistry["ves.io.schema.user.CustomAPI"] = NewCustomAPIGrpcClient
		customCSR.RestClientRegistry["ves.io.schema.user.CustomAPI"] = NewCustomAPIRestClient
		if isExternal {
			return
		}
		mdr.SvcRegisterHandlers["ves.io.schema.user.CustomAPI"] = RegisterCustomAPIServer
		mdr.SvcGwRegisterHandlers["ves.io.schema.user.CustomAPI"] = RegisterGwCustomAPIHandler
		customCSR.ServerRegistry["ves.io.schema.user.CustomAPI"] = func(svc svcfw.Service) server.APIHandler {
			return NewCustomAPIServer(svc)
		}

	}()

}

func InitializeMDRegistry(mdr *svcfw.MDRegistry, isExternal bool) {
	initializeEntryRegistry(mdr)
	initializeValidatorRegistry(mdr.ValidatorRegistry)

	initializeCRUDServiceRegistry(mdr, isExternal)
	if isExternal {
		return
	}

	initializeRPCRegistry(mdr)
	initializeAPIGwServiceSlugsRegistry(mdr.APIGwServiceSlugs)
	initializeP0PolicyRegistry(mdr.P0PolicyRegistry)

}

// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package user

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *CreateUserRequest) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateUserRequest) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CreateUserRequest) DeepCopy() *CreateUserRequest {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateUserRequest{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateUserRequest) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateUserRequest) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateUserRequestValidator().Validate(ctx, m, opts...)
}

type ValidateCreateUserRequest struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateUserRequest) TenantIdValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for tenant_id")
	}

	return validatorFn, nil
}

func (v *ValidateCreateUserRequest) LastNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for last_name")
	}

	return validatorFn, nil
}

func (v *ValidateCreateUserRequest) UserEmailValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for user_email")
	}

	return validatorFn, nil
}

func (v *ValidateCreateUserRequest) UserGroupNamesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for user_group_names")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for user_group_names")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated user_group_names")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items user_group_names")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateUserRequest) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateUserRequest)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateUserRequest got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["first_name"]; exists {

		vOpts := append(opts, db.WithValidateField("first_name"))
		if err := fv(ctx, m.GetFirstName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["last_name"]; exists {

		vOpts := append(opts, db.WithValidateField("last_name"))
		if err := fv(ctx, m.GetLastName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["namespace_access"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace_access"))
		if err := fv(ctx, m.GetNamespaceAccess(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tenant_id"]; exists {

		vOpts := append(opts, db.WithValidateField("tenant_id"))
		if err := fv(ctx, m.GetTenantId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["user_email"]; exists {

		vOpts := append(opts, db.WithValidateField("user_email"))
		if err := fv(ctx, m.GetUserEmail(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["user_group_names"]; exists {
		vOpts := append(opts, db.WithValidateField("user_group_names"))
		if err := fv(ctx, m.GetUserGroupNames(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateUserRequestValidator = func() *ValidateCreateUserRequest {
	v := &ValidateCreateUserRequest{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhTenantId := v.TenantIdValidationRuleHandler
	rulesTenantId := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.min_len":   "1",
	}
	vFn, err = vrhTenantId(rulesTenantId)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateUserRequest.tenant_id: %s", err)
		panic(errMsg)
	}
	v.FldValidators["tenant_id"] = vFn

	vrhLastName := v.LastNameValidationRuleHandler
	rulesLastName := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.min_len":   "1",
	}
	vFn, err = vrhLastName(rulesLastName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateUserRequest.last_name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["last_name"] = vFn

	vrhUserEmail := v.UserEmailValidationRuleHandler
	rulesUserEmail := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.email":     "true",
		"ves.io.schema.rules.string.min_len":   "1",
	}
	vFn, err = vrhUserEmail(rulesUserEmail)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateUserRequest.user_email: %s", err)
		panic(errMsg)
	}
	v.FldValidators["user_email"] = vFn

	vrhUserGroupNames := v.UserGroupNamesValidationRuleHandler
	rulesUserGroupNames := map[string]string{
		"ves.io.schema.rules.map.keys.string.ves_object_name": "true",
	}
	vFn, err = vrhUserGroupNames(rulesUserGroupNames)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateUserRequest.user_group_names: %s", err)
		panic(errMsg)
	}
	v.FldValidators["user_group_names"] = vFn

	v.FldValidators["namespace_access"] = ves_io_schema.NamespaceAccessTypeValidator().Validate

	return v
}()

func CreateUserRequestValidator() db.Validator {
	return DefaultCreateUserRequestValidator
}

// augmented methods on protoc/std generated struct

func (m *CreateUserResponse) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateUserResponse) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CreateUserResponse) DeepCopy() *CreateUserResponse {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateUserResponse{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateUserResponse) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateUserResponse) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateUserResponseValidator().Validate(ctx, m, opts...)
}

type ValidateCreateUserResponse struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateUserResponse) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateUserResponse)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateUserResponse got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["domain_owner"]; exists {

		vOpts := append(opts, db.WithValidateField("domain_owner"))
		if err := fv(ctx, m.GetDomainOwner(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["idm_type"]; exists {

		vOpts := append(opts, db.WithValidateField("idm_type"))
		if err := fv(ctx, m.GetIdmType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["sync_mode"]; exists {

		vOpts := append(opts, db.WithValidateField("sync_mode"))
		if err := fv(ctx, m.GetSyncMode(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tenant_id"]; exists {

		vOpts := append(opts, db.WithValidateField("tenant_id"))
		if err := fv(ctx, m.GetTenantId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["user_email"]; exists {

		vOpts := append(opts, db.WithValidateField("user_email"))
		if err := fv(ctx, m.GetUserEmail(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["user_group_names"]; exists {

		vOpts := append(opts, db.WithValidateField("user_group_names"))
		for idx, item := range m.GetUserGroupNames() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["user_type"]; exists {

		vOpts := append(opts, db.WithValidateField("user_type"))
		if err := fv(ctx, m.GetUserType(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateUserResponseValidator = func() *ValidateCreateUserResponse {
	v := &ValidateCreateUserResponse{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func CreateUserResponseValidator() db.Validator {
	return DefaultCreateUserResponseValidator
}

// augmented methods on protoc/std generated struct

func (m *LastLoginUpdateRequest) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *LastLoginUpdateRequest) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *LastLoginUpdateRequest) DeepCopy() *LastLoginUpdateRequest {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &LastLoginUpdateRequest{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *LastLoginUpdateRequest) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *LastLoginUpdateRequest) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return LastLoginUpdateRequestValidator().Validate(ctx, m, opts...)
}

type ValidateLastLoginUpdateRequest struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateLastLoginUpdateRequest) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*LastLoginUpdateRequest)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *LastLoginUpdateRequest got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["last_login_timestamp"]; exists {

		vOpts := append(opts, db.WithValidateField("last_login_timestamp"))
		if err := fv(ctx, m.GetLastLoginTimestamp(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tenant"]; exists {

		vOpts := append(opts, db.WithValidateField("tenant"))
		if err := fv(ctx, m.GetTenant(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["user"]; exists {

		vOpts := append(opts, db.WithValidateField("user"))
		if err := fv(ctx, m.GetUser(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultLastLoginUpdateRequestValidator = func() *ValidateLastLoginUpdateRequest {
	v := &ValidateLastLoginUpdateRequest{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func LastLoginUpdateRequestValidator() db.Validator {
	return DefaultLastLoginUpdateRequestValidator
}

// augmented methods on protoc/std generated struct

func (m *LastLoginUpdateResponse) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *LastLoginUpdateResponse) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *LastLoginUpdateResponse) DeepCopy() *LastLoginUpdateResponse {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &LastLoginUpdateResponse{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *LastLoginUpdateResponse) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *LastLoginUpdateResponse) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return LastLoginUpdateResponseValidator().Validate(ctx, m, opts...)
}

type ValidateLastLoginUpdateResponse struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateLastLoginUpdateResponse) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*LastLoginUpdateResponse)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *LastLoginUpdateResponse got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultLastLoginUpdateResponseValidator = func() *ValidateLastLoginUpdateResponse {
	v := &ValidateLastLoginUpdateResponse{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func LastLoginUpdateResponseValidator() db.Validator {
	return DefaultLastLoginUpdateResponseValidator
}

// augmented methods on protoc/std generated struct

func (m *ListByNotifPrefRequest) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ListByNotifPrefRequest) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ListByNotifPrefRequest) DeepCopy() *ListByNotifPrefRequest {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ListByNotifPrefRequest{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ListByNotifPrefRequest) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ListByNotifPrefRequest) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ListByNotifPrefRequestValidator().Validate(ctx, m, opts...)
}

type ValidateListByNotifPrefRequest struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateListByNotifPrefRequest) PreferenceChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for preference_choice")
	}
	return validatorFn, nil
}

func (v *ValidateListByNotifPrefRequest) PreferenceChoicePreferenceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_Preference, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for preference")
	}
	return oValidatorFn_Preference, nil
}

func (v *ValidateListByNotifPrefRequest) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ListByNotifPrefRequest)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ListByNotifPrefRequest got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["preference_choice"]; exists {
		val := m.GetPreferenceChoice()
		vOpts := append(opts,
			db.WithValidateField("preference_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetPreferenceChoice().(type) {
	case *ListByNotifPrefRequest_Preference:
		if fv, exists := v.FldValidators["preference_choice.preference"]; exists {
			val := m.GetPreferenceChoice().(*ListByNotifPrefRequest_Preference).Preference
			vOpts := append(opts,
				db.WithValidateField("preference_choice"),
				db.WithValidateField("preference"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultListByNotifPrefRequestValidator = func() *ValidateListByNotifPrefRequest {
	v := &ValidateListByNotifPrefRequest{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhPreferenceChoice := v.PreferenceChoiceValidationRuleHandler
	rulesPreferenceChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhPreferenceChoice(rulesPreferenceChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ListByNotifPrefRequest.preference_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["preference_choice"] = vFn

	vrhPreferenceChoicePreference := v.PreferenceChoicePreferenceValidationRuleHandler
	rulesPreferenceChoicePreference := map[string]string{
		"ves.io.schema.rules.string.not_empty": "true",
	}
	vFnMap["preference_choice.preference"], err = vrhPreferenceChoicePreference(rulesPreferenceChoicePreference)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field ListByNotifPrefRequest.preference_choice_preference: %s", err)
		panic(errMsg)
	}

	v.FldValidators["preference_choice.preference"] = vFnMap["preference_choice.preference"]

	return v
}()

func ListByNotifPrefRequestValidator() db.Validator {
	return DefaultListByNotifPrefRequestValidator
}

// augmented methods on protoc/std generated struct

func (m *ListByNotifPrefResponse) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ListByNotifPrefResponse) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ListByNotifPrefResponse) DeepCopy() *ListByNotifPrefResponse {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ListByNotifPrefResponse{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ListByNotifPrefResponse) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ListByNotifPrefResponse) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ListByNotifPrefResponseValidator().Validate(ctx, m, opts...)
}

type ValidateListByNotifPrefResponse struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateListByNotifPrefResponse) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ListByNotifPrefResponse)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ListByNotifPrefResponse got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["items"]; exists {

		vOpts := append(opts, db.WithValidateField("items"))
		for idx, item := range m.GetItems() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultListByNotifPrefResponseValidator = func() *ValidateListByNotifPrefResponse {
	v := &ValidateListByNotifPrefResponse{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func ListByNotifPrefResponseValidator() db.Validator {
	return DefaultListByNotifPrefResponseValidator
}

// augmented methods on protoc/std generated struct

func (m *ListByNotifPrefResponseItem) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ListByNotifPrefResponseItem) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ListByNotifPrefResponseItem) DeepCopy() *ListByNotifPrefResponseItem {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ListByNotifPrefResponseItem{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ListByNotifPrefResponseItem) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ListByNotifPrefResponseItem) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ListByNotifPrefResponseItemValidator().Validate(ctx, m, opts...)
}

type ValidateListByNotifPrefResponseItem struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateListByNotifPrefResponseItem) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ListByNotifPrefResponseItem)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ListByNotifPrefResponseItem got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["email"]; exists {

		vOpts := append(opts, db.WithValidateField("email"))
		if err := fv(ctx, m.GetEmail(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["first_name"]; exists {

		vOpts := append(opts, db.WithValidateField("first_name"))
		if err := fv(ctx, m.GetFirstName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["last_name"]; exists {

		vOpts := append(opts, db.WithValidateField("last_name"))
		if err := fv(ctx, m.GetLastName(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultListByNotifPrefResponseItemValidator = func() *ValidateListByNotifPrefResponseItem {
	v := &ValidateListByNotifPrefResponseItem{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func ListByNotifPrefResponseItemValidator() db.Validator {
	return DefaultListByNotifPrefResponseItemValidator
}

// augmented methods on protoc/std generated struct

func (m *PrivateCascadeDeleteRequest) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *PrivateCascadeDeleteRequest) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *PrivateCascadeDeleteRequest) DeepCopy() *PrivateCascadeDeleteRequest {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &PrivateCascadeDeleteRequest{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *PrivateCascadeDeleteRequest) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *PrivateCascadeDeleteRequest) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return PrivateCascadeDeleteRequestValidator().Validate(ctx, m, opts...)
}

type ValidatePrivateCascadeDeleteRequest struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidatePrivateCascadeDeleteRequest) TenantNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for tenant_name")
	}

	return validatorFn, nil
}

func (v *ValidatePrivateCascadeDeleteRequest) EmailValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for email")
	}

	return validatorFn, nil
}

func (v *ValidatePrivateCascadeDeleteRequest) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*PrivateCascadeDeleteRequest)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *PrivateCascadeDeleteRequest got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["email"]; exists {

		vOpts := append(opts, db.WithValidateField("email"))
		if err := fv(ctx, m.GetEmail(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tenant_name"]; exists {

		vOpts := append(opts, db.WithValidateField("tenant_name"))
		if err := fv(ctx, m.GetTenantName(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultPrivateCascadeDeleteRequestValidator = func() *ValidatePrivateCascadeDeleteRequest {
	v := &ValidatePrivateCascadeDeleteRequest{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhTenantName := v.TenantNameValidationRuleHandler
	rulesTenantName := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhTenantName(rulesTenantName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for PrivateCascadeDeleteRequest.tenant_name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["tenant_name"] = vFn

	vrhEmail := v.EmailValidationRuleHandler
	rulesEmail := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhEmail(rulesEmail)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for PrivateCascadeDeleteRequest.email: %s", err)
		panic(errMsg)
	}
	v.FldValidators["email"] = vFn

	return v
}()

func PrivateCascadeDeleteRequestValidator() db.Validator {
	return DefaultPrivateCascadeDeleteRequestValidator
}

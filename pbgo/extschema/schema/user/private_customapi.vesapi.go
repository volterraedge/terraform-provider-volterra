// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package user

import (
	"bytes"
	"context"
	"fmt"
	io "io"
	"net/http"
	"strings"

	"github.com/gogo/protobuf/proto"
	"github.com/grpc-ecosystem/grpc-gateway/runtime"
	"google.golang.org/grpc"

	"gopkg.volterra.us/stdlib/client"
	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/errors"
	"gopkg.volterra.us/stdlib/server"
	"gopkg.volterra.us/stdlib/svcfw"
)

var (
	_ = fmt.Sprintf("dummy for fmt import use")
)

// Create CustomPrivateAPI GRPC Client satisfying server.CustomClient
type CustomPrivateAPIGrpcClient struct {
	conn       *grpc.ClientConn
	grpcClient CustomPrivateAPIClient
	// map of rpc name to its invocation
	rpcFns map[string]func(context.Context, string, ...grpc.CallOption) (proto.Message, error)
}

func (c *CustomPrivateAPIGrpcClient) doRPCCascadeDelete(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &PrivateCascadeDeleteRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.user.PrivateCascadeDeleteRequest", yamlReq)
	}
	rsp, err := c.grpcClient.CascadeDelete(ctx, req, opts...)
	return rsp, err
}

func (c *CustomPrivateAPIGrpcClient) doRPCCreate(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &CreateUserRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.user.CreateUserRequest", yamlReq)
	}
	rsp, err := c.grpcClient.Create(ctx, req, opts...)
	return rsp, err
}

func (c *CustomPrivateAPIGrpcClient) doRPCListByNotificationPreferences(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &ListByNotifPrefRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.user.ListByNotifPrefRequest", yamlReq)
	}
	rsp, err := c.grpcClient.ListByNotificationPreferences(ctx, req, opts...)
	return rsp, err
}

func (c *CustomPrivateAPIGrpcClient) doRPCUpdateLastLogin(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &LastLoginUpdateRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.user.LastLoginUpdateRequest", yamlReq)
	}
	rsp, err := c.grpcClient.UpdateLastLogin(ctx, req, opts...)
	return rsp, err
}

func (c *CustomPrivateAPIGrpcClient) DoRPC(ctx context.Context, rpc string, opts ...server.CustomCallOpt) (proto.Message, error) {
	rpcFn, exists := c.rpcFns[rpc]
	if !exists {
		return nil, fmt.Errorf("Error, no such rpc %s", rpc)
	}
	cco := server.NewCustomCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	if cco.YAMLReq == "" {
		return nil, fmt.Errorf("Error, empty request body")
	}
	ctx = client.AddHdrsToCtx(cco.Headers, ctx)

	rsp, err := rpcFn(ctx, cco.YAMLReq, cco.GrpcCallOpts...)
	if err != nil {
		return nil, errors.Wrap(err, "Doing custom RPC using GRPC")
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return rsp, nil
}

func NewCustomPrivateAPIGrpcClient(cc *grpc.ClientConn) server.CustomClient {
	ccl := &CustomPrivateAPIGrpcClient{
		conn:       cc,
		grpcClient: NewCustomPrivateAPIClient(cc),
	}
	rpcFns := make(map[string]func(context.Context, string, ...grpc.CallOption) (proto.Message, error))
	rpcFns["CascadeDelete"] = ccl.doRPCCascadeDelete

	rpcFns["Create"] = ccl.doRPCCreate

	rpcFns["ListByNotificationPreferences"] = ccl.doRPCListByNotificationPreferences

	rpcFns["UpdateLastLogin"] = ccl.doRPCUpdateLastLogin

	ccl.rpcFns = rpcFns

	return ccl
}

// Create CustomPrivateAPI REST Client satisfying server.CustomClient
type CustomPrivateAPIRestClient struct {
	baseURL string
	client  http.Client
	// map of rpc name to its invocation
	rpcFns map[string]func(context.Context, *server.CustomCallOpts) (proto.Message, error)
}

func (c *CustomPrivateAPIRestClient) doRPCCascadeDelete(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &PrivateCascadeDeleteRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.user.PrivateCascadeDeleteRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("email", fmt.Sprintf("%v", req.Email))
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))
		q.Add("tenant_name", fmt.Sprintf("%v", req.TenantName))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &CascadeDeleteResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.user.CascadeDeleteResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomPrivateAPIRestClient) doRPCCreate(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &CreateUserRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.user.CreateUserRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("first_name", fmt.Sprintf("%v", req.FirstName))
		q.Add("last_name", fmt.Sprintf("%v", req.LastName))
		q.Add("namespace_access", fmt.Sprintf("%v", req.NamespaceAccess))
		q.Add("tenant_id", fmt.Sprintf("%v", req.TenantId))
		q.Add("user_email", fmt.Sprintf("%v", req.UserEmail))
		for _, item := range req.UserGroupNames {
			q.Add("user_group_names", fmt.Sprintf("%v", item))
		}

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &CreateUserResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.user.CreateUserResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomPrivateAPIRestClient) doRPCListByNotificationPreferences(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &ListByNotifPrefRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.user.ListByNotifPrefRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("preference_choice", fmt.Sprintf("%v", req.PreferenceChoice))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &ListByNotifPrefResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.user.ListByNotifPrefResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomPrivateAPIRestClient) doRPCUpdateLastLogin(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &LastLoginUpdateRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.user.LastLoginUpdateRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("last_login_timestamp", fmt.Sprintf("%v", req.LastLoginTimestamp))
		q.Add("tenant", fmt.Sprintf("%v", req.Tenant))
		q.Add("user", fmt.Sprintf("%v", req.User))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &LastLoginUpdateResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.user.LastLoginUpdateResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomPrivateAPIRestClient) DoRPC(ctx context.Context, rpc string, opts ...server.CustomCallOpt) (proto.Message, error) {
	rpcFn, exists := c.rpcFns[rpc]
	if !exists {
		return nil, fmt.Errorf("Error, no such rpc %s", rpc)
	}
	cco := server.NewCustomCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	rsp, err := rpcFn(ctx, cco)
	if err != nil {
		return nil, errors.Wrap(err, "Doing custom RPC using Rest")
	}
	return rsp, nil
}

func NewCustomPrivateAPIRestClient(baseURL string, hc http.Client) server.CustomClient {
	ccl := &CustomPrivateAPIRestClient{
		baseURL: baseURL,
		client:  hc,
	}

	rpcFns := make(map[string]func(context.Context, *server.CustomCallOpts) (proto.Message, error))
	rpcFns["CascadeDelete"] = ccl.doRPCCascadeDelete

	rpcFns["Create"] = ccl.doRPCCreate

	rpcFns["ListByNotificationPreferences"] = ccl.doRPCListByNotificationPreferences

	rpcFns["UpdateLastLogin"] = ccl.doRPCUpdateLastLogin

	ccl.rpcFns = rpcFns

	return ccl
}

// Create customPrivateAPIInprocClient

// INPROC Client (satisfying CustomPrivateAPIClient interface)
type customPrivateAPIInprocClient struct {
	CustomPrivateAPIServer
}

func (c *customPrivateAPIInprocClient) CascadeDelete(ctx context.Context, in *PrivateCascadeDeleteRequest, opts ...grpc.CallOption) (*CascadeDeleteResponse, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.user.CustomPrivateAPI.CascadeDelete")
	return c.CustomPrivateAPIServer.CascadeDelete(ctx, in)
}
func (c *customPrivateAPIInprocClient) Create(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.user.CustomPrivateAPI.Create")
	return c.CustomPrivateAPIServer.Create(ctx, in)
}
func (c *customPrivateAPIInprocClient) ListByNotificationPreferences(ctx context.Context, in *ListByNotifPrefRequest, opts ...grpc.CallOption) (*ListByNotifPrefResponse, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.user.CustomPrivateAPI.ListByNotificationPreferences")
	return c.CustomPrivateAPIServer.ListByNotificationPreferences(ctx, in)
}
func (c *customPrivateAPIInprocClient) UpdateLastLogin(ctx context.Context, in *LastLoginUpdateRequest, opts ...grpc.CallOption) (*LastLoginUpdateResponse, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.user.CustomPrivateAPI.UpdateLastLogin")
	return c.CustomPrivateAPIServer.UpdateLastLogin(ctx, in)
}

func NewCustomPrivateAPIInprocClient(svc svcfw.Service) CustomPrivateAPIClient {
	return &customPrivateAPIInprocClient{CustomPrivateAPIServer: NewCustomPrivateAPIServer(svc)}
}

// RegisterGwCustomPrivateAPIHandler registers with grpc-gw with an inproc-client backing so that
// rest to grpc happens without a grpc.Dial (thus avoiding additional certs for mTLS)
func RegisterGwCustomPrivateAPIHandler(ctx context.Context, mux *runtime.ServeMux, svc interface{}) error {
	s, ok := svc.(svcfw.Service)
	if !ok {
		return fmt.Errorf("svc is not svcfw.Service")
	}
	return RegisterCustomPrivateAPIHandlerClient(ctx, mux, NewCustomPrivateAPIInprocClient(s))
}

// Create customPrivateAPISrv

// SERVER (satisfying CustomPrivateAPIServer interface)
type customPrivateAPISrv struct {
	svc svcfw.Service
}

func (s *customPrivateAPISrv) CascadeDelete(ctx context.Context, in *PrivateCascadeDeleteRequest) (*CascadeDeleteResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.user.CustomPrivateAPI")
	cah, ok := ah.(CustomPrivateAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomPrivateAPIServer", ah)
	}

	var (
		rsp *CascadeDeleteResponse
		err error
	)

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.user.CustomPrivateAPI.CascadeDelete"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.CascadeDelete(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	return rsp, nil
}
func (s *customPrivateAPISrv) Create(ctx context.Context, in *CreateUserRequest) (*CreateUserResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.user.CustomPrivateAPI")
	cah, ok := ah.(CustomPrivateAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomPrivateAPIServer", ah)
	}

	var (
		rsp *CreateUserResponse
		err error
	)

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.user.CustomPrivateAPI.Create"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.Create(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	return rsp, nil
}
func (s *customPrivateAPISrv) ListByNotificationPreferences(ctx context.Context, in *ListByNotifPrefRequest) (*ListByNotifPrefResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.user.CustomPrivateAPI")
	cah, ok := ah.(CustomPrivateAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomPrivateAPIServer", ah)
	}

	var (
		rsp *ListByNotifPrefResponse
		err error
	)

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.user.CustomPrivateAPI.ListByNotificationPreferences"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.ListByNotificationPreferences(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	return rsp, nil
}
func (s *customPrivateAPISrv) UpdateLastLogin(ctx context.Context, in *LastLoginUpdateRequest) (*LastLoginUpdateResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.user.CustomPrivateAPI")
	cah, ok := ah.(CustomPrivateAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomPrivateAPIServer", ah)
	}

	var (
		rsp *LastLoginUpdateResponse
		err error
	)

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.user.CustomPrivateAPI.UpdateLastLogin"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.UpdateLastLogin(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	return rsp, nil
}

func NewCustomPrivateAPIServer(svc svcfw.Service) CustomPrivateAPIServer {
	return &customPrivateAPISrv{svc: svc}
}

var CustomPrivateAPISwaggerJSON string = `{
    "swagger": "2.0",
    "info": {
        "title": "User Custom Private API",
        "description": "Custom private APIs for user management",
        "version": "version not set"
    },
    "schemes": [
        "http",
        "https"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "tags": [],
    "paths": {
        "/ves.io.schema/introspect/restricted/read/users/list-by-notification-preferences": {
            "post": {
                "summary": "List user based on selected notification preference",
                "description": "It returns users based by their selected notification preference.",
                "operationId": "ves.io.schema.user.CustomPrivateAPI.ListByNotificationPreferences",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/userListByNotifPrefResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/userListByNotifPrefRequest"
                        }
                    }
                ],
                "tags": [
                    "CustomPrivateAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-user-customprivateapi-listbynotificationpreferences"
                },
                "x-ves-proto-rpc": "ves.io.schema.user.CustomPrivateAPI.ListByNotificationPreferences"
            },
            "x-displayname": "Custom Private API",
            "x-ves-proto-service": "ves.io.schema.user.CustomPrivateAPI",
            "x-ves-proto-service-type": "CUSTOM_PRIVATE"
        },
        "/ves.io.schema/introspect/restricted/write/namespaces/system/users": {
            "post": {
                "summary": "Create User",
                "description": "Create creates a user and namespace roles binding for this user",
                "operationId": "ves.io.schema.user.CustomPrivateAPI.Create",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/userCreateUserResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/userCreateUserRequest"
                        }
                    }
                ],
                "tags": [
                    "CustomPrivateAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-user-customprivateapi-create"
                },
                "x-ves-proto-rpc": "ves.io.schema.user.CustomPrivateAPI.Create"
            },
            "x-displayname": "Custom Private API",
            "x-ves-proto-service": "ves.io.schema.user.CustomPrivateAPI",
            "x-ves-proto-service-type": "CUSTOM_PRIVATE"
        },
        "/ves.io.schema/introspect/write/namespaces/{namespace}/users/cascade_delete": {
            "post": {
                "summary": "Delete User and Related Objects",
                "description": "CascadeDelete deletes the user and associated namespace roles for this user.\nUse this only if the user and its referenced objects need to be wiped out altogether.\nNote: users will always be in the system namespace.",
                "operationId": "ves.io.schema.user.CustomPrivateAPI.CascadeDelete",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/userCascadeDeleteResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "Namespace\n\nx-example: \"value\"\nValue of namespace is always \"system\"",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/userPrivateCascadeDeleteRequest"
                        }
                    }
                ],
                "tags": [
                    "CustomPrivateAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-user-customprivateapi-cascadedelete"
                },
                "x-ves-proto-rpc": "ves.io.schema.user.CustomPrivateAPI.CascadeDelete"
            },
            "x-displayname": "Custom Private API",
            "x-ves-proto-service": "ves.io.schema.user.CustomPrivateAPI",
            "x-ves-proto-service-type": "CUSTOM_PRIVATE"
        },
        "/ves.io.schema/introspect/write/private/custom/namespaces/system/users/update_last_login": {
            "post": {
                "summary": "Update Last Login",
                "description": "API to update last login timestamp of user",
                "operationId": "ves.io.schema.user.CustomPrivateAPI.UpdateLastLogin",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/userLastLoginUpdateResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/userLastLoginUpdateRequest"
                        }
                    }
                ],
                "tags": [
                    "CustomPrivateAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-user-customprivateapi-updatelastlogin"
                },
                "x-ves-proto-rpc": "ves.io.schema.user.CustomPrivateAPI.UpdateLastLogin"
            },
            "x-displayname": "Custom Private API",
            "x-ves-proto-service": "ves.io.schema.user.CustomPrivateAPI",
            "x-ves-proto-service-type": "CUSTOM_PRIVATE"
        }
    },
    "definitions": {
        "schemaNamespaceAccessType": {
            "type": "object",
            "description": "Access info in the namespaces for the entity",
            "title": "Namespace Access",
            "x-displayname": "Namespace Access",
            "x-ves-proto-message": "ves.io.schema.NamespaceAccessType",
            "properties": {
                "namespace_role_map": {
                    "type": "object",
                    "description": " List of all the roles for the entity in the namespaces\n\nExample: - '\u003cnamespace\u003e [\u003croles\u003e]'-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.map.keys.string.max_len: 256\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Namespace Role Map",
                    "x-displayname": "Namespace Role Map",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.map.keys.string.max_len": "256",
                        "ves.io.schema.rules.message.required": "true"
                    }
                }
            }
        },
        "schemaRoleListType": {
            "type": "object",
            "description": "x-displayName: \"Role List\"\nRole list",
            "title": "List of Roles",
            "properties": {
                "names": {
                    "type": "array",
                    "description": "x-displayName: \"Roles List\"\nx-example: [\"ves-io-monitor-role\", \"ves-io-uam-admin-role\"]\nx-required\nList of all the roles",
                    "title": "Roles List",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "schemaSyncMode": {
            "type": "string",
            "description": "Sync mode is to specify where the user details are being synced from.\n\n - SELF: Self\nSystem managed user.\n - SCIM: SCIM\nSCIM synced user. Full user life cycle is managed by the SCIM provider.",
            "title": "Sync Mode",
            "enum": [
                "SELF",
                "SCIM"
            ],
            "default": "SELF",
            "x-displayname": "Sync Mode",
            "x-ves-proto-enum": "ves.io.schema.SyncMode"
        },
        "userCascadeDeleteItemType": {
            "type": "object",
            "description": "CascadeDeleteItemType contains details of object that was handled as part of cascade delete\nof user and whether it was successfully deleted",
            "title": "CascadeDeleteItemType",
            "x-displayname": "Cascade Deletion of User and Associated Namespace Roles",
            "x-ves-proto-message": "ves.io.schema.user.CascadeDeleteItemType",
            "properties": {
                "error_message": {
                    "type": "string",
                    "description": " informative error message about the success or failure of the object's deletion response\n\nExample: - \"value\"-",
                    "title": "error message",
                    "x-displayname": "Error Message",
                    "x-ves-example": "value"
                },
                "object_name": {
                    "type": "string",
                    "description": " Name of the object\n\nExample: - \"value\"-",
                    "title": "object's name",
                    "x-displayname": "Object Name",
                    "x-ves-example": "value"
                },
                "object_type": {
                    "type": "string",
                    "description": " The type of the object\n\nExample: - \"value\"-",
                    "title": "object's type",
                    "x-displayname": "Object Type",
                    "x-ves-example": "value"
                },
                "object_uid": {
                    "type": "string",
                    "description": " The uid of the object\n\nExample: - \"value\"-",
                    "title": "object's uid",
                    "x-displayname": "Object Uid",
                    "x-ves-example": "value"
                }
            }
        },
        "userCascadeDeleteResponse": {
            "type": "object",
            "description": "CascadeDeleteResponse contains a list of user objects that were deleted\nand possibly any errors when attempting to delete those objects.",
            "title": "CascadeDeleteResponse",
            "x-displayname": "Delete Response for the User and Associated Namespace Roles",
            "x-ves-proto-message": "ves.io.schema.user.CascadeDeleteResponse",
            "properties": {
                "delete_ok": {
                    "type": "boolean",
                    "description": " status of the deleted objects. \n \"true\" value indicates that the operation had been successful for all the objects.\n \"false\" value indicates that at least one of the delete operations had been unsuccessful.\n\nExample: - \"true\"-",
                    "title": "delete_ok",
                    "format": "boolean",
                    "x-displayname": "Delete Ok",
                    "x-ves-example": "true"
                },
                "items": {
                    "type": "array",
                    "description": " The objects deleted for the specific user",
                    "title": "items",
                    "items": {
                        "$ref": "#/definitions/userCascadeDeleteItemType"
                    },
                    "x-displayname": "Items"
                }
            }
        },
        "userCreateUserRequest": {
            "type": "object",
            "description": "Allows creation of a user along with their roles in namespaces.",
            "title": "CreateUserRequest",
            "x-displayname": "Create User Request",
            "x-ves-proto-message": "ves.io.schema.user.CreateUserRequest",
            "properties": {
                "first_name": {
                    "type": "string",
                    "description": " User's first name\n\nExample: - \"Dan\"-",
                    "title": "first name",
                    "x-displayname": "First Name",
                    "x-ves-example": "Dan"
                },
                "last_name": {
                    "type": "string",
                    "description": " User's last name\n\nExample: - \"Brown\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.min_len: 1\n",
                    "title": "last name",
                    "minLength": 1,
                    "x-displayname": "Last Name",
                    "x-ves-example": "Brown",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.min_len": "1"
                    }
                },
                "namespace_access": {
                    "description": " List of directly attached access type that the user has for each namespace.",
                    "title": "Namespace Access Type roles",
                    "$ref": "#/definitions/schemaNamespaceAccessType",
                    "x-displayname": "Namespace Accesss Type"
                },
                "tenant_id": {
                    "type": "string",
                    "description": " Id of the tenant where we need to add the user.\n\nExample: - \"volterra-kjrnplcw\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.min_len: 1\n",
                    "title": "Tenant Id",
                    "minLength": 1,
                    "x-displayname": "Tenant Id",
                    "x-ves-example": "volterra-kjrnplcw",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.min_len": "1"
                    }
                },
                "user_email": {
                    "type": "string",
                    "description": " user's email\n\nExample: - \"user1@company.com\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.email: true\n  ves.io.schema.rules.string.min_len: 1\n",
                    "title": "user email",
                    "minLength": 1,
                    "x-displayname": "Email Address",
                    "x-ves-example": "user1@company.com",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.email": "true",
                        "ves.io.schema.rules.string.min_len": "1"
                    }
                },
                "user_group_names": {
                    "type": "array",
                    "description": " Group list must be associated to this user.\n\nExample: - \"[\"dev-group-1\"]\"-\n\nValidation Rules:\n  ves.io.schema.rules.map.keys.string.ves_object_name: true\n",
                    "title": "UserGroups",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "User Groups",
                    "x-ves-example": "[\"dev-group-1\"]",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.map.keys.string.ves_object_name": "true"
                    }
                }
            }
        },
        "userCreateUserResponse": {
            "type": "object",
            "description": "Response of the create user private api",
            "title": "CreateUserResponse",
            "x-displayname": "Create User Response",
            "x-ves-proto-message": "ves.io.schema.user.CreateUserResponse",
            "properties": {
                "domain_owner": {
                    "type": "boolean",
                    "description": " By default the first user who registered or signed up the associated Tenant is the domain owner and other created users can be promoted later.\n User created via signup flow will have this value set to true.\n Few restrictions apply to this user w.r.t role update and deletion.\n\nExample: - \"true\"-",
                    "title": "Domain Owner",
                    "format": "boolean",
                    "x-displayname": "Domain Owner",
                    "x-ves-example": "true"
                },
                "idm_type": {
                    "description": " Type of the identity management who is managing this user.",
                    "title": "IDM Type",
                    "$ref": "#/definitions/userIdmType",
                    "x-displayname": "Identity Management Type"
                },
                "sync_mode": {
                    "description": " Denotes if this is an externally managed entity imported into UAM by SCIM protocol, or self managed.\n\nExample: - \"self\"-",
                    "title": "Sync Mode",
                    "$ref": "#/definitions/schemaSyncMode",
                    "x-displayname": "Sync Mode",
                    "x-ves-example": "self"
                },
                "tenant_id": {
                    "type": "string",
                    "description": " Id of the tenant where we added the user.\n\nExample: - \"volterra-kjrnplcw\"-",
                    "title": "Tenant Id",
                    "x-displayname": "Tenant Id",
                    "x-ves-example": "volterra-kjrnplcw"
                },
                "user_email": {
                    "type": "string",
                    "description": " user's email\n\nExample: - \"abc@d.com\"-",
                    "title": "USER EMAIL",
                    "x-displayname": "User Email",
                    "x-ves-example": "abc@d.com"
                },
                "user_group_names": {
                    "type": "array",
                    "title": "UserGroupNames",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "User Group Names"
                },
                "user_type": {
                    "description": " type of the user",
                    "title": "UserType",
                    "$ref": "#/definitions/userUserType",
                    "x-displayname": "User Type"
                }
            }
        },
        "userIdmType": {
            "type": "string",
            "description": "IdmType is to identify who is managing the user.\n\n - SSO: SSO User\nExternally managed Single Sign On based user imported into UAM.\n - VOLTERRA_MANAGED: F5XC Managed Local user\nF5XC managed local user. Full user life cycle is managed by volterra UAM and Identity.\n - UNDEFINED: Undefined\nUndefined IDM type",
            "title": "IDM Type",
            "enum": [
                "SSO",
                "VOLTERRA_MANAGED",
                "UNDEFINED"
            ],
            "default": "SSO",
            "x-displayname": "Identity Management Type",
            "x-ves-proto-enum": "ves.io.schema.user.IdmType"
        },
        "userLastLoginUpdateRequest": {
            "type": "object",
            "description": "Request to update user login timestamp.",
            "title": "LastLoginUpdateRequest",
            "x-displayname": "Last Login Update Request",
            "x-ves-proto-message": "ves.io.schema.user.LastLoginUpdateRequest",
            "properties": {
                "last_login_timestamp": {
                    "type": "string",
                    "description": " Last successful login timestamp of the user .",
                    "title": "last_login_timestamp",
                    "format": "date-time",
                    "x-displayname": "Last Login Timestamp"
                },
                "tenant": {
                    "type": "string",
                    "description": " Tenant ID of the tenant user belongs to.\n\nExample: - \"company1-as432s\"-",
                    "title": "tenant",
                    "x-displayname": "Tenant",
                    "x-ves-example": "company1-as432s"
                },
                "user": {
                    "type": "string",
                    "description": " User ID of the user. typically email id\n\nExample: - \"user@company1.com\"-",
                    "title": "user",
                    "x-displayname": "User",
                    "x-ves-example": "user@company1.com"
                }
            }
        },
        "userLastLoginUpdateResponse": {
            "type": "object",
            "title": "LastLoginUpdateResponse",
            "x-displayname": "Last Login Update Response",
            "x-ves-proto-message": "ves.io.schema.user.LastLoginUpdateResponse"
        },
        "userListByNotifPrefRequest": {
            "type": "object",
            "description": "Request to get the list of users based on notification preferences.",
            "title": "ListByNotifPrefRequest",
            "x-displayname": "List users by their selected preferences",
            "x-ves-oneof-field-preference_choice": "[\"preference\"]",
            "x-ves-proto-message": "ves.io.schema.user.ListByNotifPrefRequest",
            "properties": {
                "preference": {
                    "type": "string",
                    "description": "Exclusive with []\n\n\nValidation Rules:\n  ves.io.schema.rules.string.not_empty: true\n",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.not_empty": "true"
                    }
                }
            }
        },
        "userListByNotifPrefResponse": {
            "type": "object",
            "description": "List users by notification preference response.",
            "title": "ListByNotifPrefResponse",
            "x-displayname": "List users by notification preference response",
            "x-ves-proto-message": "ves.io.schema.user.ListByNotifPrefResponse",
            "properties": {
                "items": {
                    "type": "array",
                    "description": " List of users email address.",
                    "title": "ListByNotifPrefResponseItem",
                    "items": {
                        "$ref": "#/definitions/userListByNotifPrefResponseItem"
                    },
                    "x-displayname": "List of users email address"
                }
            }
        },
        "userListByNotifPrefResponseItem": {
            "type": "object",
            "description": "users email address info.",
            "title": "ListByNotifPrefResponseItem",
            "x-displayname": "users email address info",
            "x-ves-proto-message": "ves.io.schema.user.ListByNotifPrefResponseItem",
            "properties": {
                "email": {
                    "type": "string",
                    "description": " email of the user.\n\nExample: - \"value\"-",
                    "title": "email",
                    "x-displayname": "email",
                    "x-ves-example": "value"
                },
                "first_name": {
                    "type": "string",
                    "description": " first name of the user.\n\nExample: - \"value\"-",
                    "title": "first_name",
                    "x-displayname": "first_name",
                    "x-ves-example": "value"
                },
                "last_name": {
                    "type": "string",
                    "description": " last name of the user.\n\nExample: - \"value\"-",
                    "title": "last_name",
                    "x-displayname": "last_name",
                    "x-ves-example": "value"
                }
            }
        },
        "userPrivateCascadeDeleteRequest": {
            "type": "object",
            "description": "PrivateCascadeDeleteRequest is the request to delete the user along with the associated namespace role objects.",
            "title": "PrivateCascadeDeleteRequest",
            "x-displayname": "Delete the User and Associated Namespace Roles",
            "x-ves-proto-message": "ves.io.schema.user.PrivateCascadeDeleteRequest",
            "properties": {
                "email": {
                    "type": "string",
                    "description": " email of the user requesting for\n\nExample: - \"value\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "email of the user",
                    "x-displayname": "Email",
                    "x-ves-example": "value",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "namespace": {
                    "type": "string",
                    "description": " Value of namespace is always \"system\"\n\nExample: - \"value\"-",
                    "title": "Namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "value"
                },
                "tenant_name": {
                    "type": "string",
                    "description": " User deletion will be executed within this tenant.\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Tenant name",
                    "x-displayname": "Tenant name",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                }
            }
        },
        "userUserType": {
            "type": "string",
            "description": "UserType is to identify the type of user\n\n - USER: User\nRegular User\n - SERVICE: Service User\nUser for accessing only APIs/services\n - DEBUG: Debug\nUser which was created by tenant admin for volterra-support team.",
            "title": "UserType",
            "enum": [
                "USER",
                "SERVICE",
                "DEBUG"
            ],
            "default": "USER",
            "x-displayname": "User Type",
            "x-ves-proto-enum": "ves.io.schema.user.UserType"
        }
    },
    "x-displayname": "User custom private API",
    "x-ves-proto-file": "ves.io/schema/user/private_customapi.proto"
}`

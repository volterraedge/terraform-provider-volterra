// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package user

import (
	"bytes"
	"context"
	"fmt"
	io "io"
	"net/http"
	"strings"

	"github.com/gogo/protobuf/proto"
	"github.com/grpc-ecosystem/grpc-gateway/runtime"
	"google.golang.org/grpc"

	"gopkg.volterra.us/stdlib/client"
	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/errors"
	"gopkg.volterra.us/stdlib/server"
	"gopkg.volterra.us/stdlib/svcfw"
)

var (
	_ = fmt.Sprintf("dummy for fmt import use")
)

// Create CustomAPI GRPC Client satisfying server.CustomClient
type CustomAPIGrpcClient struct {
	conn       *grpc.ClientConn
	grpcClient CustomAPIClient
	// map of rpc name to its invocation
	rpcFns map[string]func(context.Context, string, ...grpc.CallOption) (proto.Message, error)
}

func (c *CustomAPIGrpcClient) doRPCAcceptTOS(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &AcceptTOSRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.user.AcceptTOSRequest", yamlReq)
	}
	rsp, err := c.grpcClient.AcceptTOS(ctx, req, opts...)
	return rsp, err
}

func (c *CustomAPIGrpcClient) doRPCAddUserToGroup(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &UserGroupRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.user.UserGroupRequest", yamlReq)
	}
	rsp, err := c.grpcClient.AddUserToGroup(ctx, req, opts...)
	return rsp, err
}

func (c *CustomAPIGrpcClient) doRPCAssignRole(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &AssignRoleRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.user.AssignRoleRequest", yamlReq)
	}
	rsp, err := c.grpcClient.AssignRole(ctx, req, opts...)
	return rsp, err
}

func (c *CustomAPIGrpcClient) doRPCCascadeDelete(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &CascadeDeleteRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.user.CascadeDeleteRequest", yamlReq)
	}
	rsp, err := c.grpcClient.CascadeDelete(ctx, req, opts...)
	return rsp, err
}

func (c *CustomAPIGrpcClient) doRPCCreate(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &UserRoleRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.user.UserRoleRequest", yamlReq)
	}
	rsp, err := c.grpcClient.Create(ctx, req, opts...)
	return rsp, err
}

func (c *CustomAPIGrpcClient) doRPCGet(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &GetUserRoleRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.user.GetUserRoleRequest", yamlReq)
	}
	rsp, err := c.grpcClient.Get(ctx, req, opts...)
	return rsp, err
}

func (c *CustomAPIGrpcClient) doRPCGetTOS(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &GetTOSRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.user.GetTOSRequest", yamlReq)
	}
	rsp, err := c.grpcClient.GetTOS(ctx, req, opts...)
	return rsp, err
}

func (c *CustomAPIGrpcClient) doRPCList(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &ListUserRoleRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.user.ListUserRoleRequest", yamlReq)
	}
	rsp, err := c.grpcClient.List(ctx, req, opts...)
	return rsp, err
}

func (c *CustomAPIGrpcClient) doRPCRemoveUserFromGroup(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &UserGroupRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.user.UserGroupRequest", yamlReq)
	}
	rsp, err := c.grpcClient.RemoveUserFromGroup(ctx, req, opts...)
	return rsp, err
}

func (c *CustomAPIGrpcClient) doRPCReplace(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &UserRoleRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.user.UserRoleRequest", yamlReq)
	}
	rsp, err := c.grpcClient.Replace(ctx, req, opts...)
	return rsp, err
}

func (c *CustomAPIGrpcClient) doRPCResetPassword(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &Empty{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.user.Empty", yamlReq)
	}
	rsp, err := c.grpcClient.ResetPassword(ctx, req, opts...)
	return rsp, err
}

func (c *CustomAPIGrpcClient) doRPCResetPasswordByAdmin(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &ResetPasswordByAdminRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.user.ResetPasswordByAdminRequest", yamlReq)
	}
	rsp, err := c.grpcClient.ResetPasswordByAdmin(ctx, req, opts...)
	return rsp, err
}

func (c *CustomAPIGrpcClient) doRPCSendPasswordEmail(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &SendPasswordEmailRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.user.SendPasswordEmailRequest", yamlReq)
	}
	rsp, err := c.grpcClient.SendPasswordEmail(ctx, req, opts...)
	return rsp, err
}

func (c *CustomAPIGrpcClient) doRPCSyncUser(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &Empty{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.user.Empty", yamlReq)
	}
	rsp, err := c.grpcClient.SyncUser(ctx, req, opts...)
	return rsp, err
}

func (c *CustomAPIGrpcClient) DoRPC(ctx context.Context, rpc string, opts ...server.CustomCallOpt) (proto.Message, error) {
	rpcFn, exists := c.rpcFns[rpc]
	if !exists {
		return nil, fmt.Errorf("Error, no such rpc %s", rpc)
	}
	cco := server.NewCustomCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	if cco.YAMLReq == "" {
		return nil, fmt.Errorf("Error, empty request body")
	}
	ctx = client.AddHdrsToCtx(cco.Headers, ctx)

	rsp, err := rpcFn(ctx, cco.YAMLReq, cco.GrpcCallOpts...)
	if err != nil {
		return nil, errors.Wrap(err, "Doing custom RPC using GRPC")
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return rsp, nil
}

func NewCustomAPIGrpcClient(cc *grpc.ClientConn) server.CustomClient {
	ccl := &CustomAPIGrpcClient{
		conn:       cc,
		grpcClient: NewCustomAPIClient(cc),
	}
	rpcFns := make(map[string]func(context.Context, string, ...grpc.CallOption) (proto.Message, error))
	rpcFns["AcceptTOS"] = ccl.doRPCAcceptTOS

	rpcFns["AddUserToGroup"] = ccl.doRPCAddUserToGroup

	rpcFns["AssignRole"] = ccl.doRPCAssignRole

	rpcFns["CascadeDelete"] = ccl.doRPCCascadeDelete

	rpcFns["Create"] = ccl.doRPCCreate

	rpcFns["Get"] = ccl.doRPCGet

	rpcFns["GetTOS"] = ccl.doRPCGetTOS

	rpcFns["List"] = ccl.doRPCList

	rpcFns["RemoveUserFromGroup"] = ccl.doRPCRemoveUserFromGroup

	rpcFns["Replace"] = ccl.doRPCReplace

	rpcFns["ResetPassword"] = ccl.doRPCResetPassword

	rpcFns["ResetPasswordByAdmin"] = ccl.doRPCResetPasswordByAdmin

	rpcFns["SendPasswordEmail"] = ccl.doRPCSendPasswordEmail

	rpcFns["SyncUser"] = ccl.doRPCSyncUser

	ccl.rpcFns = rpcFns

	return ccl
}

// Create CustomAPI REST Client satisfying server.CustomClient
type CustomAPIRestClient struct {
	baseURL string
	client  http.Client
	// map of rpc name to its invocation
	rpcFns map[string]func(context.Context, *server.CustomCallOpts) (proto.Message, error)
}

func (c *CustomAPIRestClient) doRPCAcceptTOS(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &AcceptTOSRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.user.AcceptTOSRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))
		q.Add("tos_accepted", fmt.Sprintf("%v", req.TosAccepted))
		q.Add("tos_accepted_at", fmt.Sprintf("%v", req.TosAcceptedAt))
		q.Add("tos_version", fmt.Sprintf("%v", req.TosVersion))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &AcceptTOSResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.user.AcceptTOSResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomAPIRestClient) doRPCAddUserToGroup(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &UserGroupRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.user.UserGroupRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		for _, item := range req.GroupNames {
			q.Add("group_names", fmt.Sprintf("%v", item))
		}
		q.Add("username", fmt.Sprintf("%v", req.Username))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &UserGroupResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.user.UserGroupResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomAPIRestClient) doRPCAssignRole(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &AssignRoleRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.user.AssignRoleRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))
		q.Add("namespaces_role", fmt.Sprintf("%v", req.NamespacesRole))
		for _, item := range req.Username {
			q.Add("username", fmt.Sprintf("%v", item))
		}

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &Empty{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.user.Empty", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomAPIRestClient) doRPCCascadeDelete(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &CascadeDeleteRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.user.CascadeDeleteRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("email", fmt.Sprintf("%v", req.Email))
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &CascadeDeleteResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.user.CascadeDeleteResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomAPIRestClient) doRPCCreate(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &UserRoleRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.user.UserRoleRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("email", fmt.Sprintf("%v", req.Email))
		q.Add("first_name", fmt.Sprintf("%v", req.FirstName))
		for _, item := range req.GroupNames {
			q.Add("group_names", fmt.Sprintf("%v", item))
		}
		q.Add("idm_type", fmt.Sprintf("%v", req.IdmType))
		q.Add("last_name", fmt.Sprintf("%v", req.LastName))
		q.Add("name", fmt.Sprintf("%v", req.Name))
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))
		for _, item := range req.NamespaceRoles {
			q.Add("namespace_roles", fmt.Sprintf("%v", item))
		}
		q.Add("type", fmt.Sprintf("%v", req.Type))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &Object{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.user.Object", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomAPIRestClient) doRPCGet(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &GetUserRoleRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.user.GetUserRoleRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &GetUserRoleResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.user.GetUserRoleResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomAPIRestClient) doRPCGetTOS(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &GetTOSRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.user.GetTOSRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &GetTOSResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.user.GetTOSResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomAPIRestClient) doRPCList(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &ListUserRoleRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.user.ListUserRoleRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &ListUserRoleResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.user.ListUserRoleResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomAPIRestClient) doRPCRemoveUserFromGroup(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &UserGroupRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.user.UserGroupRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		for _, item := range req.GroupNames {
			q.Add("group_names", fmt.Sprintf("%v", item))
		}
		q.Add("username", fmt.Sprintf("%v", req.Username))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &UserGroupResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.user.UserGroupResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomAPIRestClient) doRPCReplace(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &UserRoleRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.user.UserRoleRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("email", fmt.Sprintf("%v", req.Email))
		q.Add("first_name", fmt.Sprintf("%v", req.FirstName))
		for _, item := range req.GroupNames {
			q.Add("group_names", fmt.Sprintf("%v", item))
		}
		q.Add("idm_type", fmt.Sprintf("%v", req.IdmType))
		q.Add("last_name", fmt.Sprintf("%v", req.LastName))
		q.Add("name", fmt.Sprintf("%v", req.Name))
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))
		for _, item := range req.NamespaceRoles {
			q.Add("namespace_roles", fmt.Sprintf("%v", item))
		}
		q.Add("type", fmt.Sprintf("%v", req.Type))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &Object{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.user.Object", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomAPIRestClient) doRPCResetPassword(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &Empty{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.user.Empty: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &Empty{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.user.Empty", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomAPIRestClient) doRPCResetPasswordByAdmin(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &ResetPasswordByAdminRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.user.ResetPasswordByAdminRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("email", fmt.Sprintf("%v", req.Email))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &Empty{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.user.Empty", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomAPIRestClient) doRPCSendPasswordEmail(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &SendPasswordEmailRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.user.SendPasswordEmailRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("email", fmt.Sprintf("%v", req.Email))
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &SendPasswordEmailResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.user.SendPasswordEmailResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomAPIRestClient) doRPCSyncUser(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &Empty{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.user.Empty: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &Empty{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.user.Empty", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomAPIRestClient) DoRPC(ctx context.Context, rpc string, opts ...server.CustomCallOpt) (proto.Message, error) {
	rpcFn, exists := c.rpcFns[rpc]
	if !exists {
		return nil, fmt.Errorf("Error, no such rpc %s", rpc)
	}
	cco := server.NewCustomCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	rsp, err := rpcFn(ctx, cco)
	if err != nil {
		return nil, errors.Wrap(err, "Doing custom RPC using Rest")
	}
	return rsp, nil
}

func NewCustomAPIRestClient(baseURL string, hc http.Client) server.CustomClient {
	ccl := &CustomAPIRestClient{
		baseURL: baseURL,
		client:  hc,
	}

	rpcFns := make(map[string]func(context.Context, *server.CustomCallOpts) (proto.Message, error))
	rpcFns["AcceptTOS"] = ccl.doRPCAcceptTOS

	rpcFns["AddUserToGroup"] = ccl.doRPCAddUserToGroup

	rpcFns["AssignRole"] = ccl.doRPCAssignRole

	rpcFns["CascadeDelete"] = ccl.doRPCCascadeDelete

	rpcFns["Create"] = ccl.doRPCCreate

	rpcFns["Get"] = ccl.doRPCGet

	rpcFns["GetTOS"] = ccl.doRPCGetTOS

	rpcFns["List"] = ccl.doRPCList

	rpcFns["RemoveUserFromGroup"] = ccl.doRPCRemoveUserFromGroup

	rpcFns["Replace"] = ccl.doRPCReplace

	rpcFns["ResetPassword"] = ccl.doRPCResetPassword

	rpcFns["ResetPasswordByAdmin"] = ccl.doRPCResetPasswordByAdmin

	rpcFns["SendPasswordEmail"] = ccl.doRPCSendPasswordEmail

	rpcFns["SyncUser"] = ccl.doRPCSyncUser

	ccl.rpcFns = rpcFns

	return ccl
}

// Create customAPIInprocClient

// INPROC Client (satisfying CustomAPIClient interface)
type customAPIInprocClient struct {
	CustomAPIServer
}

func (c *customAPIInprocClient) AcceptTOS(ctx context.Context, in *AcceptTOSRequest, opts ...grpc.CallOption) (*AcceptTOSResponse, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.user.CustomAPI.AcceptTOS")
	return c.CustomAPIServer.AcceptTOS(ctx, in)
}
func (c *customAPIInprocClient) AddUserToGroup(ctx context.Context, in *UserGroupRequest, opts ...grpc.CallOption) (*UserGroupResponse, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.user.CustomAPI.AddUserToGroup")
	return c.CustomAPIServer.AddUserToGroup(ctx, in)
}
func (c *customAPIInprocClient) AssignRole(ctx context.Context, in *AssignRoleRequest, opts ...grpc.CallOption) (*Empty, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.user.CustomAPI.AssignRole")
	return c.CustomAPIServer.AssignRole(ctx, in)
}
func (c *customAPIInprocClient) CascadeDelete(ctx context.Context, in *CascadeDeleteRequest, opts ...grpc.CallOption) (*CascadeDeleteResponse, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.user.CustomAPI.CascadeDelete")
	return c.CustomAPIServer.CascadeDelete(ctx, in)
}
func (c *customAPIInprocClient) Create(ctx context.Context, in *UserRoleRequest, opts ...grpc.CallOption) (*Object, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.user.CustomAPI.Create")
	return c.CustomAPIServer.Create(ctx, in)
}
func (c *customAPIInprocClient) Get(ctx context.Context, in *GetUserRoleRequest, opts ...grpc.CallOption) (*GetUserRoleResponse, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.user.CustomAPI.Get")
	return c.CustomAPIServer.Get(ctx, in)
}
func (c *customAPIInprocClient) GetTOS(ctx context.Context, in *GetTOSRequest, opts ...grpc.CallOption) (*GetTOSResponse, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.user.CustomAPI.GetTOS")
	return c.CustomAPIServer.GetTOS(ctx, in)
}
func (c *customAPIInprocClient) List(ctx context.Context, in *ListUserRoleRequest, opts ...grpc.CallOption) (*ListUserRoleResponse, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.user.CustomAPI.List")
	return c.CustomAPIServer.List(ctx, in)
}
func (c *customAPIInprocClient) RemoveUserFromGroup(ctx context.Context, in *UserGroupRequest, opts ...grpc.CallOption) (*UserGroupResponse, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.user.CustomAPI.RemoveUserFromGroup")
	return c.CustomAPIServer.RemoveUserFromGroup(ctx, in)
}
func (c *customAPIInprocClient) Replace(ctx context.Context, in *UserRoleRequest, opts ...grpc.CallOption) (*Object, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.user.CustomAPI.Replace")
	return c.CustomAPIServer.Replace(ctx, in)
}
func (c *customAPIInprocClient) ResetPassword(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.user.CustomAPI.ResetPassword")
	return c.CustomAPIServer.ResetPassword(ctx, in)
}
func (c *customAPIInprocClient) ResetPasswordByAdmin(ctx context.Context, in *ResetPasswordByAdminRequest, opts ...grpc.CallOption) (*Empty, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.user.CustomAPI.ResetPasswordByAdmin")
	return c.CustomAPIServer.ResetPasswordByAdmin(ctx, in)
}
func (c *customAPIInprocClient) SendPasswordEmail(ctx context.Context, in *SendPasswordEmailRequest, opts ...grpc.CallOption) (*SendPasswordEmailResponse, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.user.CustomAPI.SendPasswordEmail")
	return c.CustomAPIServer.SendPasswordEmail(ctx, in)
}
func (c *customAPIInprocClient) SyncUser(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.user.CustomAPI.SyncUser")
	return c.CustomAPIServer.SyncUser(ctx, in)
}

func NewCustomAPIInprocClient(svc svcfw.Service) CustomAPIClient {
	return &customAPIInprocClient{CustomAPIServer: NewCustomAPIServer(svc)}
}

// RegisterGwCustomAPIHandler registers with grpc-gw with an inproc-client backing so that
// rest to grpc happens without a grpc.Dial (thus avoiding additional certs for mTLS)
func RegisterGwCustomAPIHandler(ctx context.Context, mux *runtime.ServeMux, svc interface{}) error {
	s, ok := svc.(svcfw.Service)
	if !ok {
		return fmt.Errorf("svc is not svcfw.Service")
	}
	return RegisterCustomAPIHandlerClient(ctx, mux, NewCustomAPIInprocClient(s))
}

// Create customAPISrv

// SERVER (satisfying CustomAPIServer interface)
type customAPISrv struct {
	svc svcfw.Service
}

func (s *customAPISrv) AcceptTOS(ctx context.Context, in *AcceptTOSRequest) (*AcceptTOSResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.user.CustomAPI")
	cah, ok := ah.(CustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomAPIServer", ah)
	}

	var (
		rsp *AcceptTOSResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.user.AcceptTOSRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomAPI.AcceptTOS' operation on 'user'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.user.CustomAPI.AcceptTOS"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.AcceptTOS(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.user.AcceptTOSResponse", rsp)...)

	return rsp, nil
}
func (s *customAPISrv) AddUserToGroup(ctx context.Context, in *UserGroupRequest) (*UserGroupResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.user.CustomAPI")
	cah, ok := ah.(CustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomAPIServer", ah)
	}

	var (
		rsp *UserGroupResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.user.UserGroupRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomAPI.AddUserToGroup' operation on 'user'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.user.CustomAPI.AddUserToGroup"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.AddUserToGroup(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.user.UserGroupResponse", rsp)...)

	return rsp, nil
}
func (s *customAPISrv) AssignRole(ctx context.Context, in *AssignRoleRequest) (*Empty, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.user.CustomAPI")
	cah, ok := ah.(CustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomAPIServer", ah)
	}

	var (
		rsp *Empty
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.user.AssignRoleRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomAPI.AssignRole' operation on 'user'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.user.CustomAPI.AssignRole"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.AssignRole(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.user.Empty", rsp)...)

	return rsp, nil
}
func (s *customAPISrv) CascadeDelete(ctx context.Context, in *CascadeDeleteRequest) (*CascadeDeleteResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.user.CustomAPI")
	cah, ok := ah.(CustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomAPIServer", ah)
	}

	var (
		rsp *CascadeDeleteResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.user.CascadeDeleteRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomAPI.CascadeDelete' operation on 'user'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.user.CustomAPI.CascadeDelete"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.CascadeDelete(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.user.CascadeDeleteResponse", rsp)...)

	return rsp, nil
}
func (s *customAPISrv) Create(ctx context.Context, in *UserRoleRequest) (*Object, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.user.CustomAPI")
	cah, ok := ah.(CustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomAPIServer", ah)
	}

	var (
		rsp *Object
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.user.UserRoleRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomAPI.Create' operation on 'user'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.user.CustomAPI.Create"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.Create(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.user.Object", rsp)...)

	return rsp, nil
}
func (s *customAPISrv) Get(ctx context.Context, in *GetUserRoleRequest) (*GetUserRoleResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.user.CustomAPI")
	cah, ok := ah.(CustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomAPIServer", ah)
	}

	var (
		rsp *GetUserRoleResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.user.GetUserRoleRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomAPI.Get' operation on 'user'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.user.CustomAPI.Get"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.Get(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.user.GetUserRoleResponse", rsp)...)

	return rsp, nil
}
func (s *customAPISrv) GetTOS(ctx context.Context, in *GetTOSRequest) (*GetTOSResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.user.CustomAPI")
	cah, ok := ah.(CustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomAPIServer", ah)
	}

	var (
		rsp *GetTOSResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.user.GetTOSRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomAPI.GetTOS' operation on 'user'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.user.CustomAPI.GetTOS"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.GetTOS(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.user.GetTOSResponse", rsp)...)

	return rsp, nil
}
func (s *customAPISrv) List(ctx context.Context, in *ListUserRoleRequest) (*ListUserRoleResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.user.CustomAPI")
	cah, ok := ah.(CustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomAPIServer", ah)
	}

	var (
		rsp *ListUserRoleResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.user.ListUserRoleRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomAPI.List' operation on 'user'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.user.CustomAPI.List"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.List(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.user.ListUserRoleResponse", rsp)...)

	return rsp, nil
}
func (s *customAPISrv) RemoveUserFromGroup(ctx context.Context, in *UserGroupRequest) (*UserGroupResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.user.CustomAPI")
	cah, ok := ah.(CustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomAPIServer", ah)
	}

	var (
		rsp *UserGroupResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.user.UserGroupRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomAPI.RemoveUserFromGroup' operation on 'user'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.user.CustomAPI.RemoveUserFromGroup"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.RemoveUserFromGroup(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.user.UserGroupResponse", rsp)...)

	return rsp, nil
}
func (s *customAPISrv) Replace(ctx context.Context, in *UserRoleRequest) (*Object, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.user.CustomAPI")
	cah, ok := ah.(CustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomAPIServer", ah)
	}

	var (
		rsp *Object
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.user.UserRoleRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomAPI.Replace' operation on 'user'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.user.CustomAPI.Replace"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.Replace(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.user.Object", rsp)...)

	return rsp, nil
}
func (s *customAPISrv) ResetPassword(ctx context.Context, in *Empty) (*Empty, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.user.CustomAPI")
	cah, ok := ah.(CustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomAPIServer", ah)
	}

	var (
		rsp *Empty
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.user.Empty", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomAPI.ResetPassword' operation on 'user'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.user.CustomAPI.ResetPassword"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.ResetPassword(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.user.Empty", rsp)...)

	return rsp, nil
}
func (s *customAPISrv) ResetPasswordByAdmin(ctx context.Context, in *ResetPasswordByAdminRequest) (*Empty, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.user.CustomAPI")
	cah, ok := ah.(CustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomAPIServer", ah)
	}

	var (
		rsp *Empty
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.user.ResetPasswordByAdminRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomAPI.ResetPasswordByAdmin' operation on 'user'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.user.CustomAPI.ResetPasswordByAdmin"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.ResetPasswordByAdmin(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.user.Empty", rsp)...)

	return rsp, nil
}
func (s *customAPISrv) SendPasswordEmail(ctx context.Context, in *SendPasswordEmailRequest) (*SendPasswordEmailResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.user.CustomAPI")
	cah, ok := ah.(CustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomAPIServer", ah)
	}

	var (
		rsp *SendPasswordEmailResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.user.SendPasswordEmailRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomAPI.SendPasswordEmail' operation on 'user'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.user.CustomAPI.SendPasswordEmail"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.SendPasswordEmail(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.user.SendPasswordEmailResponse", rsp)...)

	return rsp, nil
}
func (s *customAPISrv) SyncUser(ctx context.Context, in *Empty) (*Empty, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.user.CustomAPI")
	cah, ok := ah.(CustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomAPIServer", ah)
	}

	var (
		rsp *Empty
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.user.Empty", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomAPI.SyncUser' operation on 'user'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.user.CustomAPI.SyncUser"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.SyncUser(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.user.Empty", rsp)...)

	return rsp, nil
}

func NewCustomAPIServer(svc svcfw.Service) CustomAPIServer {
	return &customAPISrv{svc: svc}
}

var CustomAPISwaggerJSON string = `{
    "swagger": "2.0",
    "info": {
        "title": "User management API",
        "description": "This API can be used to manage various attributes of the user like\nrole, contact information etc.",
        "version": "version not set"
    },
    "schemes": [
        "http",
        "https"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "tags": [],
    "paths": {
        "/public/custom/idm/user/sync": {
            "post": {
                "summary": "Sync user",
                "description": "In case when user created initially from identity provider we need to sync the user data.",
                "operationId": "ves.io.schema.user.CustomAPI.SyncUser",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/schemauserEmpty"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemauserEmpty"
                        }
                    }
                ],
                "tags": [
                    "CustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-user-customapi-syncuser"
                },
                "x-ves-proto-rpc": "ves.io.schema.user.CustomAPI.SyncUser"
            },
            "x-displayname": "User",
            "x-ves-proto-service": "ves.io.schema.user.CustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/custom/namespaces/system/users/group_add": {
            "put": {
                "summary": "Add user to groups",
                "description": "Assign existing user to specific groups.",
                "operationId": "ves.io.schema.user.CustomAPI.AddUserToGroup",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/userUserGroupResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/userUserGroupRequest"
                        }
                    }
                ],
                "tags": [
                    "CustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-user-customapi-addusertogroup"
                },
                "x-ves-proto-rpc": "ves.io.schema.user.CustomAPI.AddUserToGroup"
            },
            "x-displayname": "User",
            "x-ves-proto-service": "ves.io.schema.user.CustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/custom/namespaces/system/users/group_remove": {
            "put": {
                "summary": "remove user from groups",
                "description": "remove existing user from specific groups.",
                "operationId": "ves.io.schema.user.CustomAPI.RemoveUserFromGroup",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/userUserGroupResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/userUserGroupRequest"
                        }
                    }
                ],
                "tags": [
                    "CustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-user-customapi-removeuserfromgroup"
                },
                "x-ves-proto-rpc": "ves.io.schema.user.CustomAPI.RemoveUserFromGroup"
            },
            "x-displayname": "User",
            "x-ves-proto-service": "ves.io.schema.user.CustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/custom/namespaces/{namespace}/accept_tos": {
            "post": {
                "summary": "Accept TOS",
                "description": "Accept TOS updates version of accepted terms of service.",
                "operationId": "ves.io.schema.user.CustomAPI.AcceptTOS",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/userAcceptTOSResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "Namespace\n\nx-example: \"value\"\nValue of namespace is always \"system\".",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/userAcceptTOSRequest"
                        }
                    }
                ],
                "tags": [
                    "CustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-user-customapi-accepttos"
                },
                "x-ves-proto-rpc": "ves.io.schema.user.CustomAPI.AcceptTOS"
            },
            "x-displayname": "User",
            "x-ves-proto-service": "ves.io.schema.user.CustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/custom/namespaces/{namespace}/role_users": {
            "post": {
                "summary": "Assign role to User",
                "description": "AssignRole allows customers to assign a namespace/role pair to multiple users",
                "operationId": "ves.io.schema.user.CustomAPI.AssignRole",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/schemauserEmpty"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "Namespace\n\nx-example: \"system\"\nNamespace the requesting user is calling the action from",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/userAssignRoleRequest"
                        }
                    }
                ],
                "tags": [
                    "CustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-user-customapi-assignrole"
                },
                "x-ves-proto-rpc": "ves.io.schema.user.CustomAPI.AssignRole"
            },
            "x-displayname": "User",
            "x-ves-proto-service": "ves.io.schema.user.CustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/custom/namespaces/{namespace}/send_password_email": {
            "post": {
                "summary": "Send Password Email",
                "description": "SendPasswordEmail allows admin user to trigger send password email for a user to update user's password.\nDeprecated: use ResetPasswordByAdmin RPC instead",
                "operationId": "ves.io.schema.user.CustomAPI.SendPasswordEmail",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/userSendPasswordEmailResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "Namespace\n\nx-example: \"value\"\nValue of namespace is always \"system\"",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/userSendPasswordEmailRequest"
                        }
                    }
                ],
                "tags": [
                    "CustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-user-customapi-sendpasswordemail"
                },
                "x-ves-proto-rpc": "ves.io.schema.user.CustomAPI.SendPasswordEmail"
            },
            "x-displayname": "User",
            "x-ves-proto-service": "ves.io.schema.user.CustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/custom/namespaces/{namespace}/tos": {
            "get": {
                "summary": "Get TOS",
                "description": "Get TOS provides TOS version with text",
                "operationId": "ves.io.schema.user.CustomAPI.GetTOS",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/userGetTOSResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "Namespace\n\nx-example: \"value\"\nValue of namespace is always \"system\"",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    }
                ],
                "tags": [
                    "CustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-user-customapi-gettos"
                },
                "x-ves-proto-rpc": "ves.io.schema.user.CustomAPI.GetTOS"
            },
            "x-displayname": "User",
            "x-ves-proto-service": "ves.io.schema.user.CustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/custom/namespaces/{namespace}/user_roles": {
            "get": {
                "summary": "Get User and Role Assignments",
                "description": "List enumerates users and their namespace roles for this tenant",
                "operationId": "ves.io.schema.user.CustomAPI.List",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/userListUserRoleResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "Namespace\n\nx-example: \"value\"\nNamespace to use",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    }
                ],
                "tags": [
                    "CustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-user-customapi-list"
                },
                "x-ves-proto-rpc": "ves.io.schema.user.CustomAPI.List"
            },
            "post": {
                "summary": "Create User with Role Assignment",
                "description": "Create creates a user and namespace roles binding for this user",
                "operationId": "ves.io.schema.user.CustomAPI.Create",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/userObject"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "namespace\n\nx-example: \"system\"\nAll users of a tenant must be created in tenant's system namespace.",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/userUserRoleRequest"
                        }
                    }
                ],
                "tags": [
                    "CustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-user-customapi-create"
                },
                "x-ves-proto-rpc": "ves.io.schema.user.CustomAPI.Create"
            },
            "put": {
                "summary": "Update User and Role Assignments",
                "description": "Replace updates user and namespace roles for this user",
                "operationId": "ves.io.schema.user.CustomAPI.Replace",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/userObject"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "namespace\n\nx-example: \"system\"\nAll users of a tenant must be created in tenant's system namespace.",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/userUserRoleRequest"
                        }
                    }
                ],
                "tags": [
                    "CustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-user-customapi-replace"
                },
                "x-ves-proto-rpc": "ves.io.schema.user.CustomAPI.Replace"
            },
            "x-displayname": "User",
            "x-ves-proto-service": "ves.io.schema.user.CustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/custom/namespaces/{namespace}/user_roles/{name}": {
            "post": {
                "summary": "Update User and Role Assignments",
                "description": "Replace updates user and namespace roles for this user",
                "operationId": "ves.io.schema.user.CustomAPI.Replace",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/userObject"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "namespace\n\nx-example: \"system\"\nAll users of a tenant must be created in tenant's system namespace.",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "name",
                        "description": "Username\n\nx-example: \"user1@company.com\"\nThis is an optional field meant to be used as username.\nInside Volterra's UAM, email is already treated as user's username\nand as best practice, recommendation is to keep this same as email field.\nif not specified, this field will be set same as email field.",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Username"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/userUserRoleRequest"
                        }
                    }
                ],
                "tags": [
                    "CustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-user-customapi-replace"
                },
                "x-ves-proto-rpc": "ves.io.schema.user.CustomAPI.Replace"
            },
            "x-displayname": "User",
            "x-ves-proto-service": "ves.io.schema.user.CustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/custom/namespaces/{namespace}/users/cascade_delete": {
            "post": {
                "summary": "Delete User and Related Objects",
                "description": "CascadeDelete deletes the user and associated namespace roles for this user.\nUse this only if the user and its referenced objects need to be wiped out altogether.\nNote: users will always be in the system namespace.",
                "operationId": "ves.io.schema.user.CustomAPI.CascadeDelete",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/userCascadeDeleteResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "Namespace\n\nx-example: \"value\"\nValue of namespace is always \"system\"",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/userCascadeDeleteRequest"
                        }
                    }
                ],
                "tags": [
                    "CustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-user-customapi-cascadedelete"
                },
                "x-ves-proto-rpc": "ves.io.schema.user.CustomAPI.CascadeDelete"
            },
            "x-displayname": "User",
            "x-ves-proto-service": "ves.io.schema.user.CustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/custom/namespaces/{namespace}/whoami": {
            "get": {
                "summary": "Get User Details",
                "description": "Get fetches user information based on the username header from the request context\nthis API is also called as WhoAmI",
                "operationId": "ves.io.schema.user.CustomAPI.Get",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/userGetUserRoleResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "Namespace\n\nx-example: \"value\"\nNamespace of the user object (namespace where the user object is stored).",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    }
                ],
                "tags": [
                    "CustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-user-customapi-get"
                },
                "x-ves-proto-rpc": "ves.io.schema.user.CustomAPI.Get"
            },
            "x-displayname": "User",
            "x-ves-proto-service": "ves.io.schema.user.CustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/custom/password/admin_reset": {
            "post": {
                "summary": "Reset password by admin",
                "description": "Reset password by admin resets password for a user specified in request payload.\nThis request is meant to be executed by the tenant's admin.",
                "operationId": "ves.io.schema.user.CustomAPI.ResetPasswordByAdmin",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/schemauserEmpty"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/userResetPasswordByAdminRequest"
                        }
                    }
                ],
                "tags": [
                    "CustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-user-customapi-resetpasswordbyadmin"
                },
                "x-ves-proto-rpc": "ves.io.schema.user.CustomAPI.ResetPasswordByAdmin"
            },
            "x-displayname": "User",
            "x-ves-proto-service": "ves.io.schema.user.CustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/custom/password/reset": {
            "post": {
                "summary": "Reset password",
                "description": "Reset password resets password for user who is making this request.",
                "operationId": "ves.io.schema.user.CustomAPI.ResetPassword",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/schemauserEmpty"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemauserEmpty"
                        }
                    }
                ],
                "tags": [
                    "CustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-user-customapi-resetpassword"
                },
                "x-ves-proto-rpc": "ves.io.schema.user.CustomAPI.ResetPassword"
            },
            "x-displayname": "User",
            "x-ves-proto-service": "ves.io.schema.user.CustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        }
    },
    "definitions": {
        "ioschemaEmpty": {
            "type": "object",
            "description": "This can be used for messages where no values are needed",
            "title": "Empty",
            "x-displayname": "Empty",
            "x-ves-proto-message": "ves.io.schema.Empty"
        },
        "protobufAny": {
            "type": "object",
            "description": "-Any- contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := \u0026pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an -Any- value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field -@type- which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n-value- which holds the custom JSON in addition to the -@type-\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }",
            "properties": {
                "type_url": {
                    "type": "string",
                    "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n-path/google.protobuf.Duration-). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme -http-, -https-, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, -https- is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than -http-, -https- (or the empty scheme) might be\nused with implementation specific semantics."
                },
                "value": {
                    "type": "string",
                    "description": "Must be a valid serialized protocol buffer of the above specified type.",
                    "format": "byte"
                }
            }
        },
        "schemaAddonServiceAccess": {
            "type": "string",
            "description": "x-displayName: \"Addon Service Access\"\nState of access into service\n\n - AS_AC_NONE: x-displayName: \"None\"\ndefault state\nThis can mean that addon service is not subscribed or is in pending subscription.\n - AS_AC_ALLOWED: x-displayName: \"Allow\"\naccess is allowed\n - AS_AC_PBAC_DENY: x-displayName: \"PBAC Deny\"\nAddon service is not allowed as part of current plan\n - AS_AC_PBAC_DENY_UPGRADE_PLAN: x-displayName: \"PBAC Deny - Upgrade plan\"\nAddon service is not allowed as part of current plan. To enable it, user is requested to uprade the plan\n - AS_AC_PBAC_DENY_CONTACT_SALES: x-displayName: \"PBAC Deny - Contact Sales\"\nAddon service is not allowed as part of current plan. To enable or to find out more, user is requested to contact sales\n - AS_AC_PBAC_DENY_AS_AC_EOL: x-displayName: \"PBAC Deny - End of  Life\"\nAddon service is not allowed as part of current plan as it is discontinued. User is requested to contact sales discuss alternatives",
            "title": "AddonServiceAccess",
            "enum": [
                "AS_AC_NONE",
                "AS_AC_ALLOWED",
                "AS_AC_PBAC_DENY",
                "AS_AC_PBAC_DENY_UPGRADE_PLAN",
                "AS_AC_PBAC_DENY_CONTACT_SALES",
                "AS_AC_PBAC_DENY_AS_AC_EOL"
            ],
            "default": "AS_AC_NONE"
        },
        "schemaAddonServiceState": {
            "type": "string",
            "description": "x-displayName: \"Addon Service State\"\nState of a service\n\n - AS_NONE: x-displayName: \"None\"\ndefault state\n - AS_PENDING: x-displayName: \"Pending Subscription\"\ninitiated subscription request and is pending to activate (requested).\n - AS_SUBSCRIBED: x-displayName: \"Subscribed\"\nsuccessfully subscribed\n - AS_ERROR: x-displayName: \"Error\"\nservice subscription request ended up in error state.",
            "title": "AddonServiceState",
            "enum": [
                "AS_NONE",
                "AS_PENDING",
                "AS_SUBSCRIBED",
                "AS_ERROR"
            ],
            "default": "AS_NONE"
        },
        "schemaErrorCode": {
            "type": "string",
            "description": "Union of all possible error-codes from system\n\n - EOK: No error\n - EPERMS: Permissions error\n - EBADINPUT: Input is not correct\n - ENOTFOUND: Not found\n - EEXISTS: Already exists\n - EUNKNOWN: Unknown/catchall error\n - ESERIALIZE: Error in serializing/de-serializing\n - EINTERNAL: Server error\n - EPARTIAL: Partial error",
            "title": "ErrorCode",
            "enum": [
                "EOK",
                "EPERMS",
                "EBADINPUT",
                "ENOTFOUND",
                "EEXISTS",
                "EUNKNOWN",
                "ESERIALIZE",
                "EINTERNAL",
                "EPARTIAL"
            ],
            "default": "EOK",
            "x-displayname": "Error Code",
            "x-ves-proto-enum": "ves.io.schema.ErrorCode"
        },
        "schemaErrorType": {
            "type": "object",
            "description": "Information about a error in API operation",
            "title": "ErrorType",
            "x-displayname": "Error Type",
            "x-ves-proto-message": "ves.io.schema.ErrorType",
            "properties": {
                "code": {
                    "description": " A simple general code by category",
                    "title": "code",
                    "$ref": "#/definitions/schemaErrorCode",
                    "x-displayname": "Code"
                },
                "error_obj": {
                    "description": " A structured error object for machine parsing",
                    "title": "error_obj",
                    "$ref": "#/definitions/protobufAny",
                    "x-displayname": "Error Object"
                },
                "message": {
                    "type": "string",
                    "description": " A human readable string of the error\n\nExample: - \"value\"-",
                    "title": "message",
                    "x-displayname": "Message",
                    "x-ves-example": "value"
                }
            }
        },
        "schemaInitializerType": {
            "type": "object",
            "description": "Initializer is information about an initializer that has not yet completed.",
            "title": "InitializerType",
            "x-displayname": "Initializer",
            "x-ves-proto-message": "ves.io.schema.InitializerType",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " name of the service that is responsible for initializing this object.",
                    "title": "name",
                    "x-displayname": "Name"
                }
            }
        },
        "schemaInitializersType": {
            "type": "object",
            "description": "Initializers tracks the progress of initialization of a configuration object",
            "title": "InitializersType",
            "x-displayname": "Initializers",
            "x-ves-proto-message": "ves.io.schema.InitializersType",
            "properties": {
                "pending": {
                    "type": "array",
                    "description": " Pending is a list of initializers that must execute in order before this object is initialized.\n When the last pending initializer is removed, and no failing result is set, the initializers\n struct will be set to nil and the object is considered as initialized and visible to all\n clients.",
                    "title": "pending",
                    "items": {
                        "$ref": "#/definitions/schemaInitializerType"
                    },
                    "x-displayname": "Pending"
                },
                "result": {
                    "description": " If result is set with the Failure field, the object will be persisted to storage and then deleted,\n ensuring that other clients can observe the deletion.",
                    "title": "result",
                    "$ref": "#/definitions/schemaStatusType",
                    "x-displayname": "Result"
                }
            }
        },
        "schemaNamespaceAccessType": {
            "type": "object",
            "description": "Access info in the namespaces for the entity",
            "title": "Namespace Access",
            "x-displayname": "Namespace Access",
            "x-ves-proto-message": "ves.io.schema.NamespaceAccessType",
            "properties": {
                "namespace_role_map": {
                    "type": "object",
                    "description": " List of all the roles for the entity in the namespaces\n\nExample: - '\u003cnamespace\u003e [\u003croles\u003e]'-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.map.keys.string.max_len: 256\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Namespace Role Map",
                    "x-displayname": "Namespace Role Map",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.map.keys.string.max_len": "256",
                        "ves.io.schema.rules.message.required": "true"
                    }
                }
            }
        },
        "schemaNamespaceRoleType": {
            "type": "object",
            "description": "Allows linking namespaces and roles",
            "title": "Namespace role",
            "x-displayname": "Namespace Role",
            "x-ves-proto-message": "ves.io.schema.NamespaceRoleType",
            "properties": {
                "namespace": {
                    "type": "string",
                    "description": " Namespace the role applies to\n '*' value implies all namespaces\n\nExample: - \"ns1\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.max_len: 256\n",
                    "title": "Namespace",
                    "maxLength": 256,
                    "x-displayname": "Namespace",
                    "x-ves-example": "ns1",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.max_len": "256"
                    }
                },
                "role": {
                    "type": "string",
                    "description": " Users role for this namespace\n\nExample: - \"ves-io-monitor-role\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.max_len: 256\n  ves.io.schema.rules.string.ves_object_name: true\n",
                    "title": "Role",
                    "maxLength": 256,
                    "x-displayname": "Role",
                    "x-ves-example": "ves-io-monitor-role",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.max_len": "256",
                        "ves.io.schema.rules.string.ves_object_name": "true"
                    }
                }
            }
        },
        "schemaObjectMetaType": {
            "type": "object",
            "description": "ObjectMetaType is metadata(common attributes) of an object that all configuration objects will have.\nThe information in this type can be specified by user during create and replace APIs.",
            "title": "ObjectMetaType",
            "x-displayname": "Metadata",
            "x-ves-proto-message": "ves.io.schema.ObjectMetaType",
            "properties": {
                "annotations": {
                    "type": "object",
                    "description": " Annotations is an unstructured key value map stored with a resource that may be\n set by external tools to store and retrieve arbitrary metadata. They are not\n queryable and should be preserved when modifying objects.\n\nExample: - \"value\"-\n\nValidation Rules:\n  ves.io.schema.rules.map.keys.string.max_len: 64\n  ves.io.schema.rules.map.keys.string.min_len: 1\n  ves.io.schema.rules.map.values.string.max_len: 1024\n  ves.io.schema.rules.map.values.string.min_len: 1\n",
                    "title": "annotations",
                    "x-displayname": "Annotations",
                    "x-ves-example": "value",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.map.keys.string.max_len": "64",
                        "ves.io.schema.rules.map.keys.string.min_len": "1",
                        "ves.io.schema.rules.map.values.string.max_len": "1024",
                        "ves.io.schema.rules.map.values.string.min_len": "1"
                    }
                },
                "description": {
                    "type": "string",
                    "description": " Human readable description for the object\n\nExample: - \"Virtual Host for acmecorp website\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.max_bytes: 1200\n",
                    "title": "description",
                    "maxLength": 1200,
                    "x-displayname": "Description",
                    "x-ves-example": "Virtual Host for acmecorp website",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.max_bytes": "1200"
                    }
                },
                "disable": {
                    "type": "boolean",
                    "description": " A value of true will administratively disable the object\n\nExample: - \"true\"-",
                    "title": "disable",
                    "format": "boolean",
                    "x-displayname": "Disable",
                    "x-ves-example": "true"
                },
                "labels": {
                    "type": "object",
                    "description": " Map of string keys and values that can be used to organize and categorize\n (scope and select) objects as chosen by the user. Values specified here will be used\n by selector expression\n\nExample: - \"value\"-",
                    "title": "labels",
                    "x-displayname": "Labels",
                    "x-ves-example": "value"
                },
                "name": {
                    "type": "string",
                    "description": " This is the name of configuration object. It has to be unique within the namespace.\n It can only be specified during create API and cannot be changed during replace API.\n The value of name has to follow DNS-1035 format.\n\nExample: - \"acmecorp-web\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "acmecorp-web",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "namespace": {
                    "type": "string",
                    "description": " This defines the workspace within which each the configuration object is to be created.\n Must be a DNS_LABEL format. For a namespace object itself, namespace value will be \"\"\n\nExample: - \"staging\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "staging"
                },
                "uid": {
                    "type": "string",
                    "description": " uid is the unique in time and space value for this object. Object create will fail if\n provided by the client and the value exists in the system. Typically generated by the\n server on successful creation of an object and is not allowed to change once populated.\n Shadowed by SystemObjectMeta's uid field.\n\nExample: - \"d15f1fad-4d37-48c0-8706-df1824d76d31\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "d15f1fad-4d37-48c0-8706-df1824d76d31"
                }
            }
        },
        "schemaObjectRefType": {
            "type": "object",
            "description": "This type establishes a 'direct reference' from one object(the referrer) to another(the referred).\nSuch a reference is in form of tenant/namespace/name for public API and Uid for private API\nThis type of reference is called direct because the relation is explicit and concrete (as opposed\nto selector reference which builds a group based on labels of selectee objects)",
            "title": "ObjectRefType",
            "x-displayname": "Object reference",
            "x-ves-proto-message": "ves.io.schema.ObjectRefType",
            "properties": {
                "kind": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then kind will hold the referred object's kind (e.g. \"route\")\n\nExample: - \"virtual_site\"-",
                    "title": "kind",
                    "x-displayname": "Kind",
                    "x-ves-example": "virtual_site"
                },
                "name": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then name will hold the referred object's(e.g. route's) name.\n\nExample: - \"contactus-route\"-",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "contactus-route"
                },
                "namespace": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then namespace will hold the referred object's(e.g. route's) namespace.\n\nExample: - \"ns1\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "ns1"
                },
                "tenant": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then tenant will hold the referred object's(e.g. route's) tenant.\n\nExample: - \"acmecorp\"-",
                    "title": "tenant",
                    "x-displayname": "Tenant",
                    "x-ves-example": "acmecorp"
                },
                "uid": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then uid will hold the referred object's(e.g. route's) uid.\n\nExample: - \"d15f1fad-4d37-48c0-8706-df1824d76d31\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "d15f1fad-4d37-48c0-8706-df1824d76d31"
                }
            }
        },
        "schemaPlanType": {
            "type": "string",
            "description": "PlanType is the type of billing plan for the customer\n",
            "title": "PlanType",
            "enum": [
                "FREE",
                "INDIVIDUAL",
                "TEAM",
                "ORGANIZATION",
                "PLAN_TYPE_UNSPECIFIED"
            ],
            "default": "FREE",
            "x-displayname": "Plan Type",
            "x-ves-proto-enum": "ves.io.schema.PlanType"
        },
        "schemaRoleListType": {
            "type": "object",
            "description": "x-displayName: \"Role List\"\nRole list",
            "title": "List of Roles",
            "properties": {
                "names": {
                    "type": "array",
                    "description": "x-displayName: \"Roles List\"\nx-example: [\"ves-io-monitor-role\", \"ves-io-uam-admin-role\"]\nx-required\nList of all the roles",
                    "title": "Roles List",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "schemaSignupOrigin": {
            "type": "string",
            "description": "x-required\nSignupOrigin indicates, from which platform signup is originated, example f5xc, aws..etc\n\n - ORIGIN_UNKNOWN: ORIGIN_UNKNOWN\n\nIndicates, the origin of the signup is unknown\n - ORIGIN_F5XC: ORIGIN_F5XC\n\nORIGIN_F5XC as an origin indicates, signup is initiated from console or by internal scaling/testing/support teams using private API\n - ORIGIN_AWS: ORIGIN_AWS\n\nORIGIN_AWS as an origin indicates, signup is initiated from AWS marketplace \u0026 it comes to eywaprime via tsahik\n - ORIGIN_ASB: ORIGIN_ASB\n\nORIGIN_ASB as an origin indicates signup originated from Azure service bus provisioning messages \u0026 it comes to eywaprime via tsahik",
            "title": "SignupOrigin",
            "enum": [
                "ORIGIN_UNKNOWN",
                "ORIGIN_F5XC",
                "ORIGIN_AWS",
                "ORIGIN_ASB"
            ],
            "default": "ORIGIN_UNKNOWN",
            "x-displayname": "Signup Origin",
            "x-ves-proto-enum": "ves.io.schema.SignupOrigin"
        },
        "schemaStatusType": {
            "type": "object",
            "description": "Status is a return value for calls that don't return other objects.",
            "title": "StatusType",
            "x-displayname": "Status",
            "x-ves-proto-message": "ves.io.schema.StatusType",
            "properties": {
                "code": {
                    "type": "integer",
                    "description": " Suggested HTTP return code for this status, 0 if not set.\n\nExample: - \"0\"-",
                    "title": "code",
                    "format": "int32",
                    "x-displayname": "Code",
                    "x-ves-example": "0"
                },
                "reason": {
                    "type": "string",
                    "description": " A human-readable description of why this operation is in the\n \"Failure\" status. If this value is empty there\n is no information available.\n\nExample: - \"value\"-",
                    "title": "reason",
                    "x-displayname": "Reason",
                    "x-ves-example": "value"
                },
                "status": {
                    "type": "string",
                    "description": " Status of the operation.\n One of: \"Success\" or \"Failure\".\n\nExample: - \"value\"-",
                    "title": "status",
                    "x-displayname": "Status",
                    "x-ves-example": "value"
                }
            }
        },
        "schemaSyncMode": {
            "type": "string",
            "description": "Sync mode is to specify where the user details are being synced from.\n\n - SELF: Self\nSystem managed user.\n - SCIM: SCIM\nSCIM synced user. Full user life cycle is managed by the SCIM provider.",
            "title": "Sync Mode",
            "enum": [
                "SELF",
                "SCIM"
            ],
            "default": "SELF",
            "x-displayname": "Sync Mode",
            "x-ves-proto-enum": "ves.io.schema.SyncMode"
        },
        "schemaSystemObjectMetaType": {
            "type": "object",
            "description": "SystemObjectMetaType is metadata generated or populated by the system for all persisted objects and\ncannot be updated directly by users.",
            "title": "SystemObjectMetaType",
            "x-displayname": "System Metadata",
            "x-ves-proto-message": "ves.io.schema.SystemObjectMetaType",
            "properties": {
                "creation_timestamp": {
                    "type": "string",
                    "description": " CreationTimestamp is a timestamp representing the server time when this object was\n created. It is not guaranteed to be set in happens-before order across separate operations.\n Clients may not set this value. It is represented in RFC3339 form and is in UTC.",
                    "title": "creation_timestamp",
                    "format": "date-time",
                    "x-displayname": "Creation Timestamp"
                },
                "creator_class": {
                    "type": "string",
                    "description": " A value identifying the class of the user or service which created this configuration object.\n\nExample: - \"value\"-",
                    "title": "creator_class",
                    "x-displayname": "Creator Class",
                    "x-ves-example": "value"
                },
                "creator_cookie": {
                    "type": "string",
                    "description": " This can used by the creator of the object for later audit for e.g. by storing the\n version identifying information of the object so at future it can be determined if\n version present at remote end is current or stale.\n\nExample: - \"value\"-",
                    "title": "creator_cookie",
                    "x-displayname": "Creator Cookie",
                    "x-ves-example": "value"
                },
                "creator_id": {
                    "type": "string",
                    "description": " A value identifying the exact user or service that created this configuration object\n\nExample: - \"value\"-",
                    "title": "creator_id",
                    "x-displayname": "Creator ID",
                    "x-ves-example": "value"
                },
                "deletion_timestamp": {
                    "type": "string",
                    "description": " DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This\n field is set by the server when a graceful deletion is requested by the user, and is not\n directly settable by a client. The resource is expected to be deleted (no longer visible\n from resource lists, and not reachable by name) after the time in this field, once the\n finalizers list is empty. As long as the finalizers list contains items, deletion is blocked.\n Once the deletionTimestamp is set, this value may not be unset or be set further into the\n future, although it may be shortened or the resource may be deleted prior to this time.\n For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react\n by sending a graceful termination signal to the containers in the pod. After that 30 seconds,\n the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup,\n remove the pod from the API. In the presence of network partitions, this object may still\n exist after this timestamp, until an administrator or automated process can determine the\n resource is fully terminated.\n If not set, graceful deletion of the object has not been requested.\n\n Populated by the system when a graceful deletion is requested.\n Read-only.",
                    "title": "deletion_timestamp",
                    "format": "date-time",
                    "x-displayname": "Deletion Timestamp"
                },
                "finalizers": {
                    "type": "array",
                    "description": " Must be empty before the object is deleted from the registry. Each entry\n is an identifier for the responsible component that will remove the entry\n from the list. If the deletionTimestamp of the object is non-nil, entries\n in this list can only be removed.\n\nExample: - \"value\"-",
                    "title": "finalizers",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Finalizers",
                    "x-ves-example": "value"
                },
                "initializers": {
                    "description": " An initializer is a controller which enforces some system invariant at object creation time.\n This field is a list of initializers that have not yet acted on this object. If nil or empty,\n this object has been completely initialized. Otherwise, the object is considered uninitialized\n and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to\n observe uninitialized objects.\n\n When an object is created, the system will populate this list with the current set of initializers.\n Only privileged users may set or modify this list. Once it is empty, it may not be modified further\n by any user.",
                    "title": "initializers",
                    "$ref": "#/definitions/schemaInitializersType",
                    "x-displayname": "Initializers"
                },
                "labels": {
                    "type": "object",
                    "description": " Map of string keys and values that can be used to organize and categorize\n (scope and select) objects as chosen by the operator or software. Values here can be interpreted\n by software(backend or frontend) to enable certain behavior e.g. things marked as soft-deleted(restorable).\n\nExample: - \"'ves.io/soft-deleted''true'\"-",
                    "title": "labels",
                    "x-displayname": "Labels",
                    "x-ves-example": "'ves.io/soft-deleted': 'true'"
                },
                "modification_timestamp": {
                    "type": "string",
                    "description": " ModificationTimestamp is a timestamp representing the server time when this object was\n last modified.",
                    "title": "modification_timestamp",
                    "format": "date-time",
                    "x-displayname": "Modification Timestamp"
                },
                "namespace": {
                    "type": "array",
                    "description": " The namespace this object belongs to. This is populated by the service based on the\n metadata.namespace field when an object is created.\n\nValidation Rules:\n  ves.io.schema.rules.repeated.max_items: 1\n",
                    "title": "namespace",
                    "maxItems": 1,
                    "items": {
                        "$ref": "#/definitions/schemaObjectRefType"
                    },
                    "x-displayname": "Namespace Reference",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.repeated.max_items": "1"
                    }
                },
                "object_index": {
                    "type": "integer",
                    "description": " Unique index for the object. Some objects need a unique integer index to be allocated\n for each object type. This field will be populated for all objects that need it and will\n be zero otherwise.\n\nExample: - \"0\"-",
                    "title": "object_index",
                    "format": "int64",
                    "x-displayname": "Object Index",
                    "x-ves-example": "0"
                },
                "owner_view": {
                    "description": " Reference to the view object that owns this object.\n If there is no view owner, this field will be nil.\n If not nil, this object can only be edited/deleted through the view",
                    "title": "owner_view",
                    "$ref": "#/definitions/schemaViewRefType",
                    "x-displayname": "Owner View"
                },
                "sre_disable": {
                    "type": "boolean",
                    "description": " This should be set to true If VES/SRE operator wants to suppress an object from being\n presented to business-logic of a daemon(e.g. due to bad-form/issue-causing Object).\n This is meant only to be used in temporary situations for operational continuity till\n a fix is rolled out in business-logic.\n\nExample: - \"true\"-",
                    "title": "sre_disable",
                    "format": "boolean",
                    "x-displayname": "SRE Disable",
                    "x-ves-example": "true"
                },
                "tenant": {
                    "type": "string",
                    "description": " Tenant to which this configuration object belongs to. The value for this is found from\n presented credentials.\n\nExample: - \"acmecorp\"-",
                    "title": "tenant",
                    "x-displayname": "Tenant",
                    "x-ves-example": "acmecorp"
                },
                "trace_info": {
                    "type": "string",
                    "description": " trace_info holds information(\u003ctrace-id\u003e:\u003cspan-id\u003e:\u003cparent-span-id\u003e) of the request doing\n the object modification. This can be used on the watch side to create subsequent spans.\n This information can be used to co-relate activities across services (modulo state compression)\n for a synchronous API.\n\nExample: - \"value\"-",
                    "title": "trace_info",
                    "x-displayname": "Trace Info",
                    "x-ves-example": "value"
                },
                "uid": {
                    "type": "string",
                    "description": " uid is the unique in time and space value for this object. It is generated by\n the server on successful creation of an object and is not allowed to change on Replace\n API. The value of is taken from uid field of ObjectMetaType, if provided.\n\nExample: - \"d15f1fad-4d37-48c0-8706-df1824d76d31\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "d15f1fad-4d37-48c0-8706-df1824d76d31"
                },
                "vtrp_id": {
                    "type": "string",
                    "description": " Indicate origin of this object.",
                    "title": "vtrp_id",
                    "x-displayname": "VTRP ID"
                },
                "vtrp_stale": {
                    "type": "boolean",
                    "description": " Indicate whether mars deems this object to be stale via graceful restart timer information",
                    "title": "vtrp_stale",
                    "format": "boolean",
                    "x-displayname": "VTRP Stale"
                }
            }
        },
        "schemaTenantType": {
            "type": "string",
            "description": "TenantType is the type of the customer\n\nUNKNOWN indicates the field not being set\nFREEMIUM are customer that don't have their domain\nENTERPRiISE customer have their domain",
            "title": "TenantType",
            "enum": [
                "UNKNOWN",
                "FREEMIUM",
                "ENTERPRISE"
            ],
            "default": "UNKNOWN",
            "x-displayname": "Tenant type",
            "x-ves-proto-enum": "ves.io.schema.TenantType"
        },
        "schemaTileAccessState": {
            "type": "string",
            "description": "x-displayName: \"Tile Access State\"\nState of access to Primary navigation tile.\n\n - TILE_AC_NONE: x-displayName: \"None\"\ndefault state\n - TILE_AC_ALLOWED: x-displayName: \"Allowed\"\naccess is allowed\n - TILE_AC_UPGRADE_PLAN: x-displayName: \"Upgrade Plan\"\nRequire plan upgrade.\n - TILE_AC_NOT_SUBSCRIBED: x-displayName: \"Not Subscribed\"\nRequired Addon Service is not subscribed.",
            "title": "TileAccessState",
            "enum": [
                "TILE_AC_NONE",
                "TILE_AC_ALLOWED",
                "TILE_AC_UPGRADE_PLAN",
                "TILE_AC_NOT_SUBSCRIBED"
            ],
            "default": "TILE_AC_NONE"
        },
        "schemaViewRefType": {
            "type": "object",
            "description": "ViewRefType represents a reference to a view",
            "title": "ViewRefType",
            "x-displayname": "View Reference",
            "x-ves-proto-message": "ves.io.schema.ViewRefType",
            "properties": {
                "kind": {
                    "type": "string",
                    "description": " Kind of the view object\n\nExample: - \"http_proxy\"-",
                    "title": "kind",
                    "x-displayname": "Kind",
                    "x-ves-example": "http_proxy"
                },
                "name": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then name will hold the referred object's(e.g. route's) name.\n\nExample: - \"contactus-route\"-",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "contactus-route"
                },
                "namespace": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then namespace will hold the referred object's(e.g. route's) namespace.\n\nExample: - \"ns1\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "ns1"
                },
                "uid": {
                    "type": "string",
                    "description": " UID of the view object\n\nExample: - \"f3744323-1adf-4aaa-a5dc-0707c1d1bd82\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "f3744323-1adf-4aaa-a5dc-0707c1d1bd82"
                }
            }
        },
        "schemauserEmpty": {
            "type": "object",
            "description": "Empty is a message without actual content/body.",
            "title": "Empty",
            "x-displayname": "Empty",
            "x-ves-proto-message": "ves.io.schema.user.Empty"
        },
        "userAcceptTOSRequest": {
            "type": "object",
            "description": "Accept TOS request model",
            "title": "Accept TOS request model",
            "x-displayname": "Accept TOS Request",
            "x-ves-proto-message": "ves.io.schema.user.AcceptTOSRequest",
            "properties": {
                "namespace": {
                    "type": "string",
                    "description": " Value of namespace is always \"system\".\n\nExample: - \"value\"-",
                    "title": "Namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "value"
                },
                "tos_accepted": {
                    "type": "string",
                    "description": " tos accepted version, this field is deprecated refer the fields -tos_accepted_at- and -tos_version- instead.\n\nExample: - \"value\"-",
                    "title": "tos_accepted",
                    "x-displayname": "TOS Accepted",
                    "x-ves-example": "value"
                },
                "tos_accepted_at": {
                    "type": "string",
                    "description": " tos accepted timestamp in epoch.\n\nExample: - \"1628490105132\"-",
                    "title": "tos_accepted_at",
                    "format": "int64",
                    "x-displayname": "TOS Accepted Timestamp",
                    "x-ves-example": "1628490105132"
                },
                "tos_version": {
                    "type": "string",
                    "description": " tos accepted version\n\nExample: - \"v1.0\"-",
                    "title": "tos_version",
                    "x-displayname": "TOS version",
                    "x-ves-example": "v1.0"
                }
            }
        },
        "userAcceptTOSResponse": {
            "type": "object",
            "description": "Accept TOS response model",
            "title": "Accept TOS response model",
            "x-displayname": "Accept TOS Response",
            "x-ves-proto-message": "ves.io.schema.user.AcceptTOSResponse"
        },
        "userAccessType": {
            "type": "string",
            "description": "Used to identify the tenant access\n\n - UNKNOWN_ACCESS: UNKNOWN_ACCESS\n\nWhen unable to determine the tenant access\n - DIRECT_ACCESS: DIRECT_ACCESS\n\nAccessing tenant through direct login\n - MSP_ACCESS: MSP_ACCESS\n\nAccessing tenant from MSP tenant\n - DELEGATED_ACCESS: DELEGATED_ACCESS\n\nAccessing tenant from operating tenant through delegated access\n - SUPPORT_ACCESS: SUPPORT_ACCESS\n\nAccessing tenant from support tenant",
            "title": "AccessType",
            "enum": [
                "UNKNOWN_ACCESS",
                "DIRECT_ACCESS",
                "MSP_ACCESS",
                "DELEGATED_ACCESS",
                "SUPPORT_ACCESS"
            ],
            "default": "UNKNOWN_ACCESS",
            "x-displayname": "Identify the tenant access",
            "x-ves-proto-enum": "ves.io.schema.user.AccessType"
        },
        "userAddonServiceStatus": {
            "type": "object",
            "description": "x-displayName: \"Addon Service Status\"\ndisplays current state and access of an addon service for the user of tenant.",
            "title": "AddonServiceStatus",
            "properties": {
                "access": {
                    "description": "x-displayName: \"Access control status\"\nAccess evaluation result - pbac-deny, rbac-deny or allowed.",
                    "title": "access",
                    "$ref": "#/definitions/schemaAddonServiceAccess"
                },
                "display_name": {
                    "type": "string",
                    "description": "x-displayName: \"Display Name\"\nName to use for display purposes",
                    "title": "display_name"
                },
                "state": {
                    "description": "x-displayName: \"Addon Service State\"\nAddon service current state",
                    "title": "state",
                    "$ref": "#/definitions/schemaAddonServiceState"
                }
            }
        },
        "userAssignRoleRequest": {
            "type": "object",
            "description": "Allows assigning user's role in a namespace or set of namespaces.",
            "title": "Assign role",
            "x-displayname": "Assign Role",
            "x-ves-proto-message": "ves.io.schema.user.AssignRoleRequest",
            "properties": {
                "namespace": {
                    "type": "string",
                    "description": " Namespace the requesting user is calling the action from\n\nExample: - \"system\"-",
                    "title": "Namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "system"
                },
                "namespaces_role": {
                    "description": " namespace role to assign",
                    "title": "Namespace role",
                    "$ref": "#/definitions/userNamespacesRoleType",
                    "x-displayname": "Namespace Role"
                },
                "username": {
                    "type": "array",
                    "description": " Username of the user that needs the role assigned.\n ideally this will be the email address of the user (which is by default treated as username)\n check Create RPC UserRoleRequest for more details.\n\nExample: - \"user1@company.com\"-",
                    "title": "Username",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Username",
                    "x-ves-example": "user1@company.com"
                }
            }
        },
        "userBillingFeatureIndicator": {
            "type": "object",
            "description": "Single instance of a billing indicator.\nIt informs the customer of any problems with their billing, including failed payments, overdue invoices, or missing valid payment methods.",
            "title": "Billing Feature Indicator",
            "x-displayname": "Billing feature indicator",
            "x-ves-proto-message": "ves.io.schema.user.BillingFeatureIndicator",
            "properties": {
                "action": {
                    "description": " Indicate an action the customer should make to mitigate the warning.",
                    "title": "Action the customer should take",
                    "$ref": "#/definitions/userBillingFlagAction",
                    "x-displayname": "Action to be performed"
                },
                "additional_info": {
                    "type": "string",
                    "description": " Any description (such as error message) related to this billing feature.\n\nExample: - \"payment failed due to insufficient funds\"-",
                    "title": "Additional info",
                    "x-displayname": "Additional info",
                    "x-ves-example": "payment failed due to insufficient funds"
                },
                "billing_flag": {
                    "description": " Name of the billing feature this flag relates to",
                    "title": "Billing flag name",
                    "$ref": "#/definitions/userBillingFlag",
                    "x-displayname": "Billing flag"
                },
                "failed": {
                    "type": "boolean",
                    "description": " If true then the billing feature is failed and to be looked into.\n\nExample: - \"true\"-",
                    "title": "Failed",
                    "format": "boolean",
                    "x-displayname": "Failed",
                    "x-ves-example": "true"
                }
            }
        },
        "userBillingFlag": {
            "type": "string",
            "description": "Possible billing flags used to indicate problems with customer billing.\n\n - VALID_PAYMENT_METHOD: customer has a valid payment method on our file\n - OVERDUE_INVOICE: customer has at least one overdue invoice with with us\n - LAST_TRANSACTION_STATUS: status of customer's last transaction. a retry may be triggered so this is an early warning.\n - PAYMENT_METHOD_EXPIRED: this flag is on when the customer has no but expired payment method on it's file.\nWe could not charge your primary payment method due to insufficient funds\nYour primary payment method was declined\nSecurity code for your primary payment method is incorrect\nZIP code for your primary payment method is incorrect\nWe could not charge your primary payment method due to insufficient funds. Your secondary payment method was charged\nYour primary payment method has expired. Your secondary payment method was charged\nYour primary payment method was declined. Your secondary payment method was charged\nWe could not charge any of the active payment methods\nWe could not charge any of the active payment methods\nAdding a payment method resulted in an error",
            "title": "Billing flag",
            "enum": [
                "VALID_PAYMENT_METHOD",
                "OVERDUE_INVOICE",
                "LAST_TRANSACTION_STATUS",
                "PAYMENT_METHOD_EXPIRED",
                "PAYMENT_METHOD_INSUFFICIENT_FUNDS",
                "PAYMENT_METHOD_PRIMARY_DECLINED",
                "PAYMENT_METHOD_CVC_INVALID",
                "PAYMENT_METHOD_ZIP_INVALID",
                "PAYMENT_METHOD_INSUFFICIENT_FUNDS_SECONDARY_CHARGED",
                "PAYMENT_METHOD_PRIMARY_EXPIRED_SECONDARY_CHARGED",
                "PAYMENT_METHOD_PRIMARY_DECLINED_SECONDARY_CHARGED",
                "PAYMENT_METHOD_BOTH_PAYMENT_METHOD_FAILED",
                "PAYMENT_METHOD_GENERIC_FAILURE",
                "PAYMENT_METHOD_GENERIC_ADD_FAILURE"
            ],
            "default": "VALID_PAYMENT_METHOD",
            "x-displayname": "Billing flag",
            "x-ves-proto-enum": "ves.io.schema.user.BillingFlag"
        },
        "userBillingFlagAction": {
            "type": "string",
            "description": "Action to be executed when customer click on the UI warning\n\n - NO_ACTION: we don't expect customer to take any actoon\n - ADD_NEW_PAYMENT_METHOD: customer should provide a new payment method\n - CONTACT_US: customer should send us an email",
            "title": "Billing flag action",
            "enum": [
                "NO_ACTION",
                "ADD_NEW_PAYMENT_METHOD",
                "CONTACT_US"
            ],
            "default": "NO_ACTION",
            "x-displayname": "Billing flag action",
            "x-ves-proto-enum": "ves.io.schema.user.BillingFlagAction"
        },
        "userCascadeDeleteItemType": {
            "type": "object",
            "description": "CascadeDeleteItemType contains details of object that was handled as part of cascade delete\nof user and whether it was successfully deleted",
            "title": "CascadeDeleteItemType",
            "x-displayname": "Cascade Deletion of User and Associated Namespace Roles",
            "x-ves-proto-message": "ves.io.schema.user.CascadeDeleteItemType",
            "properties": {
                "error_message": {
                    "type": "string",
                    "description": " informative error message about the success or failure of the object's deletion response\n\nExample: - \"value\"-",
                    "title": "error message",
                    "x-displayname": "Error Message",
                    "x-ves-example": "value"
                },
                "object_name": {
                    "type": "string",
                    "description": " Name of the object\n\nExample: - \"value\"-",
                    "title": "object's name",
                    "x-displayname": "Object Name",
                    "x-ves-example": "value"
                },
                "object_type": {
                    "type": "string",
                    "description": " The type of the object\n\nExample: - \"value\"-",
                    "title": "object's type",
                    "x-displayname": "Object Type",
                    "x-ves-example": "value"
                },
                "object_uid": {
                    "type": "string",
                    "description": " The uid of the object\n\nExample: - \"value\"-",
                    "title": "object's uid",
                    "x-displayname": "Object Uid",
                    "x-ves-example": "value"
                }
            }
        },
        "userCascadeDeleteRequest": {
            "type": "object",
            "description": "CascadeDeleteRequest is the request to delete the user along with the associated namespace role objects.\nNote: only admin is allowed to delete the user and associated objects.",
            "title": "CascadeDeleteRequest",
            "x-displayname": "Delete the User and Associated Namespace Roles",
            "x-ves-proto-message": "ves.io.schema.user.CascadeDeleteRequest",
            "properties": {
                "email": {
                    "type": "string",
                    "description": " email of the user requesting for\n\nExample: - \"value\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "email of the user",
                    "x-displayname": "Email",
                    "x-ves-example": "value",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "namespace": {
                    "type": "string",
                    "description": " Value of namespace is always \"system\" \n\nExample: - \"value\"-",
                    "title": "Namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "value"
                }
            }
        },
        "userCascadeDeleteResponse": {
            "type": "object",
            "description": "CascadeDeleteResponse contains a list of user objects that were deleted\nand possibly any errors when attempting to delete those objects.",
            "title": "CascadeDeleteResponse",
            "x-displayname": "Delete Response for the User and Associated Namespace Roles",
            "x-ves-proto-message": "ves.io.schema.user.CascadeDeleteResponse",
            "properties": {
                "delete_ok": {
                    "type": "boolean",
                    "description": " status of the deleted objects. \n \"true\" value indicates that the operation had been successful for all the objects.\n \"false\" value indicates that at least one of the delete operations had been unsuccessful.\n\nExample: - \"true\"-",
                    "title": "delete_ok",
                    "format": "boolean",
                    "x-displayname": "Delete Ok",
                    "x-ves-example": "true"
                },
                "items": {
                    "type": "array",
                    "description": " The objects deleted for the specific user",
                    "title": "items",
                    "items": {
                        "$ref": "#/definitions/userCascadeDeleteItemType"
                    },
                    "x-displayname": "Items"
                }
            }
        },
        "userFSMState": {
            "type": "string",
            "description": "States describes possible states for user.\n\n - StateUndefined: StateUndefined\n\nUser state when it was created without any state.\n - StateCreating: StateCreating\n\nUser state during initial creation. It includes registering in IDM, creating user-settings object, etc...\n - StateCreateFailed: StateCreateFailed\n\nUser state when initial creation was failed by some reason and must be retried\nafter issue is solved.\n - StateActive: StateActive\n\nUser state of completely created and available to use user.\n - StateDisabled: StateDisabled\n\nUser is currently disabled, login is not possible for this user, but it may become active again in the future.",
            "title": "States",
            "enum": [
                "StateUndefined",
                "StateCreating",
                "StateCreateFailed",
                "StateActive",
                "StateDisabled"
            ],
            "default": "StateUndefined",
            "x-displayname": "States",
            "x-ves-proto-enum": "ves.io.schema.user.FSMState"
        },
        "userFeatureFlagType": {
            "type": "object",
            "title": "FeatureFlagType\nx-displayName: \"Feature and its Status for the Tenant's Plan\"",
            "x-displayname": "Feature and its Status for the Tenant's Plan",
            "x-ves-proto-message": "ves.io.schema.user.FeatureFlagType",
            "properties": {
                "disabled": {
                    "type": "boolean",
                    "description": " x-displayName \"Disabled\"\n status of whether this feature should be disabled for current plan\n\nExample: - \"true\"-",
                    "title": "disabled",
                    "format": "boolean",
                    "x-ves-example": "true"
                },
                "name": {
                    "type": "string",
                    "description": " Name of the feature\n\nExample: - \"value\"-",
                    "title": "feature's name",
                    "x-displayname": "Feature Name",
                    "x-ves-example": "value"
                }
            }
        },
        "userGetTOSResponse": {
            "type": "object",
            "description": "Get TOS response model",
            "title": "Get TOS response model",
            "x-displayname": "Get TOS Response",
            "x-ves-proto-message": "ves.io.schema.user.GetTOSResponse",
            "properties": {
                "text": {
                    "type": "string",
                    "description": " Value of TOS text\n\nExample: - \"value\"-",
                    "title": "Text",
                    "x-displayname": "TOS Text",
                    "x-ves-example": "value"
                },
                "version": {
                    "type": "string",
                    "description": " Value of TOS version\n\nExample: - \"value\"-",
                    "title": "Version",
                    "x-displayname": "TOS Version",
                    "x-ves-example": "value"
                }
            }
        },
        "userGetUserRoleResponse": {
            "type": "object",
            "description": "Detailed information about user including role assigments and other details for tenant.",
            "title": "Get User Detail Response",
            "x-displayname": "User Detail Response",
            "x-ves-oneof-field-managed_access_info": "[\"msp_managed\",\"self_managed\"]",
            "x-ves-proto-message": "ves.io.schema.user.GetUserRoleResponse",
            "properties": {
                "access_type": {
                    "$ref": "#/definitions/userAccessType"
                },
                "active_plan_transition_uid": {
                    "type": "string",
                    "description": " UUID of the plan transition request which is currently in progress. This field is empty\n if there is no such request.",
                    "title": "Active plan transition id",
                    "x-displayname": "Active plan transition id"
                },
                "addon_service_status": {
                    "type": "object",
                    "description": " Addon service state and access for the user.",
                    "title": "Addon Service Status",
                    "x-displayname": "Addon Service Status"
                },
                "billing_flags": {
                    "type": "array",
                    "description": " Collection of flags informing the customer of any billing related problems, such as overdue invoices.",
                    "items": {
                        "$ref": "#/definitions/userBillingFeatureIndicator"
                    },
                    "x-displayname": "Billing flags"
                },
                "billing_plan_name": {
                    "type": "string",
                    "description": " Billing plan name of the plan template the tenant is subscribed to (Free plan, Teams Plan, Organization Plan, ...)\n\nExample: - \"Teams Plan\"-",
                    "title": "Billing plan name",
                    "x-displayname": "Billing plan name",
                    "x-ves-example": "Teams Plan"
                },
                "cname": {
                    "type": "string",
                    "description": " CName via tenant will be accessed from url. \u003ccname\u003e.\u003cdomain\u003e\n\nExample: - \"web\"-",
                    "title": "Cname\nx-displayName: \"CName\"\nx-example: \"web\"\nCName via tenant will be accessed from url. \u003ccname\u003e.\u003cdomain\u003e",
                    "x-displayname": "CName",
                    "x-ves-example": "web"
                },
                "company": {
                    "type": "string",
                    "description": " Legal name of the company the user/tenant belongs to\n\nExample: - \"Acme Ltd.\"-",
                    "title": "Company name\nx-displayName: \"Company\"\nx-example: \"Acme Ltd.\"\nLegal name of the company the user/tenant belongs to",
                    "x-displayname": "Company",
                    "x-ves-example": "Acme Ltd."
                },
                "creation_timestamp": {
                    "type": "string",
                    "description": " User object creation timestamp",
                    "title": "Creation Timestamp\nx-displayName: \"Creation Timestamp\"\nUser object creation timestamp",
                    "format": "date-time",
                    "x-displayname": "Creation Timestamp"
                },
                "disabled": {
                    "type": "boolean",
                    "description": " If set to true user is completely disabled including IDM.",
                    "title": "Disabled",
                    "format": "boolean",
                    "x-displayname": "Disabled"
                },
                "domain_owner": {
                    "type": "boolean",
                    "description": " Domain owner is the first user who registered or signed up the associated Tenant.\n User created via signup flow will have this value set to true.\n Few restrictions apply to this user w.r.t role update and deletion.\n\nExample: - \"true\"-",
                    "title": "Domain Owner",
                    "format": "boolean",
                    "x-displayname": "Domain Owner",
                    "x-ves-example": "true"
                },
                "email": {
                    "type": "string",
                    "description": " Email of the user object\n\nExample: - \"value\"-",
                    "title": "Email",
                    "x-displayname": "Email Address",
                    "x-ves-example": "value"
                },
                "environment": {
                    "type": "string",
                    "description": " current global controller deployment enviroment.",
                    "title": "Environment",
                    "x-displayname": "Environment"
                },
                "feature_flags": {
                    "type": "array",
                    "description": " feature flag that shows whether this feature should be enabled on UI for the current plan",
                    "title": "Feature flag type",
                    "items": {
                        "$ref": "#/definitions/userFeatureFlagType"
                    },
                    "x-displayname": "Feature Flag Type"
                },
                "first_name": {
                    "type": "string",
                    "description": " First name of the customer\n\nExample: - \"value\"-",
                    "title": "First name",
                    "x-displayname": "First Name",
                    "x-ves-example": "value"
                },
                "group_names": {
                    "type": "array",
                    "description": " Group list must be associated to this user.\n\nExample: - \"[\"dev-group-1\"]\"-",
                    "title": "Groups",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Groups",
                    "x-ves-example": "[\"dev-group-1\"]"
                },
                "idm_type": {
                    "description": " Identity management type of the user (F5XC Managed, SSO)",
                    "title": "IDM type",
                    "$ref": "#/definitions/userIdmType",
                    "x-displayname": "Identity Management Type"
                },
                "last_login_timestamp": {
                    "type": "string",
                    "description": " Last login timestamp when user successfully login to access VoltConsole. ",
                    "title": "Last login timestamp",
                    "format": "date-time",
                    "x-displayname": "Last login timestamp"
                },
                "last_name": {
                    "type": "string",
                    "description": " Last name of the customer\n\nExample: - \"value\"-",
                    "title": "Last name",
                    "x-displayname": "Last Name",
                    "x-ves-example": "value"
                },
                "msp_managed": {
                    "description": "Exclusive with [self_managed]\n MSP information of tenants that are managed by an MSP",
                    "title": "MSP Managed",
                    "$ref": "#/definitions/userMSPManaged",
                    "x-displayname": "MSP Managed"
                },
                "name": {
                    "type": "string",
                    "description": " Username of the user\n\nExample: - \"value\"-",
                    "title": "Name",
                    "x-displayname": "Username",
                    "x-ves-example": "value"
                },
                "namespace": {
                    "type": "string",
                    "description": " Namespace of the user object (namespace where the user object is stored).\n\nExample: - \"value\"-",
                    "title": "Namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "value"
                },
                "namespace_access": {
                    "description": " Resolved roles for the user within the namespaces.\n This is the union of the directly attached roles to the user and the roles attached to the groups that the user is associated to.",
                    "title": "Namespace Access",
                    "$ref": "#/definitions/schemaNamespaceAccessType",
                    "x-displayname": "namespace access"
                },
                "namespace_roles": {
                    "type": "array",
                    "description": " Directly attached namespace roles for the user\n This field is deprecated, refer to namespace_access field for the access of the user.",
                    "title": "Namespace roles",
                    "items": {
                        "$ref": "#/definitions/schemaNamespaceRoleType"
                    },
                    "x-displayname": "Namespace Roles"
                },
                "original_tenant": {
                    "type": "string",
                    "description": " returns original tenant id that the user belongs if request header exist for original tenant else regular tenant id\n\nExample: - \"tenant1\"-",
                    "title": "Original Tenant",
                    "x-displayname": "Original Tenant",
                    "x-ves-example": "tenant1"
                },
                "plan_type": {
                    "description": " plan type the tenant is subscribed to (FREE, INDIVIDUAL, TEAM, ORGANIZATION, ...)",
                    "title": "Plan type",
                    "$ref": "#/definitions/schemaPlanType",
                    "x-displayname": "Plan Type"
                },
                "self_managed": {
                    "description": "Exclusive with [msp_managed]\n Tenant is not managed",
                    "title": "Self managed tenant",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Self managed tenant"
                },
                "signup_origin": {
                    "description": " Platform from which the tenant signup is originated, example f5xc, aws, etc\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Signup origin",
                    "$ref": "#/definitions/schemaSignupOrigin",
                    "x-displayname": "Signup origin",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "state": {
                    "description": " Contains information about current user state.",
                    "title": "State",
                    "$ref": "#/definitions/userFSMState",
                    "x-displayname": "State"
                },
                "sync_mode": {
                    "description": " Denotes if this is an externally managed entity imported into UAM by SCIM protocol, or self managed.\n\nExample: - \"self\"-",
                    "title": "Sync Mode",
                    "$ref": "#/definitions/schemaSyncMode",
                    "x-displayname": "Sync Mode",
                    "x-ves-example": "self"
                },
                "tenant": {
                    "type": "string",
                    "description": " tenant will represent id of the tenant that is being accessed\n\nExample: - \"value\"-",
                    "title": "Tenant",
                    "x-displayname": "Tenant",
                    "x-ves-example": "value"
                },
                "tenant_flags": {
                    "type": "object",
                    "description": " Contains information about tenant configuration for giving UI instructions to show specific sections.",
                    "title": "Tenant Flags",
                    "x-displayname": "Tenant Flags"
                },
                "tenant_state": {
                    "type": "string",
                    "description": " Contains information about current state of the tenant.",
                    "title": "Tenant State",
                    "x-displayname": "Tenant State"
                },
                "tenant_type": {
                    "description": " tenant type of the user (FREEMIUM, ENTERPRISE, ...)",
                    "title": "Tenant type",
                    "$ref": "#/definitions/schemaTenantType",
                    "x-displayname": "Tenant Type"
                },
                "tile_access": {
                    "type": "object",
                    "description": " Primary Navigation Tile access based on Plan and Addon service subscription. ",
                    "title": "Tile Access",
                    "x-displayname": "Tile Access"
                },
                "tos_accepted": {
                    "type": "string",
                    "description": " tos accepted version\n\nExample: - \"value\"-",
                    "title": "tos_accepted",
                    "x-displayname": "TOS Accepted",
                    "x-ves-example": "value"
                },
                "tos_accepted_at": {
                    "type": "string",
                    "description": " tos accepted timestamp\n\nExample: - \"2020-04-20T12:32:51.341959216Z\"-",
                    "title": "tos_accepted_at",
                    "format": "date-time",
                    "x-displayname": "TOS Accepted At",
                    "x-ves-example": "2020-04-20T12:32:51.341959216Z"
                },
                "tos_current_version": {
                    "type": "string",
                    "description": " tos current version\n\nExample: - \"value\"-",
                    "title": "tos_current_version",
                    "x-displayname": "TOS Current Version",
                    "x-ves-example": "value"
                },
                "tos_version": {
                    "type": "string",
                    "description": " tos accepted version\n\nExample: - \"value\"-",
                    "title": "tos_version",
                    "x-displayname": "TOS Version",
                    "x-ves-example": "value"
                },
                "type": {
                    "description": " Type of the user account (USER, SERVICE)",
                    "title": "User type",
                    "$ref": "#/definitions/userUserType",
                    "x-displayname": "User Type"
                },
                "user_uuid": {
                    "type": "string",
                    "description": " User UUId of the currently logged in user\n\nExample: - \"0795c420-4c6f-406d-a3c9-502baa4ead3b\"-",
                    "title": "User UUId",
                    "x-displayname": "User UUId",
                    "x-ves-example": "0795c420-4c6f-406d-a3c9-502baa4ead3b"
                }
            }
        },
        "userGlobalSpecType": {
            "type": "object",
            "title": "GlobalSpecType",
            "x-displayname": "Global Specification",
            "x-ves-proto-message": "ves.io.schema.user.GlobalSpecType",
            "properties": {
                "contacts": {
                    "type": "array",
                    "description": " Contact information for user",
                    "title": "contacts",
                    "items": {
                        "$ref": "#/definitions/schemaObjectRefType"
                    },
                    "x-displayname": "Contact"
                },
                "domain_owner": {
                    "type": "boolean",
                    "description": " Domain owner is the first user who registered or signed up the associated Tenant.\n User created via signup flow will have this value set to true.\n Few restrictions apply to this user w.r.t role update and deletion.\n\nExample: - \"true\"-",
                    "title": "Domain Owner",
                    "format": "boolean",
                    "x-displayname": "Domain Owner",
                    "x-ves-example": "true"
                },
                "email": {
                    "type": "string",
                    "description": " user's email\n\nExample: - \"value\"-",
                    "title": "email",
                    "x-displayname": "Email",
                    "x-ves-example": "value"
                },
                "first_name": {
                    "type": "string",
                    "description": " user's first name\n\nExample: - \"value\"-",
                    "title": "first_name",
                    "x-displayname": "First Name",
                    "x-ves-example": "value"
                },
                "groups": {
                    "type": "array",
                    "description": " Reference to the user groups.",
                    "title": "Groups",
                    "items": {
                        "$ref": "#/definitions/schemaObjectRefType"
                    },
                    "x-displayname": "Groups"
                },
                "idm_type": {
                    "description": " Type of the identity management who is managing this user.",
                    "title": "IDM Type",
                    "$ref": "#/definitions/userIdmType",
                    "x-displayname": "Identity Management Type"
                },
                "last_login_timestamp": {
                    "type": "string",
                    "description": " Last successful login timestamp of the user.",
                    "title": "last_login_timestamp",
                    "format": "date-time",
                    "x-displayname": "Last Login Timestamp"
                },
                "last_name": {
                    "type": "string",
                    "description": " user's last name\n\nExample: - \"value\"-",
                    "title": "last_name",
                    "x-displayname": "Last Name",
                    "x-ves-example": "value"
                },
                "locale": {
                    "type": "string",
                    "description": " locale of the user (defaults to English)\n\nExample: - \"value\"-",
                    "title": "locale",
                    "x-displayname": "Locale",
                    "x-ves-example": "value"
                },
                "state": {
                    "description": " State of the user.",
                    "title": "State",
                    "$ref": "#/definitions/userFSMState",
                    "x-displayname": "State"
                },
                "sync_mode": {
                    "description": " Denotes if this is an externally managed entity imported into UAM by SCIM protocol, or self managed.\n\nExample: - \"self\"-",
                    "title": "Sync Mode",
                    "$ref": "#/definitions/schemaSyncMode",
                    "x-displayname": "Sync Mode",
                    "x-ves-example": "self"
                },
                "tos_accepted": {
                    "type": "string",
                    "description": " tos accepted version, this field is deprecated refer the fields -tos_accepted_at- and -tos_version- instead.\n\nExample: - \"1.0\"-",
                    "title": "tos_accepted",
                    "x-displayname": "TOS Accepted",
                    "x-ves-example": "1.0"
                },
                "tos_accepted_at": {
                    "type": "string",
                    "description": " tos accepted timestamp.\n\nExample: - \"2020-04-20T12:32:51.341959216Z\"-",
                    "title": "tos_accepted_at",
                    "format": "date-time",
                    "x-displayname": "TOS Accepted Timestamp",
                    "x-ves-example": "2020-04-20T12:32:51.341959216Z"
                },
                "tos_version": {
                    "type": "string",
                    "description": " tos accepted version\n\nExample: - \"v1.0\"-",
                    "title": "tos_version",
                    "x-displayname": "TOS version",
                    "x-ves-example": "v1.0"
                },
                "type": {
                    "description": " type of the user",
                    "title": "type",
                    "$ref": "#/definitions/userUserType",
                    "x-displayname": "Type"
                }
            }
        },
        "userIdmType": {
            "type": "string",
            "description": "IdmType is to identify who is managing the user.\n\n - SSO: SSO User\nExternally managed Single Sign On based user imported into UAM.\n - VOLTERRA_MANAGED: F5XC Managed Local user\nF5XC managed local user. Full user life cycle is managed by volterra UAM and Identity.\n - UNDEFINED: Undefined\nUndefined IDM type",
            "title": "IDM Type",
            "enum": [
                "SSO",
                "VOLTERRA_MANAGED",
                "UNDEFINED"
            ],
            "default": "SSO",
            "x-displayname": "Identity Management Type",
            "x-ves-proto-enum": "ves.io.schema.user.IdmType"
        },
        "userListUserRoleResponse": {
            "type": "object",
            "description": "Allows user namespace roles retrieval",
            "title": "List user roles",
            "x-displayname": "List User Roles",
            "x-ves-proto-message": "ves.io.schema.user.ListUserRoleResponse",
            "properties": {
                "items": {
                    "type": "array",
                    "description": " List of user namespace roles",
                    "title": "User namespace roles",
                    "items": {
                        "$ref": "#/definitions/userListUserRoleResponseItem"
                    },
                    "x-displayname": "User Namespace Roles"
                }
            }
        },
        "userListUserRoleResponseItem": {
            "type": "object",
            "description": "Allows user namespace role retrieval",
            "title": "List user role",
            "x-displayname": "List User Role",
            "x-ves-proto-message": "ves.io.schema.user.ListUserRoleResponseItem",
            "properties": {
                "creation_timestamp": {
                    "type": "string",
                    "description": " Timestamp of user creation.",
                    "title": "Creation timestamp",
                    "format": "date-time",
                    "x-displayname": "Creation timestamp"
                },
                "disabled": {
                    "type": "boolean",
                    "description": " If set to true user is completely disabled including IDM.",
                    "title": "Disabled",
                    "format": "boolean",
                    "x-displayname": "Disabled"
                },
                "domain_owner": {
                    "type": "boolean",
                    "description": " Domain owner is the first user who registered or signed up the associated Tenant.\n User created via signup flow will have this value set to true.\n Few restrictions apply to this user w.r.t role update and deletion.\n\nExample: - \"true\"-",
                    "title": "Domain Owner",
                    "format": "boolean",
                    "x-displayname": "Domain Owner",
                    "x-ves-example": "true"
                },
                "email": {
                    "type": "string",
                    "description": " Email of the user object\n\nExample: - \"value\"-",
                    "title": "Email",
                    "x-displayname": "Email Address",
                    "x-ves-example": "value"
                },
                "first_name": {
                    "type": "string",
                    "description": " First name of the customer\n\nExample: - \"value\"-",
                    "title": "First name",
                    "x-displayname": "First Name",
                    "x-ves-example": "value"
                },
                "group_names": {
                    "type": "array",
                    "description": " Group list must be associated to this user.\n\nExample: - \"[\"dev-group-1\"]\"-",
                    "title": "Groups",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Groups",
                    "x-ves-example": "[\"dev-group-1\"]"
                },
                "idm_type": {
                    "description": " Identity management type of the user (F5XC Managed, SSO)",
                    "title": "IDM type",
                    "$ref": "#/definitions/userIdmType",
                    "x-displayname": "Identity Management Type"
                },
                "last_login_timestamp": {
                    "type": "string",
                    "description": " Last login timestamp when user successfully login to access VoltConsole. ",
                    "title": "Last login timestamp",
                    "format": "date-time",
                    "x-displayname": "Last login timestamp"
                },
                "last_name": {
                    "type": "string",
                    "description": " Last name of the customer\n\nExample: - \"value\"-",
                    "title": "Last name",
                    "x-displayname": "Last Name",
                    "x-ves-example": "value"
                },
                "name": {
                    "type": "string",
                    "description": " name of the user\n\nExample: - \"value\"-",
                    "title": "Name",
                    "x-displayname": "Name",
                    "x-ves-example": "value"
                },
                "namespace": {
                    "type": "string",
                    "description": " Namespace of the user object (namespace where the user object is stored).\n\nExample: - \"system\"-",
                    "title": "Namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "system"
                },
                "namespace_roles": {
                    "type": "array",
                    "description": " List of directly attached roles that the user has for each namespace.",
                    "title": "Namespace roles",
                    "items": {
                        "$ref": "#/definitions/schemaNamespaceRoleType"
                    },
                    "x-displayname": "Namespace Roles"
                },
                "otp_enabled": {
                    "type": "boolean",
                    "description": " Shows if OTP is enabled in IDM Provider.",
                    "title": "OTP Enabled",
                    "format": "boolean",
                    "x-displayname": "OTP Enabled"
                },
                "sync_mode": {
                    "description": " Denotes if this is an externally managed entity imported into UAM by SCIM protocol, or self managed.\n\nExample: - \"self\"-",
                    "title": "Sync Mode",
                    "$ref": "#/definitions/schemaSyncMode",
                    "x-displayname": "Sync Mode",
                    "x-ves-example": "self"
                },
                "tenant": {
                    "type": "string",
                    "description": " tenant that the user belongs to\n\nExample: - \"value\"-",
                    "title": "Tenant",
                    "x-displayname": "Tenant",
                    "x-ves-example": "value"
                },
                "tenant_type": {
                    "description": " tenant type of the user (FREEMIUM, ENTERPRISE, ...)",
                    "title": "Tenant type",
                    "$ref": "#/definitions/schemaTenantType",
                    "x-displayname": "Tenant Type"
                },
                "type": {
                    "description": " Type of the user account (USER, SERVICE)",
                    "title": "User type",
                    "$ref": "#/definitions/userUserType",
                    "x-displayname": "User Type"
                }
            }
        },
        "userMSPManaged": {
            "type": "object",
            "description": "MSP information for tenant.",
            "title": "MSP Managed",
            "x-displayname": "MSP Managed",
            "x-ves-proto-message": "ves.io.schema.user.MSPManaged",
            "properties": {
                "msp_id": {
                    "type": "string",
                    "description": " msp Id for the tenant.\n\nExample: - \"value\"-",
                    "title": "msp_id",
                    "x-displayname": "msp_id",
                    "x-ves-example": "value"
                },
                "node_type": {
                    "description": " Hold parent tenant id",
                    "title": "MSP Node type",
                    "$ref": "#/definitions/userMSPNodeType",
                    "x-displayname": "MSP node type"
                },
                "parent_tenant_id": {
                    "type": "string",
                    "description": " Hold parent tenant id\n\nExample: - \"volterra-abc\"-",
                    "title": "Parent Tenant ID",
                    "x-displayname": "Parent Tenant ID",
                    "x-ves-example": "volterra-abc"
                },
                "tier": {
                    "type": "integer",
                    "description": " tier of tenant in MSP tree.\n\nExample: - \"1\"-",
                    "title": "tier",
                    "format": "int64",
                    "x-displayname": "Tier",
                    "x-ves-example": "1"
                }
            }
        },
        "userMSPNodeType": {
            "type": "string",
            "description": "Managed services node type. This is used to determine if the tenant is a parent or a child or not set at all.\n\n - MspNodeTypeUnknown: MspUnknown\n\nManaged services status is unknown or not set\n - MspNodeTypeChild: MspChild\n\nTenant acts as a child for another tenant. In other words, the tenant has a parent tenant that is managing it.\n - MspNodeTypeParent: MspParent\n\nTenant acts as a parent for another tenant(s). In other words, the tenant has child tenants that are managed by it.",
            "title": "Managed services node type",
            "enum": [
                "MspNodeTypeUnknown",
                "MspNodeTypeChild",
                "MspNodeTypeParent"
            ],
            "default": "MspNodeTypeUnknown",
            "x-displayname": "Managed services node type",
            "x-ves-proto-enum": "ves.io.schema.user.MSPNodeType"
        },
        "userNamespacesRoleType": {
            "type": "object",
            "description": "Association of a role to namespaces",
            "title": "Namespace Role Type",
            "x-displayname": "Namespace Role Type",
            "x-ves-proto-message": "ves.io.schema.user.NamespacesRoleType",
            "properties": {
                "namespaces": {
                    "type": "array",
                    "description": " Namespace, including star (-*-) which means all tenant's namespaces\n\nExample: - \"value\"-",
                    "title": "Namespaces",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Namespaces",
                    "x-ves-example": "value"
                },
                "role": {
                    "type": "string",
                    "description": " Users role for this namespace\n\nExample: - \"value\"-",
                    "title": "Role",
                    "x-displayname": "Role",
                    "x-ves-example": "value"
                }
            }
        },
        "userObject": {
            "type": "object",
            "description": "User object",
            "title": "User",
            "x-displayname": "Object",
            "x-ves-proto-message": "ves.io.schema.user.Object",
            "properties": {
                "metadata": {
                    "description": " Standard object's metadata",
                    "title": "metadata",
                    "$ref": "#/definitions/schemaObjectMetaType",
                    "x-displayname": "Metadata"
                },
                "spec": {
                    "description": " Specification of the desired behavior of the user",
                    "title": "spec",
                    "$ref": "#/definitions/userSpecType",
                    "x-displayname": "Spec"
                },
                "system_metadata": {
                    "description": " System generated object's metadata",
                    "title": "system_metadata",
                    "$ref": "#/definitions/schemaSystemObjectMetaType",
                    "x-displayname": "System Metadata"
                }
            }
        },
        "userResetPasswordByAdminRequest": {
            "type": "object",
            "description": "Reset password by admin request contains email of user for which password will be reset.",
            "title": "Reset password by admin request",
            "x-displayname": "Reset password by admin request",
            "x-ves-proto-message": "ves.io.schema.user.ResetPasswordByAdminRequest",
            "properties": {
                "email": {
                    "type": "string",
                    "description": " Email of user for which password will be reset.\n\nExample: - \"john@example.com\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Email",
                    "x-displayname": "Email",
                    "x-ves-example": "john@example.com",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                }
            }
        },
        "userSendPasswordEmailRequest": {
            "type": "object",
            "description": "SendPasswordEmailRequest is the request parameters for sending the password update.\nNote that only admin is allowed to resend the password for users.",
            "title": "Send password email request",
            "x-displayname": "Send Password Email Request",
            "x-ves-proto-message": "ves.io.schema.user.SendPasswordEmailRequest",
            "properties": {
                "email": {
                    "type": "string",
                    "description": " email of the user requesting for\n\nExample: - \"value\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "email of the user",
                    "x-displayname": "Email",
                    "x-ves-example": "value",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "namespace": {
                    "type": "string",
                    "description": " Value of namespace is always \"system\" \n\nExample: - \"value\"-",
                    "title": "Namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "value"
                }
            }
        },
        "userSendPasswordEmailResponse": {
            "type": "object",
            "description": "SendPasswordEmailResponse is an empty response after an email had been sent.",
            "title": "Send password email response",
            "x-displayname": "Send Password Email Response",
            "x-ves-proto-message": "ves.io.schema.user.SendPasswordEmailResponse"
        },
        "userSpecType": {
            "type": "object",
            "description": "Shape of the User specification",
            "title": "Specification for User object",
            "x-displayname": "Specification",
            "x-ves-proto-message": "ves.io.schema.user.SpecType",
            "properties": {
                "gc_spec": {
                    "title": "gc_spec",
                    "$ref": "#/definitions/userGlobalSpecType",
                    "x-displayname": "GC Spec"
                }
            }
        },
        "userTileAccess": {
            "type": "object",
            "description": "x-displayName: \"Tile Access\"\nDefines access of primary navigation tile.",
            "title": "TileAccess",
            "properties": {
                "display_name": {
                    "type": "string",
                    "description": "x-displayName: \"Display Name\"\nName to use for display purposes",
                    "title": "display_name"
                },
                "state": {
                    "description": "x-displayName: \"Addon Service State\"\nAddon service current state",
                    "title": "state",
                    "$ref": "#/definitions/schemaTileAccessState"
                }
            }
        },
        "userUserGroupRequest": {
            "type": "object",
            "description": "Used for adding or removing specific user to/from group.",
            "title": "User group request",
            "x-displayname": "User group request",
            "x-ves-proto-message": "ves.io.schema.user.UserGroupRequest",
            "properties": {
                "group_names": {
                    "type": "array",
                    "description": " Group list must be associated to this user.\n\nExample: - \"[\"dev-group-1\"]\"-",
                    "title": "Groups",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Groups",
                    "x-ves-example": "[\"dev-group-1\"]"
                },
                "username": {
                    "type": "string",
                    "description": " Username of the user who should be associated with the group.\n\nExample: - \"test@email.com\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.max_bytes: 320\n  ves.io.schema.rules.string.min_bytes: 1\n",
                    "title": "Username",
                    "minLength": 1,
                    "maxLength": 320,
                    "x-displayname": "Username",
                    "x-ves-example": "test@email.com",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.max_bytes": "320",
                        "ves.io.schema.rules.string.min_bytes": "1"
                    }
                }
            }
        },
        "userUserGroupResponse": {
            "type": "object",
            "title": "User Group Response",
            "x-displayname": "User Group Response",
            "x-ves-proto-message": "ves.io.schema.user.UserGroupResponse",
            "properties": {
                "error": {
                    "description": " Error(if any)",
                    "title": "error\nx-displayName: \"Error\"\nError(if any)",
                    "$ref": "#/definitions/schemaErrorType",
                    "x-displayname": "Error"
                }
            }
        },
        "userUserRoleRequest": {
            "type": "object",
            "description": "Allows creation of a user along with their roles in namespaces.",
            "title": "User role",
            "x-displayname": "User Role",
            "x-ves-proto-message": "ves.io.schema.user.UserRoleRequest",
            "properties": {
                "email": {
                    "type": "string",
                    "description": " user's email\n\nExample: - \"user1@company.com\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "email",
                    "x-displayname": "Email Address",
                    "x-ves-example": "user1@company.com",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "first_name": {
                    "type": "string",
                    "description": " User's first name\n\nExample: - \"Dan\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "first name",
                    "x-displayname": "First Name",
                    "x-ves-example": "Dan",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "group_names": {
                    "type": "array",
                    "description": " Group list must be associated to this user.\n\nExample: - \"[\"dev-group-1\"]\"-",
                    "title": "Groups",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Groups",
                    "x-ves-example": "[\"dev-group-1\"]"
                },
                "idm_type": {
                    "description": " Type of the Identity management required for the user.\n if SSO is not enabled, set this to VOLTERRA_MANAGED\n VOLTERRA_MANGED user is a local user fully managed by Volterra's User Access Management.",
                    "title": "IDM Type",
                    "$ref": "#/definitions/userIdmType",
                    "x-displayname": "Identity Management Type"
                },
                "last_name": {
                    "type": "string",
                    "description": " User's last name\n\nExample: - \"Brown\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "last name",
                    "x-displayname": "Last Name",
                    "x-ves-example": "Brown",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "name": {
                    "type": "string",
                    "description": " This is an optional field meant to be used as username.\n Inside Volterra's UAM, email is already treated as user's username\n and as best practice, recommendation is to keep this same as email field.\n if not specified, this field will be set same as email field.\n\nExample: - \"user1@company.com\"-",
                    "title": "Username",
                    "x-displayname": "Username",
                    "x-ves-example": "user1@company.com"
                },
                "namespace": {
                    "type": "string",
                    "description": " All users of a tenant must be created in tenant's system namespace.\n\nExample: - \"system\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "system"
                },
                "namespace_roles": {
                    "type": "array",
                    "description": " List of directly attached roles that the user has for each namespace.",
                    "title": "Namespace roles",
                    "items": {
                        "$ref": "#/definitions/schemaNamespaceRoleType"
                    },
                    "x-displayname": "Namespace Roles"
                },
                "type": {
                    "description": " Type of the user account (USER, SERVICE)",
                    "title": "User type",
                    "$ref": "#/definitions/userUserType",
                    "x-displayname": "User Type"
                }
            }
        },
        "userUserType": {
            "type": "string",
            "description": "UserType is to identify the type of user\n\n - USER: User\nRegular User\n - SERVICE: Service User\nUser for accessing only APIs/services\n - DEBUG: Debug\nUser which was created by tenant admin for volterra-support team.",
            "title": "UserType",
            "enum": [
                "USER",
                "SERVICE",
                "DEBUG"
            ],
            "default": "USER",
            "x-displayname": "User Type",
            "x-ves-proto-enum": "ves.io.schema.user.UserType"
        }
    },
    "x-displayname": "User",
    "x-ves-proto-file": "ves.io/schema/user/public_customapi.proto"
}`

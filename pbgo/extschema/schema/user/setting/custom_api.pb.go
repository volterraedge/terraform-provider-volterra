// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/user/setting/custom_api.proto

// User Settings Custom API
//
// x-displayName: "User Settings Custom API"
// Custom API of user settings.

package setting

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	types "github.com/gogo/protobuf/types"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	tenant "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/tenant"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Empty
//
// x-displayName: "Empty"
// Empty object definition.
type Empty struct {
}

func (m *Empty) Reset()      { *m = Empty{} }
func (*Empty) ProtoMessage() {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec837e6e53ab5524, []int{0}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return m.Size()
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

// Notification
//
// x-displayName: "Notification"
// Definition of existing notifications created for subscription.
type Notification struct {
	// Code
	//
	// x-displayName: "Code"
	// x-example: "notif-1"
	// Code of notification.
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	// Label
	//
	// x-displayName: "Label"
	// x-example: "Notification 1"
	// Public label of the notification.
	Label string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	// Notification
	//
	// x-displayName: "Notification"
	// x-example: "Something to notify of"
	// Description text of the notification.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Enabled
	//
	// x-displayName: "Enabled"
	// Is it enabled.
	Enabled bool `protobuf:"varint,4,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (m *Notification) Reset()      { *m = Notification{} }
func (*Notification) ProtoMessage() {}
func (*Notification) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec837e6e53ab5524, []int{1}
}
func (m *Notification) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Notification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Notification.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Notification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Notification.Merge(m, src)
}
func (m *Notification) XXX_Size() int {
	return m.Size()
}
func (m *Notification) XXX_DiscardUnknown() {
	xxx_messageInfo_Notification.DiscardUnknown(m)
}

var xxx_messageInfo_Notification proto.InternalMessageInfo

func (m *Notification) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *Notification) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *Notification) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Notification) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

// NotificationList
//
// x-displayName: "NotificationList"
// List of notifications
type NotificationList struct {
	// Notifications
	//
	// x-displayName: "Notifications"
	// List of notifications.
	Notifications []*Notification `protobuf:"bytes,1,rep,name=notifications,proto3" json:"notifications,omitempty"`
}

func (m *NotificationList) Reset()      { *m = NotificationList{} }
func (*NotificationList) ProtoMessage() {}
func (*NotificationList) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec837e6e53ab5524, []int{2}
}
func (m *NotificationList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotificationList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotificationList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotificationList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotificationList.Merge(m, src)
}
func (m *NotificationList) XXX_Size() int {
	return m.Size()
}
func (m *NotificationList) XXX_DiscardUnknown() {
	xxx_messageInfo_NotificationList.DiscardUnknown(m)
}

var xxx_messageInfo_NotificationList proto.InternalMessageInfo

func (m *NotificationList) GetNotifications() []*Notification {
	if m != nil {
		return m.Notifications
	}
	return nil
}

// UserSettingsRequest
//
// x-displayName: "UserSettingsRequest"
// Allowed settings for the user to be modified.
type UserSettingsRequest struct {
	// Enabled Notifications
	//
	// x-displayName: "Enabled Notifications"
	// x-example: "['notif-1','notif-2']"
	// Enabled notification for specific user.
	EnabledNotifications []string `protobuf:"bytes,1,rep,name=enabled_notifications,json=enabledNotifications,proto3" json:"enabled_notifications,omitempty"`
	// Image
	//
	// x-displayName: "Image"
	// x-example: "dXNlci1pbWFnZS5qcGVn"
	// Blob of the user avatar image.
	Image []byte `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	// First Name
	//
	// x-displayName: "First Name"
	// x-example: "Joe"
	// First name of the user.
	FirstName string `protobuf:"bytes,3,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	// Last Name
	//
	// x-displayName: "Last Name"
	// x-example: "Doe"
	// Last Name of the user.
	LastName string `protobuf:"bytes,4,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	// OTP enable
	//
	// x-displayName: "OTP enabled"
	// OTP enabled flag
	OtpEnabled bool `protobuf:"varint,5,opt,name=otp_enabled,json=otpEnabled,proto3" json:"otp_enabled,omitempty"`
}

func (m *UserSettingsRequest) Reset()      { *m = UserSettingsRequest{} }
func (*UserSettingsRequest) ProtoMessage() {}
func (*UserSettingsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec837e6e53ab5524, []int{3}
}
func (m *UserSettingsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserSettingsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserSettingsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserSettingsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserSettingsRequest.Merge(m, src)
}
func (m *UserSettingsRequest) XXX_Size() int {
	return m.Size()
}
func (m *UserSettingsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UserSettingsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UserSettingsRequest proto.InternalMessageInfo

func (m *UserSettingsRequest) GetEnabledNotifications() []string {
	if m != nil {
		return m.EnabledNotifications
	}
	return nil
}

func (m *UserSettingsRequest) GetImage() []byte {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *UserSettingsRequest) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *UserSettingsRequest) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *UserSettingsRequest) GetOtpEnabled() bool {
	if m != nil {
		return m.OtpEnabled
	}
	return false
}

// UserSettingsResponse
//
// x-displayName: "UserSettingsResponse"
// Response of modified user settings.
type UserSettingsResponse struct {
	// EnabledNotification
	//
	// x-displayName: "EnabledNotification"
	// List of enabled notifications for specific user account.
	Notifications []*Notification `protobuf:"bytes,1,rep,name=notifications,proto3" json:"notifications,omitempty"`
	// Image
	//
	// x-displayName: "Image"
	// x-example: "dXNlci1pbWFnZS5qcGVn"
	// Image blob field stores user's image, should be base64 encoded while used by http.
	Image []byte `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	// OTP Enabled
	//
	// x-displayName: "OTP Enabled"
	// Switcher for configuration of enabling OTP in IAM Provider.
	OtpEnabled bool `protobuf:"varint,3,opt,name=otp_enabled,json=otpEnabled,proto3" json:"otp_enabled,omitempty"`
	// OTP Status
	//
	// x-displayName: "OTP Status"
	// OTP status contains information about OTP's status. It can be either enabled/disabled or process_enabling/process_disabling.
	// It gives more information than corresponding `otp_enabled` boolean flag.
	OtpStatus tenant.OtpStatus `protobuf:"varint,4,opt,name=otp_status,json=otpStatus,proto3,enum=ves.io.schema.tenant.OtpStatus" json:"otp_status,omitempty"`
	// Initial Access
	//
	// x-displayName: "Initial Access"
	// Initial access contains information about requesting initial access.
	// Specifically whether it was requested or not and time when it happened (if applicable).
	InitialAccess *InitialAccess `protobuf:"bytes,11,opt,name=initial_access,json=initialAccess,proto3" json:"initial_access,omitempty"`
	// Is Next Request Allowed
	//
	// x-displayName: "Is Next Request Allowed"
	// Boolean flag which shows whether re-request access is allowed or not.
	// Virtually flag shows whether 24hrs are passed from the last_requesting_time timestamp or not.
	IsNextRequestAllowed bool `protobuf:"varint,5,opt,name=is_next_request_allowed,json=isNextRequestAllowed,proto3" json:"is_next_request_allowed,omitempty"`
}

func (m *UserSettingsResponse) Reset()      { *m = UserSettingsResponse{} }
func (*UserSettingsResponse) ProtoMessage() {}
func (*UserSettingsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec837e6e53ab5524, []int{4}
}
func (m *UserSettingsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserSettingsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserSettingsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserSettingsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserSettingsResponse.Merge(m, src)
}
func (m *UserSettingsResponse) XXX_Size() int {
	return m.Size()
}
func (m *UserSettingsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UserSettingsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UserSettingsResponse proto.InternalMessageInfo

func (m *UserSettingsResponse) GetNotifications() []*Notification {
	if m != nil {
		return m.Notifications
	}
	return nil
}

func (m *UserSettingsResponse) GetImage() []byte {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *UserSettingsResponse) GetOtpEnabled() bool {
	if m != nil {
		return m.OtpEnabled
	}
	return false
}

func (m *UserSettingsResponse) GetOtpStatus() tenant.OtpStatus {
	if m != nil {
		return m.OtpStatus
	}
	return tenant.OTP_DISABLED
}

func (m *UserSettingsResponse) GetInitialAccess() *InitialAccess {
	if m != nil {
		return m.InitialAccess
	}
	return nil
}

func (m *UserSettingsResponse) GetIsNextRequestAllowed() bool {
	if m != nil {
		return m.IsNextRequestAllowed
	}
	return false
}

// Email
//
// x-displayName: "Email"
// Email
type UserEmail struct {
	// Email
	//
	// x-displayName: "Email"
	// x-example: "joe.doe@acme.com"
	UserEmail string `protobuf:"bytes,1,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
}

func (m *UserEmail) Reset()      { *m = UserEmail{} }
func (*UserEmail) ProtoMessage() {}
func (*UserEmail) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec837e6e53ab5524, []int{5}
}
func (m *UserEmail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserEmail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserEmail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserEmail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserEmail.Merge(m, src)
}
func (m *UserEmail) XXX_Size() int {
	return m.Size()
}
func (m *UserEmail) XXX_DiscardUnknown() {
	xxx_messageInfo_UserEmail.DiscardUnknown(m)
}

var xxx_messageInfo_UserEmail proto.InternalMessageInfo

func (m *UserEmail) GetUserEmail() string {
	if m != nil {
		return m.UserEmail
	}
	return ""
}

// UserSession
//
// x-displayName: "UserSession"
// UserSession contains information about active user's sessions in IAM.
type UserSession struct {
	// IPAddress
	//
	// x-displayName: "IPAddress"
	// x-example: "127.0.0.1"
	// IPAddress from which session was initialized.
	IpAddress string `protobuf:"bytes,1,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	// LastAccess
	//
	// x-displayName: "LastAccess"
	// x-example: "2020-04-20T12:32:51.341959216Z"
	// Last recorded activity for the session.
	LastAccess *types.Timestamp `protobuf:"bytes,2,opt,name=last_access,json=lastAccess,proto3" json:"last_access,omitempty"`
	// Start
	//
	// x-displayName: "Start"
	// x-example: "2020-04-20T12:32:51.341959216Z"
	// Time when session was initialized.
	Start *types.Timestamp `protobuf:"bytes,3,opt,name=start,proto3" json:"start,omitempty"`
}

func (m *UserSession) Reset()      { *m = UserSession{} }
func (*UserSession) ProtoMessage() {}
func (*UserSession) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec837e6e53ab5524, []int{6}
}
func (m *UserSession) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserSession) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserSession.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserSession) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserSession.Merge(m, src)
}
func (m *UserSession) XXX_Size() int {
	return m.Size()
}
func (m *UserSession) XXX_DiscardUnknown() {
	xxx_messageInfo_UserSession.DiscardUnknown(m)
}

var xxx_messageInfo_UserSession proto.InternalMessageInfo

func (m *UserSession) GetIpAddress() string {
	if m != nil {
		return m.IpAddress
	}
	return ""
}

func (m *UserSession) GetLastAccess() *types.Timestamp {
	if m != nil {
		return m.LastAccess
	}
	return nil
}

func (m *UserSession) GetStart() *types.Timestamp {
	if m != nil {
		return m.Start
	}
	return nil
}

// UserSessionList
//
// x-displayName: "UserSessionList"
// UserSessionList contains list of user sessions.
type UserSessionList struct {
	// UserSessions
	//
	// x-displayName: "UserSessions"
	// UserSessions contains list of user sessions.
	UserSessions []*UserSession `protobuf:"bytes,1,rep,name=user_sessions,json=userSessions,proto3" json:"user_sessions,omitempty"`
}

func (m *UserSessionList) Reset()      { *m = UserSessionList{} }
func (*UserSessionList) ProtoMessage() {}
func (*UserSessionList) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec837e6e53ab5524, []int{7}
}
func (m *UserSessionList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserSessionList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserSessionList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserSessionList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserSessionList.Merge(m, src)
}
func (m *UserSessionList) XXX_Size() int {
	return m.Size()
}
func (m *UserSessionList) XXX_DiscardUnknown() {
	xxx_messageInfo_UserSessionList.DiscardUnknown(m)
}

var xxx_messageInfo_UserSessionList proto.InternalMessageInfo

func (m *UserSessionList) GetUserSessions() []*UserSession {
	if m != nil {
		return m.UserSessions
	}
	return nil
}

// UpdateImageRequest
//
// x-displayName: "UpdateImageRequest"
// Message contains data for updating user profile image.
type UpdateImageRequest struct {
	// Image.
	//
	// x-displayName: "Image"
	// x-example: "dXNlci1pbWFnZS5qcGVn"
	// Blob of the user profile image.
	Image []byte `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	// ContentType.
	//
	// x-displayName: "ContentType"
	// x-example: "image/jpeg"
	// Type of uploading image.
	ContentType string `protobuf:"bytes,2,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
}

func (m *UpdateImageRequest) Reset()      { *m = UpdateImageRequest{} }
func (*UpdateImageRequest) ProtoMessage() {}
func (*UpdateImageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec837e6e53ab5524, []int{8}
}
func (m *UpdateImageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateImageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateImageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateImageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateImageRequest.Merge(m, src)
}
func (m *UpdateImageRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateImageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateImageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateImageRequest proto.InternalMessageInfo

func (m *UpdateImageRequest) GetImage() []byte {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *UpdateImageRequest) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

// Notification preferences
//
// x-displayName: "Notification preferences"
// Notification preferences information
type NtfnPreferencesMap struct {
	// Ntfn preferences map
	//
	// x-displayName: "Ntfn preferences map"
	// x-example: "['notif-1':false]"
	// Ntfn preferences map contains information whether user is enabled or disabled specific notification.
	NtfnPreferencesMap map[string]bool `protobuf:"bytes,1,rep,name=ntfn_preferences_map,json=ntfnPreferencesMap,proto3" json:"ntfn_preferences_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *NtfnPreferencesMap) Reset()      { *m = NtfnPreferencesMap{} }
func (*NtfnPreferencesMap) ProtoMessage() {}
func (*NtfnPreferencesMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec837e6e53ab5524, []int{9}
}
func (m *NtfnPreferencesMap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NtfnPreferencesMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NtfnPreferencesMap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NtfnPreferencesMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NtfnPreferencesMap.Merge(m, src)
}
func (m *NtfnPreferencesMap) XXX_Size() int {
	return m.Size()
}
func (m *NtfnPreferencesMap) XXX_DiscardUnknown() {
	xxx_messageInfo_NtfnPreferencesMap.DiscardUnknown(m)
}

var xxx_messageInfo_NtfnPreferencesMap proto.InternalMessageInfo

func (m *NtfnPreferencesMap) GetNtfnPreferencesMap() map[string]bool {
	if m != nil {
		return m.NtfnPreferencesMap
	}
	return nil
}

// Notification unset
//
// x-displayName: "Notification unset"
// Notification to unset
type NtfnToUnset struct {
	// Ntfn to unset
	//
	// x-displayName: "Ntfn to unset"
	// x-example: "notif-1"
	// Ntfn to unset contains notification which should be unset for particular user.
	NtfnToUnset string `protobuf:"bytes,1,opt,name=ntfn_to_unset,json=ntfnToUnset,proto3" json:"ntfn_to_unset,omitempty"`
}

func (m *NtfnToUnset) Reset()      { *m = NtfnToUnset{} }
func (*NtfnToUnset) ProtoMessage() {}
func (*NtfnToUnset) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec837e6e53ab5524, []int{10}
}
func (m *NtfnToUnset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NtfnToUnset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NtfnToUnset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NtfnToUnset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NtfnToUnset.Merge(m, src)
}
func (m *NtfnToUnset) XXX_Size() int {
	return m.Size()
}
func (m *NtfnToUnset) XXX_DiscardUnknown() {
	xxx_messageInfo_NtfnToUnset.DiscardUnknown(m)
}

var xxx_messageInfo_NtfnToUnset proto.InternalMessageInfo

func (m *NtfnToUnset) GetNtfnToUnset() string {
	if m != nil {
		return m.NtfnToUnset
	}
	return ""
}

// View preference
//
// x-displayName: "View preference"
// User console view preferences
type SetViewPreferenceRequest struct {
	// Persona preferences
	//
	// x-displayName: "Persona preferences"
	// View preferences based on user's speciality
	PersonaPreferences *PersonaPreferences `protobuf:"bytes,1,opt,name=persona_preferences,json=personaPreferences,proto3" json:"persona_preferences,omitempty"`
	// Advanced view
	//
	// x-displayName: "Advanced view"
	// If true then more options are displayed, otherwise a simplified view is displayed
	AdvancedView bool `protobuf:"varint,2,opt,name=advanced_view,json=advancedView,proto3" json:"advanced_view,omitempty"`
}

func (m *SetViewPreferenceRequest) Reset()      { *m = SetViewPreferenceRequest{} }
func (*SetViewPreferenceRequest) ProtoMessage() {}
func (*SetViewPreferenceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec837e6e53ab5524, []int{11}
}
func (m *SetViewPreferenceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetViewPreferenceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetViewPreferenceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetViewPreferenceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetViewPreferenceRequest.Merge(m, src)
}
func (m *SetViewPreferenceRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetViewPreferenceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetViewPreferenceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetViewPreferenceRequest proto.InternalMessageInfo

func (m *SetViewPreferenceRequest) GetPersonaPreferences() *PersonaPreferences {
	if m != nil {
		return m.PersonaPreferences
	}
	return nil
}

func (m *SetViewPreferenceRequest) GetAdvancedView() bool {
	if m != nil {
		return m.AdvancedView
	}
	return false
}

// Initial access
//
// x-displayName: "Initial access"
// User console view preferences
type InitialAccess struct {
	// Requested
	//
	// x-displayName: "Requested"
	// Boolean flag which shows whether initial access was requested or not.
	Requested bool `protobuf:"varint,1,opt,name=requested,proto3" json:"requested,omitempty"`
	// Last requesting time
	//
	// x-displayName: "Last requesting time"
	// If initial access was requested at least once, last_requesting_time contains last time when it happened.
	LastRequestingTime *types.Timestamp `protobuf:"bytes,2,opt,name=last_requesting_time,json=lastRequestingTime,proto3" json:"last_requesting_time,omitempty"`
	// EmailSent
	//
	// x-displayName: "EmailSent"
	// Boolean flag which shows whether email has been sent or not.
	EmailSent bool `protobuf:"varint,3,opt,name=email_sent,json=emailSent,proto3" json:"email_sent,omitempty"`
}

func (m *InitialAccess) Reset()      { *m = InitialAccess{} }
func (*InitialAccess) ProtoMessage() {}
func (*InitialAccess) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec837e6e53ab5524, []int{12}
}
func (m *InitialAccess) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitialAccess) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitialAccess.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitialAccess) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitialAccess.Merge(m, src)
}
func (m *InitialAccess) XXX_Size() int {
	return m.Size()
}
func (m *InitialAccess) XXX_DiscardUnknown() {
	xxx_messageInfo_InitialAccess.DiscardUnknown(m)
}

var xxx_messageInfo_InitialAccess proto.InternalMessageInfo

func (m *InitialAccess) GetRequested() bool {
	if m != nil {
		return m.Requested
	}
	return false
}

func (m *InitialAccess) GetLastRequestingTime() *types.Timestamp {
	if m != nil {
		return m.LastRequestingTime
	}
	return nil
}

func (m *InitialAccess) GetEmailSent() bool {
	if m != nil {
		return m.EmailSent
	}
	return false
}

// Persona type
//
// x-displayName: "Persona type"
// Preferences to display appropriate content to appropriate audience
type PersonaPreferences struct {
	// DevOps
	//
	// x-displayName: "DevOps"
	// Audience is DevOps
	DevOps bool `protobuf:"varint,1,opt,name=dev_ops,json=devOps,proto3" json:"dev_ops,omitempty"`
	// NetOps
	//
	// x-displayName: "NetOps"
	// Audience is NetOps
	NetOps bool `protobuf:"varint,2,opt,name=net_ops,json=netOps,proto3" json:"net_ops,omitempty"`
	// SecOps
	//
	// x-displayName: "SecOps"
	// Audience is SecOps
	SecOps bool `protobuf:"varint,3,opt,name=sec_ops,json=secOps,proto3" json:"sec_ops,omitempty"`
	// Developer
	//
	// x-displayName: "Developer"
	// Audience is a developer
	Developer bool `protobuf:"varint,4,opt,name=developer,proto3" json:"developer,omitempty"`
	// Admin
	//
	// x-displayName: "Admin"
	// Audience is an admin
	Master bool `protobuf:"varint,5,opt,name=master,proto3" json:"master,omitempty"`
	// Billing
	//
	// x-displayName: "Billing"
	// Audience is a billing admin
	Billing bool `protobuf:"varint,6,opt,name=billing,proto3" json:"billing,omitempty"`
}

func (m *PersonaPreferences) Reset()      { *m = PersonaPreferences{} }
func (*PersonaPreferences) ProtoMessage() {}
func (*PersonaPreferences) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec837e6e53ab5524, []int{13}
}
func (m *PersonaPreferences) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PersonaPreferences) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PersonaPreferences.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PersonaPreferences) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PersonaPreferences.Merge(m, src)
}
func (m *PersonaPreferences) XXX_Size() int {
	return m.Size()
}
func (m *PersonaPreferences) XXX_DiscardUnknown() {
	xxx_messageInfo_PersonaPreferences.DiscardUnknown(m)
}

var xxx_messageInfo_PersonaPreferences proto.InternalMessageInfo

func (m *PersonaPreferences) GetDevOps() bool {
	if m != nil {
		return m.DevOps
	}
	return false
}

func (m *PersonaPreferences) GetNetOps() bool {
	if m != nil {
		return m.NetOps
	}
	return false
}

func (m *PersonaPreferences) GetSecOps() bool {
	if m != nil {
		return m.SecOps
	}
	return false
}

func (m *PersonaPreferences) GetDeveloper() bool {
	if m != nil {
		return m.Developer
	}
	return false
}

func (m *PersonaPreferences) GetMaster() bool {
	if m != nil {
		return m.Master
	}
	return false
}

func (m *PersonaPreferences) GetBilling() bool {
	if m != nil {
		return m.Billing
	}
	return false
}

// View preference
//
// x-displayName: "View preference"
// Preferences to display appropriate content to appropriate audience
type ViewPreference struct {
	// Persona preferences
	//
	// x-displayName: "Persona preferences"
	// View preferences based on user's speciality
	PersonaPreferences *PersonaPreferences `protobuf:"bytes,1,opt,name=persona_preferences,json=personaPreferences,proto3" json:"persona_preferences,omitempty"`
	// Advanced view
	//
	// x-displayName: "Advanced view"
	// If true then more options are displayed, otherwise a simplified view is displayed
	AdvancedView bool `protobuf:"varint,2,opt,name=advanced_view,json=advancedView,proto3" json:"advanced_view,omitempty"`
	// Initialized
	//
	// x-displayName: "Initialized"
	// If true then the user picked their preference
	Initialized bool `protobuf:"varint,3,opt,name=initialized,proto3" json:"initialized,omitempty"`
}

func (m *ViewPreference) Reset()      { *m = ViewPreference{} }
func (*ViewPreference) ProtoMessage() {}
func (*ViewPreference) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec837e6e53ab5524, []int{14}
}
func (m *ViewPreference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ViewPreference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ViewPreference.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ViewPreference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViewPreference.Merge(m, src)
}
func (m *ViewPreference) XXX_Size() int {
	return m.Size()
}
func (m *ViewPreference) XXX_DiscardUnknown() {
	xxx_messageInfo_ViewPreference.DiscardUnknown(m)
}

var xxx_messageInfo_ViewPreference proto.InternalMessageInfo

func (m *ViewPreference) GetPersonaPreferences() *PersonaPreferences {
	if m != nil {
		return m.PersonaPreferences
	}
	return nil
}

func (m *ViewPreference) GetAdvancedView() bool {
	if m != nil {
		return m.AdvancedView
	}
	return false
}

func (m *ViewPreference) GetInitialized() bool {
	if m != nil {
		return m.Initialized
	}
	return false
}

func init() {
	proto.RegisterType((*Empty)(nil), "ves.io.schema.user.setting.Empty")
	proto.RegisterType((*Notification)(nil), "ves.io.schema.user.setting.Notification")
	proto.RegisterType((*NotificationList)(nil), "ves.io.schema.user.setting.NotificationList")
	proto.RegisterType((*UserSettingsRequest)(nil), "ves.io.schema.user.setting.UserSettingsRequest")
	proto.RegisterType((*UserSettingsResponse)(nil), "ves.io.schema.user.setting.UserSettingsResponse")
	proto.RegisterType((*UserEmail)(nil), "ves.io.schema.user.setting.UserEmail")
	proto.RegisterType((*UserSession)(nil), "ves.io.schema.user.setting.UserSession")
	proto.RegisterType((*UserSessionList)(nil), "ves.io.schema.user.setting.UserSessionList")
	proto.RegisterType((*UpdateImageRequest)(nil), "ves.io.schema.user.setting.UpdateImageRequest")
	proto.RegisterType((*NtfnPreferencesMap)(nil), "ves.io.schema.user.setting.NtfnPreferencesMap")
	proto.RegisterMapType((map[string]bool)(nil), "ves.io.schema.user.setting.NtfnPreferencesMap.NtfnPreferencesMapEntry")
	proto.RegisterType((*NtfnToUnset)(nil), "ves.io.schema.user.setting.NtfnToUnset")
	proto.RegisterType((*SetViewPreferenceRequest)(nil), "ves.io.schema.user.setting.SetViewPreferenceRequest")
	proto.RegisterType((*InitialAccess)(nil), "ves.io.schema.user.setting.InitialAccess")
	proto.RegisterType((*PersonaPreferences)(nil), "ves.io.schema.user.setting.PersonaPreferences")
	proto.RegisterType((*ViewPreference)(nil), "ves.io.schema.user.setting.ViewPreference")
}

func init() {
	proto.RegisterFile("ves.io/schema/user/setting/custom_api.proto", fileDescriptor_ec837e6e53ab5524)
}

var fileDescriptor_ec837e6e53ab5524 = []byte{
	// 1970 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x59, 0x4d, 0x6c, 0x1b, 0xc7,
	0xf5, 0xd7, 0x50, 0x96, 0x6c, 0x0e, 0x25, 0xcb, 0x19, 0xcb, 0x7f, 0xd3, 0x1b, 0x9b, 0x56, 0xf6,
	0x8f, 0x42, 0x8a, 0x2c, 0x72, 0x13, 0x39, 0x6e, 0x1c, 0xc5, 0x49, 0x20, 0xd9, 0xaa, 0x2a, 0xc0,
	0x91, 0x05, 0xda, 0xee, 0xa1, 0x87, 0x2e, 0x96, 0xbb, 0x4f, 0xf4, 0x34, 0xdc, 0x8f, 0xee, 0x0c,
	0x29, 0xb1, 0x68, 0x80, 0x36, 0xfd, 0x48, 0xd1, 0x43, 0x5b, 0xa0, 0xb7, 0xf6, 0xd2, 0x63, 0x2f,
	0x45, 0xaf, 0x45, 0x03, 0x14, 0x41, 0x2f, 0x32, 0x8a, 0x22, 0x30, 0x12, 0x14, 0x4d, 0x91, 0x4b,
	0x4c, 0xf7, 0x50, 0x24, 0x97, 0xdc, 0xda, 0x53, 0x51, 0xcc, 0x07, 0xa5, 0xa5, 0x3e, 0xc8, 0x15,
	0x4d, 0x01, 0xbd, 0x71, 0xde, 0x9b, 0x79, 0xf3, 0x7e, 0xbf, 0xf7, 0x31, 0x33, 0x4b, 0x7c, 0xa5,
	0x01, 0xac, 0x44, 0x43, 0x8b, 0xb9, 0x0f, 0xc0, 0x77, 0xac, 0x3a, 0x83, 0xd8, 0x62, 0xc0, 0x39,
	0x0d, 0xaa, 0x96, 0x5b, 0x67, 0x3c, 0xf4, 0x6d, 0x27, 0xa2, 0xa5, 0x28, 0x0e, 0x79, 0x48, 0x0c,
	0x35, 0xb9, 0xa4, 0x26, 0x97, 0xc4, 0xe4, 0x92, 0x9e, 0x6c, 0x5c, 0xac, 0x86, 0x61, 0xb5, 0x06,
	0x96, 0x13, 0x51, 0xcb, 0x09, 0x82, 0x90, 0x3b, 0x9c, 0x86, 0x01, 0x53, 0x2b, 0x8d, 0x0b, 0x09,
	0xed, 0x03, 0xce, 0xa3, 0x4a, 0xe8, 0x35, 0xb5, 0xea, 0xb2, 0x56, 0xc9, 0x51, 0xa5, 0xbe, 0x61,
	0x71, 0xea, 0x03, 0xe3, 0x8e, 0x1f, 0xe9, 0x09, 0xcf, 0x76, 0xba, 0x18, 0x46, 0x49, 0xc3, 0x53,
	0x9d, 0x4a, 0x0e, 0x81, 0x13, 0x70, 0x8b, 0x37, 0x23, 0xd8, 0xd9, 0x7a, 0xcf, 0x8c, 0x84, 0xca,
	0xec, 0x54, 0x35, 0x80, 0x41, 0xd0, 0xe8, 0xdc, 0xc0, 0x3c, 0x89, 0x47, 0x96, 0xfd, 0x88, 0x37,
	0x4d, 0x8e, 0xc7, 0xd6, 0x42, 0x4e, 0x37, 0xa8, 0x2b, 0x91, 0x11, 0x82, 0x4f, 0xb8, 0xa1, 0x07,
	0x79, 0x34, 0x85, 0x66, 0xb2, 0x65, 0xf9, 0x9b, 0x4c, 0xe2, 0x91, 0x9a, 0x53, 0x81, 0x5a, 0x3e,
	0x23, 0x85, 0x6a, 0x40, 0xa6, 0x70, 0xce, 0x03, 0xe6, 0xc6, 0x54, 0x1a, 0xce, 0x0f, 0x4b, 0x5d,
	0x52, 0x44, 0xf2, 0xf8, 0x24, 0x04, 0x4e, 0xa5, 0x06, 0x5e, 0xfe, 0xc4, 0x14, 0x9a, 0x39, 0x55,
	0x6e, 0x0f, 0xcd, 0x0a, 0x3e, 0x93, 0xdc, 0xf5, 0x36, 0x65, 0x9c, 0xac, 0xe1, 0xf1, 0x20, 0x21,
	0x63, 0x79, 0x34, 0x35, 0x3c, 0x93, 0x9b, 0x9f, 0x29, 0x1d, 0x1e, 0x9e, 0x52, 0xd2, 0x48, 0xb9,
	0x73, 0xb9, 0xf9, 0x27, 0x84, 0xcf, 0xde, 0x67, 0x10, 0xdf, 0x55, 0x73, 0x59, 0x19, 0xbe, 0x55,
	0x07, 0xc6, 0xc9, 0x55, 0x7c, 0x4e, 0xbb, 0x61, 0xef, 0xdf, 0x2f, 0x5b, 0x9e, 0xd4, 0xca, 0xa4,
	0x69, 0x46, 0x2e, 0xe0, 0x11, 0xea, 0x3b, 0x55, 0x90, 0x14, 0x8c, 0x2d, 0x0d, 0x3f, 0x7c, 0x1b,
	0x95, 0x95, 0x84, 0x5c, 0xc2, 0x78, 0x83, 0xc6, 0x8c, 0xdb, 0x81, 0xe3, 0x83, 0xa6, 0x21, 0x2b,
	0x25, 0x6b, 0x8e, 0x0f, 0xe4, 0x59, 0x9c, 0xad, 0x39, 0x6d, 0xed, 0x09, 0xa9, 0x3d, 0x25, 0x04,
	0x52, 0x79, 0x19, 0xe7, 0x42, 0x1e, 0xd9, 0x6d, 0x96, 0x46, 0x24, 0x4b, 0x38, 0xe4, 0xd1, 0xb2,
	0x26, 0xea, 0xf3, 0x0c, 0x9e, 0xec, 0x04, 0xc1, 0xa2, 0x30, 0x60, 0x30, 0x68, 0xb6, 0xba, 0x01,
	0xdc, 0xe3, 0xe4, 0xf0, 0x5e, 0x27, 0xc9, 0xeb, 0x58, 0x8c, 0x6c, 0xc6, 0x1d, 0x5e, 0x67, 0x12,
	0xe3, 0xe9, 0xf9, 0xcb, 0x7b, 0x1c, 0x51, 0x29, 0x5c, 0xba, 0xc3, 0xa3, 0xbb, 0x72, 0x5a, 0x39,
	0x1b, 0xb6, 0x7f, 0x92, 0x75, 0x7c, 0x9a, 0x06, 0x94, 0x53, 0xa7, 0x66, 0x3b, 0xae, 0x0b, 0x8c,
	0xe5, 0x73, 0x53, 0x68, 0x26, 0x37, 0xff, 0x7c, 0x37, 0x30, 0xab, 0x6a, 0xc5, 0xa2, 0x5c, 0x50,
	0x1e, 0xa7, 0xc9, 0x21, 0xb9, 0x86, 0xcf, 0x53, 0x66, 0x07, 0xb0, 0xc5, 0xed, 0x58, 0x85, 0xdd,
	0x76, 0x6a, 0xb5, 0x70, 0x73, 0x87, 0xe3, 0x49, 0xca, 0xd6, 0x60, 0x8b, 0xeb, 0x9c, 0x58, 0x54,
	0x3a, 0x73, 0x16, 0x67, 0x05, 0xd9, 0xcb, 0xbe, 0x43, 0x6b, 0x22, 0xae, 0x62, 0x43, 0x1b, 0xc4,
	0x48, 0xd7, 0x43, 0xb6, 0xde, 0x56, 0x9b, 0xbf, 0x42, 0x38, 0xa7, 0x22, 0xc3, 0x98, 0x48, 0xf6,
	0x4b, 0x18, 0xd3, 0xc8, 0x76, 0x3c, 0x2f, 0x16, 0x00, 0xf4, 0x74, 0x1a, 0x2d, 0x2a, 0x01, 0x79,
	0x15, 0xe7, 0x64, 0x1a, 0x68, 0x80, 0x19, 0x09, 0xd0, 0x28, 0xa9, 0x2e, 0x51, 0x6a, 0x77, 0x89,
	0xd2, 0xbd, 0x76, 0x97, 0x28, 0x63, 0x31, 0x5d, 0xc3, 0x79, 0x01, 0x8f, 0x30, 0xee, 0xc4, 0x5c,
	0x72, 0xdf, 0x7d, 0x99, 0x9a, 0x68, 0xda, 0x78, 0x22, 0xe1, 0x9c, 0xac, 0xaf, 0xdb, 0x78, 0x5c,
	0xe2, 0x61, 0x4a, 0xd6, 0xce, 0x98, 0xe9, 0x6e, 0x24, 0x27, 0x6c, 0x94, 0xc7, 0xea, 0xbb, 0x03,
	0x66, 0x96, 0x31, 0xb9, 0x1f, 0x79, 0x0e, 0x87, 0x55, 0x91, 0x23, 0xed, 0xda, 0xda, 0xc9, 0x22,
	0xb4, 0x2f, 0x8b, 0x9e, 0xc3, 0x63, 0x6e, 0x18, 0x70, 0x08, 0xb8, 0x2d, 0x9a, 0x95, 0xee, 0x25,
	0x39, 0x2d, 0xbb, 0xd7, 0x8c, 0xc0, 0xfc, 0x2b, 0xc2, 0x64, 0x8d, 0x6f, 0x04, 0xeb, 0x31, 0x6c,
	0x40, 0x0c, 0x81, 0x0b, 0xec, 0x4d, 0x27, 0x22, 0x5b, 0x78, 0x32, 0xe0, 0x1b, 0x81, 0x1d, 0xed,
	0x8a, 0x6d, 0xdf, 0x89, 0xb4, 0xff, 0x5f, 0xe9, 0x9a, 0xf1, 0xfb, 0xac, 0x1d, 0x20, 0x5a, 0x0e,
	0x78, 0xdc, 0x2c, 0x93, 0x60, 0x9f, 0xc2, 0x58, 0xc6, 0xe7, 0x0f, 0x99, 0x4e, 0xce, 0xe0, 0xe1,
	0xb7, 0xa0, 0xa9, 0xe3, 0x2c, 0x7e, 0x8a, 0x2e, 0xd9, 0x70, 0x6a, 0x75, 0x85, 0xec, 0x54, 0x59,
	0x0d, 0x16, 0x32, 0xd7, 0x91, 0xf9, 0x22, 0xce, 0x09, 0x33, 0xf7, 0xc2, 0xfb, 0x01, 0x03, 0x4e,
	0x4c, 0x3c, 0x2e, 0xf1, 0xf0, 0xd0, 0xae, 0x0b, 0x81, 0x36, 0x92, 0x0b, 0x76, 0xe7, 0x98, 0xbf,
	0x46, 0x38, 0x7f, 0x17, 0xf8, 0xd7, 0x28, 0x6c, 0xee, 0xee, 0xde, 0x66, 0xd9, 0xc6, 0x67, 0x23,
	0x88, 0x59, 0x18, 0x38, 0x49, 0x4e, 0xa4, 0x99, 0xdc, 0x7c, 0xa9, 0x1b, 0x1f, 0xeb, 0x6a, 0x59,
	0x02, 0x50, 0x99, 0x44, 0xfb, 0x64, 0xe4, 0xff, 0xf1, 0xb8, 0xe3, 0x35, 0x9c, 0xc0, 0x05, 0xcf,
	0x6e, 0x50, 0xd8, 0xd4, 0x90, 0xc6, 0xda, 0x42, 0xe1, 0x96, 0xf9, 0x4b, 0x84, 0xc7, 0x3b, 0x8a,
	0x90, 0x5c, 0xc4, 0x59, 0x5d, 0x6d, 0xe0, 0x49, 0x6f, 0x4e, 0x95, 0x77, 0x05, 0xe4, 0x36, 0x9e,
	0x94, 0x15, 0xa0, 0x25, 0x34, 0xa8, 0xda, 0xe2, 0x4c, 0x4c, 0x51, 0x0a, 0x44, 0xac, 0x2b, 0xef,
	0x2c, 0x13, 0x0a, 0x51, 0x6e, 0xb2, 0x30, 0x6d, 0x06, 0x01, 0xd7, 0x3d, 0x29, 0x2b, 0x25, 0x77,
	0x21, 0xe0, 0xe6, 0xef, 0x10, 0x26, 0xfb, 0xc1, 0x92, 0xf3, 0xf8, 0xa4, 0x07, 0x0d, 0x3b, 0x8c,
	0x98, 0xf6, 0x6f, 0xd4, 0x83, 0xc6, 0x9d, 0x48, 0x2a, 0x02, 0xe0, 0x52, 0xa1, 0xb0, 0x8e, 0x06,
	0xc0, 0xb5, 0x82, 0x81, 0x2b, 0x15, 0x6a, 0x93, 0x51, 0x06, 0xae, 0x50, 0x5c, 0xc4, 0x59, 0x0f,
	0x1a, 0x50, 0x0b, 0x23, 0x88, 0xf5, 0xf1, 0xb6, 0x2b, 0x20, 0xff, 0x87, 0x47, 0x7d, 0x87, 0x71,
	0x88, 0x75, 0xbf, 0xd1, 0x23, 0x71, 0x24, 0x56, 0x68, 0xad, 0x46, 0x83, 0x6a, 0x7e, 0x54, 0x1d,
	0x89, 0x7a, 0x68, 0xfe, 0x1e, 0xe1, 0xd3, 0x9d, 0xe1, 0xfe, 0xdf, 0x88, 0xb3, 0x38, 0xe7, 0x75,
	0x73, 0xa5, 0xdf, 0xde, 0x69, 0xff, 0x49, 0xd1, 0xfc, 0xc3, 0x69, 0x9c, 0xbd, 0x29, 0x6f, 0x55,
	0x8b, 0xeb, 0xab, 0xe4, 0x0f, 0x08, 0x0f, 0xaf, 0x00, 0x27, 0xcf, 0x75, 0x73, 0x50, 0x5e, 0x3e,
	0x8c, 0x17, 0x7a, 0xf7, 0x9e, 0xce, 0x63, 0xcf, 0xfc, 0x46, 0x6b, 0x3b, 0x7f, 0x65, 0xe3, 0xda,
	0x96, 0x5b, 0xf4, 0x60, 0xc3, 0xa9, 0xd7, 0x78, 0x51, 0x35, 0xd4, 0x39, 0x71, 0x63, 0x2a, 0xd2,
	0xb0, 0xb8, 0x09, 0x15, 0x2d, 0x2a, 0xc6, 0xe0, 0x78, 0xef, 0x7c, 0xf4, 0x8f, 0x5f, 0x64, 0x9e,
	0x27, 0xd3, 0x56, 0x54, 0xaf, 0xd4, 0xa8, 0x6b, 0x89, 0x53, 0x98, 0x45, 0x8e, 0x0b, 0xcc, 0x62,
	0x4d, 0xc6, 0xc1, 0xef, 0xb8, 0x1b, 0x32, 0xf2, 0x3e, 0xc2, 0xa3, 0xaa, 0xaf, 0x11, 0x2b, 0xbd,
	0x73, 0x32, 0x33, 0x8d, 0xde, 0x80, 0xcd, 0x4a, 0x6b, 0x3b, 0x3f, 0x97, 0xd2, 0xfd, 0xcd, 0x98,
	0x72, 0x90, 0xfe, 0xcf, 0x19, 0x69, 0xfd, 0x5f, 0x40, 0xb3, 0xe4, 0x2f, 0x08, 0x4f, 0xac, 0x00,
	0x4f, 0xb4, 0x6e, 0x96, 0x26, 0x16, 0x57, 0x52, 0x9e, 0x03, 0xe2, 0x2c, 0x31, 0x69, 0x6b, 0x3b,
	0xff, 0x65, 0x89, 0xc3, 0x0d, 0x03, 0x16, 0xd6, 0xa0, 0x58, 0x71, 0x18, 0x75, 0x8b, 0x7e, 0x18,
	0x50, 0x1e, 0xc6, 0x73, 0x53, 0x52, 0x57, 0x71, 0x18, 0xec, 0x20, 0xab, 0x3b, 0xfe, 0xd1, 0x22,
	0xa2, 0x5d, 0xff, 0x2d, 0xc2, 0x63, 0x1a, 0xce, 0xaa, 0x3a, 0x48, 0x7a, 0x63, 0x99, 0x6c, 0x37,
	0x13, 0x71, 0xc9, 0xff, 0x2a, 0xe7, 0xd1, 0x52, 0xe8, 0x35, 0x4d, 0xaf, 0x9f, 0xdc, 0xb1, 0x48,
	0x31, 0x25, 0xf7, 0x96, 0x3a, 0xe7, 0x3e, 0x40, 0x78, 0x42, 0x65, 0xd0, 0xae, 0xcb, 0x5d, 0x6b,
	0x75, 0xff, 0x31, 0x9a, 0x26, 0x93, 0x1e, 0xf4, 0x95, 0x49, 0xf3, 0xc6, 0xd1, 0xd0, 0x88, 0x7c,
	0xfa, 0x23, 0xc2, 0x13, 0xb7, 0xa0, 0x06, 0x49, 0x40, 0x29, 0x62, 0x90, 0x02, 0x03, 0xf4, 0x85,
	0xc1, 0x9a, 0x3d, 0x62, 0x44, 0x3e, 0x41, 0xf8, 0x5c, 0x19, 0x18, 0xf0, 0x3b, 0x3c, 0xba, 0x05,
	0x0d, 0xea, 0xc2, 0x52, 0x73, 0xd1, 0xf3, 0x69, 0x40, 0xbe, 0xd4, 0x2b, 0xe7, 0xe5, 0x55, 0x2f,
	0x0d, 0x94, 0xad, 0xd6, 0x76, 0xfe, 0xd5, 0x03, 0x0a, 0xc2, 0x11, 0xfb, 0x1c, 0x56, 0x0e, 0x52,
	0x99, 0x40, 0x76, 0xd5, 0x28, 0xf5, 0x40, 0x16, 0xf2, 0xc8, 0x92, 0xab, 0xec, 0x58, 0x00, 0x12,
	0xe1, 0xf9, 0x3b, 0xc2, 0x13, 0xea, 0x22, 0x2e, 0xc3, 0x13, 0xac, 0xde, 0x7a, 0x73, 0x80, 0xb8,
	0xbe, 0x33, 0x08, 0x5c, 0x2f, 0x1b, 0xf3, 0xa9, 0x23, 0xe6, 0xf9, 0x96, 0x7a, 0x68, 0x08, 0x6c,
	0x9f, 0x20, 0x7c, 0xe6, 0x16, 0x65, 0xc7, 0x05, 0xee, 0xed, 0x41, 0x80, 0xbb, 0x6e, 0x5c, 0x3d,
	0x0a, 0x38, 0x4f, 0xc1, 0x11, 0xe8, 0xfe, 0x86, 0xf0, 0xa4, 0xae, 0xf8, 0xce, 0x7b, 0xd4, 0x60,
	0xaa, 0xab, 0xd9, 0x57, 0x75, 0xdd, 0x34, 0x5e, 0x4f, 0x0b, 0xa7, 0xfd, 0xb2, 0xea, 0x7c, 0xbb,
	0x09, 0x64, 0x7f, 0x46, 0x98, 0xac, 0x00, 0xdf, 0x73, 0x77, 0x4e, 0x83, 0x6b, 0x2e, 0xed, 0xfb,
	0x55, 0x1e, 0x43, 0x6e, 0x3f, 0x1d, 0xbd, 0x44, 0xe6, 0x7a, 0x20, 0xec, 0x7c, 0x19, 0x7f, 0x84,
	0xf0, 0x39, 0xd5, 0xa3, 0xf7, 0xe2, 0x29, 0x1d, 0xed, 0xe9, 0x91, 0x26, 0x68, 0xd5, 0xbe, 0x82,
	0xf6, 0xa2, 0x71, 0x24, 0x48, 0x22, 0x44, 0x8f, 0x10, 0x3e, 0x2b, 0x9f, 0x1a, 0x9d, 0x7e, 0x92,
	0xe9, 0x5e, 0x98, 0xf4, 0x0b, 0x25, 0x0d, 0x18, 0xbf, 0x2f, 0x30, 0xbd, 0xbb, 0x45, 0x07, 0x18,
	0x4b, 0xbe, 0xa1, 0x04, 0xa4, 0xcf, 0x33, 0xf8, 0xfc, 0x0a, 0x70, 0xd9, 0xda, 0x8f, 0x3d, 0xf5,
	0xfe, 0x83, 0x5a, 0xdb, 0xf9, 0x85, 0xfe, 0x9a, 0x87, 0x48, 0xc5, 0xcf, 0xb6, 0xf3, 0xdf, 0x43,
	0xf8, 0x86, 0xd6, 0xa9, 0x2d, 0x8b, 0x62, 0xcb, 0xa2, 0xde, 0xb2, 0xa8, 0xbe, 0x53, 0x3a, 0x11,
	0x2d, 0x56, 0x81, 0xcb, 0x85, 0xe2, 0x81, 0x98, 0x78, 0x08, 0x90, 0x57, 0xf0, 0x70, 0x15, 0x38,
	0xe9, 0x45, 0x97, 0x3a, 0x30, 0x3a, 0x48, 0x33, 0x46, 0xd5, 0x04, 0x49, 0xf8, 0x4b, 0xfd, 0x58,
	0x20, 0xff, 0xca, 0x60, 0x43, 0x95, 0xc5, 0x81, 0x84, 0x1f, 0x43, 0x6d, 0xfc, 0x30, 0xf3, 0x94,
	0xfd, 0xfa, 0xb3, 0xed, 0xfc, 0x0f, 0x10, 0x7e, 0x23, 0x15, 0xe7, 0x75, 0x09, 0xed, 0x30, 0xda,
	0xa3, 0xfa, 0xd3, 0xd3, 0xde, 0x3b, 0xcf, 0x0f, 0xb0, 0x20, 0xf2, 0xfc, 0xdf, 0x19, 0x9c, 0x97,
	0x35, 0x78, 0x00, 0xf1, 0x03, 0xad, 0xdf, 0x9f, 0x0d, 0x80, 0xf0, 0x1f, 0x23, 0xfc, 0x5a, 0x3a,
	0xc2, 0x85, 0x57, 0x07, 0xf0, 0x4d, 0xde, 0x50, 0x74, 0x5f, 0x3f, 0x3a, 0x59, 0xaa, 0x35, 0x74,
	0x90, 0xfe, 0x9a, 0xd1, 0xb7, 0x1d, 0x41, 0xbd, 0x48, 0xfa, 0x15, 0xe0, 0x37, 0x43, 0xbf, 0x42,
	0x03, 0xf0, 0x8e, 0xbd, 0xcb, 0xbc, 0x9b, 0x79, 0xea, 0x2e, 0xf3, 0x6e, 0xda, 0x8c, 0xaf, 0x02,
	0x77, 0x35, 0xae, 0xbd, 0x19, 0x7f, 0x43, 0x35, 0x9a, 0x6b, 0x3d, 0xa8, 0x6b, 0x2f, 0xef, 0x96,
	0xf4, 0x7d, 0x1a, 0x21, 0xdf, 0x1f, 0xc6, 0x97, 0x54, 0xbb, 0x39, 0x8c, 0xfc, 0x63, 0xe8, 0x38,
	0x3f, 0x1d, 0x40, 0x01, 0xfc, 0x04, 0xe1, 0xa5, 0x23, 0x74, 0x9c, 0x2e, 0x21, 0x10, 0x55, 0x30,
	0x80, 0x10, 0x2c, 0x18, 0xfd, 0x19, 0x11, 0xf9, 0xff, 0x21, 0xc2, 0xcf, 0xac, 0xec, 0xfd, 0x2c,
	0x99, 0x26, 0xed, 0x67, 0xbb, 0x4d, 0xe9, 0x34, 0x67, 0x06, 0xfd, 0xdc, 0xea, 0x5e, 0x21, 0x2f,
	0xa7, 0xbd, 0xb7, 0x36, 0x28, 0x6c, 0x26, 0x3e, 0xa8, 0x91, 0x4f, 0x11, 0x7e, 0x66, 0xdf, 0xb7,
	0x56, 0xf2, 0x52, 0x37, 0x8f, 0x0f, 0xfb, 0x34, 0x9b, 0x26, 0xa9, 0xe2, 0xbe, 0x6e, 0x45, 0x37,
	0x8c, 0x7e, 0xf1, 0x2d, 0xa0, 0x59, 0x63, 0xfa, 0xfd, 0xf7, 0xd0, 0xf0, 0x87, 0xef, 0xa1, 0x0b,
	0x07, 0x78, 0x77, 0xa7, 0xf2, 0x4d, 0x70, 0xf9, 0x3b, 0x1f, 0xe4, 0x33, 0x0f, 0xd0, 0xd2, 0x8f,
	0xd0, 0xa3, 0xc7, 0x85, 0xa1, 0x8f, 0x1f, 0x17, 0x86, 0xbe, 0x78, 0x5c, 0x40, 0xdf, 0x6d, 0x15,
	0xd0, 0x6f, 0x5a, 0x05, 0xf4, 0xb0, 0x55, 0x40, 0x8f, 0x5a, 0x05, 0xf4, 0x69, 0xab, 0x80, 0xfe,
	0xd9, 0x2a, 0x0c, 0x7d, 0xd1, 0x2a, 0xa0, 0x9f, 0x3f, 0x29, 0x0c, 0x3d, 0x7a, 0x52, 0x18, 0xfa,
	0xf8, 0x49, 0x61, 0xe8, 0xeb, 0xeb, 0xd5, 0x30, 0x7a, 0xab, 0x5a, 0x6a, 0x84, 0x35, 0x0e, 0x71,
	0x2c, 0x0c, 0x5b, 0xf2, 0xc7, 0x46, 0x18, 0xfb, 0xc5, 0x28, 0x0e, 0x1b, 0xd4, 0x83, 0xb8, 0xd8,
	0x56, 0x5b, 0x51, 0xa5, 0x1a, 0x5a, 0xb0, 0xc5, 0xf5, 0x3f, 0x94, 0x07, 0xfc, 0x4b, 0x5b, 0x19,
	0x95, 0xdf, 0x81, 0xaf, 0xfe, 0x37, 0x00, 0x00, 0xff, 0xff, 0xe3, 0xe4, 0x30, 0x2f, 0xca, 0x1d,
	0x00, 0x00,
}

func (this *Empty) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Empty)
	if !ok {
		that2, ok := that.(Empty)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Notification) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Notification)
	if !ok {
		that2, ok := that.(Notification)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Label != that1.Label {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Enabled != that1.Enabled {
		return false
	}
	return true
}
func (this *NotificationList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NotificationList)
	if !ok {
		that2, ok := that.(NotificationList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Notifications) != len(that1.Notifications) {
		return false
	}
	for i := range this.Notifications {
		if !this.Notifications[i].Equal(that1.Notifications[i]) {
			return false
		}
	}
	return true
}
func (this *UserSettingsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserSettingsRequest)
	if !ok {
		that2, ok := that.(UserSettingsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.EnabledNotifications) != len(that1.EnabledNotifications) {
		return false
	}
	for i := range this.EnabledNotifications {
		if this.EnabledNotifications[i] != that1.EnabledNotifications[i] {
			return false
		}
	}
	if !bytes.Equal(this.Image, that1.Image) {
		return false
	}
	if this.FirstName != that1.FirstName {
		return false
	}
	if this.LastName != that1.LastName {
		return false
	}
	if this.OtpEnabled != that1.OtpEnabled {
		return false
	}
	return true
}
func (this *UserSettingsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserSettingsResponse)
	if !ok {
		that2, ok := that.(UserSettingsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Notifications) != len(that1.Notifications) {
		return false
	}
	for i := range this.Notifications {
		if !this.Notifications[i].Equal(that1.Notifications[i]) {
			return false
		}
	}
	if !bytes.Equal(this.Image, that1.Image) {
		return false
	}
	if this.OtpEnabled != that1.OtpEnabled {
		return false
	}
	if this.OtpStatus != that1.OtpStatus {
		return false
	}
	if !this.InitialAccess.Equal(that1.InitialAccess) {
		return false
	}
	if this.IsNextRequestAllowed != that1.IsNextRequestAllowed {
		return false
	}
	return true
}
func (this *UserEmail) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserEmail)
	if !ok {
		that2, ok := that.(UserEmail)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UserEmail != that1.UserEmail {
		return false
	}
	return true
}
func (this *UserSession) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserSession)
	if !ok {
		that2, ok := that.(UserSession)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IpAddress != that1.IpAddress {
		return false
	}
	if !this.LastAccess.Equal(that1.LastAccess) {
		return false
	}
	if !this.Start.Equal(that1.Start) {
		return false
	}
	return true
}
func (this *UserSessionList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserSessionList)
	if !ok {
		that2, ok := that.(UserSessionList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.UserSessions) != len(that1.UserSessions) {
		return false
	}
	for i := range this.UserSessions {
		if !this.UserSessions[i].Equal(that1.UserSessions[i]) {
			return false
		}
	}
	return true
}
func (this *UpdateImageRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateImageRequest)
	if !ok {
		that2, ok := that.(UpdateImageRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Image, that1.Image) {
		return false
	}
	if this.ContentType != that1.ContentType {
		return false
	}
	return true
}
func (this *NtfnPreferencesMap) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NtfnPreferencesMap)
	if !ok {
		that2, ok := that.(NtfnPreferencesMap)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.NtfnPreferencesMap) != len(that1.NtfnPreferencesMap) {
		return false
	}
	for i := range this.NtfnPreferencesMap {
		if this.NtfnPreferencesMap[i] != that1.NtfnPreferencesMap[i] {
			return false
		}
	}
	return true
}
func (this *NtfnToUnset) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NtfnToUnset)
	if !ok {
		that2, ok := that.(NtfnToUnset)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NtfnToUnset != that1.NtfnToUnset {
		return false
	}
	return true
}
func (this *SetViewPreferenceRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetViewPreferenceRequest)
	if !ok {
		that2, ok := that.(SetViewPreferenceRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PersonaPreferences.Equal(that1.PersonaPreferences) {
		return false
	}
	if this.AdvancedView != that1.AdvancedView {
		return false
	}
	return true
}
func (this *InitialAccess) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InitialAccess)
	if !ok {
		that2, ok := that.(InitialAccess)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Requested != that1.Requested {
		return false
	}
	if !this.LastRequestingTime.Equal(that1.LastRequestingTime) {
		return false
	}
	if this.EmailSent != that1.EmailSent {
		return false
	}
	return true
}
func (this *PersonaPreferences) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PersonaPreferences)
	if !ok {
		that2, ok := that.(PersonaPreferences)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DevOps != that1.DevOps {
		return false
	}
	if this.NetOps != that1.NetOps {
		return false
	}
	if this.SecOps != that1.SecOps {
		return false
	}
	if this.Developer != that1.Developer {
		return false
	}
	if this.Master != that1.Master {
		return false
	}
	if this.Billing != that1.Billing {
		return false
	}
	return true
}
func (this *ViewPreference) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ViewPreference)
	if !ok {
		that2, ok := that.(ViewPreference)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PersonaPreferences.Equal(that1.PersonaPreferences) {
		return false
	}
	if this.AdvancedView != that1.AdvancedView {
		return false
	}
	if this.Initialized != that1.Initialized {
		return false
	}
	return true
}
func (this *Empty) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&setting.Empty{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Notification) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&setting.Notification{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Label: "+fmt.Sprintf("%#v", this.Label)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "Enabled: "+fmt.Sprintf("%#v", this.Enabled)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NotificationList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&setting.NotificationList{")
	if this.Notifications != nil {
		s = append(s, "Notifications: "+fmt.Sprintf("%#v", this.Notifications)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UserSettingsRequest) goString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&setting.UserSettingsRequest{")
	s = append(s, "EnabledNotifications: "+fmt.Sprintf("%#v", this.EnabledNotifications)+",\n")
	s = append(s, "Image: "+fmt.Sprintf("%#v", this.Image)+",\n")
	s = append(s, "FirstName: "+fmt.Sprintf("%#v", this.FirstName)+",\n")
	s = append(s, "LastName: "+fmt.Sprintf("%#v", this.LastName)+",\n")
	s = append(s, "OtpEnabled: "+fmt.Sprintf("%#v", this.OtpEnabled)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UserSettingsResponse) goString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&setting.UserSettingsResponse{")
	if this.Notifications != nil {
		s = append(s, "Notifications: "+fmt.Sprintf("%#v", this.Notifications)+",\n")
	}
	s = append(s, "Image: "+fmt.Sprintf("%#v", this.Image)+",\n")
	s = append(s, "OtpEnabled: "+fmt.Sprintf("%#v", this.OtpEnabled)+",\n")
	s = append(s, "OtpStatus: "+fmt.Sprintf("%#v", this.OtpStatus)+",\n")
	if this.InitialAccess != nil {
		s = append(s, "InitialAccess: "+fmt.Sprintf("%#v", this.InitialAccess)+",\n")
	}
	s = append(s, "IsNextRequestAllowed: "+fmt.Sprintf("%#v", this.IsNextRequestAllowed)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UserEmail) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&setting.UserEmail{")
	s = append(s, "UserEmail: "+fmt.Sprintf("%#v", this.UserEmail)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UserSession) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&setting.UserSession{")
	s = append(s, "IpAddress: "+fmt.Sprintf("%#v", this.IpAddress)+",\n")
	if this.LastAccess != nil {
		s = append(s, "LastAccess: "+fmt.Sprintf("%#v", this.LastAccess)+",\n")
	}
	if this.Start != nil {
		s = append(s, "Start: "+fmt.Sprintf("%#v", this.Start)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UserSessionList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&setting.UserSessionList{")
	if this.UserSessions != nil {
		s = append(s, "UserSessions: "+fmt.Sprintf("%#v", this.UserSessions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateImageRequest) goString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&setting.UpdateImageRequest{")
	s = append(s, "Image: "+fmt.Sprintf("%#v", this.Image)+",\n")
	s = append(s, "ContentType: "+fmt.Sprintf("%#v", this.ContentType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NtfnPreferencesMap) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&setting.NtfnPreferencesMap{")
	keysForNtfnPreferencesMap := make([]string, 0, len(this.NtfnPreferencesMap))
	for k, _ := range this.NtfnPreferencesMap {
		keysForNtfnPreferencesMap = append(keysForNtfnPreferencesMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForNtfnPreferencesMap)
	mapStringForNtfnPreferencesMap := "map[string]bool{"
	for _, k := range keysForNtfnPreferencesMap {
		mapStringForNtfnPreferencesMap += fmt.Sprintf("%#v: %#v,", k, this.NtfnPreferencesMap[k])
	}
	mapStringForNtfnPreferencesMap += "}"
	if this.NtfnPreferencesMap != nil {
		s = append(s, "NtfnPreferencesMap: "+mapStringForNtfnPreferencesMap+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NtfnToUnset) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&setting.NtfnToUnset{")
	s = append(s, "NtfnToUnset: "+fmt.Sprintf("%#v", this.NtfnToUnset)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetViewPreferenceRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&setting.SetViewPreferenceRequest{")
	if this.PersonaPreferences != nil {
		s = append(s, "PersonaPreferences: "+fmt.Sprintf("%#v", this.PersonaPreferences)+",\n")
	}
	s = append(s, "AdvancedView: "+fmt.Sprintf("%#v", this.AdvancedView)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InitialAccess) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&setting.InitialAccess{")
	s = append(s, "Requested: "+fmt.Sprintf("%#v", this.Requested)+",\n")
	if this.LastRequestingTime != nil {
		s = append(s, "LastRequestingTime: "+fmt.Sprintf("%#v", this.LastRequestingTime)+",\n")
	}
	s = append(s, "EmailSent: "+fmt.Sprintf("%#v", this.EmailSent)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PersonaPreferences) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&setting.PersonaPreferences{")
	s = append(s, "DevOps: "+fmt.Sprintf("%#v", this.DevOps)+",\n")
	s = append(s, "NetOps: "+fmt.Sprintf("%#v", this.NetOps)+",\n")
	s = append(s, "SecOps: "+fmt.Sprintf("%#v", this.SecOps)+",\n")
	s = append(s, "Developer: "+fmt.Sprintf("%#v", this.Developer)+",\n")
	s = append(s, "Master: "+fmt.Sprintf("%#v", this.Master)+",\n")
	s = append(s, "Billing: "+fmt.Sprintf("%#v", this.Billing)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ViewPreference) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&setting.ViewPreference{")
	if this.PersonaPreferences != nil {
		s = append(s, "PersonaPreferences: "+fmt.Sprintf("%#v", this.PersonaPreferences)+",\n")
	}
	s = append(s, "AdvancedView: "+fmt.Sprintf("%#v", this.AdvancedView)+",\n")
	s = append(s, "Initialized: "+fmt.Sprintf("%#v", this.Initialized)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCustomApi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CustomAPIClient is the client API for CustomAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomAPIClient interface {
	// Get
	//
	// x-displayName: "Get"
	// Retrieves current user settings object defined to the user.
	Get(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UserSettingsResponse, error)
	// Update
	//
	// x-displayName: "Update"
	// Update defined user settings.
	Update(ctx context.Context, in *UserSettingsRequest, opts ...grpc.CallOption) (*Empty, error)
	// GetUserSessions
	//
	// x-displayName: "GetUserSessions"
	// GetUserSessions returns a list of user sessions.
	GetUserSessions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UserSessionList, error)
	// GetUserProfileImage
	//
	// x-displayName: "GetUserProfileImage"
	// GetUserProfileImage returns user profile picture.
	GetUserImage(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	// UpdateUserImage
	//
	// x-displayName: "UpdateUserImage"
	// Updates current user profile picture.
	UpdateUserImage(ctx context.Context, in *UpdateImageRequest, opts ...grpc.CallOption) (*Empty, error)
	// DeleteUserImage
	//
	// x-displayName: "DeleteUserImage"
	// Deletes current user profile picture.
	DeleteUserImage(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// ResetOtpDeviceByAdmin
	//
	// x-displayName: "ResetOtpDeviceByAdmin"
	// TODO(evg): description
	ResetOtpDeviceByAdmin(ctx context.Context, in *UserEmail, opts ...grpc.CallOption) (*Empty, error)
	// EnableUserInIDM
	//
	// x-displayName: "EnableUserInIDM"
	// Enables user in Identity. Use this to enable a user which is disabled.
	EnableUserInIDM(ctx context.Context, in *UserEmail, opts ...grpc.CallOption) (*Empty, error)
	// DisableUserInIDM
	//
	// x-displayName: "DisableUserInIDM"
	// Disables user in Identity.
	DisableUserInIDM(ctx context.Context, in *UserEmail, opts ...grpc.CallOption) (*Empty, error)
	// Request Initial Access
	//
	// x-displayName: "Request Initial Access"
	// Request initial access requests initial access for user within tenant.
	// Emails will be send to tenant's admins with corresponding information.
	RequestInitialAccess(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// Get ntfn preferences
	//
	// x-displayName: "Get ntfn preferences"
	// Get ntfn preferences gets current notification preferences for user.
	// It combines information from two sources:
	// - explicitly set notification preferences in user settings object
	// - default values from uam config (for those notifications which not explicitly set)
	GetNtfnPreferences(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NotificationList, error)
	// Update ntfn preferences
	//
	// x-displayName: "Update ntfn preferences"
	// Update ntfn preferences updates notification preferences for the user and store them in user settings object.
	UpdateNtfnPreferences(ctx context.Context, in *NtfnPreferencesMap, opts ...grpc.CallOption) (*Empty, error)
	// Unset ntfn preference
	//
	// x-displayName: "Unset ntfn preference"
	// Unset ntfn preference unsets specific notification preference for the user and store it in user settings object.
	// It can be used in email newsletters to allow easy unsubscribing for users.
	UnsetNtfnPreference(ctx context.Context, in *NtfnToUnset, opts ...grpc.CallOption) (*Empty, error)
	// Get admin ntfn preferences
	//
	// x-displayName: "Get admin ntfn preferences"
	// Get admin ntfn preferences gets current admin notification preferences for user.
	// It combines information from two sources:
	// - explicitly set admin notification preferences in user settings object
	// - default values from uam config (for those notifications which not explicitly set)
	GetAdminNtfnPreferences(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NotificationList, error)
	// Update admin ntfn preferences
	//
	// x-displayName: "Update admin ntfn preferences"
	// Update admin ntfn preferences updates admin notification preferences for the user and store them in user settings object.
	UpdateAdminNtfnPreferences(ctx context.Context, in *NtfnPreferencesMap, opts ...grpc.CallOption) (*Empty, error)
	// Unset admin ntfn preference
	//
	// x-displayName: "Unset admin ntfn preference"
	// Unset admin ntfn preference unsets specific admin notification preference for the user and store it in user settings object.
	// It can be used in email newsletters to allow easy unsubscribing for users.
	UnsetAdminNtfnPreference(ctx context.Context, in *NtfnToUnset, opts ...grpc.CallOption) (*Empty, error)
	// Get combined ntfn preferences
	//
	// x-displayName: "Get combined ntfn preferences"
	// Get combined ntfn preferences gets user-ntfn-preferences and admin-ntfn-preferences and returns combined result.
	GetCombinedNtfnPreferences(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NotificationList, error)
	// Update combined ntfn preferences
	//
	// x-displayName: "Update combined ntfn preferences"
	// Update combined ntfn preferences updates both user-ntfn-preferences and admin-ntfn-preferences.
	UpdateCombinedNtfnPreferences(ctx context.Context, in *NtfnPreferencesMap, opts ...grpc.CallOption) (*Empty, error)
	// Get view preference
	//
	// x-displayName: "Get view preference"
	// Get view preference gets view preference for specific user.
	GetViewPreference(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ViewPreference, error)
	// Set view preference
	//
	// x-displayName: "Set view preference"
	// Set view preference sets view preference for specific user.
	SetViewPreference(ctx context.Context, in *SetViewPreferenceRequest, opts ...grpc.CallOption) (*Empty, error)
}

type customAPIClient struct {
	cc *grpc.ClientConn
}

func NewCustomAPIClient(cc *grpc.ClientConn) CustomAPIClient {
	return &customAPIClient{cc}
}

func (c *customAPIClient) Get(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UserSettingsResponse, error) {
	out := new(UserSettingsResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.user.setting.CustomAPI/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) Update(ctx context.Context, in *UserSettingsRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ves.io.schema.user.setting.CustomAPI/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) GetUserSessions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UserSessionList, error) {
	out := new(UserSessionList)
	err := c.cc.Invoke(ctx, "/ves.io.schema.user.setting.CustomAPI/GetUserSessions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) GetUserImage(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, "/ves.io.schema.user.setting.CustomAPI/GetUserImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) UpdateUserImage(ctx context.Context, in *UpdateImageRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ves.io.schema.user.setting.CustomAPI/UpdateUserImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) DeleteUserImage(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ves.io.schema.user.setting.CustomAPI/DeleteUserImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) ResetOtpDeviceByAdmin(ctx context.Context, in *UserEmail, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ves.io.schema.user.setting.CustomAPI/ResetOtpDeviceByAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) EnableUserInIDM(ctx context.Context, in *UserEmail, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ves.io.schema.user.setting.CustomAPI/EnableUserInIDM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) DisableUserInIDM(ctx context.Context, in *UserEmail, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ves.io.schema.user.setting.CustomAPI/DisableUserInIDM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) RequestInitialAccess(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ves.io.schema.user.setting.CustomAPI/RequestInitialAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) GetNtfnPreferences(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NotificationList, error) {
	out := new(NotificationList)
	err := c.cc.Invoke(ctx, "/ves.io.schema.user.setting.CustomAPI/GetNtfnPreferences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) UpdateNtfnPreferences(ctx context.Context, in *NtfnPreferencesMap, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ves.io.schema.user.setting.CustomAPI/UpdateNtfnPreferences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) UnsetNtfnPreference(ctx context.Context, in *NtfnToUnset, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ves.io.schema.user.setting.CustomAPI/UnsetNtfnPreference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) GetAdminNtfnPreferences(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NotificationList, error) {
	out := new(NotificationList)
	err := c.cc.Invoke(ctx, "/ves.io.schema.user.setting.CustomAPI/GetAdminNtfnPreferences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) UpdateAdminNtfnPreferences(ctx context.Context, in *NtfnPreferencesMap, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ves.io.schema.user.setting.CustomAPI/UpdateAdminNtfnPreferences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) UnsetAdminNtfnPreference(ctx context.Context, in *NtfnToUnset, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ves.io.schema.user.setting.CustomAPI/UnsetAdminNtfnPreference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) GetCombinedNtfnPreferences(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NotificationList, error) {
	out := new(NotificationList)
	err := c.cc.Invoke(ctx, "/ves.io.schema.user.setting.CustomAPI/GetCombinedNtfnPreferences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) UpdateCombinedNtfnPreferences(ctx context.Context, in *NtfnPreferencesMap, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ves.io.schema.user.setting.CustomAPI/UpdateCombinedNtfnPreferences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) GetViewPreference(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ViewPreference, error) {
	out := new(ViewPreference)
	err := c.cc.Invoke(ctx, "/ves.io.schema.user.setting.CustomAPI/GetViewPreference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) SetViewPreference(ctx context.Context, in *SetViewPreferenceRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ves.io.schema.user.setting.CustomAPI/SetViewPreference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomAPIServer is the server API for CustomAPI service.
type CustomAPIServer interface {
	// Get
	//
	// x-displayName: "Get"
	// Retrieves current user settings object defined to the user.
	Get(context.Context, *Empty) (*UserSettingsResponse, error)
	// Update
	//
	// x-displayName: "Update"
	// Update defined user settings.
	Update(context.Context, *UserSettingsRequest) (*Empty, error)
	// GetUserSessions
	//
	// x-displayName: "GetUserSessions"
	// GetUserSessions returns a list of user sessions.
	GetUserSessions(context.Context, *Empty) (*UserSessionList, error)
	// GetUserProfileImage
	//
	// x-displayName: "GetUserProfileImage"
	// GetUserProfileImage returns user profile picture.
	GetUserImage(context.Context, *Empty) (*httpbody.HttpBody, error)
	// UpdateUserImage
	//
	// x-displayName: "UpdateUserImage"
	// Updates current user profile picture.
	UpdateUserImage(context.Context, *UpdateImageRequest) (*Empty, error)
	// DeleteUserImage
	//
	// x-displayName: "DeleteUserImage"
	// Deletes current user profile picture.
	DeleteUserImage(context.Context, *Empty) (*Empty, error)
	// ResetOtpDeviceByAdmin
	//
	// x-displayName: "ResetOtpDeviceByAdmin"
	// TODO(evg): description
	ResetOtpDeviceByAdmin(context.Context, *UserEmail) (*Empty, error)
	// EnableUserInIDM
	//
	// x-displayName: "EnableUserInIDM"
	// Enables user in Identity. Use this to enable a user which is disabled.
	EnableUserInIDM(context.Context, *UserEmail) (*Empty, error)
	// DisableUserInIDM
	//
	// x-displayName: "DisableUserInIDM"
	// Disables user in Identity.
	DisableUserInIDM(context.Context, *UserEmail) (*Empty, error)
	// Request Initial Access
	//
	// x-displayName: "Request Initial Access"
	// Request initial access requests initial access for user within tenant.
	// Emails will be send to tenant's admins with corresponding information.
	RequestInitialAccess(context.Context, *Empty) (*Empty, error)
	// Get ntfn preferences
	//
	// x-displayName: "Get ntfn preferences"
	// Get ntfn preferences gets current notification preferences for user.
	// It combines information from two sources:
	// - explicitly set notification preferences in user settings object
	// - default values from uam config (for those notifications which not explicitly set)
	GetNtfnPreferences(context.Context, *Empty) (*NotificationList, error)
	// Update ntfn preferences
	//
	// x-displayName: "Update ntfn preferences"
	// Update ntfn preferences updates notification preferences for the user and store them in user settings object.
	UpdateNtfnPreferences(context.Context, *NtfnPreferencesMap) (*Empty, error)
	// Unset ntfn preference
	//
	// x-displayName: "Unset ntfn preference"
	// Unset ntfn preference unsets specific notification preference for the user and store it in user settings object.
	// It can be used in email newsletters to allow easy unsubscribing for users.
	UnsetNtfnPreference(context.Context, *NtfnToUnset) (*Empty, error)
	// Get admin ntfn preferences
	//
	// x-displayName: "Get admin ntfn preferences"
	// Get admin ntfn preferences gets current admin notification preferences for user.
	// It combines information from two sources:
	// - explicitly set admin notification preferences in user settings object
	// - default values from uam config (for those notifications which not explicitly set)
	GetAdminNtfnPreferences(context.Context, *Empty) (*NotificationList, error)
	// Update admin ntfn preferences
	//
	// x-displayName: "Update admin ntfn preferences"
	// Update admin ntfn preferences updates admin notification preferences for the user and store them in user settings object.
	UpdateAdminNtfnPreferences(context.Context, *NtfnPreferencesMap) (*Empty, error)
	// Unset admin ntfn preference
	//
	// x-displayName: "Unset admin ntfn preference"
	// Unset admin ntfn preference unsets specific admin notification preference for the user and store it in user settings object.
	// It can be used in email newsletters to allow easy unsubscribing for users.
	UnsetAdminNtfnPreference(context.Context, *NtfnToUnset) (*Empty, error)
	// Get combined ntfn preferences
	//
	// x-displayName: "Get combined ntfn preferences"
	// Get combined ntfn preferences gets user-ntfn-preferences and admin-ntfn-preferences and returns combined result.
	GetCombinedNtfnPreferences(context.Context, *Empty) (*NotificationList, error)
	// Update combined ntfn preferences
	//
	// x-displayName: "Update combined ntfn preferences"
	// Update combined ntfn preferences updates both user-ntfn-preferences and admin-ntfn-preferences.
	UpdateCombinedNtfnPreferences(context.Context, *NtfnPreferencesMap) (*Empty, error)
	// Get view preference
	//
	// x-displayName: "Get view preference"
	// Get view preference gets view preference for specific user.
	GetViewPreference(context.Context, *Empty) (*ViewPreference, error)
	// Set view preference
	//
	// x-displayName: "Set view preference"
	// Set view preference sets view preference for specific user.
	SetViewPreference(context.Context, *SetViewPreferenceRequest) (*Empty, error)
}

// UnimplementedCustomAPIServer can be embedded to have forward compatible implementations.
type UnimplementedCustomAPIServer struct {
}

func (*UnimplementedCustomAPIServer) Get(ctx context.Context, req *Empty) (*UserSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedCustomAPIServer) Update(ctx context.Context, req *UserSettingsRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedCustomAPIServer) GetUserSessions(ctx context.Context, req *Empty) (*UserSessionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSessions not implemented")
}
func (*UnimplementedCustomAPIServer) GetUserImage(ctx context.Context, req *Empty) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserImage not implemented")
}
func (*UnimplementedCustomAPIServer) UpdateUserImage(ctx context.Context, req *UpdateImageRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserImage not implemented")
}
func (*UnimplementedCustomAPIServer) DeleteUserImage(ctx context.Context, req *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserImage not implemented")
}
func (*UnimplementedCustomAPIServer) ResetOtpDeviceByAdmin(ctx context.Context, req *UserEmail) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetOtpDeviceByAdmin not implemented")
}
func (*UnimplementedCustomAPIServer) EnableUserInIDM(ctx context.Context, req *UserEmail) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableUserInIDM not implemented")
}
func (*UnimplementedCustomAPIServer) DisableUserInIDM(ctx context.Context, req *UserEmail) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableUserInIDM not implemented")
}
func (*UnimplementedCustomAPIServer) RequestInitialAccess(ctx context.Context, req *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestInitialAccess not implemented")
}
func (*UnimplementedCustomAPIServer) GetNtfnPreferences(ctx context.Context, req *Empty) (*NotificationList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNtfnPreferences not implemented")
}
func (*UnimplementedCustomAPIServer) UpdateNtfnPreferences(ctx context.Context, req *NtfnPreferencesMap) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNtfnPreferences not implemented")
}
func (*UnimplementedCustomAPIServer) UnsetNtfnPreference(ctx context.Context, req *NtfnToUnset) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsetNtfnPreference not implemented")
}
func (*UnimplementedCustomAPIServer) GetAdminNtfnPreferences(ctx context.Context, req *Empty) (*NotificationList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdminNtfnPreferences not implemented")
}
func (*UnimplementedCustomAPIServer) UpdateAdminNtfnPreferences(ctx context.Context, req *NtfnPreferencesMap) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAdminNtfnPreferences not implemented")
}
func (*UnimplementedCustomAPIServer) UnsetAdminNtfnPreference(ctx context.Context, req *NtfnToUnset) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsetAdminNtfnPreference not implemented")
}
func (*UnimplementedCustomAPIServer) GetCombinedNtfnPreferences(ctx context.Context, req *Empty) (*NotificationList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCombinedNtfnPreferences not implemented")
}
func (*UnimplementedCustomAPIServer) UpdateCombinedNtfnPreferences(ctx context.Context, req *NtfnPreferencesMap) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCombinedNtfnPreferences not implemented")
}
func (*UnimplementedCustomAPIServer) GetViewPreference(ctx context.Context, req *Empty) (*ViewPreference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetViewPreference not implemented")
}
func (*UnimplementedCustomAPIServer) SetViewPreference(ctx context.Context, req *SetViewPreferenceRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetViewPreference not implemented")
}

func RegisterCustomAPIServer(s *grpc.Server, srv CustomAPIServer) {
	s.RegisterService(&_CustomAPI_serviceDesc, srv)
}

func _CustomAPI_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.user.setting.CustomAPI/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).Get(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.user.setting.CustomAPI/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).Update(ctx, req.(*UserSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_GetUserSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).GetUserSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.user.setting.CustomAPI/GetUserSessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).GetUserSessions(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_GetUserImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).GetUserImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.user.setting.CustomAPI/GetUserImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).GetUserImage(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_UpdateUserImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).UpdateUserImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.user.setting.CustomAPI/UpdateUserImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).UpdateUserImage(ctx, req.(*UpdateImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_DeleteUserImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).DeleteUserImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.user.setting.CustomAPI/DeleteUserImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).DeleteUserImage(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_ResetOtpDeviceByAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserEmail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).ResetOtpDeviceByAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.user.setting.CustomAPI/ResetOtpDeviceByAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).ResetOtpDeviceByAdmin(ctx, req.(*UserEmail))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_EnableUserInIDM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserEmail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).EnableUserInIDM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.user.setting.CustomAPI/EnableUserInIDM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).EnableUserInIDM(ctx, req.(*UserEmail))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_DisableUserInIDM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserEmail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).DisableUserInIDM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.user.setting.CustomAPI/DisableUserInIDM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).DisableUserInIDM(ctx, req.(*UserEmail))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_RequestInitialAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).RequestInitialAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.user.setting.CustomAPI/RequestInitialAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).RequestInitialAccess(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_GetNtfnPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).GetNtfnPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.user.setting.CustomAPI/GetNtfnPreferences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).GetNtfnPreferences(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_UpdateNtfnPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NtfnPreferencesMap)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).UpdateNtfnPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.user.setting.CustomAPI/UpdateNtfnPreferences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).UpdateNtfnPreferences(ctx, req.(*NtfnPreferencesMap))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_UnsetNtfnPreference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NtfnToUnset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).UnsetNtfnPreference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.user.setting.CustomAPI/UnsetNtfnPreference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).UnsetNtfnPreference(ctx, req.(*NtfnToUnset))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_GetAdminNtfnPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).GetAdminNtfnPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.user.setting.CustomAPI/GetAdminNtfnPreferences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).GetAdminNtfnPreferences(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_UpdateAdminNtfnPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NtfnPreferencesMap)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).UpdateAdminNtfnPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.user.setting.CustomAPI/UpdateAdminNtfnPreferences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).UpdateAdminNtfnPreferences(ctx, req.(*NtfnPreferencesMap))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_UnsetAdminNtfnPreference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NtfnToUnset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).UnsetAdminNtfnPreference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.user.setting.CustomAPI/UnsetAdminNtfnPreference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).UnsetAdminNtfnPreference(ctx, req.(*NtfnToUnset))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_GetCombinedNtfnPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).GetCombinedNtfnPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.user.setting.CustomAPI/GetCombinedNtfnPreferences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).GetCombinedNtfnPreferences(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_UpdateCombinedNtfnPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NtfnPreferencesMap)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).UpdateCombinedNtfnPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.user.setting.CustomAPI/UpdateCombinedNtfnPreferences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).UpdateCombinedNtfnPreferences(ctx, req.(*NtfnPreferencesMap))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_GetViewPreference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).GetViewPreference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.user.setting.CustomAPI/GetViewPreference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).GetViewPreference(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_SetViewPreference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetViewPreferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).SetViewPreference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.user.setting.CustomAPI/SetViewPreference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).SetViewPreference(ctx, req.(*SetViewPreferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.user.setting.CustomAPI",
	HandlerType: (*CustomAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _CustomAPI_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CustomAPI_Update_Handler,
		},
		{
			MethodName: "GetUserSessions",
			Handler:    _CustomAPI_GetUserSessions_Handler,
		},
		{
			MethodName: "GetUserImage",
			Handler:    _CustomAPI_GetUserImage_Handler,
		},
		{
			MethodName: "UpdateUserImage",
			Handler:    _CustomAPI_UpdateUserImage_Handler,
		},
		{
			MethodName: "DeleteUserImage",
			Handler:    _CustomAPI_DeleteUserImage_Handler,
		},
		{
			MethodName: "ResetOtpDeviceByAdmin",
			Handler:    _CustomAPI_ResetOtpDeviceByAdmin_Handler,
		},
		{
			MethodName: "EnableUserInIDM",
			Handler:    _CustomAPI_EnableUserInIDM_Handler,
		},
		{
			MethodName: "DisableUserInIDM",
			Handler:    _CustomAPI_DisableUserInIDM_Handler,
		},
		{
			MethodName: "RequestInitialAccess",
			Handler:    _CustomAPI_RequestInitialAccess_Handler,
		},
		{
			MethodName: "GetNtfnPreferences",
			Handler:    _CustomAPI_GetNtfnPreferences_Handler,
		},
		{
			MethodName: "UpdateNtfnPreferences",
			Handler:    _CustomAPI_UpdateNtfnPreferences_Handler,
		},
		{
			MethodName: "UnsetNtfnPreference",
			Handler:    _CustomAPI_UnsetNtfnPreference_Handler,
		},
		{
			MethodName: "GetAdminNtfnPreferences",
			Handler:    _CustomAPI_GetAdminNtfnPreferences_Handler,
		},
		{
			MethodName: "UpdateAdminNtfnPreferences",
			Handler:    _CustomAPI_UpdateAdminNtfnPreferences_Handler,
		},
		{
			MethodName: "UnsetAdminNtfnPreference",
			Handler:    _CustomAPI_UnsetAdminNtfnPreference_Handler,
		},
		{
			MethodName: "GetCombinedNtfnPreferences",
			Handler:    _CustomAPI_GetCombinedNtfnPreferences_Handler,
		},
		{
			MethodName: "UpdateCombinedNtfnPreferences",
			Handler:    _CustomAPI_UpdateCombinedNtfnPreferences_Handler,
		},
		{
			MethodName: "GetViewPreference",
			Handler:    _CustomAPI_GetViewPreference_Handler,
		},
		{
			MethodName: "SetViewPreference",
			Handler:    _CustomAPI_SetViewPreference_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/user/setting/custom_api.proto",
}

func (m *Empty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Empty) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Empty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Notification) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Notification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Notification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCustomApi(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintCustomApi(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintCustomApi(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NotificationList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotificationList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotificationList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Notifications) > 0 {
		for iNdEx := len(m.Notifications) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Notifications[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCustomApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UserSettingsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserSettingsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserSettingsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OtpEnabled {
		i--
		if m.OtpEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.LastName) > 0 {
		i -= len(m.LastName)
		copy(dAtA[i:], m.LastName)
		i = encodeVarintCustomApi(dAtA, i, uint64(len(m.LastName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.FirstName) > 0 {
		i -= len(m.FirstName)
		copy(dAtA[i:], m.FirstName)
		i = encodeVarintCustomApi(dAtA, i, uint64(len(m.FirstName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Image) > 0 {
		i -= len(m.Image)
		copy(dAtA[i:], m.Image)
		i = encodeVarintCustomApi(dAtA, i, uint64(len(m.Image)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.EnabledNotifications) > 0 {
		for iNdEx := len(m.EnabledNotifications) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.EnabledNotifications[iNdEx])
			copy(dAtA[i:], m.EnabledNotifications[iNdEx])
			i = encodeVarintCustomApi(dAtA, i, uint64(len(m.EnabledNotifications[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UserSettingsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserSettingsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserSettingsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.InitialAccess != nil {
		{
			size, err := m.InitialAccess.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCustomApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.IsNextRequestAllowed {
		i--
		if m.IsNextRequestAllowed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.OtpStatus != 0 {
		i = encodeVarintCustomApi(dAtA, i, uint64(m.OtpStatus))
		i--
		dAtA[i] = 0x20
	}
	if m.OtpEnabled {
		i--
		if m.OtpEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Image) > 0 {
		i -= len(m.Image)
		copy(dAtA[i:], m.Image)
		i = encodeVarintCustomApi(dAtA, i, uint64(len(m.Image)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Notifications) > 0 {
		for iNdEx := len(m.Notifications) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Notifications[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCustomApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UserEmail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserEmail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserEmail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserEmail) > 0 {
		i -= len(m.UserEmail)
		copy(dAtA[i:], m.UserEmail)
		i = encodeVarintCustomApi(dAtA, i, uint64(len(m.UserEmail)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserSession) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserSession) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserSession) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Start != nil {
		{
			size, err := m.Start.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCustomApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.LastAccess != nil {
		{
			size, err := m.LastAccess.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCustomApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.IpAddress) > 0 {
		i -= len(m.IpAddress)
		copy(dAtA[i:], m.IpAddress)
		i = encodeVarintCustomApi(dAtA, i, uint64(len(m.IpAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserSessionList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserSessionList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserSessionList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserSessions) > 0 {
		for iNdEx := len(m.UserSessions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserSessions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCustomApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpdateImageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateImageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateImageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContentType) > 0 {
		i -= len(m.ContentType)
		copy(dAtA[i:], m.ContentType)
		i = encodeVarintCustomApi(dAtA, i, uint64(len(m.ContentType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Image) > 0 {
		i -= len(m.Image)
		copy(dAtA[i:], m.Image)
		i = encodeVarintCustomApi(dAtA, i, uint64(len(m.Image)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NtfnPreferencesMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NtfnPreferencesMap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NtfnPreferencesMap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NtfnPreferencesMap) > 0 {
		for k := range m.NtfnPreferencesMap {
			v := m.NtfnPreferencesMap[k]
			baseI := i
			i--
			if v {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCustomApi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCustomApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NtfnToUnset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NtfnToUnset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NtfnToUnset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NtfnToUnset) > 0 {
		i -= len(m.NtfnToUnset)
		copy(dAtA[i:], m.NtfnToUnset)
		i = encodeVarintCustomApi(dAtA, i, uint64(len(m.NtfnToUnset)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetViewPreferenceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetViewPreferenceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetViewPreferenceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AdvancedView {
		i--
		if m.AdvancedView {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.PersonaPreferences != nil {
		{
			size, err := m.PersonaPreferences.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCustomApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InitialAccess) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitialAccess) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InitialAccess) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EmailSent {
		i--
		if m.EmailSent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.LastRequestingTime != nil {
		{
			size, err := m.LastRequestingTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCustomApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Requested {
		i--
		if m.Requested {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PersonaPreferences) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PersonaPreferences) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PersonaPreferences) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Billing {
		i--
		if m.Billing {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Master {
		i--
		if m.Master {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Developer {
		i--
		if m.Developer {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.SecOps {
		i--
		if m.SecOps {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.NetOps {
		i--
		if m.NetOps {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.DevOps {
		i--
		if m.DevOps {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ViewPreference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViewPreference) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ViewPreference) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Initialized {
		i--
		if m.Initialized {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.AdvancedView {
		i--
		if m.AdvancedView {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.PersonaPreferences != nil {
		{
			size, err := m.PersonaPreferences.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCustomApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCustomApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovCustomApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Empty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Notification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovCustomApi(uint64(l))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovCustomApi(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCustomApi(uint64(l))
	}
	if m.Enabled {
		n += 2
	}
	return n
}

func (m *NotificationList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Notifications) > 0 {
		for _, e := range m.Notifications {
			l = e.Size()
			n += 1 + l + sovCustomApi(uint64(l))
		}
	}
	return n
}

func (m *UserSettingsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EnabledNotifications) > 0 {
		for _, s := range m.EnabledNotifications {
			l = len(s)
			n += 1 + l + sovCustomApi(uint64(l))
		}
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovCustomApi(uint64(l))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovCustomApi(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovCustomApi(uint64(l))
	}
	if m.OtpEnabled {
		n += 2
	}
	return n
}

func (m *UserSettingsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Notifications) > 0 {
		for _, e := range m.Notifications {
			l = e.Size()
			n += 1 + l + sovCustomApi(uint64(l))
		}
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovCustomApi(uint64(l))
	}
	if m.OtpEnabled {
		n += 2
	}
	if m.OtpStatus != 0 {
		n += 1 + sovCustomApi(uint64(m.OtpStatus))
	}
	if m.IsNextRequestAllowed {
		n += 2
	}
	if m.InitialAccess != nil {
		l = m.InitialAccess.Size()
		n += 1 + l + sovCustomApi(uint64(l))
	}
	return n
}

func (m *UserEmail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserEmail)
	if l > 0 {
		n += 1 + l + sovCustomApi(uint64(l))
	}
	return n
}

func (m *UserSession) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IpAddress)
	if l > 0 {
		n += 1 + l + sovCustomApi(uint64(l))
	}
	if m.LastAccess != nil {
		l = m.LastAccess.Size()
		n += 1 + l + sovCustomApi(uint64(l))
	}
	if m.Start != nil {
		l = m.Start.Size()
		n += 1 + l + sovCustomApi(uint64(l))
	}
	return n
}

func (m *UserSessionList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UserSessions) > 0 {
		for _, e := range m.UserSessions {
			l = e.Size()
			n += 1 + l + sovCustomApi(uint64(l))
		}
	}
	return n
}

func (m *UpdateImageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovCustomApi(uint64(l))
	}
	l = len(m.ContentType)
	if l > 0 {
		n += 1 + l + sovCustomApi(uint64(l))
	}
	return n
}

func (m *NtfnPreferencesMap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NtfnPreferencesMap) > 0 {
		for k, v := range m.NtfnPreferencesMap {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovCustomApi(uint64(len(k))) + 1 + 1
			n += mapEntrySize + 1 + sovCustomApi(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *NtfnToUnset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NtfnToUnset)
	if l > 0 {
		n += 1 + l + sovCustomApi(uint64(l))
	}
	return n
}

func (m *SetViewPreferenceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PersonaPreferences != nil {
		l = m.PersonaPreferences.Size()
		n += 1 + l + sovCustomApi(uint64(l))
	}
	if m.AdvancedView {
		n += 2
	}
	return n
}

func (m *InitialAccess) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Requested {
		n += 2
	}
	if m.LastRequestingTime != nil {
		l = m.LastRequestingTime.Size()
		n += 1 + l + sovCustomApi(uint64(l))
	}
	if m.EmailSent {
		n += 2
	}
	return n
}

func (m *PersonaPreferences) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DevOps {
		n += 2
	}
	if m.NetOps {
		n += 2
	}
	if m.SecOps {
		n += 2
	}
	if m.Developer {
		n += 2
	}
	if m.Master {
		n += 2
	}
	if m.Billing {
		n += 2
	}
	return n
}

func (m *ViewPreference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PersonaPreferences != nil {
		l = m.PersonaPreferences.Size()
		n += 1 + l + sovCustomApi(uint64(l))
	}
	if m.AdvancedView {
		n += 2
	}
	if m.Initialized {
		n += 2
	}
	return n
}

func sovCustomApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCustomApi(x uint64) (n int) {
	return sovCustomApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Empty) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Empty{`,
		`}`,
	}, "")
	return s
}
func (this *Notification) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Notification{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Label:` + fmt.Sprintf("%v", this.Label) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Enabled:` + fmt.Sprintf("%v", this.Enabled) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NotificationList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForNotifications := "[]*Notification{"
	for _, f := range this.Notifications {
		repeatedStringForNotifications += strings.Replace(f.String(), "Notification", "Notification", 1) + ","
	}
	repeatedStringForNotifications += "}"
	s := strings.Join([]string{`&NotificationList{`,
		`Notifications:` + repeatedStringForNotifications + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserSettingsRequest) string() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserSettingsRequest{`,
		`EnabledNotifications:` + fmt.Sprintf("%v", this.EnabledNotifications) + `,`,
		`Image:` + fmt.Sprintf("%v", this.Image) + `,`,
		`FirstName:` + fmt.Sprintf("%v", this.FirstName) + `,`,
		`LastName:` + fmt.Sprintf("%v", this.LastName) + `,`,
		`OtpEnabled:` + fmt.Sprintf("%v", this.OtpEnabled) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserSettingsResponse) string() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForNotifications := "[]*Notification{"
	for _, f := range this.Notifications {
		repeatedStringForNotifications += strings.Replace(f.String(), "Notification", "Notification", 1) + ","
	}
	repeatedStringForNotifications += "}"
	s := strings.Join([]string{`&UserSettingsResponse{`,
		`Notifications:` + repeatedStringForNotifications + `,`,
		`Image:` + fmt.Sprintf("%v", this.Image) + `,`,
		`OtpEnabled:` + fmt.Sprintf("%v", this.OtpEnabled) + `,`,
		`OtpStatus:` + fmt.Sprintf("%v", this.OtpStatus) + `,`,
		`IsNextRequestAllowed:` + fmt.Sprintf("%v", this.IsNextRequestAllowed) + `,`,
		`InitialAccess:` + strings.Replace(this.InitialAccess.String(), "InitialAccess", "InitialAccess", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserEmail) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserEmail{`,
		`UserEmail:` + fmt.Sprintf("%v", this.UserEmail) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserSession) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserSession{`,
		`IpAddress:` + fmt.Sprintf("%v", this.IpAddress) + `,`,
		`LastAccess:` + strings.Replace(fmt.Sprintf("%v", this.LastAccess), "Timestamp", "types.Timestamp", 1) + `,`,
		`Start:` + strings.Replace(fmt.Sprintf("%v", this.Start), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserSessionList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForUserSessions := "[]*UserSession{"
	for _, f := range this.UserSessions {
		repeatedStringForUserSessions += strings.Replace(f.String(), "UserSession", "UserSession", 1) + ","
	}
	repeatedStringForUserSessions += "}"
	s := strings.Join([]string{`&UserSessionList{`,
		`UserSessions:` + repeatedStringForUserSessions + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateImageRequest) string() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateImageRequest{`,
		`Image:` + fmt.Sprintf("%v", this.Image) + `,`,
		`ContentType:` + fmt.Sprintf("%v", this.ContentType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NtfnPreferencesMap) String() string {
	if this == nil {
		return "nil"
	}
	keysForNtfnPreferencesMap := make([]string, 0, len(this.NtfnPreferencesMap))
	for k, _ := range this.NtfnPreferencesMap {
		keysForNtfnPreferencesMap = append(keysForNtfnPreferencesMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForNtfnPreferencesMap)
	mapStringForNtfnPreferencesMap := "map[string]bool{"
	for _, k := range keysForNtfnPreferencesMap {
		mapStringForNtfnPreferencesMap += fmt.Sprintf("%v: %v,", k, this.NtfnPreferencesMap[k])
	}
	mapStringForNtfnPreferencesMap += "}"
	s := strings.Join([]string{`&NtfnPreferencesMap{`,
		`NtfnPreferencesMap:` + mapStringForNtfnPreferencesMap + `,`,
		`}`,
	}, "")
	return s
}
func (this *NtfnToUnset) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NtfnToUnset{`,
		`NtfnToUnset:` + fmt.Sprintf("%v", this.NtfnToUnset) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetViewPreferenceRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetViewPreferenceRequest{`,
		`PersonaPreferences:` + strings.Replace(this.PersonaPreferences.String(), "PersonaPreferences", "PersonaPreferences", 1) + `,`,
		`AdvancedView:` + fmt.Sprintf("%v", this.AdvancedView) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InitialAccess) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InitialAccess{`,
		`Requested:` + fmt.Sprintf("%v", this.Requested) + `,`,
		`LastRequestingTime:` + strings.Replace(fmt.Sprintf("%v", this.LastRequestingTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`EmailSent:` + fmt.Sprintf("%v", this.EmailSent) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PersonaPreferences) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PersonaPreferences{`,
		`DevOps:` + fmt.Sprintf("%v", this.DevOps) + `,`,
		`NetOps:` + fmt.Sprintf("%v", this.NetOps) + `,`,
		`SecOps:` + fmt.Sprintf("%v", this.SecOps) + `,`,
		`Developer:` + fmt.Sprintf("%v", this.Developer) + `,`,
		`Master:` + fmt.Sprintf("%v", this.Master) + `,`,
		`Billing:` + fmt.Sprintf("%v", this.Billing) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ViewPreference) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ViewPreference{`,
		`PersonaPreferences:` + strings.Replace(this.PersonaPreferences.String(), "PersonaPreferences", "PersonaPreferences", 1) + `,`,
		`AdvancedView:` + fmt.Sprintf("%v", this.AdvancedView) + `,`,
		`Initialized:` + fmt.Sprintf("%v", this.Initialized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCustomApi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Empty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCustomApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Empty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Empty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCustomApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Notification) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCustomApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Notification: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Notification: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCustomApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotificationList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCustomApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotificationList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotificationList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notifications", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notifications = append(m.Notifications, &Notification{})
			if err := m.Notifications[len(m.Notifications)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCustomApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserSettingsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCustomApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserSettingsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserSettingsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnabledNotifications", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnabledNotifications = append(m.EnabledNotifications, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = append(m.Image[:0], dAtA[iNdEx:postIndex]...)
			if m.Image == nil {
				m.Image = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtpEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OtpEnabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCustomApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserSettingsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCustomApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserSettingsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserSettingsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notifications", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notifications = append(m.Notifications, &Notification{})
			if err := m.Notifications[len(m.Notifications)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = append(m.Image[:0], dAtA[iNdEx:postIndex]...)
			if m.Image == nil {
				m.Image = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtpEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OtpEnabled = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtpStatus", wireType)
			}
			m.OtpStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OtpStatus |= tenant.OtpStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsNextRequestAllowed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsNextRequestAllowed = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialAccess", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InitialAccess == nil {
				m.InitialAccess = &InitialAccess{}
			}
			if err := m.InitialAccess.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCustomApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserEmail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCustomApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserEmail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserEmail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserEmail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserEmail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCustomApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserSession) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCustomApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserSession: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserSession: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastAccess", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastAccess == nil {
				m.LastAccess = &types.Timestamp{}
			}
			if err := m.LastAccess.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Start == nil {
				m.Start = &types.Timestamp{}
			}
			if err := m.Start.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCustomApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserSessionList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCustomApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserSessionList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserSessionList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserSessions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserSessions = append(m.UserSessions, &UserSession{})
			if err := m.UserSessions[len(m.UserSessions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCustomApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateImageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCustomApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateImageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateImageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = append(m.Image[:0], dAtA[iNdEx:postIndex]...)
			if m.Image == nil {
				m.Image = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCustomApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NtfnPreferencesMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCustomApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NtfnPreferencesMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NtfnPreferencesMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NtfnPreferencesMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NtfnPreferencesMap == nil {
				m.NtfnPreferencesMap = make(map[string]bool)
			}
			var mapkey string
			var mapvalue bool
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCustomApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCustomApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCustomApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCustomApi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapvaluetemp int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCustomApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvaluetemp |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					mapvalue = bool(mapvaluetemp != 0)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCustomApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCustomApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.NtfnPreferencesMap[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCustomApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NtfnToUnset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCustomApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NtfnToUnset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NtfnToUnset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NtfnToUnset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NtfnToUnset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCustomApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetViewPreferenceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCustomApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetViewPreferenceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetViewPreferenceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PersonaPreferences", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PersonaPreferences == nil {
				m.PersonaPreferences = &PersonaPreferences{}
			}
			if err := m.PersonaPreferences.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvancedView", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AdvancedView = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCustomApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitialAccess) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCustomApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitialAccess: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitialAccess: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requested", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Requested = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastRequestingTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastRequestingTime == nil {
				m.LastRequestingTime = &types.Timestamp{}
			}
			if err := m.LastRequestingTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmailSent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EmailSent = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCustomApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PersonaPreferences) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCustomApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PersonaPreferences: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PersonaPreferences: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevOps", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DevOps = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetOps", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NetOps = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecOps", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SecOps = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Developer", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Developer = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Master", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Master = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Billing", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Billing = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCustomApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ViewPreference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCustomApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ViewPreference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ViewPreference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PersonaPreferences", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PersonaPreferences == nil {
				m.PersonaPreferences = &PersonaPreferences{}
			}
			if err := m.PersonaPreferences.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvancedView", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AdvancedView = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Initialized", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Initialized = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCustomApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCustomApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCustomApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCustomApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCustomApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCustomApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCustomApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCustomApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCustomApi = fmt.Errorf("proto: unexpected end of group")
)

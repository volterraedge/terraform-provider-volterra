// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/ticket_management/types.proto

package ticket_management

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// TicketTrackingSystemType
//
// x-displayName: "Ticket Tracking System Type"
// The type of ticket tracking system - JIRA, ServiceNow, etc.
type TicketTrackingSystemType int32

const (
	// x-displayName: "Unknown"
	// Default enum value for type
	TYPE_UNKNOWN TicketTrackingSystemType = 0
	// x-displayName: "Jira"
	// Jira ticket type
	TYPE_JIRA TicketTrackingSystemType = 1
)

var TicketTrackingSystemType_name = map[int32]string{
	0: "TYPE_UNKNOWN",
	1: "TYPE_JIRA",
}

var TicketTrackingSystemType_value = map[string]int32{
	"TYPE_UNKNOWN": 0,
	"TYPE_JIRA":    1,
}

func (TicketTrackingSystemType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_af544b201edf4304, []int{0}
}

// JiraIssue
//
// x-displayName: "Jira Issue"
// Top level object representing a Jira issue (ticket) - modeled after the JIRA REST API response format
type JiraIssue struct {
	// id
	//
	// x-displayName: "ID"
	// x-example: "10000"
	// External ID of the Jira issue
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// key
	//
	// x-displayName: "Key"
	// x-example: "TES-123"
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// fields
	//
	// x-displayName: "Fields"
	Fields *JiraIssueFields `protobuf:"bytes,3,opt,name=fields,proto3" json:"fields,omitempty"`
}

func (m *JiraIssue) Reset()      { *m = JiraIssue{} }
func (*JiraIssue) ProtoMessage() {}
func (*JiraIssue) Descriptor() ([]byte, []int) {
	return fileDescriptor_af544b201edf4304, []int{0}
}
func (m *JiraIssue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JiraIssue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *JiraIssue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JiraIssue.Merge(m, src)
}
func (m *JiraIssue) XXX_Size() int {
	return m.Size()
}
func (m *JiraIssue) XXX_DiscardUnknown() {
	xxx_messageInfo_JiraIssue.DiscardUnknown(m)
}

var xxx_messageInfo_JiraIssue proto.InternalMessageInfo

func (m *JiraIssue) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *JiraIssue) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *JiraIssue) GetFields() *JiraIssueFields {
	if m != nil {
		return m.Fields
	}
	return nil
}

// JiraIssueType
//
// x-displayName: "Jira Issue Type"
// Issue (ticket) type information that's specific to Jira - modeled after the JIRA REST API response format
type JiraIssueType struct {
	// id
	//
	// x-displayName: "ID"
	// x-example: "10000"
	// External ID of the Jira issue type
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// name
	//
	// x-displayName: "Name"
	// x-example: "Bug"
	// Name (human readable) of the Jira issue type
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// icon_url
	//
	// x-displayName: "Icon URL"
	// x-example: "https://example.atlassian.net/rest/api/2/universal_avatar/view/type/issuetype/avatar/10303?size=medium"
	// Externally accessible URL for the avatar of the issue type
	IconUrl string `protobuf:"bytes,3,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"`
	// avatar_id
	//
	// x-displayName: "Avatar ID"
	// x-example: "10303"
	// External ID of the avatar
	AvatarId string `protobuf:"bytes,4,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
}

func (m *JiraIssueType) Reset()      { *m = JiraIssueType{} }
func (*JiraIssueType) ProtoMessage() {}
func (*JiraIssueType) Descriptor() ([]byte, []int) {
	return fileDescriptor_af544b201edf4304, []int{1}
}
func (m *JiraIssueType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JiraIssueType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *JiraIssueType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JiraIssueType.Merge(m, src)
}
func (m *JiraIssueType) XXX_Size() int {
	return m.Size()
}
func (m *JiraIssueType) XXX_DiscardUnknown() {
	xxx_messageInfo_JiraIssueType.DiscardUnknown(m)
}

var xxx_messageInfo_JiraIssueType proto.InternalMessageInfo

func (m *JiraIssueType) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *JiraIssueType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *JiraIssueType) GetIconUrl() string {
	if m != nil {
		return m.IconUrl
	}
	return ""
}

func (m *JiraIssueType) GetAvatarId() string {
	if m != nil {
		return m.AvatarId
	}
	return ""
}

// JiraIssueStatus
//
// x-displayName: "Jira Issue Status"
// Issue status type information that's specific to Jira - modeled after the JIRA REST API response format
type JiraIssueStatus struct {
	// id
	//
	// x-displayName: "ID"
	// x-example: "3"
	// External ID of the status
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// name
	//
	// x-displayName: "Name"
	// x-example: "In Progress"
	// Human readable status as it would appear in the external ticket tracking system's UI
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// icon_url
	//
	// x-displayName: "Icon URL"
	// x-example: "https://example.atlassian.net/images/icons/statuses/inprogress.png"
	// Externally accessible URL for the avatar of the status
	IconUrl string `protobuf:"bytes,3,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"`
}

func (m *JiraIssueStatus) Reset()      { *m = JiraIssueStatus{} }
func (*JiraIssueStatus) ProtoMessage() {}
func (*JiraIssueStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_af544b201edf4304, []int{2}
}
func (m *JiraIssueStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JiraIssueStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *JiraIssueStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JiraIssueStatus.Merge(m, src)
}
func (m *JiraIssueStatus) XXX_Size() int {
	return m.Size()
}
func (m *JiraIssueStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_JiraIssueStatus.DiscardUnknown(m)
}

var xxx_messageInfo_JiraIssueStatus proto.InternalMessageInfo

func (m *JiraIssueStatus) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *JiraIssueStatus) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *JiraIssueStatus) GetIconUrl() string {
	if m != nil {
		return m.IconUrl
	}
	return ""
}

// JiraProject
//
// x-displayName: "Jira Project"
// Contains fields and information that are specific to Jira projects - modeled after the JIRA REST API response format
type JiraProject struct {
	// id
	//
	// x-displayName: "ID"
	// x-example: "10000"
	// External ID of the project
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// key
	//
	// x-displayName: "Key"
	// x-example: "TES"
	// Key of the status
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// name
	//
	// x-displayName: "Name"
	// x-example: "Test project"
	// Human readable name as it would appear in the external ticket tracking system's UI
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// issue_types
	//
	// x-displayName: "Issue Types"
	// Returns available issue types for the project
	IssueTypes []*JiraIssueType `protobuf:"bytes,4,rep,name=issue_types,json=issueTypes,proto3" json:"issue_types,omitempty"`
}

func (m *JiraProject) Reset()      { *m = JiraProject{} }
func (*JiraProject) ProtoMessage() {}
func (*JiraProject) Descriptor() ([]byte, []int) {
	return fileDescriptor_af544b201edf4304, []int{3}
}
func (m *JiraProject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JiraProject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *JiraProject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JiraProject.Merge(m, src)
}
func (m *JiraProject) XXX_Size() int {
	return m.Size()
}
func (m *JiraProject) XXX_DiscardUnknown() {
	xxx_messageInfo_JiraProject.DiscardUnknown(m)
}

var xxx_messageInfo_JiraProject proto.InternalMessageInfo

func (m *JiraProject) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *JiraProject) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *JiraProject) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *JiraProject) GetIssueTypes() []*JiraIssueType {
	if m != nil {
		return m.IssueTypes
	}
	return nil
}

// JiraIssueFields
//
// x-displayName: "Jira Issue Fields"
// Contains fields and information that are specific to Jira issues (ticket) - modeled after the JIRA REST API response format
type JiraIssueFields struct {
	// project
	//
	// x-displayName: "Project"
	// external ID of the project
	Project *JiraProject `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// issuetype
	//
	// x-displayName: "Issue Type"
	// Information about the issue type
	Issuetype *JiraIssueType `protobuf:"bytes,2,opt,name=issuetype,proto3" json:"issuetype,omitempty"`
	// status
	//
	// x-displayName: "Status"
	// Human readable status as it would appear in the external ticket tracking system's UI
	Status *JiraIssueStatus `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *JiraIssueFields) Reset()      { *m = JiraIssueFields{} }
func (*JiraIssueFields) ProtoMessage() {}
func (*JiraIssueFields) Descriptor() ([]byte, []int) {
	return fileDescriptor_af544b201edf4304, []int{4}
}
func (m *JiraIssueFields) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JiraIssueFields) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *JiraIssueFields) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JiraIssueFields.Merge(m, src)
}
func (m *JiraIssueFields) XXX_Size() int {
	return m.Size()
}
func (m *JiraIssueFields) XXX_DiscardUnknown() {
	xxx_messageInfo_JiraIssueFields.DiscardUnknown(m)
}

var xxx_messageInfo_JiraIssueFields proto.InternalMessageInfo

func (m *JiraIssueFields) GetProject() *JiraProject {
	if m != nil {
		return m.Project
	}
	return nil
}

func (m *JiraIssueFields) GetIssuetype() *JiraIssueType {
	if m != nil {
		return m.Issuetype
	}
	return nil
}

func (m *JiraIssueFields) GetStatus() *JiraIssueStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func init() {
	proto.RegisterEnum("ves.io.schema.ticket_management.TicketTrackingSystemType", TicketTrackingSystemType_name, TicketTrackingSystemType_value)
	golang_proto.RegisterEnum("ves.io.schema.ticket_management.TicketTrackingSystemType", TicketTrackingSystemType_name, TicketTrackingSystemType_value)
	proto.RegisterType((*JiraIssue)(nil), "ves.io.schema.ticket_management.JiraIssue")
	golang_proto.RegisterType((*JiraIssue)(nil), "ves.io.schema.ticket_management.JiraIssue")
	proto.RegisterType((*JiraIssueType)(nil), "ves.io.schema.ticket_management.JiraIssueType")
	golang_proto.RegisterType((*JiraIssueType)(nil), "ves.io.schema.ticket_management.JiraIssueType")
	proto.RegisterType((*JiraIssueStatus)(nil), "ves.io.schema.ticket_management.JiraIssueStatus")
	golang_proto.RegisterType((*JiraIssueStatus)(nil), "ves.io.schema.ticket_management.JiraIssueStatus")
	proto.RegisterType((*JiraProject)(nil), "ves.io.schema.ticket_management.JiraProject")
	golang_proto.RegisterType((*JiraProject)(nil), "ves.io.schema.ticket_management.JiraProject")
	proto.RegisterType((*JiraIssueFields)(nil), "ves.io.schema.ticket_management.JiraIssueFields")
	golang_proto.RegisterType((*JiraIssueFields)(nil), "ves.io.schema.ticket_management.JiraIssueFields")
}

func init() {
	proto.RegisterFile("ves.io/schema/ticket_management/types.proto", fileDescriptor_af544b201edf4304)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/ticket_management/types.proto", fileDescriptor_af544b201edf4304)
}

var fileDescriptor_af544b201edf4304 = []byte{
	// 569 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0x8e, 0xd7, 0x69, 0x5b, 0x5c, 0x06, 0x55, 0x4e, 0xd9, 0x86, 0x4c, 0xd5, 0xd3, 0x04, 0x2c,
	0x41, 0xe3, 0xc8, 0x09, 0x24, 0x26, 0x36, 0x50, 0x57, 0x65, 0xad, 0x10, 0x5c, 0x22, 0x37, 0x71,
	0x33, 0xd3, 0x24, 0x8e, 0x6c, 0xa7, 0xa3, 0x37, 0x7e, 0x02, 0x12, 0xfc, 0x08, 0x7e, 0x06, 0x47,
	0x8e, 0x3d, 0xf6, 0x48, 0xd3, 0x0b, 0xc7, 0xf1, 0x0f, 0x50, 0x9c, 0xb4, 0x5d, 0x37, 0x21, 0x3a,
	0x71, 0x7b, 0xf6, 0xf7, 0xbe, 0xf7, 0x7d, 0x7e, 0xef, 0x25, 0xf0, 0xd1, 0x80, 0x08, 0x8b, 0x32,
	0x5b, 0x78, 0xe7, 0x24, 0xc2, 0xb6, 0xa4, 0x5e, 0x9f, 0x48, 0x37, 0xc2, 0x31, 0x0e, 0x48, 0x44,
	0x62, 0x69, 0xcb, 0x61, 0x42, 0x84, 0x95, 0x70, 0x26, 0x99, 0xf1, 0xa0, 0x48, 0xb6, 0x8a, 0x64,
	0xeb, 0x46, 0xf2, 0xee, 0x41, 0x40, 0xe5, 0x79, 0xda, 0xb5, 0x3c, 0x16, 0xd9, 0x01, 0x0b, 0x98,
	0xad, 0x78, 0xdd, 0xb4, 0xa7, 0x4e, 0xea, 0xa0, 0xa2, 0xa2, 0xde, 0xee, 0x4e, 0xc0, 0x58, 0x10,
	0x92, 0x45, 0x16, 0x8e, 0x87, 0x25, 0xb4, 0xb7, 0xec, 0x8b, 0x25, 0x92, 0xb2, 0x58, 0xcc, 0x78,
	0xd7, 0x4c, 0x2f, 0x2c, 0xee, 0xde, 0x5f, 0x86, 0x06, 0x38, 0xa4, 0x3e, 0x96, 0xa4, 0x44, 0xeb,
	0xd7, 0x50, 0x4a, 0x2e, 0xdc, 0xa5, 0xd2, 0x8d, 0x0b, 0xa8, 0x9f, 0x50, 0x8e, 0x8f, 0x85, 0x48,
	0x89, 0x71, 0x17, 0xae, 0x51, 0xdf, 0x04, 0x75, 0xb0, 0xaf, 0x3b, 0x6b, 0xd4, 0x37, 0x6a, 0xb0,
	0xd2, 0x27, 0x43, 0x73, 0x4d, 0x5d, 0xe4, 0xa1, 0xf1, 0x0a, 0x6e, 0xf4, 0x28, 0x09, 0x7d, 0x61,
	0x56, 0xea, 0x60, 0xbf, 0x7a, 0xf8, 0xc4, 0xfa, 0x47, 0x8b, 0xac, 0x79, 0xf5, 0x23, 0xc5, 0x73,
	0x4a, 0x7e, 0xa3, 0x0f, 0xb7, 0xe7, 0x50, 0x7b, 0x98, 0xdc, 0x14, 0x37, 0xe0, 0x7a, 0x8c, 0x23,
	0x52, 0xaa, 0xab, 0xd8, 0xd8, 0x81, 0x5b, 0xd4, 0x63, 0xb1, 0x9b, 0xf2, 0x50, 0x19, 0xd0, 0x9d,
	0xcd, 0xfc, 0xdc, 0xe1, 0xa1, 0xb1, 0x07, 0x75, 0x3c, 0xc0, 0x12, 0x73, 0x97, 0xfa, 0xe6, 0xba,
	0xc2, 0xb6, 0x8a, 0x8b, 0x63, 0xbf, 0xd1, 0x82, 0xf7, 0xe6, 0x62, 0x67, 0x12, 0xcb, 0x54, 0xfc,
	0xa7, 0x5c, 0xe3, 0x2b, 0x80, 0xd5, 0xbc, 0x64, 0x8b, 0xb3, 0x0f, 0xc4, 0x93, 0x2b, 0xb4, 0x6e,
	0x26, 0x50, 0xb9, 0x22, 0x70, 0x0a, 0xab, 0x34, 0xf7, 0xe4, 0xaa, 0x91, 0x9a, 0xeb, 0xf5, 0xca,
	0x7e, 0xf5, 0xd0, 0x5a, 0xbd, 0xa7, 0x79, 0xe3, 0x1c, 0x48, 0x67, 0xa1, 0x68, 0xfc, 0x06, 0x57,
	0x5e, 0x5a, 0x74, 0xdc, 0x38, 0x82, 0x9b, 0x49, 0xe1, 0x52, 0xf9, 0xab, 0x1e, 0x3e, 0x5e, 0x49,
	0xa0, 0x7c, 0x99, 0x33, 0x23, 0x1b, 0x6f, 0xa0, 0xae, 0x94, 0x72, 0xaf, 0xea, 0x61, 0xb7, 0xb7,
	0xba, 0x28, 0x90, 0x6f, 0x92, 0x50, 0x93, 0xb8, 0xfd, 0x26, 0x15, 0x13, 0x74, 0x4a, 0xfe, 0xc3,
	0x67, 0xd0, 0x6c, 0xab, 0xe4, 0x36, 0xc7, 0x5e, 0x9f, 0xc6, 0xc1, 0xd9, 0x50, 0x48, 0x12, 0xa9,
	0xa5, 0xaa, 0xc1, 0x3b, 0xed, 0x77, 0xad, 0x97, 0x6e, 0xa7, 0xf9, 0xba, 0x79, 0xfa, 0xb6, 0x59,
	0xd3, 0x8c, 0x6d, 0xa8, 0xab, 0x9b, 0x93, 0x63, 0xe7, 0x79, 0x0d, 0xbc, 0xf8, 0x02, 0x46, 0x13,
	0xa4, 0x8d, 0x27, 0x48, 0xbb, 0x9c, 0x20, 0xf0, 0x29, 0x43, 0xe0, 0x5b, 0x86, 0xc0, 0x8f, 0x0c,
	0x81, 0x51, 0x86, 0xc0, 0x38, 0x43, 0xe0, 0x67, 0x86, 0xc0, 0xaf, 0x0c, 0x69, 0x97, 0x19, 0x02,
	0x9f, 0xa7, 0x48, 0xfb, 0x3e, 0x45, 0x60, 0x34, 0x45, 0xda, 0x78, 0x8a, 0xb4, 0xf7, 0x9d, 0x80,
	0x25, 0xfd, 0xc0, 0x1a, 0xb0, 0x50, 0x12, 0xce, 0xb1, 0x95, 0x0a, 0x5b, 0x05, 0x3d, 0xc6, 0xa3,
	0x83, 0x84, 0xb3, 0x01, 0xf5, 0x09, 0x3f, 0x98, 0xc1, 0x76, 0xd2, 0x0d, 0x98, 0x4d, 0x3e, 0xca,
	0xf2, 0x7b, 0xfc, 0xdb, 0x4f, 0xa8, 0xbb, 0xa1, 0x3e, 0xce, 0xa7, 0x7f, 0x02, 0x00, 0x00, 0xff,
	0xff, 0x31, 0xe2, 0x3c, 0x62, 0xae, 0x04, 0x00, 0x00,
}

func (x TicketTrackingSystemType) String() string {
	s, ok := TicketTrackingSystemType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *JiraIssue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*JiraIssue)
	if !ok {
		that2, ok := that.(JiraIssue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if !this.Fields.Equal(that1.Fields) {
		return false
	}
	return true
}
func (this *JiraIssueType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*JiraIssueType)
	if !ok {
		that2, ok := that.(JiraIssueType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.IconUrl != that1.IconUrl {
		return false
	}
	if this.AvatarId != that1.AvatarId {
		return false
	}
	return true
}
func (this *JiraIssueStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*JiraIssueStatus)
	if !ok {
		that2, ok := that.(JiraIssueStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.IconUrl != that1.IconUrl {
		return false
	}
	return true
}
func (this *JiraProject) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*JiraProject)
	if !ok {
		that2, ok := that.(JiraProject)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.IssueTypes) != len(that1.IssueTypes) {
		return false
	}
	for i := range this.IssueTypes {
		if !this.IssueTypes[i].Equal(that1.IssueTypes[i]) {
			return false
		}
	}
	return true
}
func (this *JiraIssueFields) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*JiraIssueFields)
	if !ok {
		that2, ok := that.(JiraIssueFields)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Project.Equal(that1.Project) {
		return false
	}
	if !this.Issuetype.Equal(that1.Issuetype) {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	return true
}
func (this *JiraIssue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ticket_management.JiraIssue{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	if this.Fields != nil {
		s = append(s, "Fields: "+fmt.Sprintf("%#v", this.Fields)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *JiraIssueType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&ticket_management.JiraIssueType{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "IconUrl: "+fmt.Sprintf("%#v", this.IconUrl)+",\n")
	s = append(s, "AvatarId: "+fmt.Sprintf("%#v", this.AvatarId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *JiraIssueStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ticket_management.JiraIssueStatus{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "IconUrl: "+fmt.Sprintf("%#v", this.IconUrl)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *JiraProject) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&ticket_management.JiraProject{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.IssueTypes != nil {
		s = append(s, "IssueTypes: "+fmt.Sprintf("%#v", this.IssueTypes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *JiraIssueFields) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ticket_management.JiraIssueFields{")
	if this.Project != nil {
		s = append(s, "Project: "+fmt.Sprintf("%#v", this.Project)+",\n")
	}
	if this.Issuetype != nil {
		s = append(s, "Issuetype: "+fmt.Sprintf("%#v", this.Issuetype)+",\n")
	}
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *JiraIssue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JiraIssue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JiraIssue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Fields != nil {
		{
			size, err := m.Fields.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JiraIssueType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JiraIssueType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JiraIssueType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AvatarId) > 0 {
		i -= len(m.AvatarId)
		copy(dAtA[i:], m.AvatarId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AvatarId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.IconUrl) > 0 {
		i -= len(m.IconUrl)
		copy(dAtA[i:], m.IconUrl)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.IconUrl)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JiraIssueStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JiraIssueStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JiraIssueStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IconUrl) > 0 {
		i -= len(m.IconUrl)
		copy(dAtA[i:], m.IconUrl)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.IconUrl)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JiraProject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JiraProject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JiraProject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IssueTypes) > 0 {
		for iNdEx := len(m.IssueTypes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IssueTypes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JiraIssueFields) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JiraIssueFields) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JiraIssueFields) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Issuetype != nil {
		{
			size, err := m.Issuetype.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Project != nil {
		{
			size, err := m.Project.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *JiraIssue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Fields != nil {
		l = m.Fields.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *JiraIssueType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.IconUrl)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.AvatarId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *JiraIssueStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.IconUrl)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *JiraProject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.IssueTypes) > 0 {
		for _, e := range m.IssueTypes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *JiraIssueFields) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Project != nil {
		l = m.Project.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Issuetype != nil {
		l = m.Issuetype.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *JiraIssue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JiraIssue{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Fields:` + strings.Replace(this.Fields.String(), "JiraIssueFields", "JiraIssueFields", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JiraIssueType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JiraIssueType{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`IconUrl:` + fmt.Sprintf("%v", this.IconUrl) + `,`,
		`AvatarId:` + fmt.Sprintf("%v", this.AvatarId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JiraIssueStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JiraIssueStatus{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`IconUrl:` + fmt.Sprintf("%v", this.IconUrl) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JiraProject) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForIssueTypes := "[]*JiraIssueType{"
	for _, f := range this.IssueTypes {
		repeatedStringForIssueTypes += strings.Replace(f.String(), "JiraIssueType", "JiraIssueType", 1) + ","
	}
	repeatedStringForIssueTypes += "}"
	s := strings.Join([]string{`&JiraProject{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`IssueTypes:` + repeatedStringForIssueTypes + `,`,
		`}`,
	}, "")
	return s
}
func (this *JiraIssueFields) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JiraIssueFields{`,
		`Project:` + strings.Replace(this.Project.String(), "JiraProject", "JiraProject", 1) + `,`,
		`Issuetype:` + strings.Replace(this.Issuetype.String(), "JiraIssueType", "JiraIssueType", 1) + `,`,
		`Status:` + strings.Replace(this.Status.String(), "JiraIssueStatus", "JiraIssueStatus", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *JiraIssue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JiraIssue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JiraIssue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fields == nil {
				m.Fields = &JiraIssueFields{}
			}
			if err := m.Fields.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JiraIssueType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JiraIssueType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JiraIssueType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IconUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvatarId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JiraIssueStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JiraIssueStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JiraIssueStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IconUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JiraProject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JiraProject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JiraProject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssueTypes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IssueTypes = append(m.IssueTypes, &JiraIssueType{})
			if err := m.IssueTypes[len(m.IssueTypes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JiraIssueFields) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JiraIssueFields: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JiraIssueFields: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Project", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Project == nil {
				m.Project = &JiraProject{}
			}
			if err := m.Project.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuetype", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Issuetype == nil {
				m.Issuetype = &JiraIssueType{}
			}
			if err := m.Issuetype.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &JiraIssueStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

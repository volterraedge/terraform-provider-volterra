// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package ticket_tracking_system

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *CreateSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetJiraConfig().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CreateSpecType.jira_config")
	}

	return nil
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) ProviderConfigValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for provider_config")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["provider_config"]; exists {
		val := m.GetProviderConfig()
		vOpts := append(opts,
			db.WithValidateField("provider_config"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetProviderConfig().(type) {
	case *CreateSpecType_JiraConfig:
		if fv, exists := v.FldValidators["provider_config.jira_config"]; exists {
			val := m.GetProviderConfig().(*CreateSpecType_JiraConfig).JiraConfig
			vOpts := append(opts,
				db.WithValidateField("provider_config"),
				db.WithValidateField("jira_config"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhProviderConfig := v.ProviderConfigValidationRuleHandler
	rulesProviderConfig := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhProviderConfig(rulesProviderConfig)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.provider_config: %s", err)
		panic(errMsg)
	}
	v.FldValidators["provider_config"] = vFn

	v.FldValidators["provider_config.jira_config"] = JiraConfigurationTypeValidator().Validate

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GetSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetJiraConfig().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GetSpecType.jira_config")
	}

	return nil
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) ProviderConfigValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for provider_config")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["provider_config"]; exists {
		val := m.GetProviderConfig()
		vOpts := append(opts,
			db.WithValidateField("provider_config"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetProviderConfig().(type) {
	case *GetSpecType_JiraConfig:
		if fv, exists := v.FldValidators["provider_config.jira_config"]; exists {
			val := m.GetProviderConfig().(*GetSpecType_JiraConfig).JiraConfig
			vOpts := append(opts,
				db.WithValidateField("provider_config"),
				db.WithValidateField("jira_config"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["type"]; exists {

		vOpts := append(opts, db.WithValidateField("type"))
		if err := fv(ctx, m.GetType(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhProviderConfig := v.ProviderConfigValidationRuleHandler
	rulesProviderConfig := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhProviderConfig(rulesProviderConfig)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.provider_config: %s", err)
		panic(errMsg)
	}
	v.FldValidators["provider_config"] = vFn

	v.FldValidators["provider_config.jira_config"] = JiraConfigurationTypeValidator().Validate

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GlobalSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetJiraConfig().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GlobalSpecType.jira_config")
	}

	return nil
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) ProviderConfigValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for provider_config")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["provider_config"]; exists {
		val := m.GetProviderConfig()
		vOpts := append(opts,
			db.WithValidateField("provider_config"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetProviderConfig().(type) {
	case *GlobalSpecType_JiraConfig:
		if fv, exists := v.FldValidators["provider_config.jira_config"]; exists {
			val := m.GetProviderConfig().(*GlobalSpecType_JiraConfig).JiraConfig
			vOpts := append(opts,
				db.WithValidateField("provider_config"),
				db.WithValidateField("jira_config"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["type"]; exists {

		vOpts := append(opts, db.WithValidateField("type"))
		if err := fv(ctx, m.GetType(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhProviderConfig := v.ProviderConfigValidationRuleHandler
	rulesProviderConfig := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhProviderConfig(rulesProviderConfig)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.provider_config: %s", err)
		panic(errMsg)
	}
	v.FldValidators["provider_config"] = vFn

	v.FldValidators["provider_config.jira_config"] = JiraConfigurationTypeValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *JiraAdhocRestApiConfigurationType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *JiraAdhocRestApiConfigurationType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *JiraAdhocRestApiConfigurationType) String() string {
	if m == nil {
		return ""
	}
	copy := m.DeepCopy()
	copy.Redact(context.Background())
	return copy.string()
}

func (m *JiraAdhocRestApiConfigurationType) GoString() string {
	copy := m.DeepCopy()
	copy.Redact(context.Background())
	return copy.goString()
}

// Redact squashes sensitive info in m (in-place)
func (m *JiraAdhocRestApiConfigurationType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	m.EncryptedApiToken = nil

	m.ApiToken = ""

	return nil
}

func (m *JiraAdhocRestApiConfigurationType) DeepCopy() *JiraAdhocRestApiConfigurationType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &JiraAdhocRestApiConfigurationType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *JiraAdhocRestApiConfigurationType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *JiraAdhocRestApiConfigurationType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return JiraAdhocRestApiConfigurationTypeValidator().Validate(ctx, m, opts...)
}

type ValidateJiraAdhocRestApiConfigurationType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateJiraAdhocRestApiConfigurationType) AccountEmailValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for account_email")
	}

	return validatorFn, nil
}

func (v *ValidateJiraAdhocRestApiConfigurationType) OrganizationDomainValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for organization_domain")
	}

	return validatorFn, nil
}

func (v *ValidateJiraAdhocRestApiConfigurationType) ApiTokenValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for api_token")
	}

	return validatorFn, nil
}

func (v *ValidateJiraAdhocRestApiConfigurationType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*JiraAdhocRestApiConfigurationType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *JiraAdhocRestApiConfigurationType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["account_email"]; exists {

		vOpts := append(opts, db.WithValidateField("account_email"))
		if err := fv(ctx, m.GetAccountEmail(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["api_token"]; exists {

		vOpts := append(opts, db.WithValidateField("api_token"))
		if err := fv(ctx, m.GetApiToken(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["encrypted_api_token"]; exists {

		vOpts := append(opts, db.WithValidateField("encrypted_api_token"))
		if err := fv(ctx, m.GetEncryptedApiToken(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["organization_domain"]; exists {

		vOpts := append(opts, db.WithValidateField("organization_domain"))
		if err := fv(ctx, m.GetOrganizationDomain(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultJiraAdhocRestApiConfigurationTypeValidator = func() *ValidateJiraAdhocRestApiConfigurationType {
	v := &ValidateJiraAdhocRestApiConfigurationType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAccountEmail := v.AccountEmailValidationRuleHandler
	rulesAccountEmail := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.email":     "true",
		"ves.io.schema.rules.string.min_len":   "1",
	}
	vFn, err = vrhAccountEmail(rulesAccountEmail)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for JiraAdhocRestApiConfigurationType.account_email: %s", err)
		panic(errMsg)
	}
	v.FldValidators["account_email"] = vFn

	vrhOrganizationDomain := v.OrganizationDomainValidationRuleHandler
	rulesOrganizationDomain := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.hostname":  "true",
		"ves.io.schema.rules.string.min_len":   "1",
	}
	vFn, err = vrhOrganizationDomain(rulesOrganizationDomain)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for JiraAdhocRestApiConfigurationType.organization_domain: %s", err)
		panic(errMsg)
	}
	v.FldValidators["organization_domain"] = vFn

	vrhApiToken := v.ApiTokenValidationRuleHandler
	rulesApiToken := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "512",
	}
	vFn, err = vrhApiToken(rulesApiToken)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for JiraAdhocRestApiConfigurationType.api_token: %s", err)
		panic(errMsg)
	}
	v.FldValidators["api_token"] = vFn

	v.FldValidators["encrypted_api_token"] = ves_io_schema.SecretTypeValidator().Validate

	return v
}()

func JiraAdhocRestApiConfigurationTypeValidator() db.Validator {
	return DefaultJiraAdhocRestApiConfigurationTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *JiraConfigurationType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *JiraConfigurationType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *JiraConfigurationType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetAdhocRestApi().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting JiraConfigurationType.adhoc_rest_api")
	}

	return nil
}

func (m *JiraConfigurationType) DeepCopy() *JiraConfigurationType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &JiraConfigurationType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *JiraConfigurationType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *JiraConfigurationType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return JiraConfigurationTypeValidator().Validate(ctx, m, opts...)
}

type ValidateJiraConfigurationType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateJiraConfigurationType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*JiraConfigurationType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *JiraConfigurationType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	switch m.GetConfig().(type) {
	case *JiraConfigurationType_AdhocRestApi:
		if fv, exists := v.FldValidators["config.adhoc_rest_api"]; exists {
			val := m.GetConfig().(*JiraConfigurationType_AdhocRestApi).AdhocRestApi
			vOpts := append(opts,
				db.WithValidateField("config"),
				db.WithValidateField("adhoc_rest_api"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultJiraConfigurationTypeValidator = func() *ValidateJiraConfigurationType {
	v := &ValidateJiraConfigurationType{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["config.adhoc_rest_api"] = JiraAdhocRestApiConfigurationTypeValidator().Validate

	return v
}()

func JiraConfigurationTypeValidator() db.Validator {
	return DefaultJiraConfigurationTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *ReplaceSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetJiraConfig().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ReplaceSpecType.jira_config")
	}

	return nil
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) ProviderConfigValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for provider_config")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["provider_config"]; exists {
		val := m.GetProviderConfig()
		vOpts := append(opts,
			db.WithValidateField("provider_config"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetProviderConfig().(type) {
	case *ReplaceSpecType_JiraConfig:
		if fv, exists := v.FldValidators["provider_config.jira_config"]; exists {
			val := m.GetProviderConfig().(*ReplaceSpecType_JiraConfig).JiraConfig
			vOpts := append(opts,
				db.WithValidateField("provider_config"),
				db.WithValidateField("jira_config"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhProviderConfig := v.ProviderConfigValidationRuleHandler
	rulesProviderConfig := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhProviderConfig(rulesProviderConfig)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.provider_config: %s", err)
		panic(errMsg)
	}
	v.FldValidators["provider_config"] = vFn

	v.FldValidators["provider_config.jira_config"] = JiraConfigurationTypeValidator().Validate

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetProviderConfigToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ProviderConfig.(type) {
	case nil:
		o.ProviderConfig = nil

	case *CreateSpecType_JiraConfig:
		o.ProviderConfig = &GlobalSpecType_JiraConfig{JiraConfig: of.JiraConfig}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetProviderConfigFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ProviderConfig.(type) {
	case nil:
		r.ProviderConfig = nil

	case *GlobalSpecType_JiraConfig:
		r.ProviderConfig = &CreateSpecType_JiraConfig{JiraConfig: of.JiraConfig}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *CreateSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetProviderConfigFromGlobalSpecType(f)
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *CreateSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *CreateSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetProviderConfigToGlobalSpecType(f)
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *CreateSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetProviderConfigToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ProviderConfig.(type) {
	case nil:
		o.ProviderConfig = nil

	case *GetSpecType_JiraConfig:
		o.ProviderConfig = &GlobalSpecType_JiraConfig{JiraConfig: of.JiraConfig}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetProviderConfigFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ProviderConfig.(type) {
	case nil:
		r.ProviderConfig = nil

	case *GlobalSpecType_JiraConfig:
		r.ProviderConfig = &GetSpecType_JiraConfig{JiraConfig: of.JiraConfig}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetProviderConfigFromGlobalSpecType(f)
	m.Type = f.GetType()
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetProviderConfigToGlobalSpecType(f)
	f.Type = m1.Type
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetProviderConfigToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ProviderConfig.(type) {
	case nil:
		o.ProviderConfig = nil

	case *ReplaceSpecType_JiraConfig:
		o.ProviderConfig = &GlobalSpecType_JiraConfig{JiraConfig: of.JiraConfig}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetProviderConfigFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ProviderConfig.(type) {
	case nil:
		r.ProviderConfig = nil

	case *GlobalSpecType_JiraConfig:
		r.ProviderConfig = &ReplaceSpecType_JiraConfig{JiraConfig: of.JiraConfig}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *ReplaceSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetProviderConfigFromGlobalSpecType(f)
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetProviderConfigToGlobalSpecType(f)
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package ticket_tracking_system

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *JiraProjectsIssueTypesRequest) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *JiraProjectsIssueTypesRequest) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *JiraProjectsIssueTypesRequest) DeepCopy() *JiraProjectsIssueTypesRequest {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &JiraProjectsIssueTypesRequest{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *JiraProjectsIssueTypesRequest) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *JiraProjectsIssueTypesRequest) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return JiraProjectsIssueTypesRequestValidator().Validate(ctx, m, opts...)
}

type ValidateJiraProjectsIssueTypesRequest struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateJiraProjectsIssueTypesRequest) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*JiraProjectsIssueTypesRequest)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *JiraProjectsIssueTypesRequest got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["ticket_tracking_system"]; exists {

		vOpts := append(opts, db.WithValidateField("ticket_tracking_system"))
		if err := fv(ctx, m.GetTicketTrackingSystem(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultJiraProjectsIssueTypesRequestValidator = func() *ValidateJiraProjectsIssueTypesRequest {
	v := &ValidateJiraProjectsIssueTypesRequest{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func JiraProjectsIssueTypesRequestValidator() db.Validator {
	return DefaultJiraProjectsIssueTypesRequestValidator
}

// augmented methods on protoc/std generated struct

func (m *JiraProjectsIssueTypesResponse) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *JiraProjectsIssueTypesResponse) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *JiraProjectsIssueTypesResponse) DeepCopy() *JiraProjectsIssueTypesResponse {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &JiraProjectsIssueTypesResponse{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *JiraProjectsIssueTypesResponse) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *JiraProjectsIssueTypesResponse) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return JiraProjectsIssueTypesResponseValidator().Validate(ctx, m, opts...)
}

type ValidateJiraProjectsIssueTypesResponse struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateJiraProjectsIssueTypesResponse) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*JiraProjectsIssueTypesResponse)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *JiraProjectsIssueTypesResponse got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["projects"]; exists {

		vOpts := append(opts, db.WithValidateField("projects"))
		for idx, item := range m.GetProjects() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["ticket_tracking_system"]; exists {

		vOpts := append(opts, db.WithValidateField("ticket_tracking_system"))
		if err := fv(ctx, m.GetTicketTrackingSystem(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultJiraProjectsIssueTypesResponseValidator = func() *ValidateJiraProjectsIssueTypesResponse {
	v := &ValidateJiraProjectsIssueTypesResponse{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func JiraProjectsIssueTypesResponseValidator() db.Validator {
	return DefaultJiraProjectsIssueTypesResponseValidator
}

// augmented methods on protoc/std generated struct

func (m *ValidateTicketTrackingSystemRequest) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ValidateTicketTrackingSystemRequest) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *ValidateTicketTrackingSystemRequest) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetJiraConfig().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ValidateTicketTrackingSystemRequest.jira_config")
	}

	return nil
}

func (m *ValidateTicketTrackingSystemRequest) DeepCopy() *ValidateTicketTrackingSystemRequest {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ValidateTicketTrackingSystemRequest{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ValidateTicketTrackingSystemRequest) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ValidateTicketTrackingSystemRequest) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ValidateTicketTrackingSystemRequestValidator().Validate(ctx, m, opts...)
}

type ValidateValidateTicketTrackingSystemRequest struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateValidateTicketTrackingSystemRequest) ProviderConfigValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for provider_config")
	}
	return validatorFn, nil
}

func (v *ValidateValidateTicketTrackingSystemRequest) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ValidateTicketTrackingSystemRequest)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ValidateTicketTrackingSystemRequest got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["provider_config"]; exists {
		val := m.GetProviderConfig()
		vOpts := append(opts,
			db.WithValidateField("provider_config"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetProviderConfig().(type) {
	case *ValidateTicketTrackingSystemRequest_JiraConfig:
		if fv, exists := v.FldValidators["provider_config.jira_config"]; exists {
			val := m.GetProviderConfig().(*ValidateTicketTrackingSystemRequest_JiraConfig).JiraConfig
			vOpts := append(opts,
				db.WithValidateField("provider_config"),
				db.WithValidateField("jira_config"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultValidateTicketTrackingSystemRequestValidator = func() *ValidateValidateTicketTrackingSystemRequest {
	v := &ValidateValidateTicketTrackingSystemRequest{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhProviderConfig := v.ProviderConfigValidationRuleHandler
	rulesProviderConfig := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhProviderConfig(rulesProviderConfig)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ValidateTicketTrackingSystemRequest.provider_config: %s", err)
		panic(errMsg)
	}
	v.FldValidators["provider_config"] = vFn

	v.FldValidators["provider_config.jira_config"] = JiraConfigurationTypeValidator().Validate

	return v
}()

func ValidateTicketTrackingSystemRequestValidator() db.Validator {
	return DefaultValidateTicketTrackingSystemRequestValidator
}

// augmented methods on protoc/std generated struct

func (m *ValidateTicketTrackingSystemResponse) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ValidateTicketTrackingSystemResponse) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ValidateTicketTrackingSystemResponse) DeepCopy() *ValidateTicketTrackingSystemResponse {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ValidateTicketTrackingSystemResponse{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ValidateTicketTrackingSystemResponse) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ValidateTicketTrackingSystemResponse) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ValidateTicketTrackingSystemResponseValidator().Validate(ctx, m, opts...)
}

type ValidateValidateTicketTrackingSystemResponse struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateValidateTicketTrackingSystemResponse) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ValidateTicketTrackingSystemResponse)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ValidateTicketTrackingSystemResponse got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["errors"]; exists {

		vOpts := append(opts, db.WithValidateField("errors"))
		for idx, item := range m.GetErrors() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultValidateTicketTrackingSystemResponseValidator = func() *ValidateValidateTicketTrackingSystemResponse {
	v := &ValidateValidateTicketTrackingSystemResponse{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func ValidateTicketTrackingSystemResponseValidator() db.Validator {
	return DefaultValidateTicketTrackingSystemResponseValidator
}

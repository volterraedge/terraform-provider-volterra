// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/ticket_management/ticket_tracking_system/public_customapi.proto

// ticket_tracking_system
//
// x-displayName: "Ticket Tracking System"
// Public Custom APIs for Ticket Tracking System related operations

package ticket_tracking_system

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	_ "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ticket_management "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/ticket_management"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ValidateTicketTrackingSystemRequest
//
// x-displayName: "Validate Ticket Tracking System Request"
// Request message when validating a Ticket Tracking System's credentials / organization through the custom API
type ValidateTicketTrackingSystemRequest struct {
	// provider_config
	//
	// x-displayName: "Provider Configuration"
	// x-required
	// The configuration for the ticket provider
	//
	// Types that are valid to be assigned to ProviderConfig:
	//	*ValidateTicketTrackingSystemRequest_JiraConfig
	ProviderConfig isValidateTicketTrackingSystemRequest_ProviderConfig `protobuf_oneof:"provider_config"`
}

func (m *ValidateTicketTrackingSystemRequest) Reset()      { *m = ValidateTicketTrackingSystemRequest{} }
func (*ValidateTicketTrackingSystemRequest) ProtoMessage() {}
func (*ValidateTicketTrackingSystemRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_24c255355597bd00, []int{0}
}
func (m *ValidateTicketTrackingSystemRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidateTicketTrackingSystemRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidateTicketTrackingSystemRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidateTicketTrackingSystemRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidateTicketTrackingSystemRequest.Merge(m, src)
}
func (m *ValidateTicketTrackingSystemRequest) XXX_Size() int {
	return m.Size()
}
func (m *ValidateTicketTrackingSystemRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidateTicketTrackingSystemRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ValidateTicketTrackingSystemRequest proto.InternalMessageInfo

type isValidateTicketTrackingSystemRequest_ProviderConfig interface {
	isValidateTicketTrackingSystemRequest_ProviderConfig()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ValidateTicketTrackingSystemRequest_JiraConfig struct {
	JiraConfig *JiraConfigurationType `protobuf:"bytes,3,opt,name=jira_config,json=jiraConfig,proto3,oneof" json:"jira_config,omitempty"`
}

func (*ValidateTicketTrackingSystemRequest_JiraConfig) isValidateTicketTrackingSystemRequest_ProviderConfig() {
}

func (m *ValidateTicketTrackingSystemRequest) GetProviderConfig() isValidateTicketTrackingSystemRequest_ProviderConfig {
	if m != nil {
		return m.ProviderConfig
	}
	return nil
}

func (m *ValidateTicketTrackingSystemRequest) GetJiraConfig() *JiraConfigurationType {
	if x, ok := m.GetProviderConfig().(*ValidateTicketTrackingSystemRequest_JiraConfig); ok {
		return x.JiraConfig
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ValidateTicketTrackingSystemRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ValidateTicketTrackingSystemRequest_JiraConfig)(nil),
	}
}

// ValidateTicketTrackingSystemResponse
//
// x-displayName: "Validate Ticket Tracking System Response"
// Response message when validating a Ticket Tracking System's credentials / organization through the custom API
// Empty errors means the validation succeeded
type ValidateTicketTrackingSystemResponse struct {
	// errors
	//
	// x-displayName: "Errors"
	// Errors related to ticket tracking system creation - such as issues with validation of credentials + organization domain
	Errors []*schema.ErrorType `protobuf:"bytes,4,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (m *ValidateTicketTrackingSystemResponse) Reset()      { *m = ValidateTicketTrackingSystemResponse{} }
func (*ValidateTicketTrackingSystemResponse) ProtoMessage() {}
func (*ValidateTicketTrackingSystemResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_24c255355597bd00, []int{1}
}
func (m *ValidateTicketTrackingSystemResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidateTicketTrackingSystemResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidateTicketTrackingSystemResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidateTicketTrackingSystemResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidateTicketTrackingSystemResponse.Merge(m, src)
}
func (m *ValidateTicketTrackingSystemResponse) XXX_Size() int {
	return m.Size()
}
func (m *ValidateTicketTrackingSystemResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidateTicketTrackingSystemResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ValidateTicketTrackingSystemResponse proto.InternalMessageInfo

func (m *ValidateTicketTrackingSystemResponse) GetErrors() []*schema.ErrorType {
	if m != nil {
		return m.Errors
	}
	return nil
}

// JiraProjectsIssueTypesRequest
//
// x-displayName: "Jira Projects & Issue Types Request"
type JiraProjectsIssueTypesRequest struct {
	// ticket_tracking_system
	//
	// x-displayName: "Ticket Tracking System"
	// The name (identifier) of the ticket tracking system for the request
	TicketTrackingSystem string `protobuf:"bytes,1,opt,name=ticket_tracking_system,json=ticketTrackingSystem,proto3" json:"ticket_tracking_system,omitempty"`
}

func (m *JiraProjectsIssueTypesRequest) Reset()      { *m = JiraProjectsIssueTypesRequest{} }
func (*JiraProjectsIssueTypesRequest) ProtoMessage() {}
func (*JiraProjectsIssueTypesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_24c255355597bd00, []int{2}
}
func (m *JiraProjectsIssueTypesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JiraProjectsIssueTypesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JiraProjectsIssueTypesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JiraProjectsIssueTypesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JiraProjectsIssueTypesRequest.Merge(m, src)
}
func (m *JiraProjectsIssueTypesRequest) XXX_Size() int {
	return m.Size()
}
func (m *JiraProjectsIssueTypesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_JiraProjectsIssueTypesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_JiraProjectsIssueTypesRequest proto.InternalMessageInfo

func (m *JiraProjectsIssueTypesRequest) GetTicketTrackingSystem() string {
	if m != nil {
		return m.TicketTrackingSystem
	}
	return ""
}

// JiraProjectsIssueTypesResponse
//
// x-displayName: "Jira Projects & Issue Types Response"
type JiraProjectsIssueTypesResponse struct {
	// ticket_tracking_system
	//
	// x-displayName: "Ticket Tracking System"
	// The name (identifier) of the ticket tracking system for the request
	TicketTrackingSystem string `protobuf:"bytes,1,opt,name=ticket_tracking_system,json=ticketTrackingSystem,proto3" json:"ticket_tracking_system,omitempty"`
	// projects
	//
	// x-displayName: "Projects"
	// A list of Jira projects that are available in the specified ticket tracking system
	Projects []*ticket_management.JiraProject `protobuf:"bytes,2,rep,name=projects,proto3" json:"projects,omitempty"`
}

func (m *JiraProjectsIssueTypesResponse) Reset()      { *m = JiraProjectsIssueTypesResponse{} }
func (*JiraProjectsIssueTypesResponse) ProtoMessage() {}
func (*JiraProjectsIssueTypesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_24c255355597bd00, []int{3}
}
func (m *JiraProjectsIssueTypesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JiraProjectsIssueTypesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JiraProjectsIssueTypesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JiraProjectsIssueTypesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JiraProjectsIssueTypesResponse.Merge(m, src)
}
func (m *JiraProjectsIssueTypesResponse) XXX_Size() int {
	return m.Size()
}
func (m *JiraProjectsIssueTypesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_JiraProjectsIssueTypesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_JiraProjectsIssueTypesResponse proto.InternalMessageInfo

func (m *JiraProjectsIssueTypesResponse) GetTicketTrackingSystem() string {
	if m != nil {
		return m.TicketTrackingSystem
	}
	return ""
}

func (m *JiraProjectsIssueTypesResponse) GetProjects() []*ticket_management.JiraProject {
	if m != nil {
		return m.Projects
	}
	return nil
}

func init() {
	proto.RegisterType((*ValidateTicketTrackingSystemRequest)(nil), "ves.io.schema.ticket_management.ticket_tracking_system.ValidateTicketTrackingSystemRequest")
	proto.RegisterType((*ValidateTicketTrackingSystemResponse)(nil), "ves.io.schema.ticket_management.ticket_tracking_system.ValidateTicketTrackingSystemResponse")
	proto.RegisterType((*JiraProjectsIssueTypesRequest)(nil), "ves.io.schema.ticket_management.ticket_tracking_system.JiraProjectsIssueTypesRequest")
	proto.RegisterType((*JiraProjectsIssueTypesResponse)(nil), "ves.io.schema.ticket_management.ticket_tracking_system.JiraProjectsIssueTypesResponse")
}

func init() {
	proto.RegisterFile("ves.io/schema/ticket_management/ticket_tracking_system/public_customapi.proto", fileDescriptor_24c255355597bd00)
}

var fileDescriptor_24c255355597bd00 = []byte{
	// 719 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0x4f, 0x4f, 0x13, 0x4f,
	0x18, 0xee, 0xb4, 0x40, 0x60, 0x39, 0xfc, 0xc8, 0xf2, 0x0b, 0x2e, 0x05, 0xd7, 0x66, 0xf5, 0x40,
	0xd0, 0xee, 0x2a, 0xfe, 0x39, 0x70, 0x13, 0x62, 0x02, 0x18, 0x12, 0xac, 0x40, 0x8c, 0x9a, 0x6c,
	0xa6, 0xdb, 0xb7, 0xdb, 0x81, 0xee, 0xce, 0x38, 0x33, 0x5b, 0xe8, 0xcd, 0xf0, 0x09, 0x4c, 0xfc,
	0x02, 0xc6, 0x93, 0x27, 0x8f, 0x5e, 0xb8, 0x70, 0xc3, 0x93, 0x69, 0xf4, 0xc2, 0x51, 0x16, 0x0f,
	0x1e, 0x39, 0x7b, 0x32, 0xdd, 0x6e, 0x49, 0x5b, 0x0b, 0x48, 0xd5, 0x4b, 0xd3, 0xf6, 0x79, 0xf6,
	0x99, 0xe7, 0x7d, 0xde, 0x77, 0xde, 0x55, 0x96, 0x2b, 0x20, 0x4c, 0x42, 0x2d, 0xe1, 0x94, 0xc0,
	0xc3, 0x96, 0x24, 0xce, 0x26, 0x48, 0xdb, 0xc3, 0x3e, 0x76, 0xc1, 0x03, 0x5f, 0x36, 0xff, 0x91,
	0x1c, 0x3b, 0x9b, 0xc4, 0x77, 0x6d, 0x51, 0x15, 0x12, 0x3c, 0x8b, 0x05, 0xf9, 0x32, 0x71, 0x6c,
	0x27, 0x10, 0x92, 0x7a, 0x98, 0x11, 0x93, 0x71, 0x2a, 0xa9, 0x7a, 0xaf, 0x21, 0x67, 0x36, 0xe4,
	0xcc, 0x5f, 0xe4, 0xcc, 0xee, 0x72, 0xe9, 0x49, 0x97, 0x52, 0xb7, 0x0c, 0x16, 0x66, 0xc4, 0xc2,
	0xbe, 0x4f, 0x25, 0x96, 0x84, 0xfa, 0xa2, 0xa1, 0x9a, 0x1e, 0x6f, 0x41, 0x4b, 0x52, 0xb2, 0x3c,
	0x2d, 0x54, 0x63, 0xe8, 0x4a, 0x0c, 0x45, 0xbf, 0xf2, 0x41, 0xd1, 0x92, 0xc4, 0x03, 0x21, 0xb1,
	0xc7, 0x62, 0x42, 0xba, 0xbd, 0x40, 0xe0, 0x9c, 0xf2, 0xa6, 0xee, 0x44, 0x3b, 0x46, 0x59, 0xeb,
	0xa1, 0x73, 0x3d, 0x26, 0x23, 0xab, 0x0c, 0x9a, 0x1a, 0xd7, 0xcf, 0xd5, 0x68, 0x21, 0x8f, 0x77,
	0x90, 0x5b, 0x20, 0xa3, 0x1d, 0xaa, 0x80, 0x00, 0xbf, 0xd2, 0xe1, 0x37, 0xd3, 0xc1, 0x21, 0xb0,
	0x65, 0xb7, 0x31, 0x8c, 0x3d, 0xa4, 0x5c, 0x5d, 0xc7, 0x65, 0x52, 0xc0, 0x12, 0x56, 0x23, 0x2b,
	0xab, 0xb1, 0xf7, 0xc7, 0x91, 0xf5, 0x1c, 0xbc, 0x08, 0x40, 0x48, 0x95, 0x29, 0xc3, 0x1b, 0x84,
	0x63, 0xdb, 0xa1, 0x7e, 0x91, 0xb8, 0x5a, 0x2a, 0x83, 0xa6, 0x86, 0x67, 0x96, 0xcd, 0xde, 0x5a,
	0x6b, 0x2e, 0x11, 0x8e, 0xe7, 0x23, 0xa5, 0x80, 0x47, 0x5d, 0x5d, 0xad, 0x32, 0x58, 0x48, 0xe4,
	0x94, 0x8d, 0x13, 0x60, 0x6e, 0x42, 0xf9, 0x8f, 0x71, 0x5a, 0x21, 0x05, 0xe0, 0xf1, 0xa9, 0xea,
	0xe0, 0xde, 0x2e, 0x4a, 0xd5, 0x76, 0x51, 0x72, 0xa9, 0x6f, 0x10, 0x8d, 0xd4, 0x3f, 0x93, 0x23,
	0x29, 0xe3, 0x89, 0x72, 0xed, 0xec, 0x0a, 0x04, 0xa3, 0xbe, 0x00, 0xf5, 0xa6, 0x32, 0xd0, 0xe8,
	0xb4, 0xd6, 0x97, 0x49, 0x4d, 0x0d, 0xcf, 0x68, 0x1d, 0xee, 0x1f, 0xd4, 0xc1, 0xba, 0x91, 0x5c,
	0xcc, 0x33, 0xd6, 0x94, 0xcb, 0x75, 0xa7, 0x2b, 0x9c, 0x6e, 0x80, 0x23, 0xc5, 0xa2, 0x10, 0x01,
	0xd4, 0x09, 0xa2, 0x99, 0xca, 0x1d, 0x65, 0xac, 0x7b, 0x85, 0x1a, 0xca, 0xa0, 0xa9, 0xa1, 0xdc,
	0xff, 0xb2, 0x8b, 0x21, 0xe3, 0x0d, 0x52, 0xf4, 0xd3, 0x74, 0x63, 0xaf, 0x3d, 0x09, 0xab, 0x0b,
	0xca, 0x20, 0x8b, 0x35, 0xb5, 0x64, 0x54, 0xe3, 0x8d, 0x73, 0x3b, 0xd4, 0x62, 0x24, 0x77, 0xf2,
	0xf4, 0xcc, 0xfb, 0x7e, 0x65, 0x68, 0x3e, 0xba, 0xc7, 0xf7, 0x57, 0x16, 0xd5, 0xcf, 0x49, 0x65,
	0xf2, 0xac, 0x88, 0xd5, 0x67, 0xbd, 0x0e, 0xc2, 0x6f, 0x8c, 0x5e, 0xfa, 0xf9, 0xbf, 0x11, 0x6f,
	0x24, 0x6d, 0x6c, 0x85, 0xfb, 0xda, 0xa5, 0xe2, 0xdd, 0x6d, 0x27, 0xeb, 0x50, 0x5f, 0xd0, 0x32,
	0x64, 0xf3, 0x58, 0x10, 0x27, 0x1b, 0x08, 0xe0, 0x3b, 0x5f, 0xbe, 0xbd, 0x4e, 0xae, 0x1b, 0x8f,
	0xe2, 0xcd, 0x66, 0xf9, 0xd8, 0x03, 0xc1, 0xb0, 0x03, 0xc2, 0x12, 0x25, 0xcc, 0xa1, 0x70, 0xca,
	0x7d, 0x17, 0x56, 0x25, 0x3e, 0xda, 0xee, 0x4e, 0x98, 0x45, 0xd3, 0xea, 0x87, 0xa4, 0x32, 0xd6,
	0x7d, 0x0a, 0xd4, 0xb5, 0x3f, 0xb9, 0x57, 0xa7, 0x4e, 0x6b, 0x7a, 0xfd, 0x6f, 0xcb, 0xc6, 0x11,
	0x7a, 0xe1, 0xbe, 0x36, 0x1a, 0x45, 0x58, 0x80, 0x22, 0x0e, 0xca, 0x32, 0x8b, 0x1d, 0x07, 0x84,
	0x88, 0xe2, 0x5b, 0x31, 0x1e, 0x5e, 0x3c, 0xbe, 0x68, 0xd5, 0x34, 0x87, 0xd1, 0x26, 0xf5, 0x23,
	0xed, 0x68, 0xf7, 0xcd, 0xa2, 0xe9, 0xf4, 0x68, 0x7d, 0x0b, 0xfc, 0xd8, 0x45, 0xfd, 0x05, 0xf0,
	0xe8, 0xad, 0x9d, 0x4f, 0x5a, 0xb2, 0x84, 0xe6, 0xde, 0xa2, 0xda, 0xa1, 0x9e, 0x38, 0x38, 0xd4,
	0x13, 0xc7, 0x87, 0x3a, 0x7a, 0x19, 0xea, 0xe8, 0x5d, 0xa8, 0xa3, 0x8f, 0xa1, 0x8e, 0x6a, 0xa1,
	0x8e, 0xbe, 0x86, 0x3a, 0xfa, 0x1e, 0xea, 0x89, 0xe3, 0x50, 0x47, 0xaf, 0x8e, 0xf4, 0x44, 0xed,
	0x48, 0x4f, 0x1c, 0x1c, 0xe9, 0x89, 0xa7, 0x65, 0x97, 0xb2, 0x4d, 0xd7, 0xac, 0xd0, 0xb2, 0x04,
	0xce, 0xb1, 0x19, 0x08, 0x2b, 0xfa, 0x52, 0xa4, 0xdc, 0xcb, 0x36, 0xd7, 0x4f, 0xb6, 0x09, 0x5b,
	0x2c, 0xef, 0x52, 0x0b, 0xb6, 0x65, 0xbc, 0x4f, 0x2f, 0xf8, 0x1a, 0xc8, 0x0f, 0x44, 0x3b, 0xf7,
	0xf6, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x49, 0x6d, 0x3b, 0x6a, 0x61, 0x07, 0x00, 0x00,
}

func (this *ValidateTicketTrackingSystemRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ValidateTicketTrackingSystemRequest)
	if !ok {
		that2, ok := that.(ValidateTicketTrackingSystemRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ProviderConfig == nil {
		if this.ProviderConfig != nil {
			return false
		}
	} else if this.ProviderConfig == nil {
		return false
	} else if !this.ProviderConfig.Equal(that1.ProviderConfig) {
		return false
	}
	return true
}
func (this *ValidateTicketTrackingSystemRequest_JiraConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ValidateTicketTrackingSystemRequest_JiraConfig)
	if !ok {
		that2, ok := that.(ValidateTicketTrackingSystemRequest_JiraConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JiraConfig.Equal(that1.JiraConfig) {
		return false
	}
	return true
}
func (this *ValidateTicketTrackingSystemResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ValidateTicketTrackingSystemResponse)
	if !ok {
		that2, ok := that.(ValidateTicketTrackingSystemResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Errors) != len(that1.Errors) {
		return false
	}
	for i := range this.Errors {
		if !this.Errors[i].Equal(that1.Errors[i]) {
			return false
		}
	}
	return true
}
func (this *JiraProjectsIssueTypesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*JiraProjectsIssueTypesRequest)
	if !ok {
		that2, ok := that.(JiraProjectsIssueTypesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TicketTrackingSystem != that1.TicketTrackingSystem {
		return false
	}
	return true
}
func (this *JiraProjectsIssueTypesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*JiraProjectsIssueTypesResponse)
	if !ok {
		that2, ok := that.(JiraProjectsIssueTypesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TicketTrackingSystem != that1.TicketTrackingSystem {
		return false
	}
	if len(this.Projects) != len(that1.Projects) {
		return false
	}
	for i := range this.Projects {
		if !this.Projects[i].Equal(that1.Projects[i]) {
			return false
		}
	}
	return true
}
func (this *ValidateTicketTrackingSystemRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&ticket_tracking_system.ValidateTicketTrackingSystemRequest{")
	if this.ProviderConfig != nil {
		s = append(s, "ProviderConfig: "+fmt.Sprintf("%#v", this.ProviderConfig)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ValidateTicketTrackingSystemRequest_JiraConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ticket_tracking_system.ValidateTicketTrackingSystemRequest_JiraConfig{` +
		`JiraConfig:` + fmt.Sprintf("%#v", this.JiraConfig) + `}`}, ", ")
	return s
}
func (this *ValidateTicketTrackingSystemResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&ticket_tracking_system.ValidateTicketTrackingSystemResponse{")
	if this.Errors != nil {
		s = append(s, "Errors: "+fmt.Sprintf("%#v", this.Errors)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *JiraProjectsIssueTypesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&ticket_tracking_system.JiraProjectsIssueTypesRequest{")
	s = append(s, "TicketTrackingSystem: "+fmt.Sprintf("%#v", this.TicketTrackingSystem)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *JiraProjectsIssueTypesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ticket_tracking_system.JiraProjectsIssueTypesResponse{")
	s = append(s, "TicketTrackingSystem: "+fmt.Sprintf("%#v", this.TicketTrackingSystem)+",\n")
	if this.Projects != nil {
		s = append(s, "Projects: "+fmt.Sprintf("%#v", this.Projects)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPublicCustomapi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CustomAPIClient is the client API for CustomAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomAPIClient interface {
	// ValidateTicketTrackingSystem
	//
	// x-displayName: "Validate Ticket Tracking System"
	// Validate input for the ticket tracking system like the credentials + organization
	ValidateTicketTrackingSystem(ctx context.Context, in *ValidateTicketTrackingSystemRequest, opts ...grpc.CallOption) (*ValidateTicketTrackingSystemResponse, error)
	// JiraProjectsIssueTypes
	//
	// x-displayName: "JIRA Projects & Issue Types"
	// Returns the available projects and issue types that are available from the Jira ticket tracking system
	JiraProjectsIssueTypes(ctx context.Context, in *JiraProjectsIssueTypesRequest, opts ...grpc.CallOption) (*JiraProjectsIssueTypesResponse, error)
}

type customAPIClient struct {
	cc *grpc.ClientConn
}

func NewCustomAPIClient(cc *grpc.ClientConn) CustomAPIClient {
	return &customAPIClient{cc}
}

func (c *customAPIClient) ValidateTicketTrackingSystem(ctx context.Context, in *ValidateTicketTrackingSystemRequest, opts ...grpc.CallOption) (*ValidateTicketTrackingSystemResponse, error) {
	out := new(ValidateTicketTrackingSystemResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.ticket_management.ticket_tracking_system.CustomAPI/ValidateTicketTrackingSystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) JiraProjectsIssueTypes(ctx context.Context, in *JiraProjectsIssueTypesRequest, opts ...grpc.CallOption) (*JiraProjectsIssueTypesResponse, error) {
	out := new(JiraProjectsIssueTypesResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.ticket_management.ticket_tracking_system.CustomAPI/JiraProjectsIssueTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomAPIServer is the server API for CustomAPI service.
type CustomAPIServer interface {
	// ValidateTicketTrackingSystem
	//
	// x-displayName: "Validate Ticket Tracking System"
	// Validate input for the ticket tracking system like the credentials + organization
	ValidateTicketTrackingSystem(context.Context, *ValidateTicketTrackingSystemRequest) (*ValidateTicketTrackingSystemResponse, error)
	// JiraProjectsIssueTypes
	//
	// x-displayName: "JIRA Projects & Issue Types"
	// Returns the available projects and issue types that are available from the Jira ticket tracking system
	JiraProjectsIssueTypes(context.Context, *JiraProjectsIssueTypesRequest) (*JiraProjectsIssueTypesResponse, error)
}

// UnimplementedCustomAPIServer can be embedded to have forward compatible implementations.
type UnimplementedCustomAPIServer struct {
}

func (*UnimplementedCustomAPIServer) ValidateTicketTrackingSystem(ctx context.Context, req *ValidateTicketTrackingSystemRequest) (*ValidateTicketTrackingSystemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateTicketTrackingSystem not implemented")
}
func (*UnimplementedCustomAPIServer) JiraProjectsIssueTypes(ctx context.Context, req *JiraProjectsIssueTypesRequest) (*JiraProjectsIssueTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JiraProjectsIssueTypes not implemented")
}

func RegisterCustomAPIServer(s *grpc.Server, srv CustomAPIServer) {
	s.RegisterService(&_CustomAPI_serviceDesc, srv)
}

func _CustomAPI_ValidateTicketTrackingSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateTicketTrackingSystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).ValidateTicketTrackingSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.ticket_management.ticket_tracking_system.CustomAPI/ValidateTicketTrackingSystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).ValidateTicketTrackingSystem(ctx, req.(*ValidateTicketTrackingSystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_JiraProjectsIssueTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JiraProjectsIssueTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).JiraProjectsIssueTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.ticket_management.ticket_tracking_system.CustomAPI/JiraProjectsIssueTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).JiraProjectsIssueTypes(ctx, req.(*JiraProjectsIssueTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.ticket_management.ticket_tracking_system.CustomAPI",
	HandlerType: (*CustomAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValidateTicketTrackingSystem",
			Handler:    _CustomAPI_ValidateTicketTrackingSystem_Handler,
		},
		{
			MethodName: "JiraProjectsIssueTypes",
			Handler:    _CustomAPI_JiraProjectsIssueTypes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/ticket_management/ticket_tracking_system/public_customapi.proto",
}

func (m *ValidateTicketTrackingSystemRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidateTicketTrackingSystemRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidateTicketTrackingSystemRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProviderConfig != nil {
		{
			size := m.ProviderConfig.Size()
			i -= size
			if _, err := m.ProviderConfig.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ValidateTicketTrackingSystemRequest_JiraConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidateTicketTrackingSystemRequest_JiraConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.JiraConfig != nil {
		{
			size, err := m.JiraConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ValidateTicketTrackingSystemResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidateTicketTrackingSystemResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidateTicketTrackingSystemResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Errors) > 0 {
		for iNdEx := len(m.Errors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Errors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	return len(dAtA) - i, nil
}

func (m *JiraProjectsIssueTypesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JiraProjectsIssueTypesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JiraProjectsIssueTypesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TicketTrackingSystem) > 0 {
		i -= len(m.TicketTrackingSystem)
		copy(dAtA[i:], m.TicketTrackingSystem)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.TicketTrackingSystem)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JiraProjectsIssueTypesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JiraProjectsIssueTypesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JiraProjectsIssueTypesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Projects) > 0 {
		for iNdEx := len(m.Projects) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Projects[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.TicketTrackingSystem) > 0 {
		i -= len(m.TicketTrackingSystem)
		copy(dAtA[i:], m.TicketTrackingSystem)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.TicketTrackingSystem)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPublicCustomapi(dAtA []byte, offset int, v uint64) int {
	offset -= sovPublicCustomapi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ValidateTicketTrackingSystemRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProviderConfig != nil {
		n += m.ProviderConfig.Size()
	}
	return n
}

func (m *ValidateTicketTrackingSystemRequest_JiraConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JiraConfig != nil {
		l = m.JiraConfig.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}
func (m *ValidateTicketTrackingSystemResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Errors) > 0 {
		for _, e := range m.Errors {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	return n
}

func (m *JiraProjectsIssueTypesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TicketTrackingSystem)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *JiraProjectsIssueTypesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TicketTrackingSystem)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if len(m.Projects) > 0 {
		for _, e := range m.Projects {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	return n
}

func sovPublicCustomapi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPublicCustomapi(x uint64) (n int) {
	return sovPublicCustomapi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ValidateTicketTrackingSystemRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ValidateTicketTrackingSystemRequest{`,
		`ProviderConfig:` + fmt.Sprintf("%v", this.ProviderConfig) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ValidateTicketTrackingSystemRequest_JiraConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ValidateTicketTrackingSystemRequest_JiraConfig{`,
		`JiraConfig:` + strings.Replace(fmt.Sprintf("%v", this.JiraConfig), "JiraConfigurationType", "JiraConfigurationType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ValidateTicketTrackingSystemResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForErrors := "[]*ErrorType{"
	for _, f := range this.Errors {
		repeatedStringForErrors += strings.Replace(fmt.Sprintf("%v", f), "ErrorType", "schema.ErrorType", 1) + ","
	}
	repeatedStringForErrors += "}"
	s := strings.Join([]string{`&ValidateTicketTrackingSystemResponse{`,
		`Errors:` + repeatedStringForErrors + `,`,
		`}`,
	}, "")
	return s
}
func (this *JiraProjectsIssueTypesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JiraProjectsIssueTypesRequest{`,
		`TicketTrackingSystem:` + fmt.Sprintf("%v", this.TicketTrackingSystem) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JiraProjectsIssueTypesResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForProjects := "[]*JiraProject{"
	for _, f := range this.Projects {
		repeatedStringForProjects += strings.Replace(fmt.Sprintf("%v", f), "JiraProject", "ticket_management.JiraProject", 1) + ","
	}
	repeatedStringForProjects += "}"
	s := strings.Join([]string{`&JiraProjectsIssueTypesResponse{`,
		`TicketTrackingSystem:` + fmt.Sprintf("%v", this.TicketTrackingSystem) + `,`,
		`Projects:` + repeatedStringForProjects + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPublicCustomapi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ValidateTicketTrackingSystemRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidateTicketTrackingSystemRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidateTicketTrackingSystemRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JiraConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JiraConfigurationType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProviderConfig = &ValidateTicketTrackingSystemRequest_JiraConfig{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidateTicketTrackingSystemResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidateTicketTrackingSystemResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidateTicketTrackingSystemResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Errors = append(m.Errors, &schema.ErrorType{})
			if err := m.Errors[len(m.Errors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JiraProjectsIssueTypesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JiraProjectsIssueTypesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JiraProjectsIssueTypesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TicketTrackingSystem", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TicketTrackingSystem = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JiraProjectsIssueTypesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JiraProjectsIssueTypesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JiraProjectsIssueTypesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TicketTrackingSystem", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TicketTrackingSystem = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Projects", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Projects = append(m.Projects, &ticket_management.JiraProject{})
			if err := m.Projects[len(m.Projects)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublicCustomapi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPublicCustomapi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPublicCustomapi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPublicCustomapi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPublicCustomapi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublicCustomapi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPublicCustomapi = fmt.Errorf("proto: unexpected end of group")
)

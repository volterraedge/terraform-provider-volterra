// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/ticket_management/ticket_tracking_system/types.proto

package ticket_tracking_system

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ticket_management "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/ticket_management"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// JiraConfigurationType
//
// x-displayName: "Jira Configuration Type"
type JiraConfigurationType struct {
	// config
	//
	// x-displayName: "Config"
	// Configure JIRA Rest API communication
	//
	// Types that are valid to be assigned to Config:
	//	*JiraConfigurationType_AdhocRestApi
	Config isJiraConfigurationType_Config `protobuf_oneof:"config"`
}

func (m *JiraConfigurationType) Reset()      { *m = JiraConfigurationType{} }
func (*JiraConfigurationType) ProtoMessage() {}
func (*JiraConfigurationType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c019acbfa287c05, []int{0}
}
func (m *JiraConfigurationType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JiraConfigurationType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *JiraConfigurationType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JiraConfigurationType.Merge(m, src)
}
func (m *JiraConfigurationType) XXX_Size() int {
	return m.Size()
}
func (m *JiraConfigurationType) XXX_DiscardUnknown() {
	xxx_messageInfo_JiraConfigurationType.DiscardUnknown(m)
}

var xxx_messageInfo_JiraConfigurationType proto.InternalMessageInfo

type isJiraConfigurationType_Config interface {
	isJiraConfigurationType_Config()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type JiraConfigurationType_AdhocRestApi struct {
	AdhocRestApi *JiraAdhocRestApiConfigurationType `protobuf:"bytes,2,opt,name=adhoc_rest_api,json=adhocRestApi,proto3,oneof" json:"adhoc_rest_api,omitempty"`
}

func (*JiraConfigurationType_AdhocRestApi) isJiraConfigurationType_Config() {}

func (m *JiraConfigurationType) GetConfig() isJiraConfigurationType_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *JiraConfigurationType) GetAdhocRestApi() *JiraAdhocRestApiConfigurationType {
	if x, ok := m.GetConfig().(*JiraConfigurationType_AdhocRestApi); ok {
		return x.AdhocRestApi
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*JiraConfigurationType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*JiraConfigurationType_AdhocRestApi)(nil),
	}
}

// JiraAdhocRestApiConfigurationType
//
// x-displayName: "JIRA Ad-hoc REST API Configuration Type"
// v3 API Basic Auth for Ad-hoc API Calls - https://developer.atlassian.com/cloud/jira/platform/rest/v3/
// This message represents what is stored in the XC database.  To see the API format, refer to the
// JiraAdhocRestApiConfigurationSpec message
type JiraAdhocRestApiConfigurationType struct {
	// account_email
	//
	// x-displayName: "Account Email"
	// x-required
	// Username (email) for the Atlassian account
	AccountEmail string `protobuf:"bytes,1,opt,name=account_email,json=accountEmail,proto3" json:"account_email,omitempty"`
	// organization_domain
	//
	// x-displayName: "Organization Domain"
	// x-required
	// x-example: "sample-org.atlassian.net"
	// A valid hostname for the Atlassian organization, as defined by RFC 1034
	OrganizationDomain string `protobuf:"bytes,2,opt,name=organization_domain,json=organizationDomain,proto3" json:"organization_domain,omitempty"`
	// encrypted_api_token
	//
	// x-displayName: "Encrypted API Token"
	// Encrypted / blindfolded value of api_token to be persisted in the database using Eywa's policy
	EncryptedApiToken *schema.SecretType `protobuf:"bytes,3,opt,name=encrypted_api_token,json=encryptedApiToken,proto3" json:"encrypted_api_token,omitempty"`
	// api_token
	//
	// x-displayName: "API Token"
	// x-inlineHint: "Paste your API Token.  Learn how to create it at "
	// x-required
	// API Token (password) specified by the customer in plaintext to be used for Basic Auth.
	// This value is purely used for user input and is not persisted in the database.
	// It will be converted to a blindfolded and encrypted form before saving.
	// For editing/replacing the existing JIRA configuration, and to use the already stored value of
	// the encrypted API Token, this field should be sent as an empty string.
	// Since this field is confidential, the Get/List public APIs will return this value as an empty string.
	ApiToken string `protobuf:"bytes,4,opt,name=api_token,json=apiToken,proto3" json:"api_token,omitempty"`
}

func (m *JiraAdhocRestApiConfigurationType) Reset()      { *m = JiraAdhocRestApiConfigurationType{} }
func (*JiraAdhocRestApiConfigurationType) ProtoMessage() {}
func (*JiraAdhocRestApiConfigurationType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c019acbfa287c05, []int{1}
}
func (m *JiraAdhocRestApiConfigurationType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JiraAdhocRestApiConfigurationType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *JiraAdhocRestApiConfigurationType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JiraAdhocRestApiConfigurationType.Merge(m, src)
}
func (m *JiraAdhocRestApiConfigurationType) XXX_Size() int {
	return m.Size()
}
func (m *JiraAdhocRestApiConfigurationType) XXX_DiscardUnknown() {
	xxx_messageInfo_JiraAdhocRestApiConfigurationType.DiscardUnknown(m)
}

var xxx_messageInfo_JiraAdhocRestApiConfigurationType proto.InternalMessageInfo

func (m *JiraAdhocRestApiConfigurationType) GetAccountEmail() string {
	if m != nil {
		return m.AccountEmail
	}
	return ""
}

func (m *JiraAdhocRestApiConfigurationType) GetOrganizationDomain() string {
	if m != nil {
		return m.OrganizationDomain
	}
	return ""
}

func (m *JiraAdhocRestApiConfigurationType) GetEncryptedApiToken() *schema.SecretType {
	if m != nil {
		return m.EncryptedApiToken
	}
	return nil
}

func (m *JiraAdhocRestApiConfigurationType) GetApiToken() string {
	if m != nil {
		return m.ApiToken
	}
	return ""
}

// GlobalSpecType
//
// x-displayName: "Global Specification"
type GlobalSpecType struct {
	// type
	//
	// x-displayName: "Type"
	// Type of the ticket tracking system.  JIRA, ServiceNow, etc.
	Type ticket_management.TicketTrackingSystemType `protobuf:"varint,1,opt,name=type,proto3,enum=ves.io.schema.ticket_management.TicketTrackingSystemType" json:"type,omitempty"`
	// provider_config
	//
	// x-displayName: "Jira Configuration"
	// x-required
	// The configuration for the Jira ticket tracker system
	//
	// Types that are valid to be assigned to ProviderConfig:
	//	*GlobalSpecType_JiraConfig
	ProviderConfig isGlobalSpecType_ProviderConfig `protobuf_oneof:"provider_config"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c019acbfa287c05, []int{2}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

type isGlobalSpecType_ProviderConfig interface {
	isGlobalSpecType_ProviderConfig()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_JiraConfig struct {
	JiraConfig *JiraConfigurationType `protobuf:"bytes,3,opt,name=jira_config,json=jiraConfig,proto3,oneof" json:"jira_config,omitempty"`
}

func (*GlobalSpecType_JiraConfig) isGlobalSpecType_ProviderConfig() {}

func (m *GlobalSpecType) GetProviderConfig() isGlobalSpecType_ProviderConfig {
	if m != nil {
		return m.ProviderConfig
	}
	return nil
}

func (m *GlobalSpecType) GetType() ticket_management.TicketTrackingSystemType {
	if m != nil {
		return m.Type
	}
	return ticket_management.TYPE_UNKNOWN
}

func (m *GlobalSpecType) GetJiraConfig() *JiraConfigurationType {
	if x, ok := m.GetProviderConfig().(*GlobalSpecType_JiraConfig); ok {
		return x.JiraConfig
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GlobalSpecType_JiraConfig)(nil),
	}
}

// CreateSpecType
//
// x-displayName: "Create Ticket Tracking System"
// Create Ticket Tracking System
type CreateSpecType struct {
	// provider_config
	//
	// x-displayName: "Provider Config"
	// x-required
	// The configuration for the ticket provider
	//
	// Types that are valid to be assigned to ProviderConfig:
	//	*CreateSpecType_JiraConfig
	ProviderConfig isCreateSpecType_ProviderConfig `protobuf_oneof:"provider_config"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c019acbfa287c05, []int{3}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

type isCreateSpecType_ProviderConfig interface {
	isCreateSpecType_ProviderConfig()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSpecType_JiraConfig struct {
	JiraConfig *JiraConfigurationType `protobuf:"bytes,3,opt,name=jira_config,json=jiraConfig,proto3,oneof" json:"jira_config,omitempty"`
}

func (*CreateSpecType_JiraConfig) isCreateSpecType_ProviderConfig() {}

func (m *CreateSpecType) GetProviderConfig() isCreateSpecType_ProviderConfig {
	if m != nil {
		return m.ProviderConfig
	}
	return nil
}

func (m *CreateSpecType) GetJiraConfig() *JiraConfigurationType {
	if x, ok := m.GetProviderConfig().(*CreateSpecType_JiraConfig); ok {
		return x.JiraConfig
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CreateSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CreateSpecType_JiraConfig)(nil),
	}
}

// ReplaceSpecType
//
// x-displayName: "Replace Ticket Tracking System"
// Replaces attributes of a Ticket Tracking System
type ReplaceSpecType struct {
	// provider_config
	//
	// x-displayName: "Provider Config"
	// x-required
	// The configuration for the ticket provider
	//
	// Types that are valid to be assigned to ProviderConfig:
	//	*ReplaceSpecType_JiraConfig
	ProviderConfig isReplaceSpecType_ProviderConfig `protobuf_oneof:"provider_config"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c019acbfa287c05, []int{4}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

type isReplaceSpecType_ProviderConfig interface {
	isReplaceSpecType_ProviderConfig()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplaceSpecType_JiraConfig struct {
	JiraConfig *JiraConfigurationType `protobuf:"bytes,3,opt,name=jira_config,json=jiraConfig,proto3,oneof" json:"jira_config,omitempty"`
}

func (*ReplaceSpecType_JiraConfig) isReplaceSpecType_ProviderConfig() {}

func (m *ReplaceSpecType) GetProviderConfig() isReplaceSpecType_ProviderConfig {
	if m != nil {
		return m.ProviderConfig
	}
	return nil
}

func (m *ReplaceSpecType) GetJiraConfig() *JiraConfigurationType {
	if x, ok := m.GetProviderConfig().(*ReplaceSpecType_JiraConfig); ok {
		return x.JiraConfig
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ReplaceSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ReplaceSpecType_JiraConfig)(nil),
	}
}

// GetSpecType
//
// x-displayName: "Get Ticket Tracking System"
// Get attributes of a Ticket Tracking System
type GetSpecType struct {
	// type
	//
	// x-displayName: "Type"
	// Type of the ticket provider.  JIRA, ServiceNow, etc.
	Type ticket_management.TicketTrackingSystemType `protobuf:"varint,1,opt,name=type,proto3,enum=ves.io.schema.ticket_management.TicketTrackingSystemType" json:"type,omitempty"`
	// provider_config
	//
	// x-displayName: "Provider Config"
	// x-required
	// The configuration for the ticket provider
	//
	// Types that are valid to be assigned to ProviderConfig:
	//	*GetSpecType_JiraConfig
	ProviderConfig isGetSpecType_ProviderConfig `protobuf_oneof:"provider_config"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c019acbfa287c05, []int{5}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

type isGetSpecType_ProviderConfig interface {
	isGetSpecType_ProviderConfig()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_JiraConfig struct {
	JiraConfig *JiraConfigurationType `protobuf:"bytes,3,opt,name=jira_config,json=jiraConfig,proto3,oneof" json:"jira_config,omitempty"`
}

func (*GetSpecType_JiraConfig) isGetSpecType_ProviderConfig() {}

func (m *GetSpecType) GetProviderConfig() isGetSpecType_ProviderConfig {
	if m != nil {
		return m.ProviderConfig
	}
	return nil
}

func (m *GetSpecType) GetType() ticket_management.TicketTrackingSystemType {
	if m != nil {
		return m.Type
	}
	return ticket_management.TYPE_UNKNOWN
}

func (m *GetSpecType) GetJiraConfig() *JiraConfigurationType {
	if x, ok := m.GetProviderConfig().(*GetSpecType_JiraConfig); ok {
		return x.JiraConfig
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetSpecType_JiraConfig)(nil),
	}
}

func init() {
	proto.RegisterType((*JiraConfigurationType)(nil), "ves.io.schema.ticket_management.ticket_tracking_system.JiraConfigurationType")
	golang_proto.RegisterType((*JiraConfigurationType)(nil), "ves.io.schema.ticket_management.ticket_tracking_system.JiraConfigurationType")
	proto.RegisterType((*JiraAdhocRestApiConfigurationType)(nil), "ves.io.schema.ticket_management.ticket_tracking_system.JiraAdhocRestApiConfigurationType")
	golang_proto.RegisterType((*JiraAdhocRestApiConfigurationType)(nil), "ves.io.schema.ticket_management.ticket_tracking_system.JiraAdhocRestApiConfigurationType")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.ticket_management.ticket_tracking_system.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.ticket_management.ticket_tracking_system.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.ticket_management.ticket_tracking_system.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.ticket_management.ticket_tracking_system.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.ticket_management.ticket_tracking_system.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.ticket_management.ticket_tracking_system.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.ticket_management.ticket_tracking_system.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.ticket_management.ticket_tracking_system.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/ticket_management/ticket_tracking_system/types.proto", fileDescriptor_6c019acbfa287c05)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/ticket_management/ticket_tracking_system/types.proto", fileDescriptor_6c019acbfa287c05)
}

var fileDescriptor_6c019acbfa287c05 = []byte{
	// 775 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x55, 0x41, 0x6f, 0xe3, 0x44,
	0x18, 0xcd, 0x97, 0x64, 0xab, 0xee, 0x24, 0x64, 0xb3, 0xae, 0x40, 0xd9, 0x80, 0x4c, 0xc8, 0x01,
	0xad, 0xc4, 0xda, 0x86, 0x82, 0x90, 0xa8, 0xd0, 0x4a, 0xcd, 0x82, 0x16, 0xad, 0xb4, 0x17, 0x27,
	0x1c, 0xe0, 0x62, 0x26, 0xce, 0xc4, 0x99, 0x8d, 0xed, 0x19, 0x8d, 0x27, 0x81, 0x20, 0x55, 0x5a,
	0x96, 0x1f, 0x00, 0x47, 0x8e, 0x70, 0x43, 0xfc, 0x03, 0x08, 0x48, 0x3d, 0x96, 0x9e, 0x72, 0xcc,
	0x91, 0x3a, 0x97, 0x72, 0xab, 0x38, 0x21, 0x4e, 0xc8, 0x13, 0x37, 0x4d, 0x93, 0x4a, 0x15, 0x54,
	0xda, 0x43, 0x6f, 0x9e, 0xf9, 0xde, 0xbc, 0xef, 0x7d, 0x6f, 0x9e, 0x35, 0xa8, 0x31, 0x24, 0x91,
	0x49, 0x99, 0x15, 0xb9, 0x3d, 0x12, 0x60, 0x4b, 0x52, 0xb7, 0x4f, 0xa4, 0x13, 0xe0, 0x10, 0x7b,
	0x24, 0x20, 0xa1, 0x3c, 0xdd, 0x91, 0x02, 0xbb, 0x7d, 0x1a, 0x7a, 0x4e, 0x34, 0x8a, 0x24, 0x09,
	0x2c, 0x39, 0xe2, 0x24, 0x32, 0xb9, 0x60, 0x92, 0x69, 0xef, 0xce, 0x39, 0xcc, 0x39, 0x87, 0xb9,
	0xc6, 0x61, 0x5e, 0xcc, 0x51, 0x35, 0x3c, 0x2a, 0x7b, 0x83, 0xb6, 0xe9, 0xb2, 0xc0, 0xf2, 0x98,
	0xc7, 0x2c, 0x45, 0xd7, 0x1e, 0x74, 0xd5, 0x4a, 0x2d, 0xd4, 0xd7, 0xbc, 0x4d, 0xf5, 0xe5, 0xf3,
	0x52, 0x19, 0x97, 0x94, 0x85, 0xa9, 0x86, 0xea, 0x1b, 0x97, 0xce, 0x71, 0x26, 0xb8, 0x7a, 0x67,
	0x05, 0xbc, 0x54, 0x7a, 0xe5, 0x7c, 0x69, 0x88, 0x7d, 0xda, 0xc1, 0x92, 0xa4, 0xd5, 0xda, 0x4a,
	0x95, 0x92, 0xcf, 0x9d, 0x73, 0x3a, 0xea, 0x3f, 0x03, 0x7a, 0xf1, 0x11, 0x15, 0xf8, 0x01, 0x0b,
	0xbb, 0xd4, 0x1b, 0x08, 0x9c, 0x14, 0x5b, 0x23, 0x4e, 0xb4, 0xaf, 0x00, 0x95, 0x70, 0xa7, 0xc7,
	0x5c, 0x47, 0x90, 0x48, 0x3a, 0x98, 0xd3, 0x4a, 0xb6, 0x06, 0x77, 0x0b, 0xdb, 0x9f, 0x98, 0xff,
	0xcf, 0x3f, 0x33, 0xe9, 0xb3, 0x9b, 0x30, 0xda, 0x24, 0x92, 0xbb, 0x9c, 0xae, 0xf5, 0xfc, 0x28,
	0x63, 0x17, 0xf1, 0x12, 0xa0, 0xf1, 0x12, 0xda, 0x70, 0x15, 0x48, 0x2b, 0xee, 0x8f, 0x21, 0x3b,
	0x19, 0x03, 0x7c, 0xff, 0x2b, 0xc0, 0xa3, 0xfc, 0x26, 0x94, 0xb3, 0xf5, 0xef, 0x72, 0xe8, 0xb5,
	0x4b, 0x39, 0xb5, 0x37, 0xd1, 0x0b, 0xd8, 0x75, 0xd9, 0x20, 0x94, 0x0e, 0x09, 0x30, 0xf5, 0x2b,
	0x50, 0x83, 0xbb, 0x37, 0x1b, 0x85, 0x5f, 0xfe, 0xdc, 0xcf, 0x6d, 0x88, 0x7c, 0x19, 0x3e, 0x03,
	0xbb, 0x98, 0x22, 0x3e, 0x4c, 0x00, 0xda, 0xfb, 0x68, 0x8b, 0x09, 0x0f, 0x87, 0xf4, 0x4b, 0xc5,
	0xe2, 0x74, 0x58, 0x80, 0x69, 0xa8, 0xa6, 0x5f, 0x3e, 0xd7, 0x03, 0x5b, 0x5b, 0xc6, 0x7d, 0xa0,
	0x60, 0xda, 0xc7, 0x68, 0x8b, 0x84, 0xae, 0x18, 0x71, 0x49, 0x3a, 0x89, 0x6b, 0x8e, 0x64, 0x7d,
	0x12, 0x56, 0x72, 0xca, 0xbb, 0x3b, 0x2b, 0xde, 0x35, 0x89, 0x2b, 0x88, 0x4c, 0x74, 0x36, 0xd0,
	0xc1, 0x1e, 0x4c, 0xf7, 0xe0, 0x78, 0x0c, 0x60, 0xdf, 0x5e, 0x30, 0xec, 0x72, 0xda, 0x4a, 0xce,
	0x6b, 0x3f, 0x00, 0xba, 0x79, 0xc6, 0x96, 0x57, 0x5a, 0xbe, 0x86, 0x83, 0x3d, 0x78, 0xf6, 0x1b,
	0x08, 0x54, 0x4c, 0x7c, 0xa8, 0x35, 0x07, 0x9c, 0x33, 0x21, 0xb5, 0x76, 0x4f, 0x4a, 0x1e, 0xed,
	0x58, 0x56, 0x34, 0xdf, 0x30, 0xb1, 0xf4, 0x71, 0x14, 0x51, 0x1c, 0xaa, 0xec, 0x2e, 0x56, 0x46,
	0x3a, 0xb6, 0xd5, 0x61, 0x6e, 0x64, 0xcd, 0x2f, 0xd0, 0xc0, 0x9c, 0x1a, 0xaa, 0x49, 0x64, 0x74,
	0x99, 0x30, 0x46, 0x6c, 0x20, 0x8c, 0xf5, 0x13, 0x89, 0x0b, 0x37, 0x44, 0xae, 0xf2, 0x34, 0x6f,
	0x6f, 0xe2, 0x54, 0xe3, 0xce, 0xe6, 0x5f, 0xf7, 0x6f, 0xbc, 0x73, 0xef, 0xad, 0x7b, 0xdb, 0xf5,
	0xbf, 0x01, 0x95, 0x1e, 0xfa, 0xac, 0x8d, 0xfd, 0x26, 0x27, 0xae, 0xba, 0x87, 0xc7, 0x28, 0x9f,
	0x04, 0x57, 0xd9, 0x5f, 0xda, 0x7e, 0xef, 0xd2, 0x10, 0xb5, 0xd4, 0x4e, 0x2b, 0xcd, 0x50, 0x53,
	0x45, 0x28, 0x21, 0xb2, 0x15, 0x8d, 0xc6, 0x51, 0xe1, 0x09, 0x15, 0xd8, 0x99, 0xe7, 0x23, 0xb5,
	0xf7, 0xf1, 0x55, 0xa2, 0x79, 0x51, 0x1c, 0xd1, 0x93, 0x45, 0xa1, 0xf1, 0x2a, 0xba, 0xc5, 0x05,
	0x1b, 0xd2, 0x0e, 0x11, 0xce, 0x52, 0x2a, 0x73, 0x93, 0x31, 0x64, 0xd3, 0x54, 0x66, 0xcb, 0xb9,
	0xfa, 0xef, 0x80, 0x4a, 0x0f, 0x04, 0xc1, 0x92, 0x2c, 0x46, 0x7f, 0xee, 0x5a, 0x77, 0x6e, 0x1f,
	0xde, 0x5f, 0xf1, 0xbf, 0xf1, 0xfa, 0xba, 0xfc, 0xad, 0x67, 0xff, 0xc0, 0xea, 0xe6, 0xfc, 0xdf,
	0x4a, 0x67, 0x39, 0x04, 0x74, 0xcb, 0x26, 0xdc, 0xc7, 0xee, 0x35, 0x18, 0xe6, 0x9b, 0x2c, 0x2a,
	0x3c, 0x24, 0xf2, 0xda, 0x04, 0xf2, 0x6a, 0xbe, 0x64, 0xcb, 0xb9, 0xc6, 0x4f, 0x30, 0x39, 0xd2,
	0x33, 0xd3, 0x23, 0x3d, 0x73, 0x72, 0xa4, 0xc3, 0xd3, 0x58, 0x87, 0x1f, 0x63, 0x1d, 0x0e, 0x62,
	0x1d, 0x26, 0xb1, 0x0e, 0xd3, 0x58, 0x87, 0x3f, 0x62, 0x1d, 0x8e, 0x63, 0x3d, 0x73, 0x12, 0xeb,
	0xf0, 0xed, 0x4c, 0xcf, 0xec, 0xcf, 0x74, 0x98, 0xcc, 0xf4, 0xcc, 0x74, 0xa6, 0x67, 0x3e, 0xf5,
	0x3d, 0xc6, 0xfb, 0x9e, 0x39, 0x64, 0xbe, 0x24, 0x42, 0x60, 0x73, 0x10, 0x59, 0xea, 0xa3, 0xcb,
	0x44, 0x60, 0x9c, 0x76, 0x34, 0x4e, 0xcb, 0x16, 0x6f, 0x7b, 0xcc, 0x22, 0x5f, 0xc8, 0xf4, 0x31,
	0xfa, 0x8f, 0x2f, 0x78, 0x7b, 0x43, 0x3d, 0x58, 0x6f, 0xff, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x2f,
	0x4b, 0x18, 0x32, 0x02, 0x08, 0x00, 0x00,
}

func (this *JiraConfigurationType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*JiraConfigurationType)
	if !ok {
		that2, ok := that.(JiraConfigurationType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Config == nil {
		if this.Config != nil {
			return false
		}
	} else if this.Config == nil {
		return false
	} else if !this.Config.Equal(that1.Config) {
		return false
	}
	return true
}
func (this *JiraConfigurationType_AdhocRestApi) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*JiraConfigurationType_AdhocRestApi)
	if !ok {
		that2, ok := that.(JiraConfigurationType_AdhocRestApi)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdhocRestApi.Equal(that1.AdhocRestApi) {
		return false
	}
	return true
}
func (this *JiraAdhocRestApiConfigurationType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*JiraAdhocRestApiConfigurationType)
	if !ok {
		that2, ok := that.(JiraAdhocRestApiConfigurationType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AccountEmail != that1.AccountEmail {
		return false
	}
	if this.OrganizationDomain != that1.OrganizationDomain {
		return false
	}
	if !this.EncryptedApiToken.Equal(that1.EncryptedApiToken) {
		return false
	}
	if this.ApiToken != that1.ApiToken {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if that1.ProviderConfig == nil {
		if this.ProviderConfig != nil {
			return false
		}
	} else if this.ProviderConfig == nil {
		return false
	} else if !this.ProviderConfig.Equal(that1.ProviderConfig) {
		return false
	}
	return true
}
func (this *GlobalSpecType_JiraConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_JiraConfig)
	if !ok {
		that2, ok := that.(GlobalSpecType_JiraConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JiraConfig.Equal(that1.JiraConfig) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ProviderConfig == nil {
		if this.ProviderConfig != nil {
			return false
		}
	} else if this.ProviderConfig == nil {
		return false
	} else if !this.ProviderConfig.Equal(that1.ProviderConfig) {
		return false
	}
	return true
}
func (this *CreateSpecType_JiraConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_JiraConfig)
	if !ok {
		that2, ok := that.(CreateSpecType_JiraConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JiraConfig.Equal(that1.JiraConfig) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ProviderConfig == nil {
		if this.ProviderConfig != nil {
			return false
		}
	} else if this.ProviderConfig == nil {
		return false
	} else if !this.ProviderConfig.Equal(that1.ProviderConfig) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_JiraConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_JiraConfig)
	if !ok {
		that2, ok := that.(ReplaceSpecType_JiraConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JiraConfig.Equal(that1.JiraConfig) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if that1.ProviderConfig == nil {
		if this.ProviderConfig != nil {
			return false
		}
	} else if this.ProviderConfig == nil {
		return false
	} else if !this.ProviderConfig.Equal(that1.ProviderConfig) {
		return false
	}
	return true
}
func (this *GetSpecType_JiraConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_JiraConfig)
	if !ok {
		that2, ok := that.(GetSpecType_JiraConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JiraConfig.Equal(that1.JiraConfig) {
		return false
	}
	return true
}
func (this *JiraConfigurationType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&ticket_tracking_system.JiraConfigurationType{")
	if this.Config != nil {
		s = append(s, "Config: "+fmt.Sprintf("%#v", this.Config)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *JiraConfigurationType_AdhocRestApi) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ticket_tracking_system.JiraConfigurationType_AdhocRestApi{` +
		`AdhocRestApi:` + fmt.Sprintf("%#v", this.AdhocRestApi) + `}`}, ", ")
	return s
}
func (this *JiraAdhocRestApiConfigurationType) goString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&ticket_tracking_system.JiraAdhocRestApiConfigurationType{")
	s = append(s, "AccountEmail: "+fmt.Sprintf("%#v", this.AccountEmail)+",\n")
	s = append(s, "OrganizationDomain: "+fmt.Sprintf("%#v", this.OrganizationDomain)+",\n")
	if this.EncryptedApiToken != nil {
		s = append(s, "EncryptedApiToken: "+fmt.Sprintf("%#v", this.EncryptedApiToken)+",\n")
	}
	s = append(s, "ApiToken: "+fmt.Sprintf("%#v", this.ApiToken)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ticket_tracking_system.GlobalSpecType{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	if this.ProviderConfig != nil {
		s = append(s, "ProviderConfig: "+fmt.Sprintf("%#v", this.ProviderConfig)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_JiraConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ticket_tracking_system.GlobalSpecType_JiraConfig{` +
		`JiraConfig:` + fmt.Sprintf("%#v", this.JiraConfig) + `}`}, ", ")
	return s
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&ticket_tracking_system.CreateSpecType{")
	if this.ProviderConfig != nil {
		s = append(s, "ProviderConfig: "+fmt.Sprintf("%#v", this.ProviderConfig)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType_JiraConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ticket_tracking_system.CreateSpecType_JiraConfig{` +
		`JiraConfig:` + fmt.Sprintf("%#v", this.JiraConfig) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&ticket_tracking_system.ReplaceSpecType{")
	if this.ProviderConfig != nil {
		s = append(s, "ProviderConfig: "+fmt.Sprintf("%#v", this.ProviderConfig)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType_JiraConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ticket_tracking_system.ReplaceSpecType_JiraConfig{` +
		`JiraConfig:` + fmt.Sprintf("%#v", this.JiraConfig) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ticket_tracking_system.GetSpecType{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	if this.ProviderConfig != nil {
		s = append(s, "ProviderConfig: "+fmt.Sprintf("%#v", this.ProviderConfig)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_JiraConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ticket_tracking_system.GetSpecType_JiraConfig{` +
		`JiraConfig:` + fmt.Sprintf("%#v", this.JiraConfig) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *JiraConfigurationType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JiraConfigurationType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JiraConfigurationType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Config != nil {
		{
			size := m.Config.Size()
			i -= size
			if _, err := m.Config.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *JiraConfigurationType_AdhocRestApi) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JiraConfigurationType_AdhocRestApi) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdhocRestApi != nil {
		{
			size, err := m.AdhocRestApi.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *JiraAdhocRestApiConfigurationType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JiraAdhocRestApiConfigurationType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JiraAdhocRestApiConfigurationType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ApiToken) > 0 {
		i -= len(m.ApiToken)
		copy(dAtA[i:], m.ApiToken)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ApiToken)))
		i--
		dAtA[i] = 0x22
	}
	if m.EncryptedApiToken != nil {
		{
			size, err := m.EncryptedApiToken.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OrganizationDomain) > 0 {
		i -= len(m.OrganizationDomain)
		copy(dAtA[i:], m.OrganizationDomain)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.OrganizationDomain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AccountEmail) > 0 {
		i -= len(m.AccountEmail)
		copy(dAtA[i:], m.AccountEmail)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AccountEmail)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProviderConfig != nil {
		{
			size := m.ProviderConfig.Size()
			i -= size
			if _, err := m.ProviderConfig.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Type != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType_JiraConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_JiraConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.JiraConfig != nil {
		{
			size, err := m.JiraConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProviderConfig != nil {
		{
			size := m.ProviderConfig.Size()
			i -= size
			if _, err := m.ProviderConfig.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType_JiraConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_JiraConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.JiraConfig != nil {
		{
			size, err := m.JiraConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProviderConfig != nil {
		{
			size := m.ProviderConfig.Size()
			i -= size
			if _, err := m.ProviderConfig.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType_JiraConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_JiraConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.JiraConfig != nil {
		{
			size, err := m.JiraConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProviderConfig != nil {
		{
			size := m.ProviderConfig.Size()
			i -= size
			if _, err := m.ProviderConfig.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Type != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType_JiraConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_JiraConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.JiraConfig != nil {
		{
			size, err := m.JiraConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *JiraConfigurationType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Config != nil {
		n += m.Config.Size()
	}
	return n
}

func (m *JiraConfigurationType_AdhocRestApi) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdhocRestApi != nil {
		l = m.AdhocRestApi.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *JiraAdhocRestApiConfigurationType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccountEmail)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.OrganizationDomain)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.EncryptedApiToken != nil {
		l = m.EncryptedApiToken.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ApiToken)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovTypes(uint64(m.Type))
	}
	if m.ProviderConfig != nil {
		n += m.ProviderConfig.Size()
	}
	return n
}

func (m *GlobalSpecType_JiraConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JiraConfig != nil {
		l = m.JiraConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProviderConfig != nil {
		n += m.ProviderConfig.Size()
	}
	return n
}

func (m *CreateSpecType_JiraConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JiraConfig != nil {
		l = m.JiraConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProviderConfig != nil {
		n += m.ProviderConfig.Size()
	}
	return n
}

func (m *ReplaceSpecType_JiraConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JiraConfig != nil {
		l = m.JiraConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovTypes(uint64(m.Type))
	}
	if m.ProviderConfig != nil {
		n += m.ProviderConfig.Size()
	}
	return n
}

func (m *GetSpecType_JiraConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JiraConfig != nil {
		l = m.JiraConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *JiraConfigurationType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JiraConfigurationType{`,
		`Config:` + fmt.Sprintf("%v", this.Config) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JiraConfigurationType_AdhocRestApi) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JiraConfigurationType_AdhocRestApi{`,
		`AdhocRestApi:` + strings.Replace(fmt.Sprintf("%v", this.AdhocRestApi), "JiraAdhocRestApiConfigurationType", "JiraAdhocRestApiConfigurationType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JiraAdhocRestApiConfigurationType) string() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JiraAdhocRestApiConfigurationType{`,
		`AccountEmail:` + fmt.Sprintf("%v", this.AccountEmail) + `,`,
		`OrganizationDomain:` + fmt.Sprintf("%v", this.OrganizationDomain) + `,`,
		`EncryptedApiToken:` + strings.Replace(fmt.Sprintf("%v", this.EncryptedApiToken), "SecretType", "schema.SecretType", 1) + `,`,
		`ApiToken:` + fmt.Sprintf("%v", this.ApiToken) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`ProviderConfig:` + fmt.Sprintf("%v", this.ProviderConfig) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_JiraConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_JiraConfig{`,
		`JiraConfig:` + strings.Replace(fmt.Sprintf("%v", this.JiraConfig), "JiraConfigurationType", "JiraConfigurationType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`ProviderConfig:` + fmt.Sprintf("%v", this.ProviderConfig) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_JiraConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_JiraConfig{`,
		`JiraConfig:` + strings.Replace(fmt.Sprintf("%v", this.JiraConfig), "JiraConfigurationType", "JiraConfigurationType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`ProviderConfig:` + fmt.Sprintf("%v", this.ProviderConfig) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_JiraConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_JiraConfig{`,
		`JiraConfig:` + strings.Replace(fmt.Sprintf("%v", this.JiraConfig), "JiraConfigurationType", "JiraConfigurationType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`ProviderConfig:` + fmt.Sprintf("%v", this.ProviderConfig) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_JiraConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_JiraConfig{`,
		`JiraConfig:` + strings.Replace(fmt.Sprintf("%v", this.JiraConfig), "JiraConfigurationType", "JiraConfigurationType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *JiraConfigurationType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JiraConfigurationType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JiraConfigurationType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdhocRestApi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JiraAdhocRestApiConfigurationType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Config = &JiraConfigurationType_AdhocRestApi{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JiraAdhocRestApiConfigurationType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JiraAdhocRestApiConfigurationType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JiraAdhocRestApiConfigurationType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountEmail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountEmail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationDomain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationDomain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedApiToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EncryptedApiToken == nil {
				m.EncryptedApiToken = &schema.SecretType{}
			}
			if err := m.EncryptedApiToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ticket_management.TicketTrackingSystemType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JiraConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JiraConfigurationType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProviderConfig = &GlobalSpecType_JiraConfig{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JiraConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JiraConfigurationType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProviderConfig = &CreateSpecType_JiraConfig{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JiraConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JiraConfigurationType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProviderConfig = &ReplaceSpecType_JiraConfig{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ticket_management.TicketTrackingSystemType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JiraConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JiraConfigurationType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProviderConfig = &GetSpecType_JiraConfig{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

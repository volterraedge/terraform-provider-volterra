// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package ticket_tracking_system

import (
	"bytes"
	"context"
	"fmt"
	io "io"
	"net/http"
	"strings"

	"github.com/gogo/protobuf/proto"
	"github.com/grpc-ecosystem/grpc-gateway/runtime"
	"google.golang.org/grpc"

	"gopkg.volterra.us/stdlib/client"
	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/errors"
	"gopkg.volterra.us/stdlib/server"
	"gopkg.volterra.us/stdlib/svcfw"
)

var (
	_ = fmt.Sprintf("dummy for fmt import use")
)

// Create CustomAPI GRPC Client satisfying server.CustomClient
type CustomAPIGrpcClient struct {
	conn       *grpc.ClientConn
	grpcClient CustomAPIClient
	// map of rpc name to its invocation
	rpcFns map[string]func(context.Context, string, ...grpc.CallOption) (proto.Message, error)
}

func (c *CustomAPIGrpcClient) doRPCJiraProjectsIssueTypes(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &JiraProjectsIssueTypesRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.ticket_management.ticket_tracking_system.JiraProjectsIssueTypesRequest", yamlReq)
	}
	rsp, err := c.grpcClient.JiraProjectsIssueTypes(ctx, req, opts...)
	return rsp, err
}

func (c *CustomAPIGrpcClient) doRPCValidateTicketTrackingSystem(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &ValidateTicketTrackingSystemRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.ticket_management.ticket_tracking_system.ValidateTicketTrackingSystemRequest", yamlReq)
	}
	rsp, err := c.grpcClient.ValidateTicketTrackingSystem(ctx, req, opts...)
	return rsp, err
}

func (c *CustomAPIGrpcClient) DoRPC(ctx context.Context, rpc string, opts ...server.CustomCallOpt) (proto.Message, error) {
	rpcFn, exists := c.rpcFns[rpc]
	if !exists {
		return nil, fmt.Errorf("Error, no such rpc %s", rpc)
	}
	cco := server.NewCustomCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	if cco.YAMLReq == "" {
		return nil, fmt.Errorf("Error, empty request body")
	}
	ctx = client.AddHdrsToCtx(cco.Headers, ctx)

	rsp, err := rpcFn(ctx, cco.YAMLReq, cco.GrpcCallOpts...)
	if err != nil {
		return nil, errors.Wrap(err, "Doing custom RPC using GRPC")
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return rsp, nil
}

func NewCustomAPIGrpcClient(cc *grpc.ClientConn) server.CustomClient {
	ccl := &CustomAPIGrpcClient{
		conn:       cc,
		grpcClient: NewCustomAPIClient(cc),
	}
	rpcFns := make(map[string]func(context.Context, string, ...grpc.CallOption) (proto.Message, error))
	rpcFns["JiraProjectsIssueTypes"] = ccl.doRPCJiraProjectsIssueTypes

	rpcFns["ValidateTicketTrackingSystem"] = ccl.doRPCValidateTicketTrackingSystem

	ccl.rpcFns = rpcFns

	return ccl
}

// Create CustomAPI REST Client satisfying server.CustomClient
type CustomAPIRestClient struct {
	baseURL string
	client  http.Client
	// map of rpc name to its invocation
	rpcFns map[string]func(context.Context, *server.CustomCallOpts) (proto.Message, error)
}

func (c *CustomAPIRestClient) doRPCJiraProjectsIssueTypes(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &JiraProjectsIssueTypesRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.ticket_management.ticket_tracking_system.JiraProjectsIssueTypesRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("ticket_tracking_system", fmt.Sprintf("%v", req.TicketTrackingSystem))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &JiraProjectsIssueTypesResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.ticket_management.ticket_tracking_system.JiraProjectsIssueTypesResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomAPIRestClient) doRPCValidateTicketTrackingSystem(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &ValidateTicketTrackingSystemRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.ticket_management.ticket_tracking_system.ValidateTicketTrackingSystemRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("provider_config", fmt.Sprintf("%v", req.ProviderConfig))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &ValidateTicketTrackingSystemResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.ticket_management.ticket_tracking_system.ValidateTicketTrackingSystemResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomAPIRestClient) DoRPC(ctx context.Context, rpc string, opts ...server.CustomCallOpt) (proto.Message, error) {
	rpcFn, exists := c.rpcFns[rpc]
	if !exists {
		return nil, fmt.Errorf("Error, no such rpc %s", rpc)
	}
	cco := server.NewCustomCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	rsp, err := rpcFn(ctx, cco)
	if err != nil {
		return nil, errors.Wrap(err, "Doing custom RPC using Rest")
	}
	return rsp, nil
}

func NewCustomAPIRestClient(baseURL string, hc http.Client) server.CustomClient {
	ccl := &CustomAPIRestClient{
		baseURL: baseURL,
		client:  hc,
	}

	rpcFns := make(map[string]func(context.Context, *server.CustomCallOpts) (proto.Message, error))
	rpcFns["JiraProjectsIssueTypes"] = ccl.doRPCJiraProjectsIssueTypes

	rpcFns["ValidateTicketTrackingSystem"] = ccl.doRPCValidateTicketTrackingSystem

	ccl.rpcFns = rpcFns

	return ccl
}

// Create customAPIInprocClient

// INPROC Client (satisfying CustomAPIClient interface)
type customAPIInprocClient struct {
	CustomAPIServer
}

func (c *customAPIInprocClient) JiraProjectsIssueTypes(ctx context.Context, in *JiraProjectsIssueTypesRequest, opts ...grpc.CallOption) (*JiraProjectsIssueTypesResponse, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.ticket_management.ticket_tracking_system.CustomAPI.JiraProjectsIssueTypes")
	return c.CustomAPIServer.JiraProjectsIssueTypes(ctx, in)
}
func (c *customAPIInprocClient) ValidateTicketTrackingSystem(ctx context.Context, in *ValidateTicketTrackingSystemRequest, opts ...grpc.CallOption) (*ValidateTicketTrackingSystemResponse, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.ticket_management.ticket_tracking_system.CustomAPI.ValidateTicketTrackingSystem")
	return c.CustomAPIServer.ValidateTicketTrackingSystem(ctx, in)
}

func NewCustomAPIInprocClient(svc svcfw.Service) CustomAPIClient {
	return &customAPIInprocClient{CustomAPIServer: NewCustomAPIServer(svc)}
}

// RegisterGwCustomAPIHandler registers with grpc-gw with an inproc-client backing so that
// rest to grpc happens without a grpc.Dial (thus avoiding additional certs for mTLS)
func RegisterGwCustomAPIHandler(ctx context.Context, mux *runtime.ServeMux, svc interface{}) error {
	s, ok := svc.(svcfw.Service)
	if !ok {
		return fmt.Errorf("svc is not svcfw.Service")
	}
	return RegisterCustomAPIHandlerClient(ctx, mux, NewCustomAPIInprocClient(s))
}

// Create customAPISrv

// SERVER (satisfying CustomAPIServer interface)
type customAPISrv struct {
	svc svcfw.Service
}

func (s *customAPISrv) JiraProjectsIssueTypes(ctx context.Context, in *JiraProjectsIssueTypesRequest) (*JiraProjectsIssueTypesResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.ticket_management.ticket_tracking_system.CustomAPI")
	cah, ok := ah.(CustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomAPIServer", ah)
	}

	var (
		rsp *JiraProjectsIssueTypesResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.ticket_management.ticket_tracking_system.JiraProjectsIssueTypesRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomAPI.JiraProjectsIssueTypes' operation on 'ticket_tracking_system'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.ticket_management.ticket_tracking_system.CustomAPI.JiraProjectsIssueTypes"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.JiraProjectsIssueTypes(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.ticket_management.ticket_tracking_system.JiraProjectsIssueTypesResponse", rsp)...)

	return rsp, nil
}
func (s *customAPISrv) ValidateTicketTrackingSystem(ctx context.Context, in *ValidateTicketTrackingSystemRequest) (*ValidateTicketTrackingSystemResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.ticket_management.ticket_tracking_system.CustomAPI")
	cah, ok := ah.(CustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomAPIServer", ah)
	}

	var (
		rsp *ValidateTicketTrackingSystemResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.ticket_management.ticket_tracking_system.ValidateTicketTrackingSystemRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomAPI.ValidateTicketTrackingSystem' operation on 'ticket_tracking_system'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.ticket_management.ticket_tracking_system.CustomAPI.ValidateTicketTrackingSystem"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.ValidateTicketTrackingSystem(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.ticket_management.ticket_tracking_system.ValidateTicketTrackingSystemResponse", rsp)...)

	return rsp, nil
}

func NewCustomAPIServer(svc svcfw.Service) CustomAPIServer {
	return &customAPISrv{svc: svc}
}

var CustomAPISwaggerJSON string = `{
    "swagger": "2.0",
    "info": {
        "title": "ticket_tracking_system",
        "description": "Public Custom APIs for Ticket Tracking System related operations",
        "version": "version not set"
    },
    "schemes": [
        "http",
        "https"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "tags": [],
    "paths": {
        "/public/namespaces/shared/ticket_tracking_systems/jira_projects_issue_types": {
            "post": {
                "summary": "JIRA Projects \u0026 Issue Types",
                "description": "Returns the available projects and issue types that are available from the Jira ticket tracking system",
                "operationId": "ves.io.schema.ticket_management.ticket_tracking_system.CustomAPI.JiraProjectsIssueTypes",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/ticket_tracking_systemJiraProjectsIssueTypesResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ticket_tracking_systemJiraProjectsIssueTypesRequest"
                        }
                    }
                ],
                "tags": [
                    "CustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-ticket_management-ticket_tracking_system-customapi-jiraprojectsissuetypes"
                },
                "x-ves-proto-rpc": "ves.io.schema.ticket_management.ticket_tracking_system.CustomAPI.JiraProjectsIssueTypes"
            },
            "x-displayname": "Ticket Tracking System Custom API",
            "x-ves-proto-service": "ves.io.schema.ticket_management.ticket_tracking_system.CustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/shared/ticket_tracking_systems/validate_ticket_tracking_system": {
            "post": {
                "summary": "Validate Ticket Tracking System",
                "description": "Validate input for the ticket tracking system like the credentials + organization",
                "operationId": "ves.io.schema.ticket_management.ticket_tracking_system.CustomAPI.ValidateTicketTrackingSystem",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/ticket_tracking_systemValidateTicketTrackingSystemResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ticket_tracking_systemValidateTicketTrackingSystemRequest"
                        }
                    }
                ],
                "tags": [
                    "CustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-ticket_management-ticket_tracking_system-customapi-validatetickettrackingsystem"
                },
                "x-ves-proto-rpc": "ves.io.schema.ticket_management.ticket_tracking_system.CustomAPI.ValidateTicketTrackingSystem"
            },
            "x-displayname": "Ticket Tracking System Custom API",
            "x-ves-proto-service": "ves.io.schema.ticket_management.ticket_tracking_system.CustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        }
    },
    "definitions": {
        "protobufAny": {
            "type": "object",
            "description": "-Any- contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := \u0026pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an -Any- value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field -@type- which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n-value- which holds the custom JSON in addition to the -@type-\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }",
            "properties": {
                "type_url": {
                    "type": "string",
                    "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n-path/google.protobuf.Duration-). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme -http-, -https-, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, -https- is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than -http-, -https- (or the empty scheme) might be\nused with implementation specific semantics."
                },
                "value": {
                    "type": "string",
                    "description": "Must be a valid serialized protocol buffer of the above specified type.",
                    "format": "byte"
                }
            }
        },
        "schemaBlindfoldSecretInfoType": {
            "type": "object",
            "description": "x-displayName: \"Blindfold Secret\"\nBlindfoldSecretInfoType specifies information about the Secret managed by F5XC Secret Management",
            "title": "BlindfoldSecretInfoType",
            "properties": {
                "decryption_provider": {
                    "type": "string",
                    "description": "x-displayName: \"Decryption Provider\"\nx-example: \"value\"\nName of the Secret Management Access object that contains information about the backend Secret Management service.",
                    "title": "Decryption Provider"
                },
                "location": {
                    "type": "string",
                    "description": "x-displayName: \"Location\"\nx-required\nx-example: \"string:///U2VjcmV0SW5mb3JtYXRpb24=\"\nLocation is the uri_ref. It could be in url format for string:///\nOr it could be a path if the store provider is an http/https location",
                    "title": "Location"
                },
                "store_provider": {
                    "type": "string",
                    "description": "x-displayName: \"Store Provider\"\nx-example: \"value\"\nName of the Secret Management Access object that contains information about the store to get encrypted bytes\nThis field needs to be provided only if the url scheme is not string:///",
                    "title": "Store Provider"
                }
            }
        },
        "schemaClearSecretInfoType": {
            "type": "object",
            "description": "x-displayName: \"In-Clear Secret\"\nClearSecretInfoType specifies information about the Secret that is not encrypted.",
            "title": "ClearSecretInfoType",
            "properties": {
                "provider": {
                    "type": "string",
                    "description": "x-displayName: \"Provider\"\nx-example: \"box-provider\"\nName of the Secret Management Access object that contains information about the store to get encrypted bytes\nThis field needs to be provided only if the url scheme is not string:///",
                    "title": "Provider"
                },
                "url": {
                    "type": "string",
                    "description": "x-displayName: \"URL\"\nx-required\nx-example: \"string:///U2VjcmV0SW5mb3JtYXRpb24=\"\nURL of the secret. Currently supported URL schemes is string:///.\nFor string:/// scheme, Secret needs to be encoded Base64 format.\nWhen asked for this secret, caller will get Secret bytes after Base64 decoding.",
                    "title": "URL"
                }
            }
        },
        "schemaErrorCode": {
            "type": "string",
            "description": "Union of all possible error-codes from system\n\n - EOK: No error\n - EPERMS: Permissions error\n - EBADINPUT: Input is not correct\n - ENOTFOUND: Not found\n - EEXISTS: Already exists\n - EUNKNOWN: Unknown/catchall error\n - ESERIALIZE: Error in serializing/de-serializing\n - EINTERNAL: Server error\n - EPARTIAL: Partial error",
            "title": "ErrorCode",
            "enum": [
                "EOK",
                "EPERMS",
                "EBADINPUT",
                "ENOTFOUND",
                "EEXISTS",
                "EUNKNOWN",
                "ESERIALIZE",
                "EINTERNAL",
                "EPARTIAL"
            ],
            "default": "EOK",
            "x-displayname": "Error Code",
            "x-ves-proto-enum": "ves.io.schema.ErrorCode"
        },
        "schemaErrorType": {
            "type": "object",
            "description": "Information about a error in API operation",
            "title": "ErrorType",
            "x-displayname": "Error Type",
            "x-ves-proto-message": "ves.io.schema.ErrorType",
            "properties": {
                "code": {
                    "description": " A simple general code by category",
                    "title": "code",
                    "$ref": "#/definitions/schemaErrorCode",
                    "x-displayname": "Code"
                },
                "error_obj": {
                    "description": " A structured error object for machine parsing",
                    "title": "error_obj",
                    "$ref": "#/definitions/protobufAny",
                    "x-displayname": "Error Object"
                },
                "message": {
                    "type": "string",
                    "description": " A human readable string of the error\n\nExample: - \"value\"-",
                    "title": "message",
                    "x-displayname": "Message",
                    "x-ves-example": "value"
                }
            }
        },
        "schemaSecretEncodingType": {
            "type": "string",
            "description": "x-displayName: \"Secret Encoding\"\nSecretEncodingType defines the encoding type of the secret before handled by the Secret Management Service.\n\n - EncodingNone: x-displayName: \"None\"\nNo Encoding\n - EncodingBase64: Base64\n\nx-displayName: \"Base64\"\nBase64 encoding",
            "title": "SecretEncodingType",
            "enum": [
                "EncodingNone",
                "EncodingBase64"
            ],
            "default": "EncodingNone"
        },
        "schemaSecretType": {
            "type": "object",
            "description": "x-displayName: \"Secret\"\nSecretType is used in an object to indicate a sensitive/confidential field",
            "title": "SecretType",
            "properties": {
                "blindfold_secret_info": {
                    "description": "x-displayName: \"Blindfold Secret\"\nBlindfold Secret is used for the secrets managed by F5XC Secret Management Service",
                    "title": "Blindfold Secret",
                    "$ref": "#/definitions/schemaBlindfoldSecretInfoType"
                },
                "blindfold_secret_info_internal": {
                    "description": "x-displayName: \"Blindfold Secret Internal\"\nBlindfold Secret Internal is used for the putting re-encrypted blindfold secret",
                    "title": "Blindfold Secret Internal",
                    "$ref": "#/definitions/schemaBlindfoldSecretInfoType"
                },
                "clear_secret_info": {
                    "description": "x-displayName: \"Clear Secret\"\nClear Secret is used for the secrets that are not encrypted",
                    "title": "Clear Secret",
                    "$ref": "#/definitions/schemaClearSecretInfoType"
                },
                "secret_encoding_type": {
                    "description": "x-displayName: \"Secret Encoding\"\nThis field defines the encoding type of the secret BEFORE the secret is given to any Secret Management System.\nthis will be set if the secret is encoded and not plaintext BEFORE it is encrypted and put it in SecretType.\nNote - Do NOT set this field for Clear Secret with string:/// scheme.\ne.g. if a secret is base64 encoded and then put into vault.",
                    "title": "secret_encoding_type",
                    "$ref": "#/definitions/schemaSecretEncodingType"
                },
                "vault_secret_info": {
                    "description": "x-displayName: \"Vault Secret\"\nVault Secret is used for the secrets managed by Hashicorp Vault",
                    "title": "Vault Secret",
                    "$ref": "#/definitions/schemaVaultSecretInfoType"
                },
                "wingman_secret_info": {
                    "description": "x-displayName: \"Bootstrap Secret\"\nSecret is given as bootstrap secret in F5XC Security Sidecar",
                    "title": "Wingman Secret",
                    "$ref": "#/definitions/schemaWingmanSecretInfoType"
                }
            }
        },
        "schemaVaultSecretInfoType": {
            "type": "object",
            "description": "x-displayName: \"Vault Secret\"\nVaultSecretInfoType specifies information about the Secret managed by Hashicorp Vault.",
            "title": "VaultSecretInfoType",
            "properties": {
                "key": {
                    "type": "string",
                    "description": "x-displayName: \"Key\"\nx-example: \"key_pem\"\nKey of the individual secret. Vault Secrets are stored as key-value pair.\nIf user is only interested in one value from the map, this field should be set to the corresponding key.\nIf not provided entire secret will be returned.",
                    "title": "Key"
                },
                "location": {
                    "type": "string",
                    "description": "x-displayName: \"Location\"\nx-required\nx-example: \"v1/data/vhost_key\"\nPath to secret in Vault.",
                    "title": "Location"
                },
                "provider": {
                    "type": "string",
                    "description": "x-displayName: \"Provider\"\nx-required\nx-example: \"vault-vh-provider\"\nName of the Secret Management Access object that contains information about the backend Vault.",
                    "title": "Provider"
                },
                "secret_encoding": {
                    "description": "x-displayName: \"Secret Encoding\"\nThis field defines the encoding type of the secret BEFORE the secret is put into Hashicorp Vault.",
                    "title": "secret_encoding",
                    "$ref": "#/definitions/schemaSecretEncodingType"
                },
                "version": {
                    "type": "integer",
                    "description": "x-displayName: \"Version\"\nx-example: \"1\"\nVersion of the secret to be fetched. As vault secrets are versioned, user can specify this field to fetch specific version.\nIf not provided latest version will be returned.",
                    "title": "Version",
                    "format": "int64"
                }
            }
        },
        "schemaWingmanSecretInfoType": {
            "type": "object",
            "description": "x-displayName: \"Wingman Secret\"\nWingmanSecretInfoType specifies the handle to the wingman secret",
            "title": "WingmanSecretInfoType",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "x-displayName: \"Name\"\nx-required\nx-example: \"ChargeBack-API-Key\"\nName of the secret.",
                    "title": "Name"
                }
            }
        },
        "ticket_managementJiraIssueType": {
            "type": "object",
            "description": "Issue (ticket) type information that's specific to Jira - modeled after the JIRA REST API response format",
            "title": "JiraIssueType",
            "x-displayname": "Jira Issue Type",
            "x-ves-proto-message": "ves.io.schema.ticket_management.JiraIssueType",
            "properties": {
                "avatar_id": {
                    "type": "string",
                    "description": " External ID of the avatar\n\nExample: - \"10303\"-",
                    "title": "avatar_id",
                    "x-displayname": "Avatar ID",
                    "x-ves-example": "10303"
                },
                "icon_url": {
                    "type": "string",
                    "description": " Externally accessible URL for the avatar of the issue type\n\nExample: - \"https://example.atlassian.net/rest/api/2/universal_avatar/view/type/issuetype/avatar/10303?size=medium\"-",
                    "title": "icon_url",
                    "x-displayname": "Icon URL",
                    "x-ves-example": "https://example.atlassian.net/rest/api/2/universal_avatar/view/type/issuetype/avatar/10303?size=medium"
                },
                "id": {
                    "type": "string",
                    "description": " External ID of the Jira issue type\n\nExample: - \"10000\"-",
                    "title": "id",
                    "x-displayname": "ID",
                    "x-ves-example": "10000"
                },
                "name": {
                    "type": "string",
                    "description": " Name (human readable) of the Jira issue type\n\nExample: - \"Bug\"-",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "Bug"
                }
            }
        },
        "ticket_managementJiraProject": {
            "type": "object",
            "description": "Contains fields and information that are specific to Jira projects - modeled after the JIRA REST API response format",
            "title": "JiraProject",
            "x-displayname": "Jira Project",
            "x-ves-proto-message": "ves.io.schema.ticket_management.JiraProject",
            "properties": {
                "id": {
                    "type": "string",
                    "description": " External ID of the project\n\nExample: - \"10000\"-",
                    "title": "id",
                    "x-displayname": "ID",
                    "x-ves-example": "10000"
                },
                "issue_types": {
                    "type": "array",
                    "description": " Returns available issue types for the project",
                    "title": "issue_types",
                    "items": {
                        "$ref": "#/definitions/ticket_managementJiraIssueType"
                    },
                    "x-displayname": "Issue Types"
                },
                "key": {
                    "type": "string",
                    "description": " Key of the status\n\nExample: - \"TES\"-",
                    "title": "key",
                    "x-displayname": "Key",
                    "x-ves-example": "TES"
                },
                "name": {
                    "type": "string",
                    "description": " Human readable name as it would appear in the external ticket tracking system's UI\n\nExample: - \"Test project\"-",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "Test project"
                }
            }
        },
        "ticket_tracking_systemJiraAdhocRestApiConfigurationType": {
            "type": "object",
            "description": "v3 API Basic Auth for Ad-hoc API Calls - https://developer.atlassian.com/cloud/jira/platform/rest/v3/\nThis message represents what is stored in the XC database.  To see the API format, refer to the\nJiraAdhocRestApiConfigurationSpec message",
            "title": "JiraAdhocRestApiConfigurationType",
            "x-displayname": "JIRA Ad-hoc REST API Configuration Type",
            "x-ves-displayorder": "4,1,2",
            "x-ves-proto-message": "ves.io.schema.ticket_management.ticket_tracking_system.JiraAdhocRestApiConfigurationType",
            "properties": {
                "account_email": {
                    "type": "string",
                    "description": " Username (email) for the Atlassian account\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.email: true\n  ves.io.schema.rules.string.min_len: 1\n",
                    "title": "account_email",
                    "minLength": 1,
                    "x-displayname": "Account Email",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.email": "true",
                        "ves.io.schema.rules.string.min_len": "1"
                    }
                },
                "api_token": {
                    "type": "string",
                    "description": " API Token (password) specified by the customer in plaintext to be used for Basic Auth.\n This value is purely used for user input and is not persisted in the database.\n It will be converted to a blindfolded and encrypted form before saving.\n For editing/replacing the existing JIRA configuration, and to use the already stored value of \n the encrypted API Token, this field should be sent as an empty string.\n Since this field is confidential, the Get/List public APIs will return this value as an empty string.\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.max_len: 512\n",
                    "title": "api_token",
                    "maxLength": 512,
                    "x-displayname": "API Token",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.max_len": "512"
                    }
                },
                "organization_domain": {
                    "type": "string",
                    "description": " A valid hostname for the Atlassian organization, as defined by RFC 1034\n\nExample: - \"sample-org.atlassian.net\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.hostname: true\n  ves.io.schema.rules.string.min_len: 1\n",
                    "title": "organization_domain",
                    "minLength": 1,
                    "x-displayname": "Organization Domain",
                    "x-ves-example": "sample-org.atlassian.net",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.hostname": "true",
                        "ves.io.schema.rules.string.min_len": "1"
                    }
                }
            }
        },
        "ticket_tracking_systemJiraConfigurationType": {
            "type": "object",
            "title": "JiraConfigurationType",
            "x-displayname": "Jira Configuration Type",
            "x-ves-oneof-field-config": "[\"adhoc_rest_api\"]",
            "x-ves-proto-message": "ves.io.schema.ticket_management.ticket_tracking_system.JiraConfigurationType",
            "properties": {
                "adhoc_rest_api": {
                    "description": "Exclusive with []\n",
                    "title": "adhoc_rest_api",
                    "$ref": "#/definitions/ticket_tracking_systemJiraAdhocRestApiConfigurationType",
                    "x-displayname": "Ad-hoc REST API"
                }
            }
        },
        "ticket_tracking_systemJiraProjectsIssueTypesRequest": {
            "type": "object",
            "title": "JiraProjectsIssueTypesRequest",
            "x-displayname": "Jira Projects \u0026 Issue Types Request",
            "x-ves-proto-message": "ves.io.schema.ticket_management.ticket_tracking_system.JiraProjectsIssueTypesRequest",
            "properties": {
                "ticket_tracking_system": {
                    "type": "string",
                    "description": " The name (identifier) of the ticket tracking system for the request",
                    "title": "ticket_tracking_system",
                    "x-displayname": "Ticket Tracking System"
                }
            }
        },
        "ticket_tracking_systemJiraProjectsIssueTypesResponse": {
            "type": "object",
            "title": "JiraProjectsIssueTypesResponse",
            "x-displayname": "Jira Projects \u0026 Issue Types Response",
            "x-ves-proto-message": "ves.io.schema.ticket_management.ticket_tracking_system.JiraProjectsIssueTypesResponse",
            "properties": {
                "projects": {
                    "type": "array",
                    "description": " A list of Jira projects that are available in the specified ticket tracking system",
                    "title": "projects",
                    "items": {
                        "$ref": "#/definitions/ticket_managementJiraProject"
                    },
                    "x-displayname": "Projects"
                },
                "ticket_tracking_system": {
                    "type": "string",
                    "description": " The name (identifier) of the ticket tracking system for the request",
                    "title": "ticket_tracking_system",
                    "x-displayname": "Ticket Tracking System"
                }
            }
        },
        "ticket_tracking_systemValidateTicketTrackingSystemRequest": {
            "type": "object",
            "description": "Request message when validating a Ticket Tracking System's credentials / organization through the custom API",
            "title": "ValidateTicketTrackingSystemRequest",
            "x-displayname": "Validate Ticket Tracking System Request",
            "x-ves-oneof-field-provider_config": "[\"jira_config\"]",
            "x-ves-proto-message": "ves.io.schema.ticket_management.ticket_tracking_system.ValidateTicketTrackingSystemRequest",
            "properties": {
                "jira_config": {
                    "description": "Exclusive with []\n Configuration when JIRA is the ticket provider system",
                    "title": "jira",
                    "$ref": "#/definitions/ticket_tracking_systemJiraConfigurationType",
                    "x-displayname": "Jira Configuration"
                }
            }
        },
        "ticket_tracking_systemValidateTicketTrackingSystemResponse": {
            "type": "object",
            "description": "Response message when validating a Ticket Tracking System's credentials / organization through the custom API\nEmpty errors means the validation succeeded",
            "title": "ValidateTicketTrackingSystemResponse",
            "x-displayname": "Validate Ticket Tracking System Response",
            "x-ves-proto-message": "ves.io.schema.ticket_management.ticket_tracking_system.ValidateTicketTrackingSystemResponse",
            "properties": {
                "errors": {
                    "type": "array",
                    "description": " Errors related to ticket tracking system creation - such as issues with validation of credentials + organization domain",
                    "title": "errors",
                    "items": {
                        "$ref": "#/definitions/schemaErrorType"
                    },
                    "x-displayname": "Errors"
                }
            }
        }
    },
    "x-displayname": "Ticket Tracking System",
    "x-ves-proto-file": "ves.io/schema/ticket_management/ticket_tracking_system/public_customapi.proto"
}`

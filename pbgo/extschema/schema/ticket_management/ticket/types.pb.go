// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/ticket_management/ticket/types.proto

package ticket

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GlobalSpecType
//
// x-displayName: "Global Specification"
type GlobalSpecType struct {
	// service_feature
	//
	// x-displayName: "Service Feature"
	// x-required
	// An identifier for the feature that the implementing XC service can set to
	// group tickets together
	ServiceFeature string `protobuf:"bytes,1,opt,name=service_feature,json=serviceFeature,proto3" json:"service_feature,omitempty"`
	// external_id
	//
	// x-displayName: "External ID"
	// x-required
	// The external ID of the ticket that is assigned by the ticket tracking system (not XC)
	ExternalId string `protobuf:"bytes,2,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	// ticket_tracking_system
	//
	// x-displayName: "Ticket Tracking System"
	// x-required
	// Reference to the ticket tracking system that the ticket belongs to
	TicketTrackingSystem []*schema.ObjectRefType `protobuf:"bytes,3,rep,name=ticket_tracking_system,json=ticketTrackingSystem,proto3" json:"ticket_tracking_system,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b3e95c43c212d89, []int{0}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

func (m *GlobalSpecType) GetServiceFeature() string {
	if m != nil {
		return m.ServiceFeature
	}
	return ""
}

func (m *GlobalSpecType) GetExternalId() string {
	if m != nil {
		return m.ExternalId
	}
	return ""
}

func (m *GlobalSpecType) GetTicketTrackingSystem() []*schema.ObjectRefType {
	if m != nil {
		return m.TicketTrackingSystem
	}
	return nil
}

func init() {
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.ticket_management.ticket.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.ticket_management.ticket.GlobalSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/ticket_management/ticket/types.proto", fileDescriptor_0b3e95c43c212d89)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/ticket_management/ticket/types.proto", fileDescriptor_0b3e95c43c212d89)
}

var fileDescriptor_0b3e95c43c212d89 = []byte{
	// 422 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0xcd, 0x8a, 0x13, 0x41,
	0x10, 0x9e, 0x32, 0xe2, 0xcf, 0x2c, 0xac, 0x12, 0x44, 0x62, 0x5c, 0xda, 0x20, 0xa8, 0x7b, 0xc9,
	0x0c, 0xac, 0x6f, 0xb0, 0x07, 0xc5, 0x93, 0x90, 0xdd, 0x93, 0x08, 0x43, 0xcf, 0xa4, 0xd2, 0xdb,
	0x66, 0x66, 0x6a, 0xe8, 0xee, 0x8c, 0x3b, 0x07, 0xc1, 0x47, 0x10, 0x8f, 0x3e, 0x81, 0xf8, 0x08,
	0x9e, 0xf6, 0xe8, 0x31, 0x17, 0x21, 0x47, 0xd3, 0xb9, 0xe8, 0x6d, 0x1f, 0x41, 0xec, 0xe9, 0xb0,
	0xcc, 0x8a, 0x78, 0xab, 0xfa, 0x7e, 0x8a, 0xaf, 0x3f, 0x3a, 0x3c, 0xa8, 0x51, 0x47, 0x92, 0x62,
	0x9d, 0x9d, 0x60, 0xc1, 0x63, 0x23, 0xb3, 0x39, 0x9a, 0xa4, 0xe0, 0x25, 0x17, 0x58, 0x60, 0x69,
	0x3c, 0x12, 0x9b, 0xa6, 0x42, 0x1d, 0x55, 0x8a, 0x0c, 0xf5, 0x1f, 0xb7, 0x9e, 0xa8, 0xf5, 0x44,
	0x7f, 0x79, 0x3c, 0x32, 0x1c, 0x0b, 0x69, 0x4e, 0x16, 0x69, 0x94, 0x51, 0x11, 0x0b, 0x12, 0x14,
	0x3b, 0x7b, 0xba, 0x98, 0xb9, 0xcd, 0x2d, 0x6e, 0x6a, 0xcf, 0x0e, 0xef, 0x09, 0x22, 0x91, 0xe3,
	0x85, 0x8a, 0x97, 0x8d, 0xa7, 0xee, 0x77, 0x53, 0x52, 0x65, 0x24, 0x95, 0x7a, 0xeb, 0xbb, 0xf4,
	0x84, 0x8b, 0xa4, 0xc3, 0xbd, 0x2e, 0x55, 0xf3, 0x5c, 0x4e, 0xb9, 0x41, 0xcf, 0x8e, 0x2e, 0xb1,
	0x12, 0xdf, 0x26, 0x9d, 0xd3, 0x0f, 0xbf, 0x43, 0xb8, 0xfb, 0x3c, 0xa7, 0x94, 0xe7, 0x47, 0x15,
	0x66, 0xc7, 0x4d, 0x85, 0xfd, 0x27, 0xe1, 0x2d, 0x8d, 0xaa, 0x96, 0x19, 0x26, 0x33, 0xe4, 0x66,
	0xa1, 0x70, 0x00, 0x23, 0xd8, 0xbf, 0x39, 0xd9, 0xf5, 0xf0, 0xb3, 0x16, 0xed, 0x3f, 0x08, 0x77,
	0xf0, 0xd4, 0xa0, 0x2a, 0x79, 0x9e, 0xc8, 0xe9, 0xe0, 0x8a, 0x13, 0x85, 0x5b, 0xe8, 0xc5, 0xb4,
	0xdf, 0x84, 0x77, 0x7d, 0x75, 0x46, 0xf1, 0x6c, 0x2e, 0x4b, 0x91, 0xe8, 0x46, 0x1b, 0x2c, 0x06,
	0xbd, 0x51, 0x6f, 0x7f, 0xe7, 0x60, 0x2f, 0xea, 0xf6, 0xfc, 0x32, 0x7d, 0x83, 0x99, 0x99, 0xe0,
	0xec, 0x4f, 0x8e, 0xc3, 0x47, 0x5f, 0xde, 0xfd, 0xc3, 0xfe, 0xf5, 0xd7, 0x59, 0xef, 0xfa, 0x47,
	0xb8, 0x7a, 0x03, 0x6e, 0xc3, 0xe4, 0x4e, 0xab, 0x39, 0xf6, 0x92, 0x23, 0xa7, 0x38, 0xfc, 0x04,
	0xcb, 0x35, 0x0b, 0x56, 0x6b, 0x16, 0x9c, 0xaf, 0x19, 0xbc, 0xb7, 0x0c, 0x3e, 0x5b, 0x06, 0xdf,
	0x2c, 0x83, 0xa5, 0x65, 0xb0, 0xb2, 0x0c, 0x7e, 0x58, 0x06, 0x3f, 0x2d, 0x0b, 0xce, 0x2d, 0x83,
	0x0f, 0x1b, 0x16, 0x9c, 0x6d, 0x18, 0x2c, 0x37, 0x2c, 0x58, 0x6d, 0x58, 0xf0, 0xea, 0xb5, 0xa0,
	0x6a, 0x2e, 0xa2, 0x9a, 0x72, 0x83, 0x4a, 0xf1, 0x68, 0xa1, 0x63, 0x37, 0xcc, 0x48, 0x15, 0xe3,
	0x4a, 0x51, 0x2d, 0xa7, 0xa8, 0xc6, 0x5b, 0x3a, 0xae, 0x52, 0x41, 0x31, 0x9e, 0x1a, 0xdf, 0xf3,
	0x7f, 0xbe, 0x5a, 0x7a, 0xcd, 0x75, 0xff, 0xf4, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x01, 0x3c,
	0x44, 0xf6, 0x9b, 0x02, 0x00, 0x00,
}

func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ServiceFeature != that1.ServiceFeature {
		return false
	}
	if this.ExternalId != that1.ExternalId {
		return false
	}
	if len(this.TicketTrackingSystem) != len(that1.TicketTrackingSystem) {
		return false
	}
	for i := range this.TicketTrackingSystem {
		if !this.TicketTrackingSystem[i].Equal(that1.TicketTrackingSystem[i]) {
			return false
		}
	}
	return true
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ticket.GlobalSpecType{")
	s = append(s, "ServiceFeature: "+fmt.Sprintf("%#v", this.ServiceFeature)+",\n")
	s = append(s, "ExternalId: "+fmt.Sprintf("%#v", this.ExternalId)+",\n")
	if this.TicketTrackingSystem != nil {
		s = append(s, "TicketTrackingSystem: "+fmt.Sprintf("%#v", this.TicketTrackingSystem)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TicketTrackingSystem) > 0 {
		for iNdEx := len(m.TicketTrackingSystem) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TicketTrackingSystem[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ExternalId) > 0 {
		i -= len(m.ExternalId)
		copy(dAtA[i:], m.ExternalId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ExternalId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ServiceFeature) > 0 {
		i -= len(m.ServiceFeature)
		copy(dAtA[i:], m.ServiceFeature)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ServiceFeature)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServiceFeature)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ExternalId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.TicketTrackingSystem) > 0 {
		for _, e := range m.TicketTrackingSystem {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTicketTrackingSystem := "[]*ObjectRefType{"
	for _, f := range this.TicketTrackingSystem {
		repeatedStringForTicketTrackingSystem += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForTicketTrackingSystem += "}"
	s := strings.Join([]string{`&GlobalSpecType{`,
		`ServiceFeature:` + fmt.Sprintf("%v", this.ServiceFeature) + `,`,
		`ExternalId:` + fmt.Sprintf("%v", this.ExternalId) + `,`,
		`TicketTrackingSystem:` + repeatedStringForTicketTrackingSystem + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceFeature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceFeature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TicketTrackingSystem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TicketTrackingSystem = append(m.TicketTrackingSystem, &schema.ObjectRefType{})
			if err := m.TicketTrackingSystem[len(m.TicketTrackingSystem)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

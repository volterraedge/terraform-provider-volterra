// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package ticket

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *CreateJiraIssueRequest) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateJiraIssueRequest) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CreateJiraIssueRequest) DeepCopy() *CreateJiraIssueRequest {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateJiraIssueRequest{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateJiraIssueRequest) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateJiraIssueRequest) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateJiraIssueRequestValidator().Validate(ctx, m, opts...)
}

type ValidateCreateJiraIssueRequest struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateJiraIssueRequest) ProjectValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for project")
	}

	return validatorFn, nil
}

func (v *ValidateCreateJiraIssueRequest) IssueTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for issue_type")
	}

	return validatorFn, nil
}

func (v *ValidateCreateJiraIssueRequest) SummaryValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for summary")
	}

	return validatorFn, nil
}

func (v *ValidateCreateJiraIssueRequest) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateJiraIssueRequest)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateJiraIssueRequest got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["description"]; exists {

		vOpts := append(opts, db.WithValidateField("description"))
		if err := fv(ctx, m.GetDescription(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["issue_type"]; exists {

		vOpts := append(opts, db.WithValidateField("issue_type"))
		if err := fv(ctx, m.GetIssueType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["project"]; exists {

		vOpts := append(opts, db.WithValidateField("project"))
		if err := fv(ctx, m.GetProject(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["summary"]; exists {

		vOpts := append(opts, db.WithValidateField("summary"))
		if err := fv(ctx, m.GetSummary(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateJiraIssueRequestValidator = func() *ValidateCreateJiraIssueRequest {
	v := &ValidateCreateJiraIssueRequest{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhProject := v.ProjectValidationRuleHandler
	rulesProject := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhProject(rulesProject)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateJiraIssueRequest.project: %s", err)
		panic(errMsg)
	}
	v.FldValidators["project"] = vFn

	vrhIssueType := v.IssueTypeValidationRuleHandler
	rulesIssueType := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhIssueType(rulesIssueType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateJiraIssueRequest.issue_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["issue_type"] = vFn

	vrhSummary := v.SummaryValidationRuleHandler
	rulesSummary := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhSummary(rulesSummary)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateJiraIssueRequest.summary: %s", err)
		panic(errMsg)
	}
	v.FldValidators["summary"] = vFn

	return v
}()

func CreateJiraIssueRequestValidator() db.Validator {
	return DefaultCreateJiraIssueRequestValidator
}

// augmented methods on protoc/std generated struct

func (m *PrivateCreateTicketRequest) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *PrivateCreateTicketRequest) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *PrivateCreateTicketRequest) DeepCopy() *PrivateCreateTicketRequest {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &PrivateCreateTicketRequest{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *PrivateCreateTicketRequest) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *PrivateCreateTicketRequest) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return PrivateCreateTicketRequestValidator().Validate(ctx, m, opts...)
}

type ValidatePrivateCreateTicketRequest struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidatePrivateCreateTicketRequest) SpecValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for spec")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := PrivateCreateTicketSpecValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidatePrivateCreateTicketRequest) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*PrivateCreateTicketRequest)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *PrivateCreateTicketRequest got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["spec"]; exists {

		vOpts := append(opts, db.WithValidateField("spec"))
		if err := fv(ctx, m.GetSpec(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultPrivateCreateTicketRequestValidator = func() *ValidatePrivateCreateTicketRequest {
	v := &ValidatePrivateCreateTicketRequest{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhSpec := v.SpecValidationRuleHandler
	rulesSpec := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhSpec(rulesSpec)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for PrivateCreateTicketRequest.spec: %s", err)
		panic(errMsg)
	}
	v.FldValidators["spec"] = vFn

	return v
}()

func PrivateCreateTicketRequestValidator() db.Validator {
	return DefaultPrivateCreateTicketRequestValidator
}

// augmented methods on protoc/std generated struct

func (m *PrivateCreateTicketResponse) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *PrivateCreateTicketResponse) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *PrivateCreateTicketResponse) DeepCopy() *PrivateCreateTicketResponse {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &PrivateCreateTicketResponse{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *PrivateCreateTicketResponse) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *PrivateCreateTicketResponse) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return PrivateCreateTicketResponseValidator().Validate(ctx, m, opts...)
}

func (m *PrivateCreateTicketResponse) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetSpecDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetSpecDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSystemMetadataDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetSystemMetadataDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *PrivateCreateTicketResponse) GetSpecDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSpec() == nil {
		return nil, nil
	}

	drInfos, err := m.GetSpec().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetSpec().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "spec." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *PrivateCreateTicketResponse) GetSystemMetadataDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSystemMetadata() == nil {
		return nil, nil
	}

	drInfos, err := m.GetSystemMetadata().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetSystemMetadata().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "system_metadata." + dri.DRField
	}
	return drInfos, err

}

type ValidatePrivateCreateTicketResponse struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidatePrivateCreateTicketResponse) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*PrivateCreateTicketResponse)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *PrivateCreateTicketResponse got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["errors"]; exists {

		vOpts := append(opts, db.WithValidateField("errors"))
		for idx, item := range m.GetErrors() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["metadata"]; exists {

		vOpts := append(opts, db.WithValidateField("metadata"))
		if err := fv(ctx, m.GetMetadata(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["spec"]; exists {

		vOpts := append(opts, db.WithValidateField("spec"))
		if err := fv(ctx, m.GetSpec(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["system_metadata"]; exists {

		vOpts := append(opts, db.WithValidateField("system_metadata"))
		if err := fv(ctx, m.GetSystemMetadata(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultPrivateCreateTicketResponseValidator = func() *ValidatePrivateCreateTicketResponse {
	v := &ValidatePrivateCreateTicketResponse{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["metadata"] = ves_io_schema.ObjectGetMetaTypeValidator().Validate

	v.FldValidators["system_metadata"] = ves_io_schema.SystemObjectMetaTypeValidator().Validate

	v.FldValidators["spec"] = TicketResponseSpecValidator().Validate

	return v
}()

func PrivateCreateTicketResponseValidator() db.Validator {
	return DefaultPrivateCreateTicketResponseValidator
}

// augmented methods on protoc/std generated struct

func (m *PrivateCreateTicketSpec) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *PrivateCreateTicketSpec) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *PrivateCreateTicketSpec) DeepCopy() *PrivateCreateTicketSpec {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &PrivateCreateTicketSpec{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *PrivateCreateTicketSpec) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *PrivateCreateTicketSpec) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return PrivateCreateTicketSpecValidator().Validate(ctx, m, opts...)
}

type ValidatePrivateCreateTicketSpec struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidatePrivateCreateTicketSpec) TicketValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ticket")
	}
	return validatorFn, nil
}

func (v *ValidatePrivateCreateTicketSpec) ServiceFeatureValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for service_feature")
	}

	return validatorFn, nil
}

func (v *ValidatePrivateCreateTicketSpec) TicketTrackingSystemValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ticket_tracking_system")
	}

	return validatorFn, nil
}

func (v *ValidatePrivateCreateTicketSpec) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*PrivateCreateTicketSpec)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *PrivateCreateTicketSpec got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["labels"]; exists {

		vOpts := append(opts, db.WithValidateField("labels"))
		for key, value := range m.GetLabels() {
			vOpts := append(vOpts, db.WithValidateMapKey(key))
			if err := fv(ctx, value, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["service_feature"]; exists {

		vOpts := append(opts, db.WithValidateField("service_feature"))
		if err := fv(ctx, m.GetServiceFeature(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["ticket"]; exists {
		val := m.GetTicket()
		vOpts := append(opts,
			db.WithValidateField("ticket"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetTicket().(type) {
	case *PrivateCreateTicketSpec_JiraIssue:
		if fv, exists := v.FldValidators["ticket.jira_issue"]; exists {
			val := m.GetTicket().(*PrivateCreateTicketSpec_JiraIssue).JiraIssue
			vOpts := append(opts,
				db.WithValidateField("ticket"),
				db.WithValidateField("jira_issue"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["ticket_tracking_system"]; exists {

		vOpts := append(opts, db.WithValidateField("ticket_tracking_system"))
		if err := fv(ctx, m.GetTicketTrackingSystem(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultPrivateCreateTicketSpecValidator = func() *ValidatePrivateCreateTicketSpec {
	v := &ValidatePrivateCreateTicketSpec{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhTicket := v.TicketValidationRuleHandler
	rulesTicket := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhTicket(rulesTicket)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for PrivateCreateTicketSpec.ticket: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ticket"] = vFn

	vrhServiceFeature := v.ServiceFeatureValidationRuleHandler
	rulesServiceFeature := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhServiceFeature(rulesServiceFeature)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for PrivateCreateTicketSpec.service_feature: %s", err)
		panic(errMsg)
	}
	v.FldValidators["service_feature"] = vFn

	vrhTicketTrackingSystem := v.TicketTrackingSystemValidationRuleHandler
	rulesTicketTrackingSystem := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhTicketTrackingSystem(rulesTicketTrackingSystem)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for PrivateCreateTicketSpec.ticket_tracking_system: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ticket_tracking_system"] = vFn

	v.FldValidators["ticket.jira_issue"] = CreateJiraIssueRequestValidator().Validate

	return v
}()

func PrivateCreateTicketSpecValidator() db.Validator {
	return DefaultPrivateCreateTicketSpecValidator
}

// augmented methods on protoc/std generated struct

func (m *SearchTicketRequest) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SearchTicketRequest) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SearchTicketRequest) DeepCopy() *SearchTicketRequest {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SearchTicketRequest{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SearchTicketRequest) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SearchTicketRequest) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SearchTicketRequestValidator().Validate(ctx, m, opts...)
}

type ValidateSearchTicketRequest struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSearchTicketRequest) ServiceFeatureValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for service_feature")
	}

	return validatorFn, nil
}

func (v *ValidateSearchTicketRequest) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SearchTicketRequest)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SearchTicketRequest got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["label_filter"]; exists {

		vOpts := append(opts, db.WithValidateField("label_filter"))
		if err := fv(ctx, m.GetLabelFilter(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["service_feature"]; exists {

		vOpts := append(opts, db.WithValidateField("service_feature"))
		if err := fv(ctx, m.GetServiceFeature(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSearchTicketRequestValidator = func() *ValidateSearchTicketRequest {
	v := &ValidateSearchTicketRequest{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhServiceFeature := v.ServiceFeatureValidationRuleHandler
	rulesServiceFeature := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhServiceFeature(rulesServiceFeature)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SearchTicketRequest.service_feature: %s", err)
		panic(errMsg)
	}
	v.FldValidators["service_feature"] = vFn

	return v
}()

func SearchTicketRequestValidator() db.Validator {
	return DefaultSearchTicketRequestValidator
}

// augmented methods on protoc/std generated struct

func (m *SearchTicketResponse) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SearchTicketResponse) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SearchTicketResponse) DeepCopy() *SearchTicketResponse {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SearchTicketResponse{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SearchTicketResponse) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SearchTicketResponse) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SearchTicketResponseValidator().Validate(ctx, m, opts...)
}

func (m *SearchTicketResponse) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetItemsDRefInfo()

}

// GetDRefInfo for the field's type
func (m *SearchTicketResponse) GetItemsDRefInfo() ([]db.DRefInfo, error) {
	if m.GetItems() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetItems() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetItems() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("items[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

type ValidateSearchTicketResponse struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSearchTicketResponse) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SearchTicketResponse)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SearchTicketResponse got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["items"]; exists {

		vOpts := append(opts, db.WithValidateField("items"))
		for idx, item := range m.GetItems() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSearchTicketResponseValidator = func() *ValidateSearchTicketResponse {
	v := &ValidateSearchTicketResponse{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["items"] = SearchTicketResponseItemValidator().Validate

	return v
}()

func SearchTicketResponseValidator() db.Validator {
	return DefaultSearchTicketResponseValidator
}

// augmented methods on protoc/std generated struct

func (m *SearchTicketResponseItem) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SearchTicketResponseItem) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SearchTicketResponseItem) DeepCopy() *SearchTicketResponseItem {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SearchTicketResponseItem{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SearchTicketResponseItem) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SearchTicketResponseItem) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SearchTicketResponseItemValidator().Validate(ctx, m, opts...)
}

func (m *SearchTicketResponseItem) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetSpecDRefInfo()

}

// GetDRefInfo for the field's type
func (m *SearchTicketResponseItem) GetSpecDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSpec() == nil {
		return nil, nil
	}

	drInfos, err := m.GetSpec().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetSpec().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "spec." + dri.DRField
	}
	return drInfos, err

}

type ValidateSearchTicketResponseItem struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSearchTicketResponseItem) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SearchTicketResponseItem)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SearchTicketResponseItem got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["metadata"]; exists {

		vOpts := append(opts, db.WithValidateField("metadata"))
		if err := fv(ctx, m.GetMetadata(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["spec"]; exists {

		vOpts := append(opts, db.WithValidateField("spec"))
		if err := fv(ctx, m.GetSpec(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["system_metadata"]; exists {

		vOpts := append(opts, db.WithValidateField("system_metadata"))
		if err := fv(ctx, m.GetSystemMetadata(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSearchTicketResponseItemValidator = func() *ValidateSearchTicketResponseItem {
	v := &ValidateSearchTicketResponseItem{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["metadata"] = ves_io_schema.ObjectGetMetaTypeValidator().Validate

	v.FldValidators["spec"] = TicketResponseSpecValidator().Validate

	return v
}()

func SearchTicketResponseItemValidator() db.Validator {
	return DefaultSearchTicketResponseItemValidator
}

// augmented methods on protoc/std generated struct

func (m *TicketResponseSpec) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *TicketResponseSpec) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *TicketResponseSpec) DeepCopy() *TicketResponseSpec {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &TicketResponseSpec{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *TicketResponseSpec) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *TicketResponseSpec) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return TicketResponseSpecValidator().Validate(ctx, m, opts...)
}

func (m *TicketResponseSpec) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetTicketTrackingSystemDRefInfo()

}

func (m *TicketResponseSpec) GetTicketTrackingSystemDRefInfo() ([]db.DRefInfo, error) {
	refs := m.GetTicketTrackingSystem()
	if len(refs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(refs))
	for i, ref := range refs {
		if ref == nil {
			return nil, fmt.Errorf("TicketResponseSpec.ticket_tracking_system[%d] has a nil value", i)
		}
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "ticket_tracking_system.Object",
			RefdUID:    ref.Uid,
			RefdTenant: ref.Tenant,
			RefdNS:     ref.Namespace,
			RefdName:   ref.Name,
			DRField:    "ticket_tracking_system",
			Ref:        ref,
		})
	}
	return drInfos, nil

}

// GetTicketTrackingSystemDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *TicketResponseSpec) GetTicketTrackingSystemDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "ticket_tracking_system.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: ticket_tracking_system")
	}
	for _, ref := range m.GetTicketTrackingSystem() {
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateTicketResponseSpec struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateTicketResponseSpec) TicketTrackingSystemValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for ticket_tracking_system")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for ticket_tracking_system")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated ticket_tracking_system")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items ticket_tracking_system")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateTicketResponseSpec) AuthorValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for author")
	}

	return validatorFn, nil
}

func (v *ValidateTicketResponseSpec) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*TicketResponseSpec)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *TicketResponseSpec got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["author"]; exists {

		vOpts := append(opts, db.WithValidateField("author"))
		if err := fv(ctx, m.GetAuthor(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["external_id"]; exists {

		vOpts := append(opts, db.WithValidateField("external_id"))
		if err := fv(ctx, m.GetExternalId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["external_link"]; exists {

		vOpts := append(opts, db.WithValidateField("external_link"))
		if err := fv(ctx, m.GetExternalLink(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["service_feature"]; exists {

		vOpts := append(opts, db.WithValidateField("service_feature"))
		if err := fv(ctx, m.GetServiceFeature(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetTicket().(type) {
	case *TicketResponseSpec_JiraIssue:
		if fv, exists := v.FldValidators["ticket.jira_issue"]; exists {
			val := m.GetTicket().(*TicketResponseSpec_JiraIssue).JiraIssue
			vOpts := append(opts,
				db.WithValidateField("ticket"),
				db.WithValidateField("jira_issue"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["ticket_tracking_system"]; exists {
		vOpts := append(opts, db.WithValidateField("ticket_tracking_system"))
		if err := fv(ctx, m.GetTicketTrackingSystem(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["ticket_tracking_system_type"]; exists {

		vOpts := append(opts, db.WithValidateField("ticket_tracking_system_type"))
		if err := fv(ctx, m.GetTicketTrackingSystemType(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultTicketResponseSpecValidator = func() *ValidateTicketResponseSpec {
	v := &ValidateTicketResponseSpec{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhTicketTrackingSystem := v.TicketTrackingSystemValidationRuleHandler
	rulesTicketTrackingSystem := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "1",
		"ves.io.schema.rules.repeated.min_items": "1",
	}
	vFn, err = vrhTicketTrackingSystem(rulesTicketTrackingSystem)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for TicketResponseSpec.ticket_tracking_system: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ticket_tracking_system"] = vFn

	vrhAuthor := v.AuthorValidationRuleHandler
	rulesAuthor := map[string]string{
		"ves.io.schema.rules.string.email": "true",
	}
	vFn, err = vrhAuthor(rulesAuthor)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for TicketResponseSpec.author: %s", err)
		panic(errMsg)
	}
	v.FldValidators["author"] = vFn

	return v
}()

func TicketResponseSpecValidator() db.Validator {
	return DefaultTicketResponseSpecValidator
}

// augmented methods on protoc/std generated struct

func (m *UnlinkTicketsRequest) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *UnlinkTicketsRequest) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *UnlinkTicketsRequest) DeepCopy() *UnlinkTicketsRequest {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &UnlinkTicketsRequest{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *UnlinkTicketsRequest) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *UnlinkTicketsRequest) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return UnlinkTicketsRequestValidator().Validate(ctx, m, opts...)
}

type ValidateUnlinkTicketsRequest struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateUnlinkTicketsRequest) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*UnlinkTicketsRequest)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *UnlinkTicketsRequest got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["service_feature"]; exists {

		vOpts := append(opts, db.WithValidateField("service_feature"))
		if err := fv(ctx, m.GetServiceFeature(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetUnlinkChoice().(type) {
	case *UnlinkTicketsRequest_LabelFilter:
		if fv, exists := v.FldValidators["unlink_choice.label_filter"]; exists {
			val := m.GetUnlinkChoice().(*UnlinkTicketsRequest_LabelFilter).LabelFilter
			vOpts := append(opts,
				db.WithValidateField("unlink_choice"),
				db.WithValidateField("label_filter"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *UnlinkTicketsRequest_TicketUid:
		if fv, exists := v.FldValidators["unlink_choice.ticket_uid"]; exists {
			val := m.GetUnlinkChoice().(*UnlinkTicketsRequest_TicketUid).TicketUid
			vOpts := append(opts,
				db.WithValidateField("unlink_choice"),
				db.WithValidateField("ticket_uid"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultUnlinkTicketsRequestValidator = func() *ValidateUnlinkTicketsRequest {
	v := &ValidateUnlinkTicketsRequest{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func UnlinkTicketsRequestValidator() db.Validator {
	return DefaultUnlinkTicketsRequestValidator
}

// augmented methods on protoc/std generated struct

func (m *UnlinkTicketsResponse) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *UnlinkTicketsResponse) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *UnlinkTicketsResponse) DeepCopy() *UnlinkTicketsResponse {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &UnlinkTicketsResponse{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *UnlinkTicketsResponse) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *UnlinkTicketsResponse) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return UnlinkTicketsResponseValidator().Validate(ctx, m, opts...)
}

type ValidateUnlinkTicketsResponse struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateUnlinkTicketsResponse) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*UnlinkTicketsResponse)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *UnlinkTicketsResponse got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultUnlinkTicketsResponseValidator = func() *ValidateUnlinkTicketsResponse {
	v := &ValidateUnlinkTicketsResponse{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func UnlinkTicketsResponseValidator() db.Validator {
	return DefaultUnlinkTicketsResponseValidator
}

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/ticket_management/ticket/private_customapi.proto

// Ticket
//
// x-displayName: "Ticket"

package ticket

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	_ "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ticket_management "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/ticket_management"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// SearchTicketRequest
//
// x-displayName: "Search Ticket Request"
type SearchTicketRequest struct {
	// service_feature
	//
	// x-displayName: "Service Feature"
	// x-required
	// Used to retrieve all tickets where their service_feature matches the provided string value
	// Eywa will check to make sure the service daemon of the search request matches the creator_class of the ticket
	ServiceFeature string `protobuf:"bytes,1,opt,name=service_feature,json=serviceFeature,proto3" json:"service_feature,omitempty"`
	// label_filter
	//
	// x-displayName: "Label Filter"
	// x-example: "env in (staging, testing), tier in (web, db)"
	// A LabelSelectorType expression that every item in list response will satisfy
	LabelFilter string `protobuf:"bytes,2,opt,name=label_filter,json=labelFilter,proto3" json:"label_filter,omitempty"`
	// namespace
	//
	// x-displayName: "Namespace"
	Namespace string `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (m *SearchTicketRequest) Reset()      { *m = SearchTicketRequest{} }
func (*SearchTicketRequest) ProtoMessage() {}
func (*SearchTicketRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff005f77b13da262, []int{0}
}
func (m *SearchTicketRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchTicketRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchTicketRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchTicketRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchTicketRequest.Merge(m, src)
}
func (m *SearchTicketRequest) XXX_Size() int {
	return m.Size()
}
func (m *SearchTicketRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchTicketRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SearchTicketRequest proto.InternalMessageInfo

func (m *SearchTicketRequest) GetServiceFeature() string {
	if m != nil {
		return m.ServiceFeature
	}
	return ""
}

func (m *SearchTicketRequest) GetLabelFilter() string {
	if m != nil {
		return m.LabelFilter
	}
	return ""
}

func (m *SearchTicketRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

// SearchTicketResponseItem
//
// x-displayName: "Search Ticket Response Item"
type SearchTicketResponseItem struct {
	// metadata
	//
	// x-displayName: "Metadata"
	// If list request has report_fields set then metadata will
	// contain all the metadata associated with the object.
	Metadata *schema.ObjectGetMetaType `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// system_metadata
	//
	// x-displayName: "System Metadata"
	// If list request has report_fields set then system_metadata will
	// contain all the system generated details of this object.
	SystemMetadata *schema.SystemObjectGetMetaType `protobuf:"bytes,2,opt,name=system_metadata,json=systemMetadata,proto3" json:"system_metadata,omitempty"`
	// spec
	//
	// x-displayName: "Specification"
	// Specification for the ticket
	Spec *TicketResponseSpec `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (m *SearchTicketResponseItem) Reset()      { *m = SearchTicketResponseItem{} }
func (*SearchTicketResponseItem) ProtoMessage() {}
func (*SearchTicketResponseItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff005f77b13da262, []int{1}
}
func (m *SearchTicketResponseItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchTicketResponseItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchTicketResponseItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchTicketResponseItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchTicketResponseItem.Merge(m, src)
}
func (m *SearchTicketResponseItem) XXX_Size() int {
	return m.Size()
}
func (m *SearchTicketResponseItem) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchTicketResponseItem.DiscardUnknown(m)
}

var xxx_messageInfo_SearchTicketResponseItem proto.InternalMessageInfo

func (m *SearchTicketResponseItem) GetMetadata() *schema.ObjectGetMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *SearchTicketResponseItem) GetSystemMetadata() *schema.SystemObjectGetMetaType {
	if m != nil {
		return m.SystemMetadata
	}
	return nil
}

func (m *SearchTicketResponseItem) GetSpec() *TicketResponseSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

// TicketResponseSpec
//
// x-displayName: "Search Ticket Response Spec"
type TicketResponseSpec struct {
	// service_feature
	//
	// x-displayName: "Service Feature"
	// The service feature assigned by an XC service to the ticket
	ServiceFeature string `protobuf:"bytes,1,opt,name=service_feature,json=serviceFeature,proto3" json:"service_feature,omitempty"`
	// external_id
	//
	// x-displayName: "External ID"
	// The external ID of the ticket used by the ticket tracking system system
	ExternalId string `protobuf:"bytes,2,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	// external_link
	//
	// x-displayName: "External Link"
	// Fully resolvable hyperlink w/ FQDN to the ticket.
	// This will be the ticket tracking system organization subdomain + external ID
	ExternalLink string `protobuf:"bytes,3,opt,name=external_link,json=externalLink,proto3" json:"external_link,omitempty"`
	// ticket_tracking_system
	//
	// x-displayName: "Ticket Tracking System"
	// x-required
	// Reference to the ticket tracking system that the ticket belongs to
	TicketTrackingSystem []*schema.ObjectRefType `protobuf:"bytes,4,rep,name=ticket_tracking_system,json=ticketTrackingSystem,proto3" json:"ticket_tracking_system,omitempty"`
	// ticket_tracking_system_type
	//
	// x-displayName: "Ticket Tracking System Type"
	// The type of ticket tracking system this ticket belongs to - JIRA, ServiceNow, etc.
	TicketTrackingSystemType ticket_management.TicketTrackingSystemType `protobuf:"varint,5,opt,name=ticket_tracking_system_type,json=ticketTrackingSystemType,proto3,enum=ves.io.schema.ticket_management.TicketTrackingSystemType" json:"ticket_tracking_system_type,omitempty"`
	// ticket
	//
	// x-displayName: "Ticket"
	// The ticket information - Information like issue type / status will be retrieved on the fly
	// (and potentially cached with a small-enough TTL) to stay up to date
	//
	// Types that are valid to be assigned to Ticket:
	//	*TicketResponseSpec_JiraIssue
	Ticket isTicketResponseSpec_Ticket `protobuf_oneof:"ticket"`
}

func (m *TicketResponseSpec) Reset()      { *m = TicketResponseSpec{} }
func (*TicketResponseSpec) ProtoMessage() {}
func (*TicketResponseSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff005f77b13da262, []int{2}
}
func (m *TicketResponseSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TicketResponseSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TicketResponseSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TicketResponseSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TicketResponseSpec.Merge(m, src)
}
func (m *TicketResponseSpec) XXX_Size() int {
	return m.Size()
}
func (m *TicketResponseSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_TicketResponseSpec.DiscardUnknown(m)
}

var xxx_messageInfo_TicketResponseSpec proto.InternalMessageInfo

type isTicketResponseSpec_Ticket interface {
	isTicketResponseSpec_Ticket()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type TicketResponseSpec_JiraIssue struct {
	JiraIssue *ticket_management.JiraIssue `protobuf:"bytes,8,opt,name=jira_issue,json=jiraIssue,proto3,oneof" json:"jira_issue,omitempty"`
}

func (*TicketResponseSpec_JiraIssue) isTicketResponseSpec_Ticket() {}

func (m *TicketResponseSpec) GetTicket() isTicketResponseSpec_Ticket {
	if m != nil {
		return m.Ticket
	}
	return nil
}

func (m *TicketResponseSpec) GetServiceFeature() string {
	if m != nil {
		return m.ServiceFeature
	}
	return ""
}

func (m *TicketResponseSpec) GetExternalId() string {
	if m != nil {
		return m.ExternalId
	}
	return ""
}

func (m *TicketResponseSpec) GetExternalLink() string {
	if m != nil {
		return m.ExternalLink
	}
	return ""
}

func (m *TicketResponseSpec) GetTicketTrackingSystem() []*schema.ObjectRefType {
	if m != nil {
		return m.TicketTrackingSystem
	}
	return nil
}

func (m *TicketResponseSpec) GetTicketTrackingSystemType() ticket_management.TicketTrackingSystemType {
	if m != nil {
		return m.TicketTrackingSystemType
	}
	return ticket_management.TYPE_UNKNOWN
}

func (m *TicketResponseSpec) GetJiraIssue() *ticket_management.JiraIssue {
	if x, ok := m.GetTicket().(*TicketResponseSpec_JiraIssue); ok {
		return x.JiraIssue
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TicketResponseSpec) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TicketResponseSpec_JiraIssue)(nil),
	}
}

// SearchTicketResponse
//
// x-displayName: "Search Ticket Response"
type SearchTicketResponse struct {
	// items
	//
	// x-displayName: "Items"
	// The list of tickets returned in the search query
	Items []*SearchTicketResponseItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *SearchTicketResponse) Reset()      { *m = SearchTicketResponse{} }
func (*SearchTicketResponse) ProtoMessage() {}
func (*SearchTicketResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff005f77b13da262, []int{3}
}
func (m *SearchTicketResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchTicketResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchTicketResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchTicketResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchTicketResponse.Merge(m, src)
}
func (m *SearchTicketResponse) XXX_Size() int {
	return m.Size()
}
func (m *SearchTicketResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchTicketResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SearchTicketResponse proto.InternalMessageInfo

func (m *SearchTicketResponse) GetItems() []*SearchTicketResponseItem {
	if m != nil {
		return m.Items
	}
	return nil
}

// CreateJiraIssueRequest
//
// x-displayName: "Create Jira Issue Request"
type CreateJiraIssueRequest struct {
	// project
	//
	// x-displayName: "Project"
	// x-example: "10001"
	// x-required
	// external ID of the project
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// issue_type
	//
	// x-displayName: "Issue Type"
	// x-example: "Bug"
	// x-required
	// Name of the issue type
	IssueType string `protobuf:"bytes,2,opt,name=issue_type,json=issueType,proto3" json:"issue_type,omitempty"`
	// summary
	//
	// x-displayName: "Summary"
	// x-required
	Summary string `protobuf:"bytes,3,opt,name=summary,proto3" json:"summary,omitempty"`
	// description
	//
	// x-displayName: "Description"
	// Optional description
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *CreateJiraIssueRequest) Reset()      { *m = CreateJiraIssueRequest{} }
func (*CreateJiraIssueRequest) ProtoMessage() {}
func (*CreateJiraIssueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff005f77b13da262, []int{4}
}
func (m *CreateJiraIssueRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateJiraIssueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateJiraIssueRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateJiraIssueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateJiraIssueRequest.Merge(m, src)
}
func (m *CreateJiraIssueRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateJiraIssueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateJiraIssueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateJiraIssueRequest proto.InternalMessageInfo

func (m *CreateJiraIssueRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *CreateJiraIssueRequest) GetIssueType() string {
	if m != nil {
		return m.IssueType
	}
	return ""
}

func (m *CreateJiraIssueRequest) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

func (m *CreateJiraIssueRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

// PrivateCreateTicketRequest
//
// x-displayName: "Private Create Ticket Request"
type PrivateCreateTicketRequest struct {
	// spec
	//
	// x-displayName: "Specification"
	// x-required
	// Specification of the ticket
	Spec *PrivateCreateTicketSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (m *PrivateCreateTicketRequest) Reset()      { *m = PrivateCreateTicketRequest{} }
func (*PrivateCreateTicketRequest) ProtoMessage() {}
func (*PrivateCreateTicketRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff005f77b13da262, []int{5}
}
func (m *PrivateCreateTicketRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivateCreateTicketRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivateCreateTicketRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrivateCreateTicketRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateCreateTicketRequest.Merge(m, src)
}
func (m *PrivateCreateTicketRequest) XXX_Size() int {
	return m.Size()
}
func (m *PrivateCreateTicketRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateCreateTicketRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateCreateTicketRequest proto.InternalMessageInfo

func (m *PrivateCreateTicketRequest) GetSpec() *PrivateCreateTicketSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

// PrivateCreateTicketSpec
//
// x-displayName: "Private Create Ticket Spec"
type PrivateCreateTicketSpec struct {
	// service_feature
	//
	// x-displayName: "Service Feature"
	// x-required
	// A feature type assigned by an XC service to the ticket
	// Eywa will check to make sure that the service daemon initiating the create request is configured with this value
	ServiceFeature string `protobuf:"bytes,1,opt,name=service_feature,json=serviceFeature,proto3" json:"service_feature,omitempty"`
	// labels
	//
	// x-displayName: "Labels"
	// Map of string keys and values that can be used to organize and categorize
	// (scope and select) objects as chosen by the user. Values specified here will be used
	// by selector expression
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// ticket_tracking_system
	//
	// x-displayName: "Ticket Tracking System"
	// x-required
	// The primary identifier (name) of the ticket tracking system system
	TicketTrackingSystem string `protobuf:"bytes,3,opt,name=ticket_tracking_system,json=ticketTrackingSystem,proto3" json:"ticket_tracking_system,omitempty"`
	// namespace
	//
	// x-displayName: "Namespace"
	// Namespace for the ticket
	Namespace string `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// ticket
	//
	// x-displayName: "Ticket"
	// x-required
	// The contents of the ticket to be created
	//
	// Types that are valid to be assigned to Ticket:
	//	*PrivateCreateTicketSpec_JiraIssue
	Ticket isPrivateCreateTicketSpec_Ticket `protobuf_oneof:"ticket"`
}

func (m *PrivateCreateTicketSpec) Reset()      { *m = PrivateCreateTicketSpec{} }
func (*PrivateCreateTicketSpec) ProtoMessage() {}
func (*PrivateCreateTicketSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff005f77b13da262, []int{6}
}
func (m *PrivateCreateTicketSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivateCreateTicketSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivateCreateTicketSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrivateCreateTicketSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateCreateTicketSpec.Merge(m, src)
}
func (m *PrivateCreateTicketSpec) XXX_Size() int {
	return m.Size()
}
func (m *PrivateCreateTicketSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateCreateTicketSpec.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateCreateTicketSpec proto.InternalMessageInfo

type isPrivateCreateTicketSpec_Ticket interface {
	isPrivateCreateTicketSpec_Ticket()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type PrivateCreateTicketSpec_JiraIssue struct {
	JiraIssue *CreateJiraIssueRequest `protobuf:"bytes,6,opt,name=jira_issue,json=jiraIssue,proto3,oneof" json:"jira_issue,omitempty"`
}

func (*PrivateCreateTicketSpec_JiraIssue) isPrivateCreateTicketSpec_Ticket() {}

func (m *PrivateCreateTicketSpec) GetTicket() isPrivateCreateTicketSpec_Ticket {
	if m != nil {
		return m.Ticket
	}
	return nil
}

func (m *PrivateCreateTicketSpec) GetServiceFeature() string {
	if m != nil {
		return m.ServiceFeature
	}
	return ""
}

func (m *PrivateCreateTicketSpec) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *PrivateCreateTicketSpec) GetTicketTrackingSystem() string {
	if m != nil {
		return m.TicketTrackingSystem
	}
	return ""
}

func (m *PrivateCreateTicketSpec) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *PrivateCreateTicketSpec) GetJiraIssue() *CreateJiraIssueRequest {
	if x, ok := m.GetTicket().(*PrivateCreateTicketSpec_JiraIssue); ok {
		return x.JiraIssue
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PrivateCreateTicketSpec) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PrivateCreateTicketSpec_JiraIssue)(nil),
	}
}

// PrivateCreateTicketResponse
//
// x-displayName: "Private Create Ticket Response"
type PrivateCreateTicketResponse struct {
	// metadata
	//
	// x-displayName: "Metadata"
	// If list request has report_fields set then metadata will
	// contain all the metadata associated with the object.
	Metadata *schema.ObjectGetMetaType `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// system_metadata
	//
	// x-displayName: "System Metadata"
	// If list request has report_fields set then system_metadata will
	// contain all the system generated details of this object.
	SystemMetadata *schema.SystemObjectMetaType `protobuf:"bytes,2,opt,name=system_metadata,json=systemMetadata,proto3" json:"system_metadata,omitempty"`
	// spec
	//
	// x-displayName: "Specification"
	// Specification for the ticket
	Spec *TicketResponseSpec `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
	// errors
	//
	// x-displayName: "Errors"
	// Errors related to ticket creation
	Errors []*schema.ErrorType `protobuf:"bytes,4,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (m *PrivateCreateTicketResponse) Reset()      { *m = PrivateCreateTicketResponse{} }
func (*PrivateCreateTicketResponse) ProtoMessage() {}
func (*PrivateCreateTicketResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff005f77b13da262, []int{7}
}
func (m *PrivateCreateTicketResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivateCreateTicketResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivateCreateTicketResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrivateCreateTicketResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateCreateTicketResponse.Merge(m, src)
}
func (m *PrivateCreateTicketResponse) XXX_Size() int {
	return m.Size()
}
func (m *PrivateCreateTicketResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateCreateTicketResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateCreateTicketResponse proto.InternalMessageInfo

func (m *PrivateCreateTicketResponse) GetMetadata() *schema.ObjectGetMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *PrivateCreateTicketResponse) GetSystemMetadata() *schema.SystemObjectMetaType {
	if m != nil {
		return m.SystemMetadata
	}
	return nil
}

func (m *PrivateCreateTicketResponse) GetSpec() *TicketResponseSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *PrivateCreateTicketResponse) GetErrors() []*schema.ErrorType {
	if m != nil {
		return m.Errors
	}
	return nil
}

// UnlinkTicketsRequest
//
// x-displayName: "Unlink Tickets Request"
type UnlinkTicketsRequest struct {
	// Ticket UIDs
	//
	// x-displayName: "Ticket UIDs"
	// The UIDs of the tickets to be unlinked
	TicketUids []string `protobuf:"bytes,1,rep,name=ticket_uids,json=ticketUids,proto3" json:"ticket_uids,omitempty"`
	// Service Feature
	//
	// x-displayName: "Service Feature"
	// Service feature of the tickets to be deleted
	ServiceFeature string `protobuf:"bytes,2,opt,name=service_feature,json=serviceFeature,proto3" json:"service_feature,omitempty"`
}

func (m *UnlinkTicketsRequest) Reset()      { *m = UnlinkTicketsRequest{} }
func (*UnlinkTicketsRequest) ProtoMessage() {}
func (*UnlinkTicketsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff005f77b13da262, []int{8}
}
func (m *UnlinkTicketsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnlinkTicketsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnlinkTicketsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnlinkTicketsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnlinkTicketsRequest.Merge(m, src)
}
func (m *UnlinkTicketsRequest) XXX_Size() int {
	return m.Size()
}
func (m *UnlinkTicketsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UnlinkTicketsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UnlinkTicketsRequest proto.InternalMessageInfo

func (m *UnlinkTicketsRequest) GetTicketUids() []string {
	if m != nil {
		return m.TicketUids
	}
	return nil
}

func (m *UnlinkTicketsRequest) GetServiceFeature() string {
	if m != nil {
		return m.ServiceFeature
	}
	return ""
}

// UnlinkTicketsResponse
//
// x-displayName: "Unlink Tickets Response"
type UnlinkTicketsResponse struct {
}

func (m *UnlinkTicketsResponse) Reset()      { *m = UnlinkTicketsResponse{} }
func (*UnlinkTicketsResponse) ProtoMessage() {}
func (*UnlinkTicketsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff005f77b13da262, []int{9}
}
func (m *UnlinkTicketsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnlinkTicketsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnlinkTicketsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnlinkTicketsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnlinkTicketsResponse.Merge(m, src)
}
func (m *UnlinkTicketsResponse) XXX_Size() int {
	return m.Size()
}
func (m *UnlinkTicketsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UnlinkTicketsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UnlinkTicketsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*SearchTicketRequest)(nil), "ves.io.schema.ticket_management.ticket.SearchTicketRequest")
	golang_proto.RegisterType((*SearchTicketRequest)(nil), "ves.io.schema.ticket_management.ticket.SearchTicketRequest")
	proto.RegisterType((*SearchTicketResponseItem)(nil), "ves.io.schema.ticket_management.ticket.SearchTicketResponseItem")
	golang_proto.RegisterType((*SearchTicketResponseItem)(nil), "ves.io.schema.ticket_management.ticket.SearchTicketResponseItem")
	proto.RegisterType((*TicketResponseSpec)(nil), "ves.io.schema.ticket_management.ticket.TicketResponseSpec")
	golang_proto.RegisterType((*TicketResponseSpec)(nil), "ves.io.schema.ticket_management.ticket.TicketResponseSpec")
	proto.RegisterType((*SearchTicketResponse)(nil), "ves.io.schema.ticket_management.ticket.SearchTicketResponse")
	golang_proto.RegisterType((*SearchTicketResponse)(nil), "ves.io.schema.ticket_management.ticket.SearchTicketResponse")
	proto.RegisterType((*CreateJiraIssueRequest)(nil), "ves.io.schema.ticket_management.ticket.CreateJiraIssueRequest")
	golang_proto.RegisterType((*CreateJiraIssueRequest)(nil), "ves.io.schema.ticket_management.ticket.CreateJiraIssueRequest")
	proto.RegisterType((*PrivateCreateTicketRequest)(nil), "ves.io.schema.ticket_management.ticket.PrivateCreateTicketRequest")
	golang_proto.RegisterType((*PrivateCreateTicketRequest)(nil), "ves.io.schema.ticket_management.ticket.PrivateCreateTicketRequest")
	proto.RegisterType((*PrivateCreateTicketSpec)(nil), "ves.io.schema.ticket_management.ticket.PrivateCreateTicketSpec")
	golang_proto.RegisterType((*PrivateCreateTicketSpec)(nil), "ves.io.schema.ticket_management.ticket.PrivateCreateTicketSpec")
	proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.ticket_management.ticket.PrivateCreateTicketSpec.LabelsEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.ticket_management.ticket.PrivateCreateTicketSpec.LabelsEntry")
	proto.RegisterType((*PrivateCreateTicketResponse)(nil), "ves.io.schema.ticket_management.ticket.PrivateCreateTicketResponse")
	golang_proto.RegisterType((*PrivateCreateTicketResponse)(nil), "ves.io.schema.ticket_management.ticket.PrivateCreateTicketResponse")
	proto.RegisterType((*UnlinkTicketsRequest)(nil), "ves.io.schema.ticket_management.ticket.UnlinkTicketsRequest")
	golang_proto.RegisterType((*UnlinkTicketsRequest)(nil), "ves.io.schema.ticket_management.ticket.UnlinkTicketsRequest")
	proto.RegisterType((*UnlinkTicketsResponse)(nil), "ves.io.schema.ticket_management.ticket.UnlinkTicketsResponse")
	golang_proto.RegisterType((*UnlinkTicketsResponse)(nil), "ves.io.schema.ticket_management.ticket.UnlinkTicketsResponse")
}

func init() {
	proto.RegisterFile("ves.io/schema/ticket_management/ticket/private_customapi.proto", fileDescriptor_ff005f77b13da262)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/ticket_management/ticket/private_customapi.proto", fileDescriptor_ff005f77b13da262)
}

var fileDescriptor_ff005f77b13da262 = []byte{
	// 1162 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x57, 0xcd, 0x6f, 0x1b, 0x45,
	0x14, 0xf7, 0xf8, 0x2b, 0xf6, 0x38, 0x49, 0xa3, 0x21, 0xb4, 0x8b, 0x93, 0x6e, 0xcd, 0x56, 0x94,
	0x28, 0x28, 0xde, 0x2a, 0x50, 0x89, 0xa6, 0xa5, 0x40, 0xa2, 0x16, 0x92, 0xa6, 0xb4, 0x72, 0x52,
	0x0e, 0x08, 0xc9, 0x8c, 0xd7, 0x13, 0x67, 0x62, 0xef, 0x47, 0x67, 0x66, 0x4d, 0x7c, 0x40, 0x20,
	0xee, 0x48, 0x08, 0x24, 0xfe, 0x06, 0x04, 0x27, 0x2e, 0x1c, 0xc8, 0x25, 0x37, 0xe0, 0x16, 0x01,
	0x87, 0xde, 0x20, 0x0e, 0x07, 0xb8, 0xf5, 0xca, 0x0d, 0x79, 0x66, 0xd7, 0x78, 0x1d, 0xbb, 0xb1,
	0x12, 0x89, 0x9b, 0xe7, 0x7d, 0xfc, 0xf6, 0xbd, 0x37, 0xef, 0xf7, 0xe6, 0x19, 0xde, 0x6a, 0x12,
	0x5e, 0xa4, 0xae, 0xc9, 0xad, 0x6d, 0x62, 0x63, 0x53, 0x50, 0xab, 0x4e, 0x44, 0xd9, 0xc6, 0x0e,
	0xae, 0x11, 0x9b, 0x38, 0x22, 0x90, 0x98, 0x1e, 0xa3, 0x4d, 0x2c, 0x48, 0xd9, 0xf2, 0xb9, 0x70,
	0x6d, 0xec, 0xd1, 0xa2, 0xc7, 0x5c, 0xe1, 0xa2, 0x2b, 0xca, 0xbf, 0xa8, 0xfc, 0x8b, 0xc7, 0xfc,
	0x03, 0x49, 0x7e, 0xa1, 0x46, 0xc5, 0xb6, 0x5f, 0x29, 0x5a, 0xae, 0x6d, 0xd6, 0xdc, 0x9a, 0x6b,
	0x4a, 0xf7, 0x8a, 0xbf, 0x25, 0x4f, 0xf2, 0x20, 0x7f, 0x29, 0xd8, 0xfc, 0x6c, 0xcd, 0x75, 0x6b,
	0x0d, 0x62, 0x62, 0x8f, 0x9a, 0xd8, 0x71, 0x5c, 0x81, 0x05, 0x75, 0x1d, 0xde, 0xa7, 0xed, 0x62,
	0x70, 0xc1, 0x7c, 0x4b, 0x04, 0xda, 0x7c, 0x34, 0x25, 0xc2, 0x98, 0xcb, 0x42, 0xcf, 0x99, 0xa8,
	0xce, 0xf5, 0x7a, 0x61, 0x2f, 0x46, 0x95, 0x5e, 0x53, 0x94, 0x45, 0xcb, 0x23, 0xa1, 0x7a, 0x71,
	0xc4, 0x52, 0xf5, 0xfa, 0xbc, 0x74, 0xa2, 0x4f, 0x8f, 0xf1, 0x73, 0x7d, 0xc6, 0x3d, 0xaa, 0xd9,
	0xa8, 0xaa, 0x89, 0x1b, 0xb4, 0x8a, 0x05, 0x09, 0xb4, 0x46, 0x9f, 0x96, 0x70, 0xe2, 0x34, 0xfb,
	0x92, 0x2b, 0xf4, 0xd9, 0x50, 0xf2, 0x61, 0x39, 0x62, 0x61, 0x7c, 0x0c, 0x9f, 0xd9, 0x20, 0x98,
	0x59, 0xdb, 0x9b, 0x32, 0xca, 0x12, 0x79, 0xe4, 0x13, 0x2e, 0xd0, 0x8b, 0xf0, 0x1c, 0x27, 0xac,
	0x49, 0x2d, 0x52, 0xde, 0x22, 0x58, 0xf8, 0x8c, 0x68, 0xa0, 0x00, 0xe6, 0xb2, 0xa5, 0xc9, 0x40,
	0x7c, 0x47, 0x49, 0xd1, 0xf3, 0x70, 0xbc, 0x81, 0x2b, 0xa4, 0x51, 0xde, 0xa2, 0x0d, 0x41, 0x98,
	0x16, 0x97, 0x56, 0x39, 0x29, 0xbb, 0x23, 0x45, 0x68, 0x16, 0x66, 0x1d, 0x6c, 0x13, 0xee, 0x61,
	0x8b, 0x68, 0x49, 0xa9, 0xff, 0x4f, 0x60, 0xfc, 0x03, 0xa0, 0x16, 0x8d, 0x80, 0x7b, 0xae, 0xc3,
	0xc9, 0xaa, 0x20, 0x36, 0xba, 0x09, 0x33, 0x36, 0x11, 0xb8, 0x8a, 0x05, 0x96, 0xdf, 0xcf, 0x2d,
	0x16, 0x8a, 0xd1, 0xde, 0xbb, 0x5f, 0xd9, 0x21, 0x96, 0x78, 0x8b, 0x88, 0x7b, 0x44, 0xe0, 0xcd,
	0x96, 0x47, 0x4a, 0x5d, 0x0f, 0x74, 0x1f, 0x9e, 0xe3, 0x2d, 0x2e, 0x88, 0x5d, 0xee, 0x82, 0xc4,
	0x25, 0xc8, 0x95, 0x3e, 0x90, 0x0d, 0x69, 0x75, 0x1c, 0x6a, 0x52, 0xb9, 0xdf, 0x0b, 0x01, 0xdf,
	0x81, 0x49, 0xee, 0x11, 0x4b, 0x4b, 0x48, 0x94, 0xa5, 0xe2, 0x68, 0x34, 0x28, 0x46, 0x13, 0xdb,
	0xf0, 0x88, 0x55, 0x92, 0x38, 0xc6, 0xef, 0x09, 0x88, 0x8e, 0x2b, 0x47, 0x2f, 0xfe, 0x25, 0x98,
	0x23, 0xbb, 0x82, 0x30, 0x07, 0x37, 0xca, 0xb4, 0x1a, 0xd4, 0x1e, 0x86, 0xa2, 0xd5, 0x2a, 0xba,
	0x0c, 0x27, 0xba, 0x06, 0x0d, 0xea, 0xd4, 0x65, 0xe4, 0xd9, 0xd2, 0x78, 0x28, 0x5c, 0xa7, 0x4e,
	0x1d, 0xb5, 0xe0, 0xf9, 0x20, 0x74, 0xc1, 0xb0, 0x55, 0xa7, 0x4e, 0xad, 0xac, 0xf2, 0xd6, 0x92,
	0x85, 0xc4, 0x5c, 0x6e, 0x71, 0x76, 0x60, 0xc9, 0x4b, 0x64, 0xab, 0x53, 0xa3, 0xe5, 0x17, 0xbe,
	0xf9, 0x68, 0x88, 0xfb, 0x0f, 0x7f, 0xef, 0x27, 0xc6, 0xbe, 0x00, 0xc9, 0x0c, 0x98, 0x02, 0xa5,
	0x69, 0x65, 0xb3, 0x19, 0x98, 0xa8, 0x8a, 0xa3, 0x5d, 0x38, 0x33, 0xd8, 0x57, 0x72, 0x50, 0x4b,
	0x15, 0xc0, 0xdc, 0xe4, 0xe2, 0xf5, 0x13, 0xeb, 0xbc, 0x39, 0x00, 0x5b, 0x5e, 0xa0, 0x26, 0x86,
	0x68, 0xd0, 0x5d, 0x08, 0x77, 0x28, 0xc3, 0x65, 0xca, 0xb9, 0x4f, 0xb4, 0x8c, 0xbc, 0xd0, 0xf9,
	0x13, 0x3f, 0xb4, 0x46, 0x19, 0x5e, 0xed, 0x78, 0xbc, 0x1d, 0x2b, 0x65, 0x77, 0xc2, 0xc3, 0x32,
	0x82, 0x69, 0x65, 0x8b, 0x32, 0xfb, 0x7b, 0x20, 0x73, 0xb0, 0x07, 0xc6, 0xd6, 0x92, 0x99, 0xf4,
	0xd4, 0x98, 0xe1, 0xc0, 0xe9, 0x41, 0xcd, 0x8d, 0xde, 0x85, 0x29, 0x2a, 0x88, 0xcd, 0x35, 0x20,
	0x4b, 0xfc, 0xc6, 0xa8, 0xad, 0x34, 0x8c, 0x29, 0x25, 0x05, 0x67, 0x7c, 0x06, 0xe0, 0xf9, 0x15,
	0x46, 0xb0, 0x20, 0xdd, 0x50, 0x43, 0x4a, 0x6b, 0x70, 0xcc, 0x63, 0x6e, 0xe7, 0xea, 0x82, 0x6e,
	0x0a, 0x8f, 0xe8, 0x22, 0x84, 0xb2, 0x0c, 0xaa, 0xe8, 0xaa, 0x8b, 0xb2, 0x52, 0x22, 0x4b, 0xa5,
	0xc1, 0x31, 0xee, 0xdb, 0x36, 0x66, 0xad, 0xa0, 0x7d, 0xc2, 0x23, 0x2a, 0xc0, 0x5c, 0x95, 0x70,
	0x8b, 0x51, 0x39, 0x52, 0x02, 0x6e, 0xf7, 0x8a, 0x8c, 0x47, 0x30, 0xff, 0x40, 0x3d, 0x22, 0x2a,
	0xaa, 0xe8, 0x94, 0xd9, 0x08, 0xf8, 0xa4, 0x58, 0xf9, 0xfa, 0xa8, 0x45, 0x18, 0x80, 0xd8, 0x43,
	0xaa, 0xef, 0x12, 0xf0, 0xc2, 0x10, 0x8b, 0xd1, 0x99, 0x65, 0xc1, 0xb4, 0x1c, 0x61, 0x5c, 0x8b,
	0xcb, 0x0b, 0xba, 0x7b, 0xc6, 0xd8, 0x8a, 0xeb, 0x12, 0xed, 0xb6, 0x23, 0x58, 0xab, 0x14, 0x40,
	0xa3, 0x57, 0x86, 0x12, 0x4f, 0xd5, 0x79, 0x30, 0x67, 0x9e, 0x3a, 0x4e, 0x51, 0x39, 0xd2, 0xd7,
	0x69, 0x59, 0xd8, 0x5b, 0xa3, 0x06, 0x3f, 0xb8, 0x73, 0x22, 0xbd, 0x9e, 0xbf, 0x0e, 0x73, 0x3d,
	0xb9, 0xa0, 0x29, 0x98, 0xa8, 0x93, 0x56, 0x50, 0xc5, 0xce, 0x4f, 0x34, 0x0d, 0x53, 0x4d, 0xdc,
	0xf0, 0xc3, 0x46, 0x52, 0x87, 0xa5, 0xf8, 0xab, 0xa0, 0x8f, 0x26, 0xe9, 0x83, 0x3d, 0x90, 0x5a,
	0x4b, 0x66, 0x52, 0x53, 0x69, 0xe3, 0xdb, 0x38, 0x9c, 0x19, 0xd8, 0x27, 0x01, 0x5d, 0xce, 0xf6,
	0x0e, 0xac, 0x0f, 0x7b, 0x07, 0x2e, 0x3f, 0xe5, 0x1d, 0xf8, 0xbf, 0x1e, 0x01, 0x74, 0x15, 0xa6,
	0xd5, 0xb6, 0x12, 0x8c, 0x5b, 0xad, 0x0f, 0xf1, 0x76, 0x47, 0x29, 0x23, 0x09, 0xec, 0x8c, 0x0f,
	0xe0, 0xf4, 0x43, 0xa7, 0x33, 0xce, 0x15, 0x26, 0x0f, 0xe9, 0x74, 0x09, 0xe6, 0x82, 0xcf, 0xfb,
	0xb4, 0xaa, 0x46, 0x4b, 0xb6, 0x04, 0x95, 0xe8, 0x21, 0xad, 0xf2, 0x41, 0xed, 0x1f, 0x1f, 0xd4,
	0xfe, 0xc6, 0x05, 0xf8, 0x6c, 0xdf, 0x17, 0x54, 0xd8, 0x8b, 0xdf, 0xa7, 0xe0, 0xd4, 0x8a, 0xdc,
	0x06, 0x83, 0xeb, 0x7a, 0xf3, 0xc1, 0x2a, 0xfa, 0x11, 0xc0, 0x89, 0xde, 0xc1, 0xc4, 0xd1, 0x8d,
	0xd3, 0xcd, 0x33, 0x99, 0x46, 0xfe, 0xe6, 0x59, 0x86, 0xa1, 0x71, 0xe3, 0xd3, 0x5f, 0xff, 0xfc,
	0x32, 0x7e, 0xcd, 0xb8, 0x1a, 0x6e, 0xaf, 0xa6, 0xda, 0x5e, 0xcd, 0x2e, 0x47, 0xb8, 0xa9, 0x6e,
	0x34, 0x58, 0xcc, 0xb8, 0xc9, 0x25, 0xce, 0x12, 0x98, 0x47, 0xbf, 0x01, 0x38, 0xde, 0xdb, 0x80,
	0x68, 0xf9, 0x0c, 0xbc, 0x0f, 0xf3, 0x59, 0x39, 0x13, 0xc6, 0xe9, 0xd3, 0xb2, 0x24, 0x4e, 0x27,
	0xad, 0x9f, 0x01, 0x9c, 0x88, 0xdc, 0x27, 0x1a, 0xb9, 0xc6, 0x83, 0x1a, 0x2d, 0xff, 0xda, 0x29,
	0xbd, 0x4f, 0x9f, 0x8b, 0x2f, 0x81, 0x96, 0xc0, 0x7c, 0xfe, 0xda, 0xfe, 0x1e, 0x48, 0xfe, 0xb2,
	0x07, 0x16, 0x46, 0x0c, 0x41, 0xb1, 0x79, 0xf9, 0x2b, 0x70, 0x70, 0xa8, 0xc7, 0x1e, 0x1f, 0xea,
	0xb1, 0x27, 0x87, 0x3a, 0xf8, 0xa4, 0xad, 0x83, 0xaf, 0xdb, 0x3a, 0xf8, 0xa9, 0xad, 0x83, 0x83,
	0xb6, 0x0e, 0xfe, 0x68, 0xeb, 0xe0, 0xaf, 0xb6, 0x1e, 0x7b, 0xd2, 0xd6, 0xc1, 0xe7, 0x47, 0x7a,
	0x6c, 0xff, 0x48, 0x07, 0x07, 0x47, 0x7a, 0xec, 0xf1, 0x91, 0x1e, 0x7b, 0xef, 0xfd, 0x9a, 0xeb,
	0xd5, 0x6b, 0xc5, 0xa6, 0xdb, 0xd9, 0x66, 0x19, 0x2e, 0xfa, 0xdc, 0x94, 0x3f, 0xb6, 0x5c, 0x66,
	0x2f, 0x78, 0xcc, 0x6d, 0xd2, 0x2a, 0x61, 0x0b, 0xa1, 0xda, 0xf4, 0x2a, 0x35, 0xd7, 0x24, 0xbb,
	0x22, 0xd8, 0xb9, 0x4f, 0xf8, 0xe3, 0x50, 0x49, 0xcb, 0x3d, 0xfc, 0xe5, 0x7f, 0x03, 0x00, 0x00,
	0xff, 0xff, 0xd5, 0xe0, 0xcf, 0x53, 0x94, 0x0d, 0x00, 0x00,
}

func (this *SearchTicketRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SearchTicketRequest)
	if !ok {
		that2, ok := that.(SearchTicketRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ServiceFeature != that1.ServiceFeature {
		return false
	}
	if this.LabelFilter != that1.LabelFilter {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	return true
}
func (this *SearchTicketResponseItem) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SearchTicketResponseItem)
	if !ok {
		that2, ok := that.(SearchTicketResponseItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if !this.SystemMetadata.Equal(that1.SystemMetadata) {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	return true
}
func (this *TicketResponseSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TicketResponseSpec)
	if !ok {
		that2, ok := that.(TicketResponseSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ServiceFeature != that1.ServiceFeature {
		return false
	}
	if this.ExternalId != that1.ExternalId {
		return false
	}
	if this.ExternalLink != that1.ExternalLink {
		return false
	}
	if len(this.TicketTrackingSystem) != len(that1.TicketTrackingSystem) {
		return false
	}
	for i := range this.TicketTrackingSystem {
		if !this.TicketTrackingSystem[i].Equal(that1.TicketTrackingSystem[i]) {
			return false
		}
	}
	if this.TicketTrackingSystemType != that1.TicketTrackingSystemType {
		return false
	}
	if that1.Ticket == nil {
		if this.Ticket != nil {
			return false
		}
	} else if this.Ticket == nil {
		return false
	} else if !this.Ticket.Equal(that1.Ticket) {
		return false
	}
	return true
}
func (this *TicketResponseSpec_JiraIssue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TicketResponseSpec_JiraIssue)
	if !ok {
		that2, ok := that.(TicketResponseSpec_JiraIssue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JiraIssue.Equal(that1.JiraIssue) {
		return false
	}
	return true
}
func (this *SearchTicketResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SearchTicketResponse)
	if !ok {
		that2, ok := that.(SearchTicketResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if !this.Items[i].Equal(that1.Items[i]) {
			return false
		}
	}
	return true
}
func (this *CreateJiraIssueRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateJiraIssueRequest)
	if !ok {
		that2, ok := that.(CreateJiraIssueRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Project != that1.Project {
		return false
	}
	if this.IssueType != that1.IssueType {
		return false
	}
	if this.Summary != that1.Summary {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	return true
}
func (this *PrivateCreateTicketRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PrivateCreateTicketRequest)
	if !ok {
		that2, ok := that.(PrivateCreateTicketRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	return true
}
func (this *PrivateCreateTicketSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PrivateCreateTicketSpec)
	if !ok {
		that2, ok := that.(PrivateCreateTicketSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ServiceFeature != that1.ServiceFeature {
		return false
	}
	if len(this.Labels) != len(that1.Labels) {
		return false
	}
	for i := range this.Labels {
		if this.Labels[i] != that1.Labels[i] {
			return false
		}
	}
	if this.TicketTrackingSystem != that1.TicketTrackingSystem {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if that1.Ticket == nil {
		if this.Ticket != nil {
			return false
		}
	} else if this.Ticket == nil {
		return false
	} else if !this.Ticket.Equal(that1.Ticket) {
		return false
	}
	return true
}
func (this *PrivateCreateTicketSpec_JiraIssue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PrivateCreateTicketSpec_JiraIssue)
	if !ok {
		that2, ok := that.(PrivateCreateTicketSpec_JiraIssue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JiraIssue.Equal(that1.JiraIssue) {
		return false
	}
	return true
}
func (this *PrivateCreateTicketResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PrivateCreateTicketResponse)
	if !ok {
		that2, ok := that.(PrivateCreateTicketResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if !this.SystemMetadata.Equal(that1.SystemMetadata) {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	if len(this.Errors) != len(that1.Errors) {
		return false
	}
	for i := range this.Errors {
		if !this.Errors[i].Equal(that1.Errors[i]) {
			return false
		}
	}
	return true
}
func (this *UnlinkTicketsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UnlinkTicketsRequest)
	if !ok {
		that2, ok := that.(UnlinkTicketsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.TicketUids) != len(that1.TicketUids) {
		return false
	}
	for i := range this.TicketUids {
		if this.TicketUids[i] != that1.TicketUids[i] {
			return false
		}
	}
	if this.ServiceFeature != that1.ServiceFeature {
		return false
	}
	return true
}
func (this *UnlinkTicketsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UnlinkTicketsResponse)
	if !ok {
		that2, ok := that.(UnlinkTicketsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SearchTicketRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ticket.SearchTicketRequest{")
	s = append(s, "ServiceFeature: "+fmt.Sprintf("%#v", this.ServiceFeature)+",\n")
	s = append(s, "LabelFilter: "+fmt.Sprintf("%#v", this.LabelFilter)+",\n")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SearchTicketResponseItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ticket.SearchTicketResponseItem{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.SystemMetadata != nil {
		s = append(s, "SystemMetadata: "+fmt.Sprintf("%#v", this.SystemMetadata)+",\n")
	}
	if this.Spec != nil {
		s = append(s, "Spec: "+fmt.Sprintf("%#v", this.Spec)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TicketResponseSpec) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&ticket.TicketResponseSpec{")
	s = append(s, "ServiceFeature: "+fmt.Sprintf("%#v", this.ServiceFeature)+",\n")
	s = append(s, "ExternalId: "+fmt.Sprintf("%#v", this.ExternalId)+",\n")
	s = append(s, "ExternalLink: "+fmt.Sprintf("%#v", this.ExternalLink)+",\n")
	if this.TicketTrackingSystem != nil {
		s = append(s, "TicketTrackingSystem: "+fmt.Sprintf("%#v", this.TicketTrackingSystem)+",\n")
	}
	s = append(s, "TicketTrackingSystemType: "+fmt.Sprintf("%#v", this.TicketTrackingSystemType)+",\n")
	if this.Ticket != nil {
		s = append(s, "Ticket: "+fmt.Sprintf("%#v", this.Ticket)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TicketResponseSpec_JiraIssue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ticket.TicketResponseSpec_JiraIssue{` +
		`JiraIssue:` + fmt.Sprintf("%#v", this.JiraIssue) + `}`}, ", ")
	return s
}
func (this *SearchTicketResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&ticket.SearchTicketResponse{")
	if this.Items != nil {
		s = append(s, "Items: "+fmt.Sprintf("%#v", this.Items)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateJiraIssueRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&ticket.CreateJiraIssueRequest{")
	s = append(s, "Project: "+fmt.Sprintf("%#v", this.Project)+",\n")
	s = append(s, "IssueType: "+fmt.Sprintf("%#v", this.IssueType)+",\n")
	s = append(s, "Summary: "+fmt.Sprintf("%#v", this.Summary)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PrivateCreateTicketRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&ticket.PrivateCreateTicketRequest{")
	if this.Spec != nil {
		s = append(s, "Spec: "+fmt.Sprintf("%#v", this.Spec)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PrivateCreateTicketSpec) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&ticket.PrivateCreateTicketSpec{")
	s = append(s, "ServiceFeature: "+fmt.Sprintf("%#v", this.ServiceFeature)+",\n")
	keysForLabels := make([]string, 0, len(this.Labels))
	for k, _ := range this.Labels {
		keysForLabels = append(keysForLabels, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLabels)
	mapStringForLabels := "map[string]string{"
	for _, k := range keysForLabels {
		mapStringForLabels += fmt.Sprintf("%#v: %#v,", k, this.Labels[k])
	}
	mapStringForLabels += "}"
	if this.Labels != nil {
		s = append(s, "Labels: "+mapStringForLabels+",\n")
	}
	s = append(s, "TicketTrackingSystem: "+fmt.Sprintf("%#v", this.TicketTrackingSystem)+",\n")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	if this.Ticket != nil {
		s = append(s, "Ticket: "+fmt.Sprintf("%#v", this.Ticket)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PrivateCreateTicketSpec_JiraIssue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ticket.PrivateCreateTicketSpec_JiraIssue{` +
		`JiraIssue:` + fmt.Sprintf("%#v", this.JiraIssue) + `}`}, ", ")
	return s
}
func (this *PrivateCreateTicketResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&ticket.PrivateCreateTicketResponse{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.SystemMetadata != nil {
		s = append(s, "SystemMetadata: "+fmt.Sprintf("%#v", this.SystemMetadata)+",\n")
	}
	if this.Spec != nil {
		s = append(s, "Spec: "+fmt.Sprintf("%#v", this.Spec)+",\n")
	}
	if this.Errors != nil {
		s = append(s, "Errors: "+fmt.Sprintf("%#v", this.Errors)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UnlinkTicketsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ticket.UnlinkTicketsRequest{")
	s = append(s, "TicketUids: "+fmt.Sprintf("%#v", this.TicketUids)+",\n")
	s = append(s, "ServiceFeature: "+fmt.Sprintf("%#v", this.ServiceFeature)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UnlinkTicketsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&ticket.UnlinkTicketsResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPrivateCustomapi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CustomPrivateAPIClient is the client API for CustomPrivateAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomPrivateAPIClient interface {
	// SearchTickets
	//
	// x-displayName: "Search Tickets"
	// Private API for XC services to retrieve tickets for a given tenant / service feature
	SearchTickets(ctx context.Context, in *SearchTicketRequest, opts ...grpc.CallOption) (*SearchTicketResponse, error)
	// CreateTicket
	//
	// x-displayName: "Create Ticket"
	// Private API to create a Ticket
	CreateTicket(ctx context.Context, in *PrivateCreateTicketRequest, opts ...grpc.CallOption) (*PrivateCreateTicketResponse, error)
	// UnlinkTickets
	//
	// x-displayName: "Unlink Tickets"
	// Private API to unlink Tickets - called when "unlinking" Tickets in the UI
	// This RPC only deletes Ticket objects from within XC's local ticket tracking system object,
	// it does NOT delete the tickets from the external ticket tracking system.
	UnlinkTickets(ctx context.Context, in *UnlinkTicketsRequest, opts ...grpc.CallOption) (*UnlinkTicketsResponse, error)
}

type customPrivateAPIClient struct {
	cc *grpc.ClientConn
}

func NewCustomPrivateAPIClient(cc *grpc.ClientConn) CustomPrivateAPIClient {
	return &customPrivateAPIClient{cc}
}

func (c *customPrivateAPIClient) SearchTickets(ctx context.Context, in *SearchTicketRequest, opts ...grpc.CallOption) (*SearchTicketResponse, error) {
	out := new(SearchTicketResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.ticket_management.ticket.CustomPrivateAPI/SearchTickets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customPrivateAPIClient) CreateTicket(ctx context.Context, in *PrivateCreateTicketRequest, opts ...grpc.CallOption) (*PrivateCreateTicketResponse, error) {
	out := new(PrivateCreateTicketResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.ticket_management.ticket.CustomPrivateAPI/CreateTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customPrivateAPIClient) UnlinkTickets(ctx context.Context, in *UnlinkTicketsRequest, opts ...grpc.CallOption) (*UnlinkTicketsResponse, error) {
	out := new(UnlinkTicketsResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.ticket_management.ticket.CustomPrivateAPI/UnlinkTickets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomPrivateAPIServer is the server API for CustomPrivateAPI service.
type CustomPrivateAPIServer interface {
	// SearchTickets
	//
	// x-displayName: "Search Tickets"
	// Private API for XC services to retrieve tickets for a given tenant / service feature
	SearchTickets(context.Context, *SearchTicketRequest) (*SearchTicketResponse, error)
	// CreateTicket
	//
	// x-displayName: "Create Ticket"
	// Private API to create a Ticket
	CreateTicket(context.Context, *PrivateCreateTicketRequest) (*PrivateCreateTicketResponse, error)
	// UnlinkTickets
	//
	// x-displayName: "Unlink Tickets"
	// Private API to unlink Tickets - called when "unlinking" Tickets in the UI
	// This RPC only deletes Ticket objects from within XC's local ticket tracking system object,
	// it does NOT delete the tickets from the external ticket tracking system.
	UnlinkTickets(context.Context, *UnlinkTicketsRequest) (*UnlinkTicketsResponse, error)
}

// UnimplementedCustomPrivateAPIServer can be embedded to have forward compatible implementations.
type UnimplementedCustomPrivateAPIServer struct {
}

func (*UnimplementedCustomPrivateAPIServer) SearchTickets(ctx context.Context, req *SearchTicketRequest) (*SearchTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchTickets not implemented")
}
func (*UnimplementedCustomPrivateAPIServer) CreateTicket(ctx context.Context, req *PrivateCreateTicketRequest) (*PrivateCreateTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTicket not implemented")
}
func (*UnimplementedCustomPrivateAPIServer) UnlinkTickets(ctx context.Context, req *UnlinkTicketsRequest) (*UnlinkTicketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlinkTickets not implemented")
}

func RegisterCustomPrivateAPIServer(s *grpc.Server, srv CustomPrivateAPIServer) {
	s.RegisterService(&_CustomPrivateAPI_serviceDesc, srv)
}

func _CustomPrivateAPI_SearchTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomPrivateAPIServer).SearchTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.ticket_management.ticket.CustomPrivateAPI/SearchTickets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomPrivateAPIServer).SearchTickets(ctx, req.(*SearchTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomPrivateAPI_CreateTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateCreateTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomPrivateAPIServer).CreateTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.ticket_management.ticket.CustomPrivateAPI/CreateTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomPrivateAPIServer).CreateTicket(ctx, req.(*PrivateCreateTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomPrivateAPI_UnlinkTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlinkTicketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomPrivateAPIServer).UnlinkTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.ticket_management.ticket.CustomPrivateAPI/UnlinkTickets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomPrivateAPIServer).UnlinkTickets(ctx, req.(*UnlinkTicketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomPrivateAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.ticket_management.ticket.CustomPrivateAPI",
	HandlerType: (*CustomPrivateAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchTickets",
			Handler:    _CustomPrivateAPI_SearchTickets_Handler,
		},
		{
			MethodName: "CreateTicket",
			Handler:    _CustomPrivateAPI_CreateTicket_Handler,
		},
		{
			MethodName: "UnlinkTickets",
			Handler:    _CustomPrivateAPI_UnlinkTickets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/ticket_management/ticket/private_customapi.proto",
}

func (m *SearchTicketRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchTicketRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchTicketRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPrivateCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.LabelFilter) > 0 {
		i -= len(m.LabelFilter)
		copy(dAtA[i:], m.LabelFilter)
		i = encodeVarintPrivateCustomapi(dAtA, i, uint64(len(m.LabelFilter)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ServiceFeature) > 0 {
		i -= len(m.ServiceFeature)
		copy(dAtA[i:], m.ServiceFeature)
		i = encodeVarintPrivateCustomapi(dAtA, i, uint64(len(m.ServiceFeature)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SearchTicketResponseItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchTicketResponseItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchTicketResponseItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPrivateCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.SystemMetadata != nil {
		{
			size, err := m.SystemMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPrivateCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPrivateCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TicketResponseSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TicketResponseSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TicketResponseSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ticket != nil {
		{
			size := m.Ticket.Size()
			i -= size
			if _, err := m.Ticket.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.TicketTrackingSystemType != 0 {
		i = encodeVarintPrivateCustomapi(dAtA, i, uint64(m.TicketTrackingSystemType))
		i--
		dAtA[i] = 0x28
	}
	if len(m.TicketTrackingSystem) > 0 {
		for iNdEx := len(m.TicketTrackingSystem) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TicketTrackingSystem[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPrivateCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ExternalLink) > 0 {
		i -= len(m.ExternalLink)
		copy(dAtA[i:], m.ExternalLink)
		i = encodeVarintPrivateCustomapi(dAtA, i, uint64(len(m.ExternalLink)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ExternalId) > 0 {
		i -= len(m.ExternalId)
		copy(dAtA[i:], m.ExternalId)
		i = encodeVarintPrivateCustomapi(dAtA, i, uint64(len(m.ExternalId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ServiceFeature) > 0 {
		i -= len(m.ServiceFeature)
		copy(dAtA[i:], m.ServiceFeature)
		i = encodeVarintPrivateCustomapi(dAtA, i, uint64(len(m.ServiceFeature)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TicketResponseSpec_JiraIssue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TicketResponseSpec_JiraIssue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.JiraIssue != nil {
		{
			size, err := m.JiraIssue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPrivateCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *SearchTicketResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchTicketResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchTicketResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPrivateCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateJiraIssueRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateJiraIssueRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateJiraIssueRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintPrivateCustomapi(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Summary) > 0 {
		i -= len(m.Summary)
		copy(dAtA[i:], m.Summary)
		i = encodeVarintPrivateCustomapi(dAtA, i, uint64(len(m.Summary)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.IssueType) > 0 {
		i -= len(m.IssueType)
		copy(dAtA[i:], m.IssueType)
		i = encodeVarintPrivateCustomapi(dAtA, i, uint64(len(m.IssueType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Project) > 0 {
		i -= len(m.Project)
		copy(dAtA[i:], m.Project)
		i = encodeVarintPrivateCustomapi(dAtA, i, uint64(len(m.Project)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PrivateCreateTicketRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivateCreateTicketRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivateCreateTicketRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPrivateCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *PrivateCreateTicketSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivateCreateTicketSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivateCreateTicketSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ticket != nil {
		{
			size := m.Ticket.Size()
			i -= size
			if _, err := m.Ticket.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPrivateCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TicketTrackingSystem) > 0 {
		i -= len(m.TicketTrackingSystem)
		copy(dAtA[i:], m.TicketTrackingSystem)
		i = encodeVarintPrivateCustomapi(dAtA, i, uint64(len(m.TicketTrackingSystem)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Labels) > 0 {
		for k := range m.Labels {
			v := m.Labels[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintPrivateCustomapi(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPrivateCustomapi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPrivateCustomapi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ServiceFeature) > 0 {
		i -= len(m.ServiceFeature)
		copy(dAtA[i:], m.ServiceFeature)
		i = encodeVarintPrivateCustomapi(dAtA, i, uint64(len(m.ServiceFeature)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PrivateCreateTicketSpec_JiraIssue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivateCreateTicketSpec_JiraIssue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.JiraIssue != nil {
		{
			size, err := m.JiraIssue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPrivateCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *PrivateCreateTicketResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivateCreateTicketResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivateCreateTicketResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Errors) > 0 {
		for iNdEx := len(m.Errors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Errors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPrivateCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPrivateCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.SystemMetadata != nil {
		{
			size, err := m.SystemMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPrivateCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPrivateCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UnlinkTicketsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnlinkTicketsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnlinkTicketsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ServiceFeature) > 0 {
		i -= len(m.ServiceFeature)
		copy(dAtA[i:], m.ServiceFeature)
		i = encodeVarintPrivateCustomapi(dAtA, i, uint64(len(m.ServiceFeature)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TicketUids) > 0 {
		for iNdEx := len(m.TicketUids) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TicketUids[iNdEx])
			copy(dAtA[i:], m.TicketUids[iNdEx])
			i = encodeVarintPrivateCustomapi(dAtA, i, uint64(len(m.TicketUids[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UnlinkTicketsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnlinkTicketsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnlinkTicketsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintPrivateCustomapi(dAtA []byte, offset int, v uint64) int {
	offset -= sovPrivateCustomapi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SearchTicketRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServiceFeature)
	if l > 0 {
		n += 1 + l + sovPrivateCustomapi(uint64(l))
	}
	l = len(m.LabelFilter)
	if l > 0 {
		n += 1 + l + sovPrivateCustomapi(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPrivateCustomapi(uint64(l))
	}
	return n
}

func (m *SearchTicketResponseItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovPrivateCustomapi(uint64(l))
	}
	if m.SystemMetadata != nil {
		l = m.SystemMetadata.Size()
		n += 1 + l + sovPrivateCustomapi(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovPrivateCustomapi(uint64(l))
	}
	return n
}

func (m *TicketResponseSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServiceFeature)
	if l > 0 {
		n += 1 + l + sovPrivateCustomapi(uint64(l))
	}
	l = len(m.ExternalId)
	if l > 0 {
		n += 1 + l + sovPrivateCustomapi(uint64(l))
	}
	l = len(m.ExternalLink)
	if l > 0 {
		n += 1 + l + sovPrivateCustomapi(uint64(l))
	}
	if len(m.TicketTrackingSystem) > 0 {
		for _, e := range m.TicketTrackingSystem {
			l = e.Size()
			n += 1 + l + sovPrivateCustomapi(uint64(l))
		}
	}
	if m.TicketTrackingSystemType != 0 {
		n += 1 + sovPrivateCustomapi(uint64(m.TicketTrackingSystemType))
	}
	if m.Ticket != nil {
		n += m.Ticket.Size()
	}
	return n
}

func (m *TicketResponseSpec_JiraIssue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JiraIssue != nil {
		l = m.JiraIssue.Size()
		n += 1 + l + sovPrivateCustomapi(uint64(l))
	}
	return n
}
func (m *SearchTicketResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovPrivateCustomapi(uint64(l))
		}
	}
	return n
}

func (m *CreateJiraIssueRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Project)
	if l > 0 {
		n += 1 + l + sovPrivateCustomapi(uint64(l))
	}
	l = len(m.IssueType)
	if l > 0 {
		n += 1 + l + sovPrivateCustomapi(uint64(l))
	}
	l = len(m.Summary)
	if l > 0 {
		n += 1 + l + sovPrivateCustomapi(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovPrivateCustomapi(uint64(l))
	}
	return n
}

func (m *PrivateCreateTicketRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovPrivateCustomapi(uint64(l))
	}
	return n
}

func (m *PrivateCreateTicketSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServiceFeature)
	if l > 0 {
		n += 1 + l + sovPrivateCustomapi(uint64(l))
	}
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovPrivateCustomapi(uint64(len(k))) + 1 + len(v) + sovPrivateCustomapi(uint64(len(v)))
			n += mapEntrySize + 1 + sovPrivateCustomapi(uint64(mapEntrySize))
		}
	}
	l = len(m.TicketTrackingSystem)
	if l > 0 {
		n += 1 + l + sovPrivateCustomapi(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPrivateCustomapi(uint64(l))
	}
	if m.Ticket != nil {
		n += m.Ticket.Size()
	}
	return n
}

func (m *PrivateCreateTicketSpec_JiraIssue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JiraIssue != nil {
		l = m.JiraIssue.Size()
		n += 1 + l + sovPrivateCustomapi(uint64(l))
	}
	return n
}
func (m *PrivateCreateTicketResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovPrivateCustomapi(uint64(l))
	}
	if m.SystemMetadata != nil {
		l = m.SystemMetadata.Size()
		n += 1 + l + sovPrivateCustomapi(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovPrivateCustomapi(uint64(l))
	}
	if len(m.Errors) > 0 {
		for _, e := range m.Errors {
			l = e.Size()
			n += 1 + l + sovPrivateCustomapi(uint64(l))
		}
	}
	return n
}

func (m *UnlinkTicketsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TicketUids) > 0 {
		for _, s := range m.TicketUids {
			l = len(s)
			n += 1 + l + sovPrivateCustomapi(uint64(l))
		}
	}
	l = len(m.ServiceFeature)
	if l > 0 {
		n += 1 + l + sovPrivateCustomapi(uint64(l))
	}
	return n
}

func (m *UnlinkTicketsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovPrivateCustomapi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPrivateCustomapi(x uint64) (n int) {
	return sovPrivateCustomapi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SearchTicketRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SearchTicketRequest{`,
		`ServiceFeature:` + fmt.Sprintf("%v", this.ServiceFeature) + `,`,
		`LabelFilter:` + fmt.Sprintf("%v", this.LabelFilter) + `,`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchTicketResponseItem) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SearchTicketResponseItem{`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "ObjectGetMetaType", "schema.ObjectGetMetaType", 1) + `,`,
		`SystemMetadata:` + strings.Replace(fmt.Sprintf("%v", this.SystemMetadata), "SystemObjectGetMetaType", "schema.SystemObjectGetMetaType", 1) + `,`,
		`Spec:` + strings.Replace(this.Spec.String(), "TicketResponseSpec", "TicketResponseSpec", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TicketResponseSpec) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTicketTrackingSystem := "[]*ObjectRefType{"
	for _, f := range this.TicketTrackingSystem {
		repeatedStringForTicketTrackingSystem += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForTicketTrackingSystem += "}"
	s := strings.Join([]string{`&TicketResponseSpec{`,
		`ServiceFeature:` + fmt.Sprintf("%v", this.ServiceFeature) + `,`,
		`ExternalId:` + fmt.Sprintf("%v", this.ExternalId) + `,`,
		`ExternalLink:` + fmt.Sprintf("%v", this.ExternalLink) + `,`,
		`TicketTrackingSystem:` + repeatedStringForTicketTrackingSystem + `,`,
		`TicketTrackingSystemType:` + fmt.Sprintf("%v", this.TicketTrackingSystemType) + `,`,
		`Ticket:` + fmt.Sprintf("%v", this.Ticket) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TicketResponseSpec_JiraIssue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TicketResponseSpec_JiraIssue{`,
		`JiraIssue:` + strings.Replace(fmt.Sprintf("%v", this.JiraIssue), "JiraIssue", "ticket_management.JiraIssue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchTicketResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]*SearchTicketResponseItem{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(f.String(), "SearchTicketResponseItem", "SearchTicketResponseItem", 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&SearchTicketResponse{`,
		`Items:` + repeatedStringForItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateJiraIssueRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateJiraIssueRequest{`,
		`Project:` + fmt.Sprintf("%v", this.Project) + `,`,
		`IssueType:` + fmt.Sprintf("%v", this.IssueType) + `,`,
		`Summary:` + fmt.Sprintf("%v", this.Summary) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PrivateCreateTicketRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PrivateCreateTicketRequest{`,
		`Spec:` + strings.Replace(this.Spec.String(), "PrivateCreateTicketSpec", "PrivateCreateTicketSpec", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PrivateCreateTicketSpec) String() string {
	if this == nil {
		return "nil"
	}
	keysForLabels := make([]string, 0, len(this.Labels))
	for k, _ := range this.Labels {
		keysForLabels = append(keysForLabels, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLabels)
	mapStringForLabels := "map[string]string{"
	for _, k := range keysForLabels {
		mapStringForLabels += fmt.Sprintf("%v: %v,", k, this.Labels[k])
	}
	mapStringForLabels += "}"
	s := strings.Join([]string{`&PrivateCreateTicketSpec{`,
		`ServiceFeature:` + fmt.Sprintf("%v", this.ServiceFeature) + `,`,
		`Labels:` + mapStringForLabels + `,`,
		`TicketTrackingSystem:` + fmt.Sprintf("%v", this.TicketTrackingSystem) + `,`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Ticket:` + fmt.Sprintf("%v", this.Ticket) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PrivateCreateTicketSpec_JiraIssue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PrivateCreateTicketSpec_JiraIssue{`,
		`JiraIssue:` + strings.Replace(fmt.Sprintf("%v", this.JiraIssue), "CreateJiraIssueRequest", "CreateJiraIssueRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PrivateCreateTicketResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForErrors := "[]*ErrorType{"
	for _, f := range this.Errors {
		repeatedStringForErrors += strings.Replace(fmt.Sprintf("%v", f), "ErrorType", "schema.ErrorType", 1) + ","
	}
	repeatedStringForErrors += "}"
	s := strings.Join([]string{`&PrivateCreateTicketResponse{`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "ObjectGetMetaType", "schema.ObjectGetMetaType", 1) + `,`,
		`SystemMetadata:` + strings.Replace(fmt.Sprintf("%v", this.SystemMetadata), "SystemObjectMetaType", "schema.SystemObjectMetaType", 1) + `,`,
		`Spec:` + strings.Replace(this.Spec.String(), "TicketResponseSpec", "TicketResponseSpec", 1) + `,`,
		`Errors:` + repeatedStringForErrors + `,`,
		`}`,
	}, "")
	return s
}
func (this *UnlinkTicketsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UnlinkTicketsRequest{`,
		`TicketUids:` + fmt.Sprintf("%v", this.TicketUids) + `,`,
		`ServiceFeature:` + fmt.Sprintf("%v", this.ServiceFeature) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UnlinkTicketsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UnlinkTicketsResponse{`,
		`}`,
	}, "")
	return s
}
func valueToStringPrivateCustomapi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SearchTicketRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivateCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchTicketRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchTicketRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceFeature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceFeature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelFilter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LabelFilter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrivateCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchTicketResponseItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivateCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchTicketResponseItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchTicketResponseItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &schema.ObjectGetMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SystemMetadata == nil {
				m.SystemMetadata = &schema.SystemObjectGetMetaType{}
			}
			if err := m.SystemMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &TicketResponseSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrivateCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TicketResponseSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivateCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TicketResponseSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TicketResponseSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceFeature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceFeature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TicketTrackingSystem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TicketTrackingSystem = append(m.TicketTrackingSystem, &schema.ObjectRefType{})
			if err := m.TicketTrackingSystem[len(m.TicketTrackingSystem)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TicketTrackingSystemType", wireType)
			}
			m.TicketTrackingSystemType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TicketTrackingSystemType |= ticket_management.TicketTrackingSystemType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JiraIssue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ticket_management.JiraIssue{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Ticket = &TicketResponseSpec_JiraIssue{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrivateCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchTicketResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivateCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchTicketResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchTicketResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &SearchTicketResponseItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrivateCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateJiraIssueRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivateCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateJiraIssueRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateJiraIssueRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Project", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Project = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssueType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IssueType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Summary", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Summary = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrivateCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivateCreateTicketRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivateCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrivateCreateTicketRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrivateCreateTicketRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &PrivateCreateTicketSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrivateCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivateCreateTicketSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivateCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrivateCreateTicketSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrivateCreateTicketSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceFeature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceFeature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPrivateCustomapi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPrivateCustomapi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPrivateCustomapi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPrivateCustomapi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPrivateCustomapi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthPrivateCustomapi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthPrivateCustomapi
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPrivateCustomapi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthPrivateCustomapi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TicketTrackingSystem", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TicketTrackingSystem = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JiraIssue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CreateJiraIssueRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Ticket = &PrivateCreateTicketSpec_JiraIssue{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrivateCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivateCreateTicketResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivateCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrivateCreateTicketResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrivateCreateTicketResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &schema.ObjectGetMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SystemMetadata == nil {
				m.SystemMetadata = &schema.SystemObjectMetaType{}
			}
			if err := m.SystemMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &TicketResponseSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Errors = append(m.Errors, &schema.ErrorType{})
			if err := m.Errors[len(m.Errors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrivateCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnlinkTicketsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivateCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnlinkTicketsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnlinkTicketsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TicketUids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TicketUids = append(m.TicketUids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceFeature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceFeature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrivateCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnlinkTicketsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivateCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnlinkTicketsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnlinkTicketsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPrivateCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPrivateCustomapi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPrivateCustomapi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPrivateCustomapi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPrivateCustomapi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPrivateCustomapi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPrivateCustomapi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPrivateCustomapi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPrivateCustomapi = fmt.Errorf("proto: unexpected end of group")
)

//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.
//

package app_setting

import (
	"bytes"
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"strings"

	"github.com/gogo/protobuf/proto"
	"github.com/grpc-ecosystem/grpc-gateway/runtime"
	"google.golang.org/grpc"

	"gopkg.volterra.us/stdlib/client"
	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/errors"
	"gopkg.volterra.us/stdlib/server"
	"gopkg.volterra.us/stdlib/svcfw"
)

var (
	_ = fmt.Sprintf("dummy for fmt import use")
)

// Create CustomAPI GRPC Client satisfying server.CustomClient
type CustomAPIGrpcClient struct {
	conn       *grpc.ClientConn
	grpcClient CustomAPIClient
	// map of rpc name to its invocation
	rpcFns map[string]func(context.Context, string, ...grpc.CallOption) (proto.Message, error)
}

func (c *CustomAPIGrpcClient) doRPCSuspiciousUserStatus(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &SuspiciousUserStatusReq{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.app_setting.SuspiciousUserStatusReq", yamlReq)
	}
	rsp, err := c.grpcClient.SuspiciousUserStatus(ctx, req, opts...)
	return rsp, err
}

func (c *CustomAPIGrpcClient) DoRPC(ctx context.Context, rpc string, opts ...server.CustomCallOpt) (proto.Message, error) {
	rpcFn, exists := c.rpcFns[rpc]
	if !exists {
		return nil, fmt.Errorf("Error, no such rpc %s", rpc)
	}
	cco := server.NewCustomCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	if cco.YAMLReq == "" {
		return nil, fmt.Errorf("Error, empty request body")
	}
	ctx = client.AddHdrsToCtx(cco.Headers, ctx)

	rsp, err := rpcFn(ctx, cco.YAMLReq, cco.GrpcCallOpts...)
	if err != nil {
		return nil, errors.Wrap(err, "Doing custom RPC using GRPC")
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return rsp, nil
}

func NewCustomAPIGrpcClient(cc *grpc.ClientConn) server.CustomClient {
	ccl := &CustomAPIGrpcClient{
		conn:       cc,
		grpcClient: NewCustomAPIClient(cc),
	}
	rpcFns := make(map[string]func(context.Context, string, ...grpc.CallOption) (proto.Message, error))
	rpcFns["SuspiciousUserStatus"] = ccl.doRPCSuspiciousUserStatus

	ccl.rpcFns = rpcFns

	return ccl
}

// Create CustomAPI REST Client satisfying server.CustomClient
type CustomAPIRestClient struct {
	baseURL string
	client  http.Client
	// map of rpc name to its invocation
	rpcFns map[string]func(context.Context, *server.CustomCallOpts) (proto.Message, error)
}

func (c *CustomAPIRestClient) doRPCSuspiciousUserStatus(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &SuspiciousUserStatusReq{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.app_setting.SuspiciousUserStatusReq: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post":
		jsn, err := req.ToJSON()
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		newReq, err := http.NewRequest(http.MethodPost, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP POST request for custom API")
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("end_time", fmt.Sprintf("%v", req.EndTime))
		q.Add("name", fmt.Sprintf("%v", req.Name))
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))
		q.Add("query", fmt.Sprintf("%v", req.Query))
		q.Add("start_time", fmt.Sprintf("%v", req.StartTime))
		q.Add("topn", fmt.Sprintf("%v", req.Topn))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &SuspiciousUserStatusRsp{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, fmt.Errorf("JSON Response %s is not of type *ves.io.schema.app_setting.SuspiciousUserStatusRsp", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomAPIRestClient) DoRPC(ctx context.Context, rpc string, opts ...server.CustomCallOpt) (proto.Message, error) {
	rpcFn, exists := c.rpcFns[rpc]
	if !exists {
		return nil, fmt.Errorf("Error, no such rpc %s", rpc)
	}
	cco := server.NewCustomCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	rsp, err := rpcFn(ctx, cco)
	if err != nil {
		return nil, errors.Wrap(err, "Doing custom RPC using Rest")
	}
	return rsp, nil
}

func NewCustomAPIRestClient(baseURL string, hc http.Client) server.CustomClient {
	ccl := &CustomAPIRestClient{
		baseURL: baseURL,
		client:  hc,
	}

	rpcFns := make(map[string]func(context.Context, *server.CustomCallOpts) (proto.Message, error))
	rpcFns["SuspiciousUserStatus"] = ccl.doRPCSuspiciousUserStatus

	ccl.rpcFns = rpcFns

	return ccl
}

// Create CustomAPIInprocClient

// INPROC Client (satisfying CustomAPIClient interface)
type CustomAPIInprocClient struct {
	svc svcfw.Service
}

func (c *CustomAPIInprocClient) SuspiciousUserStatus(ctx context.Context, in *SuspiciousUserStatusReq, opts ...grpc.CallOption) (*SuspiciousUserStatusRsp, error) {
	ah := c.svc.GetAPIHandler("ves.io.schema.app_setting.CustomAPI")
	cah, ok := ah.(CustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomAPISrv", ah)
	}

	var (
		rsp *SuspiciousUserStatusRsp
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, c.svc, "ves.io.schema.app_setting.SuspiciousUserStatusReq", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomAPI.SuspiciousUserStatus' operation on 'app_setting'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if c.svc.Config().EnableAPIValidation {
		if rvFn := c.svc.GetRPCValidator("ves.io.schema.app_setting.CustomAPI.SuspiciousUserStatus"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.SuspiciousUserStatus(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, c.svc, "ves.io.schema.app_setting.SuspiciousUserStatusRsp", rsp)...)

	return rsp, nil
}

func NewCustomAPIInprocClient(svc svcfw.Service) CustomAPIClient {
	return &CustomAPIInprocClient{svc: svc}
}

// RegisterGwCustomAPIHandler registers with grpc-gw with an inproc-client backing so that
// rest to grpc happens without a grpc.Dial (thus avoiding additional certs for mTLS)
func RegisterGwCustomAPIHandler(ctx context.Context, mux *runtime.ServeMux, svc interface{}) error {
	s, ok := svc.(svcfw.Service)
	if !ok {
		return fmt.Errorf("svc is not svcfw.Service")
	}
	return RegisterCustomAPIHandlerClient(ctx, mux, NewCustomAPIInprocClient(s))
}

var CustomAPISwaggerJSON string = `{
    "swagger": "2.0",
    "info": {
        "title": "app setting object",
        "description": "App setting object\napp setting object refers to an app type",
        "version": "version not set"
    },
    "schemes": [
        "http",
        "https"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "tags": null,
    "paths": {
        "/public/namespaces/{namespace}/app_settings/{name}/suspicious_users": {
            "get": {
                "summary": "Suspicious User Status",
                "description": "Get status of suspicious users",
                "operationId": "ves.io.schema.app_setting.CustomAPI.SuspiciousUserStatus",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/app_settingSuspiciousUserStatusRsp"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "namespace\n\nfetch suspicious users for a given namespace\nx-example: \"bloggin-app-namespace-1\"",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Suspicious User Status Request"
                    },
                    {
                        "name": "name",
                        "description": "name\n\nx-example: \"value\"\nfetch suspicious users based on a given app setting",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "name"
                    },
                    {
                        "name": "query",
                        "description": "x-example: \"query={app_type=\"blogging_app\"}\"\nquery is used to specify the list of matchers\nsyntax for query := {[\u003cmatcher\u003e]} \n\u003cmatcher\u003e := \u003cfield_name\u003e\u003coperator\u003e\"\u003cvalue\u003e\"\n\u003cfield_name\u003e := string\n  One or more of these fields in the security event may be specified in the query.\n    app_type - application type\n    vh_name - name of the virtual host\n\u003cvalue\u003e := string\n\u003coperator\u003e := [\"=\"|\"!=\"]\n  = : equal to \n  != : not equal to\nWhen more than one matcher is specified in the query, then security events matching ALL the matchers will be returned in the response.\nExample: query={country=\"United States\", city=\"California\"} will return all security events originating from California, United States.\n\nOptional: If not specified, all the security events matching the given tenant and namespace will be returned in the response.",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "x-displayname": "Query"
                    },
                    {
                        "name": "start_time",
                        "description": "x-example: \"1570007981\"\nfetch suspicious users during timestamp \u003e= start_time\nformat: unix_timestamp|rfc 3339\n\nOptional: If not specified, then the start_time will be evaluated to end_time-10m\n          If end_time is not specified, then the start_time will be evaluated to \u003ccurrent time\u003e-10m",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "x-displayname": "Start Time"
                    },
                    {
                        "name": "end_time",
                        "description": "x-example: \"1570007981\"\nfetch suspicious users during timestamp \u003c= end_time\nformat: unix_timestamp|rfc 3339\n\nOptional: If not specified, then the end_time will be evaluated to start_time+10m\n          If start_time is not specified, then the end_time will be evaluated to \u003ccurrent time\u003e",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "x-displayname": "End Time"
                    },
                    {
                        "name": "topn",
                        "description": "x-example: \"None of int32 samples [0 1 10 42 100 1024 2048] satisfied rules map[ves.io.schema.rules.uint32.gte:1 ves.io.schema.rules.uint32.lte:100]\"\nx-example: 10\nfetch top 10 suspicious users\n\nNumber of top field values to be returned in the response.\nOptional: If not specified, top 5 values will be returned in the response.",
                        "in": "query",
                        "required": false,
                        "type": "integer",
                        "format": "int64",
                        "x-displayname": "TopN"
                    }
                ],
                "tags": [
                    "CustomAPI"
                ],
                "x-ves-proto-rpc": "ves.io.schema.app_setting.CustomAPI.SuspiciousUserStatus"
            },
            "x-displayname": "Suspicious Users API(s)",
            "x-ves-proto-service": "ves.io.schema.app_setting.CustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        }
    },
    "definitions": {
        "app_settingSuspiciousUser": {
            "type": "object",
            "description": "Message containing suspicious user data",
            "title": "Suspicious User Data",
            "x-displayname": "Suspicious User Data",
            "x-ves-proto-message": "ves.io.schema.app_setting.SuspiciousUser",
            "properties": {
                "logs": {
                    "type": "array",
                    "description": " list of security events that matched the query. Contains no more than 100 messages.\n\nExample: - \"value\"-",
                    "title": "logs",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Logs",
                    "x-ves-example": "value"
                },
                "suspicion_score": {
                    "type": "number",
                    "description": " total number of security events that matched the query.\n\nExample: - \"0\"-",
                    "title": "suspicion score",
                    "format": "double",
                    "x-displayname": "Suspicion Score",
                    "x-ves-example": "0"
                },
                "user_id": {
                    "type": "string",
                    "description": " String representing the user (ex: Source IP)\n\nExample: - \"value\"-",
                    "title": "user ID",
                    "x-displayname": "UserID",
                    "x-ves-example": "value"
                }
            }
        },
        "app_settingSuspiciousUserStatusRsp": {
            "type": "object",
            "description": "Response message for SuspiciousUserStatusReq",
            "title": "Suspicious User Status Response",
            "x-displayname": "Suspicious User Status Response",
            "x-ves-proto-message": "ves.io.schema.app_setting.SuspiciousUserStatusRsp",
            "properties": {
                "suspicious_users": {
                    "type": "array",
                    "description": " List of suspicious users",
                    "title": "suspicious users",
                    "items": {
                        "$ref": "#/definitions/app_settingSuspiciousUser"
                    },
                    "x-displayname": "Suspicious Users"
                }
            }
        }
    },
    "x-displayname": "App Setting",
    "x-ves-proto-file": "ves.io/schema/app_setting/public_customapi.proto"
}`

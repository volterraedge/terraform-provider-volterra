// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/app_setting/types.proto

package app_setting

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Anomaly type
//
// x-displayName: "Anomaly Type"
// Different types of anomaly detection supported
// This is deprecated.
type AnomalyType int32

const (
	// x-displayName: "Disable Anomaly"
	// Disable anomaly detection
	ANOMALY_NONE AnomalyType = 0
	// x-displayName: "Anomaly Per Site"
	// Anomaly detection is enabled only per site
	ANOMALY_SITE AnomalyType = 1
	// x-displayName: "Anomaly Per Service"
	// Anomaly detection is enabled only per service
	ANOMALY_SERVICE AnomalyType = 2
	// x-displayName: "Anomaly Per Service, Site"
	// Anamoly detection is enabled only per service per site
	ANOMALY_SERVICE_PER_SITE AnomalyType = 3
)

var AnomalyType_name = map[int32]string{
	0: "ANOMALY_NONE",
	1: "ANOMALY_SITE",
	2: "ANOMALY_SERVICE",
	3: "ANOMALY_SERVICE_PER_SITE",
}

var AnomalyType_value = map[string]int32{
	"ANOMALY_NONE":             0,
	"ANOMALY_SITE":             1,
	"ANOMALY_SERVICE":          2,
	"ANOMALY_SERVICE_PER_SITE": 3,
}

func (AnomalyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a428eb293ee50fed, []int{0}
}

// Metric
//
// x-displayName: "Metric"
// Supported metrics that can be selected for timeseries analyses
type Metric int32

const (
	// x-displayName: "No Metrics"
	// No metrics will be analyzed
	NO_METRICS Metric = 0
	// x-displayName: "Request Rate"
	// Select request rate metric for analyses
	REQUEST_RATE Metric = 1
	// x-displayName: "Error Rate"
	// Select error rate metric for analyses
	ERROR_RATE Metric = 2
	// x-displayName: "Latency"
	// Select latency metric for analyses
	LATENCY Metric = 3
	// x-displayName: "Response Throughput"
	// Select response throughput metric for analyses
	THROUGHPUT Metric = 4
)

var Metric_name = map[int32]string{
	0: "NO_METRICS",
	1: "REQUEST_RATE",
	2: "ERROR_RATE",
	3: "LATENCY",
	4: "THROUGHPUT",
}

var Metric_value = map[string]int32{
	"NO_METRICS":   0,
	"REQUEST_RATE": 1,
	"ERROR_RATE":   2,
	"LATENCY":      3,
	"THROUGHPUT":   4,
}

func (Metric) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a428eb293ee50fed, []int{1}
}

// Metrics Source
//
// x-displayName: "Metrics Source"
// Supported sources from which Metrics can be analyzed
type MetricsSource int32

const (
	// x-displayName: "None"
	// Disable analyses for all metrics
	NONE MetricsSource = 0
	// x-displayName: "All Services"
	// Enable metrics analyses for all services
	NODES MetricsSource = 1
	// x-displayName: "All Service Interactions"
	// Enable metrics analyses for all edges in the service mesh graph.
	// This enables separate analyses of metrics between all source and destination service combinations.
	EDGES MetricsSource = 2
	// x-displayName: "All Virtual Hosts"
	// Enable metrics analyses for all virtual hosts in this namespace.
	VIRTUAL_HOSTS MetricsSource = 3
)

var MetricsSource_name = map[int32]string{
	0: "NONE",
	1: "NODES",
	2: "EDGES",
	3: "VIRTUAL_HOSTS",
}

var MetricsSource_value = map[string]int32{
	"NONE":          0,
	"NODES":         1,
	"EDGES":         2,
	"VIRTUAL_HOSTS": 3,
}

func (MetricsSource) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a428eb293ee50fed, []int{2}
}

// Timeseries Analyses Setting
//
// x-displayName: "Timeseries Analyses Setting"
// Configuration for timeseries analyses
type TimeseriesAnalysesSetting struct {
	// Metric Selector
	//
	// x-displayName: "Metric Selectors"
	// List of metric selectors where each selector specifies which metrics are selected to be analyzed
	MetricSelectors []*MetricSelector `protobuf:"bytes,1,rep,name=metric_selectors,json=metricSelectors,proto3" json:"metric_selectors,omitempty"`
}

func (m *TimeseriesAnalysesSetting) Reset()      { *m = TimeseriesAnalysesSetting{} }
func (*TimeseriesAnalysesSetting) ProtoMessage() {}
func (*TimeseriesAnalysesSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_a428eb293ee50fed, []int{0}
}
func (m *TimeseriesAnalysesSetting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimeseriesAnalysesSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TimeseriesAnalysesSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeseriesAnalysesSetting.Merge(m, src)
}
func (m *TimeseriesAnalysesSetting) XXX_Size() int {
	return m.Size()
}
func (m *TimeseriesAnalysesSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeseriesAnalysesSetting.DiscardUnknown(m)
}

var xxx_messageInfo_TimeseriesAnalysesSetting proto.InternalMessageInfo

func (m *TimeseriesAnalysesSetting) GetMetricSelectors() []*MetricSelector {
	if m != nil {
		return m.MetricSelectors
	}
	return nil
}

// Metric Selector
//
// x-displayName: "Metric Selector"
// Specifies which metrics are selected to be analyzed
type MetricSelector struct {
	// Metrics Sources
	//
	// x-displayName: "Metrics Sources"
	// Sources from where this metric is gathered for analyses
	MetricsSource MetricsSource `protobuf:"varint,1,opt,name=metrics_source,json=metricsSource,proto3,enum=ves.io.schema.app_setting.MetricsSource" json:"metrics_source,omitempty"`
	// Metrics
	//
	// x-displayName: "Metrics"
	// Metric enabled to be analyzed
	Metric []Metric `protobuf:"varint,2,rep,packed,name=metric,proto3,enum=ves.io.schema.app_setting.Metric" json:"metric,omitempty"`
}

func (m *MetricSelector) Reset()      { *m = MetricSelector{} }
func (*MetricSelector) ProtoMessage() {}
func (*MetricSelector) Descriptor() ([]byte, []int) {
	return fileDescriptor_a428eb293ee50fed, []int{1}
}
func (m *MetricSelector) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetricSelector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MetricSelector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricSelector.Merge(m, src)
}
func (m *MetricSelector) XXX_Size() int {
	return m.Size()
}
func (m *MetricSelector) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricSelector.DiscardUnknown(m)
}

var xxx_messageInfo_MetricSelector proto.InternalMessageInfo

func (m *MetricSelector) GetMetricsSource() MetricsSource {
	if m != nil {
		return m.MetricsSource
	}
	return NONE
}

func (m *MetricSelector) GetMetric() []Metric {
	if m != nil {
		return m.Metric
	}
	return nil
}

// Business Logic Markup Setting
//
// x-displayName: "Business Logic Markup Setting"
// Setting specifying how Business Logic Markup will be performed.
type BusinessLogicMarkupSetting struct {
	// Include or Exclude data generated from this namespace in learning
	//
	// x-displayName: "Include namespace in learning"
	// By default, business logic markup learns API Endpoints and patterns by inspecting logs generated from all namespaces where virtual_hosts and vK8s services that are labelled with a valid apptype.
	// This configuration can be used to disable learning from traffic generated by the namespace in which this app_setting object is created.
	// On disabling this, the AI engine will skip learning API Endpoints from this namespace.
	//
	// Types that are valid to be assigned to LearnFromNamespace:
	//	*BusinessLogicMarkupSetting_Enable
	//	*BusinessLogicMarkupSetting_Disable
	LearnFromNamespace isBusinessLogicMarkupSetting_LearnFromNamespace `protobuf_oneof:"learn_from_namespace"`
}

func (m *BusinessLogicMarkupSetting) Reset()      { *m = BusinessLogicMarkupSetting{} }
func (*BusinessLogicMarkupSetting) ProtoMessage() {}
func (*BusinessLogicMarkupSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_a428eb293ee50fed, []int{2}
}
func (m *BusinessLogicMarkupSetting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BusinessLogicMarkupSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BusinessLogicMarkupSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BusinessLogicMarkupSetting.Merge(m, src)
}
func (m *BusinessLogicMarkupSetting) XXX_Size() int {
	return m.Size()
}
func (m *BusinessLogicMarkupSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_BusinessLogicMarkupSetting.DiscardUnknown(m)
}

var xxx_messageInfo_BusinessLogicMarkupSetting proto.InternalMessageInfo

type isBusinessLogicMarkupSetting_LearnFromNamespace interface {
	isBusinessLogicMarkupSetting_LearnFromNamespace()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type BusinessLogicMarkupSetting_Enable struct {
	Enable *schema.Empty `protobuf:"bytes,1,opt,name=enable,proto3,oneof" json:"enable,omitempty"`
}
type BusinessLogicMarkupSetting_Disable struct {
	Disable *schema.Empty `protobuf:"bytes,2,opt,name=disable,proto3,oneof" json:"disable,omitempty"`
}

func (*BusinessLogicMarkupSetting_Enable) isBusinessLogicMarkupSetting_LearnFromNamespace()  {}
func (*BusinessLogicMarkupSetting_Disable) isBusinessLogicMarkupSetting_LearnFromNamespace() {}

func (m *BusinessLogicMarkupSetting) GetLearnFromNamespace() isBusinessLogicMarkupSetting_LearnFromNamespace {
	if m != nil {
		return m.LearnFromNamespace
	}
	return nil
}

func (m *BusinessLogicMarkupSetting) GetEnable() *schema.Empty {
	if x, ok := m.GetLearnFromNamespace().(*BusinessLogicMarkupSetting_Enable); ok {
		return x.Enable
	}
	return nil
}

func (m *BusinessLogicMarkupSetting) GetDisable() *schema.Empty {
	if x, ok := m.GetLearnFromNamespace().(*BusinessLogicMarkupSetting_Disable); ok {
		return x.Disable
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*BusinessLogicMarkupSetting) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*BusinessLogicMarkupSetting_Enable)(nil),
		(*BusinessLogicMarkupSetting_Disable)(nil),
	}
}

// User Behavior Analysis Setting
//
// x-displayName: "User Behavior Analysis Setting"
// Configuration for user behavior analysis
type UserBehaviorAnalysisSetting struct {
	// Include or Exclude data generated from this namespace in learning
	//
	// x-displayName: "Include namespace in learning"
	// x-required
	// By default, the AI engine learns user behavior from traffic generated from all namespaces where virtual_hosts and vK8s services that are labelled with a valid apptype.
	// This configuration can be used to disable learning from traffic generated by the namespace in which this app_setting object is created.
	// On disabling this, the AI engine will skip learning user behavior patterns from this namespace.
	//
	// Types that are valid to be assigned to LearnFromNamespace:
	//	*UserBehaviorAnalysisSetting_EnableLearning
	//	*UserBehaviorAnalysisSetting_DisableLearning
	LearnFromNamespace isUserBehaviorAnalysisSetting_LearnFromNamespace `protobuf_oneof:"learn_from_namespace"`
	// Enable Malicious User Detection
	//
	// x-displayName: "Enable Malicious User Detection"
	// x-required
	// Enable AI based malicious user detection
	//
	// Types that are valid to be assigned to MaliciousUserDetection:
	//	*UserBehaviorAnalysisSetting_EnableDetection
	//	*UserBehaviorAnalysisSetting_DisableDetection
	MaliciousUserDetection isUserBehaviorAnalysisSetting_MaliciousUserDetection `protobuf_oneof:"malicious_user_detection"`
}

func (m *UserBehaviorAnalysisSetting) Reset()      { *m = UserBehaviorAnalysisSetting{} }
func (*UserBehaviorAnalysisSetting) ProtoMessage() {}
func (*UserBehaviorAnalysisSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_a428eb293ee50fed, []int{3}
}
func (m *UserBehaviorAnalysisSetting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserBehaviorAnalysisSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *UserBehaviorAnalysisSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserBehaviorAnalysisSetting.Merge(m, src)
}
func (m *UserBehaviorAnalysisSetting) XXX_Size() int {
	return m.Size()
}
func (m *UserBehaviorAnalysisSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_UserBehaviorAnalysisSetting.DiscardUnknown(m)
}

var xxx_messageInfo_UserBehaviorAnalysisSetting proto.InternalMessageInfo

type isUserBehaviorAnalysisSetting_LearnFromNamespace interface {
	isUserBehaviorAnalysisSetting_LearnFromNamespace()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isUserBehaviorAnalysisSetting_MaliciousUserDetection interface {
	isUserBehaviorAnalysisSetting_MaliciousUserDetection()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type UserBehaviorAnalysisSetting_EnableLearning struct {
	EnableLearning *schema.Empty `protobuf:"bytes,1,opt,name=enable_learning,json=enableLearning,proto3,oneof" json:"enable_learning,omitempty"`
}
type UserBehaviorAnalysisSetting_DisableLearning struct {
	DisableLearning *schema.Empty `protobuf:"bytes,2,opt,name=disable_learning,json=disableLearning,proto3,oneof" json:"disable_learning,omitempty"`
}
type UserBehaviorAnalysisSetting_EnableDetection struct {
	EnableDetection *MaliciousUserDetectionSetting `protobuf:"bytes,3,opt,name=enable_detection,json=enableDetection,proto3,oneof" json:"enable_detection,omitempty"`
}
type UserBehaviorAnalysisSetting_DisableDetection struct {
	DisableDetection *schema.Empty `protobuf:"bytes,4,opt,name=disable_detection,json=disableDetection,proto3,oneof" json:"disable_detection,omitempty"`
}

func (*UserBehaviorAnalysisSetting_EnableLearning) isUserBehaviorAnalysisSetting_LearnFromNamespace() {
}
func (*UserBehaviorAnalysisSetting_DisableLearning) isUserBehaviorAnalysisSetting_LearnFromNamespace() {
}
func (*UserBehaviorAnalysisSetting_EnableDetection) isUserBehaviorAnalysisSetting_MaliciousUserDetection() {
}
func (*UserBehaviorAnalysisSetting_DisableDetection) isUserBehaviorAnalysisSetting_MaliciousUserDetection() {
}

func (m *UserBehaviorAnalysisSetting) GetLearnFromNamespace() isUserBehaviorAnalysisSetting_LearnFromNamespace {
	if m != nil {
		return m.LearnFromNamespace
	}
	return nil
}
func (m *UserBehaviorAnalysisSetting) GetMaliciousUserDetection() isUserBehaviorAnalysisSetting_MaliciousUserDetection {
	if m != nil {
		return m.MaliciousUserDetection
	}
	return nil
}

func (m *UserBehaviorAnalysisSetting) GetEnableLearning() *schema.Empty {
	if x, ok := m.GetLearnFromNamespace().(*UserBehaviorAnalysisSetting_EnableLearning); ok {
		return x.EnableLearning
	}
	return nil
}

func (m *UserBehaviorAnalysisSetting) GetDisableLearning() *schema.Empty {
	if x, ok := m.GetLearnFromNamespace().(*UserBehaviorAnalysisSetting_DisableLearning); ok {
		return x.DisableLearning
	}
	return nil
}

func (m *UserBehaviorAnalysisSetting) GetEnableDetection() *MaliciousUserDetectionSetting {
	if x, ok := m.GetMaliciousUserDetection().(*UserBehaviorAnalysisSetting_EnableDetection); ok {
		return x.EnableDetection
	}
	return nil
}

func (m *UserBehaviorAnalysisSetting) GetDisableDetection() *schema.Empty {
	if x, ok := m.GetMaliciousUserDetection().(*UserBehaviorAnalysisSetting_DisableDetection); ok {
		return x.DisableDetection
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*UserBehaviorAnalysisSetting) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*UserBehaviorAnalysisSetting_EnableLearning)(nil),
		(*UserBehaviorAnalysisSetting_DisableLearning)(nil),
		(*UserBehaviorAnalysisSetting_EnableDetection)(nil),
		(*UserBehaviorAnalysisSetting_DisableDetection)(nil),
	}
}

// Malicious User Detection Setting
//
// x-displayName: "Malicious User Detection Setting"
// Various factors abour user activity are monitored and analysed to determine malicious users.
// These settings allow tuning those factors used by the system to detect malicious users.
type MaliciousUserDetectionSetting struct {
	// forbidden activity choice
	//
	// x-displayName: "forbidden activity choice"
	// x-required
	// Enable/Disable using forbidden activity for detecting malicious users
	//
	// Types that are valid to be assigned to ForbiddenActivityChoice:
	//	*MaliciousUserDetectionSetting_IncludeForbiddenActivity
	//	*MaliciousUserDetectionSetting_ExcludeForbiddenActivity
	ForbiddenActivityChoice isMaliciousUserDetectionSetting_ForbiddenActivityChoice `protobuf_oneof:"forbidden_activity_choice"`
	// activity choice
	//
	// x-displayName: "Failed Login Activity Choice"
	// x-required
	// Enable/Disable using failed login activity for detecting malicious users
	//
	// Types that are valid to be assigned to FailedLoginActivityChoice:
	//	*MaliciousUserDetectionSetting_IncludeFailedLoginActivity
	//	*MaliciousUserDetectionSetting_ExcludeFailedLoginActivity
	FailedLoginActivityChoice isMaliciousUserDetectionSetting_FailedLoginActivityChoice `protobuf_oneof:"failed_login_activity_choice"`
	// WAF activity choice
	//
	// x-displayName: "WAF Activity Choice"
	// x-required
	// Enable/Disable using WAF activity for detecting malicious users
	//
	// Types that are valid to be assigned to WafActivityChoice:
	//	*MaliciousUserDetectionSetting_IncludeWafActivity
	//	*MaliciousUserDetectionSetting_ExcludeWafActivity
	WafActivityChoice isMaliciousUserDetectionSetting_WafActivityChoice `protobuf_oneof:"waf_activity_choice"`
	// Cooling off period setting
	//
	// x-displayName: "Cooling Off Period Setting"
	// x-required
	// Malicious user detection assigns a threat level to each user based on their activity.
	// Once a threat level is assigned, the system continues tracking activity from this user
	// and if no further malicious activity is seen, it gradually reduces the threat assesment to lower levels.
	// This field specifies the time period, in minutes, used by the system to decay a user's threat level from
	// a high to medium or medium to low or low to none.
	//
	// Types that are valid to be assigned to CoolingOffPeriodSetting:
	//	*MaliciousUserDetectionSetting_CoolingOffPeriod
	CoolingOffPeriodSetting isMaliciousUserDetectionSetting_CoolingOffPeriodSetting `protobuf_oneof:"cooling_off_period_setting"`
}

func (m *MaliciousUserDetectionSetting) Reset()      { *m = MaliciousUserDetectionSetting{} }
func (*MaliciousUserDetectionSetting) ProtoMessage() {}
func (*MaliciousUserDetectionSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_a428eb293ee50fed, []int{4}
}
func (m *MaliciousUserDetectionSetting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MaliciousUserDetectionSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MaliciousUserDetectionSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MaliciousUserDetectionSetting.Merge(m, src)
}
func (m *MaliciousUserDetectionSetting) XXX_Size() int {
	return m.Size()
}
func (m *MaliciousUserDetectionSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_MaliciousUserDetectionSetting.DiscardUnknown(m)
}

var xxx_messageInfo_MaliciousUserDetectionSetting proto.InternalMessageInfo

type isMaliciousUserDetectionSetting_ForbiddenActivityChoice interface {
	isMaliciousUserDetectionSetting_ForbiddenActivityChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isMaliciousUserDetectionSetting_FailedLoginActivityChoice interface {
	isMaliciousUserDetectionSetting_FailedLoginActivityChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isMaliciousUserDetectionSetting_WafActivityChoice interface {
	isMaliciousUserDetectionSetting_WafActivityChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isMaliciousUserDetectionSetting_CoolingOffPeriodSetting interface {
	isMaliciousUserDetectionSetting_CoolingOffPeriodSetting()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type MaliciousUserDetectionSetting_IncludeForbiddenActivity struct {
	IncludeForbiddenActivity *ForbiddenActivitySetting `protobuf:"bytes,2,opt,name=include_forbidden_activity,json=includeForbiddenActivity,proto3,oneof" json:"include_forbidden_activity,omitempty"`
}
type MaliciousUserDetectionSetting_ExcludeForbiddenActivity struct {
	ExcludeForbiddenActivity *schema.Empty `protobuf:"bytes,3,opt,name=exclude_forbidden_activity,json=excludeForbiddenActivity,proto3,oneof" json:"exclude_forbidden_activity,omitempty"`
}
type MaliciousUserDetectionSetting_IncludeFailedLoginActivity struct {
	IncludeFailedLoginActivity *FailedLoginActivitySetting `protobuf:"bytes,5,opt,name=include_failed_login_activity,json=includeFailedLoginActivity,proto3,oneof" json:"include_failed_login_activity,omitempty"`
}
type MaliciousUserDetectionSetting_ExcludeFailedLoginActivity struct {
	ExcludeFailedLoginActivity *schema.Empty `protobuf:"bytes,6,opt,name=exclude_failed_login_activity,json=excludeFailedLoginActivity,proto3,oneof" json:"exclude_failed_login_activity,omitempty"`
}
type MaliciousUserDetectionSetting_IncludeWafActivity struct {
	IncludeWafActivity *schema.Empty `protobuf:"bytes,8,opt,name=include_waf_activity,json=includeWafActivity,proto3,oneof" json:"include_waf_activity,omitempty"`
}
type MaliciousUserDetectionSetting_ExcludeWafActivity struct {
	ExcludeWafActivity *schema.Empty `protobuf:"bytes,9,opt,name=exclude_waf_activity,json=excludeWafActivity,proto3,oneof" json:"exclude_waf_activity,omitempty"`
}
type MaliciousUserDetectionSetting_CoolingOffPeriod struct {
	CoolingOffPeriod uint32 `protobuf:"varint,11,opt,name=cooling_off_period,json=coolingOffPeriod,proto3,oneof" json:"cooling_off_period,omitempty"`
}

func (*MaliciousUserDetectionSetting_IncludeForbiddenActivity) isMaliciousUserDetectionSetting_ForbiddenActivityChoice() {
}
func (*MaliciousUserDetectionSetting_ExcludeForbiddenActivity) isMaliciousUserDetectionSetting_ForbiddenActivityChoice() {
}
func (*MaliciousUserDetectionSetting_IncludeFailedLoginActivity) isMaliciousUserDetectionSetting_FailedLoginActivityChoice() {
}
func (*MaliciousUserDetectionSetting_ExcludeFailedLoginActivity) isMaliciousUserDetectionSetting_FailedLoginActivityChoice() {
}
func (*MaliciousUserDetectionSetting_IncludeWafActivity) isMaliciousUserDetectionSetting_WafActivityChoice() {
}
func (*MaliciousUserDetectionSetting_ExcludeWafActivity) isMaliciousUserDetectionSetting_WafActivityChoice() {
}
func (*MaliciousUserDetectionSetting_CoolingOffPeriod) isMaliciousUserDetectionSetting_CoolingOffPeriodSetting() {
}

func (m *MaliciousUserDetectionSetting) GetForbiddenActivityChoice() isMaliciousUserDetectionSetting_ForbiddenActivityChoice {
	if m != nil {
		return m.ForbiddenActivityChoice
	}
	return nil
}
func (m *MaliciousUserDetectionSetting) GetFailedLoginActivityChoice() isMaliciousUserDetectionSetting_FailedLoginActivityChoice {
	if m != nil {
		return m.FailedLoginActivityChoice
	}
	return nil
}
func (m *MaliciousUserDetectionSetting) GetWafActivityChoice() isMaliciousUserDetectionSetting_WafActivityChoice {
	if m != nil {
		return m.WafActivityChoice
	}
	return nil
}
func (m *MaliciousUserDetectionSetting) GetCoolingOffPeriodSetting() isMaliciousUserDetectionSetting_CoolingOffPeriodSetting {
	if m != nil {
		return m.CoolingOffPeriodSetting
	}
	return nil
}

func (m *MaliciousUserDetectionSetting) GetIncludeForbiddenActivity() *ForbiddenActivitySetting {
	if x, ok := m.GetForbiddenActivityChoice().(*MaliciousUserDetectionSetting_IncludeForbiddenActivity); ok {
		return x.IncludeForbiddenActivity
	}
	return nil
}

func (m *MaliciousUserDetectionSetting) GetExcludeForbiddenActivity() *schema.Empty {
	if x, ok := m.GetForbiddenActivityChoice().(*MaliciousUserDetectionSetting_ExcludeForbiddenActivity); ok {
		return x.ExcludeForbiddenActivity
	}
	return nil
}

func (m *MaliciousUserDetectionSetting) GetIncludeFailedLoginActivity() *FailedLoginActivitySetting {
	if x, ok := m.GetFailedLoginActivityChoice().(*MaliciousUserDetectionSetting_IncludeFailedLoginActivity); ok {
		return x.IncludeFailedLoginActivity
	}
	return nil
}

func (m *MaliciousUserDetectionSetting) GetExcludeFailedLoginActivity() *schema.Empty {
	if x, ok := m.GetFailedLoginActivityChoice().(*MaliciousUserDetectionSetting_ExcludeFailedLoginActivity); ok {
		return x.ExcludeFailedLoginActivity
	}
	return nil
}

func (m *MaliciousUserDetectionSetting) GetIncludeWafActivity() *schema.Empty {
	if x, ok := m.GetWafActivityChoice().(*MaliciousUserDetectionSetting_IncludeWafActivity); ok {
		return x.IncludeWafActivity
	}
	return nil
}

func (m *MaliciousUserDetectionSetting) GetExcludeWafActivity() *schema.Empty {
	if x, ok := m.GetWafActivityChoice().(*MaliciousUserDetectionSetting_ExcludeWafActivity); ok {
		return x.ExcludeWafActivity
	}
	return nil
}

func (m *MaliciousUserDetectionSetting) GetCoolingOffPeriod() uint32 {
	if x, ok := m.GetCoolingOffPeriodSetting().(*MaliciousUserDetectionSetting_CoolingOffPeriod); ok {
		return x.CoolingOffPeriod
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*MaliciousUserDetectionSetting) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*MaliciousUserDetectionSetting_IncludeForbiddenActivity)(nil),
		(*MaliciousUserDetectionSetting_ExcludeForbiddenActivity)(nil),
		(*MaliciousUserDetectionSetting_IncludeFailedLoginActivity)(nil),
		(*MaliciousUserDetectionSetting_ExcludeFailedLoginActivity)(nil),
		(*MaliciousUserDetectionSetting_IncludeWafActivity)(nil),
		(*MaliciousUserDetectionSetting_ExcludeWafActivity)(nil),
		(*MaliciousUserDetectionSetting_CoolingOffPeriod)(nil),
	}
}

// Forbidden Activity Setting
//
// x-displayName: "Forbidden Activity Setting"
// When L7 policy rules are set up to disallow certain types of requests, the system monitors
// persistent attempts from a user to send requests which result in policy denies.
// These settings specify how to use disallowed request activity from a user to determine suspicious behavior
type ForbiddenActivitySetting struct {
	// forbidden requests threshold
	//
	// x-displayName: "Forbidden Requests Threshold"
	// x-required
	// The number of forbidden requests beyond which the system will flag this user as malicious
	ForbiddenRequestsThreshold uint32 `protobuf:"varint,4,opt,name=forbidden_requests_threshold,json=forbiddenRequestsThreshold,proto3" json:"forbidden_requests_threshold,omitempty"`
}

func (m *ForbiddenActivitySetting) Reset()      { *m = ForbiddenActivitySetting{} }
func (*ForbiddenActivitySetting) ProtoMessage() {}
func (*ForbiddenActivitySetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_a428eb293ee50fed, []int{5}
}
func (m *ForbiddenActivitySetting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForbiddenActivitySetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ForbiddenActivitySetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForbiddenActivitySetting.Merge(m, src)
}
func (m *ForbiddenActivitySetting) XXX_Size() int {
	return m.Size()
}
func (m *ForbiddenActivitySetting) XXX_DiscardUnknown() {
	xxx_messageInfo_ForbiddenActivitySetting.DiscardUnknown(m)
}

var xxx_messageInfo_ForbiddenActivitySetting proto.InternalMessageInfo

func (m *ForbiddenActivitySetting) GetForbiddenRequestsThreshold() uint32 {
	if m != nil {
		return m.ForbiddenRequestsThreshold
	}
	return 0
}

// Failed Login Activity Setting
//
// x-displayName: "Failed Login Activity Setting"
// When enabled, the system monitors persistent failed login attempts from a user.
// A failed login is detected if a request results in a response code of 401.
// These settings specify how to use failed login activity to determine suspicious behavior
type FailedLoginActivitySetting struct {
	// Login failures threshold
	//
	// x-displayName: "Login Failures Threshold"
	// x-required
	// The number of failed logins beyond which the system will flag this user as malicious
	LoginFailuresThreshold uint32 `protobuf:"varint,4,opt,name=login_failures_threshold,json=loginFailuresThreshold,proto3" json:"login_failures_threshold,omitempty"`
}

func (m *FailedLoginActivitySetting) Reset()      { *m = FailedLoginActivitySetting{} }
func (*FailedLoginActivitySetting) ProtoMessage() {}
func (*FailedLoginActivitySetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_a428eb293ee50fed, []int{6}
}
func (m *FailedLoginActivitySetting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FailedLoginActivitySetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FailedLoginActivitySetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FailedLoginActivitySetting.Merge(m, src)
}
func (m *FailedLoginActivitySetting) XXX_Size() int {
	return m.Size()
}
func (m *FailedLoginActivitySetting) XXX_DiscardUnknown() {
	xxx_messageInfo_FailedLoginActivitySetting.DiscardUnknown(m)
}

var xxx_messageInfo_FailedLoginActivitySetting proto.InternalMessageInfo

func (m *FailedLoginActivitySetting) GetLoginFailuresThreshold() uint32 {
	if m != nil {
		return m.LoginFailuresThreshold
	}
	return 0
}

// AppType Setting
//
// x-displayName: "AppType Setting"
// Namespace is considered an app instance which can be of one or more types also known as AppTypes.
// AppType setting defines the analyses setting to be applied to this namespace for a given AppType.
type AppTypeSettings struct {
	// app_type_ref
	//
	// x-displayName: "AppType"
	// x-required
	//
	// The AppType of App instance in current Namespace.
	// Associating an AppType reference, will enable analysis on this instance's generated data
	AppTypeRef []*schema.ObjectRefType `protobuf:"bytes,1,rep,name=app_type_ref,json=appTypeRef,proto3" json:"app_type_ref,omitempty"`
	// Timeseries Analyses Setting
	//
	// x-displayName: "Timeseries Analysis Setting"
	// Configuration for timeseries analyses
	TimeseriesAnalysesSetting *TimeseriesAnalysesSetting `protobuf:"bytes,2,opt,name=timeseries_analyses_setting,json=timeseriesAnalysesSetting,proto3" json:"timeseries_analyses_setting,omitempty"`
	// Business Logic Markup Setting
	//
	// x-displayName: "Business Logic Markup Setting"
	// Setting specifying how Business Logic Markup will be performed.
	BusinessLogicMarkupSetting *BusinessLogicMarkupSetting `protobuf:"bytes,3,opt,name=business_logic_markup_setting,json=businessLogicMarkupSetting,proto3" json:"business_logic_markup_setting,omitempty"`
	// User Behavior Analysis Setting
	//
	// x-displayName: "User Behavior Analysis Setting"
	// Configuration for user behavior analysis in this namespace
	UserBehaviorAnalysisSetting *UserBehaviorAnalysisSetting `protobuf:"bytes,4,opt,name=user_behavior_analysis_setting,json=userBehaviorAnalysisSetting,proto3" json:"user_behavior_analysis_setting,omitempty"`
}

func (m *AppTypeSettings) Reset()      { *m = AppTypeSettings{} }
func (*AppTypeSettings) ProtoMessage() {}
func (*AppTypeSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_a428eb293ee50fed, []int{7}
}
func (m *AppTypeSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppTypeSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AppTypeSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppTypeSettings.Merge(m, src)
}
func (m *AppTypeSettings) XXX_Size() int {
	return m.Size()
}
func (m *AppTypeSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_AppTypeSettings.DiscardUnknown(m)
}

var xxx_messageInfo_AppTypeSettings proto.InternalMessageInfo

func (m *AppTypeSettings) GetAppTypeRef() []*schema.ObjectRefType {
	if m != nil {
		return m.AppTypeRef
	}
	return nil
}

func (m *AppTypeSettings) GetTimeseriesAnalysesSetting() *TimeseriesAnalysesSetting {
	if m != nil {
		return m.TimeseriesAnalysesSetting
	}
	return nil
}

func (m *AppTypeSettings) GetBusinessLogicMarkupSetting() *BusinessLogicMarkupSetting {
	if m != nil {
		return m.BusinessLogicMarkupSetting
	}
	return nil
}

func (m *AppTypeSettings) GetUserBehaviorAnalysisSetting() *UserBehaviorAnalysisSetting {
	if m != nil {
		return m.UserBehaviorAnalysisSetting
	}
	return nil
}

// Specification for App setting
//
// x-displayName: "App Setting Spec"
// Shape of App setting specification
type GlobalSpecType struct {
	// List of App types
	//
	// x-displayName: "App Types"
	// List of references to app_type for which monitoring needs to enabled
	AppTypeRefs []*schema.ObjectRefType `protobuf:"bytes,1,rep,name=app_type_refs,json=appTypeRefs,proto3" json:"app_type_refs,omitempty"` // Deprecated: Do not use.
	// List of Anomaly type to be enabled
	//
	// x-displayName: "Anomaly Types"
	// List of Anomaly algorithms that need to be enabled
	AnomalyTypes []AnomalyType `protobuf:"varint,2,rep,packed,name=anomaly_types,json=anomalyTypes,proto3,enum=ves.io.schema.app_setting.AnomalyType" json:"anomaly_types,omitempty"` // Deprecated: Do not use.
	// List of App Type Settings
	//
	// x-displayName: "AppType Settings"
	// x-required
	// List of settings to enable for each AppType, given instance of AppType Exist in this Namespace
	AppTypeSettings []*AppTypeSettings `protobuf:"bytes,3,rep,name=app_type_settings,json=appTypeSettings,proto3" json:"app_type_settings,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_a428eb293ee50fed, []int{8}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

// Deprecated: Do not use.
func (m *GlobalSpecType) GetAppTypeRefs() []*schema.ObjectRefType {
	if m != nil {
		return m.AppTypeRefs
	}
	return nil
}

// Deprecated: Do not use.
func (m *GlobalSpecType) GetAnomalyTypes() []AnomalyType {
	if m != nil {
		return m.AnomalyTypes
	}
	return nil
}

func (m *GlobalSpecType) GetAppTypeSettings() []*AppTypeSettings {
	if m != nil {
		return m.AppTypeSettings
	}
	return nil
}

// Create App setting
//
// x-displayName: "Create App Setting"
// Create App setting configuration in namespace metadata.namespace
type CreateSpecType struct {
	AppTypeRefs     []*schema.ObjectRefType `protobuf:"bytes,1,rep,name=app_type_refs,json=appTypeRefs,proto3" json:"app_type_refs,omitempty"`                                                     // Deprecated: Do not use.
	AnomalyTypes    []AnomalyType           `protobuf:"varint,2,rep,packed,name=anomaly_types,json=anomalyTypes,proto3,enum=ves.io.schema.app_setting.AnomalyType" json:"anomaly_types,omitempty"` // Deprecated: Do not use.
	AppTypeSettings []*AppTypeSettings      `protobuf:"bytes,3,rep,name=app_type_settings,json=appTypeSettings,proto3" json:"app_type_settings,omitempty"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_a428eb293ee50fed, []int{9}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

// Deprecated: Do not use.
func (m *CreateSpecType) GetAppTypeRefs() []*schema.ObjectRefType {
	if m != nil {
		return m.AppTypeRefs
	}
	return nil
}

// Deprecated: Do not use.
func (m *CreateSpecType) GetAnomalyTypes() []AnomalyType {
	if m != nil {
		return m.AnomalyTypes
	}
	return nil
}

func (m *CreateSpecType) GetAppTypeSettings() []*AppTypeSettings {
	if m != nil {
		return m.AppTypeSettings
	}
	return nil
}

// Replace App setting
//
// x-displayName: "Replace App Setting"
// Replacing an App setting will update the configuration by replacing the existing spec with the provided one.
// For read-then-write operations a resourceVersion mismatch will occur if the object was modified between the read and write.
type ReplaceSpecType struct {
	AppTypeRefs     []*schema.ObjectRefType `protobuf:"bytes,1,rep,name=app_type_refs,json=appTypeRefs,proto3" json:"app_type_refs,omitempty"`                                                     // Deprecated: Do not use.
	AnomalyTypes    []AnomalyType           `protobuf:"varint,2,rep,packed,name=anomaly_types,json=anomalyTypes,proto3,enum=ves.io.schema.app_setting.AnomalyType" json:"anomaly_types,omitempty"` // Deprecated: Do not use.
	AppTypeSettings []*AppTypeSettings      `protobuf:"bytes,3,rep,name=app_type_settings,json=appTypeSettings,proto3" json:"app_type_settings,omitempty"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_a428eb293ee50fed, []int{10}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

// Deprecated: Do not use.
func (m *ReplaceSpecType) GetAppTypeRefs() []*schema.ObjectRefType {
	if m != nil {
		return m.AppTypeRefs
	}
	return nil
}

// Deprecated: Do not use.
func (m *ReplaceSpecType) GetAnomalyTypes() []AnomalyType {
	if m != nil {
		return m.AnomalyTypes
	}
	return nil
}

func (m *ReplaceSpecType) GetAppTypeSettings() []*AppTypeSettings {
	if m != nil {
		return m.AppTypeSettings
	}
	return nil
}

// Get App setting
//
// x-displayName: "Get App Setting"
// Get App setting will retrieve the configuration from  namespace metadata.namespace
type GetSpecType struct {
	AppTypeRefs     []*schema.ObjectRefType `protobuf:"bytes,1,rep,name=app_type_refs,json=appTypeRefs,proto3" json:"app_type_refs,omitempty"`                                                     // Deprecated: Do not use.
	AnomalyTypes    []AnomalyType           `protobuf:"varint,2,rep,packed,name=anomaly_types,json=anomalyTypes,proto3,enum=ves.io.schema.app_setting.AnomalyType" json:"anomaly_types,omitempty"` // Deprecated: Do not use.
	AppTypeSettings []*AppTypeSettings      `protobuf:"bytes,3,rep,name=app_type_settings,json=appTypeSettings,proto3" json:"app_type_settings,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_a428eb293ee50fed, []int{11}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

// Deprecated: Do not use.
func (m *GetSpecType) GetAppTypeRefs() []*schema.ObjectRefType {
	if m != nil {
		return m.AppTypeRefs
	}
	return nil
}

// Deprecated: Do not use.
func (m *GetSpecType) GetAnomalyTypes() []AnomalyType {
	if m != nil {
		return m.AnomalyTypes
	}
	return nil
}

func (m *GetSpecType) GetAppTypeSettings() []*AppTypeSettings {
	if m != nil {
		return m.AppTypeSettings
	}
	return nil
}

func init() {
	proto.RegisterEnum("ves.io.schema.app_setting.AnomalyType", AnomalyType_name, AnomalyType_value)
	proto.RegisterEnum("ves.io.schema.app_setting.Metric", Metric_name, Metric_value)
	proto.RegisterEnum("ves.io.schema.app_setting.MetricsSource", MetricsSource_name, MetricsSource_value)
	proto.RegisterType((*TimeseriesAnalysesSetting)(nil), "ves.io.schema.app_setting.TimeseriesAnalysesSetting")
	proto.RegisterType((*MetricSelector)(nil), "ves.io.schema.app_setting.MetricSelector")
	proto.RegisterType((*BusinessLogicMarkupSetting)(nil), "ves.io.schema.app_setting.BusinessLogicMarkupSetting")
	proto.RegisterType((*UserBehaviorAnalysisSetting)(nil), "ves.io.schema.app_setting.UserBehaviorAnalysisSetting")
	proto.RegisterType((*MaliciousUserDetectionSetting)(nil), "ves.io.schema.app_setting.MaliciousUserDetectionSetting")
	proto.RegisterType((*ForbiddenActivitySetting)(nil), "ves.io.schema.app_setting.ForbiddenActivitySetting")
	proto.RegisterType((*FailedLoginActivitySetting)(nil), "ves.io.schema.app_setting.FailedLoginActivitySetting")
	proto.RegisterType((*AppTypeSettings)(nil), "ves.io.schema.app_setting.AppTypeSettings")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.app_setting.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.app_setting.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.app_setting.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.app_setting.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/app_setting/types.proto", fileDescriptor_a428eb293ee50fed)
}

var fileDescriptor_a428eb293ee50fed = []byte{
	// 1520 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x58, 0xcf, 0x6f, 0xdb, 0x46,
	0x16, 0xd6, 0x90, 0xb2, 0xac, 0x3c, 0xc5, 0x12, 0xcd, 0x18, 0x0b, 0x59, 0xb6, 0x05, 0xad, 0xb0,
	0x1b, 0x78, 0xbd, 0xb6, 0x14, 0xdb, 0x9b, 0x20, 0xbb, 0x87, 0x2d, 0x44, 0x47, 0xf1, 0x0f, 0xd8,
	0x56, 0x4a, 0xc9, 0x0e, 0xdc, 0x0b, 0x4b, 0x51, 0x23, 0x99, 0x0d, 0x25, 0xb2, 0x1c, 0xca, 0xb1,
	0x03, 0x04, 0x68, 0x6f, 0xed, 0xad, 0xe8, 0x7f, 0xd0, 0x4b, 0x11, 0xb4, 0xfd, 0x0b, 0xca, 0x1e,
	0x8c, 0x9e, 0x8a, 0x9e, 0x74, 0x34, 0x7a, 0xaa, 0x15, 0xa0, 0x4d, 0x6f, 0x39, 0xf6, 0x58, 0x90,
	0x1c, 0xea, 0x87, 0x6d, 0xd1, 0x39, 0xf4, 0x52, 0x20, 0x17, 0x81, 0xe4, 0x7c, 0xdf, 0xf7, 0xde,
	0xf7, 0xde, 0x70, 0x66, 0x44, 0xf8, 0xe7, 0x11, 0x26, 0x39, 0x55, 0xcf, 0x13, 0xe5, 0x10, 0x37,
	0xe5, 0xbc, 0x6c, 0x18, 0x12, 0xc1, 0x96, 0xa5, 0xb6, 0x1a, 0x79, 0xeb, 0xc4, 0xc0, 0x24, 0x67,
	0x98, 0xba, 0xa5, 0xf3, 0xd3, 0x1e, 0x2c, 0xe7, 0xc1, 0x72, 0x03, 0xb0, 0xd4, 0x52, 0x43, 0xb5,
	0x0e, 0xdb, 0xd5, 0x9c, 0xa2, 0x37, 0xf3, 0x0d, 0xbd, 0xa1, 0xe7, 0x5d, 0x46, 0xb5, 0x5d, 0x77,
	0xef, 0xdc, 0x1b, 0xf7, 0xca, 0x53, 0x4a, 0xcd, 0x0c, 0x07, 0xd4, 0x0d, 0x4b, 0xd5, 0x5b, 0x34,
	0x4c, 0x6a, 0x7a, 0x78, 0x70, 0x20, 0x83, 0xd4, 0xec, 0xf0, 0xd0, 0x91, 0xac, 0xa9, 0x35, 0xd9,
	0xc2, 0x74, 0x34, 0x73, 0x61, 0x54, 0xc5, 0x4f, 0xa5, 0x21, 0xe9, 0xec, 0x73, 0x98, 0xae, 0xa8,
	0x4d, 0x4c, 0xb0, 0xa9, 0x62, 0x52, 0x68, 0xc9, 0xda, 0x09, 0xc1, 0xa4, 0xec, 0x79, 0xe0, 0xdf,
	0x07, 0xae, 0x89, 0x2d, 0x53, 0x55, 0x24, 0x82, 0x35, 0xac, 0x58, 0xba, 0x49, 0x92, 0x28, 0xc3,
	0xce, 0xc7, 0x56, 0xfe, 0x95, 0x1b, 0xe9, 0x3c, 0xb7, 0xe3, 0x52, 0xca, 0x94, 0x21, 0xc0, 0xb7,
	0xbf, 0x9d, 0xb2, 0x63, 0x9f, 0x23, 0x26, 0x89, 0xc4, 0x44, 0x73, 0x68, 0x8c, 0x64, 0x5f, 0x20,
	0x88, 0x0f, 0xe3, 0xf9, 0x12, 0xc4, 0x3d, 0x14, 0x91, 0x88, 0xde, 0x36, 0x15, 0x9c, 0x44, 0x19,
	0x34, 0x1f, 0x5f, 0x99, 0xbf, 0x36, 0x24, 0x29, 0xbb, 0x78, 0x71, 0xa2, 0x39, 0x78, 0xcb, 0x17,
	0x21, 0xe2, 0x3d, 0x48, 0x32, 0x19, 0x76, 0x3e, 0xbe, 0xf2, 0xf7, 0x6b, 0x85, 0x86, 0x72, 0xa6,
	0xe4, 0xec, 0x97, 0x08, 0x52, 0x42, 0x9b, 0xa8, 0x2d, 0x4c, 0xc8, 0xb6, 0xde, 0x50, 0x95, 0x1d,
	0xd9, 0x7c, 0xd2, 0x36, 0xfc, 0x5a, 0xe5, 0x20, 0x82, 0x5b, 0x72, 0x55, 0xf3, 0xd2, 0x8d, 0xad,
	0x4c, 0x5d, 0x88, 0x52, 0x6c, 0x1a, 0xd6, 0xc9, 0x46, 0x48, 0xa4, 0x28, 0xfe, 0x0e, 0x8c, 0xd7,
	0x54, 0xe2, 0x12, 0x98, 0x40, 0x82, 0x0f, 0x13, 0x32, 0x30, 0xa5, 0x61, 0xd9, 0x6c, 0x49, 0x75,
	0x53, 0x6f, 0x4a, 0x2d, 0xb9, 0x89, 0x89, 0x21, 0x2b, 0x98, 0x8f, 0x9e, 0xda, 0x08, 0x75, 0x6c,
	0xc4, 0x6e, 0x85, 0xa3, 0x2c, 0x17, 0xce, 0x7e, 0xc1, 0xc2, 0xcc, 0x1e, 0xc1, 0xa6, 0x80, 0x0f,
	0xe5, 0x23, 0x55, 0x37, 0xbd, 0xae, 0xaa, 0xbd, 0xae, 0xbe, 0x03, 0x09, 0x2f, 0x07, 0xc9, 0x95,
	0x53, 0x5b, 0x8d, 0x6b, 0x52, 0x8e, 0x7b, 0xf0, 0x6d, 0x8a, 0xe6, 0x0b, 0xc0, 0xd1, 0x9c, 0xfa,
	0x0a, 0xc1, 0x1e, 0x12, 0x14, 0xdf, 0x93, 0xc0, 0xc0, 0xd1, 0x1c, 0x6a, 0xd8, 0xc2, 0x8a, 0x33,
	0x23, 0x93, 0xac, 0x2b, 0x71, 0x3f, 0xa8, 0x3b, 0xb2, 0xa6, 0x2a, 0xaa, 0xde, 0x26, 0x8e, 0xbd,
	0x07, 0x3e, 0x91, 0xfa, 0xda, 0x40, 0x22, 0xf5, 0xd5, 0x1b, 0xe1, 0xd7, 0x60, 0xd2, 0xcf, 0xb4,
	0x1f, 0x27, 0x1c, 0x90, 0x2a, 0x12, 0x7d, 0x6b, 0x3d, 0x91, 0x6b, 0xeb, 0x3e, 0x26, 0xfc, 0x03,
	0x92, 0x4d, 0x3f, 0x35, 0xa9, 0x4d, 0xb0, 0xd9, 0x8f, 0xe6, 0xa2, 0xd8, 0x8e, 0x8d, 0x22, 0x5b,
	0xe1, 0xe8, 0x18, 0xe7, 0xfc, 0x46, 0xb8, 0xf1, 0xec, 0xaf, 0x11, 0x98, 0x0b, 0x74, 0xc3, 0x13,
	0x48, 0xa9, 0x2d, 0x45, 0x6b, 0xd7, 0xb0, 0x54, 0xd7, 0xcd, 0xaa, 0x5a, 0xab, 0xe1, 0x96, 0x24,
	0x2b, 0x96, 0x7a, 0xa4, 0x5a, 0x27, 0xb4, 0xdc, 0xab, 0x01, 0xb5, 0x7a, 0xe8, 0x93, 0x0a, 0x94,
	0xe3, 0x97, 0x29, 0x24, 0x26, 0xa9, 0xf0, 0x25, 0x08, 0x5f, 0x81, 0x14, 0x3e, 0x1e, 0x19, 0x94,
	0x0d, 0xec, 0x71, 0x92, 0x32, 0x2f, 0xab, 0x3e, 0x83, 0xb9, 0x9e, 0x15, 0x59, 0xd5, 0x70, 0x4d,
	0xd2, 0xf4, 0x86, 0x3a, 0x20, 0x3c, 0xe6, 0x0a, 0xdf, 0x0d, 0x72, 0xe3, 0xf2, 0x9c, 0xd7, 0xee,
	0x92, 0x1f, 0x24, 0xfa, 0x85, 0xba, 0x02, 0xc4, 0x1f, 0xc0, 0x5c, 0xcf, 0xd1, 0x95, 0xb1, 0x23,
	0x81, 0xb3, 0xc1, 0x2f, 0xc7, 0x55, 0xd2, 0x1b, 0x30, 0xe5, 0xdb, 0x7a, 0x2a, 0xd7, 0xfb, 0x8a,
	0xd1, 0x00, 0x45, 0x46, 0xe4, 0x29, 0xe7, 0xb1, 0x5c, 0x1f, 0x54, 0xf2, 0x93, 0x1c, 0x52, 0xba,
	0x11, 0xac, 0x44, 0x39, 0x83, 0x4a, 0x6b, 0xc0, 0x2b, 0xba, 0xae, 0xa9, 0xad, 0x86, 0xa4, 0xd7,
	0xeb, 0x92, 0x81, 0x4d, 0x55, 0xaf, 0x25, 0x63, 0x19, 0x34, 0x3f, 0x21, 0xdc, 0xfa, 0xc9, 0x46,
	0xcc, 0xca, 0x9d, 0x4f, 0xbe, 0x43, 0x8c, 0xb3, 0xbc, 0x85, 0x17, 0x98, 0xe4, 0xf1, 0x06, 0x2b,
	0x72, 0x94, 0x50, 0xaa, 0xd7, 0x1f, 0xb9, 0x70, 0x61, 0x11, 0xa6, 0x2f, 0x77, 0x5f, 0x52, 0x0e,
	0x75, 0x55, 0xc1, 0x7c, 0xe2, 0xd4, 0x46, 0x4c, 0xc7, 0x46, 0xa8, 0x6b, 0x23, 0x76, 0x65, 0x71,
	0x55, 0xc8, 0xc3, 0xec, 0x95, 0x95, 0x1d, 0x24, 0x8c, 0x75, 0x6c, 0x14, 0x76, 0x08, 0x77, 0x17,
	0xef, 0x09, 0xb7, 0xe1, 0xd6, 0xa0, 0xcb, 0x41, 0x5c, 0xb4, 0x63, 0xa3, 0x71, 0x07, 0x77, 0x7f,
	0xf1, 0xbf, 0xc2, 0x22, 0xa4, 0x2e, 0x7b, 0xf1, 0x67, 0x04, 0x1f, 0x3f, 0xb5, 0x51, 0xac, 0x63,
	0x23, 0xe8, 0xda, 0x88, 0x59, 0x5e, 0xde, 0x0a, 0x47, 0x11, 0xc7, 0x6c, 0x85, 0xa3, 0x61, 0x6e,
	0x6c, 0x2b, 0x1c, 0x1d, 0xe7, 0xa2, 0x5b, 0xe1, 0x28, 0x70, 0xb1, 0xec, 0x13, 0x48, 0x8e, 0x7a,
	0x15, 0xf8, 0x12, 0xcc, 0xf6, 0x8d, 0x9a, 0xf8, 0xc3, 0x36, 0x26, 0x16, 0x91, 0xac, 0x43, 0x13,
	0x93, 0x43, 0x5d, 0xab, 0xb9, 0x2b, 0xc5, 0x84, 0x30, 0xe1, 0xd4, 0x6d, 0xf9, 0x8e, 0x53, 0x33,
	0x66, 0x21, 0x24, 0xa6, 0x7a, 0x14, 0x91, 0x32, 0x2a, 0x3e, 0x21, 0x8b, 0x21, 0x35, 0x7a, 0xa6,
	0xf2, 0xeb, 0x90, 0xf4, 0x4a, 0xe4, 0xd4, 0xab, 0x6d, 0xe2, 0x6b, 0x43, 0xfd, 0xcd, 0x85, 0x3f,
	0xa4, 0xe8, 0x7e, 0x98, 0x5f, 0x58, 0x48, 0x14, 0x0c, 0xa3, 0x72, 0x62, 0x60, 0xaa, 0x4d, 0xf8,
	0x03, 0xb8, 0xe9, 0xbc, 0x30, 0xce, 0xd9, 0x40, 0x32, 0x71, 0x9d, 0xee, 0xd3, 0xb3, 0x17, 0xe6,
	0x4e, 0xa9, 0xfa, 0x01, 0x56, 0x2c, 0x11, 0xd7, 0x1d, 0xae, 0x30, 0xfd, 0xd5, 0xf3, 0xa8, 0x4f,
	0xfa, 0xdd, 0x46, 0x21, 0x7f, 0xd7, 0xe3, 0x90, 0x08, 0xb2, 0xa7, 0x2f, 0xe2, 0x3a, 0xff, 0x0c,
	0x66, 0xac, 0xde, 0x19, 0x41, 0x92, 0xe9, 0x21, 0xc1, 0xef, 0x04, 0x5d, 0x8b, 0xfe, 0x13, 0xf0,
	0xf6, 0x8e, 0x3c, 0x61, 0x08, 0x61, 0x67, 0x26, 0x89, 0xd3, 0xd6, 0xc8, 0x23, 0xc8, 0x31, 0xcc,
	0x55, 0xe9, 0xa6, 0xeb, 0xce, 0x2f, 0x45, 0x6a, 0xba, 0xdb, 0x6e, 0x2f, 0x3a, 0x7b, 0xed, 0xda,
	0x31, 0x7a, 0xd3, 0x16, 0x53, 0xd5, 0xd1, 0x1b, 0xfa, 0xc7, 0x08, 0xd2, 0xee, 0x5a, 0x5e, 0xa5,
	0xfb, 0x28, 0x75, 0xae, 0xf6, 0x9d, 0x7b, 0x3b, 0xc9, 0xbd, 0x80, 0xd8, 0x01, 0xfb, 0x30, 0xf5,
	0x3e, 0xd3, 0x1e, 0x0d, 0xc9, 0x9e, 0x33, 0x10, 0x5f, 0xd7, 0xf4, 0xaa, 0xac, 0x95, 0x0d, 0xac,
	0x38, 0xfd, 0xe0, 0xf7, 0x61, 0x62, 0xb0, 0xcf, 0xe4, 0x8d, 0x1a, 0x3d, 0x35, 0xd0, 0xe8, 0xb3,
	0xe7, 0xe8, 0x95, 0x8d, 0x50, 0x12, 0x89, 0xb1, 0x7e, 0x8f, 0x89, 0xab, 0xdb, 0xd2, 0x9b, 0xb2,
	0x76, 0xe2, 0xa2, 0x08, 0x3d, 0x2c, 0xdd, 0x0e, 0x30, 0x57, 0xf0, 0xf0, 0x6e, 0x84, 0x1b, 0x7d,
	0xd9, 0x9b, 0x72, 0xff, 0x39, 0xe1, 0x35, 0x98, 0xec, 0xe5, 0x4b, 0x89, 0x24, 0xc9, 0xba, 0x39,
	0x2f, 0x04, 0x69, 0x0f, 0x4f, 0x6f, 0x61, 0xaa, 0x37, 0x37, 0x39, 0xff, 0x2a, 0x8a, 0xc4, 0x84,
	0x3c, 0x0c, 0xfb, 0xdf, 0xf2, 0xf7, 0x36, 0x5a, 0x82, 0x7f, 0xc3, 0xed, 0x82, 0x61, 0x68, 0xaa,
	0x22, 0x3b, 0x3b, 0x6a, 0xc6, 0x41, 0x64, 0x1e, 0x62, 0xd9, 0x6a, 0x9b, 0x38, 0xb3, 0xa6, 0xb7,
	0xea, 0x6a, 0xa3, 0x6d, 0xba, 0x43, 0x3c, 0x5a, 0xcd, 0x7e, 0xcd, 0x40, 0x7c, 0xcd, 0xc4, 0xb2,
	0x85, 0xff, 0xb2, 0x35, 0xde, 0xff, 0x53, 0x6a, 0x7c, 0xb9, 0x9a, 0x93, 0x3f, 0xfe, 0xff, 0xc2,
	0xf4, 0xcb, 0x7e, 0xc3, 0x40, 0x42, 0xc4, 0x86, 0x26, 0x2b, 0x6f, 0xcb, 0xf5, 0x06, 0xe5, 0x7a,
	0xc1, 0x40, 0x6c, 0x1d, 0x5b, 0x6f, 0x4b, 0x75, 0x6d, 0xa9, 0x16, 0x6a, 0x10, 0x1b, 0x48, 0x89,
	0xe7, 0xe0, 0x66, 0x61, 0xb7, 0xb4, 0x53, 0xd8, 0x3e, 0x90, 0x76, 0x4b, 0xbb, 0x45, 0x2e, 0x34,
	0xf8, 0xa4, 0xbc, 0x59, 0x29, 0x72, 0x88, 0xbf, 0x05, 0x89, 0xde, 0x93, 0xa2, 0xb8, 0xbf, 0xb9,
	0x56, 0xe4, 0x18, 0x7e, 0x16, 0x92, 0x17, 0x1e, 0x4a, 0x8f, 0x8a, 0xa2, 0x47, 0x61, 0x17, 0x1e,
	0x43, 0xc4, 0xfb, 0x8f, 0xc7, 0xc7, 0x01, 0x76, 0x4b, 0xd2, 0x4e, 0xb1, 0x22, 0x6e, 0xae, 0x95,
	0x3d, 0x79, 0xb1, 0xf8, 0xee, 0x5e, 0xb1, 0x5c, 0x91, 0xc4, 0x82, 0x2b, 0x1f, 0x07, 0x28, 0x8a,
	0x62, 0x49, 0xf4, 0xee, 0x19, 0x3e, 0x06, 0xe3, 0xdb, 0x85, 0x4a, 0x71, 0x77, 0xed, 0x80, 0x63,
	0x9d, 0xc1, 0xca, 0x86, 0x58, 0xda, 0x5b, 0xdf, 0x78, 0xb4, 0x57, 0xe1, 0xc2, 0x0b, 0x02, 0x4c,
	0x0c, 0xfd, 0x0b, 0xe5, 0xa3, 0x10, 0xa6, 0x89, 0xdf, 0x80, 0xb1, 0xdd, 0xd2, 0x83, 0x62, 0x99,
	0x43, 0xce, 0x65, 0xf1, 0xc1, 0x7a, 0xb1, 0xcc, 0x31, 0xfc, 0x24, 0x4c, 0xec, 0x6f, 0x8a, 0x95,
	0xbd, 0xc2, 0xb6, 0xb4, 0x51, 0x2a, 0x57, 0xca, 0x1c, 0x2b, 0x7c, 0x8a, 0x3a, 0xe7, 0xe9, 0xd0,
	0xd9, 0x79, 0x3a, 0xf4, 0xfa, 0x3c, 0x8d, 0x3e, 0xea, 0xa6, 0xd1, 0x8b, 0x6e, 0x1a, 0xfd, 0xd0,
	0x4d, 0xa3, 0x4e, 0x37, 0x8d, 0xce, 0xba, 0x69, 0xf4, 0x73, 0x37, 0x8d, 0x5e, 0x75, 0xd3, 0xa1,
	0xd7, 0xdd, 0x34, 0xfa, 0xec, 0x65, 0x3a, 0xd4, 0x79, 0x99, 0x0e, 0x9d, 0xbd, 0x4c, 0x87, 0xde,
	0x2b, 0x35, 0x74, 0xe3, 0x49, 0x23, 0x77, 0xa4, 0x6b, 0x16, 0x36, 0x4d, 0x39, 0xd7, 0x26, 0x79,
	0xf7, 0xa2, 0xae, 0x9b, 0xcd, 0x25, 0xc3, 0xd4, 0x8f, 0xd4, 0x1a, 0x36, 0x97, 0xfc, 0xe1, 0xbc,
	0x51, 0x6d, 0xe8, 0x79, 0x7c, 0x6c, 0xd1, 0x0f, 0x03, 0x97, 0x3f, 0x73, 0x54, 0x23, 0xee, 0xf7,
	0x81, 0xd5, 0x3f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xc8, 0xa4, 0xb2, 0x13, 0x0a, 0x11, 0x00, 0x00,
}

func (x AnomalyType) String() string {
	s, ok := AnomalyType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Metric) String() string {
	s, ok := Metric_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x MetricsSource) String() string {
	s, ok := MetricsSource_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *TimeseriesAnalysesSetting) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TimeseriesAnalysesSetting)
	if !ok {
		that2, ok := that.(TimeseriesAnalysesSetting)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.MetricSelectors) != len(that1.MetricSelectors) {
		return false
	}
	for i := range this.MetricSelectors {
		if !this.MetricSelectors[i].Equal(that1.MetricSelectors[i]) {
			return false
		}
	}
	return true
}
func (this *MetricSelector) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MetricSelector)
	if !ok {
		that2, ok := that.(MetricSelector)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MetricsSource != that1.MetricsSource {
		return false
	}
	if len(this.Metric) != len(that1.Metric) {
		return false
	}
	for i := range this.Metric {
		if this.Metric[i] != that1.Metric[i] {
			return false
		}
	}
	return true
}
func (this *BusinessLogicMarkupSetting) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BusinessLogicMarkupSetting)
	if !ok {
		that2, ok := that.(BusinessLogicMarkupSetting)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.LearnFromNamespace == nil {
		if this.LearnFromNamespace != nil {
			return false
		}
	} else if this.LearnFromNamespace == nil {
		return false
	} else if !this.LearnFromNamespace.Equal(that1.LearnFromNamespace) {
		return false
	}
	return true
}
func (this *BusinessLogicMarkupSetting_Enable) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BusinessLogicMarkupSetting_Enable)
	if !ok {
		that2, ok := that.(BusinessLogicMarkupSetting_Enable)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Enable.Equal(that1.Enable) {
		return false
	}
	return true
}
func (this *BusinessLogicMarkupSetting_Disable) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BusinessLogicMarkupSetting_Disable)
	if !ok {
		that2, ok := that.(BusinessLogicMarkupSetting_Disable)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Disable.Equal(that1.Disable) {
		return false
	}
	return true
}
func (this *UserBehaviorAnalysisSetting) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserBehaviorAnalysisSetting)
	if !ok {
		that2, ok := that.(UserBehaviorAnalysisSetting)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.LearnFromNamespace == nil {
		if this.LearnFromNamespace != nil {
			return false
		}
	} else if this.LearnFromNamespace == nil {
		return false
	} else if !this.LearnFromNamespace.Equal(that1.LearnFromNamespace) {
		return false
	}
	if that1.MaliciousUserDetection == nil {
		if this.MaliciousUserDetection != nil {
			return false
		}
	} else if this.MaliciousUserDetection == nil {
		return false
	} else if !this.MaliciousUserDetection.Equal(that1.MaliciousUserDetection) {
		return false
	}
	return true
}
func (this *UserBehaviorAnalysisSetting_EnableLearning) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserBehaviorAnalysisSetting_EnableLearning)
	if !ok {
		that2, ok := that.(UserBehaviorAnalysisSetting_EnableLearning)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableLearning.Equal(that1.EnableLearning) {
		return false
	}
	return true
}
func (this *UserBehaviorAnalysisSetting_DisableLearning) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserBehaviorAnalysisSetting_DisableLearning)
	if !ok {
		that2, ok := that.(UserBehaviorAnalysisSetting_DisableLearning)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableLearning.Equal(that1.DisableLearning) {
		return false
	}
	return true
}
func (this *UserBehaviorAnalysisSetting_EnableDetection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserBehaviorAnalysisSetting_EnableDetection)
	if !ok {
		that2, ok := that.(UserBehaviorAnalysisSetting_EnableDetection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableDetection.Equal(that1.EnableDetection) {
		return false
	}
	return true
}
func (this *UserBehaviorAnalysisSetting_DisableDetection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserBehaviorAnalysisSetting_DisableDetection)
	if !ok {
		that2, ok := that.(UserBehaviorAnalysisSetting_DisableDetection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableDetection.Equal(that1.DisableDetection) {
		return false
	}
	return true
}
func (this *MaliciousUserDetectionSetting) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MaliciousUserDetectionSetting)
	if !ok {
		that2, ok := that.(MaliciousUserDetectionSetting)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ForbiddenActivityChoice == nil {
		if this.ForbiddenActivityChoice != nil {
			return false
		}
	} else if this.ForbiddenActivityChoice == nil {
		return false
	} else if !this.ForbiddenActivityChoice.Equal(that1.ForbiddenActivityChoice) {
		return false
	}
	if that1.FailedLoginActivityChoice == nil {
		if this.FailedLoginActivityChoice != nil {
			return false
		}
	} else if this.FailedLoginActivityChoice == nil {
		return false
	} else if !this.FailedLoginActivityChoice.Equal(that1.FailedLoginActivityChoice) {
		return false
	}
	if that1.WafActivityChoice == nil {
		if this.WafActivityChoice != nil {
			return false
		}
	} else if this.WafActivityChoice == nil {
		return false
	} else if !this.WafActivityChoice.Equal(that1.WafActivityChoice) {
		return false
	}
	if that1.CoolingOffPeriodSetting == nil {
		if this.CoolingOffPeriodSetting != nil {
			return false
		}
	} else if this.CoolingOffPeriodSetting == nil {
		return false
	} else if !this.CoolingOffPeriodSetting.Equal(that1.CoolingOffPeriodSetting) {
		return false
	}
	return true
}
func (this *MaliciousUserDetectionSetting_IncludeForbiddenActivity) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MaliciousUserDetectionSetting_IncludeForbiddenActivity)
	if !ok {
		that2, ok := that.(MaliciousUserDetectionSetting_IncludeForbiddenActivity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IncludeForbiddenActivity.Equal(that1.IncludeForbiddenActivity) {
		return false
	}
	return true
}
func (this *MaliciousUserDetectionSetting_ExcludeForbiddenActivity) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MaliciousUserDetectionSetting_ExcludeForbiddenActivity)
	if !ok {
		that2, ok := that.(MaliciousUserDetectionSetting_ExcludeForbiddenActivity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ExcludeForbiddenActivity.Equal(that1.ExcludeForbiddenActivity) {
		return false
	}
	return true
}
func (this *MaliciousUserDetectionSetting_IncludeFailedLoginActivity) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MaliciousUserDetectionSetting_IncludeFailedLoginActivity)
	if !ok {
		that2, ok := that.(MaliciousUserDetectionSetting_IncludeFailedLoginActivity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IncludeFailedLoginActivity.Equal(that1.IncludeFailedLoginActivity) {
		return false
	}
	return true
}
func (this *MaliciousUserDetectionSetting_ExcludeFailedLoginActivity) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MaliciousUserDetectionSetting_ExcludeFailedLoginActivity)
	if !ok {
		that2, ok := that.(MaliciousUserDetectionSetting_ExcludeFailedLoginActivity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ExcludeFailedLoginActivity.Equal(that1.ExcludeFailedLoginActivity) {
		return false
	}
	return true
}
func (this *MaliciousUserDetectionSetting_IncludeWafActivity) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MaliciousUserDetectionSetting_IncludeWafActivity)
	if !ok {
		that2, ok := that.(MaliciousUserDetectionSetting_IncludeWafActivity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IncludeWafActivity.Equal(that1.IncludeWafActivity) {
		return false
	}
	return true
}
func (this *MaliciousUserDetectionSetting_ExcludeWafActivity) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MaliciousUserDetectionSetting_ExcludeWafActivity)
	if !ok {
		that2, ok := that.(MaliciousUserDetectionSetting_ExcludeWafActivity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ExcludeWafActivity.Equal(that1.ExcludeWafActivity) {
		return false
	}
	return true
}
func (this *MaliciousUserDetectionSetting_CoolingOffPeriod) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MaliciousUserDetectionSetting_CoolingOffPeriod)
	if !ok {
		that2, ok := that.(MaliciousUserDetectionSetting_CoolingOffPeriod)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CoolingOffPeriod != that1.CoolingOffPeriod {
		return false
	}
	return true
}
func (this *ForbiddenActivitySetting) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForbiddenActivitySetting)
	if !ok {
		that2, ok := that.(ForbiddenActivitySetting)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ForbiddenRequestsThreshold != that1.ForbiddenRequestsThreshold {
		return false
	}
	return true
}
func (this *FailedLoginActivitySetting) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FailedLoginActivitySetting)
	if !ok {
		that2, ok := that.(FailedLoginActivitySetting)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LoginFailuresThreshold != that1.LoginFailuresThreshold {
		return false
	}
	return true
}
func (this *AppTypeSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AppTypeSettings)
	if !ok {
		that2, ok := that.(AppTypeSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.AppTypeRef) != len(that1.AppTypeRef) {
		return false
	}
	for i := range this.AppTypeRef {
		if !this.AppTypeRef[i].Equal(that1.AppTypeRef[i]) {
			return false
		}
	}
	if !this.TimeseriesAnalysesSetting.Equal(that1.TimeseriesAnalysesSetting) {
		return false
	}
	if !this.BusinessLogicMarkupSetting.Equal(that1.BusinessLogicMarkupSetting) {
		return false
	}
	if !this.UserBehaviorAnalysisSetting.Equal(that1.UserBehaviorAnalysisSetting) {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.AppTypeRefs) != len(that1.AppTypeRefs) {
		return false
	}
	for i := range this.AppTypeRefs {
		if !this.AppTypeRefs[i].Equal(that1.AppTypeRefs[i]) {
			return false
		}
	}
	if len(this.AnomalyTypes) != len(that1.AnomalyTypes) {
		return false
	}
	for i := range this.AnomalyTypes {
		if this.AnomalyTypes[i] != that1.AnomalyTypes[i] {
			return false
		}
	}
	if len(this.AppTypeSettings) != len(that1.AppTypeSettings) {
		return false
	}
	for i := range this.AppTypeSettings {
		if !this.AppTypeSettings[i].Equal(that1.AppTypeSettings[i]) {
			return false
		}
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.AppTypeRefs) != len(that1.AppTypeRefs) {
		return false
	}
	for i := range this.AppTypeRefs {
		if !this.AppTypeRefs[i].Equal(that1.AppTypeRefs[i]) {
			return false
		}
	}
	if len(this.AnomalyTypes) != len(that1.AnomalyTypes) {
		return false
	}
	for i := range this.AnomalyTypes {
		if this.AnomalyTypes[i] != that1.AnomalyTypes[i] {
			return false
		}
	}
	if len(this.AppTypeSettings) != len(that1.AppTypeSettings) {
		return false
	}
	for i := range this.AppTypeSettings {
		if !this.AppTypeSettings[i].Equal(that1.AppTypeSettings[i]) {
			return false
		}
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.AppTypeRefs) != len(that1.AppTypeRefs) {
		return false
	}
	for i := range this.AppTypeRefs {
		if !this.AppTypeRefs[i].Equal(that1.AppTypeRefs[i]) {
			return false
		}
	}
	if len(this.AnomalyTypes) != len(that1.AnomalyTypes) {
		return false
	}
	for i := range this.AnomalyTypes {
		if this.AnomalyTypes[i] != that1.AnomalyTypes[i] {
			return false
		}
	}
	if len(this.AppTypeSettings) != len(that1.AppTypeSettings) {
		return false
	}
	for i := range this.AppTypeSettings {
		if !this.AppTypeSettings[i].Equal(that1.AppTypeSettings[i]) {
			return false
		}
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.AppTypeRefs) != len(that1.AppTypeRefs) {
		return false
	}
	for i := range this.AppTypeRefs {
		if !this.AppTypeRefs[i].Equal(that1.AppTypeRefs[i]) {
			return false
		}
	}
	if len(this.AnomalyTypes) != len(that1.AnomalyTypes) {
		return false
	}
	for i := range this.AnomalyTypes {
		if this.AnomalyTypes[i] != that1.AnomalyTypes[i] {
			return false
		}
	}
	if len(this.AppTypeSettings) != len(that1.AppTypeSettings) {
		return false
	}
	for i := range this.AppTypeSettings {
		if !this.AppTypeSettings[i].Equal(that1.AppTypeSettings[i]) {
			return false
		}
	}
	return true
}
func (this *TimeseriesAnalysesSetting) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&app_setting.TimeseriesAnalysesSetting{")
	if this.MetricSelectors != nil {
		s = append(s, "MetricSelectors: "+fmt.Sprintf("%#v", this.MetricSelectors)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MetricSelector) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&app_setting.MetricSelector{")
	s = append(s, "MetricsSource: "+fmt.Sprintf("%#v", this.MetricsSource)+",\n")
	s = append(s, "Metric: "+fmt.Sprintf("%#v", this.Metric)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BusinessLogicMarkupSetting) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&app_setting.BusinessLogicMarkupSetting{")
	if this.LearnFromNamespace != nil {
		s = append(s, "LearnFromNamespace: "+fmt.Sprintf("%#v", this.LearnFromNamespace)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BusinessLogicMarkupSetting_Enable) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_setting.BusinessLogicMarkupSetting_Enable{` +
		`Enable:` + fmt.Sprintf("%#v", this.Enable) + `}`}, ", ")
	return s
}
func (this *BusinessLogicMarkupSetting_Disable) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_setting.BusinessLogicMarkupSetting_Disable{` +
		`Disable:` + fmt.Sprintf("%#v", this.Disable) + `}`}, ", ")
	return s
}
func (this *UserBehaviorAnalysisSetting) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&app_setting.UserBehaviorAnalysisSetting{")
	if this.LearnFromNamespace != nil {
		s = append(s, "LearnFromNamespace: "+fmt.Sprintf("%#v", this.LearnFromNamespace)+",\n")
	}
	if this.MaliciousUserDetection != nil {
		s = append(s, "MaliciousUserDetection: "+fmt.Sprintf("%#v", this.MaliciousUserDetection)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UserBehaviorAnalysisSetting_EnableLearning) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_setting.UserBehaviorAnalysisSetting_EnableLearning{` +
		`EnableLearning:` + fmt.Sprintf("%#v", this.EnableLearning) + `}`}, ", ")
	return s
}
func (this *UserBehaviorAnalysisSetting_DisableLearning) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_setting.UserBehaviorAnalysisSetting_DisableLearning{` +
		`DisableLearning:` + fmt.Sprintf("%#v", this.DisableLearning) + `}`}, ", ")
	return s
}
func (this *UserBehaviorAnalysisSetting_EnableDetection) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_setting.UserBehaviorAnalysisSetting_EnableDetection{` +
		`EnableDetection:` + fmt.Sprintf("%#v", this.EnableDetection) + `}`}, ", ")
	return s
}
func (this *UserBehaviorAnalysisSetting_DisableDetection) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_setting.UserBehaviorAnalysisSetting_DisableDetection{` +
		`DisableDetection:` + fmt.Sprintf("%#v", this.DisableDetection) + `}`}, ", ")
	return s
}
func (this *MaliciousUserDetectionSetting) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&app_setting.MaliciousUserDetectionSetting{")
	if this.ForbiddenActivityChoice != nil {
		s = append(s, "ForbiddenActivityChoice: "+fmt.Sprintf("%#v", this.ForbiddenActivityChoice)+",\n")
	}
	if this.FailedLoginActivityChoice != nil {
		s = append(s, "FailedLoginActivityChoice: "+fmt.Sprintf("%#v", this.FailedLoginActivityChoice)+",\n")
	}
	if this.WafActivityChoice != nil {
		s = append(s, "WafActivityChoice: "+fmt.Sprintf("%#v", this.WafActivityChoice)+",\n")
	}
	if this.CoolingOffPeriodSetting != nil {
		s = append(s, "CoolingOffPeriodSetting: "+fmt.Sprintf("%#v", this.CoolingOffPeriodSetting)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MaliciousUserDetectionSetting_IncludeForbiddenActivity) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_setting.MaliciousUserDetectionSetting_IncludeForbiddenActivity{` +
		`IncludeForbiddenActivity:` + fmt.Sprintf("%#v", this.IncludeForbiddenActivity) + `}`}, ", ")
	return s
}
func (this *MaliciousUserDetectionSetting_ExcludeForbiddenActivity) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_setting.MaliciousUserDetectionSetting_ExcludeForbiddenActivity{` +
		`ExcludeForbiddenActivity:` + fmt.Sprintf("%#v", this.ExcludeForbiddenActivity) + `}`}, ", ")
	return s
}
func (this *MaliciousUserDetectionSetting_IncludeFailedLoginActivity) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_setting.MaliciousUserDetectionSetting_IncludeFailedLoginActivity{` +
		`IncludeFailedLoginActivity:` + fmt.Sprintf("%#v", this.IncludeFailedLoginActivity) + `}`}, ", ")
	return s
}
func (this *MaliciousUserDetectionSetting_ExcludeFailedLoginActivity) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_setting.MaliciousUserDetectionSetting_ExcludeFailedLoginActivity{` +
		`ExcludeFailedLoginActivity:` + fmt.Sprintf("%#v", this.ExcludeFailedLoginActivity) + `}`}, ", ")
	return s
}
func (this *MaliciousUserDetectionSetting_IncludeWafActivity) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_setting.MaliciousUserDetectionSetting_IncludeWafActivity{` +
		`IncludeWafActivity:` + fmt.Sprintf("%#v", this.IncludeWafActivity) + `}`}, ", ")
	return s
}
func (this *MaliciousUserDetectionSetting_ExcludeWafActivity) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_setting.MaliciousUserDetectionSetting_ExcludeWafActivity{` +
		`ExcludeWafActivity:` + fmt.Sprintf("%#v", this.ExcludeWafActivity) + `}`}, ", ")
	return s
}
func (this *MaliciousUserDetectionSetting_CoolingOffPeriod) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_setting.MaliciousUserDetectionSetting_CoolingOffPeriod{` +
		`CoolingOffPeriod:` + fmt.Sprintf("%#v", this.CoolingOffPeriod) + `}`}, ", ")
	return s
}
func (this *ForbiddenActivitySetting) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&app_setting.ForbiddenActivitySetting{")
	s = append(s, "ForbiddenRequestsThreshold: "+fmt.Sprintf("%#v", this.ForbiddenRequestsThreshold)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FailedLoginActivitySetting) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&app_setting.FailedLoginActivitySetting{")
	s = append(s, "LoginFailuresThreshold: "+fmt.Sprintf("%#v", this.LoginFailuresThreshold)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AppTypeSettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&app_setting.AppTypeSettings{")
	if this.AppTypeRef != nil {
		s = append(s, "AppTypeRef: "+fmt.Sprintf("%#v", this.AppTypeRef)+",\n")
	}
	if this.TimeseriesAnalysesSetting != nil {
		s = append(s, "TimeseriesAnalysesSetting: "+fmt.Sprintf("%#v", this.TimeseriesAnalysesSetting)+",\n")
	}
	if this.BusinessLogicMarkupSetting != nil {
		s = append(s, "BusinessLogicMarkupSetting: "+fmt.Sprintf("%#v", this.BusinessLogicMarkupSetting)+",\n")
	}
	if this.UserBehaviorAnalysisSetting != nil {
		s = append(s, "UserBehaviorAnalysisSetting: "+fmt.Sprintf("%#v", this.UserBehaviorAnalysisSetting)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&app_setting.GlobalSpecType{")
	if this.AppTypeRefs != nil {
		s = append(s, "AppTypeRefs: "+fmt.Sprintf("%#v", this.AppTypeRefs)+",\n")
	}
	s = append(s, "AnomalyTypes: "+fmt.Sprintf("%#v", this.AnomalyTypes)+",\n")
	if this.AppTypeSettings != nil {
		s = append(s, "AppTypeSettings: "+fmt.Sprintf("%#v", this.AppTypeSettings)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&app_setting.CreateSpecType{")
	if this.AppTypeRefs != nil {
		s = append(s, "AppTypeRefs: "+fmt.Sprintf("%#v", this.AppTypeRefs)+",\n")
	}
	s = append(s, "AnomalyTypes: "+fmt.Sprintf("%#v", this.AnomalyTypes)+",\n")
	if this.AppTypeSettings != nil {
		s = append(s, "AppTypeSettings: "+fmt.Sprintf("%#v", this.AppTypeSettings)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&app_setting.ReplaceSpecType{")
	if this.AppTypeRefs != nil {
		s = append(s, "AppTypeRefs: "+fmt.Sprintf("%#v", this.AppTypeRefs)+",\n")
	}
	s = append(s, "AnomalyTypes: "+fmt.Sprintf("%#v", this.AnomalyTypes)+",\n")
	if this.AppTypeSettings != nil {
		s = append(s, "AppTypeSettings: "+fmt.Sprintf("%#v", this.AppTypeSettings)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&app_setting.GetSpecType{")
	if this.AppTypeRefs != nil {
		s = append(s, "AppTypeRefs: "+fmt.Sprintf("%#v", this.AppTypeRefs)+",\n")
	}
	s = append(s, "AnomalyTypes: "+fmt.Sprintf("%#v", this.AnomalyTypes)+",\n")
	if this.AppTypeSettings != nil {
		s = append(s, "AppTypeSettings: "+fmt.Sprintf("%#v", this.AppTypeSettings)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *TimeseriesAnalysesSetting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimeseriesAnalysesSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TimeseriesAnalysesSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MetricSelectors) > 0 {
		for iNdEx := len(m.MetricSelectors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MetricSelectors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MetricSelector) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetricSelector) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetricSelector) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Metric) > 0 {
		dAtA2 := make([]byte, len(m.Metric)*10)
		var j1 int
		for _, num := range m.Metric {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintTypes(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x12
	}
	if m.MetricsSource != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MetricsSource))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BusinessLogicMarkupSetting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BusinessLogicMarkupSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BusinessLogicMarkupSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LearnFromNamespace != nil {
		{
			size := m.LearnFromNamespace.Size()
			i -= size
			if _, err := m.LearnFromNamespace.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *BusinessLogicMarkupSetting_Enable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BusinessLogicMarkupSetting_Enable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Enable != nil {
		{
			size, err := m.Enable.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *BusinessLogicMarkupSetting_Disable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BusinessLogicMarkupSetting_Disable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Disable != nil {
		{
			size, err := m.Disable.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *UserBehaviorAnalysisSetting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserBehaviorAnalysisSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserBehaviorAnalysisSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaliciousUserDetection != nil {
		{
			size := m.MaliciousUserDetection.Size()
			i -= size
			if _, err := m.MaliciousUserDetection.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.LearnFromNamespace != nil {
		{
			size := m.LearnFromNamespace.Size()
			i -= size
			if _, err := m.LearnFromNamespace.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *UserBehaviorAnalysisSetting_EnableLearning) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserBehaviorAnalysisSetting_EnableLearning) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableLearning != nil {
		{
			size, err := m.EnableLearning.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *UserBehaviorAnalysisSetting_DisableLearning) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserBehaviorAnalysisSetting_DisableLearning) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableLearning != nil {
		{
			size, err := m.DisableLearning.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *UserBehaviorAnalysisSetting_EnableDetection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserBehaviorAnalysisSetting_EnableDetection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableDetection != nil {
		{
			size, err := m.EnableDetection.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *UserBehaviorAnalysisSetting_DisableDetection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserBehaviorAnalysisSetting_DisableDetection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableDetection != nil {
		{
			size, err := m.DisableDetection.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *MaliciousUserDetectionSetting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MaliciousUserDetectionSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MaliciousUserDetectionSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CoolingOffPeriodSetting != nil {
		{
			size := m.CoolingOffPeriodSetting.Size()
			i -= size
			if _, err := m.CoolingOffPeriodSetting.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.WafActivityChoice != nil {
		{
			size := m.WafActivityChoice.Size()
			i -= size
			if _, err := m.WafActivityChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.FailedLoginActivityChoice != nil {
		{
			size := m.FailedLoginActivityChoice.Size()
			i -= size
			if _, err := m.FailedLoginActivityChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ForbiddenActivityChoice != nil {
		{
			size := m.ForbiddenActivityChoice.Size()
			i -= size
			if _, err := m.ForbiddenActivityChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *MaliciousUserDetectionSetting_IncludeForbiddenActivity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MaliciousUserDetectionSetting_IncludeForbiddenActivity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IncludeForbiddenActivity != nil {
		{
			size, err := m.IncludeForbiddenActivity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *MaliciousUserDetectionSetting_ExcludeForbiddenActivity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MaliciousUserDetectionSetting_ExcludeForbiddenActivity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ExcludeForbiddenActivity != nil {
		{
			size, err := m.ExcludeForbiddenActivity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *MaliciousUserDetectionSetting_IncludeFailedLoginActivity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MaliciousUserDetectionSetting_IncludeFailedLoginActivity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IncludeFailedLoginActivity != nil {
		{
			size, err := m.IncludeFailedLoginActivity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *MaliciousUserDetectionSetting_ExcludeFailedLoginActivity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MaliciousUserDetectionSetting_ExcludeFailedLoginActivity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ExcludeFailedLoginActivity != nil {
		{
			size, err := m.ExcludeFailedLoginActivity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *MaliciousUserDetectionSetting_IncludeWafActivity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MaliciousUserDetectionSetting_IncludeWafActivity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IncludeWafActivity != nil {
		{
			size, err := m.IncludeWafActivity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *MaliciousUserDetectionSetting_ExcludeWafActivity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MaliciousUserDetectionSetting_ExcludeWafActivity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ExcludeWafActivity != nil {
		{
			size, err := m.ExcludeWafActivity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *MaliciousUserDetectionSetting_CoolingOffPeriod) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MaliciousUserDetectionSetting_CoolingOffPeriod) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.CoolingOffPeriod))
	i--
	dAtA[i] = 0x58
	return len(dAtA) - i, nil
}
func (m *ForbiddenActivitySetting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForbiddenActivitySetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForbiddenActivitySetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ForbiddenRequestsThreshold != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ForbiddenRequestsThreshold))
		i--
		dAtA[i] = 0x20
	}
	return len(dAtA) - i, nil
}

func (m *FailedLoginActivitySetting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FailedLoginActivitySetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailedLoginActivitySetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LoginFailuresThreshold != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.LoginFailuresThreshold))
		i--
		dAtA[i] = 0x20
	}
	return len(dAtA) - i, nil
}

func (m *AppTypeSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppTypeSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppTypeSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UserBehaviorAnalysisSetting != nil {
		{
			size, err := m.UserBehaviorAnalysisSetting.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.BusinessLogicMarkupSetting != nil {
		{
			size, err := m.BusinessLogicMarkupSetting.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.TimeseriesAnalysesSetting != nil {
		{
			size, err := m.TimeseriesAnalysesSetting.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.AppTypeRef) > 0 {
		for iNdEx := len(m.AppTypeRef) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AppTypeRef[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AppTypeSettings) > 0 {
		for iNdEx := len(m.AppTypeSettings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AppTypeSettings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.AnomalyTypes) > 0 {
		dAtA19 := make([]byte, len(m.AnomalyTypes)*10)
		var j18 int
		for _, num := range m.AnomalyTypes {
			for num >= 1<<7 {
				dAtA19[j18] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j18++
			}
			dAtA19[j18] = uint8(num)
			j18++
		}
		i -= j18
		copy(dAtA[i:], dAtA19[:j18])
		i = encodeVarintTypes(dAtA, i, uint64(j18))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AppTypeRefs) > 0 {
		for iNdEx := len(m.AppTypeRefs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AppTypeRefs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AppTypeSettings) > 0 {
		for iNdEx := len(m.AppTypeSettings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AppTypeSettings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.AnomalyTypes) > 0 {
		dAtA21 := make([]byte, len(m.AnomalyTypes)*10)
		var j20 int
		for _, num := range m.AnomalyTypes {
			for num >= 1<<7 {
				dAtA21[j20] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j20++
			}
			dAtA21[j20] = uint8(num)
			j20++
		}
		i -= j20
		copy(dAtA[i:], dAtA21[:j20])
		i = encodeVarintTypes(dAtA, i, uint64(j20))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AppTypeRefs) > 0 {
		for iNdEx := len(m.AppTypeRefs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AppTypeRefs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AppTypeSettings) > 0 {
		for iNdEx := len(m.AppTypeSettings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AppTypeSettings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.AnomalyTypes) > 0 {
		dAtA23 := make([]byte, len(m.AnomalyTypes)*10)
		var j22 int
		for _, num := range m.AnomalyTypes {
			for num >= 1<<7 {
				dAtA23[j22] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j22++
			}
			dAtA23[j22] = uint8(num)
			j22++
		}
		i -= j22
		copy(dAtA[i:], dAtA23[:j22])
		i = encodeVarintTypes(dAtA, i, uint64(j22))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AppTypeRefs) > 0 {
		for iNdEx := len(m.AppTypeRefs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AppTypeRefs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AppTypeSettings) > 0 {
		for iNdEx := len(m.AppTypeSettings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AppTypeSettings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.AnomalyTypes) > 0 {
		dAtA25 := make([]byte, len(m.AnomalyTypes)*10)
		var j24 int
		for _, num := range m.AnomalyTypes {
			for num >= 1<<7 {
				dAtA25[j24] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j24++
			}
			dAtA25[j24] = uint8(num)
			j24++
		}
		i -= j24
		copy(dAtA[i:], dAtA25[:j24])
		i = encodeVarintTypes(dAtA, i, uint64(j24))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AppTypeRefs) > 0 {
		for iNdEx := len(m.AppTypeRefs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AppTypeRefs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TimeseriesAnalysesSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MetricSelectors) > 0 {
		for _, e := range m.MetricSelectors {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *MetricSelector) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MetricsSource != 0 {
		n += 1 + sovTypes(uint64(m.MetricsSource))
	}
	if len(m.Metric) > 0 {
		l = 0
		for _, e := range m.Metric {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	return n
}

func (m *BusinessLogicMarkupSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LearnFromNamespace != nil {
		n += m.LearnFromNamespace.Size()
	}
	return n
}

func (m *BusinessLogicMarkupSetting_Enable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enable != nil {
		l = m.Enable.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *BusinessLogicMarkupSetting_Disable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Disable != nil {
		l = m.Disable.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *UserBehaviorAnalysisSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LearnFromNamespace != nil {
		n += m.LearnFromNamespace.Size()
	}
	if m.MaliciousUserDetection != nil {
		n += m.MaliciousUserDetection.Size()
	}
	return n
}

func (m *UserBehaviorAnalysisSetting_EnableLearning) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableLearning != nil {
		l = m.EnableLearning.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *UserBehaviorAnalysisSetting_DisableLearning) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableLearning != nil {
		l = m.DisableLearning.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *UserBehaviorAnalysisSetting_EnableDetection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableDetection != nil {
		l = m.EnableDetection.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *UserBehaviorAnalysisSetting_DisableDetection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableDetection != nil {
		l = m.DisableDetection.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *MaliciousUserDetectionSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ForbiddenActivityChoice != nil {
		n += m.ForbiddenActivityChoice.Size()
	}
	if m.FailedLoginActivityChoice != nil {
		n += m.FailedLoginActivityChoice.Size()
	}
	if m.WafActivityChoice != nil {
		n += m.WafActivityChoice.Size()
	}
	if m.CoolingOffPeriodSetting != nil {
		n += m.CoolingOffPeriodSetting.Size()
	}
	return n
}

func (m *MaliciousUserDetectionSetting_IncludeForbiddenActivity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IncludeForbiddenActivity != nil {
		l = m.IncludeForbiddenActivity.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *MaliciousUserDetectionSetting_ExcludeForbiddenActivity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExcludeForbiddenActivity != nil {
		l = m.ExcludeForbiddenActivity.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *MaliciousUserDetectionSetting_IncludeFailedLoginActivity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IncludeFailedLoginActivity != nil {
		l = m.IncludeFailedLoginActivity.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *MaliciousUserDetectionSetting_ExcludeFailedLoginActivity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExcludeFailedLoginActivity != nil {
		l = m.ExcludeFailedLoginActivity.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *MaliciousUserDetectionSetting_IncludeWafActivity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IncludeWafActivity != nil {
		l = m.IncludeWafActivity.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *MaliciousUserDetectionSetting_ExcludeWafActivity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExcludeWafActivity != nil {
		l = m.ExcludeWafActivity.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *MaliciousUserDetectionSetting_CoolingOffPeriod) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.CoolingOffPeriod))
	return n
}
func (m *ForbiddenActivitySetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ForbiddenRequestsThreshold != 0 {
		n += 1 + sovTypes(uint64(m.ForbiddenRequestsThreshold))
	}
	return n
}

func (m *FailedLoginActivitySetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LoginFailuresThreshold != 0 {
		n += 1 + sovTypes(uint64(m.LoginFailuresThreshold))
	}
	return n
}

func (m *AppTypeSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AppTypeRef) > 0 {
		for _, e := range m.AppTypeRef {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.TimeseriesAnalysesSetting != nil {
		l = m.TimeseriesAnalysesSetting.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.BusinessLogicMarkupSetting != nil {
		l = m.BusinessLogicMarkupSetting.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.UserBehaviorAnalysisSetting != nil {
		l = m.UserBehaviorAnalysisSetting.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AppTypeRefs) > 0 {
		for _, e := range m.AppTypeRefs {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.AnomalyTypes) > 0 {
		l = 0
		for _, e := range m.AnomalyTypes {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	if len(m.AppTypeSettings) > 0 {
		for _, e := range m.AppTypeSettings {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AppTypeRefs) > 0 {
		for _, e := range m.AppTypeRefs {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.AnomalyTypes) > 0 {
		l = 0
		for _, e := range m.AnomalyTypes {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	if len(m.AppTypeSettings) > 0 {
		for _, e := range m.AppTypeSettings {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AppTypeRefs) > 0 {
		for _, e := range m.AppTypeRefs {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.AnomalyTypes) > 0 {
		l = 0
		for _, e := range m.AnomalyTypes {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	if len(m.AppTypeSettings) > 0 {
		for _, e := range m.AppTypeSettings {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AppTypeRefs) > 0 {
		for _, e := range m.AppTypeRefs {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.AnomalyTypes) > 0 {
		l = 0
		for _, e := range m.AnomalyTypes {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	if len(m.AppTypeSettings) > 0 {
		for _, e := range m.AppTypeSettings {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *TimeseriesAnalysesSetting) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForMetricSelectors := "[]*MetricSelector{"
	for _, f := range this.MetricSelectors {
		repeatedStringForMetricSelectors += strings.Replace(f.String(), "MetricSelector", "MetricSelector", 1) + ","
	}
	repeatedStringForMetricSelectors += "}"
	s := strings.Join([]string{`&TimeseriesAnalysesSetting{`,
		`MetricSelectors:` + repeatedStringForMetricSelectors + `,`,
		`}`,
	}, "")
	return s
}
func (this *MetricSelector) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MetricSelector{`,
		`MetricsSource:` + fmt.Sprintf("%v", this.MetricsSource) + `,`,
		`Metric:` + fmt.Sprintf("%v", this.Metric) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BusinessLogicMarkupSetting) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BusinessLogicMarkupSetting{`,
		`LearnFromNamespace:` + fmt.Sprintf("%v", this.LearnFromNamespace) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BusinessLogicMarkupSetting_Enable) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BusinessLogicMarkupSetting_Enable{`,
		`Enable:` + strings.Replace(fmt.Sprintf("%v", this.Enable), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BusinessLogicMarkupSetting_Disable) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BusinessLogicMarkupSetting_Disable{`,
		`Disable:` + strings.Replace(fmt.Sprintf("%v", this.Disable), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserBehaviorAnalysisSetting) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserBehaviorAnalysisSetting{`,
		`LearnFromNamespace:` + fmt.Sprintf("%v", this.LearnFromNamespace) + `,`,
		`MaliciousUserDetection:` + fmt.Sprintf("%v", this.MaliciousUserDetection) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserBehaviorAnalysisSetting_EnableLearning) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserBehaviorAnalysisSetting_EnableLearning{`,
		`EnableLearning:` + strings.Replace(fmt.Sprintf("%v", this.EnableLearning), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserBehaviorAnalysisSetting_DisableLearning) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserBehaviorAnalysisSetting_DisableLearning{`,
		`DisableLearning:` + strings.Replace(fmt.Sprintf("%v", this.DisableLearning), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserBehaviorAnalysisSetting_EnableDetection) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserBehaviorAnalysisSetting_EnableDetection{`,
		`EnableDetection:` + strings.Replace(fmt.Sprintf("%v", this.EnableDetection), "MaliciousUserDetectionSetting", "MaliciousUserDetectionSetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserBehaviorAnalysisSetting_DisableDetection) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserBehaviorAnalysisSetting_DisableDetection{`,
		`DisableDetection:` + strings.Replace(fmt.Sprintf("%v", this.DisableDetection), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MaliciousUserDetectionSetting) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MaliciousUserDetectionSetting{`,
		`ForbiddenActivityChoice:` + fmt.Sprintf("%v", this.ForbiddenActivityChoice) + `,`,
		`FailedLoginActivityChoice:` + fmt.Sprintf("%v", this.FailedLoginActivityChoice) + `,`,
		`WafActivityChoice:` + fmt.Sprintf("%v", this.WafActivityChoice) + `,`,
		`CoolingOffPeriodSetting:` + fmt.Sprintf("%v", this.CoolingOffPeriodSetting) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MaliciousUserDetectionSetting_IncludeForbiddenActivity) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MaliciousUserDetectionSetting_IncludeForbiddenActivity{`,
		`IncludeForbiddenActivity:` + strings.Replace(fmt.Sprintf("%v", this.IncludeForbiddenActivity), "ForbiddenActivitySetting", "ForbiddenActivitySetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MaliciousUserDetectionSetting_ExcludeForbiddenActivity) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MaliciousUserDetectionSetting_ExcludeForbiddenActivity{`,
		`ExcludeForbiddenActivity:` + strings.Replace(fmt.Sprintf("%v", this.ExcludeForbiddenActivity), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MaliciousUserDetectionSetting_IncludeFailedLoginActivity) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MaliciousUserDetectionSetting_IncludeFailedLoginActivity{`,
		`IncludeFailedLoginActivity:` + strings.Replace(fmt.Sprintf("%v", this.IncludeFailedLoginActivity), "FailedLoginActivitySetting", "FailedLoginActivitySetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MaliciousUserDetectionSetting_ExcludeFailedLoginActivity) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MaliciousUserDetectionSetting_ExcludeFailedLoginActivity{`,
		`ExcludeFailedLoginActivity:` + strings.Replace(fmt.Sprintf("%v", this.ExcludeFailedLoginActivity), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MaliciousUserDetectionSetting_IncludeWafActivity) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MaliciousUserDetectionSetting_IncludeWafActivity{`,
		`IncludeWafActivity:` + strings.Replace(fmt.Sprintf("%v", this.IncludeWafActivity), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MaliciousUserDetectionSetting_ExcludeWafActivity) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MaliciousUserDetectionSetting_ExcludeWafActivity{`,
		`ExcludeWafActivity:` + strings.Replace(fmt.Sprintf("%v", this.ExcludeWafActivity), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MaliciousUserDetectionSetting_CoolingOffPeriod) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MaliciousUserDetectionSetting_CoolingOffPeriod{`,
		`CoolingOffPeriod:` + fmt.Sprintf("%v", this.CoolingOffPeriod) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ForbiddenActivitySetting) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForbiddenActivitySetting{`,
		`ForbiddenRequestsThreshold:` + fmt.Sprintf("%v", this.ForbiddenRequestsThreshold) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FailedLoginActivitySetting) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FailedLoginActivitySetting{`,
		`LoginFailuresThreshold:` + fmt.Sprintf("%v", this.LoginFailuresThreshold) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AppTypeSettings) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAppTypeRef := "[]*ObjectRefType{"
	for _, f := range this.AppTypeRef {
		repeatedStringForAppTypeRef += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForAppTypeRef += "}"
	s := strings.Join([]string{`&AppTypeSettings{`,
		`AppTypeRef:` + repeatedStringForAppTypeRef + `,`,
		`TimeseriesAnalysesSetting:` + strings.Replace(this.TimeseriesAnalysesSetting.String(), "TimeseriesAnalysesSetting", "TimeseriesAnalysesSetting", 1) + `,`,
		`BusinessLogicMarkupSetting:` + strings.Replace(this.BusinessLogicMarkupSetting.String(), "BusinessLogicMarkupSetting", "BusinessLogicMarkupSetting", 1) + `,`,
		`UserBehaviorAnalysisSetting:` + strings.Replace(this.UserBehaviorAnalysisSetting.String(), "UserBehaviorAnalysisSetting", "UserBehaviorAnalysisSetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAppTypeRefs := "[]*ObjectRefType{"
	for _, f := range this.AppTypeRefs {
		repeatedStringForAppTypeRefs += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForAppTypeRefs += "}"
	repeatedStringForAppTypeSettings := "[]*AppTypeSettings{"
	for _, f := range this.AppTypeSettings {
		repeatedStringForAppTypeSettings += strings.Replace(f.String(), "AppTypeSettings", "AppTypeSettings", 1) + ","
	}
	repeatedStringForAppTypeSettings += "}"
	s := strings.Join([]string{`&GlobalSpecType{`,
		`AppTypeRefs:` + repeatedStringForAppTypeRefs + `,`,
		`AnomalyTypes:` + fmt.Sprintf("%v", this.AnomalyTypes) + `,`,
		`AppTypeSettings:` + repeatedStringForAppTypeSettings + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAppTypeRefs := "[]*ObjectRefType{"
	for _, f := range this.AppTypeRefs {
		repeatedStringForAppTypeRefs += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForAppTypeRefs += "}"
	repeatedStringForAppTypeSettings := "[]*AppTypeSettings{"
	for _, f := range this.AppTypeSettings {
		repeatedStringForAppTypeSettings += strings.Replace(f.String(), "AppTypeSettings", "AppTypeSettings", 1) + ","
	}
	repeatedStringForAppTypeSettings += "}"
	s := strings.Join([]string{`&CreateSpecType{`,
		`AppTypeRefs:` + repeatedStringForAppTypeRefs + `,`,
		`AnomalyTypes:` + fmt.Sprintf("%v", this.AnomalyTypes) + `,`,
		`AppTypeSettings:` + repeatedStringForAppTypeSettings + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAppTypeRefs := "[]*ObjectRefType{"
	for _, f := range this.AppTypeRefs {
		repeatedStringForAppTypeRefs += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForAppTypeRefs += "}"
	repeatedStringForAppTypeSettings := "[]*AppTypeSettings{"
	for _, f := range this.AppTypeSettings {
		repeatedStringForAppTypeSettings += strings.Replace(f.String(), "AppTypeSettings", "AppTypeSettings", 1) + ","
	}
	repeatedStringForAppTypeSettings += "}"
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`AppTypeRefs:` + repeatedStringForAppTypeRefs + `,`,
		`AnomalyTypes:` + fmt.Sprintf("%v", this.AnomalyTypes) + `,`,
		`AppTypeSettings:` + repeatedStringForAppTypeSettings + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAppTypeRefs := "[]*ObjectRefType{"
	for _, f := range this.AppTypeRefs {
		repeatedStringForAppTypeRefs += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForAppTypeRefs += "}"
	repeatedStringForAppTypeSettings := "[]*AppTypeSettings{"
	for _, f := range this.AppTypeSettings {
		repeatedStringForAppTypeSettings += strings.Replace(f.String(), "AppTypeSettings", "AppTypeSettings", 1) + ","
	}
	repeatedStringForAppTypeSettings += "}"
	s := strings.Join([]string{`&GetSpecType{`,
		`AppTypeRefs:` + repeatedStringForAppTypeRefs + `,`,
		`AnomalyTypes:` + fmt.Sprintf("%v", this.AnomalyTypes) + `,`,
		`AppTypeSettings:` + repeatedStringForAppTypeSettings + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *TimeseriesAnalysesSetting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimeseriesAnalysesSetting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimeseriesAnalysesSetting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetricSelectors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetricSelectors = append(m.MetricSelectors, &MetricSelector{})
			if err := m.MetricSelectors[len(m.MetricSelectors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricSelector) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricSelector: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricSelector: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetricsSource", wireType)
			}
			m.MetricsSource = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MetricsSource |= MetricsSource(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v Metric
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= Metric(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Metric = append(m.Metric, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Metric) == 0 {
					m.Metric = make([]Metric, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v Metric
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= Metric(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Metric = append(m.Metric, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Metric", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BusinessLogicMarkupSetting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BusinessLogicMarkupSetting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BusinessLogicMarkupSetting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LearnFromNamespace = &BusinessLogicMarkupSetting_Enable{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LearnFromNamespace = &BusinessLogicMarkupSetting_Disable{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserBehaviorAnalysisSetting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserBehaviorAnalysisSetting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserBehaviorAnalysisSetting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableLearning", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LearnFromNamespace = &UserBehaviorAnalysisSetting_EnableLearning{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableLearning", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LearnFromNamespace = &UserBehaviorAnalysisSetting_DisableLearning{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableDetection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MaliciousUserDetectionSetting{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MaliciousUserDetection = &UserBehaviorAnalysisSetting_EnableDetection{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableDetection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MaliciousUserDetection = &UserBehaviorAnalysisSetting_DisableDetection{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MaliciousUserDetectionSetting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MaliciousUserDetectionSetting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MaliciousUserDetectionSetting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeForbiddenActivity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ForbiddenActivitySetting{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForbiddenActivityChoice = &MaliciousUserDetectionSetting_IncludeForbiddenActivity{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExcludeForbiddenActivity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForbiddenActivityChoice = &MaliciousUserDetectionSetting_ExcludeForbiddenActivity{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeFailedLoginActivity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FailedLoginActivitySetting{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FailedLoginActivityChoice = &MaliciousUserDetectionSetting_IncludeFailedLoginActivity{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExcludeFailedLoginActivity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FailedLoginActivityChoice = &MaliciousUserDetectionSetting_ExcludeFailedLoginActivity{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeWafActivity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafActivityChoice = &MaliciousUserDetectionSetting_IncludeWafActivity{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExcludeWafActivity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafActivityChoice = &MaliciousUserDetectionSetting_ExcludeWafActivity{v}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoolingOffPeriod", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CoolingOffPeriodSetting = &MaliciousUserDetectionSetting_CoolingOffPeriod{v}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForbiddenActivitySetting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForbiddenActivitySetting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForbiddenActivitySetting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForbiddenRequestsThreshold", wireType)
			}
			m.ForbiddenRequestsThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForbiddenRequestsThreshold |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FailedLoginActivitySetting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FailedLoginActivitySetting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FailedLoginActivitySetting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginFailuresThreshold", wireType)
			}
			m.LoginFailuresThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginFailuresThreshold |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppTypeSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppTypeSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppTypeSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppTypeRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppTypeRef = append(m.AppTypeRef, &schema.ObjectRefType{})
			if err := m.AppTypeRef[len(m.AppTypeRef)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeseriesAnalysesSetting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimeseriesAnalysesSetting == nil {
				m.TimeseriesAnalysesSetting = &TimeseriesAnalysesSetting{}
			}
			if err := m.TimeseriesAnalysesSetting.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusinessLogicMarkupSetting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BusinessLogicMarkupSetting == nil {
				m.BusinessLogicMarkupSetting = &BusinessLogicMarkupSetting{}
			}
			if err := m.BusinessLogicMarkupSetting.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserBehaviorAnalysisSetting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserBehaviorAnalysisSetting == nil {
				m.UserBehaviorAnalysisSetting = &UserBehaviorAnalysisSetting{}
			}
			if err := m.UserBehaviorAnalysisSetting.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppTypeRefs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppTypeRefs = append(m.AppTypeRefs, &schema.ObjectRefType{})
			if err := m.AppTypeRefs[len(m.AppTypeRefs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v AnomalyType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= AnomalyType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AnomalyTypes = append(m.AnomalyTypes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.AnomalyTypes) == 0 {
					m.AnomalyTypes = make([]AnomalyType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v AnomalyType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= AnomalyType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AnomalyTypes = append(m.AnomalyTypes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AnomalyTypes", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppTypeSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppTypeSettings = append(m.AppTypeSettings, &AppTypeSettings{})
			if err := m.AppTypeSettings[len(m.AppTypeSettings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppTypeRefs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppTypeRefs = append(m.AppTypeRefs, &schema.ObjectRefType{})
			if err := m.AppTypeRefs[len(m.AppTypeRefs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v AnomalyType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= AnomalyType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AnomalyTypes = append(m.AnomalyTypes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.AnomalyTypes) == 0 {
					m.AnomalyTypes = make([]AnomalyType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v AnomalyType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= AnomalyType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AnomalyTypes = append(m.AnomalyTypes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AnomalyTypes", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppTypeSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppTypeSettings = append(m.AppTypeSettings, &AppTypeSettings{})
			if err := m.AppTypeSettings[len(m.AppTypeSettings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppTypeRefs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppTypeRefs = append(m.AppTypeRefs, &schema.ObjectRefType{})
			if err := m.AppTypeRefs[len(m.AppTypeRefs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v AnomalyType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= AnomalyType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AnomalyTypes = append(m.AnomalyTypes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.AnomalyTypes) == 0 {
					m.AnomalyTypes = make([]AnomalyType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v AnomalyType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= AnomalyType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AnomalyTypes = append(m.AnomalyTypes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AnomalyTypes", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppTypeSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppTypeSettings = append(m.AppTypeSettings, &AppTypeSettings{})
			if err := m.AppTypeSettings[len(m.AppTypeSettings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppTypeRefs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppTypeRefs = append(m.AppTypeRefs, &schema.ObjectRefType{})
			if err := m.AppTypeRefs[len(m.AppTypeRefs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v AnomalyType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= AnomalyType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AnomalyTypes = append(m.AnomalyTypes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.AnomalyTypes) == 0 {
					m.AnomalyTypes = make([]AnomalyType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v AnomalyType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= AnomalyType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AnomalyTypes = append(m.AnomalyTypes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AnomalyTypes", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppTypeSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppTypeSettings = append(m.AppTypeSettings, &AppTypeSettings{})
			if err := m.AppTypeSettings[len(m.AppTypeSettings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

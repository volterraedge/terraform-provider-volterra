// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package ztna

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *AclResourceEntry) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AclResourceEntry) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AclResourceEntry) DeepCopy() *AclResourceEntry {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AclResourceEntry{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AclResourceEntry) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AclResourceEntry) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AclResourceEntryValidator().Validate(ctx, m, opts...)
}

type ValidateAclResourceEntry struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAclResourceEntry) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AclResourceEntry)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AclResourceEntry got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["entries"]; exists {

		vOpts := append(opts, db.WithValidateField("entries"))
		for idx, item := range m.GetEntries() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAclResourceEntryValidator = func() *ValidateAclResourceEntry {
	v := &ValidateAclResourceEntry{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["entries"] = EntryValidator().Validate

	return v
}()

func AclResourceEntryValidator() db.Validator {
	return DefaultAclResourceEntryValidator
}

// augmented methods on protoc/std generated struct

func (m *ActionType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ActionType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *ActionType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetLogOn().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ActionType.log_on")
	}

	return nil
}

func (m *ActionType) DeepCopy() *ActionType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ActionType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ActionType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ActionType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ActionTypeValidator().Validate(ctx, m, opts...)
}

type ValidateActionType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateActionType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ActionType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ActionType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	switch m.GetItemType().(type) {
	case *ActionType_LogOn:
		if fv, exists := v.FldValidators["item_type.log_on"]; exists {
			val := m.GetItemType().(*ActionType_LogOn).LogOn
			vOpts := append(opts,
				db.WithValidateField("item_type"),
				db.WithValidateField("log_on"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ActionType_ActiveDirectoryAuth:
		if fv, exists := v.FldValidators["item_type.active_directory_auth"]; exists {
			val := m.GetItemType().(*ActionType_ActiveDirectoryAuth).ActiveDirectoryAuth
			vOpts := append(opts,
				db.WithValidateField("item_type"),
				db.WithValidateField("active_directory_auth"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ActionType_ActiveDirectoryQuery:
		if fv, exists := v.FldValidators["item_type.active_directory_query"]; exists {
			val := m.GetItemType().(*ActionType_ActiveDirectoryQuery).ActiveDirectoryQuery
			vOpts := append(opts,
				db.WithValidateField("item_type"),
				db.WithValidateField("active_directory_query"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ActionType_ResourceAssign:
		if fv, exists := v.FldValidators["item_type.resource_assign"]; exists {
			val := m.GetItemType().(*ActionType_ResourceAssign).ResourceAssign
			vOpts := append(opts,
				db.WithValidateField("item_type"),
				db.WithValidateField("resource_assign"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultActionTypeValidator = func() *ValidateActionType {
	v := &ValidateActionType{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["item_type.log_on"] = LogonItemTypeValidator().Validate

	return v
}()

func ActionTypeValidator() db.Validator {
	return DefaultActionTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ActiveDirectoryAuth) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ActiveDirectoryAuth) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ActiveDirectoryAuth) DeepCopy() *ActiveDirectoryAuth {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ActiveDirectoryAuth{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ActiveDirectoryAuth) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ActiveDirectoryAuth) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ActiveDirectoryAuthValidator().Validate(ctx, m, opts...)
}

type ValidateActiveDirectoryAuth struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateActiveDirectoryAuth) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ActiveDirectoryAuth)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ActiveDirectoryAuth got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["active_directory_query"]; exists {

		vOpts := append(opts, db.WithValidateField("active_directory_query"))
		for idx, item := range m.GetActiveDirectoryQuery() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["deny_name"]; exists {

		vOpts := append(opts, db.WithValidateField("deny_name"))
		if err := fv(ctx, m.GetDenyName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["expression"]; exists {

		vOpts := append(opts, db.WithValidateField("expression"))
		if err := fv(ctx, m.GetExpression(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["server"]; exists {

		vOpts := append(opts, db.WithValidateField("server"))
		if err := fv(ctx, m.GetServer(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultActiveDirectoryAuthValidator = func() *ValidateActiveDirectoryAuth {
	v := &ValidateActiveDirectoryAuth{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func ActiveDirectoryAuthValidator() db.Validator {
	return DefaultActiveDirectoryAuthValidator
}

// augmented methods on protoc/std generated struct

func (m *ActiveDirectoryQuery) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ActiveDirectoryQuery) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ActiveDirectoryQuery) DeepCopy() *ActiveDirectoryQuery {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ActiveDirectoryQuery{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ActiveDirectoryQuery) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ActiveDirectoryQuery) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ActiveDirectoryQueryValidator().Validate(ctx, m, opts...)
}

type ValidateActiveDirectoryQuery struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateActiveDirectoryQuery) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ActiveDirectoryQuery)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ActiveDirectoryQuery got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["deny_name"]; exists {

		vOpts := append(opts, db.WithValidateField("deny_name"))
		if err := fv(ctx, m.GetDenyName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["filter"]; exists {

		vOpts := append(opts, db.WithValidateField("filter"))
		if err := fv(ctx, m.GetFilter(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["resource_assign"]; exists {

		vOpts := append(opts, db.WithValidateField("resource_assign"))
		if err := fv(ctx, m.GetResourceAssign(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["server"]; exists {

		vOpts := append(opts, db.WithValidateField("server"))
		if err := fv(ctx, m.GetServer(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultActiveDirectoryQueryValidator = func() *ValidateActiveDirectoryQuery {
	v := &ValidateActiveDirectoryQuery{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func ActiveDirectoryQueryValidator() db.Validator {
	return DefaultActiveDirectoryQueryValidator
}

// augmented methods on protoc/std generated struct

func (m *AllowResourceAssign) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AllowResourceAssign) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AllowResourceAssign) DeepCopy() *AllowResourceAssign {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AllowResourceAssign{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AllowResourceAssign) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AllowResourceAssign) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AllowResourceAssignValidator().Validate(ctx, m, opts...)
}

type ValidateAllowResourceAssign struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAllowResourceAssign) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AllowResourceAssign)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AllowResourceAssign got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["allow_name"]; exists {

		vOpts := append(opts, db.WithValidateField("allow_name"))
		if err := fv(ctx, m.GetAllowName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["deny_name"]; exists {

		vOpts := append(opts, db.WithValidateField("deny_name"))
		if err := fv(ctx, m.GetDenyName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["rules_resource_assign"]; exists {

		vOpts := append(opts, db.WithValidateField("rules_resource_assign"))
		for idx, item := range m.GetRulesResourceAssign() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["server"]; exists {

		vOpts := append(opts, db.WithValidateField("server"))
		if err := fv(ctx, m.GetServer(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAllowResourceAssignValidator = func() *ValidateAllowResourceAssign {
	v := &ValidateAllowResourceAssign{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func AllowResourceAssignValidator() db.Validator {
	return DefaultAllowResourceAssignValidator
}

// augmented methods on protoc/std generated struct

func (m *ConnectivityPolicyType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ConnectivityPolicyType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ConnectivityPolicyType) DeepCopy() *ConnectivityPolicyType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ConnectivityPolicyType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ConnectivityPolicyType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ConnectivityPolicyType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ConnectivityPolicyTypeValidator().Validate(ctx, m, opts...)
}

type ValidateConnectivityPolicyType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateConnectivityPolicyType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ConnectivityPolicyType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ConnectivityPolicyType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["connectivities"]; exists {

		vOpts := append(opts, db.WithValidateField("connectivities"))
		if err := fv(ctx, m.GetConnectivities(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["connectivity_policy_name"]; exists {

		vOpts := append(opts, db.WithValidateField("connectivity_policy_name"))
		if err := fv(ctx, m.GetConnectivityPolicyName(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultConnectivityPolicyTypeValidator = func() *ValidateConnectivityPolicyType {
	v := &ValidateConnectivityPolicyType{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func ConnectivityPolicyTypeValidator() db.Validator {
	return DefaultConnectivityPolicyTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *CreateSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetPerSession().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CreateSpecType.per_session")
	}

	return nil
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["connectivity"]; exists {

		vOpts := append(opts, db.WithValidateField("connectivity"))
		if err := fv(ctx, m.GetConnectivity(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["per_session"]; exists {

		vOpts := append(opts, db.WithValidateField("per_session"))
		if err := fv(ctx, m.GetPerSession(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["per_session"] = PerSessionPolicyTypeValidator().Validate

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *Custmization) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *Custmization) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *Custmization) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetPassword().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting Custmization.password")
	}

	return nil
}

func (m *Custmization) DeepCopy() *Custmization {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &Custmization{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *Custmization) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *Custmization) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CustmizationValidator().Validate(ctx, m, opts...)
}

type ValidateCustmization struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCustmization) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*Custmization)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *Custmization got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["password"]; exists {

		vOpts := append(opts, db.WithValidateField("password"))
		if err := fv(ctx, m.GetPassword(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["user_name"]; exists {

		vOpts := append(opts, db.WithValidateField("user_name"))
		if err := fv(ctx, m.GetUserName(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCustmizationValidator = func() *ValidateCustmization {
	v := &ValidateCustmization{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["password"] = ves_io_schema.SecretTypeValidator().Validate

	return v
}()

func CustmizationValidator() db.Validator {
	return DefaultCustmizationValidator
}

// augmented methods on protoc/std generated struct

func (m *Entry) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *Entry) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *Entry) DeepCopy() *Entry {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &Entry{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *Entry) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *Entry) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return EntryValidator().Validate(ctx, m, opts...)
}

type ValidateEntry struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateEntry) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*Entry)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *Entry got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["action"]; exists {

		vOpts := append(opts, db.WithValidateField("action"))
		if err := fv(ctx, m.GetAction(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["destination_end_port"]; exists {

		vOpts := append(opts, db.WithValidateField("destination_end_port"))
		if err := fv(ctx, m.GetDestinationEndPort(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["destination_ip"]; exists {

		vOpts := append(opts, db.WithValidateField("destination_ip"))
		if err := fv(ctx, m.GetDestinationIp(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["destination_start_port"]; exists {

		vOpts := append(opts, db.WithValidateField("destination_start_port"))
		if err := fv(ctx, m.GetDestinationStartPort(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultEntryValidator = func() *ValidateEntry {
	v := &ValidateEntry{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["destination_ip"] = ves_io_schema.IpAddressTypeValidator().Validate

	return v
}()

func EntryValidator() db.Validator {
	return DefaultEntryValidator
}

// augmented methods on protoc/std generated struct

func (m *ExternalServers) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ExternalServers) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *ExternalServers) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetAdminPassword().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ExternalServers.admin_password")
	}

	return nil
}

func (m *ExternalServers) DeepCopy() *ExternalServers {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ExternalServers{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ExternalServers) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ExternalServers) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ExternalServersValidator().Validate(ctx, m, opts...)
}

type ValidateExternalServers struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateExternalServers) AdminUsernameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for admin_username")
	}

	return validatorFn, nil
}

func (v *ValidateExternalServers) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ExternalServers)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ExternalServers got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["admin_password"]; exists {

		vOpts := append(opts, db.WithValidateField("admin_password"))
		if err := fv(ctx, m.GetAdminPassword(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["admin_username"]; exists {

		vOpts := append(opts, db.WithValidateField("admin_username"))
		if err := fv(ctx, m.GetAdminUsername(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["domain"]; exists {

		vOpts := append(opts, db.WithValidateField("domain"))
		if err := fv(ctx, m.GetDomain(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["server_type"]; exists {

		vOpts := append(opts, db.WithValidateField("server_type"))
		if err := fv(ctx, m.GetServerType(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultExternalServersValidator = func() *ValidateExternalServers {
	v := &ValidateExternalServers{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAdminUsername := v.AdminUsernameValidationRuleHandler
	rulesAdminUsername := map[string]string{
		"ves.io.schema.rules.string.max_len": "256",
	}
	vFn, err = vrhAdminUsername(rulesAdminUsername)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ExternalServers.admin_username: %s", err)
		panic(errMsg)
	}
	v.FldValidators["admin_username"] = vFn

	v.FldValidators["admin_password"] = ves_io_schema.SecretTypeValidator().Validate

	return v
}()

func ExternalServersValidator() db.Validator {
	return DefaultExternalServersValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GetSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetPerSession().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GetSpecType.per_session")
	}

	return nil
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["connectivity"]; exists {

		vOpts := append(opts, db.WithValidateField("connectivity"))
		if err := fv(ctx, m.GetConnectivity(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["per_session"]; exists {

		vOpts := append(opts, db.WithValidateField("per_session"))
		if err := fv(ctx, m.GetPerSession(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["per_session"] = PerSessionPolicyTypeValidator().Validate

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GlobalSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetPerSession().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GlobalSpecType.per_session")
	}

	return nil
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["connectivity"]; exists {

		vOpts := append(opts, db.WithValidateField("connectivity"))
		if err := fv(ctx, m.GetConnectivity(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["per_session"]; exists {

		vOpts := append(opts, db.WithValidateField("per_session"))
		if err := fv(ctx, m.GetPerSession(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["per_session"] = PerSessionPolicyTypeValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *LeasePoolMember) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *LeasePoolMember) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *LeasePoolMember) DeepCopy() *LeasePoolMember {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &LeasePoolMember{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *LeasePoolMember) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *LeasePoolMember) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return LeasePoolMemberValidator().Validate(ctx, m, opts...)
}

type ValidateLeasePoolMember struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateLeasePoolMember) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*LeasePoolMember)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *LeasePoolMember got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["end_address"]; exists {

		vOpts := append(opts, db.WithValidateField("end_address"))
		if err := fv(ctx, m.GetEndAddress(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["start_address"]; exists {

		vOpts := append(opts, db.WithValidateField("start_address"))
		if err := fv(ctx, m.GetStartAddress(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultLeasePoolMemberValidator = func() *ValidateLeasePoolMember {
	v := &ValidateLeasePoolMember{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["start_address"] = ves_io_schema.IpAddressTypeValidator().Validate

	v.FldValidators["end_address"] = ves_io_schema.IpAddressTypeValidator().Validate

	return v
}()

func LeasePoolMemberValidator() db.Validator {
	return DefaultLeasePoolMemberValidator
}

// augmented methods on protoc/std generated struct

func (m *LogonItemType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *LogonItemType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *LogonItemType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	for idx, e := range m.GetCustomization() {
		if err := e.Redact(ctx); err != nil {
			return errors.Wrapf(err, "Redacting LogonItemType.customization idx %v", idx)
		}
	}

	return nil
}

func (m *LogonItemType) DeepCopy() *LogonItemType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &LogonItemType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *LogonItemType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *LogonItemType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return LogonItemTypeValidator().Validate(ctx, m, opts...)
}

type ValidateLogonItemType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateLogonItemType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*LogonItemType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *LogonItemType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["active_directory_auth"]; exists {

		vOpts := append(opts, db.WithValidateField("active_directory_auth"))
		for idx, item := range m.GetActiveDirectoryAuth() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["customization"]; exists {

		vOpts := append(opts, db.WithValidateField("customization"))
		for idx, item := range m.GetCustomization() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultLogonItemTypeValidator = func() *ValidateLogonItemType {
	v := &ValidateLogonItemType{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["customization"] = CustmizationValidator().Validate

	return v
}()

func LogonItemTypeValidator() db.Validator {
	return DefaultLogonItemTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *PerSessionPolicyType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *PerSessionPolicyType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *PerSessionPolicyType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	for idx, e := range m.GetExternalServer() {
		if err := e.Redact(ctx); err != nil {
			return errors.Wrapf(err, "Redacting PerSessionPolicyType.external_server idx %v", idx)
		}
	}

	if err := m.GetSequenceAction().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting PerSessionPolicyType.sequence_action")
	}

	return nil
}

func (m *PerSessionPolicyType) DeepCopy() *PerSessionPolicyType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &PerSessionPolicyType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *PerSessionPolicyType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *PerSessionPolicyType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return PerSessionPolicyTypeValidator().Validate(ctx, m, opts...)
}

type ValidatePerSessionPolicyType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidatePerSessionPolicyType) ResourcesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemKeyRules := db.GetMapStringKeyRules(rules)
	itemKeyFn, err := db.NewStringValidationRuleHandler(itemKeyRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item key ValidationRuleHandler for resources")
	}
	itemsValidatorFn := func(ctx context.Context, kv map[string]*Resource, opts ...db.ValidateOpt) error {
		for key, value := range kv {
			if err := itemKeyFn(ctx, key, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element with key %v", key))
			}
			if err := ResourceValidator().Validate(ctx, value, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("value for element with key %v", key))
			}
		}
		return nil
	}
	mapValFn, err := db.NewMapValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Map ValidationRuleHandler for resources")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.(map[string]*Resource)
		if !ok {
			return fmt.Errorf("Map validation expected map[ string ]*Resource, got %T", val)
		}
		if err := mapValFn(ctx, len(elems), opts...); err != nil {
			return errors.Wrap(err, "map resources")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items resources")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidatePerSessionPolicyType) LeasePoolMemberValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemKeyRules := db.GetMapStringKeyRules(rules)
	itemKeyFn, err := db.NewStringValidationRuleHandler(itemKeyRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item key ValidationRuleHandler for lease_pool_member")
	}
	itemsValidatorFn := func(ctx context.Context, kv map[string]*LeasePoolMember, opts ...db.ValidateOpt) error {
		for key, value := range kv {
			if err := itemKeyFn(ctx, key, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element with key %v", key))
			}
			if err := LeasePoolMemberValidator().Validate(ctx, value, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("value for element with key %v", key))
			}
		}
		return nil
	}
	mapValFn, err := db.NewMapValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Map ValidationRuleHandler for lease_pool_member")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.(map[string]*LeasePoolMember)
		if !ok {
			return fmt.Errorf("Map validation expected map[ string ]*LeasePoolMember, got %T", val)
		}
		if err := mapValFn(ctx, len(elems), opts...); err != nil {
			return errors.Wrap(err, "map lease_pool_member")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items lease_pool_member")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidatePerSessionPolicyType) ExternalServerValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemKeyRules := db.GetMapStringKeyRules(rules)
	itemKeyFn, err := db.NewStringValidationRuleHandler(itemKeyRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item key ValidationRuleHandler for external_server")
	}
	itemsValidatorFn := func(ctx context.Context, kv map[string]*ExternalServers, opts ...db.ValidateOpt) error {
		for key, value := range kv {
			if err := itemKeyFn(ctx, key, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element with key %v", key))
			}
			if err := ExternalServersValidator().Validate(ctx, value, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("value for element with key %v", key))
			}
		}
		return nil
	}
	mapValFn, err := db.NewMapValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Map ValidationRuleHandler for external_server")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.(map[string]*ExternalServers)
		if !ok {
			return fmt.Errorf("Map validation expected map[ string ]*ExternalServers, got %T", val)
		}
		if err := mapValFn(ctx, len(elems), opts...); err != nil {
			return errors.Wrap(err, "map external_server")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items external_server")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidatePerSessionPolicyType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*PerSessionPolicyType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *PerSessionPolicyType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["external_server"]; exists {
		vOpts := append(opts, db.WithValidateField("external_server"))
		if err := fv(ctx, m.GetExternalServer(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["lease_pool_member"]; exists {
		vOpts := append(opts, db.WithValidateField("lease_pool_member"))
		if err := fv(ctx, m.GetLeasePoolMember(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["per_session_policy_name"]; exists {

		vOpts := append(opts, db.WithValidateField("per_session_policy_name"))
		if err := fv(ctx, m.GetPerSessionPolicyName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["resources"]; exists {
		vOpts := append(opts, db.WithValidateField("resources"))
		if err := fv(ctx, m.GetResources(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["sequence_action"]; exists {

		vOpts := append(opts, db.WithValidateField("sequence_action"))
		if err := fv(ctx, m.GetSequenceAction(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultPerSessionPolicyTypeValidator = func() *ValidatePerSessionPolicyType {
	v := &ValidatePerSessionPolicyType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhResources := v.ResourcesValidationRuleHandler
	rulesResources := map[string]string{
		"ves.io.schema.rules.map.keys.string.max_len": "256",
		"ves.io.schema.rules.map.keys.string.min_len": "1",
		"ves.io.schema.rules.map.max_pairs":           "64",
	}
	vFn, err = vrhResources(rulesResources)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for PerSessionPolicyType.resources: %s", err)
		panic(errMsg)
	}
	v.FldValidators["resources"] = vFn

	vrhLeasePoolMember := v.LeasePoolMemberValidationRuleHandler
	rulesLeasePoolMember := map[string]string{
		"ves.io.schema.rules.map.keys.string.max_len": "256",
		"ves.io.schema.rules.map.keys.string.min_len": "1",
		"ves.io.schema.rules.map.max_pairs":           "64",
	}
	vFn, err = vrhLeasePoolMember(rulesLeasePoolMember)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for PerSessionPolicyType.lease_pool_member: %s", err)
		panic(errMsg)
	}
	v.FldValidators["lease_pool_member"] = vFn

	vrhExternalServer := v.ExternalServerValidationRuleHandler
	rulesExternalServer := map[string]string{
		"ves.io.schema.rules.map.keys.string.max_len": "256",
		"ves.io.schema.rules.map.keys.string.min_len": "1",
		"ves.io.schema.rules.map.max_pairs":           "64",
	}
	vFn, err = vrhExternalServer(rulesExternalServer)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for PerSessionPolicyType.external_server: %s", err)
		panic(errMsg)
	}
	v.FldValidators["external_server"] = vFn

	v.FldValidators["sequence_action"] = SequenceActionValidator().Validate

	return v
}()

func PerSessionPolicyTypeValidator() db.Validator {
	return DefaultPerSessionPolicyTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *ReplaceSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetPerSession().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ReplaceSpecType.per_session")
	}

	return nil
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["connectivity"]; exists {

		vOpts := append(opts, db.WithValidateField("connectivity"))
		if err := fv(ctx, m.GetConnectivity(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["per_session"]; exists {

		vOpts := append(opts, db.WithValidateField("per_session"))
		if err := fv(ctx, m.GetPerSession(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["per_session"] = PerSessionPolicyTypeValidator().Validate

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *Resource) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *Resource) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *Resource) DeepCopy() *Resource {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &Resource{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *Resource) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *Resource) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ResourceValidator().Validate(ctx, m, opts...)
}

type ValidateResource struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateResource) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*Resource)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *Resource got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	switch m.GetResourceType().(type) {
	case *Resource_Acl:
		if fv, exists := v.FldValidators["resource_type.acl"]; exists {
			val := m.GetResourceType().(*Resource_Acl).Acl
			vOpts := append(opts,
				db.WithValidateField("resource_type"),
				db.WithValidateField("acl"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *Resource_Web:
		if fv, exists := v.FldValidators["resource_type.web"]; exists {
			val := m.GetResourceType().(*Resource_Web).Web
			vOpts := append(opts,
				db.WithValidateField("resource_type"),
				db.WithValidateField("web"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *Resource_Connectivity:
		if fv, exists := v.FldValidators["resource_type.connectivity"]; exists {
			val := m.GetResourceType().(*Resource_Connectivity).Connectivity
			vOpts := append(opts,
				db.WithValidateField("resource_type"),
				db.WithValidateField("connectivity"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultResourceValidator = func() *ValidateResource {
	v := &ValidateResource{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["resource_type.acl"] = AclResourceEntryValidator().Validate

	return v
}()

func ResourceValidator() db.Validator {
	return DefaultResourceValidator
}

// augmented methods on protoc/std generated struct

func (m *ResourceAssign) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ResourceAssign) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ResourceAssign) DeepCopy() *ResourceAssign {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ResourceAssign{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ResourceAssign) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ResourceAssign) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ResourceAssignValidator().Validate(ctx, m, opts...)
}

type ValidateResourceAssign struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateResourceAssign) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ResourceAssign)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ResourceAssign got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["allow"]; exists {

		vOpts := append(opts, db.WithValidateField("allow"))
		for idx, item := range m.GetAllow() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultResourceAssignValidator = func() *ValidateResourceAssign {
	v := &ValidateResourceAssign{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func ResourceAssignValidator() db.Validator {
	return DefaultResourceAssignValidator
}

// augmented methods on protoc/std generated struct

func (m *Rules) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *Rules) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *Rules) DeepCopy() *Rules {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &Rules{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *Rules) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *Rules) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return RulesValidator().Validate(ctx, m, opts...)
}

type ValidateRules struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateRules) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*Rules)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *Rules got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["acls"]; exists {

		vOpts := append(opts, db.WithValidateField("acls"))
		for idx, item := range m.GetAcls() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["network_access_rule"]; exists {

		vOpts := append(opts, db.WithValidateField("network_access_rule"))
		for idx, item := range m.GetNetworkAccessRule() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["web_top_name"]; exists {

		vOpts := append(opts, db.WithValidateField("web_top_name"))
		if err := fv(ctx, m.GetWebTopName(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultRulesValidator = func() *ValidateRules {
	v := &ValidateRules{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func RulesValidator() db.Validator {
	return DefaultRulesValidator
}

// augmented methods on protoc/std generated struct

func (m *SequenceAction) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SequenceAction) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *SequenceAction) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetNextAction().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting SequenceAction.next_action")
	}

	return nil
}

func (m *SequenceAction) DeepCopy() *SequenceAction {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SequenceAction{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SequenceAction) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SequenceAction) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SequenceActionValidator().Validate(ctx, m, opts...)
}

type ValidateSequenceAction struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSequenceAction) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SequenceAction)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SequenceAction got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["connectivity_access_policy_name"]; exists {

		vOpts := append(opts, db.WithValidateField("connectivity_access_policy_name"))
		if err := fv(ctx, m.GetConnectivityAccessPolicyName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["next_action"]; exists {

		vOpts := append(opts, db.WithValidateField("next_action"))
		if err := fv(ctx, m.GetNextAction(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSequenceActionValidator = func() *ValidateSequenceAction {
	v := &ValidateSequenceAction{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["next_action"] = ActionTypeValidator().Validate

	return v
}()

func SequenceActionValidator() db.Validator {
	return DefaultSequenceActionValidator
}

func (m *CreateSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.Connectivity = f.GetConnectivity()
	m.PerSession = f.GetPerSession()
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *CreateSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *CreateSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.Connectivity = m1.Connectivity
	f.PerSession = m1.PerSession
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *CreateSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.Connectivity = f.GetConnectivity()
	m.PerSession = f.GetPerSession()
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.Connectivity = m1.Connectivity
	f.PerSession = m1.PerSession
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.Connectivity = f.GetConnectivity()
	m.PerSession = f.GetPerSession()
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.Connectivity = m1.Connectivity
	f.PerSession = m1.PerSession
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

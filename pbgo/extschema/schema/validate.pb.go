// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/validate.proto

package schema

import (
	bytes "bytes"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	descriptor "github.com/golang/protobuf/protoc-gen-go/descriptor"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Title
//
// x-displayName "displayname"
// FieldRules encapsulates the rules for each type of field. Depending on the
// field, the correct set should be used to ensure proper validations.
type FieldRules struct {
	// Title
	//
	// x-displayName "displayname"
	// Only added so codegeneration does not break
	//
	// Types that are valid to be assigned to Type:
	//	*FieldRules_Float
	//	*FieldRules_Double
	//	*FieldRules_Int32
	//	*FieldRules_Int64
	//	*FieldRules_Uint32
	//	*FieldRules_Uint64
	//	*FieldRules_Sint32
	//	*FieldRules_Sint64
	//	*FieldRules_Fixed32
	//	*FieldRules_Fixed64
	//	*FieldRules_Sfixed32
	//	*FieldRules_Sfixed64
	//	*FieldRules_Bool
	//	*FieldRules_String_
	//	*FieldRules_Bytes
	//	*FieldRules_Enum
	//	*FieldRules_Message
	//	*FieldRules_Repeated
	//	*FieldRules_Map
	//	*FieldRules_Any
	//	*FieldRules_Duration
	//	*FieldRules_Timestamp
	Type isFieldRules_Type `protobuf_oneof:"type"`
}

func (m *FieldRules) Reset()      { *m = FieldRules{} }
func (*FieldRules) ProtoMessage() {}
func (*FieldRules) Descriptor() ([]byte, []int) {
	return fileDescriptor_24f6720636939b16, []int{0}
}
func (m *FieldRules) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FieldRules) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FieldRules.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FieldRules) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FieldRules.Merge(m, src)
}
func (m *FieldRules) XXX_Size() int {
	return m.Size()
}
func (m *FieldRules) XXX_DiscardUnknown() {
	xxx_messageInfo_FieldRules.DiscardUnknown(m)
}

var xxx_messageInfo_FieldRules proto.InternalMessageInfo

type isFieldRules_Type interface {
	isFieldRules_Type()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type FieldRules_Float struct {
	Float *FloatRules `protobuf:"bytes,1,opt,name=float,proto3,oneof" json:"float,omitempty"`
}
type FieldRules_Double struct {
	Double *DoubleRules `protobuf:"bytes,2,opt,name=double,proto3,oneof" json:"double,omitempty"`
}
type FieldRules_Int32 struct {
	Int32 *Int32Rules `protobuf:"bytes,3,opt,name=int32,proto3,oneof" json:"int32,omitempty"`
}
type FieldRules_Int64 struct {
	Int64 *Int64Rules `protobuf:"bytes,4,opt,name=int64,proto3,oneof" json:"int64,omitempty"`
}
type FieldRules_Uint32 struct {
	Uint32 *UInt32Rules `protobuf:"bytes,5,opt,name=uint32,proto3,oneof" json:"uint32,omitempty"`
}
type FieldRules_Uint64 struct {
	Uint64 *UInt64Rules `protobuf:"bytes,6,opt,name=uint64,proto3,oneof" json:"uint64,omitempty"`
}
type FieldRules_Sint32 struct {
	Sint32 *SInt32Rules `protobuf:"bytes,7,opt,name=sint32,proto3,oneof" json:"sint32,omitempty"`
}
type FieldRules_Sint64 struct {
	Sint64 *SInt64Rules `protobuf:"bytes,8,opt,name=sint64,proto3,oneof" json:"sint64,omitempty"`
}
type FieldRules_Fixed32 struct {
	Fixed32 *Fixed32Rules `protobuf:"bytes,9,opt,name=fixed32,proto3,oneof" json:"fixed32,omitempty"`
}
type FieldRules_Fixed64 struct {
	Fixed64 *Fixed64Rules `protobuf:"bytes,10,opt,name=fixed64,proto3,oneof" json:"fixed64,omitempty"`
}
type FieldRules_Sfixed32 struct {
	Sfixed32 *SFixed32Rules `protobuf:"bytes,11,opt,name=sfixed32,proto3,oneof" json:"sfixed32,omitempty"`
}
type FieldRules_Sfixed64 struct {
	Sfixed64 *SFixed64Rules `protobuf:"bytes,12,opt,name=sfixed64,proto3,oneof" json:"sfixed64,omitempty"`
}
type FieldRules_Bool struct {
	Bool *BoolRules `protobuf:"bytes,13,opt,name=bool,proto3,oneof" json:"bool,omitempty"`
}
type FieldRules_String_ struct {
	String_ *StringRules `protobuf:"bytes,14,opt,name=string,proto3,oneof" json:"string,omitempty"`
}
type FieldRules_Bytes struct {
	Bytes *BytesRules `protobuf:"bytes,15,opt,name=bytes,proto3,oneof" json:"bytes,omitempty"`
}
type FieldRules_Enum struct {
	Enum *EnumRules `protobuf:"bytes,16,opt,name=enum,proto3,oneof" json:"enum,omitempty"`
}
type FieldRules_Message struct {
	Message *MessageRules `protobuf:"bytes,17,opt,name=message,proto3,oneof" json:"message,omitempty"`
}
type FieldRules_Repeated struct {
	Repeated *RepeatedRules `protobuf:"bytes,18,opt,name=repeated,proto3,oneof" json:"repeated,omitempty"`
}
type FieldRules_Map struct {
	Map *MapRules `protobuf:"bytes,19,opt,name=map,proto3,oneof" json:"map,omitempty"`
}
type FieldRules_Any struct {
	Any *AnyRules `protobuf:"bytes,20,opt,name=any,proto3,oneof" json:"any,omitempty"`
}
type FieldRules_Duration struct {
	Duration *DurationRules `protobuf:"bytes,21,opt,name=duration,proto3,oneof" json:"duration,omitempty"`
}
type FieldRules_Timestamp struct {
	Timestamp *TimestampRules `protobuf:"bytes,22,opt,name=timestamp,proto3,oneof" json:"timestamp,omitempty"`
}

func (*FieldRules_Float) isFieldRules_Type()     {}
func (*FieldRules_Double) isFieldRules_Type()    {}
func (*FieldRules_Int32) isFieldRules_Type()     {}
func (*FieldRules_Int64) isFieldRules_Type()     {}
func (*FieldRules_Uint32) isFieldRules_Type()    {}
func (*FieldRules_Uint64) isFieldRules_Type()    {}
func (*FieldRules_Sint32) isFieldRules_Type()    {}
func (*FieldRules_Sint64) isFieldRules_Type()    {}
func (*FieldRules_Fixed32) isFieldRules_Type()   {}
func (*FieldRules_Fixed64) isFieldRules_Type()   {}
func (*FieldRules_Sfixed32) isFieldRules_Type()  {}
func (*FieldRules_Sfixed64) isFieldRules_Type()  {}
func (*FieldRules_Bool) isFieldRules_Type()      {}
func (*FieldRules_String_) isFieldRules_Type()   {}
func (*FieldRules_Bytes) isFieldRules_Type()     {}
func (*FieldRules_Enum) isFieldRules_Type()      {}
func (*FieldRules_Message) isFieldRules_Type()   {}
func (*FieldRules_Repeated) isFieldRules_Type()  {}
func (*FieldRules_Map) isFieldRules_Type()       {}
func (*FieldRules_Any) isFieldRules_Type()       {}
func (*FieldRules_Duration) isFieldRules_Type()  {}
func (*FieldRules_Timestamp) isFieldRules_Type() {}

func (m *FieldRules) GetType() isFieldRules_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *FieldRules) GetFloat() *FloatRules {
	if x, ok := m.GetType().(*FieldRules_Float); ok {
		return x.Float
	}
	return nil
}

func (m *FieldRules) GetDouble() *DoubleRules {
	if x, ok := m.GetType().(*FieldRules_Double); ok {
		return x.Double
	}
	return nil
}

func (m *FieldRules) GetInt32() *Int32Rules {
	if x, ok := m.GetType().(*FieldRules_Int32); ok {
		return x.Int32
	}
	return nil
}

func (m *FieldRules) GetInt64() *Int64Rules {
	if x, ok := m.GetType().(*FieldRules_Int64); ok {
		return x.Int64
	}
	return nil
}

func (m *FieldRules) GetUint32() *UInt32Rules {
	if x, ok := m.GetType().(*FieldRules_Uint32); ok {
		return x.Uint32
	}
	return nil
}

func (m *FieldRules) GetUint64() *UInt64Rules {
	if x, ok := m.GetType().(*FieldRules_Uint64); ok {
		return x.Uint64
	}
	return nil
}

func (m *FieldRules) GetSint32() *SInt32Rules {
	if x, ok := m.GetType().(*FieldRules_Sint32); ok {
		return x.Sint32
	}
	return nil
}

func (m *FieldRules) GetSint64() *SInt64Rules {
	if x, ok := m.GetType().(*FieldRules_Sint64); ok {
		return x.Sint64
	}
	return nil
}

func (m *FieldRules) GetFixed32() *Fixed32Rules {
	if x, ok := m.GetType().(*FieldRules_Fixed32); ok {
		return x.Fixed32
	}
	return nil
}

func (m *FieldRules) GetFixed64() *Fixed64Rules {
	if x, ok := m.GetType().(*FieldRules_Fixed64); ok {
		return x.Fixed64
	}
	return nil
}

func (m *FieldRules) GetSfixed32() *SFixed32Rules {
	if x, ok := m.GetType().(*FieldRules_Sfixed32); ok {
		return x.Sfixed32
	}
	return nil
}

func (m *FieldRules) GetSfixed64() *SFixed64Rules {
	if x, ok := m.GetType().(*FieldRules_Sfixed64); ok {
		return x.Sfixed64
	}
	return nil
}

func (m *FieldRules) GetBool() *BoolRules {
	if x, ok := m.GetType().(*FieldRules_Bool); ok {
		return x.Bool
	}
	return nil
}

func (m *FieldRules) GetString_() *StringRules {
	if x, ok := m.GetType().(*FieldRules_String_); ok {
		return x.String_
	}
	return nil
}

func (m *FieldRules) GetBytes() *BytesRules {
	if x, ok := m.GetType().(*FieldRules_Bytes); ok {
		return x.Bytes
	}
	return nil
}

func (m *FieldRules) GetEnum() *EnumRules {
	if x, ok := m.GetType().(*FieldRules_Enum); ok {
		return x.Enum
	}
	return nil
}

func (m *FieldRules) GetMessage() *MessageRules {
	if x, ok := m.GetType().(*FieldRules_Message); ok {
		return x.Message
	}
	return nil
}

func (m *FieldRules) GetRepeated() *RepeatedRules {
	if x, ok := m.GetType().(*FieldRules_Repeated); ok {
		return x.Repeated
	}
	return nil
}

func (m *FieldRules) GetMap() *MapRules {
	if x, ok := m.GetType().(*FieldRules_Map); ok {
		return x.Map
	}
	return nil
}

func (m *FieldRules) GetAny() *AnyRules {
	if x, ok := m.GetType().(*FieldRules_Any); ok {
		return x.Any
	}
	return nil
}

func (m *FieldRules) GetDuration() *DurationRules {
	if x, ok := m.GetType().(*FieldRules_Duration); ok {
		return x.Duration
	}
	return nil
}

func (m *FieldRules) GetTimestamp() *TimestampRules {
	if x, ok := m.GetType().(*FieldRules_Timestamp); ok {
		return x.Timestamp
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*FieldRules) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*FieldRules_Float)(nil),
		(*FieldRules_Double)(nil),
		(*FieldRules_Int32)(nil),
		(*FieldRules_Int64)(nil),
		(*FieldRules_Uint32)(nil),
		(*FieldRules_Uint64)(nil),
		(*FieldRules_Sint32)(nil),
		(*FieldRules_Sint64)(nil),
		(*FieldRules_Fixed32)(nil),
		(*FieldRules_Fixed64)(nil),
		(*FieldRules_Sfixed32)(nil),
		(*FieldRules_Sfixed64)(nil),
		(*FieldRules_Bool)(nil),
		(*FieldRules_String_)(nil),
		(*FieldRules_Bytes)(nil),
		(*FieldRules_Enum)(nil),
		(*FieldRules_Message)(nil),
		(*FieldRules_Repeated)(nil),
		(*FieldRules_Map)(nil),
		(*FieldRules_Any)(nil),
		(*FieldRules_Duration)(nil),
		(*FieldRules_Timestamp)(nil),
	}
}

// Title
//
// x-displayName "displayname"
// FloatRules describes the constraints applied to float values
type FloatRules struct {
	// Title
	//
	// x-displayName "displayname"
	// Const specifies that this field must be exactly the specified value
	Const float32 `protobuf:"fixed32,1,opt,name=const,proto3" json:"const,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Lt specifies that this field must be less than the specified value,
	// exclusive
	Lt float32 `protobuf:"fixed32,2,opt,name=lt,proto3" json:"lt,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Lte specifies that this field must be less than or equal to the
	// specified value, inclusive
	Lte float32 `protobuf:"fixed32,3,opt,name=lte,proto3" json:"lte,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Gt specifies that this field must be greater than the specified value,
	// exclusive. If the value of Gt is larger than a specified Lt or Lte, the
	// range is reversed.
	Gt float32 `protobuf:"fixed32,4,opt,name=gt,proto3" json:"gt,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Gte specifies that this field must be greater than or equal to the
	// specified value, inclusive. If the value of Gte is larger than a
	// specified Lt or Lte, the range is reversed.
	Gte float32 `protobuf:"fixed32,5,opt,name=gte,proto3" json:"gte,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// In specifies that this field must be equal to one of the specified
	// values
	In []float32 `protobuf:"fixed32,6,rep,packed,name=in,proto3" json:"in,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// NotIn specifies that this field cannot be equal to one of the specified
	// values
	NotIn []float32 `protobuf:"fixed32,7,rep,packed,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
}

func (m *FloatRules) Reset()      { *m = FloatRules{} }
func (*FloatRules) ProtoMessage() {}
func (*FloatRules) Descriptor() ([]byte, []int) {
	return fileDescriptor_24f6720636939b16, []int{1}
}
func (m *FloatRules) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FloatRules) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FloatRules.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FloatRules) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FloatRules.Merge(m, src)
}
func (m *FloatRules) XXX_Size() int {
	return m.Size()
}
func (m *FloatRules) XXX_DiscardUnknown() {
	xxx_messageInfo_FloatRules.DiscardUnknown(m)
}

var xxx_messageInfo_FloatRules proto.InternalMessageInfo

func (m *FloatRules) GetConst() float32 {
	if m != nil {
		return m.Const
	}
	return 0
}

func (m *FloatRules) GetLt() float32 {
	if m != nil {
		return m.Lt
	}
	return 0
}

func (m *FloatRules) GetLte() float32 {
	if m != nil {
		return m.Lte
	}
	return 0
}

func (m *FloatRules) GetGt() float32 {
	if m != nil {
		return m.Gt
	}
	return 0
}

func (m *FloatRules) GetGte() float32 {
	if m != nil {
		return m.Gte
	}
	return 0
}

func (m *FloatRules) GetIn() []float32 {
	if m != nil {
		return m.In
	}
	return nil
}

func (m *FloatRules) GetNotIn() []float32 {
	if m != nil {
		return m.NotIn
	}
	return nil
}

// Title
//
// x-displayName "displayname"
// DoubleRules describes the constraints applied to double values
type DoubleRules struct {
	// Title
	//
	// x-displayName "displayname"
	// Const specifies that this field must be exactly the specified value
	Const float64 `protobuf:"fixed64,1,opt,name=const,proto3" json:"const,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Lt specifies that this field must be less than the specified value,
	// exclusive
	Lt float64 `protobuf:"fixed64,2,opt,name=lt,proto3" json:"lt,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Lte specifies that this field must be less than or equal to the
	// specified value, inclusive
	Lte float64 `protobuf:"fixed64,3,opt,name=lte,proto3" json:"lte,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Gt specifies that this field must be greater than the specified value,
	// exclusive. If the value of Gt is larger than a specified Lt or Lte, the
	// range is reversed.
	Gt float64 `protobuf:"fixed64,4,opt,name=gt,proto3" json:"gt,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Gte specifies that this field must be greater than or equal to the
	// specified value, inclusive. If the value of Gte is larger than a
	// specified Lt or Lte, the range is reversed.
	Gte float64 `protobuf:"fixed64,5,opt,name=gte,proto3" json:"gte,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// In specifies that this field must be equal to one of the specified
	// values
	In []float64 `protobuf:"fixed64,6,rep,packed,name=in,proto3" json:"in,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// NotIn specifies that this field cannot be equal to one of the specified
	// values
	NotIn []float64 `protobuf:"fixed64,7,rep,packed,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
}

func (m *DoubleRules) Reset()      { *m = DoubleRules{} }
func (*DoubleRules) ProtoMessage() {}
func (*DoubleRules) Descriptor() ([]byte, []int) {
	return fileDescriptor_24f6720636939b16, []int{2}
}
func (m *DoubleRules) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DoubleRules) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DoubleRules.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DoubleRules) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DoubleRules.Merge(m, src)
}
func (m *DoubleRules) XXX_Size() int {
	return m.Size()
}
func (m *DoubleRules) XXX_DiscardUnknown() {
	xxx_messageInfo_DoubleRules.DiscardUnknown(m)
}

var xxx_messageInfo_DoubleRules proto.InternalMessageInfo

func (m *DoubleRules) GetConst() float64 {
	if m != nil {
		return m.Const
	}
	return 0
}

func (m *DoubleRules) GetLt() float64 {
	if m != nil {
		return m.Lt
	}
	return 0
}

func (m *DoubleRules) GetLte() float64 {
	if m != nil {
		return m.Lte
	}
	return 0
}

func (m *DoubleRules) GetGt() float64 {
	if m != nil {
		return m.Gt
	}
	return 0
}

func (m *DoubleRules) GetGte() float64 {
	if m != nil {
		return m.Gte
	}
	return 0
}

func (m *DoubleRules) GetIn() []float64 {
	if m != nil {
		return m.In
	}
	return nil
}

func (m *DoubleRules) GetNotIn() []float64 {
	if m != nil {
		return m.NotIn
	}
	return nil
}

// Title
//
// x-displayName "displayname"
// Int32Rules describes the constraints applied to int32 values
type Int32Rules struct {
	// Title
	//
	// x-displayName "displayname"
	// Const specifies that this field must be exactly the specified value
	Const int32 `protobuf:"varint,1,opt,name=const,proto3" json:"const,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Lt specifies that this field must be less than the specified value,
	// exclusive
	Lt int32 `protobuf:"varint,2,opt,name=lt,proto3" json:"lt,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Lte specifies that this field must be less than or equal to the
	// specified value, inclusive
	Lte int32 `protobuf:"varint,3,opt,name=lte,proto3" json:"lte,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Gt specifies that this field must be greater than the specified value,
	// exclusive. If the value of Gt is larger than a specified Lt or Lte, the
	// range is reversed.
	Gt int32 `protobuf:"varint,4,opt,name=gt,proto3" json:"gt,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Gte specifies that this field must be greater than or equal to the
	// specified value, inclusive. If the value of Gte is larger than a
	// specified Lt or Lte, the range is reversed.
	Gte int32 `protobuf:"varint,5,opt,name=gte,proto3" json:"gte,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// In specifies that this field must be equal to one of the specified
	// values
	In []int32 `protobuf:"varint,6,rep,packed,name=in,proto3" json:"in,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// NotIn specifies that this field cannot be equal to one of the specified
	// values
	NotIn []int32 `protobuf:"varint,7,rep,packed,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
}

func (m *Int32Rules) Reset()      { *m = Int32Rules{} }
func (*Int32Rules) ProtoMessage() {}
func (*Int32Rules) Descriptor() ([]byte, []int) {
	return fileDescriptor_24f6720636939b16, []int{3}
}
func (m *Int32Rules) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Int32Rules) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Int32Rules.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Int32Rules) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Int32Rules.Merge(m, src)
}
func (m *Int32Rules) XXX_Size() int {
	return m.Size()
}
func (m *Int32Rules) XXX_DiscardUnknown() {
	xxx_messageInfo_Int32Rules.DiscardUnknown(m)
}

var xxx_messageInfo_Int32Rules proto.InternalMessageInfo

func (m *Int32Rules) GetConst() int32 {
	if m != nil {
		return m.Const
	}
	return 0
}

func (m *Int32Rules) GetLt() int32 {
	if m != nil {
		return m.Lt
	}
	return 0
}

func (m *Int32Rules) GetLte() int32 {
	if m != nil {
		return m.Lte
	}
	return 0
}

func (m *Int32Rules) GetGt() int32 {
	if m != nil {
		return m.Gt
	}
	return 0
}

func (m *Int32Rules) GetGte() int32 {
	if m != nil {
		return m.Gte
	}
	return 0
}

func (m *Int32Rules) GetIn() []int32 {
	if m != nil {
		return m.In
	}
	return nil
}

func (m *Int32Rules) GetNotIn() []int32 {
	if m != nil {
		return m.NotIn
	}
	return nil
}

// Title
//
// x-displayName "displayname"
// Int64Rules describes the constraints applied to int64 values
type Int64Rules struct {
	// Title
	//
	// x-displayName "displayname"
	// Const specifies that this field must be exactly the specified value
	Const int64 `protobuf:"varint,1,opt,name=const,proto3" json:"const,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Lt specifies that this field must be less than the specified value,
	// exclusive
	Lt int64 `protobuf:"varint,2,opt,name=lt,proto3" json:"lt,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Lte specifies that this field must be less than or equal to the
	// specified value, inclusive
	Lte int64 `protobuf:"varint,3,opt,name=lte,proto3" json:"lte,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Gt specifies that this field must be greater than the specified value,
	// exclusive. If the value of Gt is larger than a specified Lt or Lte, the
	// range is reversed.
	Gt int64 `protobuf:"varint,4,opt,name=gt,proto3" json:"gt,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Gte specifies that this field must be greater than or equal to the
	// specified value, inclusive. If the value of Gte is larger than a
	// specified Lt or Lte, the range is reversed.
	Gte int64 `protobuf:"varint,5,opt,name=gte,proto3" json:"gte,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// In specifies that this field must be equal to one of the specified
	// values
	In []int64 `protobuf:"varint,6,rep,packed,name=in,proto3" json:"in,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// NotIn specifies that this field cannot be equal to one of the specified
	// values
	NotIn []int64 `protobuf:"varint,7,rep,packed,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
}

func (m *Int64Rules) Reset()      { *m = Int64Rules{} }
func (*Int64Rules) ProtoMessage() {}
func (*Int64Rules) Descriptor() ([]byte, []int) {
	return fileDescriptor_24f6720636939b16, []int{4}
}
func (m *Int64Rules) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Int64Rules) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Int64Rules.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Int64Rules) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Int64Rules.Merge(m, src)
}
func (m *Int64Rules) XXX_Size() int {
	return m.Size()
}
func (m *Int64Rules) XXX_DiscardUnknown() {
	xxx_messageInfo_Int64Rules.DiscardUnknown(m)
}

var xxx_messageInfo_Int64Rules proto.InternalMessageInfo

func (m *Int64Rules) GetConst() int64 {
	if m != nil {
		return m.Const
	}
	return 0
}

func (m *Int64Rules) GetLt() int64 {
	if m != nil {
		return m.Lt
	}
	return 0
}

func (m *Int64Rules) GetLte() int64 {
	if m != nil {
		return m.Lte
	}
	return 0
}

func (m *Int64Rules) GetGt() int64 {
	if m != nil {
		return m.Gt
	}
	return 0
}

func (m *Int64Rules) GetGte() int64 {
	if m != nil {
		return m.Gte
	}
	return 0
}

func (m *Int64Rules) GetIn() []int64 {
	if m != nil {
		return m.In
	}
	return nil
}

func (m *Int64Rules) GetNotIn() []int64 {
	if m != nil {
		return m.NotIn
	}
	return nil
}

// Title
//
// x-displayName "displayname"
// UInt32Rules describes the constraints applied to uint32 values
type UInt32Rules struct {
	// Title
	//
	// x-displayName "displayname"
	// Const specifies that this field must be exactly the specified value
	Const uint32 `protobuf:"varint,1,opt,name=const,proto3" json:"const,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Lt specifies that this field must be less than the specified value,
	// exclusive
	Lt uint32 `protobuf:"varint,2,opt,name=lt,proto3" json:"lt,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Lte specifies that this field must be less than or equal to the
	// specified value, inclusive
	Lte uint32 `protobuf:"varint,3,opt,name=lte,proto3" json:"lte,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Gt specifies that this field must be greater than the specified value,
	// exclusive. If the value of Gt is larger than a specified Lt or Lte, the
	// range is reversed.
	Gt uint32 `protobuf:"varint,4,opt,name=gt,proto3" json:"gt,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Gte specifies that this field must be greater than or equal to the
	// specified value, inclusive. If the value of Gte is larger than a
	// specified Lt or Lte, the range is reversed.
	Gte uint32 `protobuf:"varint,5,opt,name=gte,proto3" json:"gte,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// In specifies that this field must be equal to one of the specified
	// values
	In []uint32 `protobuf:"varint,6,rep,packed,name=in,proto3" json:"in,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// NotIn specifies that this field cannot be equal to one of the specified
	// values
	NotIn []uint32 `protobuf:"varint,7,rep,packed,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Ranges specifies that this field must be one of the values specified in
	// the comma-separated list of values/ranges e.g. "1,2-4,9" or "1,3-5,11-15"
	Ranges string `protobuf:"bytes,8,opt,name=ranges,proto3" json:"ranges,omitempty"`
	// Not in ranges
	//
	// x-displayName "Not in Ranges"
	// Not in Ranges specifies that this field must not be one of the values specified in
	// the comma-separated list of values/ranges e.g. "1,2-4,9" or "1,3-5,11-15"
	NotInRanges string `protobuf:"bytes,9,opt,name=not_in_ranges,json=notInRanges,proto3" json:"not_in_ranges,omitempty"`
}

func (m *UInt32Rules) Reset()      { *m = UInt32Rules{} }
func (*UInt32Rules) ProtoMessage() {}
func (*UInt32Rules) Descriptor() ([]byte, []int) {
	return fileDescriptor_24f6720636939b16, []int{5}
}
func (m *UInt32Rules) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UInt32Rules) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UInt32Rules.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UInt32Rules) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UInt32Rules.Merge(m, src)
}
func (m *UInt32Rules) XXX_Size() int {
	return m.Size()
}
func (m *UInt32Rules) XXX_DiscardUnknown() {
	xxx_messageInfo_UInt32Rules.DiscardUnknown(m)
}

var xxx_messageInfo_UInt32Rules proto.InternalMessageInfo

func (m *UInt32Rules) GetConst() uint32 {
	if m != nil {
		return m.Const
	}
	return 0
}

func (m *UInt32Rules) GetLt() uint32 {
	if m != nil {
		return m.Lt
	}
	return 0
}

func (m *UInt32Rules) GetLte() uint32 {
	if m != nil {
		return m.Lte
	}
	return 0
}

func (m *UInt32Rules) GetGt() uint32 {
	if m != nil {
		return m.Gt
	}
	return 0
}

func (m *UInt32Rules) GetGte() uint32 {
	if m != nil {
		return m.Gte
	}
	return 0
}

func (m *UInt32Rules) GetIn() []uint32 {
	if m != nil {
		return m.In
	}
	return nil
}

func (m *UInt32Rules) GetNotIn() []uint32 {
	if m != nil {
		return m.NotIn
	}
	return nil
}

func (m *UInt32Rules) GetRanges() string {
	if m != nil {
		return m.Ranges
	}
	return ""
}

func (m *UInt32Rules) GetNotInRanges() string {
	if m != nil {
		return m.NotInRanges
	}
	return ""
}

// Title
//
// x-displayName "displayname"
// UInt64Rules describes the constraints applied to uint64 values
type UInt64Rules struct {
	// Title
	//
	// x-displayName "displayname"
	// Const specifies that this field must be exactly the specified value
	Const uint64 `protobuf:"varint,1,opt,name=const,proto3" json:"const,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Lt specifies that this field must be less than the specified value,
	// exclusive
	Lt uint64 `protobuf:"varint,2,opt,name=lt,proto3" json:"lt,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Lte specifies that this field must be less than or equal to the
	// specified value, inclusive
	Lte uint64 `protobuf:"varint,3,opt,name=lte,proto3" json:"lte,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Gt specifies that this field must be greater than the specified value,
	// exclusive. If the value of Gt is larger than a specified Lt or Lte, the
	// range is reversed.
	Gt uint64 `protobuf:"varint,4,opt,name=gt,proto3" json:"gt,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Gte specifies that this field must be greater than or equal to the
	// specified value, inclusive. If the value of Gte is larger than a
	// specified Lt or Lte, the range is reversed.
	Gte uint64 `protobuf:"varint,5,opt,name=gte,proto3" json:"gte,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// In specifies that this field must be equal to one of the specified
	// values
	In []uint64 `protobuf:"varint,6,rep,packed,name=in,proto3" json:"in,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// NotIn specifies that this field cannot be equal to one of the specified
	// values
	NotIn []uint64 `protobuf:"varint,7,rep,packed,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
}

func (m *UInt64Rules) Reset()      { *m = UInt64Rules{} }
func (*UInt64Rules) ProtoMessage() {}
func (*UInt64Rules) Descriptor() ([]byte, []int) {
	return fileDescriptor_24f6720636939b16, []int{6}
}
func (m *UInt64Rules) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UInt64Rules) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UInt64Rules.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UInt64Rules) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UInt64Rules.Merge(m, src)
}
func (m *UInt64Rules) XXX_Size() int {
	return m.Size()
}
func (m *UInt64Rules) XXX_DiscardUnknown() {
	xxx_messageInfo_UInt64Rules.DiscardUnknown(m)
}

var xxx_messageInfo_UInt64Rules proto.InternalMessageInfo

func (m *UInt64Rules) GetConst() uint64 {
	if m != nil {
		return m.Const
	}
	return 0
}

func (m *UInt64Rules) GetLt() uint64 {
	if m != nil {
		return m.Lt
	}
	return 0
}

func (m *UInt64Rules) GetLte() uint64 {
	if m != nil {
		return m.Lte
	}
	return 0
}

func (m *UInt64Rules) GetGt() uint64 {
	if m != nil {
		return m.Gt
	}
	return 0
}

func (m *UInt64Rules) GetGte() uint64 {
	if m != nil {
		return m.Gte
	}
	return 0
}

func (m *UInt64Rules) GetIn() []uint64 {
	if m != nil {
		return m.In
	}
	return nil
}

func (m *UInt64Rules) GetNotIn() []uint64 {
	if m != nil {
		return m.NotIn
	}
	return nil
}

// Title
//
// x-displayName "displayname"
// SInt32Rules describes the constraints applied to sint32 values
type SInt32Rules struct {
	// Title
	//
	// x-displayName "displayname"
	// Const specifies that this field must be exactly the specified value
	Const int32 `protobuf:"zigzag32,1,opt,name=const,proto3" json:"const,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Lt specifies that this field must be less than the specified value,
	// exclusive
	Lt int32 `protobuf:"zigzag32,2,opt,name=lt,proto3" json:"lt,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Lte specifies that this field must be less than or equal to the
	// specified value, inclusive
	Lte int32 `protobuf:"zigzag32,3,opt,name=lte,proto3" json:"lte,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Gt specifies that this field must be greater than the specified value,
	// exclusive. If the value of Gt is larger than a specified Lt or Lte, the
	// range is reversed.
	Gt int32 `protobuf:"zigzag32,4,opt,name=gt,proto3" json:"gt,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Gte specifies that this field must be greater than or equal to the
	// specified value, inclusive. If the value of Gte is larger than a
	// specified Lt or Lte, the range is reversed.
	Gte int32 `protobuf:"zigzag32,5,opt,name=gte,proto3" json:"gte,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// In specifies that this field must be equal to one of the specified
	// values
	In []int32 `protobuf:"zigzag32,6,rep,packed,name=in,proto3" json:"in,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// NotIn specifies that this field cannot be equal to one of the specified
	// values
	NotIn []int32 `protobuf:"zigzag32,7,rep,packed,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
}

func (m *SInt32Rules) Reset()      { *m = SInt32Rules{} }
func (*SInt32Rules) ProtoMessage() {}
func (*SInt32Rules) Descriptor() ([]byte, []int) {
	return fileDescriptor_24f6720636939b16, []int{7}
}
func (m *SInt32Rules) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SInt32Rules) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SInt32Rules.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SInt32Rules) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SInt32Rules.Merge(m, src)
}
func (m *SInt32Rules) XXX_Size() int {
	return m.Size()
}
func (m *SInt32Rules) XXX_DiscardUnknown() {
	xxx_messageInfo_SInt32Rules.DiscardUnknown(m)
}

var xxx_messageInfo_SInt32Rules proto.InternalMessageInfo

func (m *SInt32Rules) GetConst() int32 {
	if m != nil {
		return m.Const
	}
	return 0
}

func (m *SInt32Rules) GetLt() int32 {
	if m != nil {
		return m.Lt
	}
	return 0
}

func (m *SInt32Rules) GetLte() int32 {
	if m != nil {
		return m.Lte
	}
	return 0
}

func (m *SInt32Rules) GetGt() int32 {
	if m != nil {
		return m.Gt
	}
	return 0
}

func (m *SInt32Rules) GetGte() int32 {
	if m != nil {
		return m.Gte
	}
	return 0
}

func (m *SInt32Rules) GetIn() []int32 {
	if m != nil {
		return m.In
	}
	return nil
}

func (m *SInt32Rules) GetNotIn() []int32 {
	if m != nil {
		return m.NotIn
	}
	return nil
}

// Title
//
// x-displayName "displayname"
// SInt64Rules describes the constraints applied to sint64 values
type SInt64Rules struct {
	// Title
	//
	// x-displayName "displayname"
	// Const specifies that this field must be exactly the specified value
	Const int64 `protobuf:"zigzag64,1,opt,name=const,proto3" json:"const,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Lt specifies that this field must be less than the specified value,
	// exclusive
	Lt int64 `protobuf:"zigzag64,2,opt,name=lt,proto3" json:"lt,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Lte specifies that this field must be less than or equal to the
	// specified value, inclusive
	Lte int64 `protobuf:"zigzag64,3,opt,name=lte,proto3" json:"lte,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Gt specifies that this field must be greater than the specified value,
	// exclusive. If the value of Gt is larger than a specified Lt or Lte, the
	// range is reversed.
	Gt int64 `protobuf:"zigzag64,4,opt,name=gt,proto3" json:"gt,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Gte specifies that this field must be greater than or equal to the
	// specified value, inclusive. If the value of Gte is larger than a
	// specified Lt or Lte, the range is reversed.
	Gte int64 `protobuf:"zigzag64,5,opt,name=gte,proto3" json:"gte,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// In specifies that this field must be equal to one of the specified
	// values
	In []int64 `protobuf:"zigzag64,6,rep,packed,name=in,proto3" json:"in,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// NotIn specifies that this field cannot be equal to one of the specified
	// values
	NotIn []int64 `protobuf:"zigzag64,7,rep,packed,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
}

func (m *SInt64Rules) Reset()      { *m = SInt64Rules{} }
func (*SInt64Rules) ProtoMessage() {}
func (*SInt64Rules) Descriptor() ([]byte, []int) {
	return fileDescriptor_24f6720636939b16, []int{8}
}
func (m *SInt64Rules) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SInt64Rules) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SInt64Rules.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SInt64Rules) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SInt64Rules.Merge(m, src)
}
func (m *SInt64Rules) XXX_Size() int {
	return m.Size()
}
func (m *SInt64Rules) XXX_DiscardUnknown() {
	xxx_messageInfo_SInt64Rules.DiscardUnknown(m)
}

var xxx_messageInfo_SInt64Rules proto.InternalMessageInfo

func (m *SInt64Rules) GetConst() int64 {
	if m != nil {
		return m.Const
	}
	return 0
}

func (m *SInt64Rules) GetLt() int64 {
	if m != nil {
		return m.Lt
	}
	return 0
}

func (m *SInt64Rules) GetLte() int64 {
	if m != nil {
		return m.Lte
	}
	return 0
}

func (m *SInt64Rules) GetGt() int64 {
	if m != nil {
		return m.Gt
	}
	return 0
}

func (m *SInt64Rules) GetGte() int64 {
	if m != nil {
		return m.Gte
	}
	return 0
}

func (m *SInt64Rules) GetIn() []int64 {
	if m != nil {
		return m.In
	}
	return nil
}

func (m *SInt64Rules) GetNotIn() []int64 {
	if m != nil {
		return m.NotIn
	}
	return nil
}

// Title
//
// x-displayName "displayname"
// Fixed32Rules describes the constraints applied to fixed32 values
type Fixed32Rules struct {
	// Title
	//
	// x-displayName "displayname"
	// Const specifies that this field must be exactly the specified value
	Const uint32 `protobuf:"fixed32,1,opt,name=const,proto3" json:"const,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Lt specifies that this field must be less than the specified value,
	// exclusive
	Lt uint32 `protobuf:"fixed32,2,opt,name=lt,proto3" json:"lt,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Lte specifies that this field must be less than or equal to the
	// specified value, inclusive
	Lte uint32 `protobuf:"fixed32,3,opt,name=lte,proto3" json:"lte,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Gt specifies that this field must be greater than the specified value,
	// exclusive. If the value of Gt is larger than a specified Lt or Lte, the
	// range is reversed.
	Gt uint32 `protobuf:"fixed32,4,opt,name=gt,proto3" json:"gt,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Gte specifies that this field must be greater than or equal to the
	// specified value, inclusive. If the value of Gte is larger than a
	// specified Lt or Lte, the range is reversed.
	Gte uint32 `protobuf:"fixed32,5,opt,name=gte,proto3" json:"gte,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// In specifies that this field must be equal to one of the specified
	// values
	In []uint32 `protobuf:"fixed32,6,rep,packed,name=in,proto3" json:"in,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// NotIn specifies that this field cannot be equal to one of the specified
	// values
	NotIn []uint32 `protobuf:"fixed32,7,rep,packed,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
}

func (m *Fixed32Rules) Reset()      { *m = Fixed32Rules{} }
func (*Fixed32Rules) ProtoMessage() {}
func (*Fixed32Rules) Descriptor() ([]byte, []int) {
	return fileDescriptor_24f6720636939b16, []int{9}
}
func (m *Fixed32Rules) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Fixed32Rules) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Fixed32Rules.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Fixed32Rules) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Fixed32Rules.Merge(m, src)
}
func (m *Fixed32Rules) XXX_Size() int {
	return m.Size()
}
func (m *Fixed32Rules) XXX_DiscardUnknown() {
	xxx_messageInfo_Fixed32Rules.DiscardUnknown(m)
}

var xxx_messageInfo_Fixed32Rules proto.InternalMessageInfo

func (m *Fixed32Rules) GetConst() uint32 {
	if m != nil {
		return m.Const
	}
	return 0
}

func (m *Fixed32Rules) GetLt() uint32 {
	if m != nil {
		return m.Lt
	}
	return 0
}

func (m *Fixed32Rules) GetLte() uint32 {
	if m != nil {
		return m.Lte
	}
	return 0
}

func (m *Fixed32Rules) GetGt() uint32 {
	if m != nil {
		return m.Gt
	}
	return 0
}

func (m *Fixed32Rules) GetGte() uint32 {
	if m != nil {
		return m.Gte
	}
	return 0
}

func (m *Fixed32Rules) GetIn() []uint32 {
	if m != nil {
		return m.In
	}
	return nil
}

func (m *Fixed32Rules) GetNotIn() []uint32 {
	if m != nil {
		return m.NotIn
	}
	return nil
}

// Title
//
// x-displayName "displayname"
// Fixed64Rules describes the constraints applied to fixed64 values
type Fixed64Rules struct {
	// Title
	//
	// x-displayName "displayname"
	// Const specifies that this field must be exactly the specified value
	Const uint64 `protobuf:"fixed64,1,opt,name=const,proto3" json:"const,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Lt specifies that this field must be less than the specified value,
	// exclusive
	Lt uint64 `protobuf:"fixed64,2,opt,name=lt,proto3" json:"lt,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Lte specifies that this field must be less than or equal to the
	// specified value, inclusive
	Lte uint64 `protobuf:"fixed64,3,opt,name=lte,proto3" json:"lte,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Gt specifies that this field must be greater than the specified value,
	// exclusive. If the value of Gt is larger than a specified Lt or Lte, the
	// range is reversed.
	Gt uint64 `protobuf:"fixed64,4,opt,name=gt,proto3" json:"gt,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Gte specifies that this field must be greater than or equal to the
	// specified value, inclusive. If the value of Gte is larger than a
	// specified Lt or Lte, the range is reversed.
	Gte uint64 `protobuf:"fixed64,5,opt,name=gte,proto3" json:"gte,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// In specifies that this field must be equal to one of the specified
	// values
	In []uint64 `protobuf:"fixed64,6,rep,packed,name=in,proto3" json:"in,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// NotIn specifies that this field cannot be equal to one of the specified
	// values
	NotIn []uint64 `protobuf:"fixed64,7,rep,packed,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
}

func (m *Fixed64Rules) Reset()      { *m = Fixed64Rules{} }
func (*Fixed64Rules) ProtoMessage() {}
func (*Fixed64Rules) Descriptor() ([]byte, []int) {
	return fileDescriptor_24f6720636939b16, []int{10}
}
func (m *Fixed64Rules) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Fixed64Rules) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Fixed64Rules.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Fixed64Rules) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Fixed64Rules.Merge(m, src)
}
func (m *Fixed64Rules) XXX_Size() int {
	return m.Size()
}
func (m *Fixed64Rules) XXX_DiscardUnknown() {
	xxx_messageInfo_Fixed64Rules.DiscardUnknown(m)
}

var xxx_messageInfo_Fixed64Rules proto.InternalMessageInfo

func (m *Fixed64Rules) GetConst() uint64 {
	if m != nil {
		return m.Const
	}
	return 0
}

func (m *Fixed64Rules) GetLt() uint64 {
	if m != nil {
		return m.Lt
	}
	return 0
}

func (m *Fixed64Rules) GetLte() uint64 {
	if m != nil {
		return m.Lte
	}
	return 0
}

func (m *Fixed64Rules) GetGt() uint64 {
	if m != nil {
		return m.Gt
	}
	return 0
}

func (m *Fixed64Rules) GetGte() uint64 {
	if m != nil {
		return m.Gte
	}
	return 0
}

func (m *Fixed64Rules) GetIn() []uint64 {
	if m != nil {
		return m.In
	}
	return nil
}

func (m *Fixed64Rules) GetNotIn() []uint64 {
	if m != nil {
		return m.NotIn
	}
	return nil
}

// Title
//
// x-displayName "displayname"
// SFixed32Rules describes the constraints applied to sfixed32 values
type SFixed32Rules struct {
	// Title
	//
	// x-displayName "displayname"
	// Const specifies that this field must be exactly the specified value
	Const int32 `protobuf:"fixed32,1,opt,name=const,proto3" json:"const,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Lt specifies that this field must be less than the specified value,
	// exclusive
	Lt int32 `protobuf:"fixed32,2,opt,name=lt,proto3" json:"lt,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Lte specifies that this field must be less than or equal to the
	// specified value, inclusive
	Lte int32 `protobuf:"fixed32,3,opt,name=lte,proto3" json:"lte,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Gt specifies that this field must be greater than the specified value,
	// exclusive. If the value of Gt is larger than a specified Lt or Lte, the
	// range is reversed.
	Gt int32 `protobuf:"fixed32,4,opt,name=gt,proto3" json:"gt,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Gte specifies that this field must be greater than or equal to the
	// specified value, inclusive. If the value of Gte is larger than a
	// specified Lt or Lte, the range is reversed.
	Gte int32 `protobuf:"fixed32,5,opt,name=gte,proto3" json:"gte,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// In specifies that this field must be equal to one of the specified
	// values
	In []int32 `protobuf:"fixed32,6,rep,packed,name=in,proto3" json:"in,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// NotIn specifies that this field cannot be equal to one of the specified
	// values
	NotIn []int32 `protobuf:"fixed32,7,rep,packed,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
}

func (m *SFixed32Rules) Reset()      { *m = SFixed32Rules{} }
func (*SFixed32Rules) ProtoMessage() {}
func (*SFixed32Rules) Descriptor() ([]byte, []int) {
	return fileDescriptor_24f6720636939b16, []int{11}
}
func (m *SFixed32Rules) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SFixed32Rules) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SFixed32Rules.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SFixed32Rules) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SFixed32Rules.Merge(m, src)
}
func (m *SFixed32Rules) XXX_Size() int {
	return m.Size()
}
func (m *SFixed32Rules) XXX_DiscardUnknown() {
	xxx_messageInfo_SFixed32Rules.DiscardUnknown(m)
}

var xxx_messageInfo_SFixed32Rules proto.InternalMessageInfo

func (m *SFixed32Rules) GetConst() int32 {
	if m != nil {
		return m.Const
	}
	return 0
}

func (m *SFixed32Rules) GetLt() int32 {
	if m != nil {
		return m.Lt
	}
	return 0
}

func (m *SFixed32Rules) GetLte() int32 {
	if m != nil {
		return m.Lte
	}
	return 0
}

func (m *SFixed32Rules) GetGt() int32 {
	if m != nil {
		return m.Gt
	}
	return 0
}

func (m *SFixed32Rules) GetGte() int32 {
	if m != nil {
		return m.Gte
	}
	return 0
}

func (m *SFixed32Rules) GetIn() []int32 {
	if m != nil {
		return m.In
	}
	return nil
}

func (m *SFixed32Rules) GetNotIn() []int32 {
	if m != nil {
		return m.NotIn
	}
	return nil
}

// Title
//
// x-displayName "displayname"
// SFixed64Rules describes the constraints applied to sfixed64 values
type SFixed64Rules struct {
	// Title
	//
	// x-displayName "displayname"
	// Const specifies that this field must be exactly the specified value
	Const int64 `protobuf:"fixed64,1,opt,name=const,proto3" json:"const,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Lt specifies that this field must be less than the specified value,
	// exclusive
	Lt int64 `protobuf:"fixed64,2,opt,name=lt,proto3" json:"lt,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Lte specifies that this field must be less than or equal to the
	// specified value, inclusive
	Lte int64 `protobuf:"fixed64,3,opt,name=lte,proto3" json:"lte,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Gt specifies that this field must be greater than the specified value,
	// exclusive. If the value of Gt is larger than a specified Lt or Lte, the
	// range is reversed.
	Gt int64 `protobuf:"fixed64,4,opt,name=gt,proto3" json:"gt,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Gte specifies that this field must be greater than or equal to the
	// specified value, inclusive. If the value of Gte is larger than a
	// specified Lt or Lte, the range is reversed.
	Gte int64 `protobuf:"fixed64,5,opt,name=gte,proto3" json:"gte,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// In specifies that this field must be equal to one of the specified
	// values
	In []int64 `protobuf:"fixed64,6,rep,packed,name=in,proto3" json:"in,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// NotIn specifies that this field cannot be equal to one of the specified
	// values
	NotIn []int64 `protobuf:"fixed64,7,rep,packed,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
}

func (m *SFixed64Rules) Reset()      { *m = SFixed64Rules{} }
func (*SFixed64Rules) ProtoMessage() {}
func (*SFixed64Rules) Descriptor() ([]byte, []int) {
	return fileDescriptor_24f6720636939b16, []int{12}
}
func (m *SFixed64Rules) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SFixed64Rules) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SFixed64Rules.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SFixed64Rules) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SFixed64Rules.Merge(m, src)
}
func (m *SFixed64Rules) XXX_Size() int {
	return m.Size()
}
func (m *SFixed64Rules) XXX_DiscardUnknown() {
	xxx_messageInfo_SFixed64Rules.DiscardUnknown(m)
}

var xxx_messageInfo_SFixed64Rules proto.InternalMessageInfo

func (m *SFixed64Rules) GetConst() int64 {
	if m != nil {
		return m.Const
	}
	return 0
}

func (m *SFixed64Rules) GetLt() int64 {
	if m != nil {
		return m.Lt
	}
	return 0
}

func (m *SFixed64Rules) GetLte() int64 {
	if m != nil {
		return m.Lte
	}
	return 0
}

func (m *SFixed64Rules) GetGt() int64 {
	if m != nil {
		return m.Gt
	}
	return 0
}

func (m *SFixed64Rules) GetGte() int64 {
	if m != nil {
		return m.Gte
	}
	return 0
}

func (m *SFixed64Rules) GetIn() []int64 {
	if m != nil {
		return m.In
	}
	return nil
}

func (m *SFixed64Rules) GetNotIn() []int64 {
	if m != nil {
		return m.NotIn
	}
	return nil
}

// Title
//
// x-displayName "displayname"
// BoolRules describes the constraints applied to bool values
type BoolRules struct {
	// Title
	//
	// x-displayName "displayname"
	// Const specifies that this field must be exactly the specified value
	Const bool `protobuf:"varint,1,opt,name=const,proto3" json:"const,omitempty"`
}

func (m *BoolRules) Reset()      { *m = BoolRules{} }
func (*BoolRules) ProtoMessage() {}
func (*BoolRules) Descriptor() ([]byte, []int) {
	return fileDescriptor_24f6720636939b16, []int{13}
}
func (m *BoolRules) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BoolRules) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BoolRules.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BoolRules) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BoolRules.Merge(m, src)
}
func (m *BoolRules) XXX_Size() int {
	return m.Size()
}
func (m *BoolRules) XXX_DiscardUnknown() {
	xxx_messageInfo_BoolRules.DiscardUnknown(m)
}

var xxx_messageInfo_BoolRules proto.InternalMessageInfo

func (m *BoolRules) GetConst() bool {
	if m != nil {
		return m.Const
	}
	return false
}

// Title
//
// x-displayName "displayname"
// StringRules describe the constraints applied to string values
type StringRules struct {
	// Title
	//
	// x-displayName "displayname"
	// Const specifies that this field must be exactly the specified value
	Const string `protobuf:"bytes,1,opt,name=const,proto3" json:"const,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Len specifies that this field must be the specified number of
	// characters (Unicode code points). Note that the number of
	// characters may differ from the number of bytes in the string.
	Len uint64 `protobuf:"varint,19,opt,name=len,proto3" json:"len,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// MinLen specifies that this field must be the specified number of
	// characters (Unicode code points) at a minimum. Note that the number of
	// characters may differ from the number of bytes in the string.
	MinLen uint64 `protobuf:"varint,2,opt,name=min_len,json=minLen,proto3" json:"min_len,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// MaxLen specifies that this field must be the specified number of
	// characters (Unicode code points) at a maximum. Note that the number of
	// characters may differ from the number of bytes in the string.
	MaxLen uint64 `protobuf:"varint,3,opt,name=max_len,json=maxLen,proto3" json:"max_len,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// LenBytes specifies that this field must be the specified number of bytes
	// at a minimum
	LenBytes uint64 `protobuf:"varint,20,opt,name=len_bytes,json=lenBytes,proto3" json:"len_bytes,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// MinBytes specifies that this field must be the specified number of bytes
	// at a minimum
	MinBytes uint64 `protobuf:"varint,4,opt,name=min_bytes,json=minBytes,proto3" json:"min_bytes,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// MaxBytes specifies that this field must be the specified number of bytes
	// at a maximum
	MaxBytes uint64 `protobuf:"varint,5,opt,name=max_bytes,json=maxBytes,proto3" json:"max_bytes,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Pattern specifies that this field must match against the specified
	// regular expression (RE2 syntax). The included expression should elide
	// any delimiters.
	Pattern string `protobuf:"bytes,6,opt,name=pattern,proto3" json:"pattern,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Prefix specifies that this field must have the specified substring at
	// the beginning of the string.
	Prefix string `protobuf:"bytes,7,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Suffix specifies that this field must have the specified substring at
	// the end of the string.
	Suffix string `protobuf:"bytes,8,opt,name=suffix,proto3" json:"suffix,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Contains specifies that this field must have the specified substring
	// anywhere in the string.
	Contains string `protobuf:"bytes,9,opt,name=contains,proto3" json:"contains,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// In specifies that this field must be equal to one of the specified
	// values
	In []string `protobuf:"bytes,10,rep,name=in,proto3" json:"in,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// NotIn specifies that this field cannot be equal to one of the specified
	// values
	NotIn []string `protobuf:"bytes,11,rep,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// min_ip_prefix_length specifies the minimum length of a ipv4/ipv6 prefix
	MinIpPrefixLength int32 `protobuf:"varint,34,opt,name=min_ip_prefix_length,json=minIpPrefixLength,proto3" json:"min_ip_prefix_length,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// max_ip_prefix_length specifies the minimum length of a ipv4/ipv6 prefix
	MaxIpPrefixLength int32 `protobuf:"varint,35,opt,name=max_ip_prefix_length,json=maxIpPrefixLength,proto3" json:"max_ip_prefix_length,omitempty"`
	// Minimum Time Interval
	//
	// x-displayName "Minimum Time Interval"
	// min_time_interval specifies a minimum interval in seconds/minutes/hours/days
	// using a value matching regex "^[1-9][0-9]+[smhd]$"
	MinTimeInterval string `protobuf:"bytes,60,opt,name=min_time_interval,json=minTimeInterval,proto3" json:"min_time_interval,omitempty"`
	// Maximum Time Interval
	//
	// x-displayName "Maximum Time Interval"
	// max_time_interval specifies a maximum interval in seconds/minutes/hours/days
	// using a value matching regex "^[1-9][0-9]+[smhd]$"
	MaxTimeInterval string `protobuf:"bytes,61,opt,name=max_time_interval,json=maxTimeInterval,proto3" json:"max_time_interval,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// WellKnown rules provide advanced constraints against common string
	// patterns
	//
	// Types that are valid to be assigned to WellKnown:
	//	*StringRules_Email
	//	*StringRules_Hostname
	//	*StringRules_Ip
	//	*StringRules_Ipv4
	//	*StringRules_Ipv6
	//	*StringRules_Uri
	//	*StringRules_UriRef
	//	*StringRules_IpPrefix
	//	*StringRules_PortRange
	//	*StringRules_Mac
	//	*StringRules_Regex
	//	*StringRules_HttpHeaderField
	//	*StringRules_K8SLabelValue
	//	*StringRules_NotEmpty
	//	*StringRules_Hostport
	//	*StringRules_JsonPath
	//	*StringRules_Hex
	//	*StringRules_Ipv4Prefix
	//	*StringRules_Ipv6Prefix
	//	*StringRules_VhDomain
	//	*StringRules_VesObjectName
	//	*StringRules_IanaSvcName
	//	*StringRules_Dns_1123Label
	//	*StringRules_UnixFilePath
	//	*StringRules_PhoneNumber
	//	*StringRules_PortRangeList
	//	*StringRules_VhDomainNoPort
	//	*StringRules_HostnameOrIp
	//	*StringRules_K8SLabelSelector
	//	*StringRules_HttpPath
	//	*StringRules_TimeInterval
	WellKnown isStringRules_WellKnown `protobuf_oneof:"well_known"`
}

func (m *StringRules) Reset()      { *m = StringRules{} }
func (*StringRules) ProtoMessage() {}
func (*StringRules) Descriptor() ([]byte, []int) {
	return fileDescriptor_24f6720636939b16, []int{14}
}
func (m *StringRules) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StringRules) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StringRules.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StringRules) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringRules.Merge(m, src)
}
func (m *StringRules) XXX_Size() int {
	return m.Size()
}
func (m *StringRules) XXX_DiscardUnknown() {
	xxx_messageInfo_StringRules.DiscardUnknown(m)
}

var xxx_messageInfo_StringRules proto.InternalMessageInfo

type isStringRules_WellKnown interface {
	isStringRules_WellKnown()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type StringRules_Email struct {
	Email bool `protobuf:"varint,12,opt,name=email,proto3,oneof" json:"email,omitempty"`
}
type StringRules_Hostname struct {
	Hostname bool `protobuf:"varint,13,opt,name=hostname,proto3,oneof" json:"hostname,omitempty"`
}
type StringRules_Ip struct {
	Ip bool `protobuf:"varint,14,opt,name=ip,proto3,oneof" json:"ip,omitempty"`
}
type StringRules_Ipv4 struct {
	Ipv4 bool `protobuf:"varint,15,opt,name=ipv4,proto3,oneof" json:"ipv4,omitempty"`
}
type StringRules_Ipv6 struct {
	Ipv6 bool `protobuf:"varint,16,opt,name=ipv6,proto3,oneof" json:"ipv6,omitempty"`
}
type StringRules_Uri struct {
	Uri bool `protobuf:"varint,17,opt,name=uri,proto3,oneof" json:"uri,omitempty"`
}
type StringRules_UriRef struct {
	UriRef bool `protobuf:"varint,18,opt,name=uri_ref,json=uriRef,proto3,oneof" json:"uri_ref,omitempty"`
}
type StringRules_IpPrefix struct {
	IpPrefix bool `protobuf:"varint,21,opt,name=ip_prefix,json=ipPrefix,proto3,oneof" json:"ip_prefix,omitempty"`
}
type StringRules_PortRange struct {
	PortRange bool `protobuf:"varint,22,opt,name=port_range,json=portRange,proto3,oneof" json:"port_range,omitempty"`
}
type StringRules_Mac struct {
	Mac bool `protobuf:"varint,23,opt,name=mac,proto3,oneof" json:"mac,omitempty"`
}
type StringRules_Regex struct {
	Regex bool `protobuf:"varint,24,opt,name=regex,proto3,oneof" json:"regex,omitempty"`
}
type StringRules_HttpHeaderField struct {
	HttpHeaderField bool `protobuf:"varint,25,opt,name=http_header_field,json=httpHeaderField,proto3,oneof" json:"http_header_field,omitempty"`
}
type StringRules_K8SLabelValue struct {
	K8SLabelValue bool `protobuf:"varint,26,opt,name=k8s_label_value,json=k8sLabelValue,proto3,oneof" json:"k8s_label_value,omitempty"`
}
type StringRules_NotEmpty struct {
	NotEmpty bool `protobuf:"varint,27,opt,name=not_empty,json=notEmpty,proto3,oneof" json:"not_empty,omitempty"`
}
type StringRules_Hostport struct {
	Hostport bool `protobuf:"varint,28,opt,name=hostport,proto3,oneof" json:"hostport,omitempty"`
}
type StringRules_JsonPath struct {
	JsonPath bool `protobuf:"varint,29,opt,name=json_path,json=jsonPath,proto3,oneof" json:"json_path,omitempty"`
}
type StringRules_Hex struct {
	Hex bool `protobuf:"varint,30,opt,name=hex,proto3,oneof" json:"hex,omitempty"`
}
type StringRules_Ipv4Prefix struct {
	Ipv4Prefix bool `protobuf:"varint,31,opt,name=ipv4_prefix,json=ipv4Prefix,proto3,oneof" json:"ipv4_prefix,omitempty"`
}
type StringRules_Ipv6Prefix struct {
	Ipv6Prefix bool `protobuf:"varint,32,opt,name=ipv6_prefix,json=ipv6Prefix,proto3,oneof" json:"ipv6_prefix,omitempty"`
}
type StringRules_VhDomain struct {
	VhDomain bool `protobuf:"varint,33,opt,name=vh_domain,json=vhDomain,proto3,oneof" json:"vh_domain,omitempty"`
}
type StringRules_VesObjectName struct {
	VesObjectName bool `protobuf:"varint,36,opt,name=ves_object_name,json=vesObjectName,proto3,oneof" json:"ves_object_name,omitempty"`
}
type StringRules_IanaSvcName struct {
	IanaSvcName bool `protobuf:"varint,37,opt,name=iana_svc_name,json=ianaSvcName,proto3,oneof" json:"iana_svc_name,omitempty"`
}
type StringRules_Dns_1123Label struct {
	Dns_1123Label bool `protobuf:"varint,38,opt,name=dns_1123_label,json=dns1123Label,proto3,oneof" json:"dns_1123_label,omitempty"`
}
type StringRules_UnixFilePath struct {
	UnixFilePath bool `protobuf:"varint,39,opt,name=unix_file_path,json=unixFilePath,proto3,oneof" json:"unix_file_path,omitempty"`
}
type StringRules_PhoneNumber struct {
	PhoneNumber bool `protobuf:"varint,40,opt,name=phone_number,json=phoneNumber,proto3,oneof" json:"phone_number,omitempty"`
}
type StringRules_PortRangeList struct {
	PortRangeList bool `protobuf:"varint,41,opt,name=port_range_list,json=portRangeList,proto3,oneof" json:"port_range_list,omitempty"`
}
type StringRules_VhDomainNoPort struct {
	VhDomainNoPort bool `protobuf:"varint,42,opt,name=vh_domain_no_port,json=vhDomainNoPort,proto3,oneof" json:"vh_domain_no_port,omitempty"`
}
type StringRules_HostnameOrIp struct {
	HostnameOrIp bool `protobuf:"varint,43,opt,name=hostname_or_ip,json=hostnameOrIp,proto3,oneof" json:"hostname_or_ip,omitempty"`
}
type StringRules_K8SLabelSelector struct {
	K8SLabelSelector bool `protobuf:"varint,44,opt,name=k8s_label_selector,json=k8sLabelSelector,proto3,oneof" json:"k8s_label_selector,omitempty"`
}
type StringRules_HttpPath struct {
	HttpPath bool `protobuf:"varint,45,opt,name=http_path,json=httpPath,proto3,oneof" json:"http_path,omitempty"`
}
type StringRules_TimeInterval struct {
	TimeInterval bool `protobuf:"varint,46,opt,name=time_interval,json=timeInterval,proto3,oneof" json:"time_interval,omitempty"`
}

func (*StringRules_Email) isStringRules_WellKnown()            {}
func (*StringRules_Hostname) isStringRules_WellKnown()         {}
func (*StringRules_Ip) isStringRules_WellKnown()               {}
func (*StringRules_Ipv4) isStringRules_WellKnown()             {}
func (*StringRules_Ipv6) isStringRules_WellKnown()             {}
func (*StringRules_Uri) isStringRules_WellKnown()              {}
func (*StringRules_UriRef) isStringRules_WellKnown()           {}
func (*StringRules_IpPrefix) isStringRules_WellKnown()         {}
func (*StringRules_PortRange) isStringRules_WellKnown()        {}
func (*StringRules_Mac) isStringRules_WellKnown()              {}
func (*StringRules_Regex) isStringRules_WellKnown()            {}
func (*StringRules_HttpHeaderField) isStringRules_WellKnown()  {}
func (*StringRules_K8SLabelValue) isStringRules_WellKnown()    {}
func (*StringRules_NotEmpty) isStringRules_WellKnown()         {}
func (*StringRules_Hostport) isStringRules_WellKnown()         {}
func (*StringRules_JsonPath) isStringRules_WellKnown()         {}
func (*StringRules_Hex) isStringRules_WellKnown()              {}
func (*StringRules_Ipv4Prefix) isStringRules_WellKnown()       {}
func (*StringRules_Ipv6Prefix) isStringRules_WellKnown()       {}
func (*StringRules_VhDomain) isStringRules_WellKnown()         {}
func (*StringRules_VesObjectName) isStringRules_WellKnown()    {}
func (*StringRules_IanaSvcName) isStringRules_WellKnown()      {}
func (*StringRules_Dns_1123Label) isStringRules_WellKnown()    {}
func (*StringRules_UnixFilePath) isStringRules_WellKnown()     {}
func (*StringRules_PhoneNumber) isStringRules_WellKnown()      {}
func (*StringRules_PortRangeList) isStringRules_WellKnown()    {}
func (*StringRules_VhDomainNoPort) isStringRules_WellKnown()   {}
func (*StringRules_HostnameOrIp) isStringRules_WellKnown()     {}
func (*StringRules_K8SLabelSelector) isStringRules_WellKnown() {}
func (*StringRules_HttpPath) isStringRules_WellKnown()         {}
func (*StringRules_TimeInterval) isStringRules_WellKnown()     {}

func (m *StringRules) GetWellKnown() isStringRules_WellKnown {
	if m != nil {
		return m.WellKnown
	}
	return nil
}

func (m *StringRules) GetConst() string {
	if m != nil {
		return m.Const
	}
	return ""
}

func (m *StringRules) GetLen() uint64 {
	if m != nil {
		return m.Len
	}
	return 0
}

func (m *StringRules) GetMinLen() uint64 {
	if m != nil {
		return m.MinLen
	}
	return 0
}

func (m *StringRules) GetMaxLen() uint64 {
	if m != nil {
		return m.MaxLen
	}
	return 0
}

func (m *StringRules) GetLenBytes() uint64 {
	if m != nil {
		return m.LenBytes
	}
	return 0
}

func (m *StringRules) GetMinBytes() uint64 {
	if m != nil {
		return m.MinBytes
	}
	return 0
}

func (m *StringRules) GetMaxBytes() uint64 {
	if m != nil {
		return m.MaxBytes
	}
	return 0
}

func (m *StringRules) GetPattern() string {
	if m != nil {
		return m.Pattern
	}
	return ""
}

func (m *StringRules) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *StringRules) GetSuffix() string {
	if m != nil {
		return m.Suffix
	}
	return ""
}

func (m *StringRules) GetContains() string {
	if m != nil {
		return m.Contains
	}
	return ""
}

func (m *StringRules) GetIn() []string {
	if m != nil {
		return m.In
	}
	return nil
}

func (m *StringRules) GetNotIn() []string {
	if m != nil {
		return m.NotIn
	}
	return nil
}

func (m *StringRules) GetMinIpPrefixLength() int32 {
	if m != nil {
		return m.MinIpPrefixLength
	}
	return 0
}

func (m *StringRules) GetMaxIpPrefixLength() int32 {
	if m != nil {
		return m.MaxIpPrefixLength
	}
	return 0
}

func (m *StringRules) GetMinTimeInterval() string {
	if m != nil {
		return m.MinTimeInterval
	}
	return ""
}

func (m *StringRules) GetMaxTimeInterval() string {
	if m != nil {
		return m.MaxTimeInterval
	}
	return ""
}

func (m *StringRules) GetEmail() bool {
	if x, ok := m.GetWellKnown().(*StringRules_Email); ok {
		return x.Email
	}
	return false
}

func (m *StringRules) GetHostname() bool {
	if x, ok := m.GetWellKnown().(*StringRules_Hostname); ok {
		return x.Hostname
	}
	return false
}

func (m *StringRules) GetIp() bool {
	if x, ok := m.GetWellKnown().(*StringRules_Ip); ok {
		return x.Ip
	}
	return false
}

func (m *StringRules) GetIpv4() bool {
	if x, ok := m.GetWellKnown().(*StringRules_Ipv4); ok {
		return x.Ipv4
	}
	return false
}

func (m *StringRules) GetIpv6() bool {
	if x, ok := m.GetWellKnown().(*StringRules_Ipv6); ok {
		return x.Ipv6
	}
	return false
}

func (m *StringRules) GetUri() bool {
	if x, ok := m.GetWellKnown().(*StringRules_Uri); ok {
		return x.Uri
	}
	return false
}

func (m *StringRules) GetUriRef() bool {
	if x, ok := m.GetWellKnown().(*StringRules_UriRef); ok {
		return x.UriRef
	}
	return false
}

func (m *StringRules) GetIpPrefix() bool {
	if x, ok := m.GetWellKnown().(*StringRules_IpPrefix); ok {
		return x.IpPrefix
	}
	return false
}

func (m *StringRules) GetPortRange() bool {
	if x, ok := m.GetWellKnown().(*StringRules_PortRange); ok {
		return x.PortRange
	}
	return false
}

func (m *StringRules) GetMac() bool {
	if x, ok := m.GetWellKnown().(*StringRules_Mac); ok {
		return x.Mac
	}
	return false
}

func (m *StringRules) GetRegex() bool {
	if x, ok := m.GetWellKnown().(*StringRules_Regex); ok {
		return x.Regex
	}
	return false
}

func (m *StringRules) GetHttpHeaderField() bool {
	if x, ok := m.GetWellKnown().(*StringRules_HttpHeaderField); ok {
		return x.HttpHeaderField
	}
	return false
}

func (m *StringRules) GetK8SLabelValue() bool {
	if x, ok := m.GetWellKnown().(*StringRules_K8SLabelValue); ok {
		return x.K8SLabelValue
	}
	return false
}

func (m *StringRules) GetNotEmpty() bool {
	if x, ok := m.GetWellKnown().(*StringRules_NotEmpty); ok {
		return x.NotEmpty
	}
	return false
}

func (m *StringRules) GetHostport() bool {
	if x, ok := m.GetWellKnown().(*StringRules_Hostport); ok {
		return x.Hostport
	}
	return false
}

func (m *StringRules) GetJsonPath() bool {
	if x, ok := m.GetWellKnown().(*StringRules_JsonPath); ok {
		return x.JsonPath
	}
	return false
}

func (m *StringRules) GetHex() bool {
	if x, ok := m.GetWellKnown().(*StringRules_Hex); ok {
		return x.Hex
	}
	return false
}

func (m *StringRules) GetIpv4Prefix() bool {
	if x, ok := m.GetWellKnown().(*StringRules_Ipv4Prefix); ok {
		return x.Ipv4Prefix
	}
	return false
}

func (m *StringRules) GetIpv6Prefix() bool {
	if x, ok := m.GetWellKnown().(*StringRules_Ipv6Prefix); ok {
		return x.Ipv6Prefix
	}
	return false
}

func (m *StringRules) GetVhDomain() bool {
	if x, ok := m.GetWellKnown().(*StringRules_VhDomain); ok {
		return x.VhDomain
	}
	return false
}

func (m *StringRules) GetVesObjectName() bool {
	if x, ok := m.GetWellKnown().(*StringRules_VesObjectName); ok {
		return x.VesObjectName
	}
	return false
}

func (m *StringRules) GetIanaSvcName() bool {
	if x, ok := m.GetWellKnown().(*StringRules_IanaSvcName); ok {
		return x.IanaSvcName
	}
	return false
}

func (m *StringRules) GetDns_1123Label() bool {
	if x, ok := m.GetWellKnown().(*StringRules_Dns_1123Label); ok {
		return x.Dns_1123Label
	}
	return false
}

func (m *StringRules) GetUnixFilePath() bool {
	if x, ok := m.GetWellKnown().(*StringRules_UnixFilePath); ok {
		return x.UnixFilePath
	}
	return false
}

func (m *StringRules) GetPhoneNumber() bool {
	if x, ok := m.GetWellKnown().(*StringRules_PhoneNumber); ok {
		return x.PhoneNumber
	}
	return false
}

func (m *StringRules) GetPortRangeList() bool {
	if x, ok := m.GetWellKnown().(*StringRules_PortRangeList); ok {
		return x.PortRangeList
	}
	return false
}

func (m *StringRules) GetVhDomainNoPort() bool {
	if x, ok := m.GetWellKnown().(*StringRules_VhDomainNoPort); ok {
		return x.VhDomainNoPort
	}
	return false
}

func (m *StringRules) GetHostnameOrIp() bool {
	if x, ok := m.GetWellKnown().(*StringRules_HostnameOrIp); ok {
		return x.HostnameOrIp
	}
	return false
}

func (m *StringRules) GetK8SLabelSelector() bool {
	if x, ok := m.GetWellKnown().(*StringRules_K8SLabelSelector); ok {
		return x.K8SLabelSelector
	}
	return false
}

func (m *StringRules) GetHttpPath() bool {
	if x, ok := m.GetWellKnown().(*StringRules_HttpPath); ok {
		return x.HttpPath
	}
	return false
}

func (m *StringRules) GetTimeInterval() bool {
	if x, ok := m.GetWellKnown().(*StringRules_TimeInterval); ok {
		return x.TimeInterval
	}
	return false
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*StringRules) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*StringRules_Email)(nil),
		(*StringRules_Hostname)(nil),
		(*StringRules_Ip)(nil),
		(*StringRules_Ipv4)(nil),
		(*StringRules_Ipv6)(nil),
		(*StringRules_Uri)(nil),
		(*StringRules_UriRef)(nil),
		(*StringRules_IpPrefix)(nil),
		(*StringRules_PortRange)(nil),
		(*StringRules_Mac)(nil),
		(*StringRules_Regex)(nil),
		(*StringRules_HttpHeaderField)(nil),
		(*StringRules_K8SLabelValue)(nil),
		(*StringRules_NotEmpty)(nil),
		(*StringRules_Hostport)(nil),
		(*StringRules_JsonPath)(nil),
		(*StringRules_Hex)(nil),
		(*StringRules_Ipv4Prefix)(nil),
		(*StringRules_Ipv6Prefix)(nil),
		(*StringRules_VhDomain)(nil),
		(*StringRules_VesObjectName)(nil),
		(*StringRules_IanaSvcName)(nil),
		(*StringRules_Dns_1123Label)(nil),
		(*StringRules_UnixFilePath)(nil),
		(*StringRules_PhoneNumber)(nil),
		(*StringRules_PortRangeList)(nil),
		(*StringRules_VhDomainNoPort)(nil),
		(*StringRules_HostnameOrIp)(nil),
		(*StringRules_K8SLabelSelector)(nil),
		(*StringRules_HttpPath)(nil),
		(*StringRules_TimeInterval)(nil),
	}
}

// Title
//
// x-displayName "displayname"
// BytesRules describe the constraints applied to bytes values
type BytesRules struct {
	// Title
	//
	// x-displayName "displayname"
	// Const specifies that this field must be exactly the specified value
	Const []byte `protobuf:"bytes,1,opt,name=const,proto3" json:"const,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Len specifies that this field must be the specified number of bytes
	Len uint64 `protobuf:"varint,13,opt,name=len,proto3" json:"len,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// MinLen specifies that this field must be the specified number of bytes
	// at a minimum
	MinLen uint64 `protobuf:"varint,2,opt,name=min_len,json=minLen,proto3" json:"min_len,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// MaxLen specifies that this field must be the specified number of bytes
	// at a maximum
	MaxLen uint64 `protobuf:"varint,3,opt,name=max_len,json=maxLen,proto3" json:"max_len,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Pattern specifes that this field must match against the specified
	// regular expression (RE2 syntax). The included expression should elide
	// any delimiters.
	Pattern string `protobuf:"bytes,4,opt,name=pattern,proto3" json:"pattern,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Prefix specifies that this field must have the specified bytes at the
	// beginning of the string.
	Prefix []byte `protobuf:"bytes,5,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Suffix specifies that this field must have the specified bytes at the
	// end of the string.
	Suffix []byte `protobuf:"bytes,6,opt,name=suffix,proto3" json:"suffix,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Contains specifies that this field must have the specified bytes
	// anywhere in the string.
	Contains []byte `protobuf:"bytes,7,opt,name=contains,proto3" json:"contains,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// In specifies that this field must be equal to one of the specified
	// values
	In [][]byte `protobuf:"bytes,8,rep,name=in,proto3" json:"in,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// NotIn specifies that this field cannot be equal to one of the specified
	// values
	NotIn [][]byte `protobuf:"bytes,9,rep,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// WellKnown rules provide advanced constraints against common byte
	// patterns
	//
	// Types that are valid to be assigned to WellKnown:
	//	*BytesRules_Ip
	//	*BytesRules_Ipv4
	//	*BytesRules_Ipv6
	WellKnown isBytesRules_WellKnown `protobuf_oneof:"well_known"`
}

func (m *BytesRules) Reset()      { *m = BytesRules{} }
func (*BytesRules) ProtoMessage() {}
func (*BytesRules) Descriptor() ([]byte, []int) {
	return fileDescriptor_24f6720636939b16, []int{15}
}
func (m *BytesRules) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BytesRules) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BytesRules.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BytesRules) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BytesRules.Merge(m, src)
}
func (m *BytesRules) XXX_Size() int {
	return m.Size()
}
func (m *BytesRules) XXX_DiscardUnknown() {
	xxx_messageInfo_BytesRules.DiscardUnknown(m)
}

var xxx_messageInfo_BytesRules proto.InternalMessageInfo

type isBytesRules_WellKnown interface {
	isBytesRules_WellKnown()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type BytesRules_Ip struct {
	Ip bool `protobuf:"varint,10,opt,name=ip,proto3,oneof" json:"ip,omitempty"`
}
type BytesRules_Ipv4 struct {
	Ipv4 bool `protobuf:"varint,11,opt,name=ipv4,proto3,oneof" json:"ipv4,omitempty"`
}
type BytesRules_Ipv6 struct {
	Ipv6 bool `protobuf:"varint,12,opt,name=ipv6,proto3,oneof" json:"ipv6,omitempty"`
}

func (*BytesRules_Ip) isBytesRules_WellKnown()   {}
func (*BytesRules_Ipv4) isBytesRules_WellKnown() {}
func (*BytesRules_Ipv6) isBytesRules_WellKnown() {}

func (m *BytesRules) GetWellKnown() isBytesRules_WellKnown {
	if m != nil {
		return m.WellKnown
	}
	return nil
}

func (m *BytesRules) GetConst() []byte {
	if m != nil {
		return m.Const
	}
	return nil
}

func (m *BytesRules) GetLen() uint64 {
	if m != nil {
		return m.Len
	}
	return 0
}

func (m *BytesRules) GetMinLen() uint64 {
	if m != nil {
		return m.MinLen
	}
	return 0
}

func (m *BytesRules) GetMaxLen() uint64 {
	if m != nil {
		return m.MaxLen
	}
	return 0
}

func (m *BytesRules) GetPattern() string {
	if m != nil {
		return m.Pattern
	}
	return ""
}

func (m *BytesRules) GetPrefix() []byte {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (m *BytesRules) GetSuffix() []byte {
	if m != nil {
		return m.Suffix
	}
	return nil
}

func (m *BytesRules) GetContains() []byte {
	if m != nil {
		return m.Contains
	}
	return nil
}

func (m *BytesRules) GetIn() [][]byte {
	if m != nil {
		return m.In
	}
	return nil
}

func (m *BytesRules) GetNotIn() [][]byte {
	if m != nil {
		return m.NotIn
	}
	return nil
}

func (m *BytesRules) GetIp() bool {
	if x, ok := m.GetWellKnown().(*BytesRules_Ip); ok {
		return x.Ip
	}
	return false
}

func (m *BytesRules) GetIpv4() bool {
	if x, ok := m.GetWellKnown().(*BytesRules_Ipv4); ok {
		return x.Ipv4
	}
	return false
}

func (m *BytesRules) GetIpv6() bool {
	if x, ok := m.GetWellKnown().(*BytesRules_Ipv6); ok {
		return x.Ipv6
	}
	return false
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*BytesRules) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*BytesRules_Ip)(nil),
		(*BytesRules_Ipv4)(nil),
		(*BytesRules_Ipv6)(nil),
	}
}

// Title
//
// x-displayName "displayname"
// EnumRules describe the constraints applied to enum values
type EnumRules struct {
	// Title
	//
	// x-displayName "displayname"
	// Const specifies that this field must be exactly the specified value
	Const int32 `protobuf:"varint,1,opt,name=const,proto3" json:"const,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// DefinedOnly specifies that this field must be only one of the defined
	// values for this enum, failing on any undefined value.
	DefinedOnly bool `protobuf:"varint,2,opt,name=defined_only,json=definedOnly,proto3" json:"defined_only,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// In specifies that this field must be equal to one of the specified
	// values
	In []int32 `protobuf:"varint,3,rep,packed,name=in,proto3" json:"in,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// NotIn specifies that this field cannot be equal to one of the specified
	// values
	NotIn []int32 `protobuf:"varint,4,rep,packed,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
}

func (m *EnumRules) Reset()      { *m = EnumRules{} }
func (*EnumRules) ProtoMessage() {}
func (*EnumRules) Descriptor() ([]byte, []int) {
	return fileDescriptor_24f6720636939b16, []int{16}
}
func (m *EnumRules) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnumRules) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EnumRules.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EnumRules) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnumRules.Merge(m, src)
}
func (m *EnumRules) XXX_Size() int {
	return m.Size()
}
func (m *EnumRules) XXX_DiscardUnknown() {
	xxx_messageInfo_EnumRules.DiscardUnknown(m)
}

var xxx_messageInfo_EnumRules proto.InternalMessageInfo

func (m *EnumRules) GetConst() int32 {
	if m != nil {
		return m.Const
	}
	return 0
}

func (m *EnumRules) GetDefinedOnly() bool {
	if m != nil {
		return m.DefinedOnly
	}
	return false
}

func (m *EnumRules) GetIn() []int32 {
	if m != nil {
		return m.In
	}
	return nil
}

func (m *EnumRules) GetNotIn() []int32 {
	if m != nil {
		return m.NotIn
	}
	return nil
}

// Title
//
// x-displayName "displayname"
// MessageRules describe the constraints applied to embedded message values.
// For message-type fields, validation is performed recursively.
type MessageRules struct {
	// Title
	//
	// x-displayName "displayname"
	// Skip specifies that the validation rules of this field should not be
	// evaluated
	Skip bool `protobuf:"varint,1,opt,name=skip,proto3" json:"skip,omitempty"`
	// required
	//
	// x-displayName "required"
	// If set on any pointer field, then it will be required to be non-nil in external API
	Required bool `protobuf:"varint,2,opt,name=required,proto3" json:"required,omitempty"`
	// required_oneof
	//
	// x-displayName "required_oneof"
	// If set on any oneof field, then it will be required to be non-nil in external API(except inproc private API)
	RequiredOneof bool `protobuf:"varint,3,opt,name=required_oneof,json=requiredOneof,proto3" json:"required_oneof,omitempty"`
	// required_one_nonzero_field
	//
	// x-displayName "required_one_nonzero_field"
	// If set on any pointer field, then it will be required to have at least one explicitly populated inner field.
	RequiredOneNonzeroField bool `protobuf:"varint,4,opt,name=required_one_nonzero_field,json=requiredOneNonzeroField,proto3" json:"required_one_nonzero_field,omitempty"`
}

func (m *MessageRules) Reset()      { *m = MessageRules{} }
func (*MessageRules) ProtoMessage() {}
func (*MessageRules) Descriptor() ([]byte, []int) {
	return fileDescriptor_24f6720636939b16, []int{17}
}
func (m *MessageRules) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageRules) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageRules.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageRules) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageRules.Merge(m, src)
}
func (m *MessageRules) XXX_Size() int {
	return m.Size()
}
func (m *MessageRules) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageRules.DiscardUnknown(m)
}

var xxx_messageInfo_MessageRules proto.InternalMessageInfo

func (m *MessageRules) GetSkip() bool {
	if m != nil {
		return m.Skip
	}
	return false
}

func (m *MessageRules) GetRequired() bool {
	if m != nil {
		return m.Required
	}
	return false
}

func (m *MessageRules) GetRequiredOneof() bool {
	if m != nil {
		return m.RequiredOneof
	}
	return false
}

func (m *MessageRules) GetRequiredOneNonzeroField() bool {
	if m != nil {
		return m.RequiredOneNonzeroField
	}
	return false
}

// Title
//
// x-displayName "displayname"
// RepeatedRules describe the constraints applied to repeated values
type RepeatedRules struct {
	// min_items
	//
	// x-displayName "Minimum Items"
	// MinItems specifies that this field must have the specified number of
	// items at a minimum
	MinItems uint64 `protobuf:"varint,1,opt,name=min_items,json=minItems,proto3" json:"min_items,omitempty"`
	// max_items
	//
	// x-displayName "Maximum Items"
	// MaxItems specifies that this field must have the specified number of
	// items at a maximum
	MaxItems uint64 `protobuf:"varint,2,opt,name=max_items,json=maxItems,proto3" json:"max_items,omitempty"`
	// unique
	//
	// x-displayName "Unique"
	// Unique specifies that all elements in this field must be unique.
	Unique bool `protobuf:"varint,3,opt,name=unique,proto3" json:"unique,omitempty"`
	// items
	//
	// x-displayName "Items"
	// Items specifies the contraints to be applied to each item in the field.
	// Repeated message fields will still execute validation against each item
	// unless skip is specified here.
	Items *FieldRules `protobuf:"bytes,4,opt,name=items,proto3" json:"items,omitempty"`
	// num_items
	//
	// x-displayName "Number of Items"
	// NumItems specifies that the number of items in this field must be one of
	// the values specified in the comma-separated list of values/ranges for e.g.
	// "1,3" or "1,3,5-15"
	NumItems string `protobuf:"bytes,5,opt,name=num_items,json=numItems,proto3" json:"num_items,omitempty"`
	// unique_metadata_name
	//
	// x-displayName "Unique Metadata Name"
	// UniqueMetadataName specifies that all the elements in the repeated field
	// have a unique value of "name" sub-subfield of their "metadata" subfield,
	// with the latter being of type MessageMetaType. This constraint is only
	// applicable to message types.
	// For example, when used for a repeated field of message Foobar, it means
	// that all Foobar.metadata.name values must be unique where the "metadata"
	// field is of type MessageMetaType.
	UniqueMetadataName bool `protobuf:"varint,6,opt,name=unique_metadata_name,json=uniqueMetadataName,proto3" json:"unique_metadata_name,omitempty"`
}

func (m *RepeatedRules) Reset()      { *m = RepeatedRules{} }
func (*RepeatedRules) ProtoMessage() {}
func (*RepeatedRules) Descriptor() ([]byte, []int) {
	return fileDescriptor_24f6720636939b16, []int{18}
}
func (m *RepeatedRules) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RepeatedRules) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RepeatedRules.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RepeatedRules) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RepeatedRules.Merge(m, src)
}
func (m *RepeatedRules) XXX_Size() int {
	return m.Size()
}
func (m *RepeatedRules) XXX_DiscardUnknown() {
	xxx_messageInfo_RepeatedRules.DiscardUnknown(m)
}

var xxx_messageInfo_RepeatedRules proto.InternalMessageInfo

func (m *RepeatedRules) GetMinItems() uint64 {
	if m != nil {
		return m.MinItems
	}
	return 0
}

func (m *RepeatedRules) GetMaxItems() uint64 {
	if m != nil {
		return m.MaxItems
	}
	return 0
}

func (m *RepeatedRules) GetUnique() bool {
	if m != nil {
		return m.Unique
	}
	return false
}

func (m *RepeatedRules) GetItems() *FieldRules {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *RepeatedRules) GetNumItems() string {
	if m != nil {
		return m.NumItems
	}
	return ""
}

func (m *RepeatedRules) GetUniqueMetadataName() bool {
	if m != nil {
		return m.UniqueMetadataName
	}
	return false
}

// Title
//
// x-displayName "displayname"
// MapRules describe the constraints applied to map values
type MapRules struct {
	// Title
	//
	// x-displayName "displayname"
	// MinPairs specifies that this field must have the specified number of
	// KVs at a minimum
	MinPairs uint64 `protobuf:"varint,1,opt,name=min_pairs,json=minPairs,proto3" json:"min_pairs,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// MaxPairs specifies that this field must have the specified number of
	// KVs at a maximum
	MaxPairs uint64 `protobuf:"varint,2,opt,name=max_pairs,json=maxPairs,proto3" json:"max_pairs,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// NoSparse specifies values in this field cannot be unset. This only
	// applies to map's with message value types.
	NoSparse bool `protobuf:"varint,3,opt,name=no_sparse,json=noSparse,proto3" json:"no_sparse,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Keys specifies the constraints to be applied to each key in the field.
	Keys *FieldRules `protobuf:"bytes,4,opt,name=keys,proto3" json:"keys,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Values specifies the constraints to be applied to the value of each key
	// in the field. Message values will still have their validations evaluated
	// unless skip is specified here.
	Values *FieldRules `protobuf:"bytes,5,opt,name=values,proto3" json:"values,omitempty"`
	// unique_values
	//
	// x-displayName "Unique Values"
	// Unique values specifies that the map values for all keys must be unique.
	UniqueValues bool `protobuf:"varint,6,opt,name=unique_values,json=uniqueValues,proto3" json:"unique_values,omitempty"`
}

func (m *MapRules) Reset()      { *m = MapRules{} }
func (*MapRules) ProtoMessage() {}
func (*MapRules) Descriptor() ([]byte, []int) {
	return fileDescriptor_24f6720636939b16, []int{19}
}
func (m *MapRules) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapRules) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapRules.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapRules) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapRules.Merge(m, src)
}
func (m *MapRules) XXX_Size() int {
	return m.Size()
}
func (m *MapRules) XXX_DiscardUnknown() {
	xxx_messageInfo_MapRules.DiscardUnknown(m)
}

var xxx_messageInfo_MapRules proto.InternalMessageInfo

func (m *MapRules) GetMinPairs() uint64 {
	if m != nil {
		return m.MinPairs
	}
	return 0
}

func (m *MapRules) GetMaxPairs() uint64 {
	if m != nil {
		return m.MaxPairs
	}
	return 0
}

func (m *MapRules) GetNoSparse() bool {
	if m != nil {
		return m.NoSparse
	}
	return false
}

func (m *MapRules) GetKeys() *FieldRules {
	if m != nil {
		return m.Keys
	}
	return nil
}

func (m *MapRules) GetValues() *FieldRules {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *MapRules) GetUniqueValues() bool {
	if m != nil {
		return m.UniqueValues
	}
	return false
}

// Title
//
// x-displayName "displayname"
// AnyRules describe constraints applied exclusively to the
// google.protobuf.Any well-known type
type AnyRules struct {
	// Title
	//
	// x-displayName "displayname"
	// Required specifies that this field must be set
	Required bool `protobuf:"varint,1,opt,name=required,proto3" json:"required,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// In specifies that this field's type_url must be equal to one of the
	// specified values.
	In []string `protobuf:"bytes,2,rep,name=in,proto3" json:"in,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// NotIn specifies that this field's type_url must not be equal to any of
	// the specified values.
	NotIn []string `protobuf:"bytes,3,rep,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
}

func (m *AnyRules) Reset()      { *m = AnyRules{} }
func (*AnyRules) ProtoMessage() {}
func (*AnyRules) Descriptor() ([]byte, []int) {
	return fileDescriptor_24f6720636939b16, []int{20}
}
func (m *AnyRules) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnyRules) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnyRules.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnyRules) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnyRules.Merge(m, src)
}
func (m *AnyRules) XXX_Size() int {
	return m.Size()
}
func (m *AnyRules) XXX_DiscardUnknown() {
	xxx_messageInfo_AnyRules.DiscardUnknown(m)
}

var xxx_messageInfo_AnyRules proto.InternalMessageInfo

func (m *AnyRules) GetRequired() bool {
	if m != nil {
		return m.Required
	}
	return false
}

func (m *AnyRules) GetIn() []string {
	if m != nil {
		return m.In
	}
	return nil
}

func (m *AnyRules) GetNotIn() []string {
	if m != nil {
		return m.NotIn
	}
	return nil
}

// Title
//
// x-displayName "displayname"
// DurationRules describe the constraints applied exclusively to the
// google.protobuf.Duration well-known type
type DurationRules struct {
	// Title
	//
	// x-displayName "displayname"
	// Required specifies that this field must be set
	Required bool `protobuf:"varint,1,opt,name=required,proto3" json:"required,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Const specifies that this field must be exactly the specified value
	Const *types.Duration `protobuf:"bytes,2,opt,name=const,proto3" json:"const,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Lt specifies that this field must be less than the specified value,
	// exclusive
	Lt *types.Duration `protobuf:"bytes,3,opt,name=lt,proto3" json:"lt,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Lt specifies that this field must be less than the specified value,
	// inclusive
	Lte *types.Duration `protobuf:"bytes,4,opt,name=lte,proto3" json:"lte,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Gt specifies that this field must be greater than the specified value,
	// exclusive
	Gt *types.Duration `protobuf:"bytes,5,opt,name=gt,proto3" json:"gt,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Gte specifies that this field must be greater than the specified value,
	// inclusive
	Gte *types.Duration `protobuf:"bytes,6,opt,name=gte,proto3" json:"gte,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// In specifies that this field must be equal to one of the specified
	// values
	In []*types.Duration `protobuf:"bytes,7,rep,name=in,proto3" json:"in,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// NotIn specifies that this field cannot be equal to one of the specified
	// values
	NotIn []*types.Duration `protobuf:"bytes,8,rep,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
}

func (m *DurationRules) Reset()      { *m = DurationRules{} }
func (*DurationRules) ProtoMessage() {}
func (*DurationRules) Descriptor() ([]byte, []int) {
	return fileDescriptor_24f6720636939b16, []int{21}
}
func (m *DurationRules) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DurationRules) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DurationRules.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DurationRules) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DurationRules.Merge(m, src)
}
func (m *DurationRules) XXX_Size() int {
	return m.Size()
}
func (m *DurationRules) XXX_DiscardUnknown() {
	xxx_messageInfo_DurationRules.DiscardUnknown(m)
}

var xxx_messageInfo_DurationRules proto.InternalMessageInfo

func (m *DurationRules) GetRequired() bool {
	if m != nil {
		return m.Required
	}
	return false
}

func (m *DurationRules) GetConst() *types.Duration {
	if m != nil {
		return m.Const
	}
	return nil
}

func (m *DurationRules) GetLt() *types.Duration {
	if m != nil {
		return m.Lt
	}
	return nil
}

func (m *DurationRules) GetLte() *types.Duration {
	if m != nil {
		return m.Lte
	}
	return nil
}

func (m *DurationRules) GetGt() *types.Duration {
	if m != nil {
		return m.Gt
	}
	return nil
}

func (m *DurationRules) GetGte() *types.Duration {
	if m != nil {
		return m.Gte
	}
	return nil
}

func (m *DurationRules) GetIn() []*types.Duration {
	if m != nil {
		return m.In
	}
	return nil
}

func (m *DurationRules) GetNotIn() []*types.Duration {
	if m != nil {
		return m.NotIn
	}
	return nil
}

// Title
//
// x-displayName "displayname"
// TimestampRules describe the constraints applied exclusively to the
// google.protobuf.Timestamp well-known type
type TimestampRules struct {
	// Title
	//
	// x-displayName "displayname"
	// Required specifies that this field must be set
	Required bool `protobuf:"varint,1,opt,name=required,proto3" json:"required,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Const specifies that this field must be exactly the specified value
	Const *types.Timestamp `protobuf:"bytes,2,opt,name=const,proto3" json:"const,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Lt specifies that this field must be less than the specified value,
	// exclusive
	Lt *types.Timestamp `protobuf:"bytes,3,opt,name=lt,proto3" json:"lt,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Lte specifies that this field must be less than the specified value,
	// inclusive
	Lte *types.Timestamp `protobuf:"bytes,4,opt,name=lte,proto3" json:"lte,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Gt specifies that this field must be greater than the specified value,
	// exclusive
	Gt *types.Timestamp `protobuf:"bytes,5,opt,name=gt,proto3" json:"gt,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Gte specifies that this field must be greater than the specified value,
	// inclusive
	Gte *types.Timestamp `protobuf:"bytes,6,opt,name=gte,proto3" json:"gte,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// LtNow specifies that this must be less than the current time. LtNow
	// can only be used with the Within rule.
	LtNow bool `protobuf:"varint,7,opt,name=lt_now,json=ltNow,proto3" json:"lt_now,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// GtNow specifies that this must be greater than the current time. GtNow
	// can only be used with the Within rule.
	GtNow bool `protobuf:"varint,8,opt,name=gt_now,json=gtNow,proto3" json:"gt_now,omitempty"`
	// Title
	//
	// x-displayName "displayname"
	// Within specifies that this field must be within this duration of the
	// current time. This constraint can be used alone or with the LtNow and
	// GtNow rules.
	Within *types.Duration `protobuf:"bytes,9,opt,name=within,proto3" json:"within,omitempty"`
}

func (m *TimestampRules) Reset()      { *m = TimestampRules{} }
func (*TimestampRules) ProtoMessage() {}
func (*TimestampRules) Descriptor() ([]byte, []int) {
	return fileDescriptor_24f6720636939b16, []int{22}
}
func (m *TimestampRules) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimestampRules) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TimestampRules.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TimestampRules) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimestampRules.Merge(m, src)
}
func (m *TimestampRules) XXX_Size() int {
	return m.Size()
}
func (m *TimestampRules) XXX_DiscardUnknown() {
	xxx_messageInfo_TimestampRules.DiscardUnknown(m)
}

var xxx_messageInfo_TimestampRules proto.InternalMessageInfo

func (m *TimestampRules) GetRequired() bool {
	if m != nil {
		return m.Required
	}
	return false
}

func (m *TimestampRules) GetConst() *types.Timestamp {
	if m != nil {
		return m.Const
	}
	return nil
}

func (m *TimestampRules) GetLt() *types.Timestamp {
	if m != nil {
		return m.Lt
	}
	return nil
}

func (m *TimestampRules) GetLte() *types.Timestamp {
	if m != nil {
		return m.Lte
	}
	return nil
}

func (m *TimestampRules) GetGt() *types.Timestamp {
	if m != nil {
		return m.Gt
	}
	return nil
}

func (m *TimestampRules) GetGte() *types.Timestamp {
	if m != nil {
		return m.Gte
	}
	return nil
}

func (m *TimestampRules) GetLtNow() bool {
	if m != nil {
		return m.LtNow
	}
	return false
}

func (m *TimestampRules) GetGtNow() bool {
	if m != nil {
		return m.GtNow
	}
	return false
}

func (m *TimestampRules) GetWithin() *types.Duration {
	if m != nil {
		return m.Within
	}
	return nil
}

var E_Disabled = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.MessageOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         919191,
	Name:          "ves.io.schema.disabled",
	Tag:           "varint,919191,opt,name=disabled",
	Filename:      "ves.io/schema/validate.proto",
}

var E_Required = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.OneofOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         919191,
	Name:          "ves.io.schema.required",
	Tag:           "varint,919191,opt,name=required",
	Filename:      "ves.io/schema/validate.proto",
}

var E_Rules = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*FieldRules)(nil),
	Field:         919191,
	Name:          "ves.io.schema.rules",
	Tag:           "bytes,919191,opt,name=rules",
	Filename:      "ves.io/schema/validate.proto",
}

func init() {
	proto.RegisterType((*FieldRules)(nil), "ves.io.schema.FieldRules")
	proto.RegisterType((*FloatRules)(nil), "ves.io.schema.FloatRules")
	proto.RegisterType((*DoubleRules)(nil), "ves.io.schema.DoubleRules")
	proto.RegisterType((*Int32Rules)(nil), "ves.io.schema.Int32Rules")
	proto.RegisterType((*Int64Rules)(nil), "ves.io.schema.Int64Rules")
	proto.RegisterType((*UInt32Rules)(nil), "ves.io.schema.UInt32Rules")
	proto.RegisterType((*UInt64Rules)(nil), "ves.io.schema.UInt64Rules")
	proto.RegisterType((*SInt32Rules)(nil), "ves.io.schema.SInt32Rules")
	proto.RegisterType((*SInt64Rules)(nil), "ves.io.schema.SInt64Rules")
	proto.RegisterType((*Fixed32Rules)(nil), "ves.io.schema.Fixed32Rules")
	proto.RegisterType((*Fixed64Rules)(nil), "ves.io.schema.Fixed64Rules")
	proto.RegisterType((*SFixed32Rules)(nil), "ves.io.schema.SFixed32Rules")
	proto.RegisterType((*SFixed64Rules)(nil), "ves.io.schema.SFixed64Rules")
	proto.RegisterType((*BoolRules)(nil), "ves.io.schema.BoolRules")
	proto.RegisterType((*StringRules)(nil), "ves.io.schema.StringRules")
	proto.RegisterType((*BytesRules)(nil), "ves.io.schema.BytesRules")
	proto.RegisterType((*EnumRules)(nil), "ves.io.schema.EnumRules")
	proto.RegisterType((*MessageRules)(nil), "ves.io.schema.MessageRules")
	proto.RegisterType((*RepeatedRules)(nil), "ves.io.schema.RepeatedRules")
	proto.RegisterType((*MapRules)(nil), "ves.io.schema.MapRules")
	proto.RegisterType((*AnyRules)(nil), "ves.io.schema.AnyRules")
	proto.RegisterType((*DurationRules)(nil), "ves.io.schema.DurationRules")
	proto.RegisterType((*TimestampRules)(nil), "ves.io.schema.TimestampRules")
	proto.RegisterExtension(E_Disabled)
	proto.RegisterExtension(E_Required)
	proto.RegisterExtension(E_Rules)
}

func init() { proto.RegisterFile("ves.io/schema/validate.proto", fileDescriptor_24f6720636939b16) }

var fileDescriptor_24f6720636939b16 = []byte{
	// 2342 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x59, 0xbb, 0x73, 0x1b, 0xc9,
	0xf1, 0xe6, 0xe2, 0xb1, 0x00, 0x86, 0x00, 0x49, 0xcc, 0x8f, 0x92, 0x56, 0x94, 0x04, 0x51, 0xd0,
	0x49, 0x3f, 0x3d, 0x41, 0x3d, 0x58, 0xb4, 0x4a, 0x67, 0x05, 0x96, 0x75, 0xaa, 0x63, 0x95, 0x5e,
	0x05, 0x5a, 0x0e, 0x9c, 0x6c, 0x2d, 0x89, 0x01, 0x30, 0xc7, 0xdd, 0x99, 0xbd, 0xdd, 0x01, 0x04,
	0x3a, 0x72, 0xea, 0xe0, 0xec, 0xcb, 0x9c, 0x3b, 0xf2, 0x9f, 0xe0, 0xcc, 0xa9, 0xcb, 0x91, 0xc2,
	0x0b, 0x2d, 0x2a, 0x39, 0x67, 0x57, 0xe5, 0x7f, 0xc0, 0x35, 0x3d, 0x33, 0x0b, 0x60, 0xb0, 0x24,
	0x5d, 0xe5, 0x48, 0x9c, 0xee, 0xaf, 0xa7, 0xbf, 0xfe, 0x76, 0xd0, 0xd3, 0xbb, 0x42, 0x97, 0xc7,
	0x24, 0xed, 0x50, 0xbe, 0x95, 0x1e, 0x0c, 0x49, 0x14, 0x6c, 0x8d, 0x83, 0x90, 0xf6, 0x02, 0x41,
	0x3a, 0x71, 0xc2, 0x05, 0xc7, 0x0d, 0xe5, 0xed, 0x28, 0xef, 0xc6, 0xe6, 0x80, 0xf3, 0x41, 0x48,
	0xb6, 0xc0, 0xb9, 0x3f, 0xea, 0x6f, 0xf5, 0x48, 0x7a, 0x90, 0xd0, 0x58, 0xf0, 0x44, 0x05, 0x6c,
	0xb4, 0x16, 0x10, 0xa3, 0x24, 0x10, 0x94, 0x33, 0xed, 0xbf, 0x6a, 0xfb, 0x05, 0x8d, 0x48, 0x2a,
	0x82, 0x28, 0x56, 0x80, 0xf6, 0x5f, 0x6b, 0x08, 0xbd, 0xa4, 0x24, 0xec, 0x75, 0x47, 0x21, 0x49,
	0xf1, 0x43, 0x54, 0xee, 0x87, 0x3c, 0x10, 0x9e, 0xb3, 0xe9, 0xdc, 0x5a, 0x7e, 0x74, 0xb1, 0x33,
	0x47, 0xa8, 0xf3, 0x52, 0xfa, 0x00, 0xf9, 0xf5, 0x52, 0x57, 0x21, 0xf1, 0x36, 0x72, 0x7b, 0x7c,
	0xb4, 0x1f, 0x12, 0xaf, 0x00, 0x31, 0x1b, 0x56, 0xcc, 0x0b, 0x70, 0x9a, 0x20, 0x8d, 0x95, 0x89,
	0x28, 0x13, 0x8f, 0x1f, 0x79, 0xc5, 0xdc, 0x44, 0xbb, 0xd2, 0x97, 0x25, 0x02, 0xa4, 0x0e, 0xd9,
	0xd9, 0xf6, 0x4a, 0x27, 0x85, 0xec, 0x6c, 0xcf, 0x86, 0xec, 0x6c, 0x4b, 0x6e, 0x23, 0x95, 0xa6,
	0x9c, 0xcb, 0xed, 0xfd, 0x5c, 0x1e, 0x8d, 0x35, 0x51, 0x3b, 0xdb, 0x9e, 0x7b, 0x62, 0xd4, 0x34,
	0x95, 0xc6, 0xca, 0xa8, 0x54, 0xe5, 0xaa, 0xe4, 0x46, 0xed, 0xcd, 0xe7, 0x4a, 0xb3, 0x5c, 0xa9,
	0xca, 0x55, 0x3d, 0x31, 0x6a, 0x26, 0x97, 0xc2, 0xe2, 0x9f, 0xa1, 0x4a, 0x9f, 0x4e, 0x48, 0xef,
	0xf1, 0x23, 0xaf, 0x06, 0x61, 0x97, 0xec, 0x07, 0xa5, 0xbc, 0x26, 0xce, 0xa0, 0xb3, 0xc0, 0x9d,
	0x6d, 0x0f, 0x9d, 0x1c, 0x38, 0x4d, 0x68, 0xd0, 0xf8, 0x29, 0xaa, 0xa6, 0x26, 0xe5, 0x32, 0x44,
	0x5e, 0xb6, 0x99, 0x5a, 0x39, 0x33, 0xfc, 0x34, 0x76, 0x67, 0xdb, 0xab, 0x9f, 0x12, 0x3b, 0x4d,
	0x9b, 0xe1, 0x71, 0x07, 0x95, 0xf6, 0x39, 0x0f, 0xbd, 0x06, 0xc4, 0x79, 0x56, 0xdc, 0x73, 0xce,
	0x43, 0x13, 0x03, 0x38, 0xd0, 0x53, 0x24, 0x94, 0x0d, 0xbc, 0x95, 0x7c, 0x3d, 0xc1, 0x39, 0xd5,
	0x13, 0x96, 0xf2, 0x68, 0xed, 0x1f, 0x09, 0x92, 0x7a, 0xab, 0xb9, 0x47, 0xeb, 0xb9, 0xf4, 0x65,
	0x47, 0x0b, 0x90, 0x92, 0x18, 0x61, 0xa3, 0xc8, 0x5b, 0xcb, 0x25, 0xf6, 0x15, 0x1b, 0x45, 0x19,
	0x31, 0x89, 0x93, 0xca, 0x47, 0x24, 0x4d, 0x83, 0x01, 0xf1, 0x9a, 0xb9, 0xca, 0xbf, 0x56, 0xde,
	0x4c, 0x79, 0x8d, 0x96, 0xea, 0x25, 0x24, 0x26, 0x81, 0x20, 0x3d, 0x0f, 0xe7, 0xaa, 0xd7, 0xd5,
	0xee, 0x4c, 0x3d, 0x83, 0xc7, 0x77, 0x51, 0x31, 0x0a, 0x62, 0xef, 0xff, 0x20, 0xec, 0x82, 0x9d,
	0x30, 0x88, 0x4d, 0x84, 0x44, 0x49, 0x70, 0xc0, 0x8e, 0xbc, 0xf5, 0x5c, 0xf0, 0x2f, 0xd8, 0x51,
	0x06, 0x0e, 0xd8, 0x91, 0x64, 0x65, 0x5a, 0x8d, 0x77, 0x2e, 0x97, 0xd5, 0x0b, 0xed, 0xce, 0x58,
	0x19, 0x3c, 0x7e, 0x86, 0x6a, 0x59, 0x1b, 0xf2, 0xce, 0x43, 0xf0, 0x15, 0x2b, 0xf8, 0x57, 0xc6,
	0x6f, 0xa2, 0xa7, 0x11, 0xcf, 0x5d, 0x54, 0x12, 0x47, 0x31, 0x69, 0x7f, 0xe7, 0x20, 0x34, 0x6d,
	0x48, 0x78, 0x1d, 0x95, 0x0f, 0x38, 0x4b, 0x55, 0xeb, 0x2a, 0x74, 0xd5, 0x02, 0xaf, 0xa0, 0x42,
	0x28, 0xa0, 0x33, 0x15, 0xba, 0x85, 0x50, 0xe0, 0x35, 0x54, 0x0c, 0x05, 0x81, 0xae, 0x53, 0xe8,
	0xca, 0x3f, 0x25, 0x62, 0x20, 0xa0, 0xa7, 0x14, 0xba, 0x85, 0x01, 0x20, 0x06, 0x82, 0x40, 0xc3,
	0x28, 0x74, 0xe5, 0x9f, 0x12, 0x41, 0x99, 0xe7, 0x6e, 0x16, 0x25, 0x82, 0x32, 0x7c, 0x0e, 0xb9,
	0x8c, 0x0b, 0x9f, 0x32, 0xaf, 0x02, 0xb6, 0x32, 0xe3, 0x62, 0x97, 0xb5, 0xff, 0xe0, 0xa0, 0xe5,
	0x99, 0x66, 0x37, 0x4f, 0xc8, 0x59, 0x24, 0xe4, 0xd8, 0x84, 0x1c, 0x9b, 0x90, 0x63, 0x13, 0x72,
	0x6c, 0x42, 0x4e, 0x0e, 0x21, 0xc7, 0x10, 0x92, 0x02, 0x4d, 0x9b, 0xce, 0x3c, 0x9f, 0xf2, 0x22,
	0x9f, 0xb2, 0xcd, 0xa7, 0x6c, 0xf3, 0x29, 0xdb, 0x7c, 0xca, 0x36, 0x9f, 0x72, 0x0e, 0x9f, 0xb2,
	0xc5, 0x47, 0xff, 0xcc, 0xe7, 0xf9, 0x14, 0x17, 0xf9, 0x14, 0x6d, 0x3e, 0x45, 0x9b, 0x4f, 0xd1,
	0xe6, 0x53, 0xb4, 0xf9, 0x14, 0x73, 0xf8, 0x14, 0x0d, 0x9f, 0x7f, 0x38, 0x68, 0xf9, 0xfd, 0x49,
	0x02, 0x35, 0x16, 0x09, 0x35, 0x6c, 0x42, 0x0d, 0x9b, 0x50, 0xc3, 0x26, 0xd4, 0xb0, 0x09, 0x35,
	0x72, 0x08, 0x35, 0x34, 0x21, 0x7c, 0x1e, 0xb9, 0x49, 0xc0, 0x06, 0x24, 0x85, 0xcb, 0xa0, 0xd6,
	0xd5, 0x2b, 0xdc, 0x46, 0x0d, 0x05, 0xf7, 0xb5, 0xbb, 0x06, 0xee, 0x65, 0x88, 0xea, 0x82, 0x09,
	0x4e, 0xdf, 0xfb, 0x93, 0xd4, 0x2d, 0x2d, 0x16, 0x53, 0xb2, 0x8b, 0x29, 0xd9, 0xc5, 0x94, 0xec,
	0x62, 0x4a, 0x76, 0x31, 0xa5, 0x9c, 0x62, 0x4a, 0xb3, 0x3f, 0x87, 0xbd, 0x93, 0xd4, 0x6d, 0x2e,
	0x12, 0x6a, 0xda, 0x84, 0x9a, 0x36, 0xa1, 0xa6, 0x4d, 0xa8, 0x69, 0x13, 0x6a, 0xe6, 0x10, 0x6a,
	0xda, 0x84, 0x72, 0x15, 0xc2, 0x8b, 0x84, 0xb0, 0x4d, 0x08, 0xdb, 0x84, 0xb0, 0x4d, 0x08, 0xdb,
	0x84, 0x70, 0x0e, 0x21, 0x6c, 0x08, 0xfd, 0xd1, 0x41, 0xf5, 0xd9, 0x4b, 0x73, 0x9e, 0x51, 0x65,
	0x91, 0x51, 0xc5, 0x66, 0x54, 0xb1, 0x19, 0x55, 0x6c, 0x46, 0x15, 0x9b, 0x51, 0x25, 0x87, 0x51,
	0x65, 0x81, 0x51, 0xae, 0x46, 0xee, 0x22, 0x23, 0xd7, 0x66, 0xe4, 0xda, 0x8c, 0x5c, 0x9b, 0x91,
	0x6b, 0x33, 0x72, 0x73, 0x18, 0xb9, 0x86, 0xd1, 0xf7, 0x0e, 0x6a, 0xec, 0x9d, 0x2c, 0xd2, 0xea,
	0x22, 0xa5, 0x55, 0x9b, 0xd2, 0xaa, 0x4d, 0x69, 0xd5, 0xa6, 0xb4, 0x6a, 0x53, 0x5a, 0xcd, 0xa1,
	0xb4, 0xba, 0x48, 0x29, 0x57, 0xa5, 0xb5, 0x45, 0x4a, 0x6b, 0x36, 0xa5, 0x35, 0x9b, 0xd2, 0x9a,
	0x4d, 0x69, 0xcd, 0xa6, 0xb4, 0x96, 0x43, 0x69, 0xcd, 0x50, 0xba, 0x86, 0x6a, 0xd9, 0x28, 0x34,
	0xcf, 0xa6, 0xaa, 0xd9, 0xb4, 0x7f, 0x5f, 0x47, 0xcb, 0x33, 0xc3, 0xcf, 0x3c, 0xaa, 0x66, 0x38,
	0x4b, 0x8e, 0x84, 0xc1, 0xc0, 0x20, 0xfb, 0x01, 0x61, 0xf8, 0x02, 0xaa, 0x44, 0x94, 0xf9, 0xd2,
	0xaa, 0xda, 0x86, 0x1b, 0x51, 0xf6, 0x4a, 0x3b, 0x82, 0x09, 0x38, 0x8a, 0xda, 0x11, 0x4c, 0xa4,
	0xe3, 0x12, 0xaa, 0x85, 0x84, 0xf9, 0x6a, 0xa0, 0x5a, 0x07, 0x57, 0x35, 0x24, 0x0c, 0x86, 0x28,
	0xe9, 0x94, 0xdb, 0x29, 0xa7, 0xea, 0x32, 0xd5, 0x88, 0xce, 0x38, 0x83, 0x89, 0x76, 0x96, 0xb5,
	0x33, 0x98, 0x28, 0xa7, 0x87, 0x2a, 0x71, 0x20, 0x04, 0x49, 0x18, 0x8c, 0xe5, 0xb5, 0xae, 0x59,
	0xca, 0xb6, 0x19, 0x27, 0xa4, 0x4f, 0x27, 0x30, 0x79, 0xd7, 0xba, 0x7a, 0x25, 0xed, 0xe9, 0xa8,
	0x2f, 0xed, 0xba, 0x9d, 0xaa, 0x15, 0xde, 0x40, 0xd5, 0x03, 0xce, 0x44, 0x40, 0x99, 0xe9, 0xa4,
	0xd9, 0x5a, 0x0b, 0x8e, 0x36, 0x8b, 0xb7, 0x6a, 0x96, 0xe0, 0xcb, 0x60, 0xd3, 0x9d, 0x7a, 0x0b,
	0xad, 0xcb, 0x32, 0x68, 0xec, 0xab, 0x5c, 0x52, 0x86, 0x81, 0x18, 0x7a, 0x6d, 0xb8, 0x14, 0x9b,
	0x11, 0x65, 0xbb, 0xf1, 0x3b, 0xf0, 0xbc, 0x02, 0x07, 0x04, 0x04, 0x93, 0xc5, 0x80, 0xeb, 0x3a,
	0x20, 0x98, 0x58, 0x01, 0x77, 0x90, 0xdc, 0xc5, 0x97, 0x63, 0x8f, 0x4f, 0x99, 0x20, 0xc9, 0x38,
	0x08, 0xbd, 0x9f, 0x03, 0xdb, 0xd5, 0x88, 0x32, 0x39, 0x20, 0xed, 0x6a, 0x33, 0x60, 0x83, 0x89,
	0x85, 0x7d, 0xa6, 0xb1, 0xc1, 0x64, 0x0e, 0x7b, 0x1e, 0x95, 0x49, 0x14, 0xd0, 0x10, 0x26, 0xf1,
	0xaa, 0x9c, 0x67, 0x61, 0x89, 0x2f, 0xa3, 0xea, 0x90, 0xa7, 0x82, 0x05, 0x11, 0x81, 0x61, 0x5b,
	0xba, 0x32, 0x0b, 0x5e, 0x43, 0x05, 0x1a, 0xc3, 0x48, 0x2d, 0xed, 0x05, 0x1a, 0xe3, 0x75, 0x54,
	0xa2, 0xf1, 0x78, 0x1b, 0x26, 0x66, 0x69, 0x83, 0x95, 0xb6, 0xee, 0xc0, 0x54, 0x6c, 0xac, 0x3b,
	0x18, 0xa3, 0xe2, 0x28, 0xa1, 0x30, 0xf7, 0x4a, 0xa3, 0x5c, 0xe0, 0x8b, 0xa8, 0x32, 0x4a, 0xa8,
	0x9f, 0x90, 0x3e, 0x4c, 0xb5, 0x55, 0x78, 0x93, 0x4a, 0x68, 0x97, 0xf4, 0xf1, 0x15, 0x54, 0xcb,
	0x74, 0x82, 0xe1, 0x12, 0xb8, 0x50, 0xad, 0x0f, 0xbe, 0x8a, 0x50, 0xcc, 0x13, 0xa1, 0xee, 0x42,
	0x98, 0x1f, 0xa5, 0xbf, 0x26, 0x6d, 0x70, 0x17, 0xca, 0x74, 0x51, 0x70, 0xe0, 0x5d, 0x30, 0xe9,
	0xa2, 0xe0, 0x40, 0x96, 0x9d, 0x90, 0x01, 0x99, 0x78, 0x9e, 0x29, 0x1b, 0x96, 0xf8, 0x1e, 0x6a,
	0x0e, 0x85, 0x88, 0xfd, 0x21, 0x09, 0x7a, 0x24, 0xf1, 0xfb, 0xf2, 0x55, 0xd8, 0xbb, 0xa8, 0x31,
	0xab, 0xd2, 0xf5, 0x35, 0x78, 0xe0, 0x1d, 0x19, 0xdf, 0x42, 0xab, 0x87, 0x4f, 0x52, 0x3f, 0x0c,
	0xf6, 0x49, 0xe8, 0x8f, 0x83, 0x70, 0x44, 0xbc, 0x0d, 0x8d, 0x6d, 0x1c, 0x3e, 0x49, 0x5f, 0x49,
	0xfb, 0xaf, 0xa5, 0x59, 0xd6, 0x20, 0xcf, 0x0d, 0x89, 0x62, 0x71, 0xe4, 0x5d, 0x32, 0x35, 0x30,
	0x2e, 0xbe, 0x92, 0x16, 0xa3, 0xb6, 0xe4, 0xec, 0x5d, 0x9e, 0x55, 0x5b, 0x5a, 0x64, 0xf0, 0x37,
	0x29, 0x67, 0x7e, 0x1c, 0x88, 0xa1, 0x77, 0xc5, 0xb8, 0xa5, 0xe9, 0x5d, 0x20, 0x86, 0xb2, 0xbe,
	0x21, 0x99, 0x78, 0x2d, 0x53, 0xdf, 0x90, 0x4c, 0xf0, 0x35, 0xb4, 0x2c, 0x1f, 0x80, 0x51, 0xed,
	0xaa, 0xf6, 0x21, 0x69, 0xd4, 0xba, 0x29, 0xc8, 0x8e, 0x81, 0x6c, 0xce, 0x40, 0x76, 0x34, 0xe4,
	0x0a, 0xaa, 0x8d, 0x87, 0x7e, 0x8f, 0x47, 0x01, 0x65, 0xde, 0x35, 0x93, 0x78, 0x3c, 0x7c, 0x01,
	0x16, 0x59, 0xfe, 0x98, 0xa4, 0x3e, 0xdf, 0xff, 0x86, 0x1c, 0x08, 0x1f, 0x8e, 0xca, 0x17, 0xa6,
	0xfc, 0x31, 0x49, 0xdf, 0x82, 0xfd, 0x8d, 0x3c, 0x2f, 0x5f, 0xa0, 0x06, 0x0d, 0x58, 0xe0, 0xa7,
	0xe3, 0x03, 0x85, 0xbb, 0xa1, 0x71, 0xcb, 0xd2, 0xbc, 0x37, 0x3e, 0x00, 0xd4, 0x4d, 0xb4, 0xd2,
	0x63, 0xa9, 0xff, 0xf0, 0xe1, 0xa3, 0xc7, 0x4a, 0x53, 0xef, 0xa6, 0x86, 0xd5, 0x7b, 0x2c, 0x95,
	0x66, 0x50, 0x54, 0xe2, 0x46, 0x8c, 0x4e, 0xfc, 0x3e, 0x0d, 0x89, 0x12, 0xe5, 0xff, 0x0d, 0x4e,
	0xda, 0x5f, 0xd2, 0x90, 0x80, 0x30, 0xd7, 0x51, 0x3d, 0x1e, 0x72, 0x46, 0x7c, 0x36, 0x8a, 0xf6,
	0x49, 0xe2, 0xdd, 0x32, 0x49, 0xc1, 0xfa, 0x06, 0x8c, 0xb2, 0x88, 0xe9, 0xf1, 0xf1, 0x43, 0x9a,
	0x0a, 0xef, 0xb6, 0x29, 0x22, 0x3b, 0x43, 0xaf, 0x68, 0x2a, 0xf0, 0x5d, 0xd4, 0xcc, 0xd4, 0xf0,
	0x19, 0xf7, 0xe1, 0x69, 0xdd, 0xd1, 0xd8, 0x15, 0xa3, 0xca, 0x1b, 0xfe, 0x4e, 0x3e, 0xb3, 0x9b,
	0x68, 0xc5, 0xfc, 0x5a, 0x7c, 0x9e, 0xf8, 0x34, 0xf6, 0xee, 0x1a, 0x8e, 0xc6, 0xfe, 0x36, 0xd9,
	0x8d, 0x71, 0x07, 0xe1, 0xe9, 0x11, 0x4a, 0x49, 0x48, 0x0e, 0x04, 0x4f, 0xbc, 0x7b, 0x1a, 0xbb,
	0x66, 0x4e, 0xd1, 0x9e, 0xf6, 0xc8, 0x47, 0x02, 0x07, 0x14, 0xca, 0xbe, 0x9f, 0x1d, 0x15, 0x21,
	0x62, 0x28, 0xf9, 0x06, 0x6a, 0xcc, 0xff, 0xec, 0x3b, 0x26, 0xab, 0x98, 0xf9, 0xd5, 0x3f, 0xaf,
	0x23, 0xf4, 0x81, 0x84, 0xa1, 0x7f, 0xc8, 0xf8, 0x07, 0xd6, 0xfe, 0x5b, 0x01, 0xa1, 0xe9, 0x3b,
	0xed, 0xfc, 0x55, 0x50, 0xb7, 0xae, 0x82, 0xc6, 0xff, 0x72, 0x15, 0xcc, 0xf4, 0xec, 0xd2, 0x49,
	0x3d, 0xbb, 0x0c, 0x49, 0x17, 0x7b, 0xb6, 0xab, 0xec, 0x39, 0x3d, 0xbb, 0x02, 0x1e, 0xbb, 0x67,
	0x57, 0x37, 0x8b, 0xb7, 0xea, 0x56, 0xcf, 0xae, 0x81, 0x4d, 0xf7, 0x6c, 0xd5, 0xc3, 0x50, 0x4e,
	0x0f, 0x5b, 0xce, 0xed, 0x61, 0xf5, 0xd9, 0x1e, 0x66, 0x29, 0x78, 0x88, 0x6a, 0xd9, 0x2b, 0xfe,
	0x09, 0x2f, 0x56, 0xd7, 0x50, 0xbd, 0x47, 0xfa, 0x94, 0x91, 0x9e, 0xcf, 0x59, 0x78, 0x04, 0x92,
	0x55, 0xbb, 0xcb, 0xda, 0xf6, 0x96, 0x85, 0x47, 0x9a, 0x78, 0x31, 0xe7, 0xbd, 0xa9, 0x34, 0xfb,
	0xde, 0xf4, 0x67, 0x07, 0xd5, 0x67, 0xbf, 0x0e, 0x60, 0x8c, 0x4a, 0xe9, 0x21, 0x8d, 0xf5, 0x05,
	0x0f, 0x7f, 0x4b, 0x81, 0x12, 0xf2, 0xed, 0x88, 0x26, 0xa4, 0xa7, 0x53, 0x65, 0x6b, 0x7c, 0x03,
	0xad, 0x98, 0xbf, 0x7d, 0xce, 0x08, 0xef, 0xc3, 0x63, 0xaa, 0x76, 0x1b, 0xc6, 0xfa, 0x56, 0x1a,
	0xf1, 0x97, 0x68, 0x63, 0x16, 0xe6, 0x33, 0xce, 0x7e, 0x4b, 0x12, 0xae, 0x9b, 0x62, 0x09, 0x42,
	0x2e, 0xcc, 0x84, 0xbc, 0x51, 0x7e, 0x68, 0x8d, 0xed, 0x4f, 0x0e, 0x6a, 0xcc, 0x7d, 0x88, 0x30,
	0x57, 0x3d, 0x15, 0x24, 0x4a, 0xf5, 0x5b, 0x88, 0xbc, 0xea, 0x77, 0xe5, 0xda, 0x5c, 0xf5, 0xca,
	0x59, 0xc8, 0xae, 0x7a, 0xe5, 0x3c, 0x8f, 0xdc, 0x11, 0xa3, 0xdf, 0x8e, 0x88, 0xe6, 0xa9, 0x57,
	0x78, 0x0b, 0x95, 0x55, 0x40, 0xfe, 0x17, 0xc0, 0xe9, 0x77, 0xcc, 0xae, 0xc2, 0xc9, 0x2c, 0x6c,
	0x14, 0xe9, 0x2c, 0x65, 0x75, 0xd5, 0xb3, 0x51, 0xa4, 0xb2, 0x3c, 0x40, 0xeb, 0x6a, 0x5f, 0x3f,
	0x22, 0x22, 0xe8, 0x05, 0x22, 0x50, 0xad, 0xca, 0x85, 0x9c, 0x58, 0xf9, 0x5e, 0x6b, 0x97, 0xec,
	0x57, 0xed, 0x1f, 0x1d, 0x54, 0x35, 0x5f, 0x4d, 0x4c, 0x79, 0x71, 0x40, 0x93, 0xd9, 0xf2, 0xde,
	0xc9, 0xb5, 0x29, 0x4f, 0x39, 0xa7, 0xe5, 0x65, 0x4e, 0xc6, 0xfd, 0x34, 0x0e, 0x92, 0xd4, 0x54,
	0x58, 0x65, 0x7c, 0x0f, 0xd6, 0xf8, 0x3e, 0x2a, 0x1d, 0x92, 0xa3, 0xff, 0xa2, 0x44, 0x80, 0xe1,
	0x87, 0xc8, 0x85, 0x7b, 0x28, 0xd5, 0x5f, 0x38, 0x4f, 0x09, 0xd0, 0x40, 0x7c, 0x1d, 0x35, 0x74,
	0xdd, 0x3a, 0x52, 0x15, 0x5c, 0x57, 0x46, 0xb8, 0xbe, 0xd2, 0xf6, 0x6b, 0x54, 0x35, 0x9f, 0x7c,
	0xe6, 0x8e, 0x96, 0x63, 0x1d, 0x2d, 0x75, 0x84, 0x0b, 0x39, 0xf3, 0x52, 0x71, 0x66, 0x5e, 0x6a,
	0xff, 0xab, 0x80, 0x1a, 0x73, 0x1f, 0x84, 0x4e, 0xdd, 0x74, 0xcb, 0xfc, 0xa0, 0x0a, 0xba, 0x26,
	0xf5, 0x15, 0xbb, 0x63, 0xbe, 0x62, 0x4f, 0xbf, 0x2d, 0xe9, 0xdf, 0xda, 0x6d, 0x18, 0xb5, 0x8b,
	0x67, 0xa1, 0xe5, 0x14, 0x7e, 0x57, 0x4d, 0xe1, 0xa5, 0xb3, 0xb0, 0x30, 0xa0, 0xdf, 0x86, 0x01,
	0xbd, 0x7c, 0xe6, 0xbe, 0x03, 0xd8, 0x57, 0xce, 0xee, 0xee, 0x99, 0xfb, 0x0e, 0xd4, 0xbe, 0x7a,
	0x84, 0x3f, 0x7d, 0x5f, 0xca, 0xf0, 0x83, 0x4c, 0xd0, 0xea, 0x59, 0x70, 0xad, 0xf5, 0xbf, 0x0b,
	0x68, 0x65, 0xfe, 0xfb, 0xd9, 0xa9, 0x62, 0x3f, 0x98, 0x17, 0x7b, 0x63, 0x61, 0xff, 0xe9, 0x5e,
	0x5a, 0xed, 0x3b, 0x33, 0x6a, 0x9f, 0x06, 0x97, 0x72, 0xdf, 0x9b, 0x95, 0xfb, 0x34, 0x30, 0xe8,
	0x7d, 0x67, 0x46, 0xef, 0x53, 0x77, 0x1e, 0xc0, 0xce, 0x53, 0xc1, 0x4f, 0xdd, 0x59, 0x2a, 0x7e,
	0x0e, 0xb9, 0xa1, 0xf0, 0x19, 0xff, 0x00, 0xb7, 0x47, 0xb5, 0x5b, 0x0e, 0xc5, 0x1b, 0xfe, 0x41,
	0x9a, 0x07, 0xca, 0x5c, 0x55, 0xe6, 0x01, 0x98, 0x1f, 0x22, 0xf7, 0x03, 0x15, 0x43, 0xb8, 0x41,
	0xce, 0x78, 0x9e, 0x1a, 0xf8, 0xf4, 0x19, 0xaa, 0xf6, 0x68, 0x1a, 0xec, 0x87, 0xa4, 0x87, 0xaf,
	0x2e, 0xc0, 0x75, 0xfb, 0x7e, 0x1b, 0xcb, 0x98, 0xd4, 0xfb, 0xd3, 0x77, 0x4f, 0xd4, 0x53, 0x30,
	0x21, 0x4f, 0xbf, 0x9c, 0x3e, 0x21, 0x7c, 0x65, 0x21, 0x1c, 0xfa, 0xf3, 0x42, 0xb0, 0x09, 0x78,
	0xfa, 0x0e, 0x95, 0x13, 0x78, 0xce, 0x8b, 0x91, 0xf0, 0xfb, 0x9f, 0x8f, 0x3c, 0xbd, 0x71, 0xc2,
	0x46, 0xcf, 0x8f, 0x3e, 0x7e, 0x6a, 0x2d, 0xfd, 0xf0, 0xa9, 0xb5, 0xf4, 0xd3, 0xa7, 0x96, 0xf3,
	0xbb, 0xe3, 0x96, 0xf3, 0x97, 0xe3, 0x96, 0xf3, 0xf7, 0xe3, 0x96, 0xf3, 0xf1, 0xb8, 0xe5, 0xfc,
	0xf3, 0xb8, 0xe5, 0xfc, 0x78, 0xdc, 0x5a, 0xfa, 0xe9, 0xb8, 0xe5, 0x7c, 0xff, 0xb9, 0xb5, 0xf4,
	0xf1, 0x73, 0x6b, 0xe9, 0x87, 0xcf, 0xad, 0xa5, 0xdf, 0xfc, 0x72, 0xc0, 0xe3, 0xc3, 0x41, 0x67,
	0xcc, 0x43, 0x41, 0x92, 0x24, 0xe8, 0x8c, 0xd2, 0x2d, 0xf8, 0xa3, 0xcf, 0x93, 0xe8, 0x7e, 0x9c,
	0xf0, 0x31, 0xed, 0x91, 0xe4, 0xbe, 0x71, 0x6f, 0xc5, 0xfb, 0x03, 0xbe, 0x45, 0x26, 0x42, 0xff,
	0x5f, 0x98, 0xfa, 0x67, 0xdf, 0x05, 0xee, 0x8f, 0xff, 0x13, 0x00, 0x00, 0xff, 0xff, 0x77, 0xfe,
	0x7e, 0x66, 0x2a, 0x1b, 0x00, 0x00,
}

func (this *FieldRules) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldRules)
	if !ok {
		that2, ok := that.(FieldRules)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Type == nil {
		if this.Type != nil {
			return false
		}
	} else if this.Type == nil {
		return false
	} else if !this.Type.Equal(that1.Type) {
		return false
	}
	return true
}
func (this *FieldRules_Float) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldRules_Float)
	if !ok {
		that2, ok := that.(FieldRules_Float)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Float.Equal(that1.Float) {
		return false
	}
	return true
}
func (this *FieldRules_Double) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldRules_Double)
	if !ok {
		that2, ok := that.(FieldRules_Double)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Double.Equal(that1.Double) {
		return false
	}
	return true
}
func (this *FieldRules_Int32) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldRules_Int32)
	if !ok {
		that2, ok := that.(FieldRules_Int32)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Int32.Equal(that1.Int32) {
		return false
	}
	return true
}
func (this *FieldRules_Int64) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldRules_Int64)
	if !ok {
		that2, ok := that.(FieldRules_Int64)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Int64.Equal(that1.Int64) {
		return false
	}
	return true
}
func (this *FieldRules_Uint32) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldRules_Uint32)
	if !ok {
		that2, ok := that.(FieldRules_Uint32)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Uint32.Equal(that1.Uint32) {
		return false
	}
	return true
}
func (this *FieldRules_Uint64) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldRules_Uint64)
	if !ok {
		that2, ok := that.(FieldRules_Uint64)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Uint64.Equal(that1.Uint64) {
		return false
	}
	return true
}
func (this *FieldRules_Sint32) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldRules_Sint32)
	if !ok {
		that2, ok := that.(FieldRules_Sint32)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Sint32.Equal(that1.Sint32) {
		return false
	}
	return true
}
func (this *FieldRules_Sint64) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldRules_Sint64)
	if !ok {
		that2, ok := that.(FieldRules_Sint64)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Sint64.Equal(that1.Sint64) {
		return false
	}
	return true
}
func (this *FieldRules_Fixed32) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldRules_Fixed32)
	if !ok {
		that2, ok := that.(FieldRules_Fixed32)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Fixed32.Equal(that1.Fixed32) {
		return false
	}
	return true
}
func (this *FieldRules_Fixed64) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldRules_Fixed64)
	if !ok {
		that2, ok := that.(FieldRules_Fixed64)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Fixed64.Equal(that1.Fixed64) {
		return false
	}
	return true
}
func (this *FieldRules_Sfixed32) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldRules_Sfixed32)
	if !ok {
		that2, ok := that.(FieldRules_Sfixed32)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Sfixed32.Equal(that1.Sfixed32) {
		return false
	}
	return true
}
func (this *FieldRules_Sfixed64) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldRules_Sfixed64)
	if !ok {
		that2, ok := that.(FieldRules_Sfixed64)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Sfixed64.Equal(that1.Sfixed64) {
		return false
	}
	return true
}
func (this *FieldRules_Bool) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldRules_Bool)
	if !ok {
		that2, ok := that.(FieldRules_Bool)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Bool.Equal(that1.Bool) {
		return false
	}
	return true
}
func (this *FieldRules_String_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldRules_String_)
	if !ok {
		that2, ok := that.(FieldRules_String_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.String_.Equal(that1.String_) {
		return false
	}
	return true
}
func (this *FieldRules_Bytes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldRules_Bytes)
	if !ok {
		that2, ok := that.(FieldRules_Bytes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Bytes.Equal(that1.Bytes) {
		return false
	}
	return true
}
func (this *FieldRules_Enum) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldRules_Enum)
	if !ok {
		that2, ok := that.(FieldRules_Enum)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Enum.Equal(that1.Enum) {
		return false
	}
	return true
}
func (this *FieldRules_Message) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldRules_Message)
	if !ok {
		that2, ok := that.(FieldRules_Message)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Message.Equal(that1.Message) {
		return false
	}
	return true
}
func (this *FieldRules_Repeated) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldRules_Repeated)
	if !ok {
		that2, ok := that.(FieldRules_Repeated)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Repeated.Equal(that1.Repeated) {
		return false
	}
	return true
}
func (this *FieldRules_Map) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldRules_Map)
	if !ok {
		that2, ok := that.(FieldRules_Map)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Map.Equal(that1.Map) {
		return false
	}
	return true
}
func (this *FieldRules_Any) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldRules_Any)
	if !ok {
		that2, ok := that.(FieldRules_Any)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Any.Equal(that1.Any) {
		return false
	}
	return true
}
func (this *FieldRules_Duration) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldRules_Duration)
	if !ok {
		that2, ok := that.(FieldRules_Duration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Duration.Equal(that1.Duration) {
		return false
	}
	return true
}
func (this *FieldRules_Timestamp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldRules_Timestamp)
	if !ok {
		that2, ok := that.(FieldRules_Timestamp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Timestamp.Equal(that1.Timestamp) {
		return false
	}
	return true
}
func (this *FloatRules) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FloatRules)
	if !ok {
		that2, ok := that.(FloatRules)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Const != that1.Const {
		return false
	}
	if this.Lt != that1.Lt {
		return false
	}
	if this.Lte != that1.Lte {
		return false
	}
	if this.Gt != that1.Gt {
		return false
	}
	if this.Gte != that1.Gte {
		return false
	}
	if len(this.In) != len(that1.In) {
		return false
	}
	for i := range this.In {
		if this.In[i] != that1.In[i] {
			return false
		}
	}
	if len(this.NotIn) != len(that1.NotIn) {
		return false
	}
	for i := range this.NotIn {
		if this.NotIn[i] != that1.NotIn[i] {
			return false
		}
	}
	return true
}
func (this *DoubleRules) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DoubleRules)
	if !ok {
		that2, ok := that.(DoubleRules)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Const != that1.Const {
		return false
	}
	if this.Lt != that1.Lt {
		return false
	}
	if this.Lte != that1.Lte {
		return false
	}
	if this.Gt != that1.Gt {
		return false
	}
	if this.Gte != that1.Gte {
		return false
	}
	if len(this.In) != len(that1.In) {
		return false
	}
	for i := range this.In {
		if this.In[i] != that1.In[i] {
			return false
		}
	}
	if len(this.NotIn) != len(that1.NotIn) {
		return false
	}
	for i := range this.NotIn {
		if this.NotIn[i] != that1.NotIn[i] {
			return false
		}
	}
	return true
}
func (this *Int32Rules) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Int32Rules)
	if !ok {
		that2, ok := that.(Int32Rules)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Const != that1.Const {
		return false
	}
	if this.Lt != that1.Lt {
		return false
	}
	if this.Lte != that1.Lte {
		return false
	}
	if this.Gt != that1.Gt {
		return false
	}
	if this.Gte != that1.Gte {
		return false
	}
	if len(this.In) != len(that1.In) {
		return false
	}
	for i := range this.In {
		if this.In[i] != that1.In[i] {
			return false
		}
	}
	if len(this.NotIn) != len(that1.NotIn) {
		return false
	}
	for i := range this.NotIn {
		if this.NotIn[i] != that1.NotIn[i] {
			return false
		}
	}
	return true
}
func (this *Int64Rules) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Int64Rules)
	if !ok {
		that2, ok := that.(Int64Rules)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Const != that1.Const {
		return false
	}
	if this.Lt != that1.Lt {
		return false
	}
	if this.Lte != that1.Lte {
		return false
	}
	if this.Gt != that1.Gt {
		return false
	}
	if this.Gte != that1.Gte {
		return false
	}
	if len(this.In) != len(that1.In) {
		return false
	}
	for i := range this.In {
		if this.In[i] != that1.In[i] {
			return false
		}
	}
	if len(this.NotIn) != len(that1.NotIn) {
		return false
	}
	for i := range this.NotIn {
		if this.NotIn[i] != that1.NotIn[i] {
			return false
		}
	}
	return true
}
func (this *UInt32Rules) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UInt32Rules)
	if !ok {
		that2, ok := that.(UInt32Rules)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Const != that1.Const {
		return false
	}
	if this.Lt != that1.Lt {
		return false
	}
	if this.Lte != that1.Lte {
		return false
	}
	if this.Gt != that1.Gt {
		return false
	}
	if this.Gte != that1.Gte {
		return false
	}
	if len(this.In) != len(that1.In) {
		return false
	}
	for i := range this.In {
		if this.In[i] != that1.In[i] {
			return false
		}
	}
	if len(this.NotIn) != len(that1.NotIn) {
		return false
	}
	for i := range this.NotIn {
		if this.NotIn[i] != that1.NotIn[i] {
			return false
		}
	}
	if this.Ranges != that1.Ranges {
		return false
	}
	if this.NotInRanges != that1.NotInRanges {
		return false
	}
	return true
}
func (this *UInt64Rules) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UInt64Rules)
	if !ok {
		that2, ok := that.(UInt64Rules)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Const != that1.Const {
		return false
	}
	if this.Lt != that1.Lt {
		return false
	}
	if this.Lte != that1.Lte {
		return false
	}
	if this.Gt != that1.Gt {
		return false
	}
	if this.Gte != that1.Gte {
		return false
	}
	if len(this.In) != len(that1.In) {
		return false
	}
	for i := range this.In {
		if this.In[i] != that1.In[i] {
			return false
		}
	}
	if len(this.NotIn) != len(that1.NotIn) {
		return false
	}
	for i := range this.NotIn {
		if this.NotIn[i] != that1.NotIn[i] {
			return false
		}
	}
	return true
}
func (this *SInt32Rules) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SInt32Rules)
	if !ok {
		that2, ok := that.(SInt32Rules)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Const != that1.Const {
		return false
	}
	if this.Lt != that1.Lt {
		return false
	}
	if this.Lte != that1.Lte {
		return false
	}
	if this.Gt != that1.Gt {
		return false
	}
	if this.Gte != that1.Gte {
		return false
	}
	if len(this.In) != len(that1.In) {
		return false
	}
	for i := range this.In {
		if this.In[i] != that1.In[i] {
			return false
		}
	}
	if len(this.NotIn) != len(that1.NotIn) {
		return false
	}
	for i := range this.NotIn {
		if this.NotIn[i] != that1.NotIn[i] {
			return false
		}
	}
	return true
}
func (this *SInt64Rules) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SInt64Rules)
	if !ok {
		that2, ok := that.(SInt64Rules)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Const != that1.Const {
		return false
	}
	if this.Lt != that1.Lt {
		return false
	}
	if this.Lte != that1.Lte {
		return false
	}
	if this.Gt != that1.Gt {
		return false
	}
	if this.Gte != that1.Gte {
		return false
	}
	if len(this.In) != len(that1.In) {
		return false
	}
	for i := range this.In {
		if this.In[i] != that1.In[i] {
			return false
		}
	}
	if len(this.NotIn) != len(that1.NotIn) {
		return false
	}
	for i := range this.NotIn {
		if this.NotIn[i] != that1.NotIn[i] {
			return false
		}
	}
	return true
}
func (this *Fixed32Rules) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Fixed32Rules)
	if !ok {
		that2, ok := that.(Fixed32Rules)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Const != that1.Const {
		return false
	}
	if this.Lt != that1.Lt {
		return false
	}
	if this.Lte != that1.Lte {
		return false
	}
	if this.Gt != that1.Gt {
		return false
	}
	if this.Gte != that1.Gte {
		return false
	}
	if len(this.In) != len(that1.In) {
		return false
	}
	for i := range this.In {
		if this.In[i] != that1.In[i] {
			return false
		}
	}
	if len(this.NotIn) != len(that1.NotIn) {
		return false
	}
	for i := range this.NotIn {
		if this.NotIn[i] != that1.NotIn[i] {
			return false
		}
	}
	return true
}
func (this *Fixed64Rules) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Fixed64Rules)
	if !ok {
		that2, ok := that.(Fixed64Rules)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Const != that1.Const {
		return false
	}
	if this.Lt != that1.Lt {
		return false
	}
	if this.Lte != that1.Lte {
		return false
	}
	if this.Gt != that1.Gt {
		return false
	}
	if this.Gte != that1.Gte {
		return false
	}
	if len(this.In) != len(that1.In) {
		return false
	}
	for i := range this.In {
		if this.In[i] != that1.In[i] {
			return false
		}
	}
	if len(this.NotIn) != len(that1.NotIn) {
		return false
	}
	for i := range this.NotIn {
		if this.NotIn[i] != that1.NotIn[i] {
			return false
		}
	}
	return true
}
func (this *SFixed32Rules) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SFixed32Rules)
	if !ok {
		that2, ok := that.(SFixed32Rules)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Const != that1.Const {
		return false
	}
	if this.Lt != that1.Lt {
		return false
	}
	if this.Lte != that1.Lte {
		return false
	}
	if this.Gt != that1.Gt {
		return false
	}
	if this.Gte != that1.Gte {
		return false
	}
	if len(this.In) != len(that1.In) {
		return false
	}
	for i := range this.In {
		if this.In[i] != that1.In[i] {
			return false
		}
	}
	if len(this.NotIn) != len(that1.NotIn) {
		return false
	}
	for i := range this.NotIn {
		if this.NotIn[i] != that1.NotIn[i] {
			return false
		}
	}
	return true
}
func (this *SFixed64Rules) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SFixed64Rules)
	if !ok {
		that2, ok := that.(SFixed64Rules)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Const != that1.Const {
		return false
	}
	if this.Lt != that1.Lt {
		return false
	}
	if this.Lte != that1.Lte {
		return false
	}
	if this.Gt != that1.Gt {
		return false
	}
	if this.Gte != that1.Gte {
		return false
	}
	if len(this.In) != len(that1.In) {
		return false
	}
	for i := range this.In {
		if this.In[i] != that1.In[i] {
			return false
		}
	}
	if len(this.NotIn) != len(that1.NotIn) {
		return false
	}
	for i := range this.NotIn {
		if this.NotIn[i] != that1.NotIn[i] {
			return false
		}
	}
	return true
}
func (this *BoolRules) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BoolRules)
	if !ok {
		that2, ok := that.(BoolRules)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Const != that1.Const {
		return false
	}
	return true
}
func (this *StringRules) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringRules)
	if !ok {
		that2, ok := that.(StringRules)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Const != that1.Const {
		return false
	}
	if this.Len != that1.Len {
		return false
	}
	if this.MinLen != that1.MinLen {
		return false
	}
	if this.MaxLen != that1.MaxLen {
		return false
	}
	if this.LenBytes != that1.LenBytes {
		return false
	}
	if this.MinBytes != that1.MinBytes {
		return false
	}
	if this.MaxBytes != that1.MaxBytes {
		return false
	}
	if this.Pattern != that1.Pattern {
		return false
	}
	if this.Prefix != that1.Prefix {
		return false
	}
	if this.Suffix != that1.Suffix {
		return false
	}
	if this.Contains != that1.Contains {
		return false
	}
	if len(this.In) != len(that1.In) {
		return false
	}
	for i := range this.In {
		if this.In[i] != that1.In[i] {
			return false
		}
	}
	if len(this.NotIn) != len(that1.NotIn) {
		return false
	}
	for i := range this.NotIn {
		if this.NotIn[i] != that1.NotIn[i] {
			return false
		}
	}
	if this.MinIpPrefixLength != that1.MinIpPrefixLength {
		return false
	}
	if this.MaxIpPrefixLength != that1.MaxIpPrefixLength {
		return false
	}
	if this.MinTimeInterval != that1.MinTimeInterval {
		return false
	}
	if this.MaxTimeInterval != that1.MaxTimeInterval {
		return false
	}
	if that1.WellKnown == nil {
		if this.WellKnown != nil {
			return false
		}
	} else if this.WellKnown == nil {
		return false
	} else if !this.WellKnown.Equal(that1.WellKnown) {
		return false
	}
	return true
}
func (this *StringRules_Email) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringRules_Email)
	if !ok {
		that2, ok := that.(StringRules_Email)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	return true
}
func (this *StringRules_Hostname) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringRules_Hostname)
	if !ok {
		that2, ok := that.(StringRules_Hostname)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Hostname != that1.Hostname {
		return false
	}
	return true
}
func (this *StringRules_Ip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringRules_Ip)
	if !ok {
		that2, ok := that.(StringRules_Ip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ip != that1.Ip {
		return false
	}
	return true
}
func (this *StringRules_Ipv4) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringRules_Ipv4)
	if !ok {
		that2, ok := that.(StringRules_Ipv4)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ipv4 != that1.Ipv4 {
		return false
	}
	return true
}
func (this *StringRules_Ipv6) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringRules_Ipv6)
	if !ok {
		that2, ok := that.(StringRules_Ipv6)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ipv6 != that1.Ipv6 {
		return false
	}
	return true
}
func (this *StringRules_Uri) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringRules_Uri)
	if !ok {
		that2, ok := that.(StringRules_Uri)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uri != that1.Uri {
		return false
	}
	return true
}
func (this *StringRules_UriRef) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringRules_UriRef)
	if !ok {
		that2, ok := that.(StringRules_UriRef)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UriRef != that1.UriRef {
		return false
	}
	return true
}
func (this *StringRules_IpPrefix) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringRules_IpPrefix)
	if !ok {
		that2, ok := that.(StringRules_IpPrefix)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IpPrefix != that1.IpPrefix {
		return false
	}
	return true
}
func (this *StringRules_PortRange) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringRules_PortRange)
	if !ok {
		that2, ok := that.(StringRules_PortRange)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PortRange != that1.PortRange {
		return false
	}
	return true
}
func (this *StringRules_Mac) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringRules_Mac)
	if !ok {
		that2, ok := that.(StringRules_Mac)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Mac != that1.Mac {
		return false
	}
	return true
}
func (this *StringRules_Regex) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringRules_Regex)
	if !ok {
		that2, ok := that.(StringRules_Regex)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Regex != that1.Regex {
		return false
	}
	return true
}
func (this *StringRules_HttpHeaderField) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringRules_HttpHeaderField)
	if !ok {
		that2, ok := that.(StringRules_HttpHeaderField)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HttpHeaderField != that1.HttpHeaderField {
		return false
	}
	return true
}
func (this *StringRules_K8SLabelValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringRules_K8SLabelValue)
	if !ok {
		that2, ok := that.(StringRules_K8SLabelValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.K8SLabelValue != that1.K8SLabelValue {
		return false
	}
	return true
}
func (this *StringRules_NotEmpty) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringRules_NotEmpty)
	if !ok {
		that2, ok := that.(StringRules_NotEmpty)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NotEmpty != that1.NotEmpty {
		return false
	}
	return true
}
func (this *StringRules_Hostport) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringRules_Hostport)
	if !ok {
		that2, ok := that.(StringRules_Hostport)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Hostport != that1.Hostport {
		return false
	}
	return true
}
func (this *StringRules_JsonPath) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringRules_JsonPath)
	if !ok {
		that2, ok := that.(StringRules_JsonPath)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.JsonPath != that1.JsonPath {
		return false
	}
	return true
}
func (this *StringRules_Hex) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringRules_Hex)
	if !ok {
		that2, ok := that.(StringRules_Hex)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Hex != that1.Hex {
		return false
	}
	return true
}
func (this *StringRules_Ipv4Prefix) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringRules_Ipv4Prefix)
	if !ok {
		that2, ok := that.(StringRules_Ipv4Prefix)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ipv4Prefix != that1.Ipv4Prefix {
		return false
	}
	return true
}
func (this *StringRules_Ipv6Prefix) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringRules_Ipv6Prefix)
	if !ok {
		that2, ok := that.(StringRules_Ipv6Prefix)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ipv6Prefix != that1.Ipv6Prefix {
		return false
	}
	return true
}
func (this *StringRules_VhDomain) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringRules_VhDomain)
	if !ok {
		that2, ok := that.(StringRules_VhDomain)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VhDomain != that1.VhDomain {
		return false
	}
	return true
}
func (this *StringRules_VesObjectName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringRules_VesObjectName)
	if !ok {
		that2, ok := that.(StringRules_VesObjectName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VesObjectName != that1.VesObjectName {
		return false
	}
	return true
}
func (this *StringRules_IanaSvcName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringRules_IanaSvcName)
	if !ok {
		that2, ok := that.(StringRules_IanaSvcName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IanaSvcName != that1.IanaSvcName {
		return false
	}
	return true
}
func (this *StringRules_Dns_1123Label) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringRules_Dns_1123Label)
	if !ok {
		that2, ok := that.(StringRules_Dns_1123Label)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Dns_1123Label != that1.Dns_1123Label {
		return false
	}
	return true
}
func (this *StringRules_UnixFilePath) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringRules_UnixFilePath)
	if !ok {
		that2, ok := that.(StringRules_UnixFilePath)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UnixFilePath != that1.UnixFilePath {
		return false
	}
	return true
}
func (this *StringRules_PhoneNumber) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringRules_PhoneNumber)
	if !ok {
		that2, ok := that.(StringRules_PhoneNumber)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PhoneNumber != that1.PhoneNumber {
		return false
	}
	return true
}
func (this *StringRules_PortRangeList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringRules_PortRangeList)
	if !ok {
		that2, ok := that.(StringRules_PortRangeList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PortRangeList != that1.PortRangeList {
		return false
	}
	return true
}
func (this *StringRules_VhDomainNoPort) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringRules_VhDomainNoPort)
	if !ok {
		that2, ok := that.(StringRules_VhDomainNoPort)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VhDomainNoPort != that1.VhDomainNoPort {
		return false
	}
	return true
}
func (this *StringRules_HostnameOrIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringRules_HostnameOrIp)
	if !ok {
		that2, ok := that.(StringRules_HostnameOrIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HostnameOrIp != that1.HostnameOrIp {
		return false
	}
	return true
}
func (this *StringRules_K8SLabelSelector) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringRules_K8SLabelSelector)
	if !ok {
		that2, ok := that.(StringRules_K8SLabelSelector)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.K8SLabelSelector != that1.K8SLabelSelector {
		return false
	}
	return true
}
func (this *StringRules_HttpPath) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringRules_HttpPath)
	if !ok {
		that2, ok := that.(StringRules_HttpPath)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HttpPath != that1.HttpPath {
		return false
	}
	return true
}
func (this *StringRules_TimeInterval) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringRules_TimeInterval)
	if !ok {
		that2, ok := that.(StringRules_TimeInterval)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TimeInterval != that1.TimeInterval {
		return false
	}
	return true
}
func (this *BytesRules) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BytesRules)
	if !ok {
		that2, ok := that.(BytesRules)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Const, that1.Const) {
		return false
	}
	if this.Len != that1.Len {
		return false
	}
	if this.MinLen != that1.MinLen {
		return false
	}
	if this.MaxLen != that1.MaxLen {
		return false
	}
	if this.Pattern != that1.Pattern {
		return false
	}
	if !bytes.Equal(this.Prefix, that1.Prefix) {
		return false
	}
	if !bytes.Equal(this.Suffix, that1.Suffix) {
		return false
	}
	if !bytes.Equal(this.Contains, that1.Contains) {
		return false
	}
	if len(this.In) != len(that1.In) {
		return false
	}
	for i := range this.In {
		if !bytes.Equal(this.In[i], that1.In[i]) {
			return false
		}
	}
	if len(this.NotIn) != len(that1.NotIn) {
		return false
	}
	for i := range this.NotIn {
		if !bytes.Equal(this.NotIn[i], that1.NotIn[i]) {
			return false
		}
	}
	if that1.WellKnown == nil {
		if this.WellKnown != nil {
			return false
		}
	} else if this.WellKnown == nil {
		return false
	} else if !this.WellKnown.Equal(that1.WellKnown) {
		return false
	}
	return true
}
func (this *BytesRules_Ip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BytesRules_Ip)
	if !ok {
		that2, ok := that.(BytesRules_Ip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ip != that1.Ip {
		return false
	}
	return true
}
func (this *BytesRules_Ipv4) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BytesRules_Ipv4)
	if !ok {
		that2, ok := that.(BytesRules_Ipv4)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ipv4 != that1.Ipv4 {
		return false
	}
	return true
}
func (this *BytesRules_Ipv6) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BytesRules_Ipv6)
	if !ok {
		that2, ok := that.(BytesRules_Ipv6)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ipv6 != that1.Ipv6 {
		return false
	}
	return true
}
func (this *EnumRules) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnumRules)
	if !ok {
		that2, ok := that.(EnumRules)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Const != that1.Const {
		return false
	}
	if this.DefinedOnly != that1.DefinedOnly {
		return false
	}
	if len(this.In) != len(that1.In) {
		return false
	}
	for i := range this.In {
		if this.In[i] != that1.In[i] {
			return false
		}
	}
	if len(this.NotIn) != len(that1.NotIn) {
		return false
	}
	for i := range this.NotIn {
		if this.NotIn[i] != that1.NotIn[i] {
			return false
		}
	}
	return true
}
func (this *MessageRules) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MessageRules)
	if !ok {
		that2, ok := that.(MessageRules)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Skip != that1.Skip {
		return false
	}
	if this.Required != that1.Required {
		return false
	}
	if this.RequiredOneof != that1.RequiredOneof {
		return false
	}
	if this.RequiredOneNonzeroField != that1.RequiredOneNonzeroField {
		return false
	}
	return true
}
func (this *RepeatedRules) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RepeatedRules)
	if !ok {
		that2, ok := that.(RepeatedRules)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MinItems != that1.MinItems {
		return false
	}
	if this.MaxItems != that1.MaxItems {
		return false
	}
	if this.Unique != that1.Unique {
		return false
	}
	if !this.Items.Equal(that1.Items) {
		return false
	}
	if this.NumItems != that1.NumItems {
		return false
	}
	if this.UniqueMetadataName != that1.UniqueMetadataName {
		return false
	}
	return true
}
func (this *MapRules) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MapRules)
	if !ok {
		that2, ok := that.(MapRules)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MinPairs != that1.MinPairs {
		return false
	}
	if this.MaxPairs != that1.MaxPairs {
		return false
	}
	if this.NoSparse != that1.NoSparse {
		return false
	}
	if !this.Keys.Equal(that1.Keys) {
		return false
	}
	if !this.Values.Equal(that1.Values) {
		return false
	}
	if this.UniqueValues != that1.UniqueValues {
		return false
	}
	return true
}
func (this *AnyRules) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AnyRules)
	if !ok {
		that2, ok := that.(AnyRules)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Required != that1.Required {
		return false
	}
	if len(this.In) != len(that1.In) {
		return false
	}
	for i := range this.In {
		if this.In[i] != that1.In[i] {
			return false
		}
	}
	if len(this.NotIn) != len(that1.NotIn) {
		return false
	}
	for i := range this.NotIn {
		if this.NotIn[i] != that1.NotIn[i] {
			return false
		}
	}
	return true
}
func (this *DurationRules) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DurationRules)
	if !ok {
		that2, ok := that.(DurationRules)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Required != that1.Required {
		return false
	}
	if !this.Const.Equal(that1.Const) {
		return false
	}
	if !this.Lt.Equal(that1.Lt) {
		return false
	}
	if !this.Lte.Equal(that1.Lte) {
		return false
	}
	if !this.Gt.Equal(that1.Gt) {
		return false
	}
	if !this.Gte.Equal(that1.Gte) {
		return false
	}
	if len(this.In) != len(that1.In) {
		return false
	}
	for i := range this.In {
		if !this.In[i].Equal(that1.In[i]) {
			return false
		}
	}
	if len(this.NotIn) != len(that1.NotIn) {
		return false
	}
	for i := range this.NotIn {
		if !this.NotIn[i].Equal(that1.NotIn[i]) {
			return false
		}
	}
	return true
}
func (this *TimestampRules) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TimestampRules)
	if !ok {
		that2, ok := that.(TimestampRules)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Required != that1.Required {
		return false
	}
	if !this.Const.Equal(that1.Const) {
		return false
	}
	if !this.Lt.Equal(that1.Lt) {
		return false
	}
	if !this.Lte.Equal(that1.Lte) {
		return false
	}
	if !this.Gt.Equal(that1.Gt) {
		return false
	}
	if !this.Gte.Equal(that1.Gte) {
		return false
	}
	if this.LtNow != that1.LtNow {
		return false
	}
	if this.GtNow != that1.GtNow {
		return false
	}
	if !this.Within.Equal(that1.Within) {
		return false
	}
	return true
}
func (this *FieldRules) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 26)
	s = append(s, "&schema.FieldRules{")
	if this.Type != nil {
		s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FieldRules_Float) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.FieldRules_Float{` +
		`Float:` + fmt.Sprintf("%#v", this.Float) + `}`}, ", ")
	return s
}
func (this *FieldRules_Double) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.FieldRules_Double{` +
		`Double:` + fmt.Sprintf("%#v", this.Double) + `}`}, ", ")
	return s
}
func (this *FieldRules_Int32) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.FieldRules_Int32{` +
		`Int32:` + fmt.Sprintf("%#v", this.Int32) + `}`}, ", ")
	return s
}
func (this *FieldRules_Int64) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.FieldRules_Int64{` +
		`Int64:` + fmt.Sprintf("%#v", this.Int64) + `}`}, ", ")
	return s
}
func (this *FieldRules_Uint32) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.FieldRules_Uint32{` +
		`Uint32:` + fmt.Sprintf("%#v", this.Uint32) + `}`}, ", ")
	return s
}
func (this *FieldRules_Uint64) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.FieldRules_Uint64{` +
		`Uint64:` + fmt.Sprintf("%#v", this.Uint64) + `}`}, ", ")
	return s
}
func (this *FieldRules_Sint32) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.FieldRules_Sint32{` +
		`Sint32:` + fmt.Sprintf("%#v", this.Sint32) + `}`}, ", ")
	return s
}
func (this *FieldRules_Sint64) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.FieldRules_Sint64{` +
		`Sint64:` + fmt.Sprintf("%#v", this.Sint64) + `}`}, ", ")
	return s
}
func (this *FieldRules_Fixed32) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.FieldRules_Fixed32{` +
		`Fixed32:` + fmt.Sprintf("%#v", this.Fixed32) + `}`}, ", ")
	return s
}
func (this *FieldRules_Fixed64) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.FieldRules_Fixed64{` +
		`Fixed64:` + fmt.Sprintf("%#v", this.Fixed64) + `}`}, ", ")
	return s
}
func (this *FieldRules_Sfixed32) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.FieldRules_Sfixed32{` +
		`Sfixed32:` + fmt.Sprintf("%#v", this.Sfixed32) + `}`}, ", ")
	return s
}
func (this *FieldRules_Sfixed64) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.FieldRules_Sfixed64{` +
		`Sfixed64:` + fmt.Sprintf("%#v", this.Sfixed64) + `}`}, ", ")
	return s
}
func (this *FieldRules_Bool) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.FieldRules_Bool{` +
		`Bool:` + fmt.Sprintf("%#v", this.Bool) + `}`}, ", ")
	return s
}
func (this *FieldRules_String_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.FieldRules_String_{` +
		`String_:` + fmt.Sprintf("%#v", this.String_) + `}`}, ", ")
	return s
}
func (this *FieldRules_Bytes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.FieldRules_Bytes{` +
		`Bytes:` + fmt.Sprintf("%#v", this.Bytes) + `}`}, ", ")
	return s
}
func (this *FieldRules_Enum) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.FieldRules_Enum{` +
		`Enum:` + fmt.Sprintf("%#v", this.Enum) + `}`}, ", ")
	return s
}
func (this *FieldRules_Message) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.FieldRules_Message{` +
		`Message:` + fmt.Sprintf("%#v", this.Message) + `}`}, ", ")
	return s
}
func (this *FieldRules_Repeated) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.FieldRules_Repeated{` +
		`Repeated:` + fmt.Sprintf("%#v", this.Repeated) + `}`}, ", ")
	return s
}
func (this *FieldRules_Map) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.FieldRules_Map{` +
		`Map:` + fmt.Sprintf("%#v", this.Map) + `}`}, ", ")
	return s
}
func (this *FieldRules_Any) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.FieldRules_Any{` +
		`Any:` + fmt.Sprintf("%#v", this.Any) + `}`}, ", ")
	return s
}
func (this *FieldRules_Duration) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.FieldRules_Duration{` +
		`Duration:` + fmt.Sprintf("%#v", this.Duration) + `}`}, ", ")
	return s
}
func (this *FieldRules_Timestamp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.FieldRules_Timestamp{` +
		`Timestamp:` + fmt.Sprintf("%#v", this.Timestamp) + `}`}, ", ")
	return s
}
func (this *FloatRules) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&schema.FloatRules{")
	s = append(s, "Const: "+fmt.Sprintf("%#v", this.Const)+",\n")
	s = append(s, "Lt: "+fmt.Sprintf("%#v", this.Lt)+",\n")
	s = append(s, "Lte: "+fmt.Sprintf("%#v", this.Lte)+",\n")
	s = append(s, "Gt: "+fmt.Sprintf("%#v", this.Gt)+",\n")
	s = append(s, "Gte: "+fmt.Sprintf("%#v", this.Gte)+",\n")
	s = append(s, "In: "+fmt.Sprintf("%#v", this.In)+",\n")
	s = append(s, "NotIn: "+fmt.Sprintf("%#v", this.NotIn)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DoubleRules) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&schema.DoubleRules{")
	s = append(s, "Const: "+fmt.Sprintf("%#v", this.Const)+",\n")
	s = append(s, "Lt: "+fmt.Sprintf("%#v", this.Lt)+",\n")
	s = append(s, "Lte: "+fmt.Sprintf("%#v", this.Lte)+",\n")
	s = append(s, "Gt: "+fmt.Sprintf("%#v", this.Gt)+",\n")
	s = append(s, "Gte: "+fmt.Sprintf("%#v", this.Gte)+",\n")
	s = append(s, "In: "+fmt.Sprintf("%#v", this.In)+",\n")
	s = append(s, "NotIn: "+fmt.Sprintf("%#v", this.NotIn)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Int32Rules) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&schema.Int32Rules{")
	s = append(s, "Const: "+fmt.Sprintf("%#v", this.Const)+",\n")
	s = append(s, "Lt: "+fmt.Sprintf("%#v", this.Lt)+",\n")
	s = append(s, "Lte: "+fmt.Sprintf("%#v", this.Lte)+",\n")
	s = append(s, "Gt: "+fmt.Sprintf("%#v", this.Gt)+",\n")
	s = append(s, "Gte: "+fmt.Sprintf("%#v", this.Gte)+",\n")
	s = append(s, "In: "+fmt.Sprintf("%#v", this.In)+",\n")
	s = append(s, "NotIn: "+fmt.Sprintf("%#v", this.NotIn)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Int64Rules) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&schema.Int64Rules{")
	s = append(s, "Const: "+fmt.Sprintf("%#v", this.Const)+",\n")
	s = append(s, "Lt: "+fmt.Sprintf("%#v", this.Lt)+",\n")
	s = append(s, "Lte: "+fmt.Sprintf("%#v", this.Lte)+",\n")
	s = append(s, "Gt: "+fmt.Sprintf("%#v", this.Gt)+",\n")
	s = append(s, "Gte: "+fmt.Sprintf("%#v", this.Gte)+",\n")
	s = append(s, "In: "+fmt.Sprintf("%#v", this.In)+",\n")
	s = append(s, "NotIn: "+fmt.Sprintf("%#v", this.NotIn)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UInt32Rules) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&schema.UInt32Rules{")
	s = append(s, "Const: "+fmt.Sprintf("%#v", this.Const)+",\n")
	s = append(s, "Lt: "+fmt.Sprintf("%#v", this.Lt)+",\n")
	s = append(s, "Lte: "+fmt.Sprintf("%#v", this.Lte)+",\n")
	s = append(s, "Gt: "+fmt.Sprintf("%#v", this.Gt)+",\n")
	s = append(s, "Gte: "+fmt.Sprintf("%#v", this.Gte)+",\n")
	s = append(s, "In: "+fmt.Sprintf("%#v", this.In)+",\n")
	s = append(s, "NotIn: "+fmt.Sprintf("%#v", this.NotIn)+",\n")
	s = append(s, "Ranges: "+fmt.Sprintf("%#v", this.Ranges)+",\n")
	s = append(s, "NotInRanges: "+fmt.Sprintf("%#v", this.NotInRanges)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UInt64Rules) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&schema.UInt64Rules{")
	s = append(s, "Const: "+fmt.Sprintf("%#v", this.Const)+",\n")
	s = append(s, "Lt: "+fmt.Sprintf("%#v", this.Lt)+",\n")
	s = append(s, "Lte: "+fmt.Sprintf("%#v", this.Lte)+",\n")
	s = append(s, "Gt: "+fmt.Sprintf("%#v", this.Gt)+",\n")
	s = append(s, "Gte: "+fmt.Sprintf("%#v", this.Gte)+",\n")
	s = append(s, "In: "+fmt.Sprintf("%#v", this.In)+",\n")
	s = append(s, "NotIn: "+fmt.Sprintf("%#v", this.NotIn)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SInt32Rules) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&schema.SInt32Rules{")
	s = append(s, "Const: "+fmt.Sprintf("%#v", this.Const)+",\n")
	s = append(s, "Lt: "+fmt.Sprintf("%#v", this.Lt)+",\n")
	s = append(s, "Lte: "+fmt.Sprintf("%#v", this.Lte)+",\n")
	s = append(s, "Gt: "+fmt.Sprintf("%#v", this.Gt)+",\n")
	s = append(s, "Gte: "+fmt.Sprintf("%#v", this.Gte)+",\n")
	s = append(s, "In: "+fmt.Sprintf("%#v", this.In)+",\n")
	s = append(s, "NotIn: "+fmt.Sprintf("%#v", this.NotIn)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SInt64Rules) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&schema.SInt64Rules{")
	s = append(s, "Const: "+fmt.Sprintf("%#v", this.Const)+",\n")
	s = append(s, "Lt: "+fmt.Sprintf("%#v", this.Lt)+",\n")
	s = append(s, "Lte: "+fmt.Sprintf("%#v", this.Lte)+",\n")
	s = append(s, "Gt: "+fmt.Sprintf("%#v", this.Gt)+",\n")
	s = append(s, "Gte: "+fmt.Sprintf("%#v", this.Gte)+",\n")
	s = append(s, "In: "+fmt.Sprintf("%#v", this.In)+",\n")
	s = append(s, "NotIn: "+fmt.Sprintf("%#v", this.NotIn)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Fixed32Rules) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&schema.Fixed32Rules{")
	s = append(s, "Const: "+fmt.Sprintf("%#v", this.Const)+",\n")
	s = append(s, "Lt: "+fmt.Sprintf("%#v", this.Lt)+",\n")
	s = append(s, "Lte: "+fmt.Sprintf("%#v", this.Lte)+",\n")
	s = append(s, "Gt: "+fmt.Sprintf("%#v", this.Gt)+",\n")
	s = append(s, "Gte: "+fmt.Sprintf("%#v", this.Gte)+",\n")
	s = append(s, "In: "+fmt.Sprintf("%#v", this.In)+",\n")
	s = append(s, "NotIn: "+fmt.Sprintf("%#v", this.NotIn)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Fixed64Rules) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&schema.Fixed64Rules{")
	s = append(s, "Const: "+fmt.Sprintf("%#v", this.Const)+",\n")
	s = append(s, "Lt: "+fmt.Sprintf("%#v", this.Lt)+",\n")
	s = append(s, "Lte: "+fmt.Sprintf("%#v", this.Lte)+",\n")
	s = append(s, "Gt: "+fmt.Sprintf("%#v", this.Gt)+",\n")
	s = append(s, "Gte: "+fmt.Sprintf("%#v", this.Gte)+",\n")
	s = append(s, "In: "+fmt.Sprintf("%#v", this.In)+",\n")
	s = append(s, "NotIn: "+fmt.Sprintf("%#v", this.NotIn)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SFixed32Rules) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&schema.SFixed32Rules{")
	s = append(s, "Const: "+fmt.Sprintf("%#v", this.Const)+",\n")
	s = append(s, "Lt: "+fmt.Sprintf("%#v", this.Lt)+",\n")
	s = append(s, "Lte: "+fmt.Sprintf("%#v", this.Lte)+",\n")
	s = append(s, "Gt: "+fmt.Sprintf("%#v", this.Gt)+",\n")
	s = append(s, "Gte: "+fmt.Sprintf("%#v", this.Gte)+",\n")
	s = append(s, "In: "+fmt.Sprintf("%#v", this.In)+",\n")
	s = append(s, "NotIn: "+fmt.Sprintf("%#v", this.NotIn)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SFixed64Rules) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&schema.SFixed64Rules{")
	s = append(s, "Const: "+fmt.Sprintf("%#v", this.Const)+",\n")
	s = append(s, "Lt: "+fmt.Sprintf("%#v", this.Lt)+",\n")
	s = append(s, "Lte: "+fmt.Sprintf("%#v", this.Lte)+",\n")
	s = append(s, "Gt: "+fmt.Sprintf("%#v", this.Gt)+",\n")
	s = append(s, "Gte: "+fmt.Sprintf("%#v", this.Gte)+",\n")
	s = append(s, "In: "+fmt.Sprintf("%#v", this.In)+",\n")
	s = append(s, "NotIn: "+fmt.Sprintf("%#v", this.NotIn)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BoolRules) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&schema.BoolRules{")
	s = append(s, "Const: "+fmt.Sprintf("%#v", this.Const)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StringRules) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 52)
	s = append(s, "&schema.StringRules{")
	s = append(s, "Const: "+fmt.Sprintf("%#v", this.Const)+",\n")
	s = append(s, "Len: "+fmt.Sprintf("%#v", this.Len)+",\n")
	s = append(s, "MinLen: "+fmt.Sprintf("%#v", this.MinLen)+",\n")
	s = append(s, "MaxLen: "+fmt.Sprintf("%#v", this.MaxLen)+",\n")
	s = append(s, "LenBytes: "+fmt.Sprintf("%#v", this.LenBytes)+",\n")
	s = append(s, "MinBytes: "+fmt.Sprintf("%#v", this.MinBytes)+",\n")
	s = append(s, "MaxBytes: "+fmt.Sprintf("%#v", this.MaxBytes)+",\n")
	s = append(s, "Pattern: "+fmt.Sprintf("%#v", this.Pattern)+",\n")
	s = append(s, "Prefix: "+fmt.Sprintf("%#v", this.Prefix)+",\n")
	s = append(s, "Suffix: "+fmt.Sprintf("%#v", this.Suffix)+",\n")
	s = append(s, "Contains: "+fmt.Sprintf("%#v", this.Contains)+",\n")
	s = append(s, "In: "+fmt.Sprintf("%#v", this.In)+",\n")
	s = append(s, "NotIn: "+fmt.Sprintf("%#v", this.NotIn)+",\n")
	s = append(s, "MinIpPrefixLength: "+fmt.Sprintf("%#v", this.MinIpPrefixLength)+",\n")
	s = append(s, "MaxIpPrefixLength: "+fmt.Sprintf("%#v", this.MaxIpPrefixLength)+",\n")
	s = append(s, "MinTimeInterval: "+fmt.Sprintf("%#v", this.MinTimeInterval)+",\n")
	s = append(s, "MaxTimeInterval: "+fmt.Sprintf("%#v", this.MaxTimeInterval)+",\n")
	if this.WellKnown != nil {
		s = append(s, "WellKnown: "+fmt.Sprintf("%#v", this.WellKnown)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StringRules_Email) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.StringRules_Email{` +
		`Email:` + fmt.Sprintf("%#v", this.Email) + `}`}, ", ")
	return s
}
func (this *StringRules_Hostname) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.StringRules_Hostname{` +
		`Hostname:` + fmt.Sprintf("%#v", this.Hostname) + `}`}, ", ")
	return s
}
func (this *StringRules_Ip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.StringRules_Ip{` +
		`Ip:` + fmt.Sprintf("%#v", this.Ip) + `}`}, ", ")
	return s
}
func (this *StringRules_Ipv4) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.StringRules_Ipv4{` +
		`Ipv4:` + fmt.Sprintf("%#v", this.Ipv4) + `}`}, ", ")
	return s
}
func (this *StringRules_Ipv6) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.StringRules_Ipv6{` +
		`Ipv6:` + fmt.Sprintf("%#v", this.Ipv6) + `}`}, ", ")
	return s
}
func (this *StringRules_Uri) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.StringRules_Uri{` +
		`Uri:` + fmt.Sprintf("%#v", this.Uri) + `}`}, ", ")
	return s
}
func (this *StringRules_UriRef) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.StringRules_UriRef{` +
		`UriRef:` + fmt.Sprintf("%#v", this.UriRef) + `}`}, ", ")
	return s
}
func (this *StringRules_IpPrefix) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.StringRules_IpPrefix{` +
		`IpPrefix:` + fmt.Sprintf("%#v", this.IpPrefix) + `}`}, ", ")
	return s
}
func (this *StringRules_PortRange) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.StringRules_PortRange{` +
		`PortRange:` + fmt.Sprintf("%#v", this.PortRange) + `}`}, ", ")
	return s
}
func (this *StringRules_Mac) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.StringRules_Mac{` +
		`Mac:` + fmt.Sprintf("%#v", this.Mac) + `}`}, ", ")
	return s
}
func (this *StringRules_Regex) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.StringRules_Regex{` +
		`Regex:` + fmt.Sprintf("%#v", this.Regex) + `}`}, ", ")
	return s
}
func (this *StringRules_HttpHeaderField) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.StringRules_HttpHeaderField{` +
		`HttpHeaderField:` + fmt.Sprintf("%#v", this.HttpHeaderField) + `}`}, ", ")
	return s
}
func (this *StringRules_K8SLabelValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.StringRules_K8SLabelValue{` +
		`K8SLabelValue:` + fmt.Sprintf("%#v", this.K8SLabelValue) + `}`}, ", ")
	return s
}
func (this *StringRules_NotEmpty) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.StringRules_NotEmpty{` +
		`NotEmpty:` + fmt.Sprintf("%#v", this.NotEmpty) + `}`}, ", ")
	return s
}
func (this *StringRules_Hostport) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.StringRules_Hostport{` +
		`Hostport:` + fmt.Sprintf("%#v", this.Hostport) + `}`}, ", ")
	return s
}
func (this *StringRules_JsonPath) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.StringRules_JsonPath{` +
		`JsonPath:` + fmt.Sprintf("%#v", this.JsonPath) + `}`}, ", ")
	return s
}
func (this *StringRules_Hex) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.StringRules_Hex{` +
		`Hex:` + fmt.Sprintf("%#v", this.Hex) + `}`}, ", ")
	return s
}
func (this *StringRules_Ipv4Prefix) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.StringRules_Ipv4Prefix{` +
		`Ipv4Prefix:` + fmt.Sprintf("%#v", this.Ipv4Prefix) + `}`}, ", ")
	return s
}
func (this *StringRules_Ipv6Prefix) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.StringRules_Ipv6Prefix{` +
		`Ipv6Prefix:` + fmt.Sprintf("%#v", this.Ipv6Prefix) + `}`}, ", ")
	return s
}
func (this *StringRules_VhDomain) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.StringRules_VhDomain{` +
		`VhDomain:` + fmt.Sprintf("%#v", this.VhDomain) + `}`}, ", ")
	return s
}
func (this *StringRules_VesObjectName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.StringRules_VesObjectName{` +
		`VesObjectName:` + fmt.Sprintf("%#v", this.VesObjectName) + `}`}, ", ")
	return s
}
func (this *StringRules_IanaSvcName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.StringRules_IanaSvcName{` +
		`IanaSvcName:` + fmt.Sprintf("%#v", this.IanaSvcName) + `}`}, ", ")
	return s
}
func (this *StringRules_Dns_1123Label) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.StringRules_Dns_1123Label{` +
		`Dns_1123Label:` + fmt.Sprintf("%#v", this.Dns_1123Label) + `}`}, ", ")
	return s
}
func (this *StringRules_UnixFilePath) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.StringRules_UnixFilePath{` +
		`UnixFilePath:` + fmt.Sprintf("%#v", this.UnixFilePath) + `}`}, ", ")
	return s
}
func (this *StringRules_PhoneNumber) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.StringRules_PhoneNumber{` +
		`PhoneNumber:` + fmt.Sprintf("%#v", this.PhoneNumber) + `}`}, ", ")
	return s
}
func (this *StringRules_PortRangeList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.StringRules_PortRangeList{` +
		`PortRangeList:` + fmt.Sprintf("%#v", this.PortRangeList) + `}`}, ", ")
	return s
}
func (this *StringRules_VhDomainNoPort) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.StringRules_VhDomainNoPort{` +
		`VhDomainNoPort:` + fmt.Sprintf("%#v", this.VhDomainNoPort) + `}`}, ", ")
	return s
}
func (this *StringRules_HostnameOrIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.StringRules_HostnameOrIp{` +
		`HostnameOrIp:` + fmt.Sprintf("%#v", this.HostnameOrIp) + `}`}, ", ")
	return s
}
func (this *StringRules_K8SLabelSelector) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.StringRules_K8SLabelSelector{` +
		`K8SLabelSelector:` + fmt.Sprintf("%#v", this.K8SLabelSelector) + `}`}, ", ")
	return s
}
func (this *StringRules_HttpPath) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.StringRules_HttpPath{` +
		`HttpPath:` + fmt.Sprintf("%#v", this.HttpPath) + `}`}, ", ")
	return s
}
func (this *StringRules_TimeInterval) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.StringRules_TimeInterval{` +
		`TimeInterval:` + fmt.Sprintf("%#v", this.TimeInterval) + `}`}, ", ")
	return s
}
func (this *BytesRules) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 17)
	s = append(s, "&schema.BytesRules{")
	s = append(s, "Const: "+fmt.Sprintf("%#v", this.Const)+",\n")
	s = append(s, "Len: "+fmt.Sprintf("%#v", this.Len)+",\n")
	s = append(s, "MinLen: "+fmt.Sprintf("%#v", this.MinLen)+",\n")
	s = append(s, "MaxLen: "+fmt.Sprintf("%#v", this.MaxLen)+",\n")
	s = append(s, "Pattern: "+fmt.Sprintf("%#v", this.Pattern)+",\n")
	s = append(s, "Prefix: "+fmt.Sprintf("%#v", this.Prefix)+",\n")
	s = append(s, "Suffix: "+fmt.Sprintf("%#v", this.Suffix)+",\n")
	s = append(s, "Contains: "+fmt.Sprintf("%#v", this.Contains)+",\n")
	s = append(s, "In: "+fmt.Sprintf("%#v", this.In)+",\n")
	s = append(s, "NotIn: "+fmt.Sprintf("%#v", this.NotIn)+",\n")
	if this.WellKnown != nil {
		s = append(s, "WellKnown: "+fmt.Sprintf("%#v", this.WellKnown)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BytesRules_Ip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.BytesRules_Ip{` +
		`Ip:` + fmt.Sprintf("%#v", this.Ip) + `}`}, ", ")
	return s
}
func (this *BytesRules_Ipv4) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.BytesRules_Ipv4{` +
		`Ipv4:` + fmt.Sprintf("%#v", this.Ipv4) + `}`}, ", ")
	return s
}
func (this *BytesRules_Ipv6) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&schema.BytesRules_Ipv6{` +
		`Ipv6:` + fmt.Sprintf("%#v", this.Ipv6) + `}`}, ", ")
	return s
}
func (this *EnumRules) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&schema.EnumRules{")
	s = append(s, "Const: "+fmt.Sprintf("%#v", this.Const)+",\n")
	s = append(s, "DefinedOnly: "+fmt.Sprintf("%#v", this.DefinedOnly)+",\n")
	s = append(s, "In: "+fmt.Sprintf("%#v", this.In)+",\n")
	s = append(s, "NotIn: "+fmt.Sprintf("%#v", this.NotIn)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MessageRules) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&schema.MessageRules{")
	s = append(s, "Skip: "+fmt.Sprintf("%#v", this.Skip)+",\n")
	s = append(s, "Required: "+fmt.Sprintf("%#v", this.Required)+",\n")
	s = append(s, "RequiredOneof: "+fmt.Sprintf("%#v", this.RequiredOneof)+",\n")
	s = append(s, "RequiredOneNonzeroField: "+fmt.Sprintf("%#v", this.RequiredOneNonzeroField)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RepeatedRules) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&schema.RepeatedRules{")
	s = append(s, "MinItems: "+fmt.Sprintf("%#v", this.MinItems)+",\n")
	s = append(s, "MaxItems: "+fmt.Sprintf("%#v", this.MaxItems)+",\n")
	s = append(s, "Unique: "+fmt.Sprintf("%#v", this.Unique)+",\n")
	if this.Items != nil {
		s = append(s, "Items: "+fmt.Sprintf("%#v", this.Items)+",\n")
	}
	s = append(s, "NumItems: "+fmt.Sprintf("%#v", this.NumItems)+",\n")
	s = append(s, "UniqueMetadataName: "+fmt.Sprintf("%#v", this.UniqueMetadataName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MapRules) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&schema.MapRules{")
	s = append(s, "MinPairs: "+fmt.Sprintf("%#v", this.MinPairs)+",\n")
	s = append(s, "MaxPairs: "+fmt.Sprintf("%#v", this.MaxPairs)+",\n")
	s = append(s, "NoSparse: "+fmt.Sprintf("%#v", this.NoSparse)+",\n")
	if this.Keys != nil {
		s = append(s, "Keys: "+fmt.Sprintf("%#v", this.Keys)+",\n")
	}
	if this.Values != nil {
		s = append(s, "Values: "+fmt.Sprintf("%#v", this.Values)+",\n")
	}
	s = append(s, "UniqueValues: "+fmt.Sprintf("%#v", this.UniqueValues)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AnyRules) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&schema.AnyRules{")
	s = append(s, "Required: "+fmt.Sprintf("%#v", this.Required)+",\n")
	s = append(s, "In: "+fmt.Sprintf("%#v", this.In)+",\n")
	s = append(s, "NotIn: "+fmt.Sprintf("%#v", this.NotIn)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DurationRules) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&schema.DurationRules{")
	s = append(s, "Required: "+fmt.Sprintf("%#v", this.Required)+",\n")
	if this.Const != nil {
		s = append(s, "Const: "+fmt.Sprintf("%#v", this.Const)+",\n")
	}
	if this.Lt != nil {
		s = append(s, "Lt: "+fmt.Sprintf("%#v", this.Lt)+",\n")
	}
	if this.Lte != nil {
		s = append(s, "Lte: "+fmt.Sprintf("%#v", this.Lte)+",\n")
	}
	if this.Gt != nil {
		s = append(s, "Gt: "+fmt.Sprintf("%#v", this.Gt)+",\n")
	}
	if this.Gte != nil {
		s = append(s, "Gte: "+fmt.Sprintf("%#v", this.Gte)+",\n")
	}
	if this.In != nil {
		s = append(s, "In: "+fmt.Sprintf("%#v", this.In)+",\n")
	}
	if this.NotIn != nil {
		s = append(s, "NotIn: "+fmt.Sprintf("%#v", this.NotIn)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TimestampRules) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&schema.TimestampRules{")
	s = append(s, "Required: "+fmt.Sprintf("%#v", this.Required)+",\n")
	if this.Const != nil {
		s = append(s, "Const: "+fmt.Sprintf("%#v", this.Const)+",\n")
	}
	if this.Lt != nil {
		s = append(s, "Lt: "+fmt.Sprintf("%#v", this.Lt)+",\n")
	}
	if this.Lte != nil {
		s = append(s, "Lte: "+fmt.Sprintf("%#v", this.Lte)+",\n")
	}
	if this.Gt != nil {
		s = append(s, "Gt: "+fmt.Sprintf("%#v", this.Gt)+",\n")
	}
	if this.Gte != nil {
		s = append(s, "Gte: "+fmt.Sprintf("%#v", this.Gte)+",\n")
	}
	s = append(s, "LtNow: "+fmt.Sprintf("%#v", this.LtNow)+",\n")
	s = append(s, "GtNow: "+fmt.Sprintf("%#v", this.GtNow)+",\n")
	if this.Within != nil {
		s = append(s, "Within: "+fmt.Sprintf("%#v", this.Within)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringValidate(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *FieldRules) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FieldRules) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldRules) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != nil {
		{
			size := m.Type.Size()
			i -= size
			if _, err := m.Type.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *FieldRules_Float) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldRules_Float) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Float != nil {
		{
			size, err := m.Float.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValidate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *FieldRules_Double) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldRules_Double) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Double != nil {
		{
			size, err := m.Double.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValidate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *FieldRules_Int32) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldRules_Int32) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Int32 != nil {
		{
			size, err := m.Int32.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValidate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *FieldRules_Int64) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldRules_Int64) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Int64 != nil {
		{
			size, err := m.Int64.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValidate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *FieldRules_Uint32) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldRules_Uint32) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Uint32 != nil {
		{
			size, err := m.Uint32.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValidate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *FieldRules_Uint64) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldRules_Uint64) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Uint64 != nil {
		{
			size, err := m.Uint64.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValidate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *FieldRules_Sint32) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldRules_Sint32) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Sint32 != nil {
		{
			size, err := m.Sint32.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValidate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *FieldRules_Sint64) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldRules_Sint64) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Sint64 != nil {
		{
			size, err := m.Sint64.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValidate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *FieldRules_Fixed32) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldRules_Fixed32) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Fixed32 != nil {
		{
			size, err := m.Fixed32.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValidate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *FieldRules_Fixed64) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldRules_Fixed64) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Fixed64 != nil {
		{
			size, err := m.Fixed64.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValidate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *FieldRules_Sfixed32) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldRules_Sfixed32) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Sfixed32 != nil {
		{
			size, err := m.Sfixed32.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValidate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *FieldRules_Sfixed64) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldRules_Sfixed64) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Sfixed64 != nil {
		{
			size, err := m.Sfixed64.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValidate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *FieldRules_Bool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldRules_Bool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Bool != nil {
		{
			size, err := m.Bool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValidate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *FieldRules_String_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldRules_String_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.String_ != nil {
		{
			size, err := m.String_.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValidate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *FieldRules_Bytes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldRules_Bytes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Bytes != nil {
		{
			size, err := m.Bytes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValidate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *FieldRules_Enum) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldRules_Enum) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Enum != nil {
		{
			size, err := m.Enum.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValidate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *FieldRules_Message) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldRules_Message) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Message != nil {
		{
			size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValidate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *FieldRules_Repeated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldRules_Repeated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Repeated != nil {
		{
			size, err := m.Repeated.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValidate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *FieldRules_Map) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldRules_Map) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Map != nil {
		{
			size, err := m.Map.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValidate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *FieldRules_Any) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldRules_Any) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Any != nil {
		{
			size, err := m.Any.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValidate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *FieldRules_Duration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldRules_Duration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Duration != nil {
		{
			size, err := m.Duration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValidate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *FieldRules_Timestamp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldRules_Timestamp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Timestamp != nil {
		{
			size, err := m.Timestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValidate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *FloatRules) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FloatRules) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FloatRules) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NotIn) > 0 {
		for iNdEx := len(m.NotIn) - 1; iNdEx >= 0; iNdEx-- {
			f23 := math.Float32bits(float32(m.NotIn[iNdEx]))
			i -= 4
			encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(f23))
		}
		i = encodeVarintValidate(dAtA, i, uint64(len(m.NotIn)*4))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.In) > 0 {
		for iNdEx := len(m.In) - 1; iNdEx >= 0; iNdEx-- {
			f24 := math.Float32bits(float32(m.In[iNdEx]))
			i -= 4
			encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(f24))
		}
		i = encodeVarintValidate(dAtA, i, uint64(len(m.In)*4))
		i--
		dAtA[i] = 0x32
	}
	if m.Gte != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Gte))))
		i--
		dAtA[i] = 0x2d
	}
	if m.Gt != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Gt))))
		i--
		dAtA[i] = 0x25
	}
	if m.Lte != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Lte))))
		i--
		dAtA[i] = 0x1d
	}
	if m.Lt != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Lt))))
		i--
		dAtA[i] = 0x15
	}
	if m.Const != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Const))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *DoubleRules) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DoubleRules) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DoubleRules) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NotIn) > 0 {
		for iNdEx := len(m.NotIn) - 1; iNdEx >= 0; iNdEx-- {
			f25 := math.Float64bits(float64(m.NotIn[iNdEx]))
			i -= 8
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(f25))
		}
		i = encodeVarintValidate(dAtA, i, uint64(len(m.NotIn)*8))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.In) > 0 {
		for iNdEx := len(m.In) - 1; iNdEx >= 0; iNdEx-- {
			f26 := math.Float64bits(float64(m.In[iNdEx]))
			i -= 8
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(f26))
		}
		i = encodeVarintValidate(dAtA, i, uint64(len(m.In)*8))
		i--
		dAtA[i] = 0x32
	}
	if m.Gte != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Gte))))
		i--
		dAtA[i] = 0x29
	}
	if m.Gt != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Gt))))
		i--
		dAtA[i] = 0x21
	}
	if m.Lte != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Lte))))
		i--
		dAtA[i] = 0x19
	}
	if m.Lt != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Lt))))
		i--
		dAtA[i] = 0x11
	}
	if m.Const != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Const))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *Int32Rules) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Int32Rules) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Int32Rules) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NotIn) > 0 {
		dAtA28 := make([]byte, len(m.NotIn)*10)
		var j27 int
		for _, num1 := range m.NotIn {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA28[j27] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j27++
			}
			dAtA28[j27] = uint8(num)
			j27++
		}
		i -= j27
		copy(dAtA[i:], dAtA28[:j27])
		i = encodeVarintValidate(dAtA, i, uint64(j27))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.In) > 0 {
		dAtA30 := make([]byte, len(m.In)*10)
		var j29 int
		for _, num1 := range m.In {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA30[j29] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j29++
			}
			dAtA30[j29] = uint8(num)
			j29++
		}
		i -= j29
		copy(dAtA[i:], dAtA30[:j29])
		i = encodeVarintValidate(dAtA, i, uint64(j29))
		i--
		dAtA[i] = 0x32
	}
	if m.Gte != 0 {
		i = encodeVarintValidate(dAtA, i, uint64(m.Gte))
		i--
		dAtA[i] = 0x28
	}
	if m.Gt != 0 {
		i = encodeVarintValidate(dAtA, i, uint64(m.Gt))
		i--
		dAtA[i] = 0x20
	}
	if m.Lte != 0 {
		i = encodeVarintValidate(dAtA, i, uint64(m.Lte))
		i--
		dAtA[i] = 0x18
	}
	if m.Lt != 0 {
		i = encodeVarintValidate(dAtA, i, uint64(m.Lt))
		i--
		dAtA[i] = 0x10
	}
	if m.Const != 0 {
		i = encodeVarintValidate(dAtA, i, uint64(m.Const))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Int64Rules) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Int64Rules) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Int64Rules) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NotIn) > 0 {
		dAtA32 := make([]byte, len(m.NotIn)*10)
		var j31 int
		for _, num1 := range m.NotIn {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA32[j31] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j31++
			}
			dAtA32[j31] = uint8(num)
			j31++
		}
		i -= j31
		copy(dAtA[i:], dAtA32[:j31])
		i = encodeVarintValidate(dAtA, i, uint64(j31))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.In) > 0 {
		dAtA34 := make([]byte, len(m.In)*10)
		var j33 int
		for _, num1 := range m.In {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA34[j33] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j33++
			}
			dAtA34[j33] = uint8(num)
			j33++
		}
		i -= j33
		copy(dAtA[i:], dAtA34[:j33])
		i = encodeVarintValidate(dAtA, i, uint64(j33))
		i--
		dAtA[i] = 0x32
	}
	if m.Gte != 0 {
		i = encodeVarintValidate(dAtA, i, uint64(m.Gte))
		i--
		dAtA[i] = 0x28
	}
	if m.Gt != 0 {
		i = encodeVarintValidate(dAtA, i, uint64(m.Gt))
		i--
		dAtA[i] = 0x20
	}
	if m.Lte != 0 {
		i = encodeVarintValidate(dAtA, i, uint64(m.Lte))
		i--
		dAtA[i] = 0x18
	}
	if m.Lt != 0 {
		i = encodeVarintValidate(dAtA, i, uint64(m.Lt))
		i--
		dAtA[i] = 0x10
	}
	if m.Const != 0 {
		i = encodeVarintValidate(dAtA, i, uint64(m.Const))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UInt32Rules) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UInt32Rules) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UInt32Rules) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NotInRanges) > 0 {
		i -= len(m.NotInRanges)
		copy(dAtA[i:], m.NotInRanges)
		i = encodeVarintValidate(dAtA, i, uint64(len(m.NotInRanges)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Ranges) > 0 {
		i -= len(m.Ranges)
		copy(dAtA[i:], m.Ranges)
		i = encodeVarintValidate(dAtA, i, uint64(len(m.Ranges)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.NotIn) > 0 {
		dAtA36 := make([]byte, len(m.NotIn)*10)
		var j35 int
		for _, num := range m.NotIn {
			for num >= 1<<7 {
				dAtA36[j35] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j35++
			}
			dAtA36[j35] = uint8(num)
			j35++
		}
		i -= j35
		copy(dAtA[i:], dAtA36[:j35])
		i = encodeVarintValidate(dAtA, i, uint64(j35))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.In) > 0 {
		dAtA38 := make([]byte, len(m.In)*10)
		var j37 int
		for _, num := range m.In {
			for num >= 1<<7 {
				dAtA38[j37] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j37++
			}
			dAtA38[j37] = uint8(num)
			j37++
		}
		i -= j37
		copy(dAtA[i:], dAtA38[:j37])
		i = encodeVarintValidate(dAtA, i, uint64(j37))
		i--
		dAtA[i] = 0x32
	}
	if m.Gte != 0 {
		i = encodeVarintValidate(dAtA, i, uint64(m.Gte))
		i--
		dAtA[i] = 0x28
	}
	if m.Gt != 0 {
		i = encodeVarintValidate(dAtA, i, uint64(m.Gt))
		i--
		dAtA[i] = 0x20
	}
	if m.Lte != 0 {
		i = encodeVarintValidate(dAtA, i, uint64(m.Lte))
		i--
		dAtA[i] = 0x18
	}
	if m.Lt != 0 {
		i = encodeVarintValidate(dAtA, i, uint64(m.Lt))
		i--
		dAtA[i] = 0x10
	}
	if m.Const != 0 {
		i = encodeVarintValidate(dAtA, i, uint64(m.Const))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UInt64Rules) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UInt64Rules) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UInt64Rules) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NotIn) > 0 {
		dAtA40 := make([]byte, len(m.NotIn)*10)
		var j39 int
		for _, num := range m.NotIn {
			for num >= 1<<7 {
				dAtA40[j39] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j39++
			}
			dAtA40[j39] = uint8(num)
			j39++
		}
		i -= j39
		copy(dAtA[i:], dAtA40[:j39])
		i = encodeVarintValidate(dAtA, i, uint64(j39))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.In) > 0 {
		dAtA42 := make([]byte, len(m.In)*10)
		var j41 int
		for _, num := range m.In {
			for num >= 1<<7 {
				dAtA42[j41] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j41++
			}
			dAtA42[j41] = uint8(num)
			j41++
		}
		i -= j41
		copy(dAtA[i:], dAtA42[:j41])
		i = encodeVarintValidate(dAtA, i, uint64(j41))
		i--
		dAtA[i] = 0x32
	}
	if m.Gte != 0 {
		i = encodeVarintValidate(dAtA, i, uint64(m.Gte))
		i--
		dAtA[i] = 0x28
	}
	if m.Gt != 0 {
		i = encodeVarintValidate(dAtA, i, uint64(m.Gt))
		i--
		dAtA[i] = 0x20
	}
	if m.Lte != 0 {
		i = encodeVarintValidate(dAtA, i, uint64(m.Lte))
		i--
		dAtA[i] = 0x18
	}
	if m.Lt != 0 {
		i = encodeVarintValidate(dAtA, i, uint64(m.Lt))
		i--
		dAtA[i] = 0x10
	}
	if m.Const != 0 {
		i = encodeVarintValidate(dAtA, i, uint64(m.Const))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SInt32Rules) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SInt32Rules) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SInt32Rules) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NotIn) > 0 {
		dAtA43 := make([]byte, len(m.NotIn)*5)
		var j44 int
		for _, num := range m.NotIn {
			x45 := (uint32(num) << 1) ^ uint32((num >> 31))
			for x45 >= 1<<7 {
				dAtA43[j44] = uint8(uint64(x45)&0x7f | 0x80)
				j44++
				x45 >>= 7
			}
			dAtA43[j44] = uint8(x45)
			j44++
		}
		i -= j44
		copy(dAtA[i:], dAtA43[:j44])
		i = encodeVarintValidate(dAtA, i, uint64(j44))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.In) > 0 {
		dAtA46 := make([]byte, len(m.In)*5)
		var j47 int
		for _, num := range m.In {
			x48 := (uint32(num) << 1) ^ uint32((num >> 31))
			for x48 >= 1<<7 {
				dAtA46[j47] = uint8(uint64(x48)&0x7f | 0x80)
				j47++
				x48 >>= 7
			}
			dAtA46[j47] = uint8(x48)
			j47++
		}
		i -= j47
		copy(dAtA[i:], dAtA46[:j47])
		i = encodeVarintValidate(dAtA, i, uint64(j47))
		i--
		dAtA[i] = 0x32
	}
	if m.Gte != 0 {
		i = encodeVarintValidate(dAtA, i, uint64((uint32(m.Gte)<<1)^uint32((m.Gte>>31))))
		i--
		dAtA[i] = 0x28
	}
	if m.Gt != 0 {
		i = encodeVarintValidate(dAtA, i, uint64((uint32(m.Gt)<<1)^uint32((m.Gt>>31))))
		i--
		dAtA[i] = 0x20
	}
	if m.Lte != 0 {
		i = encodeVarintValidate(dAtA, i, uint64((uint32(m.Lte)<<1)^uint32((m.Lte>>31))))
		i--
		dAtA[i] = 0x18
	}
	if m.Lt != 0 {
		i = encodeVarintValidate(dAtA, i, uint64((uint32(m.Lt)<<1)^uint32((m.Lt>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.Const != 0 {
		i = encodeVarintValidate(dAtA, i, uint64((uint32(m.Const)<<1)^uint32((m.Const>>31))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SInt64Rules) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SInt64Rules) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SInt64Rules) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NotIn) > 0 {
		var j49 int
		dAtA51 := make([]byte, len(m.NotIn)*10)
		for _, num := range m.NotIn {
			x50 := (uint64(num) << 1) ^ uint64((num >> 63))
			for x50 >= 1<<7 {
				dAtA51[j49] = uint8(uint64(x50)&0x7f | 0x80)
				j49++
				x50 >>= 7
			}
			dAtA51[j49] = uint8(x50)
			j49++
		}
		i -= j49
		copy(dAtA[i:], dAtA51[:j49])
		i = encodeVarintValidate(dAtA, i, uint64(j49))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.In) > 0 {
		var j52 int
		dAtA54 := make([]byte, len(m.In)*10)
		for _, num := range m.In {
			x53 := (uint64(num) << 1) ^ uint64((num >> 63))
			for x53 >= 1<<7 {
				dAtA54[j52] = uint8(uint64(x53)&0x7f | 0x80)
				j52++
				x53 >>= 7
			}
			dAtA54[j52] = uint8(x53)
			j52++
		}
		i -= j52
		copy(dAtA[i:], dAtA54[:j52])
		i = encodeVarintValidate(dAtA, i, uint64(j52))
		i--
		dAtA[i] = 0x32
	}
	if m.Gte != 0 {
		i = encodeVarintValidate(dAtA, i, uint64((uint64(m.Gte)<<1)^uint64((m.Gte>>63))))
		i--
		dAtA[i] = 0x28
	}
	if m.Gt != 0 {
		i = encodeVarintValidate(dAtA, i, uint64((uint64(m.Gt)<<1)^uint64((m.Gt>>63))))
		i--
		dAtA[i] = 0x20
	}
	if m.Lte != 0 {
		i = encodeVarintValidate(dAtA, i, uint64((uint64(m.Lte)<<1)^uint64((m.Lte>>63))))
		i--
		dAtA[i] = 0x18
	}
	if m.Lt != 0 {
		i = encodeVarintValidate(dAtA, i, uint64((uint64(m.Lt)<<1)^uint64((m.Lt>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.Const != 0 {
		i = encodeVarintValidate(dAtA, i, uint64((uint64(m.Const)<<1)^uint64((m.Const>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Fixed32Rules) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Fixed32Rules) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Fixed32Rules) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NotIn) > 0 {
		for iNdEx := len(m.NotIn) - 1; iNdEx >= 0; iNdEx-- {
			i -= 4
			encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.NotIn[iNdEx]))
		}
		i = encodeVarintValidate(dAtA, i, uint64(len(m.NotIn)*4))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.In) > 0 {
		for iNdEx := len(m.In) - 1; iNdEx >= 0; iNdEx-- {
			i -= 4
			encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.In[iNdEx]))
		}
		i = encodeVarintValidate(dAtA, i, uint64(len(m.In)*4))
		i--
		dAtA[i] = 0x32
	}
	if m.Gte != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Gte))
		i--
		dAtA[i] = 0x2d
	}
	if m.Gt != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Gt))
		i--
		dAtA[i] = 0x25
	}
	if m.Lte != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Lte))
		i--
		dAtA[i] = 0x1d
	}
	if m.Lt != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Lt))
		i--
		dAtA[i] = 0x15
	}
	if m.Const != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Const))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *Fixed64Rules) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Fixed64Rules) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Fixed64Rules) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NotIn) > 0 {
		for iNdEx := len(m.NotIn) - 1; iNdEx >= 0; iNdEx-- {
			i -= 8
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.NotIn[iNdEx]))
		}
		i = encodeVarintValidate(dAtA, i, uint64(len(m.NotIn)*8))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.In) > 0 {
		for iNdEx := len(m.In) - 1; iNdEx >= 0; iNdEx-- {
			i -= 8
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.In[iNdEx]))
		}
		i = encodeVarintValidate(dAtA, i, uint64(len(m.In)*8))
		i--
		dAtA[i] = 0x32
	}
	if m.Gte != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Gte))
		i--
		dAtA[i] = 0x29
	}
	if m.Gt != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Gt))
		i--
		dAtA[i] = 0x21
	}
	if m.Lte != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Lte))
		i--
		dAtA[i] = 0x19
	}
	if m.Lt != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Lt))
		i--
		dAtA[i] = 0x11
	}
	if m.Const != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Const))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *SFixed32Rules) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SFixed32Rules) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SFixed32Rules) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NotIn) > 0 {
		for iNdEx := len(m.NotIn) - 1; iNdEx >= 0; iNdEx-- {
			i -= 4
			encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.NotIn[iNdEx]))
		}
		i = encodeVarintValidate(dAtA, i, uint64(len(m.NotIn)*4))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.In) > 0 {
		for iNdEx := len(m.In) - 1; iNdEx >= 0; iNdEx-- {
			i -= 4
			encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.In[iNdEx]))
		}
		i = encodeVarintValidate(dAtA, i, uint64(len(m.In)*4))
		i--
		dAtA[i] = 0x32
	}
	if m.Gte != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Gte))
		i--
		dAtA[i] = 0x2d
	}
	if m.Gt != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Gt))
		i--
		dAtA[i] = 0x25
	}
	if m.Lte != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Lte))
		i--
		dAtA[i] = 0x1d
	}
	if m.Lt != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Lt))
		i--
		dAtA[i] = 0x15
	}
	if m.Const != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Const))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *SFixed64Rules) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SFixed64Rules) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SFixed64Rules) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NotIn) > 0 {
		for iNdEx := len(m.NotIn) - 1; iNdEx >= 0; iNdEx-- {
			i -= 8
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.NotIn[iNdEx]))
		}
		i = encodeVarintValidate(dAtA, i, uint64(len(m.NotIn)*8))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.In) > 0 {
		for iNdEx := len(m.In) - 1; iNdEx >= 0; iNdEx-- {
			i -= 8
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.In[iNdEx]))
		}
		i = encodeVarintValidate(dAtA, i, uint64(len(m.In)*8))
		i--
		dAtA[i] = 0x32
	}
	if m.Gte != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Gte))
		i--
		dAtA[i] = 0x29
	}
	if m.Gt != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Gt))
		i--
		dAtA[i] = 0x21
	}
	if m.Lte != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Lte))
		i--
		dAtA[i] = 0x19
	}
	if m.Lt != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Lt))
		i--
		dAtA[i] = 0x11
	}
	if m.Const != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Const))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *BoolRules) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BoolRules) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BoolRules) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Const {
		i--
		if m.Const {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StringRules) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StringRules) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StringRules) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MaxTimeInterval) > 0 {
		i -= len(m.MaxTimeInterval)
		copy(dAtA[i:], m.MaxTimeInterval)
		i = encodeVarintValidate(dAtA, i, uint64(len(m.MaxTimeInterval)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xea
	}
	if len(m.MinTimeInterval) > 0 {
		i -= len(m.MinTimeInterval)
		copy(dAtA[i:], m.MinTimeInterval)
		i = encodeVarintValidate(dAtA, i, uint64(len(m.MinTimeInterval)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe2
	}
	if m.WellKnown != nil {
		{
			size := m.WellKnown.Size()
			i -= size
			if _, err := m.WellKnown.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.MaxIpPrefixLength != 0 {
		i = encodeVarintValidate(dAtA, i, uint64(m.MaxIpPrefixLength))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x98
	}
	if m.MinIpPrefixLength != 0 {
		i = encodeVarintValidate(dAtA, i, uint64(m.MinIpPrefixLength))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x90
	}
	if m.LenBytes != 0 {
		i = encodeVarintValidate(dAtA, i, uint64(m.LenBytes))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.Len != 0 {
		i = encodeVarintValidate(dAtA, i, uint64(m.Len))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if len(m.NotIn) > 0 {
		for iNdEx := len(m.NotIn) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.NotIn[iNdEx])
			copy(dAtA[i:], m.NotIn[iNdEx])
			i = encodeVarintValidate(dAtA, i, uint64(len(m.NotIn[iNdEx])))
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.In) > 0 {
		for iNdEx := len(m.In) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.In[iNdEx])
			copy(dAtA[i:], m.In[iNdEx])
			i = encodeVarintValidate(dAtA, i, uint64(len(m.In[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.Contains) > 0 {
		i -= len(m.Contains)
		copy(dAtA[i:], m.Contains)
		i = encodeVarintValidate(dAtA, i, uint64(len(m.Contains)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Suffix) > 0 {
		i -= len(m.Suffix)
		copy(dAtA[i:], m.Suffix)
		i = encodeVarintValidate(dAtA, i, uint64(len(m.Suffix)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Prefix) > 0 {
		i -= len(m.Prefix)
		copy(dAtA[i:], m.Prefix)
		i = encodeVarintValidate(dAtA, i, uint64(len(m.Prefix)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Pattern) > 0 {
		i -= len(m.Pattern)
		copy(dAtA[i:], m.Pattern)
		i = encodeVarintValidate(dAtA, i, uint64(len(m.Pattern)))
		i--
		dAtA[i] = 0x32
	}
	if m.MaxBytes != 0 {
		i = encodeVarintValidate(dAtA, i, uint64(m.MaxBytes))
		i--
		dAtA[i] = 0x28
	}
	if m.MinBytes != 0 {
		i = encodeVarintValidate(dAtA, i, uint64(m.MinBytes))
		i--
		dAtA[i] = 0x20
	}
	if m.MaxLen != 0 {
		i = encodeVarintValidate(dAtA, i, uint64(m.MaxLen))
		i--
		dAtA[i] = 0x18
	}
	if m.MinLen != 0 {
		i = encodeVarintValidate(dAtA, i, uint64(m.MinLen))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Const) > 0 {
		i -= len(m.Const)
		copy(dAtA[i:], m.Const)
		i = encodeVarintValidate(dAtA, i, uint64(len(m.Const)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StringRules_Email) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StringRules_Email) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Email {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x60
	return len(dAtA) - i, nil
}
func (m *StringRules_Hostname) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StringRules_Hostname) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Hostname {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x68
	return len(dAtA) - i, nil
}
func (m *StringRules_Ip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StringRules_Ip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Ip {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x70
	return len(dAtA) - i, nil
}
func (m *StringRules_Ipv4) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StringRules_Ipv4) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Ipv4 {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x78
	return len(dAtA) - i, nil
}
func (m *StringRules_Ipv6) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StringRules_Ipv6) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Ipv6 {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x80
	return len(dAtA) - i, nil
}
func (m *StringRules_Uri) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StringRules_Uri) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Uri {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x88
	return len(dAtA) - i, nil
}
func (m *StringRules_UriRef) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StringRules_UriRef) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.UriRef {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x90
	return len(dAtA) - i, nil
}
func (m *StringRules_IpPrefix) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StringRules_IpPrefix) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.IpPrefix {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xa8
	return len(dAtA) - i, nil
}
func (m *StringRules_PortRange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StringRules_PortRange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.PortRange {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xb0
	return len(dAtA) - i, nil
}
func (m *StringRules_Mac) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StringRules_Mac) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Mac {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xb8
	return len(dAtA) - i, nil
}
func (m *StringRules_Regex) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StringRules_Regex) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Regex {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xc0
	return len(dAtA) - i, nil
}
func (m *StringRules_HttpHeaderField) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StringRules_HttpHeaderField) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.HttpHeaderField {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xc8
	return len(dAtA) - i, nil
}
func (m *StringRules_K8SLabelValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StringRules_K8SLabelValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.K8SLabelValue {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xd0
	return len(dAtA) - i, nil
}
func (m *StringRules_NotEmpty) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StringRules_NotEmpty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.NotEmpty {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xd8
	return len(dAtA) - i, nil
}
func (m *StringRules_Hostport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StringRules_Hostport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Hostport {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xe0
	return len(dAtA) - i, nil
}
func (m *StringRules_JsonPath) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StringRules_JsonPath) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.JsonPath {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xe8
	return len(dAtA) - i, nil
}
func (m *StringRules_Hex) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StringRules_Hex) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Hex {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xf0
	return len(dAtA) - i, nil
}
func (m *StringRules_Ipv4Prefix) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StringRules_Ipv4Prefix) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Ipv4Prefix {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xf8
	return len(dAtA) - i, nil
}
func (m *StringRules_Ipv6Prefix) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StringRules_Ipv6Prefix) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Ipv6Prefix {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0x80
	return len(dAtA) - i, nil
}
func (m *StringRules_VhDomain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StringRules_VhDomain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.VhDomain {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0x88
	return len(dAtA) - i, nil
}
func (m *StringRules_VesObjectName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StringRules_VesObjectName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.VesObjectName {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xa0
	return len(dAtA) - i, nil
}
func (m *StringRules_IanaSvcName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StringRules_IanaSvcName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.IanaSvcName {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xa8
	return len(dAtA) - i, nil
}
func (m *StringRules_Dns_1123Label) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StringRules_Dns_1123Label) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Dns_1123Label {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xb0
	return len(dAtA) - i, nil
}
func (m *StringRules_UnixFilePath) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StringRules_UnixFilePath) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.UnixFilePath {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xb8
	return len(dAtA) - i, nil
}
func (m *StringRules_PhoneNumber) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StringRules_PhoneNumber) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.PhoneNumber {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xc0
	return len(dAtA) - i, nil
}
func (m *StringRules_PortRangeList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StringRules_PortRangeList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.PortRangeList {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xc8
	return len(dAtA) - i, nil
}
func (m *StringRules_VhDomainNoPort) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StringRules_VhDomainNoPort) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.VhDomainNoPort {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xd0
	return len(dAtA) - i, nil
}
func (m *StringRules_HostnameOrIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StringRules_HostnameOrIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.HostnameOrIp {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xd8
	return len(dAtA) - i, nil
}
func (m *StringRules_K8SLabelSelector) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StringRules_K8SLabelSelector) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.K8SLabelSelector {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xe0
	return len(dAtA) - i, nil
}
func (m *StringRules_HttpPath) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StringRules_HttpPath) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.HttpPath {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xe8
	return len(dAtA) - i, nil
}
func (m *StringRules_TimeInterval) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StringRules_TimeInterval) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.TimeInterval {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xf0
	return len(dAtA) - i, nil
}
func (m *BytesRules) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BytesRules) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BytesRules) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Len != 0 {
		i = encodeVarintValidate(dAtA, i, uint64(m.Len))
		i--
		dAtA[i] = 0x68
	}
	if m.WellKnown != nil {
		{
			size := m.WellKnown.Size()
			i -= size
			if _, err := m.WellKnown.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.NotIn) > 0 {
		for iNdEx := len(m.NotIn) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.NotIn[iNdEx])
			copy(dAtA[i:], m.NotIn[iNdEx])
			i = encodeVarintValidate(dAtA, i, uint64(len(m.NotIn[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.In) > 0 {
		for iNdEx := len(m.In) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.In[iNdEx])
			copy(dAtA[i:], m.In[iNdEx])
			i = encodeVarintValidate(dAtA, i, uint64(len(m.In[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Contains) > 0 {
		i -= len(m.Contains)
		copy(dAtA[i:], m.Contains)
		i = encodeVarintValidate(dAtA, i, uint64(len(m.Contains)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Suffix) > 0 {
		i -= len(m.Suffix)
		copy(dAtA[i:], m.Suffix)
		i = encodeVarintValidate(dAtA, i, uint64(len(m.Suffix)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Prefix) > 0 {
		i -= len(m.Prefix)
		copy(dAtA[i:], m.Prefix)
		i = encodeVarintValidate(dAtA, i, uint64(len(m.Prefix)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Pattern) > 0 {
		i -= len(m.Pattern)
		copy(dAtA[i:], m.Pattern)
		i = encodeVarintValidate(dAtA, i, uint64(len(m.Pattern)))
		i--
		dAtA[i] = 0x22
	}
	if m.MaxLen != 0 {
		i = encodeVarintValidate(dAtA, i, uint64(m.MaxLen))
		i--
		dAtA[i] = 0x18
	}
	if m.MinLen != 0 {
		i = encodeVarintValidate(dAtA, i, uint64(m.MinLen))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Const) > 0 {
		i -= len(m.Const)
		copy(dAtA[i:], m.Const)
		i = encodeVarintValidate(dAtA, i, uint64(len(m.Const)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BytesRules_Ip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BytesRules_Ip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Ip {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x50
	return len(dAtA) - i, nil
}
func (m *BytesRules_Ipv4) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BytesRules_Ipv4) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Ipv4 {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x58
	return len(dAtA) - i, nil
}
func (m *BytesRules_Ipv6) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BytesRules_Ipv6) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Ipv6 {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x60
	return len(dAtA) - i, nil
}
func (m *EnumRules) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnumRules) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnumRules) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NotIn) > 0 {
		dAtA56 := make([]byte, len(m.NotIn)*10)
		var j55 int
		for _, num1 := range m.NotIn {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA56[j55] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j55++
			}
			dAtA56[j55] = uint8(num)
			j55++
		}
		i -= j55
		copy(dAtA[i:], dAtA56[:j55])
		i = encodeVarintValidate(dAtA, i, uint64(j55))
		i--
		dAtA[i] = 0x22
	}
	if len(m.In) > 0 {
		dAtA58 := make([]byte, len(m.In)*10)
		var j57 int
		for _, num1 := range m.In {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA58[j57] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j57++
			}
			dAtA58[j57] = uint8(num)
			j57++
		}
		i -= j57
		copy(dAtA[i:], dAtA58[:j57])
		i = encodeVarintValidate(dAtA, i, uint64(j57))
		i--
		dAtA[i] = 0x1a
	}
	if m.DefinedOnly {
		i--
		if m.DefinedOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Const != 0 {
		i = encodeVarintValidate(dAtA, i, uint64(m.Const))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MessageRules) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageRules) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageRules) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RequiredOneNonzeroField {
		i--
		if m.RequiredOneNonzeroField {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.RequiredOneof {
		i--
		if m.RequiredOneof {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Required {
		i--
		if m.Required {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Skip {
		i--
		if m.Skip {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RepeatedRules) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RepeatedRules) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RepeatedRules) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UniqueMetadataName {
		i--
		if m.UniqueMetadataName {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.NumItems) > 0 {
		i -= len(m.NumItems)
		copy(dAtA[i:], m.NumItems)
		i = encodeVarintValidate(dAtA, i, uint64(len(m.NumItems)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Items != nil {
		{
			size, err := m.Items.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValidate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Unique {
		i--
		if m.Unique {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.MaxItems != 0 {
		i = encodeVarintValidate(dAtA, i, uint64(m.MaxItems))
		i--
		dAtA[i] = 0x10
	}
	if m.MinItems != 0 {
		i = encodeVarintValidate(dAtA, i, uint64(m.MinItems))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MapRules) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapRules) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapRules) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UniqueValues {
		i--
		if m.UniqueValues {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Values != nil {
		{
			size, err := m.Values.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValidate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Keys != nil {
		{
			size, err := m.Keys.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValidate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.NoSparse {
		i--
		if m.NoSparse {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.MaxPairs != 0 {
		i = encodeVarintValidate(dAtA, i, uint64(m.MaxPairs))
		i--
		dAtA[i] = 0x10
	}
	if m.MinPairs != 0 {
		i = encodeVarintValidate(dAtA, i, uint64(m.MinPairs))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AnyRules) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnyRules) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnyRules) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NotIn) > 0 {
		for iNdEx := len(m.NotIn) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.NotIn[iNdEx])
			copy(dAtA[i:], m.NotIn[iNdEx])
			i = encodeVarintValidate(dAtA, i, uint64(len(m.NotIn[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.In) > 0 {
		for iNdEx := len(m.In) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.In[iNdEx])
			copy(dAtA[i:], m.In[iNdEx])
			i = encodeVarintValidate(dAtA, i, uint64(len(m.In[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Required {
		i--
		if m.Required {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DurationRules) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DurationRules) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DurationRules) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NotIn) > 0 {
		for iNdEx := len(m.NotIn) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NotIn[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintValidate(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.In) > 0 {
		for iNdEx := len(m.In) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.In[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintValidate(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.Gte != nil {
		{
			size, err := m.Gte.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValidate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Gt != nil {
		{
			size, err := m.Gt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValidate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Lte != nil {
		{
			size, err := m.Lte.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValidate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Lt != nil {
		{
			size, err := m.Lt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValidate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Const != nil {
		{
			size, err := m.Const.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValidate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Required {
		i--
		if m.Required {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TimestampRules) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimestampRules) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TimestampRules) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Within != nil {
		{
			size, err := m.Within.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValidate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.GtNow {
		i--
		if m.GtNow {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.LtNow {
		i--
		if m.LtNow {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.Gte != nil {
		{
			size, err := m.Gte.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValidate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Gt != nil {
		{
			size, err := m.Gt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValidate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Lte != nil {
		{
			size, err := m.Lte.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValidate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Lt != nil {
		{
			size, err := m.Lt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValidate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Const != nil {
		{
			size, err := m.Const.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValidate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Required {
		i--
		if m.Required {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintValidate(dAtA []byte, offset int, v uint64) int {
	offset -= sovValidate(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FieldRules) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		n += m.Type.Size()
	}
	return n
}

func (m *FieldRules_Float) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Float != nil {
		l = m.Float.Size()
		n += 1 + l + sovValidate(uint64(l))
	}
	return n
}
func (m *FieldRules_Double) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Double != nil {
		l = m.Double.Size()
		n += 1 + l + sovValidate(uint64(l))
	}
	return n
}
func (m *FieldRules_Int32) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Int32 != nil {
		l = m.Int32.Size()
		n += 1 + l + sovValidate(uint64(l))
	}
	return n
}
func (m *FieldRules_Int64) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Int64 != nil {
		l = m.Int64.Size()
		n += 1 + l + sovValidate(uint64(l))
	}
	return n
}
func (m *FieldRules_Uint32) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uint32 != nil {
		l = m.Uint32.Size()
		n += 1 + l + sovValidate(uint64(l))
	}
	return n
}
func (m *FieldRules_Uint64) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uint64 != nil {
		l = m.Uint64.Size()
		n += 1 + l + sovValidate(uint64(l))
	}
	return n
}
func (m *FieldRules_Sint32) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sint32 != nil {
		l = m.Sint32.Size()
		n += 1 + l + sovValidate(uint64(l))
	}
	return n
}
func (m *FieldRules_Sint64) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sint64 != nil {
		l = m.Sint64.Size()
		n += 1 + l + sovValidate(uint64(l))
	}
	return n
}
func (m *FieldRules_Fixed32) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fixed32 != nil {
		l = m.Fixed32.Size()
		n += 1 + l + sovValidate(uint64(l))
	}
	return n
}
func (m *FieldRules_Fixed64) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fixed64 != nil {
		l = m.Fixed64.Size()
		n += 1 + l + sovValidate(uint64(l))
	}
	return n
}
func (m *FieldRules_Sfixed32) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sfixed32 != nil {
		l = m.Sfixed32.Size()
		n += 1 + l + sovValidate(uint64(l))
	}
	return n
}
func (m *FieldRules_Sfixed64) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sfixed64 != nil {
		l = m.Sfixed64.Size()
		n += 1 + l + sovValidate(uint64(l))
	}
	return n
}
func (m *FieldRules_Bool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Bool != nil {
		l = m.Bool.Size()
		n += 1 + l + sovValidate(uint64(l))
	}
	return n
}
func (m *FieldRules_String_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.String_ != nil {
		l = m.String_.Size()
		n += 1 + l + sovValidate(uint64(l))
	}
	return n
}
func (m *FieldRules_Bytes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Bytes != nil {
		l = m.Bytes.Size()
		n += 1 + l + sovValidate(uint64(l))
	}
	return n
}
func (m *FieldRules_Enum) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enum != nil {
		l = m.Enum.Size()
		n += 2 + l + sovValidate(uint64(l))
	}
	return n
}
func (m *FieldRules_Message) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Message != nil {
		l = m.Message.Size()
		n += 2 + l + sovValidate(uint64(l))
	}
	return n
}
func (m *FieldRules_Repeated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Repeated != nil {
		l = m.Repeated.Size()
		n += 2 + l + sovValidate(uint64(l))
	}
	return n
}
func (m *FieldRules_Map) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Map != nil {
		l = m.Map.Size()
		n += 2 + l + sovValidate(uint64(l))
	}
	return n
}
func (m *FieldRules_Any) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Any != nil {
		l = m.Any.Size()
		n += 2 + l + sovValidate(uint64(l))
	}
	return n
}
func (m *FieldRules_Duration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Duration != nil {
		l = m.Duration.Size()
		n += 2 + l + sovValidate(uint64(l))
	}
	return n
}
func (m *FieldRules_Timestamp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 2 + l + sovValidate(uint64(l))
	}
	return n
}
func (m *FloatRules) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Const != 0 {
		n += 5
	}
	if m.Lt != 0 {
		n += 5
	}
	if m.Lte != 0 {
		n += 5
	}
	if m.Gt != 0 {
		n += 5
	}
	if m.Gte != 0 {
		n += 5
	}
	if len(m.In) > 0 {
		n += 1 + sovValidate(uint64(len(m.In)*4)) + len(m.In)*4
	}
	if len(m.NotIn) > 0 {
		n += 1 + sovValidate(uint64(len(m.NotIn)*4)) + len(m.NotIn)*4
	}
	return n
}

func (m *DoubleRules) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Const != 0 {
		n += 9
	}
	if m.Lt != 0 {
		n += 9
	}
	if m.Lte != 0 {
		n += 9
	}
	if m.Gt != 0 {
		n += 9
	}
	if m.Gte != 0 {
		n += 9
	}
	if len(m.In) > 0 {
		n += 1 + sovValidate(uint64(len(m.In)*8)) + len(m.In)*8
	}
	if len(m.NotIn) > 0 {
		n += 1 + sovValidate(uint64(len(m.NotIn)*8)) + len(m.NotIn)*8
	}
	return n
}

func (m *Int32Rules) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Const != 0 {
		n += 1 + sovValidate(uint64(m.Const))
	}
	if m.Lt != 0 {
		n += 1 + sovValidate(uint64(m.Lt))
	}
	if m.Lte != 0 {
		n += 1 + sovValidate(uint64(m.Lte))
	}
	if m.Gt != 0 {
		n += 1 + sovValidate(uint64(m.Gt))
	}
	if m.Gte != 0 {
		n += 1 + sovValidate(uint64(m.Gte))
	}
	if len(m.In) > 0 {
		l = 0
		for _, e := range m.In {
			l += sovValidate(uint64(e))
		}
		n += 1 + sovValidate(uint64(l)) + l
	}
	if len(m.NotIn) > 0 {
		l = 0
		for _, e := range m.NotIn {
			l += sovValidate(uint64(e))
		}
		n += 1 + sovValidate(uint64(l)) + l
	}
	return n
}

func (m *Int64Rules) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Const != 0 {
		n += 1 + sovValidate(uint64(m.Const))
	}
	if m.Lt != 0 {
		n += 1 + sovValidate(uint64(m.Lt))
	}
	if m.Lte != 0 {
		n += 1 + sovValidate(uint64(m.Lte))
	}
	if m.Gt != 0 {
		n += 1 + sovValidate(uint64(m.Gt))
	}
	if m.Gte != 0 {
		n += 1 + sovValidate(uint64(m.Gte))
	}
	if len(m.In) > 0 {
		l = 0
		for _, e := range m.In {
			l += sovValidate(uint64(e))
		}
		n += 1 + sovValidate(uint64(l)) + l
	}
	if len(m.NotIn) > 0 {
		l = 0
		for _, e := range m.NotIn {
			l += sovValidate(uint64(e))
		}
		n += 1 + sovValidate(uint64(l)) + l
	}
	return n
}

func (m *UInt32Rules) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Const != 0 {
		n += 1 + sovValidate(uint64(m.Const))
	}
	if m.Lt != 0 {
		n += 1 + sovValidate(uint64(m.Lt))
	}
	if m.Lte != 0 {
		n += 1 + sovValidate(uint64(m.Lte))
	}
	if m.Gt != 0 {
		n += 1 + sovValidate(uint64(m.Gt))
	}
	if m.Gte != 0 {
		n += 1 + sovValidate(uint64(m.Gte))
	}
	if len(m.In) > 0 {
		l = 0
		for _, e := range m.In {
			l += sovValidate(uint64(e))
		}
		n += 1 + sovValidate(uint64(l)) + l
	}
	if len(m.NotIn) > 0 {
		l = 0
		for _, e := range m.NotIn {
			l += sovValidate(uint64(e))
		}
		n += 1 + sovValidate(uint64(l)) + l
	}
	l = len(m.Ranges)
	if l > 0 {
		n += 1 + l + sovValidate(uint64(l))
	}
	l = len(m.NotInRanges)
	if l > 0 {
		n += 1 + l + sovValidate(uint64(l))
	}
	return n
}

func (m *UInt64Rules) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Const != 0 {
		n += 1 + sovValidate(uint64(m.Const))
	}
	if m.Lt != 0 {
		n += 1 + sovValidate(uint64(m.Lt))
	}
	if m.Lte != 0 {
		n += 1 + sovValidate(uint64(m.Lte))
	}
	if m.Gt != 0 {
		n += 1 + sovValidate(uint64(m.Gt))
	}
	if m.Gte != 0 {
		n += 1 + sovValidate(uint64(m.Gte))
	}
	if len(m.In) > 0 {
		l = 0
		for _, e := range m.In {
			l += sovValidate(uint64(e))
		}
		n += 1 + sovValidate(uint64(l)) + l
	}
	if len(m.NotIn) > 0 {
		l = 0
		for _, e := range m.NotIn {
			l += sovValidate(uint64(e))
		}
		n += 1 + sovValidate(uint64(l)) + l
	}
	return n
}

func (m *SInt32Rules) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Const != 0 {
		n += 1 + sozValidate(uint64(m.Const))
	}
	if m.Lt != 0 {
		n += 1 + sozValidate(uint64(m.Lt))
	}
	if m.Lte != 0 {
		n += 1 + sozValidate(uint64(m.Lte))
	}
	if m.Gt != 0 {
		n += 1 + sozValidate(uint64(m.Gt))
	}
	if m.Gte != 0 {
		n += 1 + sozValidate(uint64(m.Gte))
	}
	if len(m.In) > 0 {
		l = 0
		for _, e := range m.In {
			l += sozValidate(uint64(e))
		}
		n += 1 + sovValidate(uint64(l)) + l
	}
	if len(m.NotIn) > 0 {
		l = 0
		for _, e := range m.NotIn {
			l += sozValidate(uint64(e))
		}
		n += 1 + sovValidate(uint64(l)) + l
	}
	return n
}

func (m *SInt64Rules) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Const != 0 {
		n += 1 + sozValidate(uint64(m.Const))
	}
	if m.Lt != 0 {
		n += 1 + sozValidate(uint64(m.Lt))
	}
	if m.Lte != 0 {
		n += 1 + sozValidate(uint64(m.Lte))
	}
	if m.Gt != 0 {
		n += 1 + sozValidate(uint64(m.Gt))
	}
	if m.Gte != 0 {
		n += 1 + sozValidate(uint64(m.Gte))
	}
	if len(m.In) > 0 {
		l = 0
		for _, e := range m.In {
			l += sozValidate(uint64(e))
		}
		n += 1 + sovValidate(uint64(l)) + l
	}
	if len(m.NotIn) > 0 {
		l = 0
		for _, e := range m.NotIn {
			l += sozValidate(uint64(e))
		}
		n += 1 + sovValidate(uint64(l)) + l
	}
	return n
}

func (m *Fixed32Rules) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Const != 0 {
		n += 5
	}
	if m.Lt != 0 {
		n += 5
	}
	if m.Lte != 0 {
		n += 5
	}
	if m.Gt != 0 {
		n += 5
	}
	if m.Gte != 0 {
		n += 5
	}
	if len(m.In) > 0 {
		n += 1 + sovValidate(uint64(len(m.In)*4)) + len(m.In)*4
	}
	if len(m.NotIn) > 0 {
		n += 1 + sovValidate(uint64(len(m.NotIn)*4)) + len(m.NotIn)*4
	}
	return n
}

func (m *Fixed64Rules) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Const != 0 {
		n += 9
	}
	if m.Lt != 0 {
		n += 9
	}
	if m.Lte != 0 {
		n += 9
	}
	if m.Gt != 0 {
		n += 9
	}
	if m.Gte != 0 {
		n += 9
	}
	if len(m.In) > 0 {
		n += 1 + sovValidate(uint64(len(m.In)*8)) + len(m.In)*8
	}
	if len(m.NotIn) > 0 {
		n += 1 + sovValidate(uint64(len(m.NotIn)*8)) + len(m.NotIn)*8
	}
	return n
}

func (m *SFixed32Rules) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Const != 0 {
		n += 5
	}
	if m.Lt != 0 {
		n += 5
	}
	if m.Lte != 0 {
		n += 5
	}
	if m.Gt != 0 {
		n += 5
	}
	if m.Gte != 0 {
		n += 5
	}
	if len(m.In) > 0 {
		n += 1 + sovValidate(uint64(len(m.In)*4)) + len(m.In)*4
	}
	if len(m.NotIn) > 0 {
		n += 1 + sovValidate(uint64(len(m.NotIn)*4)) + len(m.NotIn)*4
	}
	return n
}

func (m *SFixed64Rules) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Const != 0 {
		n += 9
	}
	if m.Lt != 0 {
		n += 9
	}
	if m.Lte != 0 {
		n += 9
	}
	if m.Gt != 0 {
		n += 9
	}
	if m.Gte != 0 {
		n += 9
	}
	if len(m.In) > 0 {
		n += 1 + sovValidate(uint64(len(m.In)*8)) + len(m.In)*8
	}
	if len(m.NotIn) > 0 {
		n += 1 + sovValidate(uint64(len(m.NotIn)*8)) + len(m.NotIn)*8
	}
	return n
}

func (m *BoolRules) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Const {
		n += 2
	}
	return n
}

func (m *StringRules) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Const)
	if l > 0 {
		n += 1 + l + sovValidate(uint64(l))
	}
	if m.MinLen != 0 {
		n += 1 + sovValidate(uint64(m.MinLen))
	}
	if m.MaxLen != 0 {
		n += 1 + sovValidate(uint64(m.MaxLen))
	}
	if m.MinBytes != 0 {
		n += 1 + sovValidate(uint64(m.MinBytes))
	}
	if m.MaxBytes != 0 {
		n += 1 + sovValidate(uint64(m.MaxBytes))
	}
	l = len(m.Pattern)
	if l > 0 {
		n += 1 + l + sovValidate(uint64(l))
	}
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovValidate(uint64(l))
	}
	l = len(m.Suffix)
	if l > 0 {
		n += 1 + l + sovValidate(uint64(l))
	}
	l = len(m.Contains)
	if l > 0 {
		n += 1 + l + sovValidate(uint64(l))
	}
	if len(m.In) > 0 {
		for _, s := range m.In {
			l = len(s)
			n += 1 + l + sovValidate(uint64(l))
		}
	}
	if len(m.NotIn) > 0 {
		for _, s := range m.NotIn {
			l = len(s)
			n += 1 + l + sovValidate(uint64(l))
		}
	}
	if m.WellKnown != nil {
		n += m.WellKnown.Size()
	}
	if m.Len != 0 {
		n += 2 + sovValidate(uint64(m.Len))
	}
	if m.LenBytes != 0 {
		n += 2 + sovValidate(uint64(m.LenBytes))
	}
	if m.MinIpPrefixLength != 0 {
		n += 2 + sovValidate(uint64(m.MinIpPrefixLength))
	}
	if m.MaxIpPrefixLength != 0 {
		n += 2 + sovValidate(uint64(m.MaxIpPrefixLength))
	}
	l = len(m.MinTimeInterval)
	if l > 0 {
		n += 2 + l + sovValidate(uint64(l))
	}
	l = len(m.MaxTimeInterval)
	if l > 0 {
		n += 2 + l + sovValidate(uint64(l))
	}
	return n
}

func (m *StringRules_Email) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *StringRules_Hostname) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *StringRules_Ip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *StringRules_Ipv4) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *StringRules_Ipv6) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 3
	return n
}
func (m *StringRules_Uri) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 3
	return n
}
func (m *StringRules_UriRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 3
	return n
}
func (m *StringRules_IpPrefix) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 3
	return n
}
func (m *StringRules_PortRange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 3
	return n
}
func (m *StringRules_Mac) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 3
	return n
}
func (m *StringRules_Regex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 3
	return n
}
func (m *StringRules_HttpHeaderField) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 3
	return n
}
func (m *StringRules_K8SLabelValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 3
	return n
}
func (m *StringRules_NotEmpty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 3
	return n
}
func (m *StringRules_Hostport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 3
	return n
}
func (m *StringRules_JsonPath) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 3
	return n
}
func (m *StringRules_Hex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 3
	return n
}
func (m *StringRules_Ipv4Prefix) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 3
	return n
}
func (m *StringRules_Ipv6Prefix) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 3
	return n
}
func (m *StringRules_VhDomain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 3
	return n
}
func (m *StringRules_VesObjectName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 3
	return n
}
func (m *StringRules_IanaSvcName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 3
	return n
}
func (m *StringRules_Dns_1123Label) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 3
	return n
}
func (m *StringRules_UnixFilePath) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 3
	return n
}
func (m *StringRules_PhoneNumber) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 3
	return n
}
func (m *StringRules_PortRangeList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 3
	return n
}
func (m *StringRules_VhDomainNoPort) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 3
	return n
}
func (m *StringRules_HostnameOrIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 3
	return n
}
func (m *StringRules_K8SLabelSelector) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 3
	return n
}
func (m *StringRules_HttpPath) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 3
	return n
}
func (m *StringRules_TimeInterval) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 3
	return n
}
func (m *BytesRules) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Const)
	if l > 0 {
		n += 1 + l + sovValidate(uint64(l))
	}
	if m.MinLen != 0 {
		n += 1 + sovValidate(uint64(m.MinLen))
	}
	if m.MaxLen != 0 {
		n += 1 + sovValidate(uint64(m.MaxLen))
	}
	l = len(m.Pattern)
	if l > 0 {
		n += 1 + l + sovValidate(uint64(l))
	}
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovValidate(uint64(l))
	}
	l = len(m.Suffix)
	if l > 0 {
		n += 1 + l + sovValidate(uint64(l))
	}
	l = len(m.Contains)
	if l > 0 {
		n += 1 + l + sovValidate(uint64(l))
	}
	if len(m.In) > 0 {
		for _, b := range m.In {
			l = len(b)
			n += 1 + l + sovValidate(uint64(l))
		}
	}
	if len(m.NotIn) > 0 {
		for _, b := range m.NotIn {
			l = len(b)
			n += 1 + l + sovValidate(uint64(l))
		}
	}
	if m.WellKnown != nil {
		n += m.WellKnown.Size()
	}
	if m.Len != 0 {
		n += 1 + sovValidate(uint64(m.Len))
	}
	return n
}

func (m *BytesRules_Ip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *BytesRules_Ipv4) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *BytesRules_Ipv6) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *EnumRules) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Const != 0 {
		n += 1 + sovValidate(uint64(m.Const))
	}
	if m.DefinedOnly {
		n += 2
	}
	if len(m.In) > 0 {
		l = 0
		for _, e := range m.In {
			l += sovValidate(uint64(e))
		}
		n += 1 + sovValidate(uint64(l)) + l
	}
	if len(m.NotIn) > 0 {
		l = 0
		for _, e := range m.NotIn {
			l += sovValidate(uint64(e))
		}
		n += 1 + sovValidate(uint64(l)) + l
	}
	return n
}

func (m *MessageRules) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Skip {
		n += 2
	}
	if m.Required {
		n += 2
	}
	if m.RequiredOneof {
		n += 2
	}
	if m.RequiredOneNonzeroField {
		n += 2
	}
	return n
}

func (m *RepeatedRules) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinItems != 0 {
		n += 1 + sovValidate(uint64(m.MinItems))
	}
	if m.MaxItems != 0 {
		n += 1 + sovValidate(uint64(m.MaxItems))
	}
	if m.Unique {
		n += 2
	}
	if m.Items != nil {
		l = m.Items.Size()
		n += 1 + l + sovValidate(uint64(l))
	}
	l = len(m.NumItems)
	if l > 0 {
		n += 1 + l + sovValidate(uint64(l))
	}
	if m.UniqueMetadataName {
		n += 2
	}
	return n
}

func (m *MapRules) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinPairs != 0 {
		n += 1 + sovValidate(uint64(m.MinPairs))
	}
	if m.MaxPairs != 0 {
		n += 1 + sovValidate(uint64(m.MaxPairs))
	}
	if m.NoSparse {
		n += 2
	}
	if m.Keys != nil {
		l = m.Keys.Size()
		n += 1 + l + sovValidate(uint64(l))
	}
	if m.Values != nil {
		l = m.Values.Size()
		n += 1 + l + sovValidate(uint64(l))
	}
	if m.UniqueValues {
		n += 2
	}
	return n
}

func (m *AnyRules) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Required {
		n += 2
	}
	if len(m.In) > 0 {
		for _, s := range m.In {
			l = len(s)
			n += 1 + l + sovValidate(uint64(l))
		}
	}
	if len(m.NotIn) > 0 {
		for _, s := range m.NotIn {
			l = len(s)
			n += 1 + l + sovValidate(uint64(l))
		}
	}
	return n
}

func (m *DurationRules) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Required {
		n += 2
	}
	if m.Const != nil {
		l = m.Const.Size()
		n += 1 + l + sovValidate(uint64(l))
	}
	if m.Lt != nil {
		l = m.Lt.Size()
		n += 1 + l + sovValidate(uint64(l))
	}
	if m.Lte != nil {
		l = m.Lte.Size()
		n += 1 + l + sovValidate(uint64(l))
	}
	if m.Gt != nil {
		l = m.Gt.Size()
		n += 1 + l + sovValidate(uint64(l))
	}
	if m.Gte != nil {
		l = m.Gte.Size()
		n += 1 + l + sovValidate(uint64(l))
	}
	if len(m.In) > 0 {
		for _, e := range m.In {
			l = e.Size()
			n += 1 + l + sovValidate(uint64(l))
		}
	}
	if len(m.NotIn) > 0 {
		for _, e := range m.NotIn {
			l = e.Size()
			n += 1 + l + sovValidate(uint64(l))
		}
	}
	return n
}

func (m *TimestampRules) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Required {
		n += 2
	}
	if m.Const != nil {
		l = m.Const.Size()
		n += 1 + l + sovValidate(uint64(l))
	}
	if m.Lt != nil {
		l = m.Lt.Size()
		n += 1 + l + sovValidate(uint64(l))
	}
	if m.Lte != nil {
		l = m.Lte.Size()
		n += 1 + l + sovValidate(uint64(l))
	}
	if m.Gt != nil {
		l = m.Gt.Size()
		n += 1 + l + sovValidate(uint64(l))
	}
	if m.Gte != nil {
		l = m.Gte.Size()
		n += 1 + l + sovValidate(uint64(l))
	}
	if m.LtNow {
		n += 2
	}
	if m.GtNow {
		n += 2
	}
	if m.Within != nil {
		l = m.Within.Size()
		n += 1 + l + sovValidate(uint64(l))
	}
	return n
}

func sovValidate(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozValidate(x uint64) (n int) {
	return sovValidate(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *FieldRules) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldRules{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldRules_Float) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldRules_Float{`,
		`Float:` + strings.Replace(fmt.Sprintf("%v", this.Float), "FloatRules", "FloatRules", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldRules_Double) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldRules_Double{`,
		`Double:` + strings.Replace(fmt.Sprintf("%v", this.Double), "DoubleRules", "DoubleRules", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldRules_Int32) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldRules_Int32{`,
		`Int32:` + strings.Replace(fmt.Sprintf("%v", this.Int32), "Int32Rules", "Int32Rules", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldRules_Int64) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldRules_Int64{`,
		`Int64:` + strings.Replace(fmt.Sprintf("%v", this.Int64), "Int64Rules", "Int64Rules", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldRules_Uint32) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldRules_Uint32{`,
		`Uint32:` + strings.Replace(fmt.Sprintf("%v", this.Uint32), "UInt32Rules", "UInt32Rules", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldRules_Uint64) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldRules_Uint64{`,
		`Uint64:` + strings.Replace(fmt.Sprintf("%v", this.Uint64), "UInt64Rules", "UInt64Rules", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldRules_Sint32) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldRules_Sint32{`,
		`Sint32:` + strings.Replace(fmt.Sprintf("%v", this.Sint32), "SInt32Rules", "SInt32Rules", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldRules_Sint64) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldRules_Sint64{`,
		`Sint64:` + strings.Replace(fmt.Sprintf("%v", this.Sint64), "SInt64Rules", "SInt64Rules", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldRules_Fixed32) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldRules_Fixed32{`,
		`Fixed32:` + strings.Replace(fmt.Sprintf("%v", this.Fixed32), "Fixed32Rules", "Fixed32Rules", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldRules_Fixed64) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldRules_Fixed64{`,
		`Fixed64:` + strings.Replace(fmt.Sprintf("%v", this.Fixed64), "Fixed64Rules", "Fixed64Rules", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldRules_Sfixed32) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldRules_Sfixed32{`,
		`Sfixed32:` + strings.Replace(fmt.Sprintf("%v", this.Sfixed32), "SFixed32Rules", "SFixed32Rules", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldRules_Sfixed64) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldRules_Sfixed64{`,
		`Sfixed64:` + strings.Replace(fmt.Sprintf("%v", this.Sfixed64), "SFixed64Rules", "SFixed64Rules", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldRules_Bool) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldRules_Bool{`,
		`Bool:` + strings.Replace(fmt.Sprintf("%v", this.Bool), "BoolRules", "BoolRules", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldRules_String_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldRules_String_{`,
		`String_:` + strings.Replace(fmt.Sprintf("%v", this.String_), "StringRules", "StringRules", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldRules_Bytes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldRules_Bytes{`,
		`Bytes:` + strings.Replace(fmt.Sprintf("%v", this.Bytes), "BytesRules", "BytesRules", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldRules_Enum) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldRules_Enum{`,
		`Enum:` + strings.Replace(fmt.Sprintf("%v", this.Enum), "EnumRules", "EnumRules", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldRules_Message) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldRules_Message{`,
		`Message:` + strings.Replace(fmt.Sprintf("%v", this.Message), "MessageRules", "MessageRules", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldRules_Repeated) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldRules_Repeated{`,
		`Repeated:` + strings.Replace(fmt.Sprintf("%v", this.Repeated), "RepeatedRules", "RepeatedRules", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldRules_Map) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldRules_Map{`,
		`Map:` + strings.Replace(fmt.Sprintf("%v", this.Map), "MapRules", "MapRules", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldRules_Any) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldRules_Any{`,
		`Any:` + strings.Replace(fmt.Sprintf("%v", this.Any), "AnyRules", "AnyRules", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldRules_Duration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldRules_Duration{`,
		`Duration:` + strings.Replace(fmt.Sprintf("%v", this.Duration), "DurationRules", "DurationRules", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldRules_Timestamp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldRules_Timestamp{`,
		`Timestamp:` + strings.Replace(fmt.Sprintf("%v", this.Timestamp), "TimestampRules", "TimestampRules", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FloatRules) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FloatRules{`,
		`Const:` + fmt.Sprintf("%v", this.Const) + `,`,
		`Lt:` + fmt.Sprintf("%v", this.Lt) + `,`,
		`Lte:` + fmt.Sprintf("%v", this.Lte) + `,`,
		`Gt:` + fmt.Sprintf("%v", this.Gt) + `,`,
		`Gte:` + fmt.Sprintf("%v", this.Gte) + `,`,
		`In:` + fmt.Sprintf("%v", this.In) + `,`,
		`NotIn:` + fmt.Sprintf("%v", this.NotIn) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DoubleRules) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DoubleRules{`,
		`Const:` + fmt.Sprintf("%v", this.Const) + `,`,
		`Lt:` + fmt.Sprintf("%v", this.Lt) + `,`,
		`Lte:` + fmt.Sprintf("%v", this.Lte) + `,`,
		`Gt:` + fmt.Sprintf("%v", this.Gt) + `,`,
		`Gte:` + fmt.Sprintf("%v", this.Gte) + `,`,
		`In:` + fmt.Sprintf("%v", this.In) + `,`,
		`NotIn:` + fmt.Sprintf("%v", this.NotIn) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Int32Rules) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Int32Rules{`,
		`Const:` + fmt.Sprintf("%v", this.Const) + `,`,
		`Lt:` + fmt.Sprintf("%v", this.Lt) + `,`,
		`Lte:` + fmt.Sprintf("%v", this.Lte) + `,`,
		`Gt:` + fmt.Sprintf("%v", this.Gt) + `,`,
		`Gte:` + fmt.Sprintf("%v", this.Gte) + `,`,
		`In:` + fmt.Sprintf("%v", this.In) + `,`,
		`NotIn:` + fmt.Sprintf("%v", this.NotIn) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Int64Rules) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Int64Rules{`,
		`Const:` + fmt.Sprintf("%v", this.Const) + `,`,
		`Lt:` + fmt.Sprintf("%v", this.Lt) + `,`,
		`Lte:` + fmt.Sprintf("%v", this.Lte) + `,`,
		`Gt:` + fmt.Sprintf("%v", this.Gt) + `,`,
		`Gte:` + fmt.Sprintf("%v", this.Gte) + `,`,
		`In:` + fmt.Sprintf("%v", this.In) + `,`,
		`NotIn:` + fmt.Sprintf("%v", this.NotIn) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UInt32Rules) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UInt32Rules{`,
		`Const:` + fmt.Sprintf("%v", this.Const) + `,`,
		`Lt:` + fmt.Sprintf("%v", this.Lt) + `,`,
		`Lte:` + fmt.Sprintf("%v", this.Lte) + `,`,
		`Gt:` + fmt.Sprintf("%v", this.Gt) + `,`,
		`Gte:` + fmt.Sprintf("%v", this.Gte) + `,`,
		`In:` + fmt.Sprintf("%v", this.In) + `,`,
		`NotIn:` + fmt.Sprintf("%v", this.NotIn) + `,`,
		`Ranges:` + fmt.Sprintf("%v", this.Ranges) + `,`,
		`NotInRanges:` + fmt.Sprintf("%v", this.NotInRanges) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UInt64Rules) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UInt64Rules{`,
		`Const:` + fmt.Sprintf("%v", this.Const) + `,`,
		`Lt:` + fmt.Sprintf("%v", this.Lt) + `,`,
		`Lte:` + fmt.Sprintf("%v", this.Lte) + `,`,
		`Gt:` + fmt.Sprintf("%v", this.Gt) + `,`,
		`Gte:` + fmt.Sprintf("%v", this.Gte) + `,`,
		`In:` + fmt.Sprintf("%v", this.In) + `,`,
		`NotIn:` + fmt.Sprintf("%v", this.NotIn) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SInt32Rules) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SInt32Rules{`,
		`Const:` + fmt.Sprintf("%v", this.Const) + `,`,
		`Lt:` + fmt.Sprintf("%v", this.Lt) + `,`,
		`Lte:` + fmt.Sprintf("%v", this.Lte) + `,`,
		`Gt:` + fmt.Sprintf("%v", this.Gt) + `,`,
		`Gte:` + fmt.Sprintf("%v", this.Gte) + `,`,
		`In:` + fmt.Sprintf("%v", this.In) + `,`,
		`NotIn:` + fmt.Sprintf("%v", this.NotIn) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SInt64Rules) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SInt64Rules{`,
		`Const:` + fmt.Sprintf("%v", this.Const) + `,`,
		`Lt:` + fmt.Sprintf("%v", this.Lt) + `,`,
		`Lte:` + fmt.Sprintf("%v", this.Lte) + `,`,
		`Gt:` + fmt.Sprintf("%v", this.Gt) + `,`,
		`Gte:` + fmt.Sprintf("%v", this.Gte) + `,`,
		`In:` + fmt.Sprintf("%v", this.In) + `,`,
		`NotIn:` + fmt.Sprintf("%v", this.NotIn) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Fixed32Rules) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Fixed32Rules{`,
		`Const:` + fmt.Sprintf("%v", this.Const) + `,`,
		`Lt:` + fmt.Sprintf("%v", this.Lt) + `,`,
		`Lte:` + fmt.Sprintf("%v", this.Lte) + `,`,
		`Gt:` + fmt.Sprintf("%v", this.Gt) + `,`,
		`Gte:` + fmt.Sprintf("%v", this.Gte) + `,`,
		`In:` + fmt.Sprintf("%v", this.In) + `,`,
		`NotIn:` + fmt.Sprintf("%v", this.NotIn) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Fixed64Rules) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Fixed64Rules{`,
		`Const:` + fmt.Sprintf("%v", this.Const) + `,`,
		`Lt:` + fmt.Sprintf("%v", this.Lt) + `,`,
		`Lte:` + fmt.Sprintf("%v", this.Lte) + `,`,
		`Gt:` + fmt.Sprintf("%v", this.Gt) + `,`,
		`Gte:` + fmt.Sprintf("%v", this.Gte) + `,`,
		`In:` + fmt.Sprintf("%v", this.In) + `,`,
		`NotIn:` + fmt.Sprintf("%v", this.NotIn) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SFixed32Rules) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SFixed32Rules{`,
		`Const:` + fmt.Sprintf("%v", this.Const) + `,`,
		`Lt:` + fmt.Sprintf("%v", this.Lt) + `,`,
		`Lte:` + fmt.Sprintf("%v", this.Lte) + `,`,
		`Gt:` + fmt.Sprintf("%v", this.Gt) + `,`,
		`Gte:` + fmt.Sprintf("%v", this.Gte) + `,`,
		`In:` + fmt.Sprintf("%v", this.In) + `,`,
		`NotIn:` + fmt.Sprintf("%v", this.NotIn) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SFixed64Rules) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SFixed64Rules{`,
		`Const:` + fmt.Sprintf("%v", this.Const) + `,`,
		`Lt:` + fmt.Sprintf("%v", this.Lt) + `,`,
		`Lte:` + fmt.Sprintf("%v", this.Lte) + `,`,
		`Gt:` + fmt.Sprintf("%v", this.Gt) + `,`,
		`Gte:` + fmt.Sprintf("%v", this.Gte) + `,`,
		`In:` + fmt.Sprintf("%v", this.In) + `,`,
		`NotIn:` + fmt.Sprintf("%v", this.NotIn) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BoolRules) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BoolRules{`,
		`Const:` + fmt.Sprintf("%v", this.Const) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringRules) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringRules{`,
		`Const:` + fmt.Sprintf("%v", this.Const) + `,`,
		`MinLen:` + fmt.Sprintf("%v", this.MinLen) + `,`,
		`MaxLen:` + fmt.Sprintf("%v", this.MaxLen) + `,`,
		`MinBytes:` + fmt.Sprintf("%v", this.MinBytes) + `,`,
		`MaxBytes:` + fmt.Sprintf("%v", this.MaxBytes) + `,`,
		`Pattern:` + fmt.Sprintf("%v", this.Pattern) + `,`,
		`Prefix:` + fmt.Sprintf("%v", this.Prefix) + `,`,
		`Suffix:` + fmt.Sprintf("%v", this.Suffix) + `,`,
		`Contains:` + fmt.Sprintf("%v", this.Contains) + `,`,
		`In:` + fmt.Sprintf("%v", this.In) + `,`,
		`NotIn:` + fmt.Sprintf("%v", this.NotIn) + `,`,
		`WellKnown:` + fmt.Sprintf("%v", this.WellKnown) + `,`,
		`Len:` + fmt.Sprintf("%v", this.Len) + `,`,
		`LenBytes:` + fmt.Sprintf("%v", this.LenBytes) + `,`,
		`MinIpPrefixLength:` + fmt.Sprintf("%v", this.MinIpPrefixLength) + `,`,
		`MaxIpPrefixLength:` + fmt.Sprintf("%v", this.MaxIpPrefixLength) + `,`,
		`MinTimeInterval:` + fmt.Sprintf("%v", this.MinTimeInterval) + `,`,
		`MaxTimeInterval:` + fmt.Sprintf("%v", this.MaxTimeInterval) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringRules_Email) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringRules_Email{`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringRules_Hostname) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringRules_Hostname{`,
		`Hostname:` + fmt.Sprintf("%v", this.Hostname) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringRules_Ip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringRules_Ip{`,
		`Ip:` + fmt.Sprintf("%v", this.Ip) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringRules_Ipv4) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringRules_Ipv4{`,
		`Ipv4:` + fmt.Sprintf("%v", this.Ipv4) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringRules_Ipv6) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringRules_Ipv6{`,
		`Ipv6:` + fmt.Sprintf("%v", this.Ipv6) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringRules_Uri) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringRules_Uri{`,
		`Uri:` + fmt.Sprintf("%v", this.Uri) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringRules_UriRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringRules_UriRef{`,
		`UriRef:` + fmt.Sprintf("%v", this.UriRef) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringRules_IpPrefix) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringRules_IpPrefix{`,
		`IpPrefix:` + fmt.Sprintf("%v", this.IpPrefix) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringRules_PortRange) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringRules_PortRange{`,
		`PortRange:` + fmt.Sprintf("%v", this.PortRange) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringRules_Mac) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringRules_Mac{`,
		`Mac:` + fmt.Sprintf("%v", this.Mac) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringRules_Regex) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringRules_Regex{`,
		`Regex:` + fmt.Sprintf("%v", this.Regex) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringRules_HttpHeaderField) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringRules_HttpHeaderField{`,
		`HttpHeaderField:` + fmt.Sprintf("%v", this.HttpHeaderField) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringRules_K8SLabelValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringRules_K8SLabelValue{`,
		`K8SLabelValue:` + fmt.Sprintf("%v", this.K8SLabelValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringRules_NotEmpty) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringRules_NotEmpty{`,
		`NotEmpty:` + fmt.Sprintf("%v", this.NotEmpty) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringRules_Hostport) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringRules_Hostport{`,
		`Hostport:` + fmt.Sprintf("%v", this.Hostport) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringRules_JsonPath) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringRules_JsonPath{`,
		`JsonPath:` + fmt.Sprintf("%v", this.JsonPath) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringRules_Hex) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringRules_Hex{`,
		`Hex:` + fmt.Sprintf("%v", this.Hex) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringRules_Ipv4Prefix) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringRules_Ipv4Prefix{`,
		`Ipv4Prefix:` + fmt.Sprintf("%v", this.Ipv4Prefix) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringRules_Ipv6Prefix) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringRules_Ipv6Prefix{`,
		`Ipv6Prefix:` + fmt.Sprintf("%v", this.Ipv6Prefix) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringRules_VhDomain) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringRules_VhDomain{`,
		`VhDomain:` + fmt.Sprintf("%v", this.VhDomain) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringRules_VesObjectName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringRules_VesObjectName{`,
		`VesObjectName:` + fmt.Sprintf("%v", this.VesObjectName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringRules_IanaSvcName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringRules_IanaSvcName{`,
		`IanaSvcName:` + fmt.Sprintf("%v", this.IanaSvcName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringRules_Dns_1123Label) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringRules_Dns_1123Label{`,
		`Dns_1123Label:` + fmt.Sprintf("%v", this.Dns_1123Label) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringRules_UnixFilePath) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringRules_UnixFilePath{`,
		`UnixFilePath:` + fmt.Sprintf("%v", this.UnixFilePath) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringRules_PhoneNumber) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringRules_PhoneNumber{`,
		`PhoneNumber:` + fmt.Sprintf("%v", this.PhoneNumber) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringRules_PortRangeList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringRules_PortRangeList{`,
		`PortRangeList:` + fmt.Sprintf("%v", this.PortRangeList) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringRules_VhDomainNoPort) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringRules_VhDomainNoPort{`,
		`VhDomainNoPort:` + fmt.Sprintf("%v", this.VhDomainNoPort) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringRules_HostnameOrIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringRules_HostnameOrIp{`,
		`HostnameOrIp:` + fmt.Sprintf("%v", this.HostnameOrIp) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringRules_K8SLabelSelector) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringRules_K8SLabelSelector{`,
		`K8SLabelSelector:` + fmt.Sprintf("%v", this.K8SLabelSelector) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringRules_HttpPath) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringRules_HttpPath{`,
		`HttpPath:` + fmt.Sprintf("%v", this.HttpPath) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringRules_TimeInterval) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringRules_TimeInterval{`,
		`TimeInterval:` + fmt.Sprintf("%v", this.TimeInterval) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BytesRules) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BytesRules{`,
		`Const:` + fmt.Sprintf("%v", this.Const) + `,`,
		`MinLen:` + fmt.Sprintf("%v", this.MinLen) + `,`,
		`MaxLen:` + fmt.Sprintf("%v", this.MaxLen) + `,`,
		`Pattern:` + fmt.Sprintf("%v", this.Pattern) + `,`,
		`Prefix:` + fmt.Sprintf("%v", this.Prefix) + `,`,
		`Suffix:` + fmt.Sprintf("%v", this.Suffix) + `,`,
		`Contains:` + fmt.Sprintf("%v", this.Contains) + `,`,
		`In:` + fmt.Sprintf("%v", this.In) + `,`,
		`NotIn:` + fmt.Sprintf("%v", this.NotIn) + `,`,
		`WellKnown:` + fmt.Sprintf("%v", this.WellKnown) + `,`,
		`Len:` + fmt.Sprintf("%v", this.Len) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BytesRules_Ip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BytesRules_Ip{`,
		`Ip:` + fmt.Sprintf("%v", this.Ip) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BytesRules_Ipv4) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BytesRules_Ipv4{`,
		`Ipv4:` + fmt.Sprintf("%v", this.Ipv4) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BytesRules_Ipv6) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BytesRules_Ipv6{`,
		`Ipv6:` + fmt.Sprintf("%v", this.Ipv6) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnumRules) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnumRules{`,
		`Const:` + fmt.Sprintf("%v", this.Const) + `,`,
		`DefinedOnly:` + fmt.Sprintf("%v", this.DefinedOnly) + `,`,
		`In:` + fmt.Sprintf("%v", this.In) + `,`,
		`NotIn:` + fmt.Sprintf("%v", this.NotIn) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MessageRules) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MessageRules{`,
		`Skip:` + fmt.Sprintf("%v", this.Skip) + `,`,
		`Required:` + fmt.Sprintf("%v", this.Required) + `,`,
		`RequiredOneof:` + fmt.Sprintf("%v", this.RequiredOneof) + `,`,
		`RequiredOneNonzeroField:` + fmt.Sprintf("%v", this.RequiredOneNonzeroField) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RepeatedRules) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RepeatedRules{`,
		`MinItems:` + fmt.Sprintf("%v", this.MinItems) + `,`,
		`MaxItems:` + fmt.Sprintf("%v", this.MaxItems) + `,`,
		`Unique:` + fmt.Sprintf("%v", this.Unique) + `,`,
		`Items:` + strings.Replace(this.Items.String(), "FieldRules", "FieldRules", 1) + `,`,
		`NumItems:` + fmt.Sprintf("%v", this.NumItems) + `,`,
		`UniqueMetadataName:` + fmt.Sprintf("%v", this.UniqueMetadataName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MapRules) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MapRules{`,
		`MinPairs:` + fmt.Sprintf("%v", this.MinPairs) + `,`,
		`MaxPairs:` + fmt.Sprintf("%v", this.MaxPairs) + `,`,
		`NoSparse:` + fmt.Sprintf("%v", this.NoSparse) + `,`,
		`Keys:` + strings.Replace(this.Keys.String(), "FieldRules", "FieldRules", 1) + `,`,
		`Values:` + strings.Replace(this.Values.String(), "FieldRules", "FieldRules", 1) + `,`,
		`UniqueValues:` + fmt.Sprintf("%v", this.UniqueValues) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AnyRules) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AnyRules{`,
		`Required:` + fmt.Sprintf("%v", this.Required) + `,`,
		`In:` + fmt.Sprintf("%v", this.In) + `,`,
		`NotIn:` + fmt.Sprintf("%v", this.NotIn) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DurationRules) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForIn := "[]*Duration{"
	for _, f := range this.In {
		repeatedStringForIn += strings.Replace(fmt.Sprintf("%v", f), "Duration", "types.Duration", 1) + ","
	}
	repeatedStringForIn += "}"
	repeatedStringForNotIn := "[]*Duration{"
	for _, f := range this.NotIn {
		repeatedStringForNotIn += strings.Replace(fmt.Sprintf("%v", f), "Duration", "types.Duration", 1) + ","
	}
	repeatedStringForNotIn += "}"
	s := strings.Join([]string{`&DurationRules{`,
		`Required:` + fmt.Sprintf("%v", this.Required) + `,`,
		`Const:` + strings.Replace(fmt.Sprintf("%v", this.Const), "Duration", "types.Duration", 1) + `,`,
		`Lt:` + strings.Replace(fmt.Sprintf("%v", this.Lt), "Duration", "types.Duration", 1) + `,`,
		`Lte:` + strings.Replace(fmt.Sprintf("%v", this.Lte), "Duration", "types.Duration", 1) + `,`,
		`Gt:` + strings.Replace(fmt.Sprintf("%v", this.Gt), "Duration", "types.Duration", 1) + `,`,
		`Gte:` + strings.Replace(fmt.Sprintf("%v", this.Gte), "Duration", "types.Duration", 1) + `,`,
		`In:` + repeatedStringForIn + `,`,
		`NotIn:` + repeatedStringForNotIn + `,`,
		`}`,
	}, "")
	return s
}
func (this *TimestampRules) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TimestampRules{`,
		`Required:` + fmt.Sprintf("%v", this.Required) + `,`,
		`Const:` + strings.Replace(fmt.Sprintf("%v", this.Const), "Timestamp", "types.Timestamp", 1) + `,`,
		`Lt:` + strings.Replace(fmt.Sprintf("%v", this.Lt), "Timestamp", "types.Timestamp", 1) + `,`,
		`Lte:` + strings.Replace(fmt.Sprintf("%v", this.Lte), "Timestamp", "types.Timestamp", 1) + `,`,
		`Gt:` + strings.Replace(fmt.Sprintf("%v", this.Gt), "Timestamp", "types.Timestamp", 1) + `,`,
		`Gte:` + strings.Replace(fmt.Sprintf("%v", this.Gte), "Timestamp", "types.Timestamp", 1) + `,`,
		`LtNow:` + fmt.Sprintf("%v", this.LtNow) + `,`,
		`GtNow:` + fmt.Sprintf("%v", this.GtNow) + `,`,
		`Within:` + strings.Replace(fmt.Sprintf("%v", this.Within), "Duration", "types.Duration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringValidate(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *FieldRules) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FieldRules: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FieldRules: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Float", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FloatRules{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &FieldRules_Float{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Double", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DoubleRules{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &FieldRules_Double{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int32", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Int32Rules{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &FieldRules_Int32{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Int64Rules{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &FieldRules_Int64{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uint32", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UInt32Rules{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &FieldRules_Uint32{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uint64", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UInt64Rules{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &FieldRules_Uint64{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sint32", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SInt32Rules{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &FieldRules_Sint32{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sint64", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SInt64Rules{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &FieldRules_Sint64{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fixed32", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Fixed32Rules{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &FieldRules_Fixed32{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fixed64", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Fixed64Rules{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &FieldRules_Fixed64{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sfixed32", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SFixed32Rules{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &FieldRules_Sfixed32{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sfixed64", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SFixed64Rules{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &FieldRules_Sfixed64{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BoolRules{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &FieldRules_Bool{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field String_", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &StringRules{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &FieldRules_String_{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BytesRules{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &FieldRules_Bytes{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enum", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EnumRules{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &FieldRules_Enum{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MessageRules{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &FieldRules_Message{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Repeated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RepeatedRules{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &FieldRules_Repeated{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Map", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MapRules{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &FieldRules_Map{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Any", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AnyRules{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &FieldRules_Any{v}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DurationRules{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &FieldRules_Duration{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TimestampRules{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &FieldRules_Timestamp{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValidate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FloatRules) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FloatRules: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FloatRules: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Const", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Const = float32(math.Float32frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lt", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Lt = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lte", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Lte = float32(math.Float32frombits(v))
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gt", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Gt = float32(math.Float32frombits(v))
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gte", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Gte = float32(math.Float32frombits(v))
		case 6:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				v2 := float32(math.Float32frombits(v))
				m.In = append(m.In, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthValidate
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthValidate
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 4
				if elementCount != 0 && len(m.In) == 0 {
					m.In = make([]float32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					v2 := float32(math.Float32frombits(v))
					m.In = append(m.In, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field In", wireType)
			}
		case 7:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				v2 := float32(math.Float32frombits(v))
				m.NotIn = append(m.NotIn, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthValidate
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthValidate
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 4
				if elementCount != 0 && len(m.NotIn) == 0 {
					m.NotIn = make([]float32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					v2 := float32(math.Float32frombits(v))
					m.NotIn = append(m.NotIn, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NotIn", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipValidate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DoubleRules) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DoubleRules: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DoubleRules: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Const", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Const = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lt", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Lt = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lte", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Lte = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gt", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Gt = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gte", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Gte = float64(math.Float64frombits(v))
		case 6:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.In = append(m.In, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthValidate
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthValidate
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.In) == 0 {
					m.In = make([]float64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.In = append(m.In, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field In", wireType)
			}
		case 7:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.NotIn = append(m.NotIn, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthValidate
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthValidate
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.NotIn) == 0 {
					m.NotIn = make([]float64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.NotIn = append(m.NotIn, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NotIn", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipValidate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Int32Rules) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Int32Rules: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Int32Rules: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Const", wireType)
			}
			m.Const = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Const |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lt", wireType)
			}
			m.Lt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lt |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lte", wireType)
			}
			m.Lte = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lte |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gt", wireType)
			}
			m.Gt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gt |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gte", wireType)
			}
			m.Gte = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gte |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.In = append(m.In, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthValidate
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthValidate
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.In) == 0 {
					m.In = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowValidate
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.In = append(m.In, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field In", wireType)
			}
		case 7:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.NotIn = append(m.NotIn, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthValidate
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthValidate
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.NotIn) == 0 {
					m.NotIn = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowValidate
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.NotIn = append(m.NotIn, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NotIn", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipValidate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Int64Rules) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Int64Rules: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Int64Rules: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Const", wireType)
			}
			m.Const = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Const |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lt", wireType)
			}
			m.Lt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lte", wireType)
			}
			m.Lte = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lte |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gt", wireType)
			}
			m.Gt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gte", wireType)
			}
			m.Gte = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gte |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.In = append(m.In, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthValidate
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthValidate
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.In) == 0 {
					m.In = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowValidate
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.In = append(m.In, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field In", wireType)
			}
		case 7:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.NotIn = append(m.NotIn, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthValidate
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthValidate
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.NotIn) == 0 {
					m.NotIn = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowValidate
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.NotIn = append(m.NotIn, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NotIn", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipValidate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UInt32Rules) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UInt32Rules: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UInt32Rules: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Const", wireType)
			}
			m.Const = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Const |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lt", wireType)
			}
			m.Lt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lt |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lte", wireType)
			}
			m.Lte = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lte |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gt", wireType)
			}
			m.Gt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gt |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gte", wireType)
			}
			m.Gte = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gte |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.In = append(m.In, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthValidate
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthValidate
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.In) == 0 {
					m.In = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowValidate
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.In = append(m.In, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field In", wireType)
			}
		case 7:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.NotIn = append(m.NotIn, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthValidate
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthValidate
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.NotIn) == 0 {
					m.NotIn = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowValidate
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.NotIn = append(m.NotIn, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NotIn", wireType)
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ranges", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ranges = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotInRanges", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotInRanges = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValidate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UInt64Rules) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UInt64Rules: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UInt64Rules: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Const", wireType)
			}
			m.Const = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Const |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lt", wireType)
			}
			m.Lt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lte", wireType)
			}
			m.Lte = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lte |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gt", wireType)
			}
			m.Gt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gte", wireType)
			}
			m.Gte = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gte |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.In = append(m.In, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthValidate
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthValidate
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.In) == 0 {
					m.In = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowValidate
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.In = append(m.In, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field In", wireType)
			}
		case 7:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.NotIn = append(m.NotIn, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthValidate
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthValidate
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.NotIn) == 0 {
					m.NotIn = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowValidate
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.NotIn = append(m.NotIn, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NotIn", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipValidate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SInt32Rules) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SInt32Rules: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SInt32Rules: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Const", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Const = v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lt", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Lt = v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lte", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Lte = v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gt", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Gt = v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gte", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Gte = v
		case 6:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
				m.In = append(m.In, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthValidate
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthValidate
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.In) == 0 {
					m.In = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowValidate
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
					m.In = append(m.In, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field In", wireType)
			}
		case 7:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
				m.NotIn = append(m.NotIn, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthValidate
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthValidate
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.NotIn) == 0 {
					m.NotIn = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowValidate
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
					m.NotIn = append(m.NotIn, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NotIn", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipValidate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SInt64Rules) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SInt64Rules: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SInt64Rules: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Const", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.Const = int64(v)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lt", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.Lt = int64(v)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lte", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.Lte = int64(v)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gt", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.Gt = int64(v)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gte", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.Gte = int64(v)
		case 6:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
				m.In = append(m.In, int64(v))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthValidate
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthValidate
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.In) == 0 {
					m.In = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowValidate
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
					m.In = append(m.In, int64(v))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field In", wireType)
			}
		case 7:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
				m.NotIn = append(m.NotIn, int64(v))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthValidate
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthValidate
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.NotIn) == 0 {
					m.NotIn = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowValidate
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
					m.NotIn = append(m.NotIn, int64(v))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NotIn", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipValidate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Fixed32Rules) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Fixed32Rules: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Fixed32Rules: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Const", wireType)
			}
			m.Const = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Const = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lt", wireType)
			}
			m.Lt = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Lt = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lte", wireType)
			}
			m.Lte = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Lte = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gt", wireType)
			}
			m.Gt = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Gt = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gte", wireType)
			}
			m.Gte = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Gte = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 6:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				m.In = append(m.In, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthValidate
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthValidate
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 4
				if elementCount != 0 && len(m.In) == 0 {
					m.In = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					m.In = append(m.In, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field In", wireType)
			}
		case 7:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				m.NotIn = append(m.NotIn, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthValidate
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthValidate
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 4
				if elementCount != 0 && len(m.NotIn) == 0 {
					m.NotIn = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					m.NotIn = append(m.NotIn, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NotIn", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipValidate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Fixed64Rules) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Fixed64Rules: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Fixed64Rules: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Const", wireType)
			}
			m.Const = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Const = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lt", wireType)
			}
			m.Lt = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Lt = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lte", wireType)
			}
			m.Lte = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Lte = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gt", wireType)
			}
			m.Gt = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Gt = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gte", wireType)
			}
			m.Gte = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Gte = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 6:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				m.In = append(m.In, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthValidate
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthValidate
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.In) == 0 {
					m.In = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					m.In = append(m.In, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field In", wireType)
			}
		case 7:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				m.NotIn = append(m.NotIn, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthValidate
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthValidate
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.NotIn) == 0 {
					m.NotIn = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					m.NotIn = append(m.NotIn, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NotIn", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipValidate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SFixed32Rules) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SFixed32Rules: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SFixed32Rules: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Const", wireType)
			}
			m.Const = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Const = int32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lt", wireType)
			}
			m.Lt = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Lt = int32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lte", wireType)
			}
			m.Lte = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Lte = int32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gt", wireType)
			}
			m.Gt = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Gt = int32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gte", wireType)
			}
			m.Gte = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Gte = int32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 6:
			if wireType == 5 {
				var v int32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				v = int32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				m.In = append(m.In, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthValidate
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthValidate
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 4
				if elementCount != 0 && len(m.In) == 0 {
					m.In = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					v = int32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					m.In = append(m.In, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field In", wireType)
			}
		case 7:
			if wireType == 5 {
				var v int32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				v = int32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				m.NotIn = append(m.NotIn, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthValidate
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthValidate
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 4
				if elementCount != 0 && len(m.NotIn) == 0 {
					m.NotIn = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					v = int32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					m.NotIn = append(m.NotIn, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NotIn", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipValidate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SFixed64Rules) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SFixed64Rules: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SFixed64Rules: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Const", wireType)
			}
			m.Const = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Const = int64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lt", wireType)
			}
			m.Lt = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Lt = int64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lte", wireType)
			}
			m.Lte = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Lte = int64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gt", wireType)
			}
			m.Gt = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Gt = int64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gte", wireType)
			}
			m.Gte = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Gte = int64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 6:
			if wireType == 1 {
				var v int64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = int64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				m.In = append(m.In, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthValidate
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthValidate
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.In) == 0 {
					m.In = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = int64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					m.In = append(m.In, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field In", wireType)
			}
		case 7:
			if wireType == 1 {
				var v int64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = int64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				m.NotIn = append(m.NotIn, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthValidate
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthValidate
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.NotIn) == 0 {
					m.NotIn = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = int64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					m.NotIn = append(m.NotIn, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NotIn", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipValidate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BoolRules) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BoolRules: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BoolRules: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Const", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Const = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipValidate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StringRules) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StringRules: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StringRules: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Const", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Const = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinLen", wireType)
			}
			m.MinLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxLen", wireType)
			}
			m.MaxLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinBytes", wireType)
			}
			m.MinBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinBytes |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxBytes", wireType)
			}
			m.MaxBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxBytes |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pattern", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pattern = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suffix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Suffix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contains = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field In", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.In = append(m.In, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotIn = append(m.NotIn, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WellKnown = &StringRules_Email{b}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WellKnown = &StringRules_Hostname{b}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WellKnown = &StringRules_Ip{b}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv4", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WellKnown = &StringRules_Ipv4{b}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv6", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WellKnown = &StringRules_Ipv6{b}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WellKnown = &StringRules_Uri{b}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UriRef", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WellKnown = &StringRules_UriRef{b}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Len", wireType)
			}
			m.Len = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Len |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LenBytes", wireType)
			}
			m.LenBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LenBytes |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpPrefix", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WellKnown = &StringRules_IpPrefix{b}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortRange", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WellKnown = &StringRules_PortRange{b}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mac", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WellKnown = &StringRules_Mac{b}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Regex", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WellKnown = &StringRules_Regex{b}
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpHeaderField", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WellKnown = &StringRules_HttpHeaderField{b}
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field K8SLabelValue", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WellKnown = &StringRules_K8SLabelValue{b}
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotEmpty", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WellKnown = &StringRules_NotEmpty{b}
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostport", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WellKnown = &StringRules_Hostport{b}
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsonPath", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WellKnown = &StringRules_JsonPath{b}
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hex", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WellKnown = &StringRules_Hex{b}
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv4Prefix", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WellKnown = &StringRules_Ipv4Prefix{b}
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv6Prefix", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WellKnown = &StringRules_Ipv6Prefix{b}
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VhDomain", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WellKnown = &StringRules_VhDomain{b}
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinIpPrefixLength", wireType)
			}
			m.MinIpPrefixLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinIpPrefixLength |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxIpPrefixLength", wireType)
			}
			m.MaxIpPrefixLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxIpPrefixLength |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 36:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VesObjectName", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WellKnown = &StringRules_VesObjectName{b}
		case 37:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IanaSvcName", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WellKnown = &StringRules_IanaSvcName{b}
		case 38:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dns_1123Label", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WellKnown = &StringRules_Dns_1123Label{b}
		case 39:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnixFilePath", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WellKnown = &StringRules_UnixFilePath{b}
		case 40:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WellKnown = &StringRules_PhoneNumber{b}
		case 41:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortRangeList", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WellKnown = &StringRules_PortRangeList{b}
		case 42:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VhDomainNoPort", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WellKnown = &StringRules_VhDomainNoPort{b}
		case 43:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostnameOrIp", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WellKnown = &StringRules_HostnameOrIp{b}
		case 44:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field K8SLabelSelector", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WellKnown = &StringRules_K8SLabelSelector{b}
		case 45:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpPath", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WellKnown = &StringRules_HttpPath{b}
		case 46:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeInterval", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WellKnown = &StringRules_TimeInterval{b}
		case 60:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinTimeInterval", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinTimeInterval = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 61:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTimeInterval", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxTimeInterval = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValidate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BytesRules) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BytesRules: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BytesRules: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Const", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthValidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Const = append(m.Const[:0], dAtA[iNdEx:postIndex]...)
			if m.Const == nil {
				m.Const = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinLen", wireType)
			}
			m.MinLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxLen", wireType)
			}
			m.MaxLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pattern", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pattern = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthValidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = append(m.Prefix[:0], dAtA[iNdEx:postIndex]...)
			if m.Prefix == nil {
				m.Prefix = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suffix", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthValidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Suffix = append(m.Suffix[:0], dAtA[iNdEx:postIndex]...)
			if m.Suffix == nil {
				m.Suffix = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contains", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthValidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contains = append(m.Contains[:0], dAtA[iNdEx:postIndex]...)
			if m.Contains == nil {
				m.Contains = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field In", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthValidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.In = append(m.In, make([]byte, postIndex-iNdEx))
			copy(m.In[len(m.In)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotIn", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthValidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotIn = append(m.NotIn, make([]byte, postIndex-iNdEx))
			copy(m.NotIn[len(m.NotIn)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WellKnown = &BytesRules_Ip{b}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv4", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WellKnown = &BytesRules_Ipv4{b}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv6", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WellKnown = &BytesRules_Ipv6{b}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Len", wireType)
			}
			m.Len = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Len |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipValidate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnumRules) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnumRules: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnumRules: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Const", wireType)
			}
			m.Const = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Const |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefinedOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DefinedOnly = bool(v != 0)
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.In = append(m.In, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthValidate
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthValidate
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.In) == 0 {
					m.In = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowValidate
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.In = append(m.In, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field In", wireType)
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.NotIn = append(m.NotIn, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthValidate
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthValidate
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.NotIn) == 0 {
					m.NotIn = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowValidate
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.NotIn = append(m.NotIn, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NotIn", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipValidate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageRules) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageRules: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageRules: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Skip", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Skip = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Required", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Required = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredOneof", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RequiredOneof = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredOneNonzeroField", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RequiredOneNonzeroField = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipValidate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RepeatedRules) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RepeatedRules: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RepeatedRules: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinItems", wireType)
			}
			m.MinItems = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinItems |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxItems", wireType)
			}
			m.MaxItems = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxItems |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unique", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Unique = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Items == nil {
				m.Items = &FieldRules{}
			}
			if err := m.Items.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumItems", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NumItems = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueMetadataName", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UniqueMetadataName = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipValidate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapRules) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MapRules: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MapRules: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinPairs", wireType)
			}
			m.MinPairs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinPairs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPairs", wireType)
			}
			m.MaxPairs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxPairs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoSparse", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoSparse = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Keys == nil {
				m.Keys = &FieldRules{}
			}
			if err := m.Keys.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Values == nil {
				m.Values = &FieldRules{}
			}
			if err := m.Values.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueValues", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UniqueValues = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipValidate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnyRules) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnyRules: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnyRules: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Required", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Required = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field In", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.In = append(m.In, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotIn = append(m.NotIn, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValidate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DurationRules) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DurationRules: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DurationRules: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Required", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Required = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Const", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Const == nil {
				m.Const = &types.Duration{}
			}
			if err := m.Const.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Lt == nil {
				m.Lt = &types.Duration{}
			}
			if err := m.Lt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lte", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Lte == nil {
				m.Lte = &types.Duration{}
			}
			if err := m.Lte.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Gt == nil {
				m.Gt = &types.Duration{}
			}
			if err := m.Gt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gte", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Gte == nil {
				m.Gte = &types.Duration{}
			}
			if err := m.Gte.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field In", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.In = append(m.In, &types.Duration{})
			if err := m.In[len(m.In)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotIn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotIn = append(m.NotIn, &types.Duration{})
			if err := m.NotIn[len(m.NotIn)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValidate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimestampRules) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimestampRules: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimestampRules: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Required", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Required = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Const", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Const == nil {
				m.Const = &types.Timestamp{}
			}
			if err := m.Const.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Lt == nil {
				m.Lt = &types.Timestamp{}
			}
			if err := m.Lt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lte", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Lte == nil {
				m.Lte = &types.Timestamp{}
			}
			if err := m.Lte.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Gt == nil {
				m.Gt = &types.Timestamp{}
			}
			if err := m.Gt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gte", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Gte == nil {
				m.Gte = &types.Timestamp{}
			}
			if err := m.Gte.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LtNow", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LtNow = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GtNow", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GtNow = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Within", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Within == nil {
				m.Within = &types.Duration{}
			}
			if err := m.Within.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValidate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValidate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipValidate(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowValidate
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValidate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthValidate
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupValidate
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthValidate
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthValidate        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowValidate          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupValidate = fmt.Errorf("proto: unexpected end of group")
)

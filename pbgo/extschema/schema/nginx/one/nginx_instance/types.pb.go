// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/nginx/one/nginx_instance/types.proto

package nginx_instance

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type WAFSpec struct {
	// policy_file_name
	//
	// x-displayName: "PolicyFileName"
	// x-required
	// Policy file name for WAF
	PolicyFileName string `protobuf:"bytes,1,opt,name=policy_file_name,json=policyFileName,proto3" json:"policy_file_name,omitempty"`
	// security_log_enabled
	//
	// x-displayName: "SecurityLogEnabled"
	// Specifies if security logging is enabled
	SecurityLogEnabled bool `protobuf:"varint,2,opt,name=security_log_enabled,json=securityLogEnabled,proto3" json:"security_log_enabled,omitempty"`
	// security_log_file_names
	//
	// x-displayName: "SecurityLogFileNames"
	// Specifies the list of security log files specification
	SecurityLogFileNames []string `protobuf:"bytes,3,rep,name=security_log_file_names,json=securityLogFileNames,proto3" json:"security_log_file_names,omitempty"`
}

func (m *WAFSpec) Reset()      { *m = WAFSpec{} }
func (*WAFSpec) ProtoMessage() {}
func (*WAFSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_81952ecda4aa273b, []int{0}
}
func (m *WAFSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WAFSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *WAFSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WAFSpec.Merge(m, src)
}
func (m *WAFSpec) XXX_Size() int {
	return m.Size()
}
func (m *WAFSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_WAFSpec.DiscardUnknown(m)
}

var xxx_messageInfo_WAFSpec proto.InternalMessageInfo

func (m *WAFSpec) GetPolicyFileName() string {
	if m != nil {
		return m.PolicyFileName
	}
	return ""
}

func (m *WAFSpec) GetSecurityLogEnabled() bool {
	if m != nil {
		return m.SecurityLogEnabled
	}
	return false
}

func (m *WAFSpec) GetSecurityLogFileNames() []string {
	if m != nil {
		return m.SecurityLogFileNames
	}
	return nil
}

type APIDiscoverySpec struct {
	// enablement_mode
	//
	// x-displayName: "EnablementMode"
	// x-required
	// Enforcement mode for the API Discovery policy
	//
	// Types that are valid to be assigned to EnablementMode:
	//	*APIDiscoverySpec_Disabled
	//	*APIDiscoverySpec_Enabled
	EnablementMode isAPIDiscoverySpec_EnablementMode `protobuf_oneof:"enablement_mode"`
}

func (m *APIDiscoverySpec) Reset()      { *m = APIDiscoverySpec{} }
func (*APIDiscoverySpec) ProtoMessage() {}
func (*APIDiscoverySpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_81952ecda4aa273b, []int{1}
}
func (m *APIDiscoverySpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *APIDiscoverySpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *APIDiscoverySpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APIDiscoverySpec.Merge(m, src)
}
func (m *APIDiscoverySpec) XXX_Size() int {
	return m.Size()
}
func (m *APIDiscoverySpec) XXX_DiscardUnknown() {
	xxx_messageInfo_APIDiscoverySpec.DiscardUnknown(m)
}

var xxx_messageInfo_APIDiscoverySpec proto.InternalMessageInfo

type isAPIDiscoverySpec_EnablementMode interface {
	isAPIDiscoverySpec_EnablementMode()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type APIDiscoverySpec_Disabled struct {
	Disabled *schema.Empty `protobuf:"bytes,2,opt,name=disabled,proto3,oneof" json:"disabled,omitempty"`
}
type APIDiscoverySpec_Enabled struct {
	Enabled *schema.Empty `protobuf:"bytes,3,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
}

func (*APIDiscoverySpec_Disabled) isAPIDiscoverySpec_EnablementMode() {}
func (*APIDiscoverySpec_Enabled) isAPIDiscoverySpec_EnablementMode()  {}

func (m *APIDiscoverySpec) GetEnablementMode() isAPIDiscoverySpec_EnablementMode {
	if m != nil {
		return m.EnablementMode
	}
	return nil
}

func (m *APIDiscoverySpec) GetDisabled() *schema.Empty {
	if x, ok := m.GetEnablementMode().(*APIDiscoverySpec_Disabled); ok {
		return x.Disabled
	}
	return nil
}

func (m *APIDiscoverySpec) GetEnabled() *schema.Empty {
	if x, ok := m.GetEnablementMode().(*APIDiscoverySpec_Enabled); ok {
		return x.Enabled
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*APIDiscoverySpec) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*APIDiscoverySpec_Disabled)(nil),
		(*APIDiscoverySpec_Enabled)(nil),
	}
}

// GlobalSpecType
//
// x-displayName: "Specification"
type GlobalSpecType struct {
	// wafSpec
	//
	// x-displayName: "WAFSpec"
	// If specified, the value signifies the WAF configuration in the global context
	WafSpec *WAFSpec `protobuf:"bytes,4,opt,name=waf_spec,json=wafSpec,proto3" json:"waf_spec,omitempty"`
	// apiDiscoverySpec
	//
	// x-displayName: "APIDiscoverySpec"
	// If specified, the value signifies the apiDiscovery configuration
	// in the global context
	ApiDiscoverySpec *APIDiscoverySpec `protobuf:"bytes,5,opt,name=api_discovery_spec,json=apiDiscoverySpec,proto3" json:"api_discovery_spec,omitempty"`
	// dataplaneIdentifier
	//
	// x-displayName: "DataplaneIdentifier"
	// Dataplane identifier - individual instance or cluster
	DataplaneId *DataplaneIdentifier `protobuf:"bytes,8,opt,name=dataplane_id,json=dataplaneId,proto3" json:"dataplane_id,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_81952ecda4aa273b, []int{2}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

func (m *GlobalSpecType) GetWafSpec() *WAFSpec {
	if m != nil {
		return m.WafSpec
	}
	return nil
}

func (m *GlobalSpecType) GetApiDiscoverySpec() *APIDiscoverySpec {
	if m != nil {
		return m.ApiDiscoverySpec
	}
	return nil
}

func (m *GlobalSpecType) GetDataplaneId() *DataplaneIdentifier {
	if m != nil {
		return m.DataplaneId
	}
	return nil
}

type DataplaneIdentifier struct {
	// dataplane_id
	//
	// x-displayName: "Dataplane Identifier"
	// x-required
	// Dataplane identifier - individual instance or cluster
	//
	// Types that are valid to be assigned to DataplaneId:
	//	*DataplaneIdentifier_InstanceObjectId
	//	*DataplaneIdentifier_ClusterObjectId
	DataplaneId isDataplaneIdentifier_DataplaneId `protobuf_oneof:"dataplane_id"`
}

func (m *DataplaneIdentifier) Reset()      { *m = DataplaneIdentifier{} }
func (*DataplaneIdentifier) ProtoMessage() {}
func (*DataplaneIdentifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_81952ecda4aa273b, []int{3}
}
func (m *DataplaneIdentifier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataplaneIdentifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DataplaneIdentifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataplaneIdentifier.Merge(m, src)
}
func (m *DataplaneIdentifier) XXX_Size() int {
	return m.Size()
}
func (m *DataplaneIdentifier) XXX_DiscardUnknown() {
	xxx_messageInfo_DataplaneIdentifier.DiscardUnknown(m)
}

var xxx_messageInfo_DataplaneIdentifier proto.InternalMessageInfo

type isDataplaneIdentifier_DataplaneId interface {
	isDataplaneIdentifier_DataplaneId()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type DataplaneIdentifier_InstanceObjectId struct {
	InstanceObjectId string `protobuf:"bytes,2,opt,name=instance_object_id,json=instanceObjectId,proto3,oneof" json:"instance_object_id,omitempty"`
}
type DataplaneIdentifier_ClusterObjectId struct {
	ClusterObjectId string `protobuf:"bytes,3,opt,name=cluster_object_id,json=clusterObjectId,proto3,oneof" json:"cluster_object_id,omitempty"`
}

func (*DataplaneIdentifier_InstanceObjectId) isDataplaneIdentifier_DataplaneId() {}
func (*DataplaneIdentifier_ClusterObjectId) isDataplaneIdentifier_DataplaneId()  {}

func (m *DataplaneIdentifier) GetDataplaneId() isDataplaneIdentifier_DataplaneId {
	if m != nil {
		return m.DataplaneId
	}
	return nil
}

func (m *DataplaneIdentifier) GetInstanceObjectId() string {
	if x, ok := m.GetDataplaneId().(*DataplaneIdentifier_InstanceObjectId); ok {
		return x.InstanceObjectId
	}
	return ""
}

func (m *DataplaneIdentifier) GetClusterObjectId() string {
	if x, ok := m.GetDataplaneId().(*DataplaneIdentifier_ClusterObjectId); ok {
		return x.ClusterObjectId
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DataplaneIdentifier) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DataplaneIdentifier_InstanceObjectId)(nil),
		(*DataplaneIdentifier_ClusterObjectId)(nil),
	}
}

// Get NGINX instance configuration
//
// x-displayName: "Get Request"
// Get NGINX instance configuration
type GetSpecType struct {
	WafSpec          *WAFSpec             `protobuf:"bytes,4,opt,name=waf_spec,json=wafSpec,proto3" json:"waf_spec,omitempty"`
	ApiDiscoverySpec *APIDiscoverySpec    `protobuf:"bytes,5,opt,name=api_discovery_spec,json=apiDiscoverySpec,proto3" json:"api_discovery_spec,omitempty"`
	DataplaneId      *DataplaneIdentifier `protobuf:"bytes,8,opt,name=dataplane_id,json=dataplaneId,proto3" json:"dataplane_id,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_81952ecda4aa273b, []int{4}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

func (m *GetSpecType) GetWafSpec() *WAFSpec {
	if m != nil {
		return m.WafSpec
	}
	return nil
}

func (m *GetSpecType) GetApiDiscoverySpec() *APIDiscoverySpec {
	if m != nil {
		return m.ApiDiscoverySpec
	}
	return nil
}

func (m *GetSpecType) GetDataplaneId() *DataplaneIdentifier {
	if m != nil {
		return m.DataplaneId
	}
	return nil
}

func init() {
	proto.RegisterType((*WAFSpec)(nil), "ves.io.schema.nginx.one.nginx_instance.WAFSpec")
	proto.RegisterType((*APIDiscoverySpec)(nil), "ves.io.schema.nginx.one.nginx_instance.APIDiscoverySpec")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.nginx.one.nginx_instance.GlobalSpecType")
	proto.RegisterType((*DataplaneIdentifier)(nil), "ves.io.schema.nginx.one.nginx_instance.DataplaneIdentifier")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.nginx.one.nginx_instance.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/nginx/one/nginx_instance/types.proto", fileDescriptor_81952ecda4aa273b)
}

var fileDescriptor_81952ecda4aa273b = []byte{
	// 685 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x55, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xf5, 0x24, 0xfe, 0x1a, 0x77, 0xfa, 0xa9, 0x75, 0x4d, 0x24, 0x42, 0x8b, 0x4c, 0x94, 0x05,
	0xca, 0x82, 0xda, 0x55, 0x11, 0x12, 0x02, 0x09, 0xa9, 0x55, 0x7f, 0x23, 0x04, 0xc8, 0x20, 0x21,
	0x21, 0x84, 0x35, 0xb1, 0x6f, 0xdc, 0x01, 0xdb, 0x63, 0x79, 0x26, 0x69, 0xbd, 0xe3, 0x0d, 0x60,
	0xc5, 0x06, 0x1e, 0x80, 0x77, 0xe8, 0x06, 0xb1, 0x42, 0xac, 0x22, 0x56, 0x5d, 0x52, 0x77, 0xc3,
	0xb2, 0x8f, 0x80, 0x6a, 0xc7, 0x6d, 0x5c, 0xa0, 0xf4, 0x01, 0xd8, 0x5d, 0xcf, 0x39, 0xe7, 0x9e,
	0x3b, 0x73, 0x46, 0x63, 0xbc, 0x34, 0x00, 0x6e, 0x50, 0x66, 0x72, 0x67, 0x1b, 0x02, 0x62, 0x86,
	0x1e, 0x0d, 0x77, 0x4d, 0x16, 0x42, 0x5e, 0xd9, 0x34, 0xe4, 0x82, 0x84, 0x0e, 0x98, 0x22, 0x89,
	0x80, 0x1b, 0x51, 0xcc, 0x04, 0xd3, 0xae, 0xe7, 0x1a, 0x23, 0xd7, 0x18, 0x19, 0xd3, 0x60, 0x21,
	0x18, 0x65, 0xcd, 0xdc, 0x82, 0x47, 0xc5, 0x76, 0xbf, 0x6b, 0x38, 0x2c, 0x30, 0x3d, 0xe6, 0x31,
	0x33, 0x93, 0x77, 0xfb, 0xbd, 0xec, 0x2b, 0xfb, 0xc8, 0xaa, 0xbc, 0xed, 0xdc, 0x15, 0x8f, 0x31,
	0xcf, 0x87, 0x53, 0x16, 0x09, 0x93, 0x11, 0x34, 0x5f, 0x9e, 0x92, 0x45, 0x82, 0xb2, 0x90, 0x17,
	0xba, 0x32, 0x38, 0x36, 0xe9, 0xdc, 0xd5, 0x32, 0x34, 0x20, 0x3e, 0x75, 0x89, 0x80, 0x11, 0xda,
	0x3c, 0x83, 0x52, 0xd8, 0xb1, 0xcb, 0xad, 0xaf, 0xfd, 0xca, 0xe0, 0xe3, 0x06, 0xad, 0x0f, 0x08,
	0xd7, 0x9e, 0x2e, 0xaf, 0x3f, 0x8e, 0xc0, 0xd1, 0xda, 0x58, 0x8d, 0x98, 0x4f, 0x9d, 0xc4, 0xee,
	0x51, 0x1f, 0xec, 0x90, 0x04, 0xd0, 0x40, 0x4d, 0xd4, 0x9e, 0xb4, 0xa6, 0xf3, 0xf5, 0x75, 0xea,
	0xc3, 0x03, 0x12, 0x80, 0xb6, 0x88, 0xeb, 0x1c, 0x9c, 0x7e, 0x4c, 0x45, 0x62, 0xfb, 0xcc, 0xb3,
	0x21, 0x24, 0x5d, 0x1f, 0xdc, 0x46, 0xa5, 0x89, 0xda, 0x8a, 0xa5, 0x15, 0xd8, 0x7d, 0xe6, 0xad,
	0xe5, 0x88, 0x76, 0x0b, 0x5f, 0x2e, 0x29, 0x4e, 0x1c, 0x78, 0xa3, 0xda, 0xac, 0xb6, 0x27, 0xad,
	0xfa, 0x98, 0xa8, 0xf0, 0xe1, 0xad, 0xf7, 0x08, 0xab, 0xcb, 0x8f, 0xb6, 0x56, 0x29, 0x77, 0xd8,
	0x00, 0xe2, 0x24, 0x9b, 0x73, 0x09, 0x2b, 0x2e, 0xe5, 0xa7, 0x8e, 0x53, 0x4b, 0x75, 0xa3, 0x9c,
	0xe8, 0x5a, 0x10, 0x89, 0x64, 0x53, 0xb2, 0x4e, 0x78, 0xda, 0x22, 0xae, 0x15, 0x43, 0x56, 0xcf,
	0x95, 0x14, 0xb4, 0x95, 0x79, 0x3c, 0x93, 0x97, 0x01, 0x84, 0xc2, 0x0e, 0x98, 0x0b, 0x9a, 0xf2,
	0x69, 0x0f, 0x55, 0x86, 0x7b, 0x08, 0x75, 0x64, 0x05, 0xa9, 0x95, 0xd6, 0xe7, 0x0a, 0x9e, 0xde,
	0xf0, 0x59, 0x97, 0xf8, 0xc7, 0x73, 0x3d, 0x49, 0x22, 0xd0, 0x3a, 0x58, 0xd9, 0x21, 0x3d, 0x9b,
	0x47, 0xe0, 0x34, 0xe4, 0xcc, 0xc8, 0x34, 0x2e, 0x76, 0xdb, 0x8c, 0x51, 0x0c, 0x56, 0x6d, 0x87,
	0xf4, 0xb2, 0x7d, 0xf6, 0xb0, 0x46, 0x22, 0x6a, 0xbb, 0xc5, 0xe6, 0xf3, 0xae, 0xff, 0x65, 0x5d,
	0x6f, 0x5f, 0xb4, 0xeb, 0xd9, 0xd3, 0xb3, 0x54, 0x12, 0xd1, 0xf2, 0x79, 0xbe, 0xc0, 0xff, 0xbb,
	0x44, 0x90, 0xc8, 0x27, 0x21, 0xd8, 0xd4, 0x6d, 0x28, 0x99, 0xc3, 0xdd, 0x8b, 0x3a, 0xac, 0x16,
	0xda, 0x2d, 0x17, 0x42, 0x41, 0x7b, 0x14, 0x62, 0x6b, 0xca, 0x3d, 0x5d, 0xcc, 0x0f, 0xab, 0x23,
	0x2b, 0x15, 0xb5, 0xda, 0x91, 0x95, 0xaa, 0x2a, 0x77, 0x64, 0x65, 0x42, 0xad, 0x75, 0x64, 0xa5,
	0xa6, 0x2a, 0xad, 0x37, 0x08, 0x5f, 0xfa, 0x4d, 0x0b, 0xcd, 0xc0, 0x5a, 0x61, 0x61, 0xb3, 0xee,
	0x4b, 0x70, 0xc4, 0xf1, 0x6c, 0xc7, 0x79, 0x4f, 0x6e, 0x4a, 0x96, 0x5a, 0x60, 0x0f, 0x33, 0x68,
	0xcb, 0xd5, 0x6e, 0xe0, 0x59, 0xc7, 0xef, 0x73, 0x01, 0xf1, 0x18, 0xbd, 0x3a, 0xa2, 0xcf, 0x8c,
	0xa0, 0x82, 0xbd, 0x52, 0x2f, 0xef, 0x59, 0x93, 0xc7, 0x62, 0xfd, 0x56, 0xc1, 0x53, 0x1b, 0x20,
	0xfe, 0x65, 0xfa, 0xe7, 0x4c, 0xef, 0xcc, 0x7e, 0xbd, 0x77, 0xe6, 0xea, 0x9f, 0x1f, 0xf3, 0xca,
	0x3b, 0x34, 0x3c, 0xd0, 0xa5, 0xfd, 0x03, 0x5d, 0x3a, 0x3a, 0xd0, 0xd1, 0xeb, 0x54, 0x47, 0x1f,
	0x53, 0x1d, 0x7d, 0x49, 0x75, 0x34, 0x4c, 0x75, 0xb4, 0x9f, 0xea, 0xe8, 0x7b, 0xaa, 0xa3, 0x1f,
	0xa9, 0x2e, 0x1d, 0xa5, 0x3a, 0x7a, 0x7b, 0xa8, 0x4b, 0xc3, 0x43, 0x5d, 0xda, 0x3f, 0xd4, 0xa5,
	0x67, 0xcf, 0x3d, 0x16, 0xbd, 0xf2, 0x8c, 0x01, 0xf3, 0x05, 0xc4, 0x31, 0x31, 0xfa, 0xdc, 0xcc,
	0x8a, 0x1e, 0x8b, 0x83, 0x85, 0x28, 0x66, 0x03, 0xea, 0x42, 0xbc, 0x50, 0xc0, 0x66, 0xd4, 0xf5,
	0x98, 0x09, 0xbb, 0x62, 0xf4, 0xe6, 0xfd, 0xe5, 0xc7, 0xd0, 0x9d, 0xc8, 0x1e, 0xc2, 0x9b, 0x3f,
	0x03, 0x00, 0x00, 0xff, 0xff, 0x3f, 0x4c, 0x89, 0xa0, 0x49, 0x06, 0x00, 0x00,
}

func (this *WAFSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WAFSpec)
	if !ok {
		that2, ok := that.(WAFSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PolicyFileName != that1.PolicyFileName {
		return false
	}
	if this.SecurityLogEnabled != that1.SecurityLogEnabled {
		return false
	}
	if len(this.SecurityLogFileNames) != len(that1.SecurityLogFileNames) {
		return false
	}
	for i := range this.SecurityLogFileNames {
		if this.SecurityLogFileNames[i] != that1.SecurityLogFileNames[i] {
			return false
		}
	}
	return true
}
func (this *APIDiscoverySpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIDiscoverySpec)
	if !ok {
		that2, ok := that.(APIDiscoverySpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.EnablementMode == nil {
		if this.EnablementMode != nil {
			return false
		}
	} else if this.EnablementMode == nil {
		return false
	} else if !this.EnablementMode.Equal(that1.EnablementMode) {
		return false
	}
	return true
}
func (this *APIDiscoverySpec_Disabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIDiscoverySpec_Disabled)
	if !ok {
		that2, ok := that.(APIDiscoverySpec_Disabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Disabled.Equal(that1.Disabled) {
		return false
	}
	return true
}
func (this *APIDiscoverySpec_Enabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIDiscoverySpec_Enabled)
	if !ok {
		that2, ok := that.(APIDiscoverySpec_Enabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Enabled.Equal(that1.Enabled) {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.WafSpec.Equal(that1.WafSpec) {
		return false
	}
	if !this.ApiDiscoverySpec.Equal(that1.ApiDiscoverySpec) {
		return false
	}
	if !this.DataplaneId.Equal(that1.DataplaneId) {
		return false
	}
	return true
}
func (this *DataplaneIdentifier) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DataplaneIdentifier)
	if !ok {
		that2, ok := that.(DataplaneIdentifier)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.DataplaneId == nil {
		if this.DataplaneId != nil {
			return false
		}
	} else if this.DataplaneId == nil {
		return false
	} else if !this.DataplaneId.Equal(that1.DataplaneId) {
		return false
	}
	return true
}
func (this *DataplaneIdentifier_InstanceObjectId) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DataplaneIdentifier_InstanceObjectId)
	if !ok {
		that2, ok := that.(DataplaneIdentifier_InstanceObjectId)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.InstanceObjectId != that1.InstanceObjectId {
		return false
	}
	return true
}
func (this *DataplaneIdentifier_ClusterObjectId) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DataplaneIdentifier_ClusterObjectId)
	if !ok {
		that2, ok := that.(DataplaneIdentifier_ClusterObjectId)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClusterObjectId != that1.ClusterObjectId {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.WafSpec.Equal(that1.WafSpec) {
		return false
	}
	if !this.ApiDiscoverySpec.Equal(that1.ApiDiscoverySpec) {
		return false
	}
	if !this.DataplaneId.Equal(that1.DataplaneId) {
		return false
	}
	return true
}
func (this *WAFSpec) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&nginx_instance.WAFSpec{")
	s = append(s, "PolicyFileName: "+fmt.Sprintf("%#v", this.PolicyFileName)+",\n")
	s = append(s, "SecurityLogEnabled: "+fmt.Sprintf("%#v", this.SecurityLogEnabled)+",\n")
	s = append(s, "SecurityLogFileNames: "+fmt.Sprintf("%#v", this.SecurityLogFileNames)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *APIDiscoverySpec) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&nginx_instance.APIDiscoverySpec{")
	if this.EnablementMode != nil {
		s = append(s, "EnablementMode: "+fmt.Sprintf("%#v", this.EnablementMode)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *APIDiscoverySpec_Disabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nginx_instance.APIDiscoverySpec_Disabled{` +
		`Disabled:` + fmt.Sprintf("%#v", this.Disabled) + `}`}, ", ")
	return s
}
func (this *APIDiscoverySpec_Enabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nginx_instance.APIDiscoverySpec_Enabled{` +
		`Enabled:` + fmt.Sprintf("%#v", this.Enabled) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&nginx_instance.GlobalSpecType{")
	if this.WafSpec != nil {
		s = append(s, "WafSpec: "+fmt.Sprintf("%#v", this.WafSpec)+",\n")
	}
	if this.ApiDiscoverySpec != nil {
		s = append(s, "ApiDiscoverySpec: "+fmt.Sprintf("%#v", this.ApiDiscoverySpec)+",\n")
	}
	if this.DataplaneId != nil {
		s = append(s, "DataplaneId: "+fmt.Sprintf("%#v", this.DataplaneId)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DataplaneIdentifier) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&nginx_instance.DataplaneIdentifier{")
	if this.DataplaneId != nil {
		s = append(s, "DataplaneId: "+fmt.Sprintf("%#v", this.DataplaneId)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DataplaneIdentifier_InstanceObjectId) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nginx_instance.DataplaneIdentifier_InstanceObjectId{` +
		`InstanceObjectId:` + fmt.Sprintf("%#v", this.InstanceObjectId) + `}`}, ", ")
	return s
}
func (this *DataplaneIdentifier_ClusterObjectId) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nginx_instance.DataplaneIdentifier_ClusterObjectId{` +
		`ClusterObjectId:` + fmt.Sprintf("%#v", this.ClusterObjectId) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&nginx_instance.GetSpecType{")
	if this.WafSpec != nil {
		s = append(s, "WafSpec: "+fmt.Sprintf("%#v", this.WafSpec)+",\n")
	}
	if this.ApiDiscoverySpec != nil {
		s = append(s, "ApiDiscoverySpec: "+fmt.Sprintf("%#v", this.ApiDiscoverySpec)+",\n")
	}
	if this.DataplaneId != nil {
		s = append(s, "DataplaneId: "+fmt.Sprintf("%#v", this.DataplaneId)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *WAFSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WAFSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WAFSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SecurityLogFileNames) > 0 {
		for iNdEx := len(m.SecurityLogFileNames) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SecurityLogFileNames[iNdEx])
			copy(dAtA[i:], m.SecurityLogFileNames[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.SecurityLogFileNames[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.SecurityLogEnabled {
		i--
		if m.SecurityLogEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.PolicyFileName) > 0 {
		i -= len(m.PolicyFileName)
		copy(dAtA[i:], m.PolicyFileName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.PolicyFileName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *APIDiscoverySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APIDiscoverySpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APIDiscoverySpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EnablementMode != nil {
		{
			size := m.EnablementMode.Size()
			i -= size
			if _, err := m.EnablementMode.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *APIDiscoverySpec_Disabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APIDiscoverySpec_Disabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Disabled != nil {
		{
			size, err := m.Disabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *APIDiscoverySpec_Enabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APIDiscoverySpec_Enabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Enabled != nil {
		{
			size, err := m.Enabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DataplaneId != nil {
		{
			size, err := m.DataplaneId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.ApiDiscoverySpec != nil {
		{
			size, err := m.ApiDiscoverySpec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.WafSpec != nil {
		{
			size, err := m.WafSpec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}

func (m *DataplaneIdentifier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataplaneIdentifier) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataplaneIdentifier) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DataplaneId != nil {
		{
			size := m.DataplaneId.Size()
			i -= size
			if _, err := m.DataplaneId.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *DataplaneIdentifier_InstanceObjectId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataplaneIdentifier_InstanceObjectId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.InstanceObjectId)
	copy(dAtA[i:], m.InstanceObjectId)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.InstanceObjectId)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *DataplaneIdentifier_ClusterObjectId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataplaneIdentifier_ClusterObjectId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.ClusterObjectId)
	copy(dAtA[i:], m.ClusterObjectId)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.ClusterObjectId)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DataplaneId != nil {
		{
			size, err := m.DataplaneId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.ApiDiscoverySpec != nil {
		{
			size, err := m.ApiDiscoverySpec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.WafSpec != nil {
		{
			size, err := m.WafSpec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WAFSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PolicyFileName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.SecurityLogEnabled {
		n += 2
	}
	if len(m.SecurityLogFileNames) > 0 {
		for _, s := range m.SecurityLogFileNames {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *APIDiscoverySpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnablementMode != nil {
		n += m.EnablementMode.Size()
	}
	return n
}

func (m *APIDiscoverySpec_Disabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Disabled != nil {
		l = m.Disabled.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *APIDiscoverySpec_Enabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled != nil {
		l = m.Enabled.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WafSpec != nil {
		l = m.WafSpec.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ApiDiscoverySpec != nil {
		l = m.ApiDiscoverySpec.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.DataplaneId != nil {
		l = m.DataplaneId.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *DataplaneIdentifier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DataplaneId != nil {
		n += m.DataplaneId.Size()
	}
	return n
}

func (m *DataplaneIdentifier_InstanceObjectId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InstanceObjectId)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *DataplaneIdentifier_ClusterObjectId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClusterObjectId)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WafSpec != nil {
		l = m.WafSpec.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ApiDiscoverySpec != nil {
		l = m.ApiDiscoverySpec.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.DataplaneId != nil {
		l = m.DataplaneId.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *WAFSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WAFSpec{`,
		`PolicyFileName:` + fmt.Sprintf("%v", this.PolicyFileName) + `,`,
		`SecurityLogEnabled:` + fmt.Sprintf("%v", this.SecurityLogEnabled) + `,`,
		`SecurityLogFileNames:` + fmt.Sprintf("%v", this.SecurityLogFileNames) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIDiscoverySpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&APIDiscoverySpec{`,
		`EnablementMode:` + fmt.Sprintf("%v", this.EnablementMode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIDiscoverySpec_Disabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&APIDiscoverySpec_Disabled{`,
		`Disabled:` + strings.Replace(fmt.Sprintf("%v", this.Disabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIDiscoverySpec_Enabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&APIDiscoverySpec_Enabled{`,
		`Enabled:` + strings.Replace(fmt.Sprintf("%v", this.Enabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`WafSpec:` + strings.Replace(this.WafSpec.String(), "WAFSpec", "WAFSpec", 1) + `,`,
		`ApiDiscoverySpec:` + strings.Replace(this.ApiDiscoverySpec.String(), "APIDiscoverySpec", "APIDiscoverySpec", 1) + `,`,
		`DataplaneId:` + strings.Replace(this.DataplaneId.String(), "DataplaneIdentifier", "DataplaneIdentifier", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DataplaneIdentifier) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DataplaneIdentifier{`,
		`DataplaneId:` + fmt.Sprintf("%v", this.DataplaneId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DataplaneIdentifier_InstanceObjectId) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DataplaneIdentifier_InstanceObjectId{`,
		`InstanceObjectId:` + fmt.Sprintf("%v", this.InstanceObjectId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DataplaneIdentifier_ClusterObjectId) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DataplaneIdentifier_ClusterObjectId{`,
		`ClusterObjectId:` + fmt.Sprintf("%v", this.ClusterObjectId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`WafSpec:` + strings.Replace(this.WafSpec.String(), "WAFSpec", "WAFSpec", 1) + `,`,
		`ApiDiscoverySpec:` + strings.Replace(this.ApiDiscoverySpec.String(), "APIDiscoverySpec", "APIDiscoverySpec", 1) + `,`,
		`DataplaneId:` + strings.Replace(this.DataplaneId.String(), "DataplaneIdentifier", "DataplaneIdentifier", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *WAFSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WAFSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WAFSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyFileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicyFileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityLogEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SecurityLogEnabled = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityLogFileNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityLogFileNames = append(m.SecurityLogFileNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APIDiscoverySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APIDiscoverySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APIDiscoverySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnablementMode = &APIDiscoverySpec_Disabled{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnablementMode = &APIDiscoverySpec_Enabled{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WafSpec == nil {
				m.WafSpec = &WAFSpec{}
			}
			if err := m.WafSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiDiscoverySpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiDiscoverySpec == nil {
				m.ApiDiscoverySpec = &APIDiscoverySpec{}
			}
			if err := m.ApiDiscoverySpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataplaneId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DataplaneId == nil {
				m.DataplaneId = &DataplaneIdentifier{}
			}
			if err := m.DataplaneId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataplaneIdentifier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataplaneIdentifier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataplaneIdentifier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceObjectId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataplaneId = &DataplaneIdentifier_InstanceObjectId{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterObjectId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataplaneId = &DataplaneIdentifier_ClusterObjectId{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WafSpec == nil {
				m.WafSpec = &WAFSpec{}
			}
			if err := m.WafSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiDiscoverySpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiDiscoverySpec == nil {
				m.ApiDiscoverySpec = &APIDiscoverySpec{}
			}
			if err := m.ApiDiscoverySpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataplaneId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DataplaneId == nil {
				m.DataplaneId = &DataplaneIdentifier{}
			}
			if err := m.DataplaneId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

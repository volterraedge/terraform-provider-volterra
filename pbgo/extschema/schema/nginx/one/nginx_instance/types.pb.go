// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/nginx/one/nginx_instance/types.proto

package nginx_instance

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type WAFSpec struct {
	// policy_file_name
	//
	// x-displayName: "WAF Policy File Name"
	// x-required
	// Policy file name for WAF
	PolicyFileName string `protobuf:"bytes,1,opt,name=policy_file_name,json=policyFileName,proto3" json:"policy_file_name,omitempty"`
	// security_log_enabled
	//
	// x-displayName: "WAF Log Enabled"
	// Specifies if security logging is enabled
	SecurityLogEnabled bool `protobuf:"varint,2,opt,name=security_log_enabled,json=securityLogEnabled,proto3" json:"security_log_enabled,omitempty"`
	// security_log_file_names
	//
	// x-displayName: "WAF Log File Names"
	// Specifies the list of security log files specification
	SecurityLogFileNames []string `protobuf:"bytes,3,rep,name=security_log_file_names,json=securityLogFileNames,proto3" json:"security_log_file_names,omitempty"`
	// waf_mode
	//
	// x-displayName: "WAF Mode"
	// x-required
	// Specifies the mode in which WAF is setup
	//
	// Types that are valid to be assigned to WafMode:
	//	*WAFSpec_NoneWafMode
	//	*WAFSpec_MonitoringWafMode
	//	*WAFSpec_BlockingWafMode
	WafMode isWAFSpec_WafMode `protobuf_oneof:"waf_mode"`
	// policy_management_platform
	//
	// x-displayName: "Policy Management Platform"
	// x-required
	// Specifies the platform that manages related WAF policies
	//
	// Types that are valid to be assigned to PolicyManagementPlatform:
	//	*WAFSpec_NginxPolicyManagement
	//	*WAFSpec_DistributedCloudPolicyManagement
	PolicyManagementPlatform isWAFSpec_PolicyManagementPlatform `protobuf_oneof:"policy_management_platform"`
}

func (m *WAFSpec) Reset()      { *m = WAFSpec{} }
func (*WAFSpec) ProtoMessage() {}
func (*WAFSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_81952ecda4aa273b, []int{0}
}
func (m *WAFSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WAFSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *WAFSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WAFSpec.Merge(m, src)
}
func (m *WAFSpec) XXX_Size() int {
	return m.Size()
}
func (m *WAFSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_WAFSpec.DiscardUnknown(m)
}

var xxx_messageInfo_WAFSpec proto.InternalMessageInfo

type isWAFSpec_WafMode interface {
	isWAFSpec_WafMode()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isWAFSpec_PolicyManagementPlatform interface {
	isWAFSpec_PolicyManagementPlatform()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type WAFSpec_NoneWafMode struct {
	NoneWafMode *schema.Empty `protobuf:"bytes,5,opt,name=none_waf_mode,json=noneWafMode,proto3,oneof" json:"none_waf_mode,omitempty"`
}
type WAFSpec_MonitoringWafMode struct {
	MonitoringWafMode *schema.Empty `protobuf:"bytes,6,opt,name=monitoring_waf_mode,json=monitoringWafMode,proto3,oneof" json:"monitoring_waf_mode,omitempty"`
}
type WAFSpec_BlockingWafMode struct {
	BlockingWafMode *schema.Empty `protobuf:"bytes,7,opt,name=blocking_waf_mode,json=blockingWafMode,proto3,oneof" json:"blocking_waf_mode,omitempty"`
}
type WAFSpec_NginxPolicyManagement struct {
	NginxPolicyManagement *schema.Empty `protobuf:"bytes,11,opt,name=nginx_policy_management,json=nginxPolicyManagement,proto3,oneof" json:"nginx_policy_management,omitempty"`
}
type WAFSpec_DistributedCloudPolicyManagement struct {
	DistributedCloudPolicyManagement *schema.Empty `protobuf:"bytes,12,opt,name=distributed_cloud_policy_management,json=distributedCloudPolicyManagement,proto3,oneof" json:"distributed_cloud_policy_management,omitempty"`
}

func (*WAFSpec_NoneWafMode) isWAFSpec_WafMode()                                       {}
func (*WAFSpec_MonitoringWafMode) isWAFSpec_WafMode()                                 {}
func (*WAFSpec_BlockingWafMode) isWAFSpec_WafMode()                                   {}
func (*WAFSpec_NginxPolicyManagement) isWAFSpec_PolicyManagementPlatform()            {}
func (*WAFSpec_DistributedCloudPolicyManagement) isWAFSpec_PolicyManagementPlatform() {}

func (m *WAFSpec) GetWafMode() isWAFSpec_WafMode {
	if m != nil {
		return m.WafMode
	}
	return nil
}
func (m *WAFSpec) GetPolicyManagementPlatform() isWAFSpec_PolicyManagementPlatform {
	if m != nil {
		return m.PolicyManagementPlatform
	}
	return nil
}

func (m *WAFSpec) GetPolicyFileName() string {
	if m != nil {
		return m.PolicyFileName
	}
	return ""
}

func (m *WAFSpec) GetSecurityLogEnabled() bool {
	if m != nil {
		return m.SecurityLogEnabled
	}
	return false
}

func (m *WAFSpec) GetSecurityLogFileNames() []string {
	if m != nil {
		return m.SecurityLogFileNames
	}
	return nil
}

func (m *WAFSpec) GetNoneWafMode() *schema.Empty {
	if x, ok := m.GetWafMode().(*WAFSpec_NoneWafMode); ok {
		return x.NoneWafMode
	}
	return nil
}

func (m *WAFSpec) GetMonitoringWafMode() *schema.Empty {
	if x, ok := m.GetWafMode().(*WAFSpec_MonitoringWafMode); ok {
		return x.MonitoringWafMode
	}
	return nil
}

func (m *WAFSpec) GetBlockingWafMode() *schema.Empty {
	if x, ok := m.GetWafMode().(*WAFSpec_BlockingWafMode); ok {
		return x.BlockingWafMode
	}
	return nil
}

func (m *WAFSpec) GetNginxPolicyManagement() *schema.Empty {
	if x, ok := m.GetPolicyManagementPlatform().(*WAFSpec_NginxPolicyManagement); ok {
		return x.NginxPolicyManagement
	}
	return nil
}

func (m *WAFSpec) GetDistributedCloudPolicyManagement() *schema.Empty {
	if x, ok := m.GetPolicyManagementPlatform().(*WAFSpec_DistributedCloudPolicyManagement); ok {
		return x.DistributedCloudPolicyManagement
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*WAFSpec) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*WAFSpec_NoneWafMode)(nil),
		(*WAFSpec_MonitoringWafMode)(nil),
		(*WAFSpec_BlockingWafMode)(nil),
		(*WAFSpec_NginxPolicyManagement)(nil),
		(*WAFSpec_DistributedCloudPolicyManagement)(nil),
	}
}

type APIDiscoverySpec struct {
	// enablement_mode
	//
	// x-displayName: "Enablement Mode"
	// x-required
	// Enforcement mode for the API Discovery policy
	//
	// Types that are valid to be assigned to EnablementMode:
	//	*APIDiscoverySpec_Disabled
	//	*APIDiscoverySpec_Enabled
	EnablementMode isAPIDiscoverySpec_EnablementMode `protobuf_oneof:"enablement_mode"`
}

func (m *APIDiscoverySpec) Reset()      { *m = APIDiscoverySpec{} }
func (*APIDiscoverySpec) ProtoMessage() {}
func (*APIDiscoverySpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_81952ecda4aa273b, []int{1}
}
func (m *APIDiscoverySpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *APIDiscoverySpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *APIDiscoverySpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APIDiscoverySpec.Merge(m, src)
}
func (m *APIDiscoverySpec) XXX_Size() int {
	return m.Size()
}
func (m *APIDiscoverySpec) XXX_DiscardUnknown() {
	xxx_messageInfo_APIDiscoverySpec.DiscardUnknown(m)
}

var xxx_messageInfo_APIDiscoverySpec proto.InternalMessageInfo

type isAPIDiscoverySpec_EnablementMode interface {
	isAPIDiscoverySpec_EnablementMode()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type APIDiscoverySpec_Disabled struct {
	Disabled *schema.Empty `protobuf:"bytes,2,opt,name=disabled,proto3,oneof" json:"disabled,omitempty"`
}
type APIDiscoverySpec_Enabled struct {
	Enabled *schema.Empty `protobuf:"bytes,3,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
}

func (*APIDiscoverySpec_Disabled) isAPIDiscoverySpec_EnablementMode() {}
func (*APIDiscoverySpec_Enabled) isAPIDiscoverySpec_EnablementMode()  {}

func (m *APIDiscoverySpec) GetEnablementMode() isAPIDiscoverySpec_EnablementMode {
	if m != nil {
		return m.EnablementMode
	}
	return nil
}

func (m *APIDiscoverySpec) GetDisabled() *schema.Empty {
	if x, ok := m.GetEnablementMode().(*APIDiscoverySpec_Disabled); ok {
		return x.Disabled
	}
	return nil
}

func (m *APIDiscoverySpec) GetEnabled() *schema.Empty {
	if x, ok := m.GetEnablementMode().(*APIDiscoverySpec_Enabled); ok {
		return x.Enabled
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*APIDiscoverySpec) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*APIDiscoverySpec_Disabled)(nil),
		(*APIDiscoverySpec_Enabled)(nil),
	}
}

// GlobalSpecType
//
// x-displayName: "Specification"
type GlobalSpecType struct {
	// wafSpec
	//
	// x-displayName: "WAFSpec"
	// If specified, the value signifies the WAF configuration in the global context
	WafSpec *WAFSpec `protobuf:"bytes,4,opt,name=waf_spec,json=wafSpec,proto3" json:"waf_spec,omitempty"`
	// apiDiscoverySpec
	//
	// x-displayName: "APIDiscoverySpec"
	// If specified, the value signifies the apiDiscovery configuration
	// in the global context
	ApiDiscoverySpec *APIDiscoverySpec `protobuf:"bytes,5,opt,name=api_discovery_spec,json=apiDiscoverySpec,proto3" json:"api_discovery_spec,omitempty"`
	// objectId
	//
	// x-displayName: "ObjectId"
	// Identifier for individual instance in NGINX One
	ObjectId string `protobuf:"bytes,9,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_81952ecda4aa273b, []int{2}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

func (m *GlobalSpecType) GetWafSpec() *WAFSpec {
	if m != nil {
		return m.WafSpec
	}
	return nil
}

func (m *GlobalSpecType) GetApiDiscoverySpec() *APIDiscoverySpec {
	if m != nil {
		return m.ApiDiscoverySpec
	}
	return nil
}

func (m *GlobalSpecType) GetObjectId() string {
	if m != nil {
		return m.ObjectId
	}
	return ""
}

// Get NGINX instance configuration
//
// x-displayName: "Get Request"
// Get NGINX instance configuration
type GetSpecType struct {
	WafSpec          *WAFSpec          `protobuf:"bytes,4,opt,name=waf_spec,json=wafSpec,proto3" json:"waf_spec,omitempty"`
	ApiDiscoverySpec *APIDiscoverySpec `protobuf:"bytes,5,opt,name=api_discovery_spec,json=apiDiscoverySpec,proto3" json:"api_discovery_spec,omitempty"`
	ObjectId         string            `protobuf:"bytes,9,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_81952ecda4aa273b, []int{3}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

func (m *GetSpecType) GetWafSpec() *WAFSpec {
	if m != nil {
		return m.WafSpec
	}
	return nil
}

func (m *GetSpecType) GetApiDiscoverySpec() *APIDiscoverySpec {
	if m != nil {
		return m.ApiDiscoverySpec
	}
	return nil
}

func (m *GetSpecType) GetObjectId() string {
	if m != nil {
		return m.ObjectId
	}
	return ""
}

func init() {
	proto.RegisterType((*WAFSpec)(nil), "ves.io.schema.nginx.one.nginx_instance.WAFSpec")
	proto.RegisterType((*APIDiscoverySpec)(nil), "ves.io.schema.nginx.one.nginx_instance.APIDiscoverySpec")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.nginx.one.nginx_instance.GlobalSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.nginx.one.nginx_instance.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/nginx/one/nginx_instance/types.proto", fileDescriptor_81952ecda4aa273b)
}

var fileDescriptor_81952ecda4aa273b = []byte{
	// 774 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x95, 0x41, 0x6f, 0xe3, 0x44,
	0x14, 0xc7, 0x33, 0x89, 0xdb, 0x38, 0x13, 0xd8, 0x75, 0x4d, 0xd0, 0x86, 0x14, 0x99, 0x28, 0x48,
	0xab, 0x5c, 0x6a, 0xaf, 0x8a, 0x90, 0xd0, 0x1e, 0x90, 0x1a, 0x68, 0x4b, 0x2d, 0x5a, 0x55, 0x01,
	0xa9, 0x12, 0x42, 0xb2, 0xc6, 0xf6, 0x8b, 0x3b, 0xd4, 0x9e, 0xb1, 0xec, 0x49, 0xda, 0xdc, 0xb8,
	0x70, 0xe7, 0x02, 0x17, 0xbe, 0x00, 0xdf, 0x21, 0x17, 0x8e, 0x88, 0x53, 0x8e, 0x3d, 0x52, 0x57,
	0x48, 0x1c, 0xfb, 0x11, 0x50, 0xec, 0x38, 0x89, 0x53, 0x08, 0x3d, 0xef, 0x6d, 0xec, 0xff, 0xfb,
	0xff, 0xde, 0xbc, 0xe7, 0x37, 0x63, 0xbc, 0x3f, 0x82, 0x58, 0xa7, 0xdc, 0x88, 0x9d, 0x4b, 0x08,
	0x88, 0xc1, 0x3c, 0xca, 0x6e, 0x0c, 0xce, 0x20, 0x5b, 0x59, 0x94, 0xc5, 0x82, 0x30, 0x07, 0x0c,
	0x31, 0x0e, 0x21, 0xd6, 0xc3, 0x88, 0x0b, 0xae, 0xbe, 0xcc, 0x3c, 0x7a, 0xe6, 0xd1, 0xd3, 0x48,
	0x9d, 0x33, 0xd0, 0x8b, 0x9e, 0xd6, 0x9e, 0x47, 0xc5, 0xe5, 0xd0, 0xd6, 0x1d, 0x1e, 0x18, 0x1e,
	0xf7, 0xb8, 0x91, 0xda, 0xed, 0xe1, 0x20, 0x7d, 0x4a, 0x1f, 0xd2, 0x55, 0x86, 0x6d, 0xbd, 0xe7,
	0x71, 0xee, 0xf9, 0xb0, 0x8c, 0x22, 0x6c, 0x3c, 0x97, 0x76, 0x8b, 0xbb, 0xe4, 0xa1, 0xa0, 0x9c,
	0xc5, 0xb9, 0xaf, 0x28, 0xae, 0xec, 0xb4, 0xf5, 0x7e, 0x51, 0x1a, 0x11, 0x9f, 0xba, 0x44, 0xc0,
	0x5c, 0x6d, 0xaf, 0xa9, 0x14, 0xae, 0xad, 0x22, 0xfa, 0x83, 0xc7, 0x11, 0xf1, 0x6a, 0x82, 0xce,
	0x5f, 0x12, 0xae, 0x5e, 0x1c, 0x1c, 0x7d, 0x15, 0x82, 0xa3, 0x76, 0xb1, 0x12, 0x72, 0x9f, 0x3a,
	0x63, 0x6b, 0x40, 0x7d, 0xb0, 0x18, 0x09, 0xa0, 0x89, 0xda, 0xa8, 0x5b, 0xeb, 0x3f, 0xcb, 0xde,
	0x1f, 0x51, 0x1f, 0xce, 0x48, 0x00, 0xea, 0x2b, 0xdc, 0x88, 0xc1, 0x19, 0x46, 0x54, 0x8c, 0x2d,
	0x9f, 0x7b, 0x16, 0x30, 0x62, 0xfb, 0xe0, 0x36, 0xcb, 0x6d, 0xd4, 0x95, 0xfb, 0x6a, 0xae, 0x7d,
	0xc9, 0xbd, 0xc3, 0x4c, 0x51, 0x3f, 0xc6, 0x2f, 0x0a, 0x8e, 0x45, 0x86, 0xb8, 0x59, 0x69, 0x57,
	0xba, 0xb5, 0x7e, 0x63, 0xc5, 0x94, 0xe7, 0x89, 0xd5, 0xd7, 0xf8, 0x6d, 0xc6, 0x19, 0x58, 0xd7,
	0x64, 0x60, 0x05, 0xdc, 0x85, 0xe6, 0x56, 0x1b, 0x75, 0xeb, 0xfb, 0x0d, 0xbd, 0xf8, 0x05, 0x0f,
	0x83, 0x50, 0x8c, 0xbf, 0x28, 0xf5, 0xeb, 0xb3, 0xe0, 0x0b, 0x32, 0x38, 0xe5, 0x2e, 0xa8, 0x47,
	0xf8, 0x9d, 0x80, 0x33, 0x2a, 0x78, 0x44, 0x99, 0xb7, 0x24, 0x6c, 0x6f, 0x24, 0xec, 0x2c, 0x2d,
	0x39, 0xa7, 0x87, 0x77, 0x6c, 0x9f, 0x3b, 0x57, 0x05, 0x4a, 0x75, 0x23, 0xe5, 0x79, 0x6e, 0xc8,
	0x19, 0x67, 0xf8, 0x45, 0x36, 0x5b, 0xf3, 0x06, 0x07, 0x84, 0x11, 0x0f, 0x02, 0x60, 0xa2, 0x59,
	0xdf, 0x40, 0x42, 0xfd, 0x77, 0x53, 0xdb, 0x79, 0xea, 0x3a, 0x5d, 0x98, 0x54, 0xc0, 0x1f, 0xba,
	0x34, 0x16, 0x11, 0xb5, 0x87, 0x02, 0x5c, 0xcb, 0xf1, 0xf9, 0xd0, 0xfd, 0x17, 0xf6, 0x5b, 0x1b,
	0xd9, 0xed, 0x15, 0xc4, 0x67, 0x33, 0xc2, 0x7a, 0x9a, 0x5e, 0x03, 0xcb, 0x79, 0xc5, 0xaa, 0xfc,
	0xdb, 0x04, 0x6d, 0x4d, 0x27, 0x48, 0xea, 0xbd, 0xc4, 0xad, 0x47, 0xa9, 0xac, 0xd0, 0x27, 0x62,
	0xc0, 0xa3, 0x20, 0x8d, 0xab, 0x4f, 0x27, 0x08, 0x9b, 0x92, 0x2c, 0x29, 0x5b, 0xa6, 0x24, 0x63,
	0xa5, 0xde, 0xf9, 0x05, 0x61, 0xe5, 0xe0, 0xfc, 0xe4, 0x73, 0x1a, 0x3b, 0x7c, 0x04, 0xd1, 0x38,
	0x1d, 0xb8, 0x7d, 0x2c, 0xbb, 0x34, 0x5e, 0x8e, 0xce, 0x7f, 0x37, 0x74, 0x11, 0xa7, 0xbe, 0xc2,
	0xd5, 0x7c, 0xda, 0x2a, 0x1b, 0x2d, 0x79, 0x58, 0x6f, 0x17, 0x3f, 0xcf, 0x96, 0xe9, 0x3e, 0x17,
	0xb5, 0x94, 0xa7, 0x13, 0x84, 0x4c, 0x49, 0x46, 0x4a, 0xb9, 0xf3, 0x43, 0x19, 0x3f, 0x3b, 0xf6,
	0xb9, 0x4d, 0xfc, 0xd9, 0xbe, 0xbe, 0x1e, 0x87, 0xa0, 0x9a, 0x59, 0xe9, 0x71, 0x08, 0x4e, 0x53,
	0x4a, 0x13, 0x19, 0xfa, 0xd3, 0xae, 0x0d, 0x7d, 0x7e, 0x9e, 0xfa, 0xd5, 0x6b, 0x32, 0x48, 0xeb,
	0x1c, 0x60, 0x95, 0x84, 0xd4, 0x72, 0xf3, 0xe2, 0x33, 0x6a, 0x36, 0xca, 0x9f, 0x3c, 0x95, 0xba,
	0xde, 0xbd, 0xbe, 0x42, 0x42, 0x5a, 0xec, 0xe7, 0x2e, 0xae, 0x71, 0xfb, 0x3b, 0x70, 0x84, 0x45,
	0xdd, 0x66, 0x2d, 0x3d, 0xb9, 0x72, 0xf6, 0xe2, 0xc4, 0xcd, 0x2a, 0x35, 0x25, 0xb9, 0xac, 0x54,
	0x4c, 0x49, 0xae, 0x28, 0x92, 0x29, 0xc9, 0xdb, 0x4a, 0xd5, 0x94, 0xe4, 0xaa, 0x22, 0x9b, 0x92,
	0x2c, 0x2b, 0xb5, 0xce, 0x4f, 0x65, 0x5c, 0x3f, 0x06, 0xf1, 0xc6, 0x36, 0xe1, 0xf5, 0xce, 0x1f,
	0x9f, 0xae, 0x7d, 0xe8, 0xa7, 0xf4, 0xa5, 0xf7, 0x33, 0x9a, 0xde, 0x69, 0xa5, 0xdb, 0x3b, 0xad,
	0xf4, 0x70, 0xa7, 0xa1, 0xef, 0x13, 0x0d, 0xfd, 0x9a, 0x68, 0xe8, 0xf7, 0x44, 0x43, 0xd3, 0x44,
	0x43, 0xb7, 0x89, 0x86, 0xfe, 0x4c, 0x34, 0xf4, 0x77, 0xa2, 0x95, 0x1e, 0x12, 0x0d, 0xfd, 0x78,
	0xaf, 0x95, 0xa6, 0xf7, 0x5a, 0xe9, 0xf6, 0x5e, 0x2b, 0x7d, 0xf3, 0xad, 0xc7, 0xc3, 0x2b, 0x4f,
	0x1f, 0x71, 0x5f, 0x40, 0x14, 0x11, 0x7d, 0x18, 0x1b, 0xe9, 0x62, 0x76, 0x56, 0xf6, 0xc2, 0x88,
	0x8f, 0xa8, 0x0b, 0xd1, 0x5e, 0x2e, 0x1b, 0xa1, 0xed, 0x71, 0x03, 0x6e, 0xc4, 0xfc, 0xc2, 0xfe,
	0x9f, 0xbf, 0x9a, 0xbd, 0x9d, 0xde, 0xe2, 0x1f, 0xfd, 0x13, 0x00, 0x00, 0xff, 0xff, 0x5c, 0x88,
	0xcb, 0x05, 0x06, 0x07, 0x00, 0x00,
}

func (this *WAFSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WAFSpec)
	if !ok {
		that2, ok := that.(WAFSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PolicyFileName != that1.PolicyFileName {
		return false
	}
	if this.SecurityLogEnabled != that1.SecurityLogEnabled {
		return false
	}
	if len(this.SecurityLogFileNames) != len(that1.SecurityLogFileNames) {
		return false
	}
	for i := range this.SecurityLogFileNames {
		if this.SecurityLogFileNames[i] != that1.SecurityLogFileNames[i] {
			return false
		}
	}
	if that1.WafMode == nil {
		if this.WafMode != nil {
			return false
		}
	} else if this.WafMode == nil {
		return false
	} else if !this.WafMode.Equal(that1.WafMode) {
		return false
	}
	if that1.PolicyManagementPlatform == nil {
		if this.PolicyManagementPlatform != nil {
			return false
		}
	} else if this.PolicyManagementPlatform == nil {
		return false
	} else if !this.PolicyManagementPlatform.Equal(that1.PolicyManagementPlatform) {
		return false
	}
	return true
}
func (this *WAFSpec_NoneWafMode) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WAFSpec_NoneWafMode)
	if !ok {
		that2, ok := that.(WAFSpec_NoneWafMode)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoneWafMode.Equal(that1.NoneWafMode) {
		return false
	}
	return true
}
func (this *WAFSpec_MonitoringWafMode) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WAFSpec_MonitoringWafMode)
	if !ok {
		that2, ok := that.(WAFSpec_MonitoringWafMode)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MonitoringWafMode.Equal(that1.MonitoringWafMode) {
		return false
	}
	return true
}
func (this *WAFSpec_BlockingWafMode) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WAFSpec_BlockingWafMode)
	if !ok {
		that2, ok := that.(WAFSpec_BlockingWafMode)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BlockingWafMode.Equal(that1.BlockingWafMode) {
		return false
	}
	return true
}
func (this *WAFSpec_NginxPolicyManagement) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WAFSpec_NginxPolicyManagement)
	if !ok {
		that2, ok := that.(WAFSpec_NginxPolicyManagement)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NginxPolicyManagement.Equal(that1.NginxPolicyManagement) {
		return false
	}
	return true
}
func (this *WAFSpec_DistributedCloudPolicyManagement) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WAFSpec_DistributedCloudPolicyManagement)
	if !ok {
		that2, ok := that.(WAFSpec_DistributedCloudPolicyManagement)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DistributedCloudPolicyManagement.Equal(that1.DistributedCloudPolicyManagement) {
		return false
	}
	return true
}
func (this *APIDiscoverySpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIDiscoverySpec)
	if !ok {
		that2, ok := that.(APIDiscoverySpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.EnablementMode == nil {
		if this.EnablementMode != nil {
			return false
		}
	} else if this.EnablementMode == nil {
		return false
	} else if !this.EnablementMode.Equal(that1.EnablementMode) {
		return false
	}
	return true
}
func (this *APIDiscoverySpec_Disabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIDiscoverySpec_Disabled)
	if !ok {
		that2, ok := that.(APIDiscoverySpec_Disabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Disabled.Equal(that1.Disabled) {
		return false
	}
	return true
}
func (this *APIDiscoverySpec_Enabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIDiscoverySpec_Enabled)
	if !ok {
		that2, ok := that.(APIDiscoverySpec_Enabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Enabled.Equal(that1.Enabled) {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.WafSpec.Equal(that1.WafSpec) {
		return false
	}
	if !this.ApiDiscoverySpec.Equal(that1.ApiDiscoverySpec) {
		return false
	}
	if this.ObjectId != that1.ObjectId {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.WafSpec.Equal(that1.WafSpec) {
		return false
	}
	if !this.ApiDiscoverySpec.Equal(that1.ApiDiscoverySpec) {
		return false
	}
	if this.ObjectId != that1.ObjectId {
		return false
	}
	return true
}
func (this *WAFSpec) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&nginx_instance.WAFSpec{")
	s = append(s, "PolicyFileName: "+fmt.Sprintf("%#v", this.PolicyFileName)+",\n")
	s = append(s, "SecurityLogEnabled: "+fmt.Sprintf("%#v", this.SecurityLogEnabled)+",\n")
	s = append(s, "SecurityLogFileNames: "+fmt.Sprintf("%#v", this.SecurityLogFileNames)+",\n")
	if this.WafMode != nil {
		s = append(s, "WafMode: "+fmt.Sprintf("%#v", this.WafMode)+",\n")
	}
	if this.PolicyManagementPlatform != nil {
		s = append(s, "PolicyManagementPlatform: "+fmt.Sprintf("%#v", this.PolicyManagementPlatform)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WAFSpec_NoneWafMode) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nginx_instance.WAFSpec_NoneWafMode{` +
		`NoneWafMode:` + fmt.Sprintf("%#v", this.NoneWafMode) + `}`}, ", ")
	return s
}
func (this *WAFSpec_MonitoringWafMode) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nginx_instance.WAFSpec_MonitoringWafMode{` +
		`MonitoringWafMode:` + fmt.Sprintf("%#v", this.MonitoringWafMode) + `}`}, ", ")
	return s
}
func (this *WAFSpec_BlockingWafMode) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nginx_instance.WAFSpec_BlockingWafMode{` +
		`BlockingWafMode:` + fmt.Sprintf("%#v", this.BlockingWafMode) + `}`}, ", ")
	return s
}
func (this *WAFSpec_NginxPolicyManagement) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nginx_instance.WAFSpec_NginxPolicyManagement{` +
		`NginxPolicyManagement:` + fmt.Sprintf("%#v", this.NginxPolicyManagement) + `}`}, ", ")
	return s
}
func (this *WAFSpec_DistributedCloudPolicyManagement) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nginx_instance.WAFSpec_DistributedCloudPolicyManagement{` +
		`DistributedCloudPolicyManagement:` + fmt.Sprintf("%#v", this.DistributedCloudPolicyManagement) + `}`}, ", ")
	return s
}
func (this *APIDiscoverySpec) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&nginx_instance.APIDiscoverySpec{")
	if this.EnablementMode != nil {
		s = append(s, "EnablementMode: "+fmt.Sprintf("%#v", this.EnablementMode)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *APIDiscoverySpec_Disabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nginx_instance.APIDiscoverySpec_Disabled{` +
		`Disabled:` + fmt.Sprintf("%#v", this.Disabled) + `}`}, ", ")
	return s
}
func (this *APIDiscoverySpec_Enabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&nginx_instance.APIDiscoverySpec_Enabled{` +
		`Enabled:` + fmt.Sprintf("%#v", this.Enabled) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&nginx_instance.GlobalSpecType{")
	if this.WafSpec != nil {
		s = append(s, "WafSpec: "+fmt.Sprintf("%#v", this.WafSpec)+",\n")
	}
	if this.ApiDiscoverySpec != nil {
		s = append(s, "ApiDiscoverySpec: "+fmt.Sprintf("%#v", this.ApiDiscoverySpec)+",\n")
	}
	s = append(s, "ObjectId: "+fmt.Sprintf("%#v", this.ObjectId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&nginx_instance.GetSpecType{")
	if this.WafSpec != nil {
		s = append(s, "WafSpec: "+fmt.Sprintf("%#v", this.WafSpec)+",\n")
	}
	if this.ApiDiscoverySpec != nil {
		s = append(s, "ApiDiscoverySpec: "+fmt.Sprintf("%#v", this.ApiDiscoverySpec)+",\n")
	}
	s = append(s, "ObjectId: "+fmt.Sprintf("%#v", this.ObjectId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *WAFSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WAFSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WAFSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PolicyManagementPlatform != nil {
		{
			size := m.PolicyManagementPlatform.Size()
			i -= size
			if _, err := m.PolicyManagementPlatform.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.WafMode != nil {
		{
			size := m.WafMode.Size()
			i -= size
			if _, err := m.WafMode.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.SecurityLogFileNames) > 0 {
		for iNdEx := len(m.SecurityLogFileNames) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SecurityLogFileNames[iNdEx])
			copy(dAtA[i:], m.SecurityLogFileNames[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.SecurityLogFileNames[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.SecurityLogEnabled {
		i--
		if m.SecurityLogEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.PolicyFileName) > 0 {
		i -= len(m.PolicyFileName)
		copy(dAtA[i:], m.PolicyFileName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.PolicyFileName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WAFSpec_NoneWafMode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WAFSpec_NoneWafMode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoneWafMode != nil {
		{
			size, err := m.NoneWafMode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *WAFSpec_MonitoringWafMode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WAFSpec_MonitoringWafMode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MonitoringWafMode != nil {
		{
			size, err := m.MonitoringWafMode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *WAFSpec_BlockingWafMode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WAFSpec_BlockingWafMode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockingWafMode != nil {
		{
			size, err := m.BlockingWafMode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *WAFSpec_NginxPolicyManagement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WAFSpec_NginxPolicyManagement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NginxPolicyManagement != nil {
		{
			size, err := m.NginxPolicyManagement.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *WAFSpec_DistributedCloudPolicyManagement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WAFSpec_DistributedCloudPolicyManagement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DistributedCloudPolicyManagement != nil {
		{
			size, err := m.DistributedCloudPolicyManagement.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *APIDiscoverySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APIDiscoverySpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APIDiscoverySpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EnablementMode != nil {
		{
			size := m.EnablementMode.Size()
			i -= size
			if _, err := m.EnablementMode.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *APIDiscoverySpec_Disabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APIDiscoverySpec_Disabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Disabled != nil {
		{
			size, err := m.Disabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *APIDiscoverySpec_Enabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APIDiscoverySpec_Enabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Enabled != nil {
		{
			size, err := m.Enabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ObjectId) > 0 {
		i -= len(m.ObjectId)
		copy(dAtA[i:], m.ObjectId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ObjectId)))
		i--
		dAtA[i] = 0x4a
	}
	if m.ApiDiscoverySpec != nil {
		{
			size, err := m.ApiDiscoverySpec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.WafSpec != nil {
		{
			size, err := m.WafSpec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ObjectId) > 0 {
		i -= len(m.ObjectId)
		copy(dAtA[i:], m.ObjectId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ObjectId)))
		i--
		dAtA[i] = 0x4a
	}
	if m.ApiDiscoverySpec != nil {
		{
			size, err := m.ApiDiscoverySpec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.WafSpec != nil {
		{
			size, err := m.WafSpec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WAFSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PolicyFileName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.SecurityLogEnabled {
		n += 2
	}
	if len(m.SecurityLogFileNames) > 0 {
		for _, s := range m.SecurityLogFileNames {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.WafMode != nil {
		n += m.WafMode.Size()
	}
	if m.PolicyManagementPlatform != nil {
		n += m.PolicyManagementPlatform.Size()
	}
	return n
}

func (m *WAFSpec_NoneWafMode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoneWafMode != nil {
		l = m.NoneWafMode.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *WAFSpec_MonitoringWafMode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MonitoringWafMode != nil {
		l = m.MonitoringWafMode.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *WAFSpec_BlockingWafMode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockingWafMode != nil {
		l = m.BlockingWafMode.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *WAFSpec_NginxPolicyManagement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NginxPolicyManagement != nil {
		l = m.NginxPolicyManagement.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *WAFSpec_DistributedCloudPolicyManagement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DistributedCloudPolicyManagement != nil {
		l = m.DistributedCloudPolicyManagement.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *APIDiscoverySpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnablementMode != nil {
		n += m.EnablementMode.Size()
	}
	return n
}

func (m *APIDiscoverySpec_Disabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Disabled != nil {
		l = m.Disabled.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *APIDiscoverySpec_Enabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled != nil {
		l = m.Enabled.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WafSpec != nil {
		l = m.WafSpec.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ApiDiscoverySpec != nil {
		l = m.ApiDiscoverySpec.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ObjectId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WafSpec != nil {
		l = m.WafSpec.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ApiDiscoverySpec != nil {
		l = m.ApiDiscoverySpec.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ObjectId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *WAFSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WAFSpec{`,
		`PolicyFileName:` + fmt.Sprintf("%v", this.PolicyFileName) + `,`,
		`SecurityLogEnabled:` + fmt.Sprintf("%v", this.SecurityLogEnabled) + `,`,
		`SecurityLogFileNames:` + fmt.Sprintf("%v", this.SecurityLogFileNames) + `,`,
		`WafMode:` + fmt.Sprintf("%v", this.WafMode) + `,`,
		`PolicyManagementPlatform:` + fmt.Sprintf("%v", this.PolicyManagementPlatform) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WAFSpec_NoneWafMode) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WAFSpec_NoneWafMode{`,
		`NoneWafMode:` + strings.Replace(fmt.Sprintf("%v", this.NoneWafMode), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WAFSpec_MonitoringWafMode) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WAFSpec_MonitoringWafMode{`,
		`MonitoringWafMode:` + strings.Replace(fmt.Sprintf("%v", this.MonitoringWafMode), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WAFSpec_BlockingWafMode) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WAFSpec_BlockingWafMode{`,
		`BlockingWafMode:` + strings.Replace(fmt.Sprintf("%v", this.BlockingWafMode), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WAFSpec_NginxPolicyManagement) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WAFSpec_NginxPolicyManagement{`,
		`NginxPolicyManagement:` + strings.Replace(fmt.Sprintf("%v", this.NginxPolicyManagement), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WAFSpec_DistributedCloudPolicyManagement) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WAFSpec_DistributedCloudPolicyManagement{`,
		`DistributedCloudPolicyManagement:` + strings.Replace(fmt.Sprintf("%v", this.DistributedCloudPolicyManagement), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIDiscoverySpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&APIDiscoverySpec{`,
		`EnablementMode:` + fmt.Sprintf("%v", this.EnablementMode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIDiscoverySpec_Disabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&APIDiscoverySpec_Disabled{`,
		`Disabled:` + strings.Replace(fmt.Sprintf("%v", this.Disabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIDiscoverySpec_Enabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&APIDiscoverySpec_Enabled{`,
		`Enabled:` + strings.Replace(fmt.Sprintf("%v", this.Enabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`WafSpec:` + strings.Replace(this.WafSpec.String(), "WAFSpec", "WAFSpec", 1) + `,`,
		`ApiDiscoverySpec:` + strings.Replace(this.ApiDiscoverySpec.String(), "APIDiscoverySpec", "APIDiscoverySpec", 1) + `,`,
		`ObjectId:` + fmt.Sprintf("%v", this.ObjectId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`WafSpec:` + strings.Replace(this.WafSpec.String(), "WAFSpec", "WAFSpec", 1) + `,`,
		`ApiDiscoverySpec:` + strings.Replace(this.ApiDiscoverySpec.String(), "APIDiscoverySpec", "APIDiscoverySpec", 1) + `,`,
		`ObjectId:` + fmt.Sprintf("%v", this.ObjectId) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *WAFSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WAFSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WAFSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyFileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicyFileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityLogEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SecurityLogEnabled = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityLogFileNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityLogFileNames = append(m.SecurityLogFileNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoneWafMode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafMode = &WAFSpec_NoneWafMode{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonitoringWafMode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafMode = &WAFSpec_MonitoringWafMode{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockingWafMode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafMode = &WAFSpec_BlockingWafMode{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NginxPolicyManagement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PolicyManagementPlatform = &WAFSpec_NginxPolicyManagement{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributedCloudPolicyManagement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PolicyManagementPlatform = &WAFSpec_DistributedCloudPolicyManagement{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APIDiscoverySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APIDiscoverySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APIDiscoverySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnablementMode = &APIDiscoverySpec_Disabled{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnablementMode = &APIDiscoverySpec_Enabled{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WafSpec == nil {
				m.WafSpec = &WAFSpec{}
			}
			if err := m.WafSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiDiscoverySpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiDiscoverySpec == nil {
				m.ApiDiscoverySpec = &APIDiscoverySpec{}
			}
			if err := m.ApiDiscoverySpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjectId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WafSpec == nil {
				m.WafSpec = &WAFSpec{}
			}
			if err := m.WafSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiDiscoverySpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiDiscoverySpec == nil {
				m.ApiDiscoverySpec = &APIDiscoverySpec{}
			}
			if err := m.ApiDiscoverySpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjectId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package nginx_instance

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *APIDiscoverySpec) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *APIDiscoverySpec) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *APIDiscoverySpec) DeepCopy() *APIDiscoverySpec {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &APIDiscoverySpec{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *APIDiscoverySpec) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *APIDiscoverySpec) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return APIDiscoverySpecValidator().Validate(ctx, m, opts...)
}

type ValidateAPIDiscoverySpec struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAPIDiscoverySpec) EnablementModeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for enablement_mode")
	}
	return validatorFn, nil
}

func (v *ValidateAPIDiscoverySpec) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*APIDiscoverySpec)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *APIDiscoverySpec got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["enablement_mode"]; exists {
		val := m.GetEnablementMode()
		vOpts := append(opts,
			db.WithValidateField("enablement_mode"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetEnablementMode().(type) {
	case *APIDiscoverySpec_Disabled:
		if fv, exists := v.FldValidators["enablement_mode.disabled"]; exists {
			val := m.GetEnablementMode().(*APIDiscoverySpec_Disabled).Disabled
			vOpts := append(opts,
				db.WithValidateField("enablement_mode"),
				db.WithValidateField("disabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *APIDiscoverySpec_Enabled:
		if fv, exists := v.FldValidators["enablement_mode.enabled"]; exists {
			val := m.GetEnablementMode().(*APIDiscoverySpec_Enabled).Enabled
			vOpts := append(opts,
				db.WithValidateField("enablement_mode"),
				db.WithValidateField("enabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAPIDiscoverySpecValidator = func() *ValidateAPIDiscoverySpec {
	v := &ValidateAPIDiscoverySpec{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhEnablementMode := v.EnablementModeValidationRuleHandler
	rulesEnablementMode := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhEnablementMode(rulesEnablementMode)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for APIDiscoverySpec.enablement_mode: %s", err)
		panic(errMsg)
	}
	v.FldValidators["enablement_mode"] = vFn

	return v
}()

func APIDiscoverySpecValidator() db.Validator {
	return DefaultAPIDiscoverySpecValidator
}

// augmented methods on protoc/std generated struct

func (m *DataplaneIdentifier) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DataplaneIdentifier) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DataplaneIdentifier) DeepCopy() *DataplaneIdentifier {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DataplaneIdentifier{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DataplaneIdentifier) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DataplaneIdentifier) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DataplaneIdentifierValidator().Validate(ctx, m, opts...)
}

type ValidateDataplaneIdentifier struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDataplaneIdentifier) DataplaneIdValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for dataplane_id")
	}
	return validatorFn, nil
}

func (v *ValidateDataplaneIdentifier) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DataplaneIdentifier)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DataplaneIdentifier got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["dataplane_id"]; exists {
		val := m.GetDataplaneId()
		vOpts := append(opts,
			db.WithValidateField("dataplane_id"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDataplaneId().(type) {
	case *DataplaneIdentifier_InstanceObjectId:
		if fv, exists := v.FldValidators["dataplane_id.instance_object_id"]; exists {
			val := m.GetDataplaneId().(*DataplaneIdentifier_InstanceObjectId).InstanceObjectId
			vOpts := append(opts,
				db.WithValidateField("dataplane_id"),
				db.WithValidateField("instance_object_id"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *DataplaneIdentifier_CsgObjectId:
		if fv, exists := v.FldValidators["dataplane_id.csg_object_id"]; exists {
			val := m.GetDataplaneId().(*DataplaneIdentifier_CsgObjectId).CsgObjectId
			vOpts := append(opts,
				db.WithValidateField("dataplane_id"),
				db.WithValidateField("csg_object_id"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDataplaneIdentifierValidator = func() *ValidateDataplaneIdentifier {
	v := &ValidateDataplaneIdentifier{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDataplaneId := v.DataplaneIdValidationRuleHandler
	rulesDataplaneId := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDataplaneId(rulesDataplaneId)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DataplaneIdentifier.dataplane_id: %s", err)
		panic(errMsg)
	}
	v.FldValidators["dataplane_id"] = vFn

	return v
}()

func DataplaneIdentifierValidator() db.Validator {
	return DefaultDataplaneIdentifierValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["api_discovery_spec"]; exists {

		vOpts := append(opts, db.WithValidateField("api_discovery_spec"))
		if err := fv(ctx, m.GetApiDiscoverySpec(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["dataplane_id"]; exists {

		vOpts := append(opts, db.WithValidateField("dataplane_id"))
		if err := fv(ctx, m.GetDataplaneId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["waf_spec"]; exists {

		vOpts := append(opts, db.WithValidateField("waf_spec"))
		if err := fv(ctx, m.GetWafSpec(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["waf_spec"] = WAFSpecValidator().Validate

	v.FldValidators["api_discovery_spec"] = APIDiscoverySpecValidator().Validate

	v.FldValidators["dataplane_id"] = DataplaneIdentifierValidator().Validate

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["api_discovery_spec"]; exists {

		vOpts := append(opts, db.WithValidateField("api_discovery_spec"))
		if err := fv(ctx, m.GetApiDiscoverySpec(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["dataplane_id"]; exists {

		vOpts := append(opts, db.WithValidateField("dataplane_id"))
		if err := fv(ctx, m.GetDataplaneId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["waf_spec"]; exists {

		vOpts := append(opts, db.WithValidateField("waf_spec"))
		if err := fv(ctx, m.GetWafSpec(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["waf_spec"] = WAFSpecValidator().Validate

	v.FldValidators["api_discovery_spec"] = APIDiscoverySpecValidator().Validate

	v.FldValidators["dataplane_id"] = DataplaneIdentifierValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *WAFSpec) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *WAFSpec) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *WAFSpec) DeepCopy() *WAFSpec {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &WAFSpec{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *WAFSpec) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *WAFSpec) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return WAFSpecValidator().Validate(ctx, m, opts...)
}

type ValidateWAFSpec struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateWAFSpec) PolicyFileNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for policy_file_name")
	}

	return validatorFn, nil
}

func (v *ValidateWAFSpec) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*WAFSpec)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *WAFSpec got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["policy_file_name"]; exists {

		vOpts := append(opts, db.WithValidateField("policy_file_name"))
		if err := fv(ctx, m.GetPolicyFileName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["security_log_enabled"]; exists {

		vOpts := append(opts, db.WithValidateField("security_log_enabled"))
		if err := fv(ctx, m.GetSecurityLogEnabled(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["security_log_file_names"]; exists {

		vOpts := append(opts, db.WithValidateField("security_log_file_names"))
		for idx, item := range m.GetSecurityLogFileNames() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultWAFSpecValidator = func() *ValidateWAFSpec {
	v := &ValidateWAFSpec{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhPolicyFileName := v.PolicyFileNameValidationRuleHandler
	rulesPolicyFileName := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhPolicyFileName(rulesPolicyFileName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for WAFSpec.policy_file_name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["policy_file_name"] = vFn

	return v
}()

func WAFSpecValidator() db.Validator {
	return DefaultWAFSpecValidator
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.ApiDiscoverySpec = f.GetApiDiscoverySpec()
	m.DataplaneId = f.GetDataplaneId()
	m.WafSpec = f.GetWafSpec()
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.ApiDiscoverySpec = m1.ApiDiscoverySpec
	f.DataplaneId = m1.DataplaneId
	f.WafSpec = m1.WafSpec
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}
